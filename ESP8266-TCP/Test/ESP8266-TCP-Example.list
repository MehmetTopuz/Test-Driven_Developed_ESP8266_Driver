
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020508  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005230  080206e8  080206e8  000306e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025918  08025918  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08025918  08025918  00035918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025920  08025920  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08025920  08025920  00035920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08025930  08025930  00035930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08025940  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  2000033c  08025c7c  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  08025c7c  00040d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066a1c  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bfc6  00000000  00000000  000a6d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000040b8  00000000  00000000  000b2d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003e98  00000000  00000000  000b6e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d750  00000000  00000000  000baca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c127  00000000  00000000  000e83f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ee7f  00000000  00000000  00114517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00223396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013970  00000000  00000000  002233ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00236d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00236d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080206d0 	.word	0x080206d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	080206d0 	.word	0x080206d0

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003fc 	.word	0x200003fc

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01b ffa6 	bl	801ccbc <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01b fefe 	bl	801ccbc <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000d88 	.word	0x20000d88

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01c fad5 	bl	801d4f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fe27 	bl	8003ba0 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08025940 	.word	0x08025940
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000d84 	.word	0x20000d84

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000d70 	.word	0x20000d70
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000d70 	.word	0x20000d70

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08023450 	.word	0x08023450
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08023460 	.word	0x08023460

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08023460 	.word	0x08023460

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08023468 	.word	0x08023468
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08023480 	.word	0x08023480
 8003904:	08023488 	.word	0x08023488

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f84a 	bl	80039d4 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	2000048c 	.word	0x2000048c

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f85c 	bl	8003a56 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	2000048c 	.word	0x2000048c

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f8cc 	bl	8003b5c <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000048c 	.word	0x2000048c

080039d4 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 80039dc:	2010      	movs	r0, #16
 80039de:	f019 ff2d 	bl	801d83c <malloc>
 80039e2:	4603      	mov	r3, r0
 80039e4:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e017      	b.n	8003a20 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003a02:	2101      	movs	r1, #1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f019 f951 	bl	801ccac <calloc>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f019 ff02 	bl	801d84c <free>
		}
		free(buffer);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f019 feff 	bl	801d84c <free>
	}
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d00c      	beq.n	8003a8a <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4413      	add	r3, r2
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003a88:	e009      	b.n	8003a9e <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d00d      	beq.n	8003adc <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	605a      	str	r2, [r3, #4]
		return data;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	e00a      	b.n	8003af2 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]
		return data;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68d8      	ldr	r0, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2100      	movs	r1, #0
 8003b12:	f019 feb1 	bl	801d878 <memset>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e00a      	b.n	8003b44 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ff8c 	bl	8003a56 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	f7fc fb79 	bl	800023c <strlen>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d8ed      	bhi.n	8003b2e <ringBuffer_pushArray+0x10>
}
 8003b52:	bf00      	nop
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	6839      	ldr	r1, [r7, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f01a fdd9 	bl	801e724 <strstr>
 8003b72:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <ringBuffer_lookFor+0x22>
		return 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003b7e:	2300      	movs	r3, #0

}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ba6:	f7fd f9e2 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003baa:	f000 f81d 	bl	8003be8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bae:	f000 f951 	bl	8003e54 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003bb2:	f000 f891 	bl	8003cd8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003bb6:	f000 f8ed 	bl	8003d94 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <main+0x44>)
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc2:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003bc6:	463b      	mov	r3, r7
 8003bc8:	4619      	mov	r1, r3
 8003bca:	2002      	movs	r0, #2
 8003bcc:	f002 f8e4 	bl	8005d98 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd6:	f7fd fdc7 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003bda:	2064      	movs	r0, #100	; 0x64
 8003bdc:	f7fd fa38 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003be0:	e7f6      	b.n	8003bd0 <main+0x30>
 8003be2:	bf00      	nop
 8003be4:	080206f0 	.word	0x080206f0

08003be8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b0a8      	sub	sp, #160	; 0xa0
 8003bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003bf2:	2238      	movs	r2, #56	; 0x38
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f019 fe3e 	bl	801d878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	2254      	movs	r2, #84	; 0x54
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f019 fe30 	bl	801d878 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7fd fde3 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c26:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c28:	2340      	movs	r3, #64	; 0x40
 8003c2a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c32:	2302      	movs	r3, #2
 8003c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003c3e:	2355      	movs	r3, #85	; 0x55
 8003c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c44:	2302      	movs	r3, #2
 8003c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fd fe76 	bl	800194c <HAL_RCC_OscConfig>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003c70:	f000 f960 	bl	8003f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c74:	230f      	movs	r3, #15
 8003c76:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c80:	2300      	movs	r3, #0
 8003c82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c84:	2300      	movs	r3, #0
 8003c86:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c8c:	2104      	movs	r1, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe f974 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003ca4:	f000 f946 	bl	8003f34 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003ca8:	2321      	movs	r3, #33	; 0x21
 8003caa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003cac:	2300      	movs	r3, #0
 8003cae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fb7c 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003ccc:	f000 f932 	bl	8003f34 <Error_Handler>
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	37a0      	adds	r7, #160	; 0xa0
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003cdc:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cde:	4a2c      	ldr	r2, [pc, #176]	; (8003d90 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003ce0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ce8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cea:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003cf0:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003cf6:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003cfc:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cfe:	220c      	movs	r2, #12
 8003d00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003d1a:	481c      	ldr	r0, [pc, #112]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d1c:	f7fe fd96 	bl	800284c <HAL_UART_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003d30:	f000 f900 	bl	8003f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d34:	2100      	movs	r1, #0
 8003d36:	4815      	ldr	r0, [pc, #84]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d38:	f7ff fd1c 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003d4c:	f000 f8f2 	bl	8003f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d50:	2100      	movs	r1, #0
 8003d52:	480e      	ldr	r0, [pc, #56]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d54:	f7ff fd4c 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003d68:	f000 f8e4 	bl	8003f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003d6c:	4807      	ldr	r0, [pc, #28]	; (8003d8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d6e:	f7ff fcc8 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003d82:	f000 f8d7 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000036c 	.word	0x2000036c
 8003d90:	40008000 	.word	0x40008000

08003d94 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d98:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d9e:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003da6:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dba:	220c      	movs	r2, #12
 8003dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dbe:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc4:	4b21      	ldr	r3, [pc, #132]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ddc:	481b      	ldr	r0, [pc, #108]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dde:	f7fe fd35 	bl	800284c <HAL_UART_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003df2:	f000 f89f 	bl	8003f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003df6:	2100      	movs	r1, #0
 8003df8:	4814      	ldr	r0, [pc, #80]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dfa:	f7ff fcbb 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003e0e:	f000 f891 	bl	8003f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e12:	2100      	movs	r1, #0
 8003e14:	480d      	ldr	r0, [pc, #52]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e16:	f7ff fceb 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003e2a:	f000 f883 	bl	8003f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e2e:	4807      	ldr	r0, [pc, #28]	; (8003e4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e30:	f7ff fc67 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003e44:	f000 f876 	bl	8003f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	200003fc 	.word	0x200003fc
 8003e50:	40013800 	.word	0x40013800

08003e54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5a:	f107 0314 	add.w	r3, r7, #20
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	60da      	str	r2, [r3, #12]
 8003e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e76:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e86:	4a28      	ldr	r2, [pc, #160]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ea6:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003eb8:	f043 0302 	orr.w	r3, r3, #2
 8003ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ebe:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <_ZL12MX_GPIO_Initv+0xd4>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2120      	movs	r1, #32
 8003ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed2:	f7fd fc31 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003edc:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <_ZL12MX_GPIO_Initv+0xd8>)
 8003ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4811      	ldr	r0, [pc, #68]	; (8003f30 <_ZL12MX_GPIO_Initv+0xdc>)
 8003eec:	f7fd faa2 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efc:	2300      	movs	r3, #0
 8003efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f0a:	f7fd fa93 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	2028      	movs	r0, #40	; 0x28
 8003f14:	f7fd f999 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f18:	2028      	movs	r0, #40	; 0x28
 8003f1a:	f7fd f9b0 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003f1e:	bf00      	nop
 8003f20:	3728      	adds	r7, #40	; 0x28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	10110000 	.word	0x10110000
 8003f30:	48000800 	.word	0x48000800

08003f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f38:	b672      	cpsid	i
}
 8003f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <Error_Handler+0x8>

08003f3e <_ZN14MockActualCall13withParameterERK12SimpleStringPv>:
    MockActualCall& withParameter(const SimpleString& name, unsigned long int value) { return withUnsignedLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3340      	adds	r3, #64	; 0x40
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	4798      	blx	r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>:
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3350      	adds	r3, #80	; 0x50
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	4798      	blx	r3
 8003f80:	4603      	mov	r3, r0
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003f92:	2032      	movs	r0, #50	; 0x32
 8003f94:	f7ff fd1e 	bl	80039d4 <ringBuffer_init>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	605a      	str	r2, [r3, #4]

	}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fd38 	bl	8003a28 <ringBuffer_deInit>
	}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00d fb82 	bl	80116d4 <_ZN5UtestC1Ev>
 8003fd0:	4a03      	ldr	r2, [pc, #12]	; (8003fe0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	08023f14 	.word	0x08023f14

08003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	4a05      	ldr	r2, [pc, #20]	; (8004004 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f00d fb7d 	bl	80116f4 <_ZN5UtestD1Ev>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	08023f14 	.word	0x08023f14

08004008 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ffe7 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004016:	2108      	movs	r1, #8
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f003 fb9f 	bl	800775c <_ZdlPvj>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ffbe 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004044:	4a03      	ldr	r2, [pc, #12]	; (8004054 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	08023ef4 	.word	0x08023ef4

08004058 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	2224      	movs	r2, #36	; 0x24
 8004062:	4906      	ldr	r1, [pc, #24]	; (800407c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004064:	2008      	movs	r0, #8
 8004066:	f003 fb65 	bl	8007734 <_ZnwjPKci>
 800406a:	4604      	mov	r4, r0
 800406c:	4620      	mov	r0, r4
 800406e:	f7ff ffdb 	bl	8004028 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004072:	4623      	mov	r3, r4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}
 800407c:	080206f8 	.word	0x080206f8

08004080 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4618      	mov	r0, r3
 800408c:	f00b ff40 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004090:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08023e48 	.word	0x08023e48

080040a4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 80040ac:	f00d fae8 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80040b0:	4604      	mov	r4, r0
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	3338      	adds	r3, #56	; 0x38
 80040b6:	681d      	ldr	r5, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	461e      	mov	r6, r3
 80040c0:	f00d faee 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040c4:	4603      	mov	r3, r0
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	2327      	movs	r3, #39	; 0x27
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	4b2a      	ldr	r3, [pc, #168]	; (800417c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 80040d2:	4632      	mov	r2, r6
 80040d4:	2132      	movs	r1, #50	; 0x32
 80040d6:	4620      	mov	r0, r4
 80040d8:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 80040da:	f00d fad1 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80040de:	4604      	mov	r4, r0
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	3320      	adds	r3, #32
 80040e4:	681d      	ldr	r5, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2de      	uxtb	r6, r3
 80040f6:	f00d fad3 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040fa:	4603      	mov	r3, r0
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	2328      	movs	r3, #40	; 0x28
 8004100:	9302      	str	r3, [sp, #8]
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800410e:	4631      	mov	r1, r6
 8004110:	4620      	mov	r0, r4
 8004112:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004114:	f00d fab4 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004118:	4604      	mov	r4, r0
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	3338      	adds	r3, #56	; 0x38
 800411e:	681d      	ldr	r5, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461e      	mov	r6, r3
 8004128:	f00d faba 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800412c:	4603      	mov	r3, r0
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	2329      	movs	r3, #41	; 0x29
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800413a:	4632      	mov	r2, r6
 800413c:	2100      	movs	r1, #0
 800413e:	4620      	mov	r0, r4
 8004140:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004142:	f00d fa9d 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004146:	4604      	mov	r4, r0
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	3338      	adds	r3, #56	; 0x38
 800414c:	681d      	ldr	r5, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	461e      	mov	r6, r3
 8004156:	f00d faa3 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800415a:	4603      	mov	r3, r0
 800415c:	9302      	str	r3, [sp, #8]
 800415e:	232a      	movs	r3, #42	; 0x2a
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004168:	4632      	mov	r2, r6
 800416a:	2100      	movs	r1, #0
 800416c:	4620      	mov	r0, r4
 800416e:	47a8      	blx	r5

}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004178:	080206f8 	.word	0x080206f8
 800417c:	0802070c 	.word	0x0802070c
 8004180:	08020734 	.word	0x08020734
 8004184:	0802074c 	.word	0x0802074c
 8004188:	08020754 	.word	0x08020754
 800418c:	0802077c 	.word	0x0802077c

08004190 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ff0a 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80041ac:	4a03      	ldr	r2, [pc, #12]	; (80041bc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	08023e28 	.word	0x08023e28

080041c0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	222e      	movs	r2, #46	; 0x2e
 80041ca:	4906      	ldr	r1, [pc, #24]	; (80041e4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80041cc:	2008      	movs	r0, #8
 80041ce:	f003 fab1 	bl	8007734 <_ZnwjPKci>
 80041d2:	4604      	mov	r4, r0
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7ff ffdb 	bl	8004190 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80041da:	4623      	mov	r3, r4
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}
 80041e4:	080206f8 	.word	0x080206f8

080041e8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f00b fe8c 	bl	800ff10 <_ZN10UtestShellC1Ev>
 80041f8:	4a03      	ldr	r2, [pc, #12]	; (8004208 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08023d7c 	.word	0x08023d7c

0800420c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 800420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420e:	b087      	sub	sp, #28
 8004210:	af04      	add	r7, sp, #16
 8004212:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2145      	movs	r1, #69	; 0x45
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fc1b 	bl	8003a56 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004220:	f00d fa2e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004224:	4604      	mov	r4, r0
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	3338      	adds	r3, #56	; 0x38
 800422a:	681d      	ldr	r5, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	461e      	mov	r6, r3
 8004236:	f00d fa33 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800423a:	4603      	mov	r3, r0
 800423c:	9302      	str	r3, [sp, #8]
 800423e:	2331      	movs	r3, #49	; 0x31
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004248:	4632      	mov	r2, r6
 800424a:	2145      	movs	r1, #69	; 0x45
 800424c:	4620      	mov	r0, r4
 800424e:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2110      	movs	r1, #16
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fbfd 	bl	8003a56 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 800425c:	f00d fa10 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004260:	4604      	mov	r4, r0
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	3338      	adds	r3, #56	; 0x38
 8004266:	681d      	ldr	r5, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	461e      	mov	r6, r3
 8004274:	f00d fa14 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004278:	4603      	mov	r3, r0
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	2334      	movs	r3, #52	; 0x34
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004286:	4632      	mov	r2, r6
 8004288:	2110      	movs	r1, #16
 800428a:	4620      	mov	r0, r4
 800428c:	47a8      	blx	r5

}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004296:	bf00      	nop
 8004298:	080206f8 	.word	0x080206f8
 800429c:	080207a4 	.word	0x080207a4
 80042a0:	080207d4 	.word	0x080207d4

080042a4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fe80 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80042c0:	4a03      	ldr	r2, [pc, #12]	; (80042d0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08023d5c 	.word	0x08023d5c

080042d4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	2238      	movs	r2, #56	; 0x38
 80042de:	4906      	ldr	r1, [pc, #24]	; (80042f8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80042e0:	2008      	movs	r0, #8
 80042e2:	f003 fa27 	bl	8007734 <_ZnwjPKci>
 80042e6:	4604      	mov	r4, r0
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff ffdb 	bl	80042a4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80042ee:	4623      	mov	r3, r4
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	080206f8 	.word	0x080206f8

080042fc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	f00b fe02 	bl	800ff10 <_ZN10UtestShellC1Ev>
 800430c:	4a03      	ldr	r2, [pc, #12]	; (800431c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08023cb0 	.word	0x08023cb0

08004320 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af04      	add	r7, sp, #16
 8004326:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	3b01      	subs	r3, #1
 800433e:	429a      	cmp	r2, r3
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4293      	cmp	r3, r2
 800434e:	da0b      	bge.n	8004368 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fb7b 	bl	8003a56 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e7e3      	b.n	8004330 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	21ff      	movs	r1, #255	; 0xff
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fb71 	bl	8003a56 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004374:	f00d f984 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004378:	4604      	mov	r4, r0
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	3338      	adds	r3, #56	; 0x38
 800437e:	681d      	ldr	r5, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	461e      	mov	r6, r3
 800438a:	f00d f989 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800438e:	4603      	mov	r3, r0
 8004390:	9302      	str	r3, [sp, #8]
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 800439c:	4632      	mov	r2, r6
 800439e:	21ff      	movs	r1, #255	; 0xff
 80043a0:	4620      	mov	r0, r4
 80043a2:	47a8      	blx	r5
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ac:	080206f8 	.word	0x080206f8
 80043b0:	08020804 	.word	0x08020804

080043b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fdf8 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80043d0:	4a03      	ldr	r2, [pc, #12]	; (80043e0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	08023c90 	.word	0x08023c90

080043e4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	2243      	movs	r2, #67	; 0x43
 80043ee:	4906      	ldr	r1, [pc, #24]	; (8004408 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80043f0:	2008      	movs	r0, #8
 80043f2:	f003 f99f 	bl	8007734 <_ZnwjPKci>
 80043f6:	4604      	mov	r4, r0
 80043f8:	4620      	mov	r0, r4
 80043fa:	f7ff ffdb 	bl	80043b4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80043fe:	4623      	mov	r3, r4
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	080206f8 	.word	0x080206f8

0800440c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f00b fd7a 	bl	800ff10 <_ZN10UtestShellC1Ev>
 800441c:	4a03      	ldr	r2, [pc, #12]	; (800442c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	08023be4 	.word	0x08023be4

08004430 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af04      	add	r7, sp, #16
 8004436:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	21ff      	movs	r1, #255	; 0xff
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fb09 	bl	8003a56 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fb2e 	bl	8003aaa <ringBuffer_pop>
 800444e:	4603      	mov	r3, r0
 8004450:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004452:	f00d f915 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004456:	4604      	mov	r4, r0
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	3338      	adds	r3, #56	; 0x38
 800445c:	681d      	ldr	r5, [r3, #0]
 800445e:	7bfe      	ldrb	r6, [r7, #15]
 8004460:	f00d f91e 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004464:	4603      	mov	r3, r0
 8004466:	9302      	str	r3, [sp, #8]
 8004468:	2348      	movs	r3, #72	; 0x48
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004472:	4632      	mov	r2, r6
 8004474:	21ff      	movs	r1, #255	; 0xff
 8004476:	4620      	mov	r0, r4
 8004478:	47a8      	blx	r5

}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004482:	bf00      	nop
 8004484:	080206f8 	.word	0x080206f8
 8004488:	08020834 	.word	0x08020834

0800448c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fd8c 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08023bc4 	.word	0x08023bc4

080044bc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	224c      	movs	r2, #76	; 0x4c
 80044c6:	4906      	ldr	r1, [pc, #24]	; (80044e0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80044c8:	2008      	movs	r0, #8
 80044ca:	f003 f933 	bl	8007734 <_ZnwjPKci>
 80044ce:	4604      	mov	r4, r0
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7ff ffdb 	bl	800448c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80044d6:	4623      	mov	r3, r4
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd90      	pop	{r4, r7, pc}
 80044e0:	080206f8 	.word	0x080206f8

080044e4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f00b fd0e 	bl	800ff10 <_ZN10UtestShellC1Ev>
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	08023b18 	.word	0x08023b18

08004508 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af04      	add	r7, sp, #16
 800450e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	21aa      	movs	r1, #170	; 0xaa
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fa9b 	bl	8003a56 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	3b01      	subs	r3, #1
 8004536:	429a      	cmp	r2, r3
 8004538:	bf0c      	ite	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	2300      	movne	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4293      	cmp	r3, r2
 8004546:	da0a      	bge.n	800455e <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff faac 	bl	8003aaa <ringBuffer_pop>
 8004552:	4603      	mov	r3, r0
 8004554:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3301      	adds	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e7e4      	b.n	8004528 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff faa1 	bl	8003aaa <ringBuffer_pop>
 8004568:	4603      	mov	r3, r0
 800456a:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 800456c:	f00d f888 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004570:	4604      	mov	r4, r0
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	3338      	adds	r3, #56	; 0x38
 8004576:	681d      	ldr	r5, [r3, #0]
 8004578:	7afe      	ldrb	r6, [r7, #11]
 800457a:	f00d f891 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800457e:	4603      	mov	r3, r0
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	2359      	movs	r3, #89	; 0x59
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 800458c:	4632      	mov	r2, r6
 800458e:	21aa      	movs	r1, #170	; 0xaa
 8004590:	4620      	mov	r0, r4
 8004592:	47a8      	blx	r5
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459c:	080206f8 	.word	0x080206f8
 80045a0:	08020854 	.word	0x08020854

080045a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fd00 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045c0:	4a03      	ldr	r2, [pc, #12]	; (80045d0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	08023af8 	.word	0x08023af8

080045d4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	225c      	movs	r2, #92	; 0x5c
 80045de:	4906      	ldr	r1, [pc, #24]	; (80045f8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80045e0:	2008      	movs	r0, #8
 80045e2:	f003 f8a7 	bl	8007734 <_ZnwjPKci>
 80045e6:	4604      	mov	r4, r0
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff ffdb 	bl	80045a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80045ee:	4623      	mov	r3, r4
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	080206f8 	.word	0x080206f8

080045fc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4618      	mov	r0, r3
 8004608:	f00b fc82 	bl	800ff10 <_ZN10UtestShellC1Ev>
 800460c:	4a03      	ldr	r2, [pc, #12]	; (800461c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	08023a4c 	.word	0x08023a4c

08004620 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af04      	add	r7, sp, #16
 8004626:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d20b      	bcs.n	8004650 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fa07 	bl	8003a56 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e7ed      	b.n	800462c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004650:	f00d f816 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004654:	4604      	mov	r4, r0
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	3338      	adds	r3, #56	; 0x38
 800465a:	681d      	ldr	r5, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	3b01      	subs	r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461e      	mov	r6, r3
 8004670:	f00d f816 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004674:	4603      	mov	r3, r0
 8004676:	9302      	str	r3, [sp, #8]
 8004678:	2363      	movs	r3, #99	; 0x63
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004682:	4632      	mov	r2, r6
 8004684:	2131      	movs	r1, #49	; 0x31
 8004686:	4620      	mov	r0, r4
 8004688:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fa35 	bl	8003afe <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004694:	f00c fff4 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004698:	4604      	mov	r4, r0
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	3338      	adds	r3, #56	; 0x38
 800469e:	681d      	ldr	r5, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461e      	mov	r6, r3
 80046b4:	f00c fff4 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046b8:	4603      	mov	r3, r0
 80046ba:	9302      	str	r3, [sp, #8]
 80046bc:	2367      	movs	r3, #103	; 0x67
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80046c6:	4632      	mov	r2, r6
 80046c8:	2100      	movs	r1, #0
 80046ca:	4620      	mov	r0, r4
 80046cc:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80046ce:	f00c ffd7 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80046d2:	4604      	mov	r4, r0
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	3338      	adds	r3, #56	; 0x38
 80046d8:	681d      	ldr	r5, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	461e      	mov	r6, r3
 80046ee:	f00c ffd7 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046f2:	4603      	mov	r3, r0
 80046f4:	9302      	str	r3, [sp, #8]
 80046f6:	2368      	movs	r3, #104	; 0x68
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004700:	4632      	mov	r2, r6
 8004702:	2100      	movs	r1, #0
 8004704:	4620      	mov	r0, r4
 8004706:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	080206f8 	.word	0x080206f8
 8004714:	08020874 	.word	0x08020874
 8004718:	080208b0 	.word	0x080208b0
 800471c:	080208ec 	.word	0x080208ec

08004720 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fc42 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	08023a2c 	.word	0x08023a2c

08004750 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	2271      	movs	r2, #113	; 0x71
 800475a:	4906      	ldr	r1, [pc, #24]	; (8004774 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 800475c:	2008      	movs	r0, #8
 800475e:	f002 ffe9 	bl	8007734 <_ZnwjPKci>
 8004762:	4604      	mov	r4, r0
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff ffdb 	bl	8004720 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 800476a:	4623      	mov	r3, r4
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	080206f8 	.word	0x080206f8

08004778 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f00b fbc4 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	08023980 	.word	0x08023980

0800479c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	b087      	sub	sp, #28
 80047a0:	af04      	add	r7, sp, #16
 80047a2:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	490e      	ldr	r1, [pc, #56]	; (80047e4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff f9b7 	bl	8003b1e <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80047b0:	f00c ff66 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80047b4:	4604      	mov	r4, r0
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	3324      	adds	r3, #36	; 0x24
 80047ba:	681d      	ldr	r5, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68de      	ldr	r6, [r3, #12]
 80047c2:	f00c ff6d 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047c6:	4603      	mov	r3, r0
 80047c8:	9302      	str	r3, [sp, #8]
 80047ca:	2375      	movs	r3, #117	; 0x75
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	2300      	movs	r3, #0
 80047d4:	4632      	mov	r2, r6
 80047d6:	4903      	ldr	r1, [pc, #12]	; (80047e4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80047d8:	4620      	mov	r0, r4
 80047da:	47a8      	blx	r5
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e4:	08020924 	.word	0x08020924
 80047e8:	080206f8 	.word	0x080206f8

080047ec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fbdc 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004808:	4a03      	ldr	r2, [pc, #12]	; (8004818 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	08023960 	.word	0x08023960

0800481c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	2278      	movs	r2, #120	; 0x78
 8004826:	4906      	ldr	r1, [pc, #24]	; (8004840 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004828:	2008      	movs	r0, #8
 800482a:	f002 ff83 	bl	8007734 <_ZnwjPKci>
 800482e:	4604      	mov	r4, r0
 8004830:	4620      	mov	r0, r4
 8004832:	f7ff ffdb 	bl	80047ec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004836:	4623      	mov	r3, r4
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bd90      	pop	{r4, r7, pc}
 8004840:	080206f8 	.word	0x080206f8

08004844 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4618      	mov	r0, r3
 8004850:	f00b fb5e 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004854:	4a03      	ldr	r2, [pc, #12]	; (8004864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	080238b4 	.word	0x080238b4

08004868 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	b08a      	sub	sp, #40	; 0x28
 800486e:	af04      	add	r7, sp, #16
 8004870:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	494e      	ldr	r1, [pc, #312]	; (80049b0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff f950 	bl	8003b1e <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 800487e:	f00c feff 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004882:	4604      	mov	r4, r0
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	3324      	adds	r3, #36	; 0x24
 8004888:	681d      	ldr	r5, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	68de      	ldr	r6, [r3, #12]
 8004890:	f00c ff06 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004894:	4603      	mov	r3, r0
 8004896:	9302      	str	r3, [sp, #8]
 8004898:	237c      	movs	r3, #124	; 0x7c
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2300      	movs	r3, #0
 80048a2:	4632      	mov	r2, r6
 80048a4:	4942      	ldr	r1, [pc, #264]	; (80049b0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80048a6:	4620      	mov	r0, r4
 80048a8:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4942      	ldr	r1, [pc, #264]	; (80049b8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff f953 	bl	8003b5c <ringBuffer_lookFor>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d05c      	beq.n	8004980 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	493b      	ldr	r1, [pc, #236]	; (80049b8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f945 	bl	8003b5c <ringBuffer_lookFor>
 80048d2:	4604      	mov	r4, r0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4937      	ldr	r1, [pc, #220]	; (80049b8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f93e 	bl	8003b5c <ringBuffer_lookFor>
 80048e0:	4603      	mov	r3, r0
 80048e2:	429c      	cmp	r4, r3
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 80048f0:	f00c fec6 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80048f4:	6803      	ldr	r3, [r0, #0]
 80048f6:	3370      	adds	r3, #112	; 0x70
 80048f8:	681c      	ldr	r4, [r3, #0]
 80048fa:	237d      	movs	r3, #125	; 0x7d
 80048fc:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048fe:	492f      	ldr	r1, [pc, #188]	; (80049bc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004900:	47a0      	blx	r4
 8004902:	f00c febd 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004906:	4604      	mov	r4, r0
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	3358      	adds	r3, #88	; 0x58
 800490c:	681d      	ldr	r5, [r3, #0]
 800490e:	f107 0308 	add.w	r3, r7, #8
 8004912:	2101      	movs	r1, #1
 8004914:	4618      	mov	r0, r3
 8004916:	f006 f94f 	bl	800abb8 <_Z10StringFromi>
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	4618      	mov	r0, r3
 8004920:	f005 fe56 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8004924:	4606      	mov	r6, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4923      	ldr	r1, [pc, #140]	; (80049b8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff f915 	bl	8003b5c <ringBuffer_lookFor>
 8004932:	4602      	mov	r2, r0
 8004934:	f107 0310 	add.w	r3, r7, #16
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f006 fbb6 	bl	800b0ac <_Z10StringFromm>
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f005 fe43 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800494a:	4680      	mov	r8, r0
 800494c:	f00c fea8 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004950:	4603      	mov	r3, r0
 8004952:	9303      	str	r3, [sp, #12]
 8004954:	237d      	movs	r3, #125	; 0x7d
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4643      	mov	r3, r8
 8004962:	4632      	mov	r2, r6
 8004964:	2101      	movs	r1, #1
 8004966:	4620      	mov	r0, r4
 8004968:	47a8      	blx	r5
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4618      	mov	r0, r3
 8004970:	f005 fe5b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004974:	f107 0308 	add.w	r3, r7, #8
 8004978:	4618      	mov	r0, r3
 800497a:	f005 fe56 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800497e:	e012      	b.n	80049a6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004980:	f00c fe7e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004984:	4604      	mov	r4, r0
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	3338      	adds	r3, #56	; 0x38
 800498a:	681d      	ldr	r5, [r3, #0]
 800498c:	f00c fe88 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004990:	4603      	mov	r3, r0
 8004992:	9302      	str	r3, [sp, #8]
 8004994:	237d      	movs	r3, #125	; 0x7d
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	2200      	movs	r2, #0
 80049a0:	2100      	movs	r1, #0
 80049a2:	4620      	mov	r0, r4
 80049a4:	47a8      	blx	r5
}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	0802092c 	.word	0x0802092c
 80049b4:	080206f8 	.word	0x080206f8
 80049b8:	08020938 	.word	0x08020938
 80049bc:	08020940 	.word	0x08020940

080049c0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff faf2 	bl	8003fc0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80049dc:	4a03      	ldr	r2, [pc, #12]	; (80049ec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08023894 	.word	0x08023894

080049f0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	4906      	ldr	r1, [pc, #24]	; (8004a14 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 80049fc:	2008      	movs	r0, #8
 80049fe:	f002 fe99 	bl	8007734 <_ZnwjPKci>
 8004a02:	4604      	mov	r4, r0
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff ffdb 	bl	80049c0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	080206f8 	.word	0x080206f8

08004a18 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f00b fa74 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004a28:	4a03      	ldr	r2, [pc, #12]	; (8004a38 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	080237e8 	.word	0x080237e8

08004a3c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af04      	add	r7, sp, #16
 8004a42:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004a44:	f00c fe1c 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	3338      	adds	r3, #56	; 0x38
 8004a4e:	681d      	ldr	r5, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff f897 	bl	8003b88 <ringBuffer_capacity>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461e      	mov	r6, r3
 8004a5e:	f00c fe1f 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a62:	4603      	mov	r3, r0
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	2383      	movs	r3, #131	; 0x83
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004a70:	4632      	mov	r2, r6
 8004a72:	2132      	movs	r1, #50	; 0x32
 8004a74:	4620      	mov	r0, r4
 8004a76:	47a8      	blx	r5

}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a80:	080206f8 	.word	0x080206f8
 8004a84:	080209e4 	.word	0x080209e4

08004a88 <_Z18UART_Transmit_FakePh>:

//char TxString[50];

void UART_Transmit_Fake(uint8_t* data)
{
 8004a88:	b5b0      	push	{r4, r5, r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	491c      	ldr	r1, [pc, #112]	; (8004b08 <_Z18UART_Transmit_FakePh+0x80>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f005 fa0f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 fae2 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	3318      	adds	r3, #24
 8004aae:	681d      	ldr	r5, [r3, #0]
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	4915      	ldr	r1, [pc, #84]	; (8004b0c <_Z18UART_Transmit_FakePh+0x84>)
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f005 f9ff 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004abc:	f107 0310 	add.w	r3, r7, #16
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	47a8      	blx	r5
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f107 0318 	add.w	r3, r7, #24
 8004acc:	4910      	ldr	r1, [pc, #64]	; (8004b10 <_Z18UART_Transmit_FakePh+0x88>)
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f005 f9f3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004ad4:	f107 0318 	add.w	r3, r7, #24
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7ff fa2e 	bl	8003f3e <_ZN14MockActualCall13withParameterERK12SimpleStringPv>
 8004ae2:	f107 0318 	add.w	r3, r7, #24
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f005 fd9f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004aec:	f107 0310 	add.w	r3, r7, #16
 8004af0:	4618      	mov	r0, r3
 8004af2:	f005 fd9a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 fd95 	bl	800a62a <_ZN12SimpleStringD1Ev>
	//memcpy(TxString,data,sizeof(data));
}
 8004b00:	bf00      	nop
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bdb0      	pop	{r4, r5, r7, pc}
 8004b08:	08020a1c 	.word	0x08020a1c
 8004b0c:	08020a20 	.word	0x08020a20
 8004b10:	08020a34 	.word	0x08020a34

08004b14 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	4916      	ldr	r1, [pc, #88]	; (8004b78 <_Z17UART_Receive_Fakev+0x64>)
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f005 f9cb 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004b24:	463b      	mov	r3, r7
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f003 fa9f 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	3318      	adds	r3, #24
 8004b34:	681d      	ldr	r5, [r3, #0]
 8004b36:	f107 0308 	add.w	r3, r7, #8
 8004b3a:	4910      	ldr	r1, [pc, #64]	; (8004b7c <_Z17UART_Receive_Fakev+0x68>)
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 f9bc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	4619      	mov	r1, r3
 8004b48:	4620      	mov	r0, r4
 8004b4a:	47a8      	blx	r5
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	3264      	adds	r2, #100	; 0x64
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	4790      	blx	r2
 8004b58:	4603      	mov	r3, r0
 8004b5a:	b2dc      	uxtb	r4, r3
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	4618      	mov	r0, r3
 8004b62:	f005 fd62 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004b66:	463b      	mov	r3, r7
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f005 fd5e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004b6e:	4623      	mov	r3, r4
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bdb0      	pop	{r4, r5, r7, pc}
 8004b78:	08020a1c 	.word	0x08020a1c
 8004b7c:	08020a3c 	.word	0x08020a3c

08004b80 <_Z12getTick_Fakev>:

uint32_t getTick_Fake(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
	return 1;
 8004b84:	2301      	movs	r3, #1
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004b98:	2364      	movs	r3, #100	; 0x64
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004b9c:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004b9e:	4805      	ldr	r0, [pc, #20]	; (8004bb4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004ba0:	f7fe feb2 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08004b81 	.word	0x08004b81
 8004bb0:	08004b15 	.word	0x08004b15
 8004bb4:	08004a89 	.word	0x08004a89

08004bb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	490c      	ldr	r1, [pc, #48]	; (8004bf8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f005 f977 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fa4a 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	329c      	adds	r2, #156	; 0x9c
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	4790      	blx	r2
 8004be4:	f107 0308 	add.w	r3, r7, #8
 8004be8:	4618      	mov	r0, r3
 8004bea:	f005 fd1e 	bl	800a62a <_ZN12SimpleStringD1Ev>
	}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08020a1c 	.word	0x08020a1c

08004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f00c fd64 	bl	80116d4 <_ZN5UtestC1Ev>
 8004c0c:	4a03      	ldr	r2, [pc, #12]	; (8004c1c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	080237c8 	.word	0x080237c8

08004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f00c fd5f 	bl	80116f4 <_ZN5UtestD1Ev>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	080237c8 	.word	0x080237c8

08004c44 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ffe7 	bl	8004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004c52:	2104      	movs	r1, #4
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f002 fd81 	bl	800775c <_ZdlPvj>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff ffc4 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004c74:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	080237a8 	.word	0x080237a8

08004c88 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	22b2      	movs	r2, #178	; 0xb2
 8004c92:	4906      	ldr	r1, [pc, #24]	; (8004cac <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004c94:	2004      	movs	r0, #4
 8004c96:	f002 fd4d 	bl	8007734 <_ZnwjPKci>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff ffe1 	bl	8004c64 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd90      	pop	{r4, r7, pc}
 8004cac:	080206f8 	.word	0x080206f8

08004cb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f00b f928 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004cc0:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	080236fc 	.word	0x080236fc

08004cd4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004cd4:	b5b0      	push	{r4, r5, r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af04      	add	r7, sp, #16
 8004cda:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004cde:	4a11      	ldr	r2, [pc, #68]	; (8004d24 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004ce0:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	2364      	movs	r3, #100	; 0x64
 8004ce8:	4a0f      	ldr	r2, [pc, #60]	; (8004d28 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004cea:	4910      	ldr	r1, [pc, #64]	; (8004d2c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004cec:	f7fe fe0c 	bl	8003908 <ESP_Init>
 8004cf0:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004cf2:	f00c fcc5 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	3338      	adds	r3, #56	; 0x38
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	f00c fccf 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d02:	4603      	mov	r3, r0
 8004d04:	9302      	str	r3, [sp, #8]
 8004d06:	23c0      	movs	r3, #192	; 0xc0
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	2101      	movs	r1, #1
 8004d14:	4620      	mov	r0, r4
 8004d16:	47a8      	blx	r5

}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d20:	200005b0 	.word	0x200005b0
 8004d24:	08004a89 	.word	0x08004a89
 8004d28:	08004b81 	.word	0x08004b81
 8004d2c:	08004b15 	.word	0x08004b15
 8004d30:	080206f8 	.word	0x080206f8
 8004d34:	08020a50 	.word	0x08020a50

08004d38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff5a 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004d48:	4a03      	ldr	r2, [pc, #12]	; (8004d58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	080236dc 	.word	0x080236dc

08004d5c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	22c4      	movs	r2, #196	; 0xc4
 8004d66:	4906      	ldr	r1, [pc, #24]	; (8004d80 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004d68:	2004      	movs	r0, #4
 8004d6a:	f002 fce3 	bl	8007734 <_ZnwjPKci>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ffe1 	bl	8004d38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004d76:	4623      	mov	r3, r4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd90      	pop	{r4, r7, pc}
 8004d80:	080206f8 	.word	0x080206f8

08004d84 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f00b f8be 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004d94:	4a03      	ldr	r2, [pc, #12]	; (8004da4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	08023630 	.word	0x08023630

08004da8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004da8:	b5b0      	push	{r4, r5, r7, lr}
 8004daa:	b090      	sub	sp, #64	; 0x40
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"Test");
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	4947      	ldr	r1, [pc, #284]	; (8004ed4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 f87f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004dbc:	f107 0308 	add.w	r3, r7, #8
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f003 f952 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	681d      	ldr	r5, [r3, #0]
 8004dd0:	f107 0310 	add.w	r3, r7, #16
 8004dd4:	4940      	ldr	r1, [pc, #256]	; (8004ed8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f005 f86f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	4619      	mov	r1, r3
 8004de2:	4620      	mov	r0, r4
 8004de4:	47a8      	blx	r5
 8004de6:	4604      	mov	r4, r0
 8004de8:	f107 0318 	add.w	r3, r7, #24
 8004dec:	493b      	ldr	r1, [pc, #236]	; (8004edc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004dee:	4618      	mov	r0, r3
 8004df0:	f005 f863 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004df4:	f107 0318 	add.w	r3, r7, #24
 8004df8:	4a39      	ldr	r2, [pc, #228]	; (8004ee0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff f8b1 	bl	8003f64 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004e02:	f107 0318 	add.w	r3, r7, #24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f005 fc0f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 fc0a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f005 fc05 	bl	800a62a <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8004e20:	482f      	ldr	r0, [pc, #188]	; (8004ee0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004e22:	f7fe fd9d 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"AT\r\n");
 8004e26:	f107 0320 	add.w	r3, r7, #32
 8004e2a:	492a      	ldr	r1, [pc, #168]	; (8004ed4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 f844 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004e32:	f107 0320 	add.w	r3, r7, #32
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f003 f917 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e3e:	4604      	mov	r4, r0
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	681d      	ldr	r5, [r3, #0]
 8004e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e4a:	4923      	ldr	r1, [pc, #140]	; (8004ed8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f005 f834 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4620      	mov	r0, r4
 8004e5a:	47a8      	blx	r5
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e62:	491e      	ldr	r1, [pc, #120]	; (8004edc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004e64:	4618      	mov	r0, r3
 8004e66:	f005 f828 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004e70:	4619      	mov	r1, r3
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff f876 	bl	8003f64 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f005 fbd4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e86:	4618      	mov	r0, r3
 8004e88:	f005 fbcf 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004e8c:	f107 0320 	add.w	r3, r7, #32
 8004e90:	4618      	mov	r0, r3
 8004e92:	f005 fbca 	bl	800a62a <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 8004e96:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004e98:	f7fe fd62 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 8004e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ea0:	490c      	ldr	r1, [pc, #48]	; (8004ed4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f005 f809 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004ea8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f003 f8dc 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	3294      	adds	r2, #148	; 0x94
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	4790      	blx	r2
 8004ec0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 fbb0 	bl	800a62a <_ZN12SimpleStringD1Ev>

}
 8004eca:	bf00      	nop
 8004ecc:	3740      	adds	r7, #64	; 0x40
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08020a1c 	.word	0x08020a1c
 8004ed8:	08020a20 	.word	0x08020a20
 8004edc:	08020a34 	.word	0x08020a34
 8004ee0:	08020924 	.word	0x08020924
 8004ee4:	08020a70 	.word	0x08020a70

08004ee8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fe82 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004ef8:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08023610 	.word	0x08023610

08004f0c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	22cf      	movs	r2, #207	; 0xcf
 8004f16:	4906      	ldr	r1, [pc, #24]	; (8004f30 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004f18:	2004      	movs	r0, #4
 8004f1a:	f002 fc0b 	bl	8007734 <_ZnwjPKci>
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff ffe1 	bl	8004ee8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004f26:	4623      	mov	r3, r4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd90      	pop	{r4, r7, pc}
 8004f30:	080206f8 	.word	0x080206f8

08004f34 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00a ffe6 	bl	800ff10 <_ZN10UtestShellC1Ev>
 8004f44:	4a03      	ldr	r2, [pc, #12]	; (8004f54 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	08023564 	.word	0x08023564

08004f58 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	b099      	sub	sp, #100	; 0x64
 8004f5c:	af04      	add	r7, sp, #16
 8004f5e:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	4973      	ldr	r1, [pc, #460]	; (8005134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 ffa7 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	2100      	movs	r1, #0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 f87a 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	681d      	ldr	r5, [r3, #0]
 8004f80:	f107 0310 	add.w	r3, r7, #16
 8004f84:	496c      	ldr	r1, [pc, #432]	; (8005138 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 ff97 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004f8c:	f107 0310 	add.w	r3, r7, #16
 8004f90:	4619      	mov	r1, r3
 8004f92:	4620      	mov	r0, r4
 8004f94:	47a8      	blx	r5
 8004f96:	4603      	mov	r3, r0
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	3264      	adds	r2, #100	; 0x64
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	214f      	movs	r1, #79	; 0x4f
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	4790      	blx	r2
 8004fa4:	f107 0310 	add.w	r3, r7, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f005 fb3e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f005 fb39 	bl	800a62a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8004fb8:	f7fe fce0 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8004fbc:	f107 0318 	add.w	r3, r7, #24
 8004fc0:	495c      	ldr	r1, [pc, #368]	; (8005134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f004 ff79 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004fc8:	f107 0318 	add.w	r3, r7, #24
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f003 f84c 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	681d      	ldr	r5, [r3, #0]
 8004fdc:	f107 0320 	add.w	r3, r7, #32
 8004fe0:	4955      	ldr	r1, [pc, #340]	; (8005138 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f004 ff69 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8004fe8:	f107 0320 	add.w	r3, r7, #32
 8004fec:	4619      	mov	r1, r3
 8004fee:	4620      	mov	r0, r4
 8004ff0:	47a8      	blx	r5
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	3264      	adds	r2, #100	; 0x64
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	214b      	movs	r1, #75	; 0x4b
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	4790      	blx	r2
 8005000:	f107 0320 	add.w	r3, r7, #32
 8005004:	4618      	mov	r0, r3
 8005006:	f005 fb10 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800500a:	f107 0318 	add.w	r3, r7, #24
 800500e:	4618      	mov	r0, r3
 8005010:	f005 fb0b 	bl	800a62a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005014:	f7fe fcb2 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800501c:	4945      	ldr	r1, [pc, #276]	; (8005134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800501e:	4618      	mov	r0, r3
 8005020:	f004 ff4b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005028:	2100      	movs	r1, #0
 800502a:	4618      	mov	r0, r3
 800502c:	f003 f81e 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005030:	4604      	mov	r4, r0
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	681d      	ldr	r5, [r3, #0]
 8005038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800503c:	493e      	ldr	r1, [pc, #248]	; (8005138 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800503e:	4618      	mov	r0, r3
 8005040:	f004 ff3b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005044:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005048:	4619      	mov	r1, r3
 800504a:	4620      	mov	r0, r4
 800504c:	47a8      	blx	r5
 800504e:	4603      	mov	r3, r0
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	3264      	adds	r2, #100	; 0x64
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	210d      	movs	r1, #13
 8005058:	4618      	mov	r0, r3
 800505a:	4790      	blx	r2
 800505c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005060:	4618      	mov	r0, r3
 8005062:	f005 fae2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8005066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800506a:	4618      	mov	r0, r3
 800506c:	f005 fadd 	bl	800a62a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005070:	f7fe fc84 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005074:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005078:	492e      	ldr	r1, [pc, #184]	; (8005134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800507a:	4618      	mov	r0, r3
 800507c:	f004 ff1d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005080:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f002 fff0 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800508c:	4604      	mov	r4, r0
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	681d      	ldr	r5, [r3, #0]
 8005094:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005098:	4927      	ldr	r1, [pc, #156]	; (8005138 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800509a:	4618      	mov	r0, r3
 800509c:	f004 ff0d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80050a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050a4:	4619      	mov	r1, r3
 80050a6:	4620      	mov	r0, r4
 80050a8:	47a8      	blx	r5
 80050aa:	4603      	mov	r3, r0
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	3264      	adds	r2, #100	; 0x64
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	210a      	movs	r1, #10
 80050b4:	4618      	mov	r0, r3
 80050b6:	4790      	blx	r2
 80050b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050bc:	4618      	mov	r0, r3
 80050be:	f005 fab4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80050c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050c6:	4618      	mov	r0, r3
 80050c8:	f005 faaf 	bl	800a62a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80050cc:	f7fe fc56 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 80050d0:	f00c fad6 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80050d4:	4604      	mov	r4, r0
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	681d      	ldr	r5, [r3, #0]
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68de      	ldr	r6, [r3, #12]
 80050e2:	f00c fadd 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050e6:	4603      	mov	r3, r0
 80050e8:	9302      	str	r3, [sp, #8]
 80050ea:	23db      	movs	r3, #219	; 0xdb
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e8>)
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	2300      	movs	r3, #0
 80050f4:	4632      	mov	r2, r6
 80050f6:	4913      	ldr	r1, [pc, #76]	; (8005144 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ec>)
 80050f8:	4620      	mov	r0, r4
 80050fa:	47a8      	blx	r5
	mock().checkExpectations();
 80050fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005100:	490c      	ldr	r1, [pc, #48]	; (8005134 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8005102:	4618      	mov	r0, r3
 8005104:	f004 fed9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005108:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f002 ffac 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005114:	4603      	mov	r3, r0
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	3294      	adds	r2, #148	; 0x94
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	4790      	blx	r2
 8005120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005124:	4618      	mov	r0, r3
 8005126:	f005 fa80 	bl	800a62a <_ZN12SimpleStringD1Ev>

}
 800512a:	bf00      	nop
 800512c:	3754      	adds	r7, #84	; 0x54
 800512e:	46bd      	mov	sp, r7
 8005130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005132:	bf00      	nop
 8005134:	08020a1c 	.word	0x08020a1c
 8005138:	08020a3c 	.word	0x08020a3c
 800513c:	2000048c 	.word	0x2000048c
 8005140:	080206f8 	.word	0x080206f8
 8005144:	08020a78 	.word	0x08020a78

08005148 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fd52 	bl	8004bfc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005158:	4a03      	ldr	r2, [pc, #12]	; (8005168 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	08023544 	.word	0x08023544

0800516c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	22e0      	movs	r2, #224	; 0xe0
 8005176:	4906      	ldr	r1, [pc, #24]	; (8005190 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005178:	2004      	movs	r0, #4
 800517a:	f002 fadb 	bl	8007734 <_ZnwjPKci>
 800517e:	4604      	mov	r4, r0
 8005180:	4620      	mov	r0, r4
 8005182:	f7ff ffe1 	bl	8005148 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005186:	4623      	mov	r3, r4
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bd90      	pop	{r4, r7, pc}
 8005190:	080206f8 	.word	0x080206f8

08005194 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	f00a feb6 	bl	800ff10 <_ZN10UtestShellC1Ev>
 80051a4:	4a03      	ldr	r2, [pc, #12]	; (80051b4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08023498 	.word	0x08023498

080051b8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	b093      	sub	sp, #76	; 0x4c
 80051bc:	af04      	add	r7, sp, #16
 80051be:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 80051c0:	4a40      	ldr	r2, [pc, #256]	; (80052c4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x10c>)
 80051c2:	f107 030c 	add.w	r3, r7, #12
 80051c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051ca:	6018      	str	r0, [r3, #0]
 80051cc:	3304      	adds	r3, #4
 80051ce:	7019      	strb	r1, [r3, #0]
 80051d0:	f107 0311 	add.w	r3, r7, #17
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f82a 	bl	800023c <strlen>
 80051e8:	4603      	mov	r3, r0
 80051ea:	461a      	mov	r2, r3
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	4293      	cmp	r3, r2
 80051f0:	da35      	bge.n	800525e <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80051f2:	f107 0318 	add.w	r3, r7, #24
 80051f6:	4934      	ldr	r1, [pc, #208]	; (80052c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 80051f8:	4618      	mov	r0, r3
 80051fa:	f004 fe5e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80051fe:	f107 0318 	add.w	r3, r7, #24
 8005202:	2100      	movs	r1, #0
 8005204:	4618      	mov	r0, r3
 8005206:	f002 ff31 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800520a:	4604      	mov	r4, r0
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	f107 0320 	add.w	r3, r7, #32
 8005216:	492d      	ldr	r1, [pc, #180]	; (80052cc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x114>)
 8005218:	4618      	mov	r0, r3
 800521a:	f004 fe4e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800521e:	f107 0320 	add.w	r3, r7, #32
 8005222:	4619      	mov	r1, r3
 8005224:	4620      	mov	r0, r4
 8005226:	47a8      	blx	r5
 8005228:	4603      	mov	r3, r0
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	3264      	adds	r2, #100	; 0x64
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	f107 000c 	add.w	r0, r7, #12
 8005234:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005236:	4401      	add	r1, r0
 8005238:	7809      	ldrb	r1, [r1, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	4790      	blx	r2
 800523e:	f107 0320 	add.w	r3, r7, #32
 8005242:	4618      	mov	r0, r3
 8005244:	f005 f9f1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8005248:	f107 0318 	add.w	r3, r7, #24
 800524c:	4618      	mov	r0, r3
 800524e:	f005 f9ec 	bl	800a62a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005252:	f7fe fb93 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005258:	3301      	adds	r3, #1
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
 800525c:	e7bf      	b.n	80051de <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 800525e:	481c      	ldr	r0, [pc, #112]	; (80052d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x118>)
 8005260:	f7fe fba6 	bl	80039b0 <Read_Response>
 8005264:	6338      	str	r0, [r7, #48]	; 0x30

	LONGS_EQUAL(1,result);
 8005266:	f00c fa0b 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 800526a:	4604      	mov	r4, r0
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	3338      	adds	r3, #56	; 0x38
 8005270:	681d      	ldr	r5, [r3, #0]
 8005272:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005274:	f00c fa14 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005278:	4603      	mov	r3, r0
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	23ec      	movs	r3, #236	; 0xec
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x11c>)
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x120>)
 8005286:	4632      	mov	r2, r6
 8005288:	2101      	movs	r1, #1
 800528a:	4620      	mov	r0, r4
 800528c:	47a8      	blx	r5
	mock().checkExpectations();
 800528e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 8005294:	4618      	mov	r0, r3
 8005296:	f004 fe10 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800529a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 fee3 	bl	800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052a6:	4603      	mov	r3, r0
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	3294      	adds	r2, #148	; 0x94
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	4790      	blx	r2
 80052b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b6:	4618      	mov	r0, r3
 80052b8:	f005 f9b7 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80052bc:	bf00      	nop
 80052be:	373c      	adds	r7, #60	; 0x3c
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c4:	08020a84 	.word	0x08020a84
 80052c8:	08020a1c 	.word	0x08020a1c
 80052cc:	08020a3c 	.word	0x08020a3c
 80052d0:	08020a80 	.word	0x08020a80
 80052d4:	080206f8 	.word	0x080206f8
 80052d8:	08020a50 	.word	0x08020a50

080052dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	4a05      	ldr	r2, [pc, #20]	; (80052fc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f00a fe63 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	08023498 	.word	0x08023498

08005300 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ffe7 	bl	80052dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 800530e:	211c      	movs	r1, #28
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f002 fa23 	bl	800775c <_ZdlPvj>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	4a05      	ldr	r2, [pc, #20]	; (8005340 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fc75 	bl	8004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	08023544 	.word	0x08023544

08005344 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ffe7 	bl	8005320 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8005352:	2104      	movs	r1, #4
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f002 fa01 	bl	800775c <_ZdlPvj>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	f00a fe1f 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08023564 	.word	0x08023564

08005388 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ffe7 	bl	8005364 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8005396:	211c      	movs	r1, #28
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f002 f9df 	bl	800775c <_ZdlPvj>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fc31 	bl	8004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	08023610 	.word	0x08023610

080053cc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ffe7 	bl	80053a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80053da:	2104      	movs	r1, #4
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f002 f9bd 	bl	800775c <_ZdlPvj>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	4a05      	ldr	r2, [pc, #20]	; (800540c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f00a fddb 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	08023630 	.word	0x08023630

08005410 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff ffe7 	bl	80053ec <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 800541e:	211c      	movs	r1, #28
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f002 f99b 	bl	800775c <_ZdlPvj>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	4a05      	ldr	r2, [pc, #20]	; (8005450 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fbed 	bl	8004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	080236dc 	.word	0x080236dc

08005454 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ffe7 	bl	8005430 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8005462:	2104      	movs	r1, #4
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f002 f979 	bl	800775c <_ZdlPvj>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	4a05      	ldr	r2, [pc, #20]	; (8005494 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	f00a fd97 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	080236fc 	.word	0x080236fc

08005498 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff ffe7 	bl	8005474 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 80054a6:	211c      	movs	r1, #28
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f002 f957 	bl	800775c <_ZdlPvj>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff fba9 	bl	8004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	080237a8 	.word	0x080237a8

080054dc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ffe7 	bl	80054b8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80054ea:	2104      	movs	r1, #4
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f002 f935 	bl	800775c <_ZdlPvj>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	4a05      	ldr	r2, [pc, #20]	; (800551c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f00a fd53 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	080237e8 	.word	0x080237e8

08005520 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ffe7 	bl	80054fc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 800552e:	211c      	movs	r1, #28
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 f913 	bl	800775c <_ZdlPvj>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	4a05      	ldr	r2, [pc, #20]	; (8005560 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe fd47 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	08023894 	.word	0x08023894

08005564 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ffe7 	bl	8005540 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8005572:	2108      	movs	r1, #8
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f002 f8f1 	bl	800775c <_ZdlPvj>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4618      	mov	r0, r3
 8005596:	f00a fd0f 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	080238b4 	.word	0x080238b4

080055a8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ffe7 	bl	8005584 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 80055b6:	211c      	movs	r1, #28
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f002 f8cf 	bl	800775c <_ZdlPvj>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe fd03 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	08023960 	.word	0x08023960

080055ec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ffe7 	bl	80055c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80055fa:	2108      	movs	r1, #8
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f002 f8ad 	bl	800775c <_ZdlPvj>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	4a05      	ldr	r2, [pc, #20]	; (800562c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4618      	mov	r0, r3
 800561e:	f00a fccb 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	08023980 	.word	0x08023980

08005630 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff ffe7 	bl	800560c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800563e:	211c      	movs	r1, #28
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f002 f88b 	bl	800775c <_ZdlPvj>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	4a05      	ldr	r2, [pc, #20]	; (8005670 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fcbf 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08023a2c 	.word	0x08023a2c

08005674 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff ffe7 	bl	8005650 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8005682:	2108      	movs	r1, #8
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f002 f869 	bl	800775c <_ZdlPvj>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	4a05      	ldr	r2, [pc, #20]	; (80056b4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f00a fc87 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	08023a4c 	.word	0x08023a4c

080056b8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ffe7 	bl	8005694 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80056c6:	211c      	movs	r1, #28
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f002 f847 	bl	800775c <_ZdlPvj>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fe fc7b 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	08023af8 	.word	0x08023af8

080056fc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ffe7 	bl	80056d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 800570a:	2108      	movs	r1, #8
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f002 f825 	bl	800775c <_ZdlPvj>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	4a05      	ldr	r2, [pc, #20]	; (800573c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	f00a fc43 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	08023b18 	.word	0x08023b18

08005740 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ffe7 	bl	800571c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800574e:	211c      	movs	r1, #28
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f002 f803 	bl	800775c <_ZdlPvj>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	4a05      	ldr	r2, [pc, #20]	; (8005780 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe fc37 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	08023bc4 	.word	0x08023bc4

08005784 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ffe7 	bl	8005760 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8005792:	2108      	movs	r1, #8
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 ffe1 	bl	800775c <_ZdlPvj>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f00a fbff 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	08023be4 	.word	0x08023be4

080057c8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ffe7 	bl	80057a4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80057d6:	211c      	movs	r1, #28
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 ffbf 	bl	800775c <_ZdlPvj>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	4a05      	ldr	r2, [pc, #20]	; (8005808 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fbf3 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	08023c90 	.word	0x08023c90

0800580c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ffe7 	bl	80057e8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 800581a:	2108      	movs	r1, #8
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 ff9d 	bl	800775c <_ZdlPvj>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	4a05      	ldr	r2, [pc, #20]	; (800584c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4618      	mov	r0, r3
 800583e:	f00a fbbb 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	08023cb0 	.word	0x08023cb0

08005850 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ffe7 	bl	800582c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800585e:	211c      	movs	r1, #28
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 ff7b 	bl	800775c <_ZdlPvj>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe fbaf 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	08023d5c 	.word	0x08023d5c

08005894 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ffe7 	bl	8005870 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80058a2:	2108      	movs	r1, #8
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 ff59 	bl	800775c <_ZdlPvj>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f00a fb77 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	08023d7c 	.word	0x08023d7c

080058d8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff ffe7 	bl	80058b4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80058e6:	211c      	movs	r1, #28
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 ff37 	bl	800775c <_ZdlPvj>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	4a05      	ldr	r2, [pc, #20]	; (8005918 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fb6b 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	08023e28 	.word	0x08023e28

0800591c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff ffe7 	bl	80058f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800592a:	2108      	movs	r1, #8
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 ff15 	bl	800775c <_ZdlPvj>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	4a05      	ldr	r2, [pc, #20]	; (800595c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4618      	mov	r0, r3
 800594e:	f00a fb33 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	08023e48 	.word	0x08023e48

08005960 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ffe7 	bl	800593c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800596e:	211c      	movs	r1, #28
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 fef3 	bl	800775c <_ZdlPvj>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	4a05      	ldr	r2, [pc, #20]	; (80059a0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fb27 	bl	8003fe4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	08023ef4 	.word	0x08023ef4

080059a4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ffe7 	bl	8005980 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80059b2:	2108      	movs	r1, #8
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 fed1 	bl	800775c <_ZdlPvj>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	f040 80af 	bne.w	8005b34 <_Z41__static_initialization_and_destruction_0ii+0x170>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059dc:	4293      	cmp	r3, r2
 80059de:	f040 80a9 	bne.w	8005b34 <_Z41__static_initialization_and_destruction_0ii+0x170>
TEST(RingBuffer_Test_Group, InitTest)
 80059e2:	4881      	ldr	r0, [pc, #516]	; (8005be8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80059e4:	f7fe fb4c 	bl	8004080 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80059e8:	2324      	movs	r3, #36	; 0x24
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4b7f      	ldr	r3, [pc, #508]	; (8005bf0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80059f2:	4a80      	ldr	r2, [pc, #512]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80059f4:	497c      	ldr	r1, [pc, #496]	; (8005be8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80059f6:	4880      	ldr	r0, [pc, #512]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80059f8:	f00c f8da 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80059fc:	487f      	ldr	r0, [pc, #508]	; (8005bfc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80059fe:	f7fe fbf3 	bl	80041e8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8005a02:	232e      	movs	r3, #46	; 0x2e
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	4b79      	ldr	r3, [pc, #484]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	4b7d      	ldr	r3, [pc, #500]	; (8005c00 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8005a0c:	4a79      	ldr	r2, [pc, #484]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a0e:	497b      	ldr	r1, [pc, #492]	; (8005bfc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005a10:	487c      	ldr	r0, [pc, #496]	; (8005c04 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005a12:	f00c f8cd 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005a16:	487c      	ldr	r0, [pc, #496]	; (8005c08 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005a18:	f7fe fc70 	bl	80042fc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8005a1c:	2338      	movs	r3, #56	; 0x38
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	4b72      	ldr	r3, [pc, #456]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	4b79      	ldr	r3, [pc, #484]	; (8005c0c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005a26:	4a73      	ldr	r2, [pc, #460]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a28:	4977      	ldr	r1, [pc, #476]	; (8005c08 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005a2a:	4879      	ldr	r0, [pc, #484]	; (8005c10 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005a2c:	f00c f8c0 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8005a30:	4878      	ldr	r0, [pc, #480]	; (8005c14 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005a32:	f7fe fceb 	bl	800440c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8005a36:	2343      	movs	r3, #67	; 0x43
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	4b6c      	ldr	r3, [pc, #432]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4b76      	ldr	r3, [pc, #472]	; (8005c18 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005a40:	4a6c      	ldr	r2, [pc, #432]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a42:	4974      	ldr	r1, [pc, #464]	; (8005c14 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005a44:	4875      	ldr	r0, [pc, #468]	; (8005c1c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005a46:	f00c f8b3 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8005a4a:	4875      	ldr	r0, [pc, #468]	; (8005c20 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005a4c:	f7fe fd4a 	bl	80044e4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8005a50:	234c      	movs	r3, #76	; 0x4c
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	4b65      	ldr	r3, [pc, #404]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	4b72      	ldr	r3, [pc, #456]	; (8005c24 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005a5a:	4a66      	ldr	r2, [pc, #408]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a5c:	4970      	ldr	r1, [pc, #448]	; (8005c20 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005a5e:	4872      	ldr	r0, [pc, #456]	; (8005c28 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005a60:	f00c f8a6 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005a64:	4871      	ldr	r0, [pc, #452]	; (8005c2c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005a66:	f7fe fdc9 	bl	80045fc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8005a6a:	235c      	movs	r3, #92	; 0x5c
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	4b5f      	ldr	r3, [pc, #380]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	4b6f      	ldr	r3, [pc, #444]	; (8005c30 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005a74:	4a5f      	ldr	r2, [pc, #380]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a76:	496d      	ldr	r1, [pc, #436]	; (8005c2c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005a78:	486e      	ldr	r0, [pc, #440]	; (8005c34 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005a7a:	f00c f899 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005a7e:	486e      	ldr	r0, [pc, #440]	; (8005c38 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005a80:	f7fe fe7a 	bl	8004778 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8005a84:	2371      	movs	r3, #113	; 0x71
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	4b58      	ldr	r3, [pc, #352]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4b6b      	ldr	r3, [pc, #428]	; (8005c3c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005a8e:	4a59      	ldr	r2, [pc, #356]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a90:	4969      	ldr	r1, [pc, #420]	; (8005c38 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005a92:	486b      	ldr	r0, [pc, #428]	; (8005c40 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005a94:	f00c f88c 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8005a98:	486a      	ldr	r0, [pc, #424]	; (8005c44 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005a9a:	f7fe fed3 	bl	8004844 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8005a9e:	2378      	movs	r3, #120	; 0x78
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	4b52      	ldr	r3, [pc, #328]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4b68      	ldr	r3, [pc, #416]	; (8005c48 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005aaa:	4966      	ldr	r1, [pc, #408]	; (8005c44 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005aac:	4867      	ldr	r0, [pc, #412]	; (8005c4c <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005aae:	f00c f87f 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005ab2:	4867      	ldr	r0, [pc, #412]	; (8005c50 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005ab4:	f7fe ffb0 	bl	8004a18 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	4b4b      	ldr	r3, [pc, #300]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4b64      	ldr	r3, [pc, #400]	; (8005c54 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005ac2:	4a4c      	ldr	r2, [pc, #304]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005ac4:	4962      	ldr	r1, [pc, #392]	; (8005c50 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005ac6:	4864      	ldr	r0, [pc, #400]	; (8005c58 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005ac8:	f00c f872 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005acc:	4863      	ldr	r0, [pc, #396]	; (8005c5c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005ace:	f7ff f8ef 	bl	8004cb0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8005ad2:	23b2      	movs	r3, #178	; 0xb2
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	4b45      	ldr	r3, [pc, #276]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005adc:	4a61      	ldr	r2, [pc, #388]	; (8005c64 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005ade:	495f      	ldr	r1, [pc, #380]	; (8005c5c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005ae0:	4861      	ldr	r0, [pc, #388]	; (8005c68 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005ae2:	f00c f865 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005ae6:	4861      	ldr	r0, [pc, #388]	; (8005c6c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005ae8:	f7ff f94c 	bl	8004d84 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8005aec:	23c4      	movs	r3, #196	; 0xc4
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	4b3e      	ldr	r3, [pc, #248]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4b5e      	ldr	r3, [pc, #376]	; (8005c70 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8005af6:	4a5b      	ldr	r2, [pc, #364]	; (8005c64 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005af8:	495c      	ldr	r1, [pc, #368]	; (8005c6c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005afa:	485e      	ldr	r0, [pc, #376]	; (8005c74 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005afc:	f00c f858 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005b00:	485d      	ldr	r0, [pc, #372]	; (8005c78 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005b02:	f7ff fa17 	bl	8004f34 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8005b06:	23cf      	movs	r3, #207	; 0xcf
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	4b38      	ldr	r3, [pc, #224]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	4b5b      	ldr	r3, [pc, #364]	; (8005c7c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8005b10:	4a54      	ldr	r2, [pc, #336]	; (8005c64 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005b12:	4959      	ldr	r1, [pc, #356]	; (8005c78 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005b14:	485a      	ldr	r0, [pc, #360]	; (8005c80 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005b16:	f00c f84b 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8005b1a:	485a      	ldr	r0, [pc, #360]	; (8005c84 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005b1c:	f7ff fb3a 	bl	8005194 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8005b20:	23e0      	movs	r3, #224	; 0xe0
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	4b31      	ldr	r3, [pc, #196]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	4b57      	ldr	r3, [pc, #348]	; (8005c88 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8005b2a:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005b2c:	4955      	ldr	r1, [pc, #340]	; (8005c84 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005b2e:	4857      	ldr	r0, [pc, #348]	; (8005c8c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005b30:	f00c f83e 	bl	8011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d152      	bne.n	8005be0 <_Z41__static_initialization_and_destruction_0ii+0x21c>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d14d      	bne.n	8005be0 <_Z41__static_initialization_and_destruction_0ii+0x21c>
 8005b44:	4851      	ldr	r0, [pc, #324]	; (8005c8c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005b46:	f00c f85d 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b4a:	484e      	ldr	r0, [pc, #312]	; (8005c84 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005b4c:	f7ff fbc6 	bl	80052dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005b50:	484b      	ldr	r0, [pc, #300]	; (8005c80 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005b52:	f00c f857 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b56:	4848      	ldr	r0, [pc, #288]	; (8005c78 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005b58:	f7ff fc04 	bl	8005364 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005b5c:	4845      	ldr	r0, [pc, #276]	; (8005c74 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005b5e:	f00c f851 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b62:	4842      	ldr	r0, [pc, #264]	; (8005c6c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005b64:	f7ff fc42 	bl	80053ec <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005b68:	483f      	ldr	r0, [pc, #252]	; (8005c68 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005b6a:	f00c f84b 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b6e:	483b      	ldr	r0, [pc, #236]	; (8005c5c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005b70:	f7ff fc80 	bl	8005474 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005b74:	4838      	ldr	r0, [pc, #224]	; (8005c58 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005b76:	f00c f845 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b7a:	4835      	ldr	r0, [pc, #212]	; (8005c50 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005b7c:	f7ff fcbe 	bl	80054fc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8005b80:	4832      	ldr	r0, [pc, #200]	; (8005c4c <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005b82:	f00c f83f 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b86:	482f      	ldr	r0, [pc, #188]	; (8005c44 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005b88:	f7ff fcfc 	bl	8005584 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005b8c:	482c      	ldr	r0, [pc, #176]	; (8005c40 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005b8e:	f00c f839 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b92:	4829      	ldr	r0, [pc, #164]	; (8005c38 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005b94:	f7ff fd3a 	bl	800560c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005b98:	4826      	ldr	r0, [pc, #152]	; (8005c34 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005b9a:	f00c f833 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005b9e:	4823      	ldr	r0, [pc, #140]	; (8005c2c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005ba0:	f7ff fd78 	bl	8005694 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8005ba4:	4820      	ldr	r0, [pc, #128]	; (8005c28 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005ba6:	f00c f82d 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005baa:	481d      	ldr	r0, [pc, #116]	; (8005c20 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005bac:	f7ff fdb6 	bl	800571c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8005bb0:	481a      	ldr	r0, [pc, #104]	; (8005c1c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005bb2:	f00c f827 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005bb6:	4817      	ldr	r0, [pc, #92]	; (8005c14 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005bb8:	f7ff fdf4 	bl	80057a4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005bbc:	4814      	ldr	r0, [pc, #80]	; (8005c10 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005bbe:	f00c f821 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005bc2:	4811      	ldr	r0, [pc, #68]	; (8005c08 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005bc4:	f7ff fe32 	bl	800582c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8005bc8:	480e      	ldr	r0, [pc, #56]	; (8005c04 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005bca:	f00c f81b 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005bce:	480b      	ldr	r0, [pc, #44]	; (8005bfc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005bd0:	f7ff fe70 	bl	80058b4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8005bd4:	4808      	ldr	r0, [pc, #32]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005bd6:	f00c f815 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8005bda:	4803      	ldr	r0, [pc, #12]	; (8005be8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005bdc:	f7ff feae 	bl	800593c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000490 	.word	0x20000490
 8005bec:	080206f8 	.word	0x080206f8
 8005bf0:	08020a90 	.word	0x08020a90
 8005bf4:	08020a9c 	.word	0x08020a9c
 8005bf8:	200004ac 	.word	0x200004ac
 8005bfc:	200004b0 	.word	0x200004b0
 8005c00:	08020ab4 	.word	0x08020ab4
 8005c04:	200004cc 	.word	0x200004cc
 8005c08:	200004d0 	.word	0x200004d0
 8005c0c:	08020ac4 	.word	0x08020ac4
 8005c10:	200004ec 	.word	0x200004ec
 8005c14:	200004f0 	.word	0x200004f0
 8005c18:	08020ad8 	.word	0x08020ad8
 8005c1c:	2000050c 	.word	0x2000050c
 8005c20:	20000510 	.word	0x20000510
 8005c24:	08020ae8 	.word	0x08020ae8
 8005c28:	2000052c 	.word	0x2000052c
 8005c2c:	20000530 	.word	0x20000530
 8005c30:	08020b00 	.word	0x08020b00
 8005c34:	2000054c 	.word	0x2000054c
 8005c38:	20000550 	.word	0x20000550
 8005c3c:	08020b10 	.word	0x08020b10
 8005c40:	2000056c 	.word	0x2000056c
 8005c44:	20000570 	.word	0x20000570
 8005c48:	08020b20 	.word	0x08020b20
 8005c4c:	2000058c 	.word	0x2000058c
 8005c50:	20000590 	.word	0x20000590
 8005c54:	08020b2c 	.word	0x08020b2c
 8005c58:	200005ac 	.word	0x200005ac
 8005c5c:	200005b4 	.word	0x200005b4
 8005c60:	08020b3c 	.word	0x08020b3c
 8005c64:	08020b4c 	.word	0x08020b4c
 8005c68:	200005d0 	.word	0x200005d0
 8005c6c:	200005d4 	.word	0x200005d4
 8005c70:	08020b64 	.word	0x08020b64
 8005c74:	200005f0 	.word	0x200005f0
 8005c78:	200005f4 	.word	0x200005f4
 8005c7c:	08020b7c 	.word	0x08020b7c
 8005c80:	20000610 	.word	0x20000610
 8005c84:	20000614 	.word	0x20000614
 8005c88:	08020b98 	.word	0x08020b98
 8005c8c:	20000630 	.word	0x20000630

08005c90 <_GLOBAL__sub_I_rx_buffer>:
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7ff fe93 	bl	80059c4 <_Z41__static_initialization_and_destruction_0ii>
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_GLOBAL__sub_D_rx_buffer>:
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ca8:	2000      	movs	r0, #0
 8005caa:	f7ff fe8b 	bl	80059c4 <_Z41__static_initialization_and_destruction_0ii>
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
    }
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
    }
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
    }
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ffed 	bl	8005ce0 <_ZNK10TestResult15getFailureCountEv>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <_ZNK10TestResult9isFailureEv+0x2a>
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ffcf 	bl	8005cb0 <_ZNK10TestResult11getRunCountEv>
 8005d12:	4604      	mov	r4, r0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ffd7 	bl	8005cc8 <_ZNK10TestResult15getIgnoredCountEv>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4423      	add	r3, r4
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <_ZNK10TestResult9isFailureEv+0x2e>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <_ZNK10TestResult9isFailureEv+0x30>
 8005d26:	2300      	movs	r3, #0
    }
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}

08005d30 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
    {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f007 fde6 	bl	800d90c <_ZN10TestOutputC1Ev>
 8005d40:	4a03      	ldr	r2, [pc, #12]	; (8005d50 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
    }
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	080245a8 	.word	0x080245a8

08005d54 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
    {
 8005d5c:	4a05      	ldr	r2, [pc, #20]	; (8005d74 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f007 fdef 	bl	800d948 <_ZN10TestOutputD1Ev>
    }
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	080245a8 	.word	0x080245a8

08005d78 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
    }
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ffe7 	bl	8005d54 <_ZN17ConsoleTestOutputD1Ev>
 8005d86:	2110      	movs	r1, #16
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fce7 	bl	800775c <_ZdlPvj>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8005d98:	b5b0      	push	{r4, r5, r7, lr}
 8005d9a:	b098      	sub	sp, #96	; 0x60
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
    int result = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8005da6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff ffc0 	bl	8005d30 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005db0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005db4:	4935      	ldr	r1, [pc, #212]	; (8005e8c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8005db6:	4618      	mov	r0, r3
 8005db8:	f004 f87f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005dbc:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8005dc0:	f107 0318 	add.w	r3, r7, #24
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 ff6a 	bl	8007ca0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8005dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f004 fc2a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8005dd6:	f107 0318 	add.w	r3, r7, #24
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 ff2f 	bl	8007c40 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8005de2:	f009 fb21 	bl	800f428 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005de6:	4603      	mov	r3, r0
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	3234      	adds	r2, #52	; 0x34
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	f107 0118 	add.w	r1, r7, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8005df6:	f009 fb17 	bl	800f428 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f107 0008 	add.w	r0, r7, #8
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	f000 f844 	bl	8005e90 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 f899 	bl	8005f44 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8005e12:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 f863 	bl	8005ee4 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8005e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10c      	bne.n	8005e3e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8005e24:	f107 0318 	add.w	r3, r7, #24
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 f83a 	bl	8007ea4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8005e30:	4602      	mov	r2, r0
 8005e32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f007 fe27 	bl	800da8c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8005e3e:	f009 faf3 	bl	800f428 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005e42:	4604      	mov	r4, r0
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	3344      	adds	r3, #68	; 0x44
 8005e48:	681d      	ldr	r5, [r3, #0]
 8005e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e4e:	490f      	ldr	r1, [pc, #60]	; (8005e8c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8005e50:	4618      	mov	r0, r3
 8005e52:	f004 f832 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	47a8      	blx	r5
 8005e60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e64:	4618      	mov	r0, r3
 8005e66:	f004 fbe0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return result;
 8005e6a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005e6c:	f107 0318 	add.w	r3, r7, #24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 ff4d 	bl	8007d10 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8005e76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ff6a 	bl	8005d54 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8005e80:	4623      	mov	r3, r4
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3760      	adds	r7, #96	; 0x60
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08020bac 	.word	0x08020bac

08005e90 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8005e9e:	4a0f      	ldr	r2, [pc, #60]	; (8005edc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8005eb6:	2241      	movs	r2, #65	; 0x41
 8005eb8:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8005eba:	2038      	movs	r0, #56	; 0x38
 8005ebc:	f001 fc3a 	bl	8007734 <_ZnwjPKci>
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f00c f84a 	bl	8011f60 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	609c      	str	r4, [r3, #8]
}
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd90      	pop	{r4, r7, pc}
 8005eda:	bf00      	nop
 8005edc:	08023f34 	.word	0x08023f34
 8005ee0:	08020bc0 	.word	0x08020bc0

08005ee4 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	4a0c      	ldr	r2, [pc, #48]	; (8005f20 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	3204      	adds	r2, #4
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	4790      	blx	r2
    delete output_;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	3204      	adds	r2, #4
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	4790      	blx	r2
}
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	08023f34 	.word	0x08023f34

08005f24 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
}
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ffd9 	bl	8005ee4 <_ZN21CommandLineTestRunnerD1Ev>
 8005f32:	2110      	movs	r1, #16
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fc11 	bl	800775c <_ZdlPvj>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8005f44:	b5b0      	push	{r4, r5, r7, lr}
 8005f46:	b08c      	sub	sp, #48	; 0x30
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8005f50:	f107 031c 	add.w	r3, r7, #28
 8005f54:	4929      	ldr	r1, [pc, #164]	; (8005ffc <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8005f56:	4618      	mov	r0, r3
 8005f58:	f003 ffaf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005f5c:	f107 021c 	add.w	r2, r7, #28
 8005f60:	f107 0308 	add.w	r3, r7, #8
 8005f64:	4611      	mov	r1, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f008 fe1c 	bl	800eba4 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8005f6c:	f107 031c 	add.w	r3, r7, #28
 8005f70:	4618      	mov	r0, r3
 8005f72:	f004 fb5a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3334      	adds	r3, #52	; 0x34
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f107 0108 	add.w	r1, r7, #8
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	333c      	adds	r3, #60	; 0x3c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4798      	blx	r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa3e 	bl	8006424 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8ac 	bl	800610c <_ZN21CommandLineTestRunner11runAllTestsEv>
 8005fb4:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68dd      	ldr	r5, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3344      	adds	r3, #68	; 0x44
 8005fc2:	681c      	ldr	r4, [r3, #0]
 8005fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc8:	490c      	ldr	r1, [pc, #48]	; (8005ffc <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f003 ff75 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8005fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47a0      	blx	r4
 8005fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f004 fb23 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return testResult;
 8005fe4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 faaa 	bl	8006544 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8005ff0:	4623      	mov	r3, r4
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3730      	adds	r7, #48	; 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	08020be4 	.word	0x08020be4

08006000 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8006000:	b5b0      	push	{r4, r5, r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68dd      	ldr	r5, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3330      	adds	r3, #48	; 0x30
 8006014:	681c      	ldr	r4, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f00c fce0 	bl	80129e0 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8006020:	4603      	mov	r3, r0
 8006022:	4619      	mov	r1, r3
 8006024:	4628      	mov	r0, r5
 8006026:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68dd      	ldr	r5, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	332c      	adds	r3, #44	; 0x2c
 8006034:	681c      	ldr	r4, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f00c fcdc 	bl	80129f8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8006040:	4603      	mov	r3, r0
 8006042:	4619      	mov	r1, r3
 8006044:	4628      	mov	r0, r5
 8006046:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4618      	mov	r0, r3
 800604e:	f00c fc2b 	bl	80128a8 <_ZNK20CommandLineArguments9isVerboseEv>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3320      	adds	r3, #32
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2101      	movs	r1, #1
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4618      	mov	r0, r3
 8006072:	f00c fc25 	bl	80128c0 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3320      	adds	r3, #32
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2102      	movs	r1, #2
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f00c fc1f 	bl	80128d8 <_ZNK20CommandLineArguments7isColorEv>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d008      	beq.n	80060b2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3324      	adds	r3, #36	; 0x24
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4610      	mov	r0, r2
 80060b0:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f00c fc4a 	bl	8012950 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d008      	beq.n	80060d4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3360      	adds	r3, #96	; 0x60
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4618      	mov	r0, r3
 80060da:	f00c fc2d 	bl	8012938 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f009 fa19 	bl	800f520 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f00c fc50 	bl	8012998 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80060fe:	f00b fadb 	bl	80116b8 <_ZN10UtestShell14setCrashOnFailEv>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800610c <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b094      	sub	sp, #80	; 0x50
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff73 	bl	8006000 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f00c fc1c 	bl	8012968 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8006130:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f00c fbda 	bl	80128f0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d019      	beq.n	8006176 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f009 fbaf 	bl	800f8b0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3320      	adds	r3, #32
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f107 0108 	add.w	r1, r7, #8
 8006164:	4610      	mov	r0, r2
 8006166:	4798      	blx	r3
        return 0;
 8006168:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4618      	mov	r0, r3
 8006170:	f009 fbd6 	bl	800f920 <_ZN10TestResultD1Ev>
 8006174:	e0e1      	b.n	800633a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f00c fbc4 	bl	8012908 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d019      	beq.n	80061ba <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4611      	mov	r1, r2
 8006190:	4618      	mov	r0, r3
 8006192:	f009 fb8d 	bl	800f8b0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f107 0108 	add.w	r1, r7, #8
 80061a8:	4610      	mov	r0, r2
 80061aa:	4798      	blx	r3
        return 0;
 80061ac:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80061ae:	f107 0308 	add.w	r3, r7, #8
 80061b2:	4618      	mov	r0, r3
 80061b4:	f009 fbb4 	bl	800f920 <_ZN10TestResultD1Ev>
 80061b8:	e0bf      	b.n	800633a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f00c fbae 	bl	8012920 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d019      	beq.n	80061fe <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f009 fb6b 	bl	800f8b0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3328      	adds	r3, #40	; 0x28
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f107 0108 	add.w	r1, r7, #8
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
        return 0;
 80061f0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	4618      	mov	r0, r3
 80061f8:	f009 fb92 	bl	800f920 <_ZN10TestResultD1Ev>
 80061fc:	e09d      	b.n	800633a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f00c fbbc 	bl	8012980 <_ZNK20CommandLineArguments11isReversingEv>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	331c      	adds	r3, #28
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3

    if (arguments_->isShuffling())
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4618      	mov	r0, r3
 8006226:	f00c fbc3 	bl	80129b0 <_ZNK20CommandLineArguments11isShufflingEv>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d023      	beq.n	8006278 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	332c      	adds	r3, #44	; 0x2c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4941      	ldr	r1, [pc, #260]	; (8006344 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8006240:	4610      	mov	r0, r2
 8006242:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685d      	ldr	r5, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3334      	adds	r3, #52	; 0x34
 8006250:	681c      	ldr	r4, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f00c fbb6 	bl	80129c8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800625c:	4603      	mov	r3, r0
 800625e:	4619      	mov	r1, r3
 8006260:	4628      	mov	r0, r5
 8006262:	47a0      	blx	r4
        output_->print("\n");
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	332c      	adds	r3, #44	; 0x2c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4935      	ldr	r1, [pc, #212]	; (8006348 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8006274:	4610      	mov	r0, r2
 8006276:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800627e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006280:	429a      	cmp	r2, r3
 8006282:	bf8c      	ite	hi
 8006284:	2301      	movhi	r3, #1
 8006286:	2300      	movls	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04e      	beq.n	800632c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	4618      	mov	r0, r3
 8006294:	f00c fb8c 	bl	80129b0 <_ZNK20CommandLineArguments11isShufflingEv>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68dd      	ldr	r5, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3318      	adds	r3, #24
 80062aa:	681c      	ldr	r4, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f00c fb89 	bl	80129c8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4619      	mov	r1, r3
 80062ba:	4628      	mov	r0, r5
 80062bc:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6858      	ldr	r0, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3340      	adds	r3, #64	; 0x40
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80062d0:	4798      	blx	r3
        TestResult tr(*output_);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f009 fae7 	bl	800f8b0 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f107 0108 	add.w	r1, r7, #8
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fcef 	bl	8005ce0 <_ZNK10TestResult15getFailureCountEv>
 8006302:	4602      	mov	r2, r0
 8006304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006306:	4413      	add	r3, r2
 8006308:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800630a:	f107 0308 	add.w	r3, r7, #8
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fcf2 	bl	8005cf8 <_ZNK10TestResult9isFailureEv>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800631a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631c:	3301      	adds	r3, #1
 800631e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8006320:	f107 0308 	add.w	r3, r7, #8
 8006324:	4618      	mov	r0, r3
 8006326:	f009 fafb 	bl	800f920 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800632a:	e7a5      	b.n	8006278 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800632c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8006332:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006334:	e000      	b.n	8006338 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8006336:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006338:	bf00      	nop
 800633a:	4623      	mov	r3, r4
}
 800633c:	4618      	mov	r0, r3
 800633e:	3750      	adds	r7, #80	; 0x50
 8006340:	46bd      	mov	sp, r7
 8006342:	bdb0      	pop	{r4, r5, r7, pc}
 8006344:	08020bf8 	.word	0x08020bf8
 8006348:	08020c24 	.word	0x08020c24

0800634c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8006354:	229d      	movs	r2, #157	; 0x9d
 8006356:	4906      	ldr	r1, [pc, #24]	; (8006370 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8006358:	201c      	movs	r0, #28
 800635a:	f001 f9eb 	bl	8007734 <_ZnwjPKci>
 800635e:	4604      	mov	r4, r0
 8006360:	4620      	mov	r0, r4
 8006362:	f005 f955 	bl	800b610 <_ZN18TeamCityTestOutputC1Ev>
 8006366:	4623      	mov	r3, r4
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bd90      	pop	{r4, r7, pc}
 8006370:	08020bc0 	.word	0x08020bc0

08006374 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8006374:	b590      	push	{r4, r7, lr}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800637e:	22a2      	movs	r2, #162	; 0xa2
 8006380:	490a      	ldr	r1, [pc, #40]	; (80063ac <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8006382:	2014      	movs	r0, #20
 8006384:	f001 f9d6 	bl	8007734 <_ZnwjPKci>
 8006388:	4604      	mov	r4, r0
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f980 	bl	8006690 <_ZN15JUnitTestOutputC1Ev>
 8006390:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fbb2 	bl	8006b04 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd90      	pop	{r4, r7, pc}
 80063aa:	bf00      	nop
 80063ac:	08020bc0 	.word	0x08020bc0

080063b0 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 80063b8:	22ab      	movs	r2, #171	; 0xab
 80063ba:	4906      	ldr	r1, [pc, #24]	; (80063d4 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 80063bc:	2010      	movs	r0, #16
 80063be:	f001 f9b9 	bl	8007734 <_ZnwjPKci>
 80063c2:	4604      	mov	r4, r0
 80063c4:	4620      	mov	r0, r4
 80063c6:	f7ff fcb3 	bl	8005d30 <_ZN17ConsoleTestOutputC1Ev>
 80063ca:	4623      	mov	r3, r4
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd90      	pop	{r4, r7, pc}
 80063d4:	08020bc0 	.word	0x08020bc0

080063d8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 80063d8:	b590      	push	{r4, r7, lr}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80063e4:	22b0      	movs	r2, #176	; 0xb0
 80063e6:	490e      	ldr	r1, [pc, #56]	; (8006420 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80063e8:	2018      	movs	r0, #24
 80063ea:	f001 f9a3 	bl	8007734 <_ZnwjPKci>
 80063ee:	4604      	mov	r4, r0
 80063f0:	4620      	mov	r0, r4
 80063f2:	f007 ff83 	bl	800e2fc <_ZN19CompositeTestOutputC1Ev>
 80063f6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	335c      	adds	r3, #92	; 0x5c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	6978      	ldr	r0, [r7, #20]
 8006404:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3360      	adds	r3, #96	; 0x60
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	4798      	blx	r3
  return composite;
 8006414:	697b      	ldr	r3, [r7, #20]
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	bd90      	pop	{r4, r7, pc}
 800641e:	bf00      	nop
 8006420:	08020bc0 	.word	0x08020bc0

08006424 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8006424:	b5b0      	push	{r4, r5, r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f00b fe4f 	bl	80120d8 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800643a:	4603      	mov	r3, r0
 800643c:	f083 0301 	eor.w	r3, r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d029      	beq.n	800649a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3310      	adds	r3, #16
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4602      	mov	r2, r0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685d      	ldr	r5, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	332c      	adds	r3, #44	; 0x2c
 8006464:	681c      	ldr	r4, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	4618      	mov	r0, r3
 800646c:	f00c fa10 	bl	8012890 <_ZNK20CommandLineArguments8needHelpEv>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d006      	beq.n	8006484 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f00c f9fa 	bl	8012874 <_ZNK20CommandLineArguments4helpEv>
 8006480:	4603      	mov	r3, r0
 8006482:	e005      	b.n	8006490 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4618      	mov	r0, r3
 800648a:	f00c f9e5 	bl	8012858 <_ZNK20CommandLineArguments5usageEv>
 800648e:	4603      	mov	r3, r0
 8006490:	4619      	mov	r1, r3
 8006492:	4628      	mov	r0, r5
 8006494:	47a0      	blx	r4
    return false;
 8006496:	2300      	movs	r3, #0
 8006498:	e050      	b.n	800653c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	4618      	mov	r0, r3
 80064a0:	f00d f84c 	bl	801353c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02c      	beq.n	8006504 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	330c      	adds	r3, #12
 80064b0:	681c      	ldr	r4, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f00d f864 	bl	8013584 <_ZNK20CommandLineArguments14getPackageNameEv>
 80064bc:	4603      	mov	r3, r0
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	47a0      	blx	r4
 80064c4:	4602      	mov	r2, r0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f00c f9ea 	bl	80128a8 <_ZNK20CommandLineArguments9isVerboseEv>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02f      	beq.n	800653a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	681c      	ldr	r4, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685d      	ldr	r5, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3310      	adds	r3, #16
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
 80064f2:	4603      	mov	r3, r0
 80064f4:	461a      	mov	r2, r3
 80064f6:	4629      	mov	r1, r5
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	47a0      	blx	r4
 80064fc:	4602      	mov	r2, r0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	e01a      	b.n	800653a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f00d f829 	bl	8013560 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
 8006520:	4602      	mov	r2, r0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	e008      	b.n	800653a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3310      	adds	r3, #16
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
 8006534:	4602      	mov	r2, r0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	605a      	str	r2, [r3, #4]
  return true;
 800653a:	2301      	movs	r3, #1
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bdb0      	pop	{r4, r5, r7, pc}

08006544 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <_ZN16SetPointerPluginD1Ev+0x20>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f008 f9e7 	bl	800e928 <_ZN10TestPluginD1Ev>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	080246b4 	.word	0x080246b4

08006568 <_ZN16SetPointerPluginD0Ev>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ffe7 	bl	8006544 <_ZN16SetPointerPluginD1Ev>
 8006576:	2114      	movs	r1, #20
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f8ef 	bl	800775c <_ZdlPvj>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
    }
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4910      	ldr	r1, [pc, #64]	; (80065ec <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f003 fc84 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	609a      	str	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	741a      	strb	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3314      	adds	r3, #20
 80065c8:	4908      	ldr	r1, [pc, #32]	; (80065ec <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f003 fc75 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	61da      	str	r2, [r3, #28]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	621a      	str	r2, [r3, #32]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	08020c28 	.word	0x08020c28

080065f0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	609a      	str	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	60da      	str	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	611a      	str	r2, [r3, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3314      	adds	r3, #20
 800661a:	4907      	ldr	r1, [pc, #28]	; (8006638 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800661c:	4618      	mov	r0, r3
 800661e:	f003 fc4c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	61da      	str	r2, [r3, #28]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	621a      	str	r2, [r3, #32]
    {
    }
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	08020c28 	.word	0x08020c28

0800663c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3314      	adds	r3, #20
 8006648:	4618      	mov	r0, r3
 800664a:	f003 ffee 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff ffc4 	bl	80065f0 <_ZN20JUnitTestGroupResultC1Ev>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3328      	adds	r3, #40	; 0x28
 800666c:	4907      	ldr	r1, [pc, #28]	; (800668c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800666e:	4618      	mov	r0, r3
 8006670:	f003 fc23 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3330      	adds	r3, #48	; 0x30
 8006678:	4904      	ldr	r1, [pc, #16]	; (800668c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800667a:	4618      	mov	r0, r3
 800667c:	f003 fc1d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	08020c28 	.word	0x08020c28

08006690 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4618      	mov	r0, r3
 800669c:	f007 f936 	bl	800d90c <_ZN10TestOutputC1Ev>
 80066a0:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <_ZN15JUnitTestOutputC1Ev+0x38>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	224d      	movs	r2, #77	; 0x4d
 80066a8:	4908      	ldr	r1, [pc, #32]	; (80066cc <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80066aa:	2038      	movs	r0, #56	; 0x38
 80066ac:	f001 f842 	bl	8007734 <_ZnwjPKci>
 80066b0:	4604      	mov	r4, r0
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff ffd0 	bl	8006658 <_ZN19JUnitTestOutputImplC1Ev>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	611c      	str	r4, [r3, #16]
{
}
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}
 80066c6:	bf00      	nop
 80066c8:	08023f54 	.word	0x08023f54
 80066cc:	08020c2c 	.word	0x08020c2c

080066d0 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3330      	adds	r3, #48	; 0x30
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 ffa4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3328      	adds	r3, #40	; 0x28
 80066e6:	4618      	mov	r0, r3
 80066e8:	f003 ff9f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ffa4 	bl	800663c <_ZN20JUnitTestGroupResultD1Ev>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	4a0c      	ldr	r2, [pc, #48]	; (800673c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f838 	bl	8006784 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691c      	ldr	r4, [r3, #16]
 8006718:	2c00      	cmp	r4, #0
 800671a:	d006      	beq.n	800672a <_ZN15JUnitTestOutputD1Ev+0x2a>
 800671c:	4620      	mov	r0, r4
 800671e:	f7ff ffd7 	bl	80066d0 <_ZN19JUnitTestOutputImplD1Ev>
 8006722:	2138      	movs	r1, #56	; 0x38
 8006724:	4620      	mov	r0, r4
 8006726:	f001 f819 	bl	800775c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4618      	mov	r0, r3
 800672e:	f007 f90b 	bl	800d948 <_ZN10TestOutputD1Ev>
}
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}
 800673c:	08023f54 	.word	0x08023f54

08006740 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
}
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff ffd9 	bl	8006700 <_ZN15JUnitTestOutputD1Ev>
 800674e:	2114      	movs	r1, #20
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f803 	bl	800775c <_ZdlPvj>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3314      	adds	r3, #20
 800676c:	4618      	mov	r0, r3
 800676e:	f003 ff5c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4618      	mov	r0, r3
 8006776:	f003 ff58 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2200      	movs	r2, #0
 800679a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f103 0414 	add.w	r4, r3, #20
 80067a4:	f107 0308 	add.w	r3, r7, #8
 80067a8:	491d      	ldr	r1, [pc, #116]	; (8006820 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80067aa:	4618      	mov	r0, r3
 80067ac:	f003 fb85 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80067b0:	f107 0308 	add.w	r3, r7, #8
 80067b4:	4619      	mov	r1, r3
 80067b6:	4620      	mov	r0, r4
 80067b8:	f003 fbeb 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 80067bc:	f107 0308 	add.w	r3, r7, #8
 80067c0:	4618      	mov	r0, r3
 80067c2:	f003 ff32 	bl	800a62a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	617b      	str	r3, [r7, #20]
    while (cur) {
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	3204      	adds	r2, #4
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	4790      	blx	r2
        delete cur;
 80067ec:	697c      	ldr	r4, [r7, #20]
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	d006      	beq.n	8006800 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff ffb4 	bl	8006760 <_ZN23JUnitTestCaseResultNodeD1Ev>
 80067f8:	2128      	movs	r1, #40	; 0x28
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 ffae 	bl	800775c <_ZdlPvj>
        cur = tmp;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006804:	e7e3      	b.n	80067ce <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	2200      	movs	r2, #0
 800680c:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2200      	movs	r2, #0
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bd90      	pop	{r4, r7, pc}
 800681e:	bf00      	nop
 8006820:	08020c28 	.word	0x08020c28

08006824 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800684e:	b590      	push	{r4, r7, lr}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	6a1c      	ldr	r4, [r3, #32]
 800685e:	6838      	ldr	r0, [r7, #0]
 8006860:	f009 f9c6 	bl	800fbf0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8006864:	4603      	mov	r3, r0
 8006866:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	6a1c      	ldr	r4, [r3, #32]
 800686e:	6838      	ldr	r0, [r7, #0]
 8006870:	f7ff fe8a 	bl	8006588 <_ZNK10TestResult13getCheckCountEv>
 8006874:	4603      	mov	r3, r0
 8006876:	6223      	str	r3, [r4, #32]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bd90      	pop	{r4, r7, pc}

08006880 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8006896:	b590      	push	{r4, r7, lr}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691c      	ldr	r4, [r3, #16]
 80068a4:	6838      	ldr	r0, [r7, #0]
 80068a6:	f009 f9af 	bl	800fc08 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80068aa:	4603      	mov	r3, r0
 80068ac:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3364      	adds	r3, #100	; 0x64
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
    resetTestGroupResult();
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff62 	bl	8006784 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd90      	pop	{r4, r7, pc}

080068c8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80068c8:	b590      	push	{r4, r7, lr}
 80068ca:	b089      	sub	sp, #36	; 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	3201      	adds	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f103 0414 	add.w	r4, r3, #20
 80068e4:	f107 0308 	add.w	r3, r7, #8
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f009 fcef 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	4619      	mov	r1, r3
 80068f6:	4620      	mov	r0, r4
 80068f8:	f003 fb4b 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 80068fc:	f107 0308 	add.w	r3, r7, #8
 8006900:	4618      	mov	r0, r3
 8006902:	f003 fe92 	bl	800a62a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8006906:	4b3c      	ldr	r3, [pc, #240]	; (80069f8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4798      	blx	r3
 800690c:	4602      	mov	r2, r0
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d110      	bne.n	8006940 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800691e:	2288      	movs	r2, #136	; 0x88
 8006920:	4936      	ldr	r1, [pc, #216]	; (80069fc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8006922:	2028      	movs	r0, #40	; 0x28
 8006924:	f000 ff06 	bl	8007734 <_ZnwjPKci>
 8006928:	4604      	mov	r4, r0
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff fe38 	bl	80065a0 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8006934:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6912      	ldr	r2, [r2, #16]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	61d3      	str	r3, [r2, #28]
 800693e:	e013      	b.n	8006968 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8006940:	228b      	movs	r2, #139	; 0x8b
 8006942:	492e      	ldr	r1, [pc, #184]	; (80069fc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8006944:	2028      	movs	r0, #40	; 0x28
 8006946:	f000 fef5 	bl	8007734 <_ZnwjPKci>
 800694a:	4604      	mov	r4, r0
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff fe27 	bl	80065a0 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006966:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	461c      	mov	r4, r3
 8006970:	f107 0310 	add.w	r3, r7, #16
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f009 fc9a 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800697c:	f107 0310 	add.w	r3, r7, #16
 8006980:	4619      	mov	r1, r3
 8006982:	4620      	mov	r0, r4
 8006984:	f003 fb05 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 8006988:	f107 0310 	add.w	r3, r7, #16
 800698c:	4618      	mov	r0, r3
 800698e:	f003 fe4c 	bl	800a62a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f103 0414 	add.w	r4, r3, #20
 800699c:	f107 0318 	add.w	r3, r7, #24
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f009 fd55 	bl	8010452 <_ZNK10UtestShell7getFileEv>
 80069a8:	f107 0318 	add.w	r3, r7, #24
 80069ac:	4619      	mov	r1, r3
 80069ae:	4620      	mov	r0, r4
 80069b0:	f003 faef 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 80069b4:	f107 0318 	add.w	r3, r7, #24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f003 fe36 	bl	800a62a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	6a1c      	ldr	r4, [r3, #32]
 80069c4:	6838      	ldr	r0, [r7, #0]
 80069c6:	f009 fd53 	bl	8010470 <_ZNK10UtestShell13getLineNumberEv>
 80069ca:	4603      	mov	r3, r0
 80069cc:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3318      	adds	r3, #24
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6838      	ldr	r0, [r7, #0]
 80069d8:	4798      	blx	r3
 80069da:	4603      	mov	r3, r0
 80069dc:	f083 0301 	eor.w	r3, r3, #1
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	2201      	movs	r2, #1
 80069ee:	741a      	strb	r2, [r3, #16]
    }
}
 80069f0:	bf00      	nop
 80069f2:	3724      	adds	r7, #36	; 0x24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd90      	pop	{r4, r7, pc}
 80069f8:	200000a4 	.word	0x200000a4
 80069fc:	08020c2c 	.word	0x08020c2c

08006a00 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8006a0c:	f107 0310 	add.w	r3, r7, #16
 8006a10:	4928      	ldr	r1, [pc, #160]	; (8006ab4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8006a12:	4618      	mov	r0, r3
 8006a14:	f003 fa51 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	3328      	adds	r3, #40	; 0x28
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f003 fdf2 	bl	800a608 <_ZNK12SimpleString7isEmptyEv>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f083 0301 	eor.w	r3, r3, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00f      	beq.n	8006a50 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006a38:	f107 0310 	add.w	r3, r7, #16
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f003 fe70 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	491b      	ldr	r1, [pc, #108]	; (8006ab8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f003 fe7c 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8006a50:	f107 0310 	add.w	r3, r7, #16
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f003 fe64 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3384      	adds	r3, #132	; 0x84
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f107 0018 	add.w	r0, r7, #24
 8006a68:	f107 0210 	add.w	r2, r7, #16
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	4798      	blx	r3
 8006a70:	f107 0320 	add.w	r3, r7, #32
 8006a74:	4911      	ldr	r1, [pc, #68]	; (8006abc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8006a76:	4618      	mov	r0, r3
 8006a78:	f003 fa1f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f107 0220 	add.w	r2, r7, #32
 8006a82:	f107 0118 	add.w	r1, r7, #24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f003 fe31 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 8006a8c:	f107 0320 	add.w	r3, r7, #32
 8006a90:	4618      	mov	r0, r3
 8006a92:	f003 fdca 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8006a96:	f107 0318 	add.w	r3, r7, #24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f003 fdc5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f003 fdc0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8006aaa:	bf00      	nop
}
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	3728      	adds	r7, #40	; 0x28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	08020c48 	.word	0x08020c48
 8006ab8:	08020c54 	.word	0x08020c54
 8006abc:	08020c58 	.word	0x08020c58

08006ac0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f003 fa47 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	225f      	movs	r2, #95	; 0x5f
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f003 fbcc 	bl	800a286 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	3301      	adds	r3, #1
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	e7f0      	b.n	8006ad8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8006af6:	bf00      	nop
}
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	08020c60 	.word	0x08020c60

08006b04 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d006      	beq.n	8006b24 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	3328      	adds	r3, #40	; 0x28
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f003 fa37 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
    }
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8006b2c:	b590      	push	{r4, r7, lr}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3368      	adds	r3, #104	; 0x68
 8006b3a:	681c      	ldr	r4, [r3, #0]
 8006b3c:	f107 0308 	add.w	r3, r7, #8
 8006b40:	4908      	ldr	r1, [pc, #32]	; (8006b64 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8006b42:	4618      	mov	r0, r3
 8006b44:	f003 f9b9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006b48:	f107 0308 	add.w	r3, r7, #8
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	47a0      	blx	r4
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	4618      	mov	r0, r3
 8006b58:	f003 fd67 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd90      	pop	{r4, r7, pc}
 8006b64:	08020c6c 	.word	0x08020c6c

08006b68 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	b08a      	sub	sp, #40	; 0x28
 8006b6e:	af04      	add	r7, sp, #16
 8006b70:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8006b78:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8006b7e:	3314      	adds	r3, #20
 8006b80:	4618      	mov	r0, r3
 8006b82:	f003 fd25 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006b86:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8006b8e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006b98:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8006b9e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	4b1f      	ldr	r3, [pc, #124]	; (8006c24 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bac:	099b      	lsrs	r3, r3, #6
 8006bae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006bb2:	fb01 f303 	mul.w	r3, r1, r3
 8006bb6:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8006bb8:	603b      	str	r3, [r7, #0]
 8006bba:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4798      	blx	r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f107 0008 	add.w	r0, r7, #8
 8006bc6:	9303      	str	r3, [sp, #12]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	9302      	str	r3, [sp, #8]
 8006bcc:	9601      	str	r6, [sp, #4]
 8006bce:	9500      	str	r5, [sp, #0]
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	4915      	ldr	r1, [pc, #84]	; (8006c2c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8006bd6:	f004 fa2f 	bl	800b038 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3368      	adds	r3, #104	; 0x68
 8006be0:	681c      	ldr	r4, [r3, #0]
 8006be2:	f107 0308 	add.w	r3, r7, #8
 8006be6:	4618      	mov	r0, r3
 8006be8:	f003 fcf2 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f107 0310 	add.w	r3, r7, #16
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f003 f960 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006bfa:	f107 0310 	add.w	r3, r7, #16
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	47a0      	blx	r4
 8006c04:	f107 0310 	add.w	r3, r7, #16
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f003 fd0e 	bl	800a62a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f003 fd09 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8006c18:	bf00      	nop
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c22:	bf00      	nop
 8006c24:	10624dd3 	.word	0x10624dd3
 8006c28:	200000a8 	.word	0x200000a8
 8006c2c:	08020c98 	.word	0x08020c98

08006c30 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3368      	adds	r3, #104	; 0x68
 8006c3e:	681c      	ldr	r4, [r3, #0]
 8006c40:	f107 0308 	add.w	r3, r7, #8
 8006c44:	4912      	ldr	r1, [pc, #72]	; (8006c90 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8006c46:	4618      	mov	r0, r3
 8006c48:	f003 f937 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	47a0      	blx	r4
 8006c56:	f107 0308 	add.w	r3, r7, #8
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f003 fce5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3368      	adds	r3, #104	; 0x68
 8006c66:	681c      	ldr	r4, [r3, #0]
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	4909      	ldr	r1, [pc, #36]	; (8006c94 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f003 f923 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	47a0      	blx	r4
 8006c7e:	f107 0310 	add.w	r3, r7, #16
 8006c82:	4618      	mov	r0, r3
 8006c84:	f003 fcd1 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd90      	pop	{r4, r7, pc}
 8006c90:	08020d08 	.word	0x08020d08
 8006c94:	08020d18 	.word	0x08020d18

08006c98 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f003 fc93 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4619      	mov	r1, r3
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f003 f903 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8006cb4:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8006cb6:	490f      	ldr	r1, [pc, #60]	; (8006cf4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f003 fb13 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8006cbe:	4a0e      	ldr	r2, [pc, #56]	; (8006cf8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8006cc0:	490e      	ldr	r1, [pc, #56]	; (8006cfc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f003 fb0e 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8006cc8:	4a0d      	ldr	r2, [pc, #52]	; (8006d00 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8006cca:	490e      	ldr	r1, [pc, #56]	; (8006d04 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f003 fb09 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8006cd2:	4a0d      	ldr	r2, [pc, #52]	; (8006d08 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8006cd4:	490d      	ldr	r1, [pc, #52]	; (8006d0c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f003 fb04 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	; (8006d10 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8006cde:	490d      	ldr	r1, [pc, #52]	; (8006d14 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f003 faff 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8006ce6:	bf00      	nop
}
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	08020d28 	.word	0x08020d28
 8006cf4:	08020d30 	.word	0x08020d30
 8006cf8:	08020d34 	.word	0x08020d34
 8006cfc:	08020d3c 	.word	0x08020d3c
 8006d00:	08020d40 	.word	0x08020d40
 8006d04:	08020d48 	.word	0x08020d48
 8006d08:	08020d4c 	.word	0x08020d4c
 8006d0c:	08020d54 	.word	0x08020d54
 8006d10:	08020d58 	.word	0x08020d58
 8006d14:	08020d64 	.word	0x08020d64

08006d18 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8006d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	b096      	sub	sp, #88	; 0x58
 8006d1e:	af08      	add	r7, sp, #32
 8006d20:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80b2 	beq.w	8006e96 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8006d36:	3328      	adds	r3, #40	; 0x28
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f003 fc49 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006d3e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	3328      	adds	r3, #40	; 0x28
 8006d46:	4618      	mov	r0, r3
 8006d48:	f003 fc5e 	bl	800a608 <_ZNK12SimpleString7isEmptyEv>
 8006d4c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8006d52:	4c53      	ldr	r4, [pc, #332]	; (8006ea0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8006d54:	e000      	b.n	8006d58 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8006d56:	4c53      	ldr	r4, [pc, #332]	; (8006ea4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f003 fc36 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006d64:	4605      	mov	r5, r0
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f003 fc31 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006d6e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	6a1a      	ldr	r2, [r3, #32]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006d7c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	4a49      	ldr	r2, [pc, #292]	; (8006ea8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8006d8a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	4b45      	ldr	r3, [pc, #276]	; (8006ea8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006d92:	fba3 1302 	umull	r1, r3, r3, r2
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da6:	3314      	adds	r3, #20
 8006da8:	4618      	mov	r0, r3
 8006daa:	f003 fc11 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006dae:	4602      	mov	r2, r0
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f107 0014 	add.w	r0, r7, #20
 8006db8:	9306      	str	r3, [sp, #24]
 8006dba:	9205      	str	r2, [sp, #20]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	9204      	str	r2, [sp, #16]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	9203      	str	r2, [sp, #12]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	9601      	str	r6, [sp, #4]
 8006dca:	9500      	str	r5, [sp, #0]
 8006dcc:	4623      	mov	r3, r4
 8006dce:	4642      	mov	r2, r8
 8006dd0:	4936      	ldr	r1, [pc, #216]	; (8006eac <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8006dd2:	f004 f931 	bl	800b038 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3368      	adds	r3, #104	; 0x68
 8006ddc:	681c      	ldr	r4, [r3, #0]
 8006dde:	f107 0314 	add.w	r3, r7, #20
 8006de2:	4618      	mov	r0, r3
 8006de4:	f003 fbf4 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006de8:	4602      	mov	r2, r0
 8006dea:	f107 031c 	add.w	r3, r7, #28
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f003 f862 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006df6:	f107 031c 	add.w	r3, r7, #28
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	47a0      	blx	r4
 8006e00:	f107 031c 	add.w	r3, r7, #28
 8006e04:	4618      	mov	r0, r3
 8006e06:	f003 fc10 	bl	800a62a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e10:	6a12      	ldr	r2, [r2, #32]
 8006e12:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8006e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3388      	adds	r3, #136	; 0x88
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	4798      	blx	r3
 8006e2a:	e017      	b.n	8006e5c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	7c1b      	ldrb	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3368      	adds	r3, #104	; 0x68
 8006e3a:	681c      	ldr	r4, [r3, #0]
 8006e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e40:	491b      	ldr	r1, [pc, #108]	; (8006eb0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8006e42:	4618      	mov	r0, r3
 8006e44:	f003 f839 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	47a0      	blx	r4
 8006e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f003 fbe7 	bl	800a62a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3368      	adds	r3, #104	; 0x68
 8006e62:	681c      	ldr	r4, [r3, #0]
 8006e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e68:	4912      	ldr	r1, [pc, #72]	; (8006eb4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f003 f825 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e74:	4619      	mov	r1, r3
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	47a0      	blx	r4
 8006e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f003 fbd3 	bl	800a62a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8006e8a:	f107 0314 	add.w	r3, r7, #20
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f003 fbcb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    while (cur) {
 8006e94:	e749      	b.n	8006d2a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8006e96:	bf00      	nop
 8006e98:	3738      	adds	r7, #56	; 0x38
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea0:	08020c28 	.word	0x08020c28
 8006ea4:	08020d68 	.word	0x08020d68
 8006ea8:	10624dd3 	.word	0x10624dd3
 8006eac:	08020d6c 	.word	0x08020d6c
 8006eb0:	08020dc8 	.word	0x08020dc8
 8006eb4:	08020dd8 	.word	0x08020dd8

08006eb8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8006eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eba:	b091      	sub	sp, #68	; 0x44
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f107 0210 	add.w	r2, r7, #16
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006ed8:	f107 0310 	add.w	r3, r7, #16
 8006edc:	4618      	mov	r0, r3
 8006ede:	f003 fb77 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006ee2:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3314      	adds	r3, #20
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4798      	blx	r3
 8006ef6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006ef8:	461e      	mov	r6, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3380      	adds	r3, #128	; 0x80
 8006f00:	681c      	ldr	r4, [r3, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68d9      	ldr	r1, [r3, #12]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f107 0220 	add.w	r2, r7, #32
 8006f14:	4610      	mov	r0, r2
 8006f16:	4798      	blx	r3
 8006f18:	f107 0318 	add.w	r3, r7, #24
 8006f1c:	f107 0220 	add.w	r2, r7, #32
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	47a0      	blx	r4
 8006f26:	f107 0318 	add.w	r3, r7, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f003 fb50 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f107 0008 	add.w	r0, r7, #8
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4633      	mov	r3, r6
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	4924      	ldr	r1, [pc, #144]	; (8006fd0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8006f3e:	f004 f87b 	bl	800b038 <_Z16StringFromFormatPKcz>
 8006f42:	f107 0318 	add.w	r3, r7, #24
 8006f46:	4618      	mov	r0, r3
 8006f48:	f003 fb6f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8006f4c:	f107 0320 	add.w	r3, r7, #32
 8006f50:	4618      	mov	r0, r3
 8006f52:	f003 fb6a 	bl	800a62a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8006f56:	f107 0310 	add.w	r3, r7, #16
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f003 fb65 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3368      	adds	r3, #104	; 0x68
 8006f66:	681c      	ldr	r4, [r3, #0]
 8006f68:	f107 0308 	add.w	r3, r7, #8
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f003 fb2f 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8006f72:	4602      	mov	r2, r0
 8006f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 ff9d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	47a0      	blx	r4
 8006f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f003 fb4b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3368      	adds	r3, #104	; 0x68
 8006f9a:	681c      	ldr	r4, [r3, #0]
 8006f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fa0:	490c      	ldr	r1, [pc, #48]	; (8006fd4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f002 ff89 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	47a0      	blx	r4
 8006fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f003 fb37 	bl	800a62a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006fbc:	f107 0308 	add.w	r3, r7, #8
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f003 fb32 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8006fc6:	bf00      	nop
 8006fc8:	373c      	adds	r7, #60	; 0x3c
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	08020de8 	.word	0x08020de8
 8006fd4:	08020e24 	.word	0x08020e24

08006fd8 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b08d      	sub	sp, #52	; 0x34
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3368      	adds	r3, #104	; 0x68
 8006fe6:	681c      	ldr	r4, [r3, #0]
 8006fe8:	f107 0308 	add.w	r3, r7, #8
 8006fec:	4933      	ldr	r1, [pc, #204]	; (80070bc <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 ff63 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8006ff4:	f107 0308 	add.w	r3, r7, #8
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	47a0      	blx	r4
 8006ffe:	f107 0308 	add.w	r3, r7, #8
 8007002:	4618      	mov	r0, r3
 8007004:	f003 fb11 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3368      	adds	r3, #104	; 0x68
 800700e:	681c      	ldr	r4, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3380      	adds	r3, #128	; 0x80
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6912      	ldr	r2, [r2, #16]
 800701c:	3230      	adds	r2, #48	; 0x30
 800701e:	f107 0010 	add.w	r0, r7, #16
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	f107 0310 	add.w	r3, r7, #16
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	47a0      	blx	r4
 8007030:	f107 0310 	add.w	r3, r7, #16
 8007034:	4618      	mov	r0, r3
 8007036:	f003 faf8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3368      	adds	r3, #104	; 0x68
 8007040:	681c      	ldr	r4, [r3, #0]
 8007042:	f107 0318 	add.w	r3, r7, #24
 8007046:	491e      	ldr	r1, [pc, #120]	; (80070c0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8007048:	4618      	mov	r0, r3
 800704a:	f002 ff36 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800704e:	f107 0318 	add.w	r3, r7, #24
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	47a0      	blx	r4
 8007058:	f107 0318 	add.w	r3, r7, #24
 800705c:	4618      	mov	r0, r3
 800705e:	f003 fae4 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3368      	adds	r3, #104	; 0x68
 8007068:	681c      	ldr	r4, [r3, #0]
 800706a:	f107 0320 	add.w	r3, r7, #32
 800706e:	4915      	ldr	r1, [pc, #84]	; (80070c4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8007070:	4618      	mov	r0, r3
 8007072:	f002 ff22 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8007076:	f107 0320 	add.w	r3, r7, #32
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	47a0      	blx	r4
 8007080:	f107 0320 	add.w	r3, r7, #32
 8007084:	4618      	mov	r0, r3
 8007086:	f003 fad0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3368      	adds	r3, #104	; 0x68
 8007090:	681c      	ldr	r4, [r3, #0]
 8007092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007096:	490c      	ldr	r1, [pc, #48]	; (80070c8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8007098:	4618      	mov	r0, r3
 800709a:	f002 ff0e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800709e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	47a0      	blx	r4
 80070a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070ac:	4618      	mov	r0, r3
 80070ae:	f003 fabc 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80070b2:	bf00      	nop
 80070b4:	3734      	adds	r7, #52	; 0x34
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd90      	pop	{r4, r7, pc}
 80070ba:	bf00      	nop
 80070bc:	08020e30 	.word	0x08020e30
 80070c0:	08020e40 	.word	0x08020e40
 80070c4:	08020e50 	.word	0x08020e50
 80070c8:	08020e6c 	.word	0x08020e6c

080070cc <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80070cc:	b590      	push	{r4, r7, lr}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3360      	adds	r3, #96	; 0x60
 80070da:	681c      	ldr	r4, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	335c      	adds	r3, #92	; 0x5c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6912      	ldr	r2, [r2, #16]
 80070e8:	3214      	adds	r2, #20
 80070ea:	f107 0008 	add.w	r0, r7, #8
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4798      	blx	r3
 80070f2:	f107 0308 	add.w	r3, r7, #8
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	47a0      	blx	r4
 80070fc:	f107 0308 	add.w	r3, r7, #8
 8007100:	4618      	mov	r0, r3
 8007102:	f003 fa92 	bl	800a62a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3370      	adds	r3, #112	; 0x70
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
    writeTestSuiteSummary();
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3374      	adds	r3, #116	; 0x74
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
    writeProperties();
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3378      	adds	r3, #120	; 0x78
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
    writeTestCases();
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	337c      	adds	r3, #124	; 0x7c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
    writeFileEnding();
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	338c      	adds	r3, #140	; 0x8c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
    closeFile();
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	336c      	adds	r3, #108	; 0x6c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	bd90      	pop	{r4, r7, pc}

08007156 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	3330      	adds	r3, #48	; 0x30
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f003 fae2 	bl	800a748 <_ZN12SimpleStringpLEPKc>
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d113      	bne.n	800720a <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	3201      	adds	r2, #1
 80071ea:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80071ec:	f240 1233 	movw	r2, #307	; 0x133
 80071f0:	4908      	ldr	r1, [pc, #32]	; (8007214 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80071f2:	2034      	movs	r0, #52	; 0x34
 80071f4:	f000 fa9e 	bl	8007734 <_ZnwjPKci>
 80071f8:	4604      	mov	r4, r0
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	4620      	mov	r0, r4
 80071fe:	f004 fd37 	bl	800bc70 <_ZN11TestFailureC1ERKS_>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	60dc      	str	r4, [r3, #12]
    }
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	bd90      	pop	{r4, r7, pc}
 8007212:	bf00      	nop
 8007214:	08020c2c 	.word	0x08020c2c

08007218 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8007218:	b5b0      	push	{r4, r5, r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8007222:	4b08      	ldr	r3, [pc, #32]	; (8007244 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8007224:	681d      	ldr	r5, [r3, #0]
 8007226:	6838      	ldr	r0, [r7, #0]
 8007228:	f003 f9d2 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800722c:	4602      	mov	r2, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691c      	ldr	r4, [r3, #16]
 8007232:	4905      	ldr	r1, [pc, #20]	; (8007248 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8007234:	4610      	mov	r0, r2
 8007236:	47a8      	blx	r5
 8007238:	4603      	mov	r3, r0
 800723a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bdb0      	pop	{r4, r5, r7, pc}
 8007244:	200000b0 	.word	0x200000b0
 8007248:	08020e7c 	.word	0x08020e7c

0800724c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8007256:	4b08      	ldr	r3, [pc, #32]	; (8007278 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8007258:	681c      	ldr	r4, [r3, #0]
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f003 f9b8 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8007260:	4602      	mov	r2, r0
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	4619      	mov	r1, r3
 800726a:	4610      	mov	r0, r2
 800726c:	47a0      	blx	r4
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	bd90      	pop	{r4, r7, pc}
 8007276:	bf00      	nop
 8007278:	200000b4 	.word	0x200000b4

0800727c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8007284:	4b05      	ldr	r3, [pc, #20]	; (800729c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6912      	ldr	r2, [r2, #16]
 800728c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800728e:	4610      	mov	r0, r2
 8007290:	4798      	blx	r3
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200000b8 	.word	0x200000b8

080072a0 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
        return false;
 80072ae:	2300      	movs	r3, #0
    }
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
    {
 80072c4:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
    }
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	08024000 	.word	0x08024000

080072dc <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
    }
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff ffe9 	bl	80072bc <_ZN17MemoryLeakFailureD1Ev>
 80072ea:	2104      	movs	r1, #4
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa35 	bl	800775c <_ZdlPvj>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80072fc:	b590      	push	{r4, r7, lr}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	687c      	ldr	r4, [r7, #4]
 8007306:	f000 fc71 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800730a:	4603      	mov	r3, r0
 800730c:	4618      	mov	r0, r3
 800730e:	f00c ff6c 	bl	80141ea <_ZN18MemoryLeakDetector8getMutexEv>
 8007312:	4603      	mov	r3, r0
 8007314:	4619      	mov	r1, r3
 8007316:	4620      	mov	r0, r4
 8007318:	f002 fb24 	bl	8009964 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}

08007326 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	f002 fb29 	bl	8009988 <_ZN15ScopedMutexLockD1Ev>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b087      	sub	sp, #28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800734c:	f000 fc4e 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007350:	4604      	mov	r4, r0
 8007352:	f006 f8df 	bl	800d514 <_Z25getCurrentMallocAllocatorv>
 8007356:	4601      	mov	r1, r0
 8007358:	2301      	movs	r3, #1
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4620      	mov	r0, r4
 8007366:	f00d f983 	bl	8014670 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	bd90      	pop	{r4, r7, pc}

08007374 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b087      	sub	sp, #28
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8007380:	f000 fc34 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007384:	4603      	mov	r3, r0
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	4618      	mov	r0, r3
 800738a:	f00c ffdd 	bl	8014348 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800738e:	f000 fc2d 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007392:	4604      	mov	r4, r0
 8007394:	f006 f8be 	bl	800d514 <_Z25getCurrentMallocAllocatorv>
 8007398:	4601      	mov	r1, r0
 800739a:	2301      	movs	r3, #1
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f00d f996 	bl	80146d8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd90      	pop	{r4, r7, pc}

080073b4 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b089      	sub	sp, #36	; 0x24
 80073b8:	af04      	add	r7, sp, #16
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 80073c2:	f000 fc13 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80073c6:	4604      	mov	r4, r0
 80073c8:	f006 f8a4 	bl	800d514 <_Z25getCurrentMallocAllocatorv>
 80073cc:	4601      	mov	r1, r0
 80073ce:	2301      	movs	r3, #1
 80073d0:	9302      	str	r3, [sp, #8]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4620      	mov	r0, r4
 80073e0:	f00d f9de 	bl	80147a0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 80073e4:	4603      	mov	r3, r0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd90      	pop	{r4, r7, pc}
	...

080073f0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <_ZL13normal_mallocjPKcj+0x20>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	4798      	blx	r3
 8007404:	4603      	mov	r3, r0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	200000c4 	.word	0x200000c4

08007414 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <_ZL14normal_reallocPvjPKcj+0x24>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	4798      	blx	r3
 800742c:	4603      	mov	r3, r0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200000c8 	.word	0x200000c8

0800743c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8007448:	4b03      	ldr	r3, [pc, #12]	; (8007458 <_ZL11normal_freePvPKcj+0x1c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	4798      	blx	r3
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	200000cc 	.word	0x200000cc

0800745c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8007464:	f107 0308 	add.w	r3, r7, #8
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff ff47 	bl	80072fc <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800746e:	f000 fbbd 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007472:	4604      	mov	r4, r0
 8007474:	f005 ff9e 	bl	800d3b4 <_Z22getCurrentNewAllocatorv>
 8007478:	4601      	mov	r1, r0
 800747a:	2300      	movs	r3, #0
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4620      	mov	r0, r4
 8007480:	f00d f864 	bl	801454c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007484:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007486:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8007488:	f107 0308 	add.w	r3, r7, #8
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff ff4a 	bl	8007326 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8007492:	4623      	mov	r3, r4
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	bd90      	pop	{r4, r7, pc}

0800749c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80074a4:	f000 fba2 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80074a8:	4604      	mov	r4, r0
 80074aa:	f005 ff83 	bl	800d3b4 <_Z22getCurrentNewAllocatorv>
 80074ae:	4601      	mov	r1, r0
 80074b0:	2300      	movs	r3, #0
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	4620      	mov	r0, r4
 80074b6:	f00d f849 	bl	801454c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80074ba:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80074bc:	68fb      	ldr	r3, [r7, #12]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd90      	pop	{r4, r7, pc}

080074c6 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80074c6:	b590      	push	{r4, r7, lr}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80074ce:	f000 fb8d 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80074d2:	4604      	mov	r4, r0
 80074d4:	f005 ff6e 	bl	800d3b4 <_Z22getCurrentNewAllocatorv>
 80074d8:	4601      	mov	r1, r0
 80074da:	2300      	movs	r3, #0
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	4620      	mov	r0, r4
 80074e0:	f00d f834 	bl	801454c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80074e4:	4603      	mov	r3, r0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd90      	pop	{r4, r7, pc}

080074ee <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80074ee:	b590      	push	{r4, r7, lr}
 80074f0:	b089      	sub	sp, #36	; 0x24
 80074f2:	af02      	add	r7, sp, #8
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 80074fa:	f000 fb77 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80074fe:	4604      	mov	r4, r0
 8007500:	f005 ff58 	bl	800d3b4 <_Z22getCurrentNewAllocatorv>
 8007504:	4601      	mov	r1, r0
 8007506:	2300      	movs	r3, #0
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4620      	mov	r0, r4
 8007514:	f00d f8ac 	bl	8014670 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8007518:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800751a:	697b      	ldr	r3, [r7, #20]
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	bd90      	pop	{r4, r7, pc}

08007524 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007524:	b590      	push	{r4, r7, lr}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800752c:	f000 fb5e 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007530:	4604      	mov	r4, r0
 8007532:	f005 ff97 	bl	800d464 <_Z27getCurrentNewArrayAllocatorv>
 8007536:	4601      	mov	r1, r0
 8007538:	2300      	movs	r3, #0
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4620      	mov	r0, r4
 800753e:	f00d f805 	bl	801454c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007542:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	bd90      	pop	{r4, r7, pc}

0800754e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800754e:	b590      	push	{r4, r7, lr}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8007556:	f000 fb49 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800755a:	4604      	mov	r4, r0
 800755c:	f005 ff82 	bl	800d464 <_Z27getCurrentNewArrayAllocatorv>
 8007560:	4601      	mov	r1, r0
 8007562:	2300      	movs	r3, #0
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4620      	mov	r0, r4
 8007568:	f00c fff0 	bl	801454c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	bd90      	pop	{r4, r7, pc}

08007576 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8007576:	b590      	push	{r4, r7, lr}
 8007578:	b089      	sub	sp, #36	; 0x24
 800757a:	af02      	add	r7, sp, #8
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8007582:	f000 fb33 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007586:	4604      	mov	r4, r0
 8007588:	f005 ff6c 	bl	800d464 <_Z27getCurrentNewArrayAllocatorv>
 800758c:	4601      	mov	r1, r0
 800758e:	2300      	movs	r3, #0
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4620      	mov	r0, r4
 800759c:	f00d f868 	bl	8014670 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80075a0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80075a2:	697b      	ldr	r3, [r7, #20]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd90      	pop	{r4, r7, pc}

080075ac <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80075b4:	f000 fb1a 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	f00c fec3 	bl	8014348 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 80075c2:	f000 fb13 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80075c6:	4604      	mov	r4, r0
 80075c8:	f005 fef4 	bl	800d3b4 <_Z22getCurrentNewAllocatorv>
 80075cc:	4601      	mov	r1, r0
 80075ce:	2300      	movs	r3, #0
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	4620      	mov	r0, r4
 80075d4:	f00d f8ca 	bl	801476c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd90      	pop	{r4, r7, pc}

080075e0 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80075e8:	f000 fb00 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80075ec:	4603      	mov	r3, r0
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f00c fea9 	bl	8014348 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 80075f6:	f000 faf9 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80075fa:	4604      	mov	r4, r0
 80075fc:	f005 ff32 	bl	800d464 <_Z27getCurrentNewArrayAllocatorv>
 8007600:	4601      	mov	r1, r0
 8007602:	2300      	movs	r3, #0
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4620      	mov	r0, r4
 8007608:	f00d f8b0 	bl	801476c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}

08007614 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <_ZL19normal_operator_newj+0x1c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007626:	68fb      	ldr	r3, [r7, #12]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	200000c4 	.word	0x200000c4

08007634 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800763c:	4b04      	ldr	r3, [pc, #16]	; (8007650 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
 8007644:	4603      	mov	r3, r0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	200000c4 	.word	0x200000c4

08007654 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	4798      	blx	r3
 8007668:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800766a:	697b      	ldr	r3, [r7, #20]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200000c4 	.word	0x200000c4

08007678 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <_ZL25normal_operator_new_arrayj+0x1c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
 8007688:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800768a:	68fb      	ldr	r3, [r7, #12]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	200000c4 	.word	0x200000c4

08007698 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	200000c4 	.word	0x200000c4

080076b8 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	4798      	blx	r3
 80076cc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80076ce:	697b      	ldr	r3, [r7, #20]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200000c4 	.word	0x200000c4

080076dc <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80076e4:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <_ZL22normal_operator_deletePv+0x18>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200000cc 	.word	0x200000cc

080076f8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8007700:	4b03      	ldr	r3, [pc, #12]	; (8007710 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	200000cc 	.word	0x200000cc

08007714 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <_Znwj+0x1c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000028 	.word	0x20000028

08007734 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <_ZnwjPKci+0x24>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000030 	.word	0x20000030

0800775c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8007766:	4b04      	ldr	r3, [pc, #16]	; (8007778 <_ZdlPvj+0x1c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000040 	.word	0x20000040

0800777c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <_ZnajPKci+0x24>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	4798      	blx	r3
 8007794:	4603      	mov	r3, r0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	2000003c 	.word	0x2000003c

080077a4 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 80077ac:	4b03      	ldr	r3, [pc, #12]	; (80077bc <_ZdaPv+0x18>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	20000044 	.word	0x20000044

080077c0 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 80077ca:	4b04      	ldr	r3, [pc, #16]	; (80077dc <_ZdaPvj+0x1c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000044 	.word	0x20000044

080077e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 80077e4:	4b12      	ldr	r3, [pc, #72]	; (8007830 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 80077e6:	4a13      	ldr	r2, [pc, #76]	; (8007834 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 80077e8:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 80077ea:	4b13      	ldr	r3, [pc, #76]	; (8007838 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 80077ec:	4a13      	ldr	r2, [pc, #76]	; (800783c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 80077ee:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 80077f2:	4a14      	ldr	r2, [pc, #80]	; (8007844 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 80077f4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 80077f8:	4a14      	ldr	r2, [pc, #80]	; (800784c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 80077fa:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 80077fc:	4b14      	ldr	r3, [pc, #80]	; (8007850 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8007800:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8007804:	4a15      	ldr	r2, [pc, #84]	; (800785c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8007806:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800780a:	4a16      	ldr	r2, [pc, #88]	; (8007864 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800780c:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8007810:	4a16      	ldr	r2, [pc, #88]	; (800786c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8007812:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8007814:	4b16      	ldr	r3, [pc, #88]	; (8007870 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8007816:	4a17      	ldr	r2, [pc, #92]	; (8007874 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8007818:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800781a:	4b17      	ldr	r3, [pc, #92]	; (8007878 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800781c:	4a17      	ldr	r2, [pc, #92]	; (800787c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800781e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8007820:	4b17      	ldr	r3, [pc, #92]	; (8007880 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8007822:	4a18      	ldr	r2, [pc, #96]	; (8007884 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8007824:	601a      	str	r2, [r3, #0]

#endif
}
 8007826:	bf00      	nop
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000028 	.word	0x20000028
 8007834:	08007615 	.word	0x08007615
 8007838:	2000002c 	.word	0x2000002c
 800783c:	08007635 	.word	0x08007635
 8007840:	20000030 	.word	0x20000030
 8007844:	08007655 	.word	0x08007655
 8007848:	20000034 	.word	0x20000034
 800784c:	08007679 	.word	0x08007679
 8007850:	20000038 	.word	0x20000038
 8007854:	08007699 	.word	0x08007699
 8007858:	2000003c 	.word	0x2000003c
 800785c:	080076b9 	.word	0x080076b9
 8007860:	20000040 	.word	0x20000040
 8007864:	080076dd 	.word	0x080076dd
 8007868:	20000044 	.word	0x20000044
 800786c:	080076f9 	.word	0x080076f9
 8007870:	20000010 	.word	0x20000010
 8007874:	080073f1 	.word	0x080073f1
 8007878:	20000018 	.word	0x20000018
 800787c:	08007415 	.word	0x08007415
 8007880:	20000014 	.word	0x20000014
 8007884:	0800743d 	.word	0x0800743d

08007888 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d101      	bne.n	80078a4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 80078a4:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20000028 	.word	0x20000028
 80078b4:	0800749d 	.word	0x0800749d
 80078b8:	0800745d 	.word	0x0800745d

080078bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 80078c0:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	bfcc      	ite	gt
 80078d2:	2301      	movgt	r3, #1
 80078d4:	2300      	movle	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d12e      	bne.n	800793a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 80078dc:	4b19      	ldr	r3, [pc, #100]	; (8007944 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a19      	ldr	r2, [pc, #100]	; (8007948 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 80078e2:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 80078e4:	4b19      	ldr	r3, [pc, #100]	; (800794c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a19      	ldr	r2, [pc, #100]	; (8007950 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 80078ea:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 80078ec:	4b19      	ldr	r3, [pc, #100]	; (8007954 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a19      	ldr	r2, [pc, #100]	; (8007958 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 80078f2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 80078f4:	4b19      	ldr	r3, [pc, #100]	; (800795c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a19      	ldr	r2, [pc, #100]	; (8007960 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 80078fa:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a19      	ldr	r2, [pc, #100]	; (8007968 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8007902:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8007904:	4b19      	ldr	r3, [pc, #100]	; (800796c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a19      	ldr	r2, [pc, #100]	; (8007970 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800790a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a19      	ldr	r2, [pc, #100]	; (8007978 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8007912:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8007914:	4b19      	ldr	r3, [pc, #100]	; (800797c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a19      	ldr	r2, [pc, #100]	; (8007980 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800791a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a19      	ldr	r2, [pc, #100]	; (8007988 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8007922:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8007924:	4b19      	ldr	r3, [pc, #100]	; (800798c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a19      	ldr	r2, [pc, #100]	; (8007990 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800792a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800792c:	4b19      	ldr	r3, [pc, #100]	; (8007994 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a19      	ldr	r2, [pc, #100]	; (8007998 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8007932:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8007934:	f7ff ff54 	bl	80077e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8007938:	e000      	b.n	800793c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800793a:	bf00      	nop
#endif
}
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000634 	.word	0x20000634
 8007944:	20000028 	.word	0x20000028
 8007948:	20000048 	.word	0x20000048
 800794c:	2000002c 	.word	0x2000002c
 8007950:	2000004c 	.word	0x2000004c
 8007954:	20000030 	.word	0x20000030
 8007958:	20000050 	.word	0x20000050
 800795c:	20000034 	.word	0x20000034
 8007960:	20000054 	.word	0x20000054
 8007964:	20000038 	.word	0x20000038
 8007968:	20000058 	.word	0x20000058
 800796c:	2000003c 	.word	0x2000003c
 8007970:	2000005c 	.word	0x2000005c
 8007974:	20000040 	.word	0x20000040
 8007978:	20000060 	.word	0x20000060
 800797c:	20000044 	.word	0x20000044
 8007980:	20000064 	.word	0x20000064
 8007984:	20000010 	.word	0x20000010
 8007988:	2000001c 	.word	0x2000001c
 800798c:	20000018 	.word	0x20000018
 8007990:	20000024 	.word	0x20000024
 8007994:	20000014 	.word	0x20000014
 8007998:	20000020 	.word	0x20000020

0800799c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfcc      	ite	gt
 80079b2:	2301      	movgt	r3, #1
 80079b4:	2300      	movle	r3, #0
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d12c      	bne.n	8007a16 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 80079bc:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 80079c2:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 80079c4:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a19      	ldr	r2, [pc, #100]	; (8007a30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 80079ca:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 80079cc:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a19      	ldr	r2, [pc, #100]	; (8007a38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 80079d2:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 80079d4:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 80079da:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 80079dc:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 80079e2:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 80079e4:	4b19      	ldr	r3, [pc, #100]	; (8007a4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a19      	ldr	r2, [pc, #100]	; (8007a50 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 80079ea:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80079ec:	4b19      	ldr	r3, [pc, #100]	; (8007a54 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80079f2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80079f4:	4b19      	ldr	r3, [pc, #100]	; (8007a5c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80079fa:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 80079fc:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a19      	ldr	r2, [pc, #100]	; (8007a68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8007a02:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8007a04:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a19      	ldr	r2, [pc, #100]	; (8007a70 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8007a0a:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8007a0c:	4b19      	ldr	r3, [pc, #100]	; (8007a74 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a19      	ldr	r2, [pc, #100]	; (8007a78 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e000      	b.n	8007a18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8007a16:	bf00      	nop
#endif
}
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	20000634 	.word	0x20000634
 8007a24:	20000048 	.word	0x20000048
 8007a28:	20000028 	.word	0x20000028
 8007a2c:	2000004c 	.word	0x2000004c
 8007a30:	2000002c 	.word	0x2000002c
 8007a34:	20000050 	.word	0x20000050
 8007a38:	20000030 	.word	0x20000030
 8007a3c:	20000054 	.word	0x20000054
 8007a40:	20000034 	.word	0x20000034
 8007a44:	20000058 	.word	0x20000058
 8007a48:	20000038 	.word	0x20000038
 8007a4c:	2000005c 	.word	0x2000005c
 8007a50:	2000003c 	.word	0x2000003c
 8007a54:	20000060 	.word	0x20000060
 8007a58:	20000040 	.word	0x20000040
 8007a5c:	20000064 	.word	0x20000064
 8007a60:	20000044 	.word	0x20000044
 8007a64:	2000001c 	.word	0x2000001c
 8007a68:	20000010 	.word	0x20000010
 8007a6c:	20000024 	.word	0x20000024
 8007a70:	20000018 	.word	0x20000018
 8007a74:	20000020 	.word	0x20000020
 8007a78:	20000014 	.word	0x20000014

08007a7c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
    {
 8007a84:	4a05      	ldr	r2, [pc, #20]	; (8007a9c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7ff fc15 	bl	80072bc <_ZN17MemoryLeakFailureD1Ev>
    }
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	08023fec 	.word	0x08023fec

08007aa0 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
    }
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff ffe7 	bl	8007a7c <_ZN25MemoryLeakWarningReporterD1Ev>
 8007aae:	2104      	movs	r1, #4
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fe53 	bl	800775c <_ZdlPvj>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <_ZN14TestTerminatorC1Ev+0x1c>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	08024998 	.word	0x08024998

08007ae0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ffe8 	bl	8007ac0 <_ZN14TestTerminatorC1Ev>
 8007af0:	4a03      	ldr	r2, [pc, #12]	; (8007b00 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	08024970 	.word	0x08024970

08007b04 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8007b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b06:	b099      	sub	sp, #100	; 0x64
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8007b0e:	f009 fdb7 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8007b12:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8007b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	339c      	adds	r3, #156	; 0x9c
 8007b1a:	681c      	ldr	r4, [r3, #0]
 8007b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b22:	4618      	mov	r0, r3
 8007b24:	f008 fbc4 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 8007b28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f002 fd4f 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8007b32:	4605      	mov	r5, r0
 8007b34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007b36:	f008 fc9b 	bl	8010470 <_ZNK10UtestShell13getLineNumberEv>
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f002 f9b9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8007b48:	f107 000c 	add.w	r0, r7, #12
 8007b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	4633      	mov	r3, r6
 8007b54:	462a      	mov	r2, r5
 8007b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b58:	f004 fd14 	bl	800c584 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff ffbb 	bl	8007ae0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8007b6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007b6e:	f107 030c 	add.w	r3, r7, #12
 8007b72:	4619      	mov	r1, r3
 8007b74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007b76:	47a0      	blx	r4
 8007b78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f009 fe79 	bl	8011874 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f9ac 	bl	8007ee4 <_ZN11FailFailureD1Ev>
 8007b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 fd4a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8007b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f002 fd45 	bl	800a62a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8007ba0:	bf00      	nop
 8007ba2:	375c      	adds	r7, #92	; 0x5c
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ba8 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	08024000 	.word	0x08024000

08007bc8 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff ffe8 	bl	8007ba8 <_ZN17MemoryLeakFailureC1Ev>
 8007bd8:	4a03      	ldr	r2, [pc, #12]	; (8007be8 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	08023fec 	.word	0x08023fec

08007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8007bec:	b598      	push	{r3, r4, r7, lr}
 8007bee:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11b      	bne.n	8007c30 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8007bf8:	f7ff fe60 	bl	80078bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8007bfc:	2004      	movs	r0, #4
 8007bfe:	f7ff fd89 	bl	8007714 <_Znwj>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461c      	mov	r4, r3
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff ffde 	bl	8007bc8 <_ZN25MemoryLeakWarningReporterC1Ev>
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8007c0e:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8007c10:	f241 1050 	movw	r0, #4432	; 0x1150
 8007c14:	f7ff fd7e 	bl	8007714 <_Znwj>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	461c      	mov	r4, r3
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4619      	mov	r1, r3
 8007c22:	4620      	mov	r0, r4
 8007c24:	f00c fa3e 	bl	80140a4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8007c28:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007c2a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8007c2c:	f7ff feb6 	bl	800799c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8007c30:	4b01      	ldr	r3, [pc, #4]	; (8007c38 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	bd98      	pop	{r3, r4, r7, pc}
 8007c38:	2000063c 	.word	0x2000063c
 8007c3c:	20000638 	.word	0x20000638

08007c40 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	765a      	strb	r2, [r3, #25]
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8007c64:	f7ff fdbc 	bl	80077e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	3204      	adds	r2, #4
 8007c74:	6812      	ldr	r2, [r2, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	4790      	blx	r2
    delete globalReporter;
 8007c7a:	4b08      	ldr	r3, [pc, #32]	; (8007c9c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	3204      	adds	r2, #4
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	4790      	blx	r2
    globalDetector = NULLPTR;
 8007c8c:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]
}
 8007c92:	bf00      	nop
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	2000063c 	.word	0x2000063c
 8007c9c:	20000638 	.word	0x20000638

08007ca0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f006 fdfd 	bl	800e8b0 <_ZN10TestPluginC1ERK12SimpleString>
 8007cb6:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	761a      	strb	r2, [r3, #24]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	765a      	strb	r2, [r3, #25]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8007cd6:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	615a      	str	r2, [r3, #20]
 8007ce8:	e004      	b.n	8007cf4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8007cea:	f7ff ff7f 	bl	8007bec <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f00c fa69 	bl	80141d0 <_ZN18MemoryLeakDetector6enableEv>
}
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08024014 	.word	0x08024014
 8007d0c:	20000640 	.word	0x20000640

08007d10 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7e5b      	ldrb	r3, [r3, #25]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8007d26:	f7ff fd5b 	bl	80077e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8007d2a:	f7ff ff99 	bl	8007c60 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f006 fdf9 	bl	800e928 <_ZN10TestPluginD1Ev>
    }
}
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	08024014 	.word	0x08024014

08007d44 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
}
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ffdf 	bl	8007d10 <_ZN23MemoryLeakWarningPluginD1Ev>
 8007d52:	2124      	movs	r1, #36	; 0x24
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fd01 	bl	800775c <_ZdlPvj>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f00c fa0e 	bl	8014196 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fd ffb0 	bl	8005ce0 <_ZNK10TestResult15getFailureCountEv>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b097      	sub	sp, #92	; 0x5c
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f00c fa08 	bl	80141b6 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	2103      	movs	r1, #3
 8007dac:	4618      	mov	r0, r3
 8007dae:	f00c fda5 	bl	80148fc <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8007db2:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	7e1b      	ldrb	r3, [r3, #24]
 8007db8:	f083 0301 	eor.w	r3, r3, #1
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d009      	beq.n	8007de0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1c      	ldr	r4, [r3, #32]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fd ff85 	bl	8005ce0 <_ZNK10TestResult15getFailureCountEv>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d101      	bne.n	8007de0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8007de0:	2300      	movs	r3, #0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d04c      	beq.n	8007e80 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8007de6:	f7ff fd4f 	bl	8007888 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d028      	beq.n	8007e42 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2103      	movs	r1, #3
 8007df6:	4618      	mov	r0, r3
 8007df8:	f00c fd45 	bl	8014886 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f002 f858 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8007e0a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f003 feaf 	bl	800bb78 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8007e1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f002 fc03 	bl	800a62a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3334      	adds	r3, #52	; 0x34
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f107 0210 	add.w	r2, r7, #16
 8007e30:	4611      	mov	r1, r2
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8007e36:	f107 0310 	add.w	r3, r7, #16
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f003 ff5c 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 8007e40:	e01e      	b.n	8007e80 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01a      	beq.n	8007e80 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3338      	adds	r3, #56	; 0x38
 8007e50:	681c      	ldr	r4, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e5c:	4910      	ldr	r1, [pc, #64]	; (8007ea0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f003 f8ea 	bl	800b038 <_Z16StringFromFormatPKcz>
 8007e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f002 fbb1 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	47a0      	blx	r4
 8007e76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 fbd5 	bl	800a62a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f00c fd13 	bl	80148b0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	61da      	str	r2, [r3, #28]
}
 8007e96:	bf00      	nop
 8007e98:	375c      	adds	r7, #92	; 0x5c
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd90      	pop	{r4, r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08020e80 	.word	0x08020e80

08007ea4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f00c fd21 	bl	80148fc <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8007eba:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d007      	beq.n	8007ed4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	2102      	movs	r1, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f00c fcdb 	bl	8014886 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	e000      	b.n	8007ed6 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8007ed4:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	08020ec0 	.word	0x08020ec0

08007ee4 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	4a05      	ldr	r2, [pc, #20]	; (8007f04 <_ZN11FailFailureD1Ev+0x20>)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f003 feff 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	0802405c 	.word	0x0802405c

08007f08 <_ZN11FailFailureD0Ev>:
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff ffe7 	bl	8007ee4 <_ZN11FailFailureD1Ev>
 8007f16:	2134      	movs	r1, #52	; 0x34
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fc1f 	bl	800775c <_ZdlPvj>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	4a06      	ldr	r2, [pc, #24]	; (8007f7c <_ZN19MockFailureReporterC1Ev+0x24>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	711a      	strb	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	08025238 	.word	0x08025238

08007f80 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <_ZN19MockFailureReporterD1Ev+0x1c>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	08025238 	.word	0x08025238

08007fa0 <_ZN19MockFailureReporterD0Ev>:
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ffe9 	bl	8007f80 <_ZN19MockFailureReporterD1Ev>
 8007fae:	2108      	movs	r1, #8
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff fbd3 	bl	800775c <_ZdlPvj>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	4a05      	ldr	r2, [pc, #20]	; (8007fe0 <_ZN11MockFailureD1Ev+0x20>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f003 fe91 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	080241b0 	.word	0x080241b0

08007fe4 <_ZN11MockFailureD0Ev>:
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff ffe7 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 8007ff2:	2134      	movs	r1, #52	; 0x34
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff fbb1 	bl	800775c <_ZdlPvj>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	4a16      	ldr	r2, [pc, #88]	; (8008068 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	3304      	adds	r3, #4
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f001 ff9f 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f103 020c 	add.w	r2, r3, #12
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f001 ff96 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f102 0418 	add.w	r4, r2, #24
 800803e:	3318      	adds	r3, #24
 8008040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	629a      	str	r2, [r3, #40]	; 0x28
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	62da      	str	r2, [r3, #44]	; 0x2c
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	631a      	str	r2, [r3, #48]	; 0x30
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bd90      	pop	{r4, r7, pc}
 8008068:	08025278 	.word	0x08025278

0800806c <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	4916      	ldr	r1, [pc, #88]	; (80080d4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800807c:	4618      	mov	r0, r3
 800807e:	f001 ff1c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8008082:	f107 030c 	add.w	r3, r7, #12
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f002 fb1f 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4810      	ldr	r0, [pc, #64]	; (80080d8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008098:	f000 ff70 	bl	8008f7c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800809c:	4603      	mov	r3, r0
 800809e:	e000      	b.n	80080a2 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 80080a0:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	f107 030c 	add.w	r3, r7, #12
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 fabe 	bl	800a62a <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	33a8      	adds	r3, #168	; 0xa8
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6978      	ldr	r0, [r7, #20]
 80080ba:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	33ac      	adds	r3, #172	; 0xac
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6978      	ldr	r0, [r7, #20]
 80080c6:	4798      	blx	r3
    return mock_support;
 80080c8:	697b      	ldr	r3, [r7, #20]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	08020ec4 	.word	0x08020ec4
 80080d8:	20000644 	.word	0x20000644

080080dc <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 80080e6:	4a21      	ldr	r2, [pc, #132]	; (800816c <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	605a      	str	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	609a      	str	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	731a      	strb	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f103 0218 	add.w	r2, r3, #24
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	615a      	str	r2, [r3, #20]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3318      	adds	r3, #24
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff23 	bl	8007f58 <_ZN19MockFailureReporterC1Ev>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3320      	adds	r3, #32
 8008116:	4618      	mov	r0, r3
 8008118:	f010 fefc 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	62da      	str	r2, [r3, #44]	; 0x2c
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3330      	adds	r3, #48	; 0x30
 8008136:	4618      	mov	r0, r3
 8008138:	f014 fbe8 	bl	801c90c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3338      	adds	r3, #56	; 0x38
 8008140:	4618      	mov	r0, r3
 8008142:	f014 faf2 	bl	801c72a <_ZN18MockNamedValueListC1Ev>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	333c      	adds	r3, #60	; 0x3c
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	4618      	mov	r0, r3
 800814e:	f001 ff08 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f894 	bl	800828a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	08024088 	.word	0x08024088

08008170 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	4a0d      	ldr	r2, [pc, #52]	; (80081b0 <_ZN11MockSupportD1Ev+0x40>)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	333c      	adds	r3, #60	; 0x3c
 8008182:	4618      	mov	r0, r3
 8008184:	f002 fa51 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3330      	adds	r3, #48	; 0x30
 800818c:	4618      	mov	r0, r3
 800818e:	f014 fbd1 	bl	801c934 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3320      	adds	r3, #32
 8008196:	4618      	mov	r0, r3
 8008198:	f010 fed0 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3318      	adds	r3, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff feed 	bl	8007f80 <_ZN19MockFailureReporterD1Ev>
{
}
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	08024088 	.word	0x08024088

080081b4 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
}
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ffd7 	bl	8008170 <_ZN11MockSupportD1Ev>
 80081c2:	2148      	movs	r1, #72	; 0x48
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fac9 	bl	800775c <_ZdlPvj>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3310      	adds	r3, #16
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	78f9      	ldrb	r1, [r7, #3]
 80081f0:	4610      	mov	r0, r2
 80081f2:	4798      	blx	r3
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3318      	adds	r3, #24
 8008210:	e000      	b.n	8008214 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	33c8      	adds	r3, #200	; 0xc8
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6952      	ldr	r2, [r2, #20]
 8008232:	4611      	mov	r1, r2
 8008234:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3338      	adds	r3, #56	; 0x38
 800823a:	4618      	mov	r0, r3
 800823c:	f014 fb0b 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01c      	beq.n	8008282 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 ff26 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	bf14      	ite	ne
 8008256:	2301      	movne	r3, #1
 8008258:	2300      	moveq	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 ff1a 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008268:	4603      	mov	r3, r0
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	32a4      	adds	r2, #164	; 0xa4
 800826e:	6812      	ldr	r2, [r2, #0]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	6949      	ldr	r1, [r1, #20]
 8008274:	4618      	mov	r0, r3
 8008276:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f014 f9f5 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	e7df      	b.n	8008242 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	e000      	b.n	80082a2 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6113      	str	r3, [r2, #16]
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3330      	adds	r3, #48	; 0x30
 80082be:	4618      	mov	r0, r3
 80082c0:	f012 fb10 	bl	801a8e4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 80082cc:	b590      	push	{r4, r7, lr}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3330      	adds	r3, #48	; 0x30
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	68b9      	ldr	r1, [r7, #8]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f014 fb75 	bl	801c9d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3338      	adds	r3, #56	; 0x38
 80082ea:	4618      	mov	r0, r3
 80082ec:	f014 fab3 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80082f0:	6178      	str	r0, [r7, #20]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01c      	beq.n	8008332 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 80082f8:	6979      	ldr	r1, [r7, #20]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fece 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	bf14      	ite	ne
 8008306:	2301      	movne	r3, #1
 8008308:	2300      	moveq	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fec2 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008318:	4603      	mov	r3, r0
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	32b0      	adds	r2, #176	; 0xb0
 800831e:	6814      	ldr	r4, [r2, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	4618      	mov	r0, r3
 8008326:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f014 f99d 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 800832e:	6178      	str	r0, [r7, #20]
 8008330:	e7df      	b.n	80082f2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	bd90      	pop	{r4, r7, pc}

0800833a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800833a:	b590      	push	{r4, r7, lr}
 800833c:	b087      	sub	sp, #28
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3330      	adds	r3, #48	; 0x30
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	4618      	mov	r0, r3
 8008350:	f014 fb5a 	bl	801ca08 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3338      	adds	r3, #56	; 0x38
 8008358:	4618      	mov	r0, r3
 800835a:	f014 fa7c 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 800835e:	6178      	str	r0, [r7, #20]
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01c      	beq.n	80083a0 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 8008366:	6979      	ldr	r1, [r7, #20]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fe97 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	bf14      	ite	ne
 8008374:	2301      	movne	r3, #1
 8008376:	2300      	moveq	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800837e:	6979      	ldr	r1, [r7, #20]
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fe8b 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008386:	4603      	mov	r3, r0
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	32b4      	adds	r2, #180	; 0xb4
 800838c:	6814      	ldr	r4, [r2, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	4618      	mov	r0, r3
 8008394:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008396:	6978      	ldr	r0, [r7, #20]
 8008398:	f014 f966 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 800839c:	6178      	str	r0, [r7, #20]
 800839e:	e7df      	b.n	8008360 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 80083a0:	bf00      	nop
 80083a2:	371c      	adds	r7, #28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd90      	pop	{r4, r7, pc}

080083a8 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3330      	adds	r3, #48	; 0x30
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f014 fb91 	bl	801cae0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3338      	adds	r3, #56	; 0x38
 80083c2:	4618      	mov	r0, r3
 80083c4:	f014 fa47 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01b      	beq.n	8008408 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 80083d0:	68f9      	ldr	r1, [r7, #12]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fe62 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	bf14      	ite	ne
 80083de:	2301      	movne	r3, #1
 80083e0:	2300      	moveq	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 80083e8:	68f9      	ldr	r1, [r7, #12]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fe56 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80083f0:	4603      	mov	r3, r0
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	32b8      	adds	r2, #184	; 0xb8
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f014 f932 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	e7e0      	b.n	80083ca <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	4618      	mov	r0, r3
 800841e:	f014 fab8 	bl	801c992 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3338      	adds	r3, #56	; 0x38
 8008426:	4618      	mov	r0, r3
 8008428:	f014 fa15 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01a      	beq.n	800846a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8008434:	68f9      	ldr	r1, [r7, #12]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fe30 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	bf14      	ite	ne
 8008442:	2301      	movne	r3, #1
 8008444:	2300      	moveq	r3, #0
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fe24 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008454:	4603      	mov	r3, r0
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	32bc      	adds	r2, #188	; 0xbc
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f014 f901 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	e7e1      	b.n	800842e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <_ZN11MockSupport5clearEv+0x1a>
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	3204      	adds	r2, #4
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800849a:	f00e fe0d 	bl	80170b8 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3320      	adds	r3, #32
 80084a2:	4618      	mov	r0, r3
 80084a4:	f011 f937 	bl	8019716 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3338      	adds	r3, #56	; 0x38
 80084ce:	4618      	mov	r0, r3
 80084d0:	f014 f9c1 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01a      	beq.n	8008512 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fddc 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80084e4:	60b8      	str	r0, [r7, #8]
        if (support) {
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00d      	beq.n	8008508 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	339c      	adds	r3, #156	; 0x9c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68b8      	ldr	r0, [r7, #8]
 80084f6:	4798      	blx	r3
            delete support;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d004      	beq.n	8008508 <_ZN11MockSupport5clearEv+0x96>
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	3204      	adds	r2, #4
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	4618      	mov	r0, r3
 8008506:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f014 f8ad 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	e7e1      	b.n	80084d6 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3338      	adds	r3, #56	; 0x38
 8008516:	4618      	mov	r0, r3
 8008518:	f014 f915 	bl	801c746 <_ZN18MockNamedValueList5clearEv>
}
 800851c:	bf00      	nop
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	731a      	strb	r2, [r3, #12]
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b089      	sub	sp, #36	; 0x24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	333c      	adds	r3, #60	; 0x3c
 8008550:	4618      	mov	r0, r3
 8008552:	f002 f859 	bl	800a608 <_ZNK12SimpleString7isEmptyEv>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f001 fcff 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 8008564:	e021      	b.n	80085aa <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800856c:	f107 0318 	add.w	r3, r7, #24
 8008570:	4910      	ldr	r1, [pc, #64]	; (80085b4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fca1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8008578:	f107 0310 	add.w	r3, r7, #16
 800857c:	f107 0218 	add.w	r2, r7, #24
 8008580:	4621      	mov	r1, r4
 8008582:	4618      	mov	r0, r3
 8008584:	f002 f8b3 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f107 0110 	add.w	r1, r7, #16
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	4618      	mov	r0, r3
 8008592:	f002 f8ac 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 8008596:	f107 0310 	add.w	r3, r7, #16
 800859a:	4618      	mov	r0, r3
 800859c:	f002 f845 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80085a0:	f107 0318 	add.w	r3, r7, #24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f002 f840 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	3724      	adds	r7, #36	; 0x24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd90      	pop	{r4, r7, pc}
 80085b2:	bf00      	nop
 80085b4:	08020ec8 	.word	0x08020ec8

080085b8 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3314      	adds	r3, #20
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	2101      	movs	r1, #1
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	2100      	movs	r1, #0
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b089      	sub	sp, #36	; 0x24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008612:	f083 0301 	eor.w	r3, r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800861c:	f010 fbf6 	bl	8018e0c <_ZN23MockIgnoredExpectedCall8instanceEv>
 8008620:	4603      	mov	r3, r0
 8008622:	e041      	b.n	80086a8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fb1b 	bl	8008c60 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800862a:	22a5      	movs	r2, #165	; 0xa5
 800862c:	4920      	ldr	r1, [pc, #128]	; (80086b0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800862e:	2070      	movs	r0, #112	; 0x70
 8008630:	f7ff f880 	bl	8007734 <_ZnwjPKci>
 8008634:	4604      	mov	r4, r0
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	4620      	mov	r0, r4
 800863a:	f00f f8f3 	bl	8017824 <_ZN23MockCheckedExpectedCallC1Ej>
 800863e:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	681c      	ldr	r4, [r3, #0]
 8008648:	f107 0314 	add.w	r3, r7, #20
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff ff75 	bl	8008540 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	4619      	mov	r1, r3
 800865c:	69f8      	ldr	r0, [r7, #28]
 800865e:	47a0      	blx	r4
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	4618      	mov	r0, r3
 8008666:	f001 ffe0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	7b1b      	ldrb	r3, [r3, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d013      	beq.n	800869a <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3310      	adds	r3, #16
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	6892      	ldr	r2, [r2, #8]
 800867e:	1c50      	adds	r0, r2, #1
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	6891      	ldr	r1, [r2, #8]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	440a      	add	r2, r1
 8008688:	4601      	mov	r1, r0
 800868a:	69f8      	ldr	r0, [r7, #28]
 800868c:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	441a      	add	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3320      	adds	r3, #32
 800869e:	69f9      	ldr	r1, [r7, #28]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f010 fd89 	bl	80191b8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 80086a6:	69fb      	ldr	r3, [r7, #28]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3724      	adds	r7, #36	; 0x24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}
 80086b0:	08020ecc 	.word	0x08020ecc

080086b4 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 80086b4:	b5b0      	push	{r4, r5, r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685d      	ldr	r5, [r3, #4]
 80086ca:	22b1      	movs	r2, #177	; 0xb1
 80086cc:	490a      	ldr	r1, [pc, #40]	; (80086f8 <_ZN11MockSupport16createActualCallEv+0x44>)
 80086ce:	202c      	movs	r0, #44	; 0x2c
 80086d0:	f7ff f830 	bl	8007734 <_ZnwjPKci>
 80086d4:	4604      	mov	r4, r0
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691a      	ldr	r2, [r3, #16]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3320      	adds	r3, #32
 80086de:	4629      	mov	r1, r5
 80086e0:	4620      	mov	r0, r4
 80086e2:	f00c fbdb 	bl	8014e9c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bdb0      	pop	{r4, r5, r7, pc}
 80086f6:	bf00      	nop
 80086f8:	08020ecc 	.word	0x08020ecc

080086fc <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00d      	beq.n	800872c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3320      	adds	r3, #32
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f010 fd2a 	bl	8019170 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800871c:	4603      	mov	r3, r0
 800871e:	f083 0301 	eor.w	r3, r3, #1
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8008736:	b590      	push	{r4, r7, lr}
 8008738:	b087      	sub	sp, #28
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8008740:	f107 030c 	add.w	r3, r7, #12
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	6879      	ldr	r1, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fef9 	bl	8008540 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d014      	beq.n	8008780 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	33c4      	adds	r3, #196	; 0xc4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
        delete lastActualFunctionCall_;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	3204      	adds	r2, #4
 8008774:	6812      	ldr	r2, [r2, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008786:	f083 0301 	eor.w	r3, r3, #1
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8008790:	f00e fcbe 	bl	8017110 <_ZN21MockIgnoredActualCall8instanceEv>
 8008794:	4603      	mov	r3, r0
 8008796:	461c      	mov	r4, r3
 8008798:	e02f      	b.n	80087fa <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00b      	beq.n	80087bc <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 80087a4:	f00e fc6e 	bl	8017084 <_ZN19MockActualCallTrace8instanceEv>
 80087a8:	4603      	mov	r3, r0
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	3208      	adds	r2, #8
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	f107 010c 	add.w	r1, r7, #12
 80087b4:	4618      	mov	r0, r3
 80087b6:	4790      	blx	r2
 80087b8:	4604      	mov	r4, r0
 80087ba:	e01e      	b.n	80087fa <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff ff9a 	bl	80086fc <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d004      	beq.n	80087d8 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 80087ce:	f00e fc9f 	bl	8017110 <_ZN21MockIgnoredActualCall8instanceEv>
 80087d2:	4603      	mov	r3, r0
 80087d4:	461c      	mov	r4, r3
 80087d6:	e010      	b.n	80087fa <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	33c0      	adds	r3, #192	; 0xc0
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4798      	blx	r3
 80087e4:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f107 020c 	add.w	r2, r7, #12
 80087f2:	4611      	mov	r1, r2
 80087f4:	6978      	ldr	r0, [r7, #20]
 80087f6:	4798      	blx	r3
    return *call;
 80087f8:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 80087fa:	f107 030c 	add.w	r3, r7, #12
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 ff13 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8008804:	4623      	mov	r3, r4
}
 8008806:	4618      	mov	r0, r3
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	bd90      	pop	{r4, r7, pc}

0800880e <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3338      	adds	r3, #56	; 0x38
 8008822:	4618      	mov	r0, r3
 8008824:	f014 f817 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01a      	beq.n	8008866 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8008830:	68f9      	ldr	r1, [r7, #12]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fc32 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	bf14      	ite	ne
 800883e:	2301      	movne	r3, #1
 8008840:	2300      	moveq	r3, #0
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8008848:	68f9      	ldr	r1, [r7, #12]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fc26 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008850:	4603      	mov	r3, r0
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	3290      	adds	r2, #144	; 0x90
 8008856:	6812      	ldr	r2, [r2, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f013 ff03 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	e7e1      	b.n	800882a <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3338      	adds	r3, #56	; 0x38
 8008882:	4618      	mov	r0, r3
 8008884:	f013 ffe7 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01a      	beq.n	80088c6 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8008890:	68f9      	ldr	r1, [r7, #12]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc02 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <_ZN11MockSupport7disableEv+0x4e>
 80088a8:	68f9      	ldr	r1, [r7, #12]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fbf6 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80088b0:	4603      	mov	r3, r0
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	3284      	adds	r2, #132	; 0x84
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f013 fed3 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	e7e1      	b.n	800888a <_ZN11MockSupport7disableEv+0x1c>
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3338      	adds	r3, #56	; 0x38
 80088e2:	4618      	mov	r0, r3
 80088e4:	f013 ffb7 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01a      	beq.n	8008926 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 80088f0:	68f9      	ldr	r1, [r7, #12]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fbd2 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bf14      	ite	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	2300      	moveq	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d009      	beq.n	800891c <_ZN11MockSupport6enableEv+0x4e>
 8008908:	68f9      	ldr	r1, [r7, #12]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fbc6 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008910:	4603      	mov	r3, r0
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	3288      	adds	r2, #136	; 0x88
 8008916:	6812      	ldr	r2, [r2, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f013 fea3 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	e7e1      	b.n	80088ea <_ZN11MockSupport6enableEv+0x1c>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3338      	adds	r3, #56	; 0x38
 8008946:	4618      	mov	r0, r3
 8008948:	f013 ff85 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01b      	beq.n	800898c <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8008954:	68f9      	ldr	r1, [r7, #12]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fba0 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	bf14      	ite	ne
 8008962:	2301      	movne	r3, #1
 8008964:	2300      	moveq	r3, #0
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <_ZN11MockSupport7tracingEb+0x54>
 800896c:	68f9      	ldr	r1, [r7, #12]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fb94 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008974:	4603      	mov	r3, r0
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	328c      	adds	r2, #140	; 0x8c
 800897a:	6812      	ldr	r2, [r2, #0]
 800897c:	78f9      	ldrb	r1, [r7, #3]
 800897e:	4618      	mov	r0, r3
 8008980:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f013 fe70 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	e7e0      	b.n	800894e <_ZN11MockSupport7tracingEb+0x20>
}
 800898c:	bf00      	nop
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3320      	adds	r3, #32
 80089a0:	4618      	mov	r0, r3
 80089a2:	f010 fbc1 	bl	8019128 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 80089a6:	4603      	mov	r3, r0
 80089a8:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3338      	adds	r3, #56	; 0x38
 80089ae:	4618      	mov	r0, r3
 80089b0:	f013 ff51 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80089b4:	60b8      	str	r0, [r7, #8]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fb6c 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bf14      	ite	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	2300      	moveq	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00e      	beq.n	80089f2 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fb60 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80089dc:	4603      	mov	r3, r0
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	3298      	adds	r2, #152	; 0x98
 80089e2:	6812      	ldr	r2, [r2, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	4790      	blx	r2
 80089e8:	4603      	mov	r3, r0
 80089ea:	461a      	mov	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80089f2:	68b8      	ldr	r0, [r7, #8]
 80089f4:	f013 fe38 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 80089f8:	60b8      	str	r0, [r7, #8]
 80089fa:	e7dc      	b.n	80089b6 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bf14      	ite	ne
 8008a02:	2301      	movne	r3, #1
 8008a04:	2300      	moveq	r3, #0
 8008a06:	b2db      	uxtb	r3, r3
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d010      	beq.n	8008a42 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	33bc      	adds	r3, #188	; 0xbc
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4798      	blx	r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	f083 0301 	eor.w	r3, r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 8008a42:	2300      	movs	r3, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e02a      	b.n	8008aa2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3338      	adds	r3, #56	; 0x38
 8008a50:	4618      	mov	r0, r3
 8008a52:	f013 ff00 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d020      	beq.n	8008aa0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fb1b 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00f      	beq.n	8008a8c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008a6c:	68f9      	ldr	r1, [r7, #12]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fb14 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a74:	4603      	mov	r3, r0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff ffca 	bl	8008a10 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f083 0301 	eor.w	r3, r3, #1
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e005      	b.n	8008aa2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f013 fde6 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	e7db      	b.n	8008a58 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 8008aa0:	2301      	movs	r3, #1
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b092      	sub	sp, #72	; 0x48
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008ab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f010 fa2c 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f103 0220 	add.w	r2, r3, #32
 8008ac2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f010 fbf3 	bl	80192b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3338      	adds	r3, #56	; 0x38
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f013 febf 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008ad8:	6478      	str	r0, [r7, #68]	; 0x44
 8008ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01d      	beq.n	8008b1c <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 8008ae0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fada 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bf14      	ite	ne
 8008aee:	2301      	movne	r3, #1
 8008af0:	2300      	moveq	r3, #0
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00c      	beq.n	8008b12 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8008af8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 face 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008b00:	4603      	mov	r3, r0
 8008b02:	f103 0220 	add.w	r2, r3, #32
 8008b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f010 fbd1 	bl	80192b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008b12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008b14:	f013 fda8 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008b18:	6478      	str	r0, [r7, #68]	; 0x44
 8008b1a:	e7de      	b.n	8008ada <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	691a      	ldr	r2, [r3, #16]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	330c      	adds	r3, #12
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4798      	blx	r3
 8008b2e:	4601      	mov	r1, r0
 8008b30:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008b34:	f107 0308 	add.w	r3, r7, #8
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f011 f9f5 	bl	8019f28 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	33c4      	adds	r3, #196	; 0xc4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f107 0208 	add.w	r2, r7, #8
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008b50:	f107 0308 	add.w	r3, r7, #8
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fe6d 	bl	8009834 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8008b5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f010 f9ec 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 8008b64:	bf00      	nop
 8008b66:	3748      	adds	r7, #72	; 0x48
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b092      	sub	sp, #72	; 0x48
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008b74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f010 f9cb 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f103 0220 	add.w	r2, r3, #32
 8008b84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f010 fb92 	bl	80192b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3338      	adds	r3, #56	; 0x38
 8008b94:	4618      	mov	r0, r3
 8008b96:	f013 fe5e 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008b9a:	6478      	str	r0, [r7, #68]	; 0x44
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01d      	beq.n	8008bde <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 8008ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa79 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf14      	ite	ne
 8008bb0:	2301      	movne	r3, #1
 8008bb2:	2300      	moveq	r3, #0
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8008bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa6d 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f103 0220 	add.w	r2, r3, #32
 8008bc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f010 fb70 	bl	80192b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008bd4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008bd6:	f013 fd47 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008bda:	6478      	str	r0, [r7, #68]	; 0x44
 8008bdc:	e7de      	b.n	8008b9c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008bf6:	f107 0308 	add.w	r3, r7, #8
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f011 fa38 	bl	801a070 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	33c4      	adds	r3, #196	; 0xc4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f107 0208 	add.w	r2, r7, #8
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008c12:	f107 0308 	add.w	r3, r7, #8
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fe2e 	bl	8009878 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8008c1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c20:	4618      	mov	r0, r3
 8008c22:	f010 f98b 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 8008c26:	bf00      	nop
 8008c28:	3748      	adds	r7, #72	; 0x48
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
    clear();
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	339c      	adds	r3, #156	; 0x9c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691a      	ldr	r2, [r3, #16]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 8008c68:	f008 fd0a 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f007 fb78 	bl	8010364 <_ZN10UtestShell10countCheckEv>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d008      	beq.n	8008c9e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	33c4      	adds	r3, #196	; 0xc4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3338      	adds	r3, #56	; 0x38
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f013 fdd7 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d023      	beq.n	8008cf8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 8008cb0:	68f9      	ldr	r1, [r7, #12]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f9f2 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9eb 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e000      	b.n	8008cd4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9de 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	32c4      	adds	r2, #196	; 0xc4
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f013 fcba 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	e7d8      	b.n	8008caa <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 8008cf8:	bf00      	nop
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3320      	adds	r3, #32
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f010 f947 	bl	8018fa0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e027      	b.n	8008d6c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3338      	adds	r3, #56	; 0x38
 8008d20:	4618      	mov	r0, r3
 8008d22:	f013 fd98 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01d      	beq.n	8008d6a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9b3 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00c      	beq.n	8008d56 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8008d3c:	68f9      	ldr	r1, [r7, #12]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f9ac 	bl	800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008d44:	4603      	mov	r3, r0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff ffda 	bl	8008d00 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e005      	b.n	8008d6c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f013 fc81 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	e7de      	b.n	8008d28 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff ff7d 	bl	8008c7c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff fe44 	bl	8008a10 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3398      	adds	r3, #152	; 0x98
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e000      	b.n	8008da6 <_ZN11MockSupport17checkExpectationsEv+0x32>
 8008da4:	2300      	movs	r3, #0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fe7d 	bl	8008aaa <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff ffa5 	bl	8008d00 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff fed5 	bl	8008b6c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3338      	adds	r3, #56	; 0x38
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f013 fd0c 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf14      	ite	ne
 8008de6:	2301      	movne	r3, #1
 8008de8:	2300      	moveq	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 8008df4:	b590      	push	{r4, r7, lr}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3338      	adds	r3, #56	; 0x38
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f013 fcf7 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008e0a:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d111      	bne.n	8008e36 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8008e12:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008e16:	490a      	ldr	r1, [pc, #40]	; (8008e40 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 8008e18:	2038      	movs	r0, #56	; 0x38
 8008e1a:	f7fe fc8b 	bl	8007734 <_ZnwjPKci>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f011 fd6e 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008e28:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	3338      	adds	r3, #56	; 0x38
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f013 fcab 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 8008e36:	68fb      	ldr	r3, [r7, #12]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd90      	pop	{r4, r7, pc}
 8008e40:	08020ecc 	.word	0x08020ecc

08008e44 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7ff ffcd 	bl	8008df4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 8008e5a:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3344      	adds	r3, #68	; 0x44
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	6978      	ldr	r0, [r7, #20]
 8008e6a:	4798      	blx	r3
}
 8008e6c:	bf00      	nop
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	3338      	adds	r3, #56	; 0x38
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f013 fcb6 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008e8c:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d111      	bne.n	8008eb8 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8008e94:	f107 0314 	add.w	r3, r7, #20
 8008e98:	490b      	ldr	r1, [pc, #44]	; (8008ec8 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f001 f80d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8008ea0:	f107 0314 	add.w	r3, r7, #20
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f011 fd2c 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008eac:	f107 0314 	add.w	r3, r7, #20
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fbba 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8008eb6:	e003      	b.n	8008ec0 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 8008eb8:	69f9      	ldr	r1, [r7, #28]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff f8a2 	bl	8008004 <_ZN14MockNamedValueC1ERKS_>
}
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	08020ec4 	.word	0x08020ec4

08008ecc <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 8008ecc:	b590      	push	{r4, r7, lr}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 8008ed6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008eda:	4927      	ldr	r1, [pc, #156]	; (8008f78 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 8008edc:	2048      	movs	r0, #72	; 0x48
 8008ede:	f7fe fc29 	bl	8007734 <_ZnwjPKci>
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff f8f8 	bl	80080dc <_ZN11MockSupportC1ERK12SimpleString>
 8008eec:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	33a4      	adds	r3, #164	; 0xa4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6952      	ldr	r2, [r2, #20]
 8008efa:	4611      	mov	r1, r2
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3390      	adds	r3, #144	; 0x90
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008f1c:	f083 0301 	eor.w	r3, r3, #1
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d005      	beq.n	8008f32 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3384      	adds	r3, #132	; 0x84
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7b1b      	ldrb	r3, [r3, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	4798      	blx	r3

    newMock->tracing(tracing_);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	338c      	adds	r3, #140	; 0x8c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8008f54:	4611      	mov	r1, r2
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	33b8      	adds	r3, #184	; 0xb8
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	3230      	adds	r2, #48	; 0x30
 8008f66:	4611      	mov	r1, r2
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	4798      	blx	r3
    return newMock;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}
 8008f76:	bf00      	nop
 8008f78:	08020ecc 	.word	0x08020ecc

08008f7c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8008f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f7e:	b0ab      	sub	sp, #172	; 0xac
 8008f80:	af04      	add	r7, sp, #16
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	4941      	ldr	r1, [pc, #260]	; (8009090 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 ff94 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fbc3 	bl	800a724 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 8008f9e:	f107 0308 	add.w	r3, r7, #8
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff ff10 	bl	8008dca <_ZN11MockSupport7hasDataERK12SimpleString>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d048      	beq.n	8009042 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 8008fb0:	f008 fb66 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	3324      	adds	r3, #36	; 0x24
 8008fba:	681d      	ldr	r5, [r3, #0]
 8008fbc:	f107 0318 	add.w	r3, r7, #24
 8008fc0:	f107 0208 	add.w	r2, r7, #8
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff ff54 	bl	8008e74 <_ZN11MockSupport7getDataERK12SimpleString>
 8008fcc:	f107 0310 	add.w	r3, r7, #16
 8008fd0:	f107 0218 	add.w	r2, r7, #24
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f011 ff61 	bl	801ae9e <_ZNK14MockNamedValue7getTypeEv>
 8008fdc:	f107 0310 	add.w	r3, r7, #16
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 faf5 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	f008 fb5a 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008fec:	4603      	mov	r3, r0
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	f240 13bd 	movw	r3, #445	; 0x1bd
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	4b27      	ldr	r3, [pc, #156]	; (8009094 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	4926      	ldr	r1, [pc, #152]	; (8009098 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009000:	4620      	mov	r0, r4
 8009002:	47a8      	blx	r5
 8009004:	f107 0310 	add.w	r3, r7, #16
 8009008:	4618      	mov	r0, r3
 800900a:	f001 fb0e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800900e:	f107 0318 	add.w	r3, r7, #24
 8009012:	4618      	mov	r0, r3
 8009014:	f011 fca0 	bl	801a958 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8009018:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800901c:	f107 0208 	add.w	r2, r7, #8
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff ff26 	bl	8008e74 <_ZN11MockSupport7getDataERK12SimpleString>
 8009028:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800902c:	4618      	mov	r0, r3
 800902e:	f012 fa4f 	bl	801b4d0 <_ZNK14MockNamedValue16getObjectPointerEv>
 8009032:	4604      	mov	r4, r0
 8009034:	bf00      	nop
 8009036:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800903a:	4618      	mov	r0, r3
 800903c:	f011 fc8c 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8009040:	e01b      	b.n	800907a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ff41 	bl	8008ecc <_ZN11MockSupport5cloneERK12SimpleString>
 800904a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800904e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009052:	4911      	ldr	r1, [pc, #68]	; (8009098 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009054:	4618      	mov	r0, r3
 8009056:	f000 ff30 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800905a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800905e:	f107 0108 	add.w	r1, r7, #8
 8009062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff feec 	bl	8008e44 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800906c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fada 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return newMock;
 8009076:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800907a:	f107 0308 	add.w	r3, r7, #8
 800907e:	4618      	mov	r0, r3
 8009080:	f001 fad3 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8009084:	4623      	mov	r3, r4
}
 8009086:	4618      	mov	r0, r3
 8009088:	379c      	adds	r7, #156	; 0x9c
 800908a:	46bd      	mov	sp, r7
 800908c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908e:	bf00      	nop
 8009090:	08020ee4 	.word	0x08020ee4
 8009094:	08020ecc 	.word	0x08020ecc
 8009098:	08020f04 	.word	0x08020f04

0800909c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800909c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090a0:	b08b      	sub	sp, #44	; 0x2c
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 80090a8:	2500      	movs	r5, #0
 80090aa:	2600      	movs	r6, #0
 80090ac:	f107 0308 	add.w	r3, r7, #8
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f013 fb26 	bl	801c704 <_ZNK22MockNamedValueListNode7getTypeEv>
 80090b8:	f04f 0801 	mov.w	r8, #1
 80090bc:	f107 0310 	add.w	r3, r7, #16
 80090c0:	492e      	ldr	r1, [pc, #184]	; (800917c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fef9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80090c8:	f04f 0901 	mov.w	r9, #1
 80090cc:	f107 0210 	add.w	r2, r7, #16
 80090d0:	f107 0308 	add.w	r3, r7, #8
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f001 fab3 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d01a      	beq.n	8009118 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 80090e2:	f107 0318 	add.w	r3, r7, #24
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f013 faf8 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 80090ee:	2501      	movs	r5, #1
 80090f0:	f107 0320 	add.w	r3, r7, #32
 80090f4:	4922      	ldr	r1, [pc, #136]	; (8009180 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fedf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80090fc:	2601      	movs	r6, #1
 80090fe:	f107 0220 	add.w	r2, r7, #32
 8009102:	f107 0318 	add.w	r3, r7, #24
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f000 ff54 	bl	8009fb6 <_ZNK12SimpleString8containsERKS_>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009114:	2401      	movs	r4, #1
 8009116:	e000      	b.n	800911a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 8009118:	2400      	movs	r4, #0
 800911a:	2e00      	cmp	r6, #0
 800911c:	d004      	beq.n	8009128 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800911e:	f107 0320 	add.w	r3, r7, #32
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fa81 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8009128:	2d00      	cmp	r5, #0
 800912a:	d004      	beq.n	8009136 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800912c:	f107 0318 	add.w	r3, r7, #24
 8009130:	4618      	mov	r0, r3
 8009132:	f001 fa7a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8009136:	f1b9 0f00 	cmp.w	r9, #0
 800913a:	d004      	beq.n	8009146 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800913c:	f107 0310 	add.w	r3, r7, #16
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fa72 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8009146:	f1b8 0f00 	cmp.w	r8, #0
 800914a:	d004      	beq.n	8009156 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4618      	mov	r0, r3
 8009152:	f001 fa6a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8009156:	2c00      	cmp	r4, #0
 8009158:	d00a      	beq.n	8009170 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800915a:	6838      	ldr	r0, [r7, #0]
 800915c:	f013 fa90 	bl	801c680 <_ZN22MockNamedValueListNode4itemEv>
 8009160:	4603      	mov	r3, r0
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	32a0      	adds	r2, #160	; 0xa0
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	4618      	mov	r0, r3
 800916a:	4790      	blx	r2
 800916c:	4603      	mov	r3, r0
 800916e:	e000      	b.n	8009172 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	372c      	adds	r7, #44	; 0x2c
 8009176:	46bd      	mov	sp, r7
 8009178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917c:	08020f04 	.word	0x08020f04
 8009180:	08020ee4 	.word	0x08020ee4

08009184 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00a      	beq.n	80091ac <_ZN11MockSupport11returnValueEv+0x28>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3354      	adds	r3, #84	; 0x54
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	4610      	mov	r0, r2
 80091a8:	4798      	blx	r3
 80091aa:	e010      	b.n	80091ce <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 80091ac:	f107 0308 	add.w	r3, r7, #8
 80091b0:	4909      	ldr	r1, [pc, #36]	; (80091d8 <_ZN11MockSupport11returnValueEv+0x54>)
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fe81 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80091b8:	f107 0308 	add.w	r3, r7, #8
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f011 fba0 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 80091c4:	f107 0308 	add.w	r3, r7, #8
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 fa2e 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	08020ec4 	.word	0x08020ec4

080091dc <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b091      	sub	sp, #68	; 0x44
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3320      	adds	r3, #32
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f107 0208 	add.w	r2, r7, #8
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4610      	mov	r0, r2
 80091f4:	4798      	blx	r3
 80091f6:	f107 0308 	add.w	r3, r7, #8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f011 fe5e 	bl	801aebc <_ZNK14MockNamedValue12getBoolValueEv>
 8009200:	4603      	mov	r3, r0
 8009202:	461c      	mov	r4, r3
 8009204:	bf00      	nop
 8009206:	f107 0308 	add.w	r3, r7, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f011 fba4 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8009210:	4623      	mov	r3, r4
}
 8009212:	4618      	mov	r0, r3
 8009214:	3744      	adds	r7, #68	; 0x44
 8009216:	46bd      	mov	sp, r7
 8009218:	bd90      	pop	{r4, r7, pc}

0800921a <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800921a:	b590      	push	{r4, r7, lr}
 800921c:	b091      	sub	sp, #68	; 0x44
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3320      	adds	r3, #32
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f107 0208 	add.w	r2, r7, #8
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
 8009234:	f107 0308 	add.w	r3, r7, #8
 8009238:	4618      	mov	r0, r3
 800923a:	f011 fe67 	bl	801af0c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800923e:	4604      	mov	r4, r0
 8009240:	bf00      	nop
 8009242:	f107 0308 	add.w	r3, r7, #8
 8009246:	4618      	mov	r0, r3
 8009248:	f011 fb86 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 800924c:	4623      	mov	r3, r4
}
 800924e:	4618      	mov	r0, r3
 8009250:	3744      	adds	r7, #68	; 0x44
 8009252:	46bd      	mov	sp, r7
 8009254:	bd90      	pop	{r4, r7, pc}

08009256 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 8009256:	b590      	push	{r4, r7, lr}
 8009258:	b091      	sub	sp, #68	; 0x44
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3320      	adds	r3, #32
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f107 0208 	add.w	r2, r7, #8
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	4618      	mov	r0, r3
 8009276:	f011 fe99 	bl	801afac <_ZNK14MockNamedValue11getIntValueEv>
 800927a:	4604      	mov	r4, r0
 800927c:	bf00      	nop
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f011 fb68 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8009288:	4623      	mov	r3, r4
}
 800928a:	4618      	mov	r0, r3
 800928c:	3744      	adds	r7, #68	; 0x44
 800928e:	46bd      	mov	sp, r7
 8009290:	bd90      	pop	{r4, r7, pc}

08009292 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	331c      	adds	r3, #28
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d007      	beq.n	80092be <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	335c      	adds	r3, #92	; 0x5c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	e000      	b.n	80092c0 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 80092be:	683b      	ldr	r3, [r7, #0]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	331c      	adds	r3, #28
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	4798      	blx	r3
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3368      	adds	r3, #104	; 0x68
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	4798      	blx	r3
 80092f2:	eeb0 7a40 	vmov.f32	s14, s0
 80092f6:	eef0 7a60 	vmov.f32	s15, s1
 80092fa:	e001      	b.n	8009300 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 80092fc:	ed97 7b00 	vldr	d7, [r7]
}
 8009300:	eeb0 0a47 	vmov.f32	s0, s14
 8009304:	eef0 0a67 	vmov.f32	s1, s15
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	331c      	adds	r3, #28
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	4798      	blx	r3
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3338      	adds	r3, #56	; 0x38
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
 8009336:	4603      	mov	r3, r0
 8009338:	e000      	b.n	800933c <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800933a:	683b      	ldr	r3, [r7, #0]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	331c      	adds	r3, #28
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3324      	adds	r3, #36	; 0x24
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	e000      	b.n	8009374 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 8009372:	78fb      	ldrb	r3, [r7, #3]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	331c      	adds	r3, #28
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d007      	beq.n	80093a8 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	332c      	adds	r3, #44	; 0x2c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
 80093a4:	4603      	mov	r3, r0
 80093a6:	e000      	b.n	80093aa <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 80093a8:	683b      	ldr	r3, [r7, #0]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	331c      	adds	r3, #28
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	4798      	blx	r3
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d007      	beq.n	80093de <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3334      	adds	r3, #52	; 0x34
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
 80093da:	4603      	mov	r3, r0
 80093dc:	e000      	b.n	80093e0 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 80093de:	683b      	ldr	r3, [r7, #0]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	331c      	adds	r3, #28
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	4798      	blx	r3
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d007      	beq.n	8009414 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3340      	adds	r3, #64	; 0x40
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	e000      	b.n	8009416 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 8009414:	683b      	ldr	r3, [r7, #0]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800941e:	b590      	push	{r4, r7, lr}
 8009420:	b091      	sub	sp, #68	; 0x44
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3320      	adds	r3, #32
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f107 0208 	add.w	r2, r7, #8
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	4610      	mov	r0, r2
 8009436:	4798      	blx	r3
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4618      	mov	r0, r3
 800943e:	f011 fddd 	bl	801affc <_ZNK14MockNamedValue15getLongIntValueEv>
 8009442:	4604      	mov	r4, r0
 8009444:	bf00      	nop
 8009446:	f107 0308 	add.w	r3, r7, #8
 800944a:	4618      	mov	r0, r3
 800944c:	f011 fa84 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8009450:	4623      	mov	r3, r4
}
 8009452:	4618      	mov	r0, r3
 8009454:	3744      	adds	r7, #68	; 0x44
 8009456:	46bd      	mov	sp, r7
 8009458:	bd90      	pop	{r4, r7, pc}

0800945a <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800945a:	b590      	push	{r4, r7, lr}
 800945c:	b091      	sub	sp, #68	; 0x44
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3320      	adds	r3, #32
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f107 0208 	add.w	r2, r7, #8
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	4618      	mov	r0, r3
 800947a:	f011 fe21 	bl	801b0c0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800947e:	4604      	mov	r4, r0
 8009480:	bf00      	nop
 8009482:	f107 0308 	add.w	r3, r7, #8
 8009486:	4618      	mov	r0, r3
 8009488:	f011 fa66 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 800948c:	4623      	mov	r3, r4
}
 800948e:	4618      	mov	r0, r3
 8009490:	3744      	adds	r7, #68	; 0x44
 8009492:	46bd      	mov	sp, r7
 8009494:	bd90      	pop	{r4, r7, pc}
	...

08009498 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 8009498:	b5b0      	push	{r4, r5, r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af02      	add	r7, sp, #8
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80094a2:	f008 f8ed 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80094a6:	4604      	mov	r4, r0
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	3368      	adds	r3, #104	; 0x68
 80094ac:	681d      	ldr	r5, [r3, #0]
 80094ae:	f008 f8f7 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80094b2:	4603      	mov	r3, r0
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	f240 2345 	movw	r3, #581	; 0x245
 80094ba:	4a06      	ldr	r2, [pc, #24]	; (80094d4 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 80094bc:	4906      	ldr	r1, [pc, #24]	; (80094d8 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 80094be:	4620      	mov	r0, r4
 80094c0:	47a8      	blx	r5
    return cpputest_longlong(0);
 80094c2:	2100      	movs	r1, #0
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7fe fd2f 	bl	8007f28 <_ZN17cpputest_longlongC1Ei>
}
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bdb0      	pop	{r4, r5, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	08020ecc 	.word	0x08020ecc
 80094d8:	08020f10 	.word	0x08020f10

080094dc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 80094dc:	b5b0      	push	{r4, r5, r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af02      	add	r7, sp, #8
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80094e6:	f008 f8cb 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80094ea:	4604      	mov	r4, r0
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	3368      	adds	r3, #104	; 0x68
 80094f0:	681d      	ldr	r5, [r3, #0]
 80094f2:	f008 f8d5 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80094f6:	4603      	mov	r3, r0
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	f240 234b 	movw	r3, #587	; 0x24b
 80094fe:	4a06      	ldr	r2, [pc, #24]	; (8009518 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 8009500:	4906      	ldr	r1, [pc, #24]	; (800951c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 8009502:	4620      	mov	r0, r4
 8009504:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8009506:	2100      	movs	r1, #0
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fe fd19 	bl	8007f40 <_ZN18cpputest_ulonglongC1Ei>
}
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bdb0      	pop	{r4, r5, r7, pc}
 8009516:	bf00      	nop
 8009518:	08020ecc 	.word	0x08020ecc
 800951c:	08020f30 	.word	0x08020f30

08009520 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4639      	mov	r1, r7
 800952c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8009530:	f008 f8a6 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8009534:	4604      	mov	r4, r0
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	3368      	adds	r3, #104	; 0x68
 800953a:	681d      	ldr	r5, [r3, #0]
 800953c:	f008 f8b0 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009540:	4603      	mov	r3, r0
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	f240 2351 	movw	r3, #593	; 0x251
 8009548:	4a06      	ldr	r2, [pc, #24]	; (8009564 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800954a:	4907      	ldr	r1, [pc, #28]	; (8009568 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800954c:	4620      	mov	r0, r4
 800954e:	47a8      	blx	r5
    return defaultValue;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	461a      	mov	r2, r3
 8009554:	463b      	mov	r3, r7
 8009556:	cb03      	ldmia	r3!, {r0, r1}
 8009558:	6010      	str	r0, [r2, #0]
 800955a:	6051      	str	r1, [r2, #4]
}
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bdb0      	pop	{r4, r5, r7, pc}
 8009564:	08020ecc 	.word	0x08020ecc
 8009568:	08020f10 	.word	0x08020f10

0800956c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4639      	mov	r1, r7
 8009578:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800957c:	f008 f880 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8009580:	4604      	mov	r4, r0
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	3368      	adds	r3, #104	; 0x68
 8009586:	681d      	ldr	r5, [r3, #0]
 8009588:	f008 f88a 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800958c:	4603      	mov	r3, r0
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	f240 2357 	movw	r3, #599	; 0x257
 8009594:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8009596:	4907      	ldr	r1, [pc, #28]	; (80095b4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8009598:	4620      	mov	r0, r4
 800959a:	47a8      	blx	r5
    return defaultValue;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	461a      	mov	r2, r3
 80095a0:	463b      	mov	r3, r7
 80095a2:	cb03      	ldmia	r3!, {r0, r1}
 80095a4:	6010      	str	r0, [r2, #0]
 80095a6:	6051      	str	r1, [r2, #4]
}
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bdb0      	pop	{r4, r5, r7, pc}
 80095b0:	08020ecc 	.word	0x08020ecc
 80095b4:	08020f30 	.word	0x08020f30

080095b8 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 80095b8:	b590      	push	{r4, r7, lr}
 80095ba:	b091      	sub	sp, #68	; 0x44
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3320      	adds	r3, #32
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4610      	mov	r0, r2
 80095d0:	4798      	blx	r3
 80095d2:	f107 0308 	add.w	r3, r7, #8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f011 fea6 	bl	801b328 <_ZNK14MockNamedValue14getStringValueEv>
 80095dc:	4604      	mov	r4, r0
 80095de:	bf00      	nop
 80095e0:	f107 0308 	add.w	r3, r7, #8
 80095e4:	4618      	mov	r0, r3
 80095e6:	f011 f9b7 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 80095ea:	4623      	mov	r3, r4
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3744      	adds	r7, #68	; 0x44
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd90      	pop	{r4, r7, pc}

080095f4 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	ed2d 8b02 	vpush	{d8}
 80095fa:	b090      	sub	sp, #64	; 0x40
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3320      	adds	r3, #32
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f107 0208 	add.w	r2, r7, #8
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4610      	mov	r0, r2
 8009610:	4798      	blx	r3
 8009612:	f107 0308 	add.w	r3, r7, #8
 8009616:	4618      	mov	r0, r3
 8009618:	f011 fe2a 	bl	801b270 <_ZNK14MockNamedValue14getDoubleValueEv>
 800961c:	eeb0 8a40 	vmov.f32	s16, s0
 8009620:	eef0 8a60 	vmov.f32	s17, s1
 8009624:	bf00      	nop
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f011 f994 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8009630:	eeb0 7a48 	vmov.f32	s14, s16
 8009634:	eef0 7a68 	vmov.f32	s15, s17
}
 8009638:	eeb0 0a47 	vmov.f32	s0, s14
 800963c:	eef0 0a67 	vmov.f32	s1, s15
 8009640:	3740      	adds	r7, #64	; 0x40
 8009642:	46bd      	mov	sp, r7
 8009644:	ecbd 8b02 	vpop	{d8}
 8009648:	bd80      	pop	{r7, pc}

0800964a <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	331c      	adds	r3, #28
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	4798      	blx	r3
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	336c      	adds	r3, #108	; 0x6c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	4798      	blx	r3
 8009672:	4603      	mov	r3, r0
 8009674:	e000      	b.n	8009678 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 8009676:	683b      	ldr	r3, [r7, #0]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	331c      	adds	r3, #28
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d007      	beq.n	80096ac <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3378      	adds	r3, #120	; 0x78
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
 80096a8:	4603      	mov	r3, r0
 80096aa:	e000      	b.n	80096ae <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 80096ac:	683b      	ldr	r3, [r7, #0]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	331c      	adds	r3, #28
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3380      	adds	r3, #128	; 0x80
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
 80096de:	4603      	mov	r3, r0
 80096e0:	e000      	b.n	80096e4 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 80096e2:	683b      	ldr	r3, [r7, #0]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b091      	sub	sp, #68	; 0x44
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3320      	adds	r3, #32
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f107 0208 	add.w	r2, r7, #8
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
 8009706:	f107 0308 	add.w	r3, r7, #8
 800970a:	4618      	mov	r0, r3
 800970c:	f011 fe34 	bl	801b378 <_ZNK14MockNamedValue15getPointerValueEv>
 8009710:	4604      	mov	r4, r0
 8009712:	bf00      	nop
 8009714:	f107 0308 	add.w	r3, r7, #8
 8009718:	4618      	mov	r0, r3
 800971a:	f011 f91d 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 800971e:	4623      	mov	r3, r4
}
 8009720:	4618      	mov	r0, r3
 8009722:	3744      	adds	r7, #68	; 0x44
 8009724:	46bd      	mov	sp, r7
 8009726:	bd90      	pop	{r4, r7, pc}

08009728 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b091      	sub	sp, #68	; 0x44
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3320      	adds	r3, #32
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f107 0208 	add.w	r2, r7, #8
 800973c:	6879      	ldr	r1, [r7, #4]
 800973e:	4610      	mov	r0, r2
 8009740:	4798      	blx	r3
 8009742:	f107 0308 	add.w	r3, r7, #8
 8009746:	4618      	mov	r0, r3
 8009748:	f011 fe3e 	bl	801b3c8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800974c:	4604      	mov	r4, r0
 800974e:	bf00      	nop
 8009750:	f107 0308 	add.w	r3, r7, #8
 8009754:	4618      	mov	r0, r3
 8009756:	f011 f8ff 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 800975a:	4623      	mov	r3, r4
}
 800975c:	4618      	mov	r0, r3
 800975e:	3744      	adds	r7, #68	; 0x44
 8009760:	46bd      	mov	sp, r7
 8009762:	bd90      	pop	{r4, r7, pc}

08009764 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 8009764:	b590      	push	{r4, r7, lr}
 8009766:	b091      	sub	sp, #68	; 0x44
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3320      	adds	r3, #32
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f107 0208 	add.w	r2, r7, #8
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	4610      	mov	r0, r2
 800977c:	4798      	blx	r3
 800977e:	f107 0308 	add.w	r3, r7, #8
 8009782:	4618      	mov	r0, r3
 8009784:	f011 fe48 	bl	801b418 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8009788:	4604      	mov	r4, r0
 800978a:	bf00      	nop
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	4618      	mov	r0, r3
 8009792:	f011 f8e1 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8009796:	4623      	mov	r3, r4
}
 8009798:	4618      	mov	r0, r3
 800979a:	3744      	adds	r7, #68	; 0x44
 800979c:	46bd      	mov	sp, r7
 800979e:	bd90      	pop	{r4, r7, pc}

080097a0 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <_ZN11MockSupport14hasReturnValueEv+0x26>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3350      	adds	r3, #80	; 0x50
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4610      	mov	r0, r2
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	e000      	b.n	80097c8 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <_Z41__static_initialization_and_destruction_0ii>:
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d115      	bne.n	800980c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d110      	bne.n	800980c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 80097ea:	f107 0308 	add.w	r3, r7, #8
 80097ee:	490f      	ldr	r1, [pc, #60]	; (800982c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fb62 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80097f6:	f107 0308 	add.w	r3, r7, #8
 80097fa:	4619      	mov	r1, r3
 80097fc:	480c      	ldr	r0, [pc, #48]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80097fe:	f7fe fc6d 	bl	80080dc <_ZN11MockSupportC1ERK12SimpleString>
 8009802:	f107 0308 	add.w	r3, r7, #8
 8009806:	4618      	mov	r0, r3
 8009808:	f000 ff0f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d107      	bne.n	8009822 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009818:	4293      	cmp	r3, r2
 800981a:	d102      	bne.n	8009822 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800981c:	4804      	ldr	r0, [pc, #16]	; (8009830 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800981e:	f7fe fca7 	bl	8008170 <_ZN11MockSupportD1Ev>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	08020ec4 	.word	0x08020ec4
 8009830:	20000644 	.word	0x20000644

08009834 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	4a05      	ldr	r2, [pc, #20]	; (8009854 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4618      	mov	r0, r3
 8009846:	f7fe fbbb 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	08024184 	.word	0x08024184

08009858 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ffe7 	bl	8009834 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 8009866:	2134      	movs	r1, #52	; 0x34
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7fd ff77 	bl	800775c <_ZdlPvj>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	4a05      	ldr	r2, [pc, #20]	; (8009898 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fb99 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	08024158 	.word	0x08024158

0800989c <_ZN20MockCallOrderFailureD0Ev>:
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ffe7 	bl	8009878 <_ZN20MockCallOrderFailureD1Ev>
 80098aa:	2134      	movs	r1, #52	; 0x34
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7fd ff55 	bl	800775c <_ZdlPvj>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
 80098c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80098c4:	2001      	movs	r0, #1
 80098c6:	f7ff ff83 	bl	80097d0 <_Z41__static_initialization_and_destruction_0ii>
 80098ca:	bd80      	pop	{r7, pc}

080098cc <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80098d4:	2000      	movs	r0, #0
 80098d6:	f7ff ff7b 	bl	80097d0 <_Z41__static_initialization_and_destruction_0ii>
 80098da:	bd80      	pop	{r7, pc}

080098dc <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <_ZN11SimpleMutexC1Ev+0x20>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4798      	blx	r3
 80098ea:	4602      	mov	r2, r0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]
}
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	200000ec 	.word	0x200000ec

08009900 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <_ZN11SimpleMutexD1Ev+0x20>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6812      	ldr	r2, [r2, #0]
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
}
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200000f8 	.word	0x200000f8

08009924 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800992c:	4b04      	ldr	r3, [pc, #16]	; (8009940 <_ZN11SimpleMutex4LockEv+0x1c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	6812      	ldr	r2, [r2, #0]
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	200000f0 	.word	0x200000f0

08009944 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800994c:	4b04      	ldr	r3, [pc, #16]	; (8009960 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6812      	ldr	r2, [r2, #0]
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	200000f4 	.word	0x200000f4

08009964 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff ffd3 	bl	8009924 <_ZN11SimpleMutex4LockEv>
}
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff ffd5 	bl	8009944 <_ZN11SimpleMutex6UnlockEv>
}
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d103      	bne.n	80099b8 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 80099b0:	f003 fd7a 	bl	800d4a8 <_Z24defaultNewArrayAllocatorv>
 80099b4:	4603      	mov	r3, r0
 80099b6:	e001      	b.n	80099bc <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 80099b8:	4b01      	ldr	r3, [pc, #4]	; (80099c0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	2000068c 	.word	0x2000068c

080099c4 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 80099d0:	f7ff ffe8 	bl	80099a4 <_ZN12SimpleString18getStringAllocatorEv>
 80099d4:	6803      	ldr	r3, [r0, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	681c      	ldr	r4, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	47a0      	blx	r4
 80099e2:	4603      	mov	r3, r0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd90      	pop	{r4, r7, pc}

080099ec <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 80099ec:	b590      	push	{r4, r7, lr}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 80099fa:	f7ff ffd3 	bl	80099a4 <_ZN12SimpleString18getStringAllocatorEv>
 80099fe:	6803      	ldr	r3, [r0, #0]
 8009a00:	330c      	adds	r3, #12
 8009a02:	681c      	ldr	r4, [r3, #0]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	68f9      	ldr	r1, [r7, #12]
 8009a0e:	47a0      	blx	r4
}
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}

08009a18 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 8009a20:	2284      	movs	r2, #132	; 0x84
 8009a22:	4906      	ldr	r1, [pc, #24]	; (8009a3c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8009a24:	2001      	movs	r0, #1
 8009a26:	f7ff ffcd 	bl	80099c4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8009a2a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
    return empty;
 8009a32:	68fb      	ldr	r3, [r7, #12]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	08020f5c 	.word	0x08020f5c

08009a40 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 f809 	bl	800aa64 <_ZN12SimpleString7isSpaceEc>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <_ZN12SimpleString4AtoUEPKc+0x20>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	e7f3      	b.n	8009a48 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 ffe7 	bl	800aa3c <_ZN12SimpleString7isDigitEc>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <_ZN12SimpleString4AtoUEPKc+0x40>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b2f      	cmp	r3, #47	; 0x2f
 8009a7a:	d901      	bls.n	8009a80 <_ZN12SimpleString4AtoUEPKc+0x40>
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e000      	b.n	8009a82 <_ZN12SimpleString4AtoUEPKc+0x42>
 8009a80:	2300      	movs	r3, #0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d010      	beq.n	8009aa8 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	3b30      	subs	r3, #48	; 0x30
 8009a9e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	e7dd      	b.n	8009a64 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 ffd0 	bl	800aa64 <_ZN12SimpleString7isSpaceEc>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <_ZN12SimpleString4AtoIEPKc+0x20>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3301      	adds	r3, #1
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	e7f3      	b.n	8009aba <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8009ad8:	7afb      	ldrb	r3, [r7, #11]
 8009ada:	2b2d      	cmp	r3, #45	; 0x2d
 8009adc:	d002      	beq.n	8009ae4 <_ZN12SimpleString4AtoIEPKc+0x32>
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	2b2b      	cmp	r3, #43	; 0x2b
 8009ae2:	d102      	bne.n	8009aea <_ZN12SimpleString4AtoIEPKc+0x38>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]

    int  result = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 ffa2 	bl	800aa3c <_ZN12SimpleString7isDigitEc>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00f      	beq.n	8009b1e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	3b30      	subs	r3, #48	; 0x30
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	607b      	str	r3, [r7, #4]
 8009b1c:	e7e7      	b.n	8009aee <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 8009b1e:	7afb      	ldrb	r3, [r7, #11]
 8009b20:	2b2d      	cmp	r3, #45	; 0x2d
 8009b22:	d102      	bne.n	8009b2a <_ZN12SimpleString4AtoIEPKc+0x78>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	425b      	negs	r3, r3
 8009b28:	e000      	b.n	8009b2c <_ZN12SimpleString4AtoIEPKc+0x7a>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00c      	beq.n	8009b60 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d106      	bne.n	8009b60 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3301      	adds	r3, #1
 8009b56:	607b      	str	r3, [r7, #4]
       ++s2;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8009b5e:	e7ee      	b.n	8009b3e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	1ad3      	subs	r3, r2, r3
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8009b80:	f04f 33ff 	mov.w	r3, #4294967295
 8009b84:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bf14      	ite	ne
 8009b98:	2301      	movne	r3, #1
 8009b9a:	2300      	moveq	r3, #0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d000      	beq.n	8009ba4 <_ZN12SimpleString6StrLenEPKc+0x2c>
 8009ba2:	e7f0      	b.n	8009b86 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d013      	beq.n	8009bec <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00f      	beq.n	8009bec <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	781a      	ldrb	r2, [r3, #0]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d109      	bne.n	8009bec <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	607b      	str	r3, [r7, #4]
        ++s1;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
        ++s2;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	3301      	adds	r3, #1
 8009be8:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 8009bea:	e7e8      	b.n	8009bbe <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d006      	beq.n	8009c00 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	e000      	b.n	8009c02 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b087      	sub	sp, #28
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
    char* result = s1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	e01e      	b.n	8009c6c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	607b      	str	r3, [r7, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e000      	b.n	8009c50 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	3301      	adds	r3, #1
 8009c58:	60bb      	str	r3, [r7, #8]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8009c68:	e7e5      	b.n	8009c36 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 8009c6a:	697b      	ldr	r3, [r7, #20]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	e01b      	b.n	8009cc6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d016      	beq.n	8009cc4 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 8009c96:	6838      	ldr	r0, [r7, #0]
 8009c98:	f7ff ff6e 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ff85 	bl	8009bb2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf0c      	ite	eq
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	2300      	movne	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	e004      	b.n	8009cc6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	607b      	str	r3, [r7, #4]
 8009cc2:	e7e4      	b.n	8009c8e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fed9 	bl	800aa92 <_ZN12SimpleString7isUpperEc>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <_ZN12SimpleString7ToLowerEc+0x20>
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	3320      	adds	r3, #32
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	e000      	b.n	8009cf0 <_ZN12SimpleString7ToLowerEc+0x22>
 8009cee:	79fb      	ldrb	r3, [r7, #7]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	613b      	str	r3, [r7, #16]

    while (n--)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	1e5a      	subs	r2, r3, #1
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bf14      	ite	ne
 8009d16:	2301      	movne	r3, #1
 8009d18:	2300      	moveq	r3, #0
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d013      	beq.n	8009d48 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	781a      	ldrb	r2, [r3, #0]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d006      	beq.n	8009d3a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	e007      	b.n	8009d4a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
            ++p2;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	3301      	adds	r3, #1
 8009d44:	613b      	str	r3, [r7, #16]
    while (n--)
 8009d46:	e7e1      	b.n	8009d0c <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
	...

08009d58 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00d      	beq.n	8009d84 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6859      	ldr	r1, [r3, #4]
 8009d70:	23ee      	movs	r3, #238	; 0xee
 8009d72:	4a06      	ldr	r2, [pc, #24]	; (8009d8c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8009d74:	f7ff fe3a 	bl	80099ec <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	605a      	str	r2, [r3, #4]
    }
}
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	08020f5c 	.word	0x08020f5c

08009d90 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff ffdd 	bl	8009d58 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff fe37 	bl	8009a18 <_ZNK12SimpleString14getEmptyStringEv>
 8009daa:	4602      	mov	r2, r0
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	601a      	str	r2, [r3, #0]
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff ffc7 	bl	8009d58 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	68b8      	ldr	r0, [r7, #8]
 8009dd8:	f000 fe12 	bl	800aa00 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	601a      	str	r2, [r3, #0]
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff ffae 	bl	8009d58 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f240 1209 	movw	r2, #265	; 0x109
 8009e0a:	4907      	ldr	r1, [pc, #28]	; (8009e28 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff fdd9 	bl	80099c4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8009e12:	4602      	mov	r2, r0
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	08020f5c 	.word	0x08020f5c

08009e2c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff ff8d 	bl	8009d58 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	601a      	str	r2, [r3, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8009e52:	b590      	push	{r4, r7, lr}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681c      	ldr	r4, [r3, #0]
 8009e60:	6838      	ldr	r0, [r7, #0]
 8009e62:	f000 fbc1 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 8009e66:	4603      	mov	r3, r0
 8009e68:	3301      	adds	r3, #1
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ffa2 	bl	8009db8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd90      	pop	{r4, r7, pc}

08009e7c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8009e86:	6838      	ldr	r0, [r7, #0]
 8009e88:	f7ff fe76 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	3301      	adds	r3, #1
 8009e90:	461a      	mov	r2, r3
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ff8f 	bl	8009db8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8009e9a:	bf00      	nop
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
    return buffer_;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d103      	bne.n	8009ede <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff ff5a 	bl	8009d90 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8009edc:	e003      	b.n	8009ee6 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff ffcb 	bl	8009e7c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b088      	sub	sp, #32
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8009f08:	68b8      	ldr	r0, [r7, #8]
 8009f0a:	f7ff fe35 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 8009f0e:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	fb02 f303 	mul.w	r3, r2, r3
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff ff65 	bl	8009dec <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61bb      	str	r3, [r7, #24]
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d20e      	bcs.n	8009f52 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	3301      	adds	r3, #1
 8009f38:	461a      	mov	r2, r3
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	69f8      	ldr	r0, [r7, #28]
 8009f3e:	f7ff fe66 	bl	8009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	4413      	add	r3, r2
 8009f48:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	61bb      	str	r3, [r7, #24]
 8009f50:	e7ec      	b.n	8009f2c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
}
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8009f78:	6838      	ldr	r0, [r7, #0]
 8009f7a:	f7ff ff92 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff ff7a 	bl	8009e7c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d003      	beq.n	8009fac <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff ff53 	bl	8009e52 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 8009fac:	687b      	ldr	r3, [r7, #4]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 8009fb6:	b590      	push	{r4, r7, lr}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff ff6e 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	6838      	ldr	r0, [r7, #0]
 8009fca:	f7ff ff6a 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f7ff fe50 	bl	8009c78 <_ZN12SimpleString6StrStrEPKcS1_>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	bf14      	ite	ne
 8009fde:	2301      	movne	r3, #1
 8009fe0:	2300      	moveq	r3, #0
 8009fe2:	b2db      	uxtb	r3, r3
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd90      	pop	{r4, r7, pc}

08009fec <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 8009fec:	b590      	push	{r4, r7, lr}
 8009fee:	b087      	sub	sp, #28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 8009ff6:	f107 0308 	add.w	r3, r7, #8
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 fabb 	bl	800a578 <_ZNK12SimpleString9lowerCaseEv>
 800a002:	f107 0310 	add.w	r3, r7, #16
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 fab5 	bl	800a578 <_ZNK12SimpleString9lowerCaseEv>
 800a00e:	f107 0210 	add.w	r2, r7, #16
 800a012:	f107 0308 	add.w	r3, r7, #8
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff ffcc 	bl	8009fb6 <_ZNK12SimpleString8containsERKS_>
 800a01e:	4603      	mov	r3, r0
 800a020:	461c      	mov	r4, r3
 800a022:	bf00      	nop
 800a024:	f107 0310 	add.w	r3, r7, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fafe 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a02e:	f107 0308 	add.w	r3, r7, #8
 800a032:	4618      	mov	r0, r3
 800a034:	f000 faf9 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a038:	4623      	mov	r3, r4
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	371c      	adds	r7, #28
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd90      	pop	{r4, r7, pc}

0800a042 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800a042:	b590      	push	{r4, r7, lr}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800a04c:	6838      	ldr	r0, [r7, #0]
 800a04e:	f000 facb 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	bf0c      	ite	eq
 800a058:	2301      	moveq	r3, #1
 800a05a:	2300      	movne	r3, #0
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800a062:	2301      	movs	r3, #1
 800a064:	e022      	b.n	800a0ac <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fabe 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bf0c      	ite	eq
 800a072:	2301      	moveq	r3, #1
 800a074:	2300      	movne	r3, #0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800a07c:	2300      	movs	r3, #0
 800a07e:	e015      	b.n	800a0ac <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ff0e 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a086:	4604      	mov	r4, r0
 800a088:	6838      	ldr	r0, [r7, #0]
 800a08a:	f7ff ff0a 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a08e:	4603      	mov	r3, r0
 800a090:	4619      	mov	r1, r3
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff fdf0 	bl	8009c78 <_ZN12SimpleString6StrStrEPKcS1_>
 800a098:	4604      	mov	r4, r0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff ff01 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	429c      	cmp	r4, r3
 800a0a4:	bf0c      	ite	eq
 800a0a6:	2301      	moveq	r3, #1
 800a0a8:	2300      	movne	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd90      	pop	{r4, r7, pc}

0800a0b4 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa92 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a0c4:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800a0c6:	6838      	ldr	r0, [r7, #0]
 800a0c8:	f000 fa8e 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a0cc:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e020      	b.n	800a11a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e01b      	b.n	800a11a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d201      	bcs.n	800a0ee <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e015      	b.n	800a11a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fed7 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	18cc      	adds	r4, r1, r3
 800a0fe:	6838      	ldr	r0, [r7, #0]
 800a100:	f7ff fecf 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a104:	4603      	mov	r3, r0
 800a106:	4619      	mov	r1, r3
 800a108:	4620      	mov	r0, r4
 800a10a:	f7ff fd13 	bl	8009b34 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	bf0c      	ite	eq
 800a114:	2301      	moveq	r3, #1
 800a116:	2300      	movne	r3, #0
 800a118:	b2db      	uxtb	r3, r3
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd90      	pop	{r4, r7, pc}

0800a122 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff feb6 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a136:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800a144:	6838      	ldr	r0, [r7, #0]
 800a146:	f7ff feac 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a14a:	4603      	mov	r3, r0
 800a14c:	4619      	mov	r1, r3
 800a14e:	6938      	ldr	r0, [r7, #16]
 800a150:	f7ff fd92 	bl	8009c78 <_ZN12SimpleString6StrStrEPKcS1_>
 800a154:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d014      	beq.n	800a188 <_ZNK12SimpleString5countERKS_+0x66>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d011      	beq.n	800a188 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	613b      	str	r3, [r7, #16]
        str++;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	3301      	adds	r3, #1
 800a16c:	613b      	str	r3, [r7, #16]
        num++;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	3301      	adds	r3, #1
 800a172:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800a174:	6838      	ldr	r0, [r7, #0]
 800a176:	f7ff fe94 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a17a:	4603      	mov	r3, r0
 800a17c:	4619      	mov	r1, r3
 800a17e:	6938      	ldr	r0, [r7, #16]
 800a180:	f7ff fd7a 	bl	8009c78 <_ZN12SimpleString6StrStrEPKcS1_>
 800a184:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800a186:	e7e6      	b.n	800a156 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800a188:	697b      	ldr	r3, [r7, #20]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800a192:	b590      	push	{r4, r7, lr}
 800a194:	b091      	sub	sp, #68	; 0x44
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff ffbe 	bl	800a122 <_ZNK12SimpleString5countERKS_>
 800a1a6:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800a1a8:	68b9      	ldr	r1, [r7, #8]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff ff82 	bl	800a0b4 <_ZNK12SimpleString8endsWithERKS_>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e000      	b.n	800a1bc <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800a1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	4413      	add	r3, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 f95c 	bl	800b484 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff fe68 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a1d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d235      	bcs.n	800a24c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800a1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800a1e4:	68b8      	ldr	r0, [r7, #8]
 800a1e6:	f7ff fe5c 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a1f0:	f7ff fd42 	bl	8009c78 <_ZN12SimpleString6StrStrEPKcS1_>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800a1fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 f9db 	bl	800b5b8 <_ZN22SimpleStringCollectionixEj>
 800a202:	4604      	mov	r4, r0
 800a204:	f107 031c 	add.w	r3, r7, #28
 800a208:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff fe55 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800a210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	f107 0014 	add.w	r0, r7, #20
 800a21a:	f107 011c 	add.w	r1, r7, #28
 800a21e:	2200      	movs	r2, #0
 800a220:	f000 fb0c 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
 800a224:	f107 0314 	add.w	r3, r7, #20
 800a228:	4619      	mov	r1, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7ff feb1 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800a230:	f107 0314 	add.w	r3, r7, #20
 800a234:	4618      	mov	r0, r3
 800a236:	f000 f9f8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a23a:	f107 031c 	add.w	r3, r7, #28
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f9f3 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	3301      	adds	r3, #1
 800a248:	63bb      	str	r3, [r7, #56]	; 0x38
 800a24a:	e7c5      	b.n	800a1d8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d015      	beq.n	800a27e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800a252:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f9af 	bl	800b5b8 <_ZN22SimpleStringCollectionixEj>
 800a25a:	4604      	mov	r4, r0
 800a25c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fe29 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800a268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a26c:	4619      	mov	r1, r3
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff fe8f 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800a274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f9d6 	bl	800a62a <_ZN12SimpleStringD1Ev>
    }
}
 800a27e:	bf00      	nop
 800a280:	3744      	adds	r7, #68	; 0x44
 800a282:	46bd      	mov	sp, r7
 800a284:	bd90      	pop	{r4, r7, pc}

0800a286 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	70fb      	strb	r3, [r7, #3]
 800a292:	4613      	mov	r3, r2
 800a294:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f9a6 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a29c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d218      	bcs.n	800a2dc <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff fdf9 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	bf0c      	ite	eq
 800a2be:	2301      	moveq	r3, #1
 800a2c0:	2300      	movne	r3, #0
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d005      	beq.n	800a2d4 <_ZN12SimpleString7replaceEcc+0x4e>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	78ba      	ldrb	r2, [r7, #2]
 800a2d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
 800a2da:	e7e2      	b.n	800a2a2 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800a2dc:	bf00      	nop
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08e      	sub	sp, #56	; 0x38
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff fddf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800a2fc:	f107 0310 	add.w	r3, r7, #16
 800a300:	4619      	mov	r1, r3
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff ff0d 	bl	800a122 <_ZNK12SimpleString5countERKS_>
 800a308:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a30a:	f107 0310 	add.w	r3, r7, #16
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f98b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a316:	2b00      	cmp	r3, #0
 800a318:	d071      	beq.n	800a3fe <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 f964 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a320:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800a322:	68b8      	ldr	r0, [r7, #8]
 800a324:	f7ff fc28 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 800a328:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff fc24 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 800a330:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a336:	fb02 f203 	mul.w	r2, r2, r3
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	441a      	add	r2, r3
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	3301      	adds	r3, #1
 800a34a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d951      	bls.n	800a3f6 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800a352:	f240 129d 	movw	r2, #413	; 0x19d
 800a356:	492c      	ldr	r1, [pc, #176]	; (800a408 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800a358:	69f8      	ldr	r0, [r7, #28]
 800a35a:	f7ff fb33 	bl	80099c4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a35e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800a360:	2300      	movs	r3, #0
 800a362:	637b      	str	r3, [r7, #52]	; 0x34
 800a364:	2300      	movs	r3, #0
 800a366:	633b      	str	r3, [r7, #48]	; 0x30
 800a368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d236      	bcs.n	800a3de <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f7ff fd96 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a376:	4602      	mov	r2, r0
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	4413      	add	r3, r2
 800a37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37e:	68b9      	ldr	r1, [r7, #8]
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff fc16 	bl	8009bb2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bf0c      	ite	eq
 800a38c:	2301      	moveq	r3, #1
 800a38e:	2300      	movne	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d011      	beq.n	800a3ba <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	18d0      	adds	r0, r2, r3
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	f7ff fc33 	bl	8009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800a3b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	4413      	add	r3, r2
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3b8:	e7d6      	b.n	800a368 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fd71 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c4:	441a      	add	r2, r3
 800a3c6:	69b9      	ldr	r1, [r7, #24]
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	440b      	add	r3, r1
 800a3cc:	7812      	ldrb	r2, [r2, #0]
 800a3ce:	701a      	strb	r2, [r3, #0]
                j++;
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d8:	3301      	adds	r3, #1
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800a3dc:	e7c4      	b.n	800a368 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	69b9      	ldr	r1, [r7, #24]
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff fd1c 	bl	8009e2c <_ZN12SimpleString19setInternalBufferToEPcj>
 800a3f4:	e004      	b.n	800a400 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff fcca 	bl	8009d90 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800a3fc:	e000      	b.n	800a400 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800a3fe:	bf00      	nop
}
 800a400:	3738      	adds	r7, #56	; 0x38
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	08020f5c 	.word	0x08020f5c

0800a40c <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800a40c:	b590      	push	{r4, r7, lr}
 800a40e:	b089      	sub	sp, #36	; 0x24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800a416:	493b      	ldr	r1, [pc, #236]	; (800a504 <_ZNK12SimpleString9printableEv+0xf8>)
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff fd4e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800a41e:	6838      	ldr	r0, [r7, #0]
 800a420:	f000 f876 	bl	800a510 <_ZNK12SimpleString16getPrintableSizeEv>
 800a424:	4603      	mov	r3, r0
 800a426:	3301      	adds	r3, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff fcde 	bl	8009dec <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800a430:	6838      	ldr	r0, [r7, #0]
 800a432:	f000 f8d9 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a436:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800a43c:	2300      	movs	r3, #0
 800a43e:	61bb      	str	r3, [r7, #24]
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	429a      	cmp	r2, r3
 800a446:	d252      	bcs.n	800a4ee <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	4413      	add	r3, r2
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800a454:	7cfb      	ldrb	r3, [r7, #19]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fb43 	bl	800aae2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d012      	beq.n	800a488 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	18d0      	adds	r0, r2, r3
 800a46a:	7cfb      	ldrb	r3, [r7, #19]
 800a46c:	3b07      	subs	r3, #7
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	461a      	mov	r2, r3
 800a472:	4b25      	ldr	r3, [pc, #148]	; (800a508 <_ZNK12SimpleString9printableEv+0xfc>)
 800a474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a478:	2202      	movs	r2, #2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f7ff fbc7 	bl	8009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	3302      	adds	r3, #2
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	e02e      	b.n	800a4e6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800a488:	7cfb      	ldrb	r3, [r7, #19]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fb15 	bl	800aaba <_ZN12SimpleString9isControlEc>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d01e      	beq.n	800a4d4 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800a496:	7cfa      	ldrb	r2, [r7, #19]
 800a498:	f107 0308 	add.w	r3, r7, #8
 800a49c:	491b      	ldr	r1, [pc, #108]	; (800a50c <_ZNK12SimpleString9printableEv+0x100>)
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fdca 	bl	800b038 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	18d4      	adds	r4, r2, r3
 800a4ac:	f107 0308 	add.w	r3, r7, #8
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 f88d 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f7ff fba6 	bl	8009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800a4c8:	f107 0308 	add.w	r3, r7, #8
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 f8ac 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a4d2:	e008      	b.n	800a4e6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	7cfa      	ldrb	r2, [r7, #19]
 800a4de:	701a      	strb	r2, [r3, #0]
            j++;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	61bb      	str	r3, [r7, #24]
 800a4ec:	e7a8      	b.n	800a440 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]

    return result;
 800a4fa:	bf00      	nop
}
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	3724      	adds	r7, #36	; 0x24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd90      	pop	{r4, r7, pc}
 800a504:	0802101c 	.word	0x0802101c
 800a508:	20000068 	.word	0x20000068
 800a50c:	08021020 	.word	0x08021020

0800a510 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f865 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a51e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800a524:	2300      	movs	r3, #0
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d21e      	bcs.n	800a56e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	4413      	add	r3, r2
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 facf 	bl	800aae2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	3301      	adds	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	e009      	b.n	800a566 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800a552:	7afb      	ldrb	r3, [r7, #11]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fab0 	bl	800aaba <_ZN12SimpleString9isControlEc>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	3303      	adds	r3, #3
 800a564:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	3301      	adds	r3, #1
 800a56a:	613b      	str	r3, [r7, #16]
 800a56c:	e7dc      	b.n	800a528 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800a56e:	697b      	ldr	r3, [r7, #20]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff fcec 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f82c 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a590:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d213      	bcs.n	800a5c6 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff fc7f 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	7819      	ldrb	r1, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	18d4      	adds	r4, r2, r3
 800a5b4:	4608      	mov	r0, r1
 800a5b6:	f7ff fb8a 	bl	8009cce <_ZN12SimpleString7ToLowerEc>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	e7e7      	b.n	800a596 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800a5c6:	bf00      	nop
}
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd90      	pop	{r4, r7, pc}

0800a5d0 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fc62 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff fc56 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff fabd 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 800a5fe:	4603      	mov	r3, r0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ffe9 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bf0c      	ite	eq
 800a61c:	2301      	moveq	r3, #1
 800a61e:	2300      	movne	r3, #0
 800a620:	b2db      	uxtb	r3, r3
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fb90 	bl	8009d58 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800a642:	b590      	push	{r4, r7, lr}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ffbf 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800a652:	4604      	mov	r4, r0
 800a654:	6838      	ldr	r0, [r7, #0]
 800a656:	f7ff ffbb 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4619      	mov	r1, r3
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff fa68 	bl	8009b34 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	bf0c      	ite	eq
 800a66a:	2301      	moveq	r3, #1
 800a66c:	2300      	movne	r3, #0
 800a66e:	b2db      	uxtb	r3, r3
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bd90      	pop	{r4, r7, pc}

0800a678 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800a682:	f107 0308 	add.w	r3, r7, #8
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7ff ff75 	bl	800a578 <_ZNK12SimpleString9lowerCaseEv>
 800a68e:	f107 0310 	add.w	r3, r7, #16
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff ff6f 	bl	800a578 <_ZNK12SimpleString9lowerCaseEv>
 800a69a:	f107 0210 	add.w	r2, r7, #16
 800a69e:	f107 0308 	add.w	r3, r7, #8
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff ffcc 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	461c      	mov	r4, r3
 800a6ae:	f107 0310 	add.w	r3, r7, #16
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7ff ffb9 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a6b8:	f107 0308 	add.w	r3, r7, #8
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff ffb4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a6c2:	4623      	mov	r3, r4
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd90      	pop	{r4, r7, pc}

0800a6cc <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff ffb2 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f083 0301 	eor.w	r3, r3, #1
 800a6e4:	b2db      	uxtb	r3, r3
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	60b9      	str	r1, [r7, #8]
 800a6f8:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800a6fa:	68b8      	ldr	r0, [r7, #8]
 800a6fc:	f7ff fbd1 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a700:	4603      	mov	r3, r0
 800a702:	4619      	mov	r1, r3
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff fbd8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fbc9 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a710:	4603      	mov	r3, r0
 800a712:	4619      	mov	r1, r3
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f817 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    return t;
 800a71a:	bf00      	nop
}
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800a72e:	6838      	ldr	r0, [r7, #0]
 800a730:	f7ff fbb7 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a734:	4603      	mov	r3, r0
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f805 	bl	800a748 <_ZN12SimpleStringpLEPKc>
 800a73e:	4603      	mov	r3, r0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff ff48 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a758:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800a75a:	6838      	ldr	r0, [r7, #0]
 800a75c:	f7ff fa0c 	bl	8009b78 <_ZN12SimpleString6StrLenEPKc>
 800a760:	4603      	mov	r3, r0
 800a762:	3301      	adds	r3, #1
 800a764:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	4413      	add	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff fb97 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a774:	4603      	mov	r3, r0
 800a776:	68f9      	ldr	r1, [r7, #12]
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 f941 	bl	800aa00 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800a77e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	4413      	add	r3, r2
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fa3f 	bl	8009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	68b9      	ldr	r1, [r7, #8]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fb49 	bl	8009e2c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800a79a:	687b      	ldr	r3, [r7, #4]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b08b      	sub	sp, #44	; 0x2c
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff ff18 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	68b8      	ldr	r0, [r7, #8]
 800a7bc:	f7ff ff14 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	429c      	cmp	r4, r3
 800a7c4:	bf8c      	ite	hi
 800a7c6:	2301      	movhi	r3, #1
 800a7c8:	2300      	movls	r3, #0
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d006      	beq.n	800a7de <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800a7d0:	79fb      	ldrb	r3, [r7, #7]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	68f9      	ldr	r1, [r7, #12]
 800a7d6:	68b8      	ldr	r0, [r7, #8]
 800a7d8:	f7ff ffe4 	bl	800a7a4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800a7dc:	e02b      	b.n	800a836 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800a7e6:	68b8      	ldr	r0, [r7, #8]
 800a7e8:	f7ff fefe 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff fefa 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	1ae2      	subs	r2, r4, r3
 800a7f8:	f107 0114 	add.w	r1, r7, #20
 800a7fc:	f107 0320 	add.w	r3, r7, #32
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fb75 	bl	8009ef0 <_ZN12SimpleStringC1EPKcj>
 800a806:	f107 0318 	add.w	r3, r7, #24
 800a80a:	f107 0120 	add.w	r1, r7, #32
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4618      	mov	r0, r3
 800a812:	f7ff ff6c 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800a816:	f107 0318 	add.w	r3, r7, #24
 800a81a:	4619      	mov	r1, r3
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fbb8 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800a822:	f107 0318 	add.w	r3, r7, #24
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff feff 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800a82c:	f107 0320 	add.w	r3, r7, #32
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff fefa 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800a836:	372c      	adds	r7, #44	; 0x2c
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd90      	pop	{r4, r7, pc}

0800a83c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800a84a:	68b8      	ldr	r0, [r7, #8]
 800a84c:	f7ff fecc 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a850:	4603      	mov	r3, r0
 800a852:	3b01      	subs	r3, #1
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	bf8c      	ite	hi
 800a85a:	2301      	movhi	r3, #1
 800a85c:	2300      	movls	r3, #0
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <_ZNK12SimpleString9subStringEjj+0x32>
 800a864:	4919      	ldr	r1, [pc, #100]	; (800a8cc <_ZNK12SimpleString9subStringEjj+0x90>)
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7ff fb27 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800a86c:	e029      	b.n	800a8c2 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f7ff fb17 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a874:	4602      	mov	r2, r0
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	441a      	add	r2, r3
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	4611      	mov	r1, r2
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff fb1a 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800a886:	f107 0310 	add.w	r3, r7, #16
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff feac 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a890:	4602      	mov	r2, r0
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	4293      	cmp	r3, r2
 800a896:	bf34      	ite	cc
 800a898:	2301      	movcc	r3, #1
 800a89a:	2300      	movcs	r3, #0
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]

    return newString;
 800a8ac:	f107 0310 	add.w	r3, r7, #16
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff fb55 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800a8b8:	f107 0310 	add.w	r3, r7, #16
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff feb4 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	0802101c 	.word	0x0802101c

0800a8d0 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	68b9      	ldr	r1, [r7, #8]
 800a8e6:	f7ff ffa9 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
}
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7ff fad0 	bl	8009ea2 <_ZNK12SimpleString9getBufferEv>
 800a902:	4602      	mov	r2, r0
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	4413      	add	r3, r2
 800a908:	781b      	ldrb	r3, [r3, #0]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	461a      	mov	r2, r3
 800a922:	2100      	movs	r1, #0
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f805 	bl	800a934 <_ZNK12SimpleString8findFromEjc>
 800a92a:	4603      	mov	r3, r0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4613      	mov	r3, r2
 800a940:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7ff fe50 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800a948:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	d213      	bcs.n	800a97e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800a956:	6979      	ldr	r1, [r7, #20]
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff ffca 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800a95e:	4603      	mov	r3, r0
 800a960:	461a      	mov	r2, r3
 800a962:	79fb      	ldrb	r3, [r7, #7]
 800a964:	4293      	cmp	r3, r2
 800a966:	bf0c      	ite	eq
 800a968:	2301      	moveq	r3, #1
 800a96a:	2300      	movne	r3, #0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <_ZNK12SimpleString8findFromEjc+0x42>
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	e005      	b.n	800a982 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	3301      	adds	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	e7e7      	b.n	800a94e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800a97e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4611      	mov	r1, r2
 800a998:	461a      	mov	r2, r3
 800a99a:	460b      	mov	r3, r1
 800a99c:	71fb      	strb	r3, [r7, #7]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	68b8      	ldr	r0, [r7, #8]
 800a9a8:	f7ff ffb3 	bl	800a912 <_ZNK12SimpleString4findEc>
 800a9ac:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d104      	bne.n	800a9c0 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800a9b6:	4911      	ldr	r1, [pc, #68]	; (800a9fc <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fa7e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800a9be:	e019      	b.n	800a9f4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800a9c0:	79bb      	ldrb	r3, [r7, #6]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6979      	ldr	r1, [r7, #20]
 800a9c6:	68b8      	ldr	r0, [r7, #8]
 800a9c8:	f7ff ffb4 	bl	800a934 <_ZNK12SimpleString8findFromEjc>
 800a9cc:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d4:	d106      	bne.n	800a9e4 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	68b9      	ldr	r1, [r7, #8]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff ff77 	bl	800a8d0 <_ZNK12SimpleString9subStringEj>
 800a9e2:	e007      	b.n	800a9f4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	f7ff ff24 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
}
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	0802101c 	.word	0x0802101c

0800aa00 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800aa0a:	f240 2275 	movw	r2, #629	; 0x275
 800aa0e:	490a      	ldr	r1, [pc, #40]	; (800aa38 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800aa10:	6838      	ldr	r0, [r7, #0]
 800aa12:	f7fe ffd7 	bl	80099c4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800aa16:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	6879      	ldr	r1, [r7, #4]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff f8f6 	bl	8009c0e <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	08020f5c 	.word	0x08020f5c

0800aa3c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	2b2f      	cmp	r3, #47	; 0x2f
 800aa4a:	d904      	bls.n	800aa56 <_ZN12SimpleString7isDigitEc+0x1a>
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	2b39      	cmp	r3, #57	; 0x39
 800aa50:	d801      	bhi.n	800aa56 <_ZN12SimpleString7isDigitEc+0x1a>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <_ZN12SimpleString7isDigitEc+0x1c>
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	d005      	beq.n	800aa80 <_ZN12SimpleString7isSpaceEc+0x1c>
 800aa74:	79fb      	ldrb	r3, [r7, #7]
 800aa76:	2b08      	cmp	r3, #8
 800aa78:	d904      	bls.n	800aa84 <_ZN12SimpleString7isSpaceEc+0x20>
 800aa7a:	79fb      	ldrb	r3, [r7, #7]
 800aa7c:	2b0d      	cmp	r3, #13
 800aa7e:	d801      	bhi.n	800aa84 <_ZN12SimpleString7isSpaceEc+0x20>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e000      	b.n	800aa86 <_ZN12SimpleString7isSpaceEc+0x22>
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	4603      	mov	r3, r0
 800aa9a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d904      	bls.n	800aaac <_ZN12SimpleString7isUpperEc+0x1a>
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	2b5a      	cmp	r3, #90	; 0x5a
 800aaa6:	d801      	bhi.n	800aaac <_ZN12SimpleString7isUpperEc+0x1a>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e000      	b.n	800aaae <_ZN12SimpleString7isUpperEc+0x1c>
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	4603      	mov	r3, r0
 800aac2:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	2b1f      	cmp	r3, #31
 800aac8:	d902      	bls.n	800aad0 <_ZN12SimpleString9isControlEc+0x16>
 800aaca:	79fb      	ldrb	r3, [r7, #7]
 800aacc:	2b7f      	cmp	r3, #127	; 0x7f
 800aace:	d101      	bne.n	800aad4 <_ZN12SimpleString9isControlEc+0x1a>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e000      	b.n	800aad6 <_ZN12SimpleString9isControlEc+0x1c>
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	4603      	mov	r3, r0
 800aaea:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	2b06      	cmp	r3, #6
 800aaf0:	d904      	bls.n	800aafc <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	2b0d      	cmp	r3, #13
 800aaf6:	d801      	bhi.n	800aafc <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e000      	b.n	800aafe <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
	...

0800ab0c <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <_Z10StringFromb+0x16>
 800ab1e:	4a06      	ldr	r2, [pc, #24]	; (800ab38 <_Z10StringFromb+0x2c>)
 800ab20:	e000      	b.n	800ab24 <_Z10StringFromb+0x18>
 800ab22:	4a06      	ldr	r2, [pc, #24]	; (800ab3c <_Z10StringFromb+0x30>)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4906      	ldr	r1, [pc, #24]	; (800ab40 <_Z10StringFromb+0x34>)
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fa85 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	08021028 	.word	0x08021028
 800ab3c:	08021030 	.word	0x08021030
 800ab40:	08021038 	.word	0x08021038

0800ab44 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff f9b2 	bl	8009eba <_ZN12SimpleStringC1EPKc>
}
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800ab60:	b590      	push	{r4, r7, lr}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <_Z25PrintableStringFromOrNullPKc+0x30>
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff ffe3 	bl	800ab44 <_Z10StringFromPKc>
 800ab7e:	2401      	movs	r4, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f107 0208 	add.w	r2, r7, #8
 800ab86:	4611      	mov	r1, r2
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff fc3f 	bl	800a40c <_ZNK12SimpleString9printableEv>
 800ab8e:	e004      	b.n	800ab9a <_Z25PrintableStringFromOrNullPKc+0x3a>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4908      	ldr	r1, [pc, #32]	; (800abb4 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff ffd5 	bl	800ab44 <_Z10StringFromPKc>
 800ab9a:	2c00      	cmp	r4, #0
 800ab9c:	d004      	beq.n	800aba8 <_Z25PrintableStringFromOrNullPKc+0x48>
 800ab9e:	f107 0308 	add.w	r3, r7, #8
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fd41 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800aba8:	bf00      	nop
}
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd90      	pop	{r4, r7, pc}
 800abb2:	bf00      	nop
 800abb4:	0802103c 	.word	0x0802103c

0800abb8 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	4904      	ldr	r1, [pc, #16]	; (800abd8 <_Z10StringFromi+0x20>)
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fa35 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	08021044 	.word	0x08021044

0800abdc <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	4904      	ldr	r1, [pc, #16]	; (800abfc <_Z10StringFroml+0x20>)
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fa23 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	08021048 	.word	0x08021048

0800ac00 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800ac0a:	f107 0308 	add.w	r3, r7, #8
 800ac0e:	4910      	ldr	r1, [pc, #64]	; (800ac50 <_Z10StringFromPKv+0x50>)
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff f952 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800ac16:	f107 0310 	add.w	r3, r7, #16
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f9a1 	bl	800af64 <_Z13HexStringFromPKv>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f107 0210 	add.w	r2, r7, #16
 800ac28:	f107 0108 	add.w	r1, r7, #8
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fd5e 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800ac32:	f107 0310 	add.w	r3, r7, #16
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fcf7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ac3c:	f107 0308 	add.w	r3, r7, #8
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fcf2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ac46:	bf00      	nop
}
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	0802104c 	.word	0x0802104c

0800ac54 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	4910      	ldr	r1, [pc, #64]	; (800aca4 <_Z10StringFromPFvvE+0x50>)
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff f928 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800ac6a:	f107 0310 	add.w	r3, r7, #16
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 f98b 	bl	800af8c <_Z13HexStringFromPFvvE>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f107 0210 	add.w	r2, r7, #16
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff fd34 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800ac86:	f107 0310 	add.w	r3, r7, #16
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff fccd 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7ff fcc8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ac9a:	bf00      	nop
}
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	0802104c 	.word	0x0802104c

0800aca8 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	4904      	ldr	r1, [pc, #16]	; (800acc8 <_Z13HexStringFroml+0x20>)
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 f9bd 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	08021050 	.word	0x08021050

0800accc <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	4904      	ldr	r1, [pc, #16]	; (800acec <_Z13HexStringFromi+0x20>)
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f9ab 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	08021054 	.word	0x08021054

0800acf0 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800acfc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4912      	ldr	r1, [pc, #72]	; (800ad4c <_Z13HexStringFroma+0x5c>)
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 f997 	bl	800b038 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800ad0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	da16      	bge.n	800ad40 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff fc68 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800ad18:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	1e9a      	subs	r2, r3, #2
 800ad1e:	f107 030c 	add.w	r3, r7, #12
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff fdd3 	bl	800a8d0 <_ZNK12SimpleString9subStringEj>
 800ad2a:	f107 030c 	add.w	r3, r7, #12
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff f92e 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800ad36:	f107 030c 	add.w	r3, r7, #12
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff fc75 	bl	800a62a <_ZN12SimpleStringD1Ev>
    }
    return result;
 800ad40:	bf00      	nop
}
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	08021054 	.word	0x08021054

0800ad50 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	4904      	ldr	r1, [pc, #16]	; (800ad70 <_Z13HexStringFromm+0x20>)
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 f969 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	08021050 	.word	0x08021050

0800ad74 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	4904      	ldr	r1, [pc, #16]	; (800ad94 <_Z13HexStringFromj+0x20>)
 800ad84:	4618      	mov	r0, r3
 800ad86:	f000 f957 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	08021054 	.word	0x08021054

0800ad98 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff ff8f 	bl	800accc <_Z13HexStringFromi>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f107 0208 	add.w	r2, r7, #8
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 f87e 	bl	800aeb8 <_Z26BracketsFormattedHexString12SimpleString>
 800adbc:	f107 0308 	add.w	r3, r7, #8
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fc32 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800adc6:	bf00      	nop
}
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800adda:	f107 0308 	add.w	r3, r7, #8
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7ff ffc7 	bl	800ad74 <_Z13HexStringFromj>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f107 0208 	add.w	r2, r7, #8
 800adec:	4611      	mov	r1, r2
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f862 	bl	800aeb8 <_Z26BracketsFormattedHexString12SimpleString>
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff fc16 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800adfe:	bf00      	nop
}
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ae12:	f107 0308 	add.w	r3, r7, #8
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff ff45 	bl	800aca8 <_Z13HexStringFroml>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f107 0208 	add.w	r2, r7, #8
 800ae24:	4611      	mov	r1, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 f846 	bl	800aeb8 <_Z26BracketsFormattedHexString12SimpleString>
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff fbfa 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ae36:	bf00      	nop
}
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff ff7d 	bl	800ad50 <_Z13HexStringFromm>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f107 0208 	add.w	r2, r7, #8
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f82a 	bl	800aeb8 <_Z26BracketsFormattedHexString12SimpleString>
 800ae64:	f107 0308 	add.w	r3, r7, #8
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff fbde 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ae6e:	bf00      	nop
}
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff ff2e 	bl	800acf0 <_Z13HexStringFroma>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f107 0208 	add.w	r2, r7, #8
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f80b 	bl	800aeb8 <_Z26BracketsFormattedHexString12SimpleString>
 800aea2:	f107 0308 	add.w	r3, r7, #8
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff fbbf 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800aeac:	bf00      	nop
}
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800aec2:	f107 0310 	add.w	r3, r7, #16
 800aec6:	4917      	ldr	r1, [pc, #92]	; (800af24 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe fff6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800aece:	f107 0308 	add.w	r3, r7, #8
 800aed2:	f107 0110 	add.w	r1, r7, #16
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff fc08 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800aede:	f107 0318 	add.w	r3, r7, #24
 800aee2:	4911      	ldr	r1, [pc, #68]	; (800af28 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fe ffe8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f107 0218 	add.w	r2, r7, #24
 800aef0:	f107 0108 	add.w	r1, r7, #8
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff fbfa 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800aefa:	f107 0318 	add.w	r3, r7, #24
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff fb93 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800af04:	f107 0308 	add.w	r3, r7, #8
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fb8e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800af0e:	f107 0310 	add.w	r3, r7, #16
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff fb89 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800af18:	bf00      	nop
}
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	08021058 	.word	0x08021058
 800af28:	0802105c 	.word	0x0802105c

0800af2c <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800af34:	1d3b      	adds	r3, r7, #4
 800af36:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800af50:	1d3b      	adds	r3, r7, #4
 800af52:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800af6e:	6838      	ldr	r0, [r7, #0]
 800af70:	f7ff ffdc 	bl	800af2c <_ZL25convertPointerToLongValuePKv>
 800af74:	4602      	mov	r2, r0
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4903      	ldr	r1, [pc, #12]	; (800af88 <_Z13HexStringFromPKv+0x24>)
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 f85c 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	08021050 	.word	0x08021050

0800af8c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800af96:	6838      	ldr	r0, [r7, #0]
 800af98:	f7ff ffd6 	bl	800af48 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800af9c:	4602      	mov	r2, r0
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4903      	ldr	r1, [pc, #12]	; (800afb0 <_Z13HexStringFromPFvvE+0x24>)
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 f848 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	08021050 	.word	0x08021050

0800afb4 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af02      	add	r7, sp, #8
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	ed87 0b00 	vstr	d0, [r7]
 800afc0:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800afc2:	4b18      	ldr	r3, [pc, #96]	; (800b024 <_Z10StringFromdi+0x70>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	ed97 0b00 	vldr	d0, [r7]
 800afca:	4798      	blx	r3
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bf14      	ite	ne
 800afd2:	2301      	movne	r3, #1
 800afd4:	2300      	moveq	r3, #0
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800afdc:	4912      	ldr	r1, [pc, #72]	; (800b028 <_Z10StringFromdi+0x74>)
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7fe ff6b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800afe4:	e01a      	b.n	800b01c <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800afe6:	4b11      	ldr	r3, [pc, #68]	; (800b02c <_Z10StringFromdi+0x78>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	ed97 0b00 	vldr	d0, [r7]
 800afee:	4798      	blx	r3
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bf14      	ite	ne
 800aff6:	2301      	movne	r3, #1
 800aff8:	2300      	moveq	r3, #0
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	d004      	beq.n	800b00a <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800b000:	490b      	ldr	r1, [pc, #44]	; (800b030 <_Z10StringFromdi+0x7c>)
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7fe ff59 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800b008:	e008      	b.n	800b01c <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b010:	e9cd 2300 	strd	r2, r3, [sp]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	4907      	ldr	r1, [pc, #28]	; (800b034 <_Z10StringFromdi+0x80>)
 800b018:	f000 f80e 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	200000e4 	.word	0x200000e4
 800b028:	08021090 	.word	0x08021090
 800b02c:	200000e8 	.word	0x200000e8
 800b030:	080210a4 	.word	0x080210a4
 800b034:	080210b4 	.word	0x080210b4

0800b038 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800b038:	b40e      	push	{r1, r2, r3}
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b087      	sub	sp, #28
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800b042:	4910      	ldr	r1, [pc, #64]	; (800b084 <_Z16StringFromFormatPKcz+0x4c>)
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7fe ff38 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800b04a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b04e:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	68fa      	ldr	r2, [r7, #12]
 800b056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 f839 	bl	800b0d0 <_Z17VStringFromFormatPKcSt9__va_list>
 800b05e:	f107 0310 	add.w	r3, r7, #16
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7fe ff94 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800b06a:	f107 0310 	add.w	r3, r7, #16
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fadb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800b074:	bf00      	nop
}
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b080:	b003      	add	sp, #12
 800b082:	4770      	bx	lr
 800b084:	0802101c 	.word	0x0802101c

0800b088 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	4904      	ldr	r1, [pc, #16]	; (800b0a8 <_Z10StringFromj+0x20>)
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff ffcd 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	080210c0 	.word	0x080210c0

0800b0ac <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	4904      	ldr	r1, [pc, #16]	; (800b0cc <_Z10StringFromm+0x20>)
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff ffbb 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	080210c4 	.word	0x080210c4

0800b0d0 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b0a7      	sub	sp, #156	; 0x9c
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800b0e0:	492e      	ldr	r1, [pc, #184]	; (800b19c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f7fe fee9 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800b0e8:	4b2d      	ldr	r3, [pc, #180]	; (800b1a0 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800b0ea:	681c      	ldr	r4, [r3, #0]
 800b0ec:	f107 0014 	add.w	r0, r7, #20
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	2164      	movs	r1, #100	; 0x64
 800b0f6:	47a0      	blx	r4
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800b0fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b102:	2b63      	cmp	r3, #99	; 0x63
 800b104:	d813      	bhi.n	800b12e <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800b106:	f107 0214 	add.w	r2, r7, #20
 800b10a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b10e:	4611      	mov	r1, r2
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fed2 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800b116:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe ff38 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800b122:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff fa7f 	bl	800a62a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800b12c:	e031      	b.n	800b192 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800b12e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b132:	3301      	adds	r3, #1
 800b134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800b138:	f240 32c3 	movw	r2, #963	; 0x3c3
 800b13c:	4919      	ldr	r1, [pc, #100]	; (800b1a4 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800b13e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b142:	f7fe fc3f 	bl	80099c4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b146:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800b14a:	4b15      	ldr	r3, [pc, #84]	; (800b1a0 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800b14c:	681c      	ldr	r4, [r3, #0]
 800b14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b156:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b15a:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800b15c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b160:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe fea8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800b16a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b16e:	4619      	mov	r1, r3
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7fe ff0e 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800b176:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fa55 	bl	800a62a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800b180:	f240 33c7 	movw	r3, #967	; 0x3c7
 800b184:	4a07      	ldr	r2, [pc, #28]	; (800b1a4 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800b186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b18a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b18e:	f7fe fc2d 	bl	80099ec <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800b192:	bf00      	nop
}
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	379c      	adds	r7, #156	; 0x9c
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	0802101c 	.word	0x0802101c
 800b1a0:	200000ac 	.word	0x200000ac
 800b1a4:	08020f5c 	.word	0x08020f5c

0800b1a8 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	; 0x28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800b1b4:	491f      	ldr	r1, [pc, #124]	; (800b234 <_Z16StringFromBinaryPKhj+0x8c>)
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7fe fe7f 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800b1bc:	2300      	movs	r3, #0
 800b1be:	627b      	str	r3, [r7, #36]	; 0x24
 800b1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d219      	bcs.n	800b1fc <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	4413      	add	r3, r2
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f107 0314 	add.w	r3, r7, #20
 800b1d6:	4918      	ldr	r1, [pc, #96]	; (800b238 <_Z16StringFromBinaryPKhj+0x90>)
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff2d 	bl	800b038 <_Z16StringFromFormatPKcz>
 800b1de:	f107 0314 	add.w	r3, r7, #20
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff fa9d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800b1ea:	f107 0314 	add.w	r3, r7, #20
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7ff fa1b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1fa:	e7e1      	b.n	800b1c0 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f7ff f9f3 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800b202:	4603      	mov	r3, r0
 800b204:	3b01      	subs	r3, #1
 800b206:	f107 001c 	add.w	r0, r7, #28
 800b20a:	2200      	movs	r2, #0
 800b20c:	68f9      	ldr	r1, [r7, #12]
 800b20e:	f7ff fb15 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
 800b212:	f107 031c 	add.w	r3, r7, #28
 800b216:	4619      	mov	r1, r3
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7fe feba 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800b21e:	f107 031c 	add.w	r3, r7, #28
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fa01 	bl	800a62a <_ZN12SimpleStringD1Ev>

    return result;
 800b228:	bf00      	nop
}
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	3728      	adds	r7, #40	; 0x28
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	0802101c 	.word	0x0802101c
 800b238:	080210c8 	.word	0x080210c8

0800b23c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d006      	beq.n	800b25c <_Z22StringFromBinaryOrNullPKhj+0x20>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff ffa7 	bl	800b1a8 <_Z16StringFromBinaryPKhj>
 800b25a:	e004      	b.n	800b266 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4904      	ldr	r1, [pc, #16]	; (800b270 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff fc6f 	bl	800ab44 <_Z10StringFromPKc>
}
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	0802103c 	.word	0x0802103c

0800b274 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	4913      	ldr	r1, [pc, #76]	; (800b2d4 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fed6 	bl	800b038 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b80      	cmp	r3, #128	; 0x80
 800b290:	bf28      	it	cs
 800b292:	2380      	movcs	r3, #128	; 0x80
 800b294:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800b296:	f107 0314 	add.w	r3, r7, #20
 800b29a:	69fa      	ldr	r2, [r7, #28]
 800b29c:	68b9      	ldr	r1, [r7, #8]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff ffcc 	bl	800b23c <_Z22StringFromBinaryOrNullPKhj>
 800b2a4:	f107 0314 	add.w	r3, r7, #20
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff fa3a 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800b2b0:	f107 0314 	add.w	r3, r7, #20
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff f9b8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d903      	bls.n	800b2ca <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800b2c2:	4905      	ldr	r1, [pc, #20]	; (800b2d8 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff fa3f 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800b2ca:	bf00      	nop
}
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	080210d0 	.word	0x080210d0
 800b2d8:	080210ec 	.word	0x080210ec

0800b2dc <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d006      	beq.n	800b2fc <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff ffbd 	bl	800b274 <_Z24StringFromBinaryWithSizePKhj>
 800b2fa:	e004      	b.n	800b306 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4904      	ldr	r1, [pc, #16]	; (800b310 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fc1f 	bl	800ab44 <_Z10StringFromPKc>
}
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	0802103c 	.word	0x0802103c

0800b314 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b088      	sub	sp, #32
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800b322:	4925      	ldr	r1, [pc, #148]	; (800b3b8 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7fe fdc8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b04      	cmp	r3, #4
 800b32e:	d802      	bhi.n	800b336 <_Z20StringFromMaskedBitsmmj+0x22>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	e000      	b.n	800b338 <_Z20StringFromMaskedBitsmmj+0x24>
 800b336:	2320      	movs	r3, #32
 800b338:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	2201      	movs	r2, #1
 800b340:	fa02 f303 	lsl.w	r3, r2, r3
 800b344:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800b346:	2300      	movs	r3, #0
 800b348:	61fb      	str	r3, [r7, #28]
 800b34a:	69fa      	ldr	r2, [r7, #28]
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d22d      	bcs.n	800b3ae <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	4013      	ands	r3, r2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00c      	beq.n	800b376 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	4013      	ands	r3, r2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <_Z20StringFromMaskedBitsmmj+0x56>
 800b366:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <_Z20StringFromMaskedBitsmmj+0xa8>)
 800b368:	e000      	b.n	800b36c <_Z20StringFromMaskedBitsmmj+0x58>
 800b36a:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <_Z20StringFromMaskedBitsmmj+0xac>)
 800b36c:	4619      	mov	r1, r3
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f7ff f9ea 	bl	800a748 <_ZN12SimpleStringpLEPKc>
 800b374:	e003      	b.n	800b37e <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800b376:	4913      	ldr	r1, [pc, #76]	; (800b3c4 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff f9e5 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	2b07      	cmp	r3, #7
 800b386:	d108      	bne.n	800b39a <_Z20StringFromMaskedBitsmmj+0x86>
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d003      	beq.n	800b39a <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800b392:	490d      	ldr	r1, [pc, #52]	; (800b3c8 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7ff f9d7 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	e7cd      	b.n	800b34a <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800b3ae:	bf00      	nop
}
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	0802101c 	.word	0x0802101c
 800b3bc:	080210f4 	.word	0x080210f4
 800b3c0:	080210f8 	.word	0x080210f8
 800b3c4:	080210fc 	.word	0x080210fc
 800b3c8:	08021100 	.word	0x08021100

0800b3cc <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4b18      	ldr	r3, [pc, #96]	; (800b43c <_Z23StringFromOrdinalNumberj+0x70>)
 800b3da:	fba3 1302 	umull	r1, r3, r3, r2
 800b3de:	08d9      	lsrs	r1, r3, #3
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b0a      	cmp	r3, #10
 800b3f0:	d905      	bls.n	800b3fe <_Z23StringFromOrdinalNumberj+0x32>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b0d      	cmp	r3, #13
 800b3f6:	d802      	bhi.n	800b3fe <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800b3f8:	4b11      	ldr	r3, [pc, #68]	; (800b440 <_Z23StringFromOrdinalNumberj+0x74>)
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	e013      	b.n	800b426 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b03      	cmp	r3, #3
 800b402:	d102      	bne.n	800b40a <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800b404:	4b0f      	ldr	r3, [pc, #60]	; (800b444 <_Z23StringFromOrdinalNumberj+0x78>)
 800b406:	60fb      	str	r3, [r7, #12]
 800b408:	e00d      	b.n	800b426 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d102      	bne.n	800b416 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800b410:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <_Z23StringFromOrdinalNumberj+0x7c>)
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	e007      	b.n	800b426 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d102      	bne.n	800b422 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800b41c:	4b0b      	ldr	r3, [pc, #44]	; (800b44c <_Z23StringFromOrdinalNumberj+0x80>)
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e001      	b.n	800b426 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800b422:	4b07      	ldr	r3, [pc, #28]	; (800b440 <_Z23StringFromOrdinalNumberj+0x74>)
 800b424:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	4908      	ldr	r1, [pc, #32]	; (800b450 <_Z23StringFromOrdinalNumberj+0x84>)
 800b42e:	f7ff fe03 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	cccccccd 	.word	0xcccccccd
 800b440:	08021104 	.word	0x08021104
 800b444:	08021108 	.word	0x08021108
 800b448:	0802110c 	.word	0x0802110c
 800b44c:	08021110 	.word	0x08021110
 800b450:	08021114 	.word	0x08021114

0800b454 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3304      	adds	r3, #4
 800b460:	4907      	ldr	r1, [pc, #28]	; (800b480 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fd29 	bl	8009eba <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	60da      	str	r2, [r3, #12]
}
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	0802101c 	.word	0x0802101c

0800b484 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800b484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d01e      	beq.n	800b4d4 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3b04      	subs	r3, #4
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	18d4      	adds	r4, r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429c      	cmp	r4, r3
 800b4ac:	d004      	beq.n	800b4b8 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800b4ae:	3c08      	subs	r4, #8
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f7ff f8ba 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800b4b6:	e7f6      	b.n	800b4a6 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f1a3 0208 	sub.w	r2, r3, #8
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	f7fc f976 	bl	80077c0 <_ZdaPvj>

    size_ = _size;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68dc      	ldr	r4, [r3, #12]
 800b4de:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800b4e2:	d202      	bcs.n	800b4ea <_ZN22SimpleStringCollection8allocateEj+0x66>
 800b4e4:	1c63      	adds	r3, r4, #1
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	e001      	b.n	800b4ee <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800b4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ee:	f240 4227 	movw	r2, #1063	; 0x427
 800b4f2:	4910      	ldr	r1, [pc, #64]	; (800b534 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fc f941 	bl	800777c <_ZnajPKci>
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	1d2b      	adds	r3, r5, #4
 800b4fe:	3b04      	subs	r3, #4
 800b500:	2208      	movs	r2, #8
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	1d2b      	adds	r3, r5, #4
 800b506:	601c      	str	r4, [r3, #0]
 800b508:	f105 0308 	add.w	r3, r5, #8
 800b50c:	1e62      	subs	r2, r4, #1
 800b50e:	4614      	mov	r4, r2
 800b510:	461e      	mov	r6, r3
 800b512:	2c00      	cmp	r4, #0
 800b514:	db06      	blt.n	800b524 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800b516:	4908      	ldr	r1, [pc, #32]	; (800b538 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800b518:	4630      	mov	r0, r6
 800b51a:	f7fe fcce 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800b51e:	3608      	adds	r6, #8
 800b520:	3c01      	subs	r4, #1
 800b522:	e7f6      	b.n	800b512 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800b524:	f105 0208 	add.w	r2, r5, #8
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	601a      	str	r2, [r3, #0]
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b534:	08020f5c 	.word	0x08020f5c
 800b538:	0802101c 	.word	0x0802101c

0800b53c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800b53c:	b590      	push	{r4, r7, lr}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01e      	beq.n	800b58a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3b04      	subs	r3, #4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	18d4      	adds	r4, r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	429c      	cmp	r4, r3
 800b562:	d004      	beq.n	800b56e <_ZN22SimpleStringCollectionD1Ev+0x32>
 800b564:	3c08      	subs	r4, #8
 800b566:	4620      	mov	r0, r4
 800b568:	f7ff f85f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800b56c:	e7f6      	b.n	800b55c <_ZN22SimpleStringCollectionD1Ev+0x20>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f1a3 0208 	sub.w	r2, r3, #8
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3b04      	subs	r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3301      	adds	r3, #1
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7fc f91b 	bl	80077c0 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff f84b 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4618      	mov	r0, r3
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd90      	pop	{r4, r7, pc}

0800b59e <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
    return size_;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68db      	ldr	r3, [r3, #12]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
	...

0800b5b8 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d315      	bcc.n	800b5f8 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	1d1c      	adds	r4, r3, #4
 800b5d0:	f107 0308 	add.w	r3, r7, #8
 800b5d4:	490d      	ldr	r1, [pc, #52]	; (800b60c <_ZN22SimpleStringCollectionixEj+0x54>)
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fc6f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800b5dc:	f107 0308 	add.w	r3, r7, #8
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f7fe fcd5 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800b5e8:	f107 0308 	add.w	r3, r7, #8
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff f81c 	bl	800a62a <_ZN12SimpleStringD1Ev>
        return empty_;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	e004      	b.n	800b602 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	4413      	add	r3, r2
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	0802101c 	.word	0x0802101c

0800b610 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fa fb88 	bl	8005d30 <_ZN17ConsoleTestOutputC1Ev>
 800b620:	4a08      	ldr	r2, [pc, #32]	; (800b644 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	611a      	str	r2, [r3, #16]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3314      	adds	r3, #20
 800b630:	4905      	ldr	r1, [pc, #20]	; (800b648 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fc41 	bl	8009eba <_ZN12SimpleStringC1EPKc>
{
}
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	080241dc 	.word	0x080241dc
 800b648:	0802111c 	.word	0x0802111c

0800b64c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	4a08      	ldr	r2, [pc, #32]	; (800b678 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3314      	adds	r3, #20
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe ffe3 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	f7fa fb74 	bl	8005d54 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	080241dc 	.word	0x080241dc

0800b67c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
}
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff ffe1 	bl	800b64c <_ZN18TeamCityTestOutputD1Ev>
 800b68a:	211c      	movs	r1, #28
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7fc f865 	bl	800775c <_ZdlPvj>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	332c      	adds	r3, #44	; 0x2c
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	492b      	ldr	r1, [pc, #172]	; (800b760 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800b6b6:	f107 0308 	add.w	r3, r7, #8
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f004 fdf7 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800b6c2:	f107 0308 	add.w	r3, r7, #8
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe ff82 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f919 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b6d6:	f107 0308 	add.w	r3, r7, #8
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe ffa5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	332c      	adds	r3, #44	; 0x2c
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	491e      	ldr	r1, [pc, #120]	; (800b764 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
    if (!test.willRun()) {
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3318      	adds	r3, #24
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6838      	ldr	r0, [r7, #0]
 800b6fa:	4798      	blx	r3
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f083 0301 	eor.w	r3, r3, #1
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d024      	beq.n	800b752 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	332c      	adds	r3, #44	; 0x2c
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4915      	ldr	r1, [pc, #84]	; (800b768 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800b714:	4610      	mov	r0, r2
 800b716:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	4618      	mov	r0, r3
 800b720:	f004 fdc6 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800b724:	f107 0310 	add.w	r3, r7, #16
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe ff51 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800b72e:	4603      	mov	r3, r0
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8e8 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b738:	f107 0310 	add.w	r3, r7, #16
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe ff74 	bl	800a62a <_ZN12SimpleStringD1Ev>
        print("']\n");
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	332c      	adds	r3, #44	; 0x2c
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4905      	ldr	r1, [pc, #20]	; (800b764 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800b74e:	4610      	mov	r0, r2
 800b750:	4798      	blx	r3
    }
    currtest_ = &test;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	611a      	str	r2, [r3, #16]
}
 800b758:	bf00      	nop
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	08021120 	.word	0x08021120
 800b764:	08021140 	.word	0x08021140
 800b768:	08021144 	.word	0x08021144

0800b76c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b76c:	b5b0      	push	{r4, r5, r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d03b      	beq.n	800b7f6 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	332c      	adds	r3, #44	; 0x2c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	491d      	ldr	r1, [pc, #116]	; (800b800 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800b78a:	4610      	mov	r0, r2
 800b78c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691a      	ldr	r2, [r3, #16]
 800b792:	f107 0308 	add.w	r3, r7, #8
 800b796:	4611      	mov	r1, r2
 800b798:	4618      	mov	r0, r3
 800b79a:	f004 fd89 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe ff14 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f8ab 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b7b2:	f107 0308 	add.w	r3, r7, #8
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe ff37 	bl	800a62a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	332c      	adds	r3, #44	; 0x2c
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	490f      	ldr	r1, [pc, #60]	; (800b804 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800b7cc:	687d      	ldr	r5, [r7, #4]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3334      	adds	r3, #52	; 0x34
 800b7d4:	681c      	ldr	r4, [r3, #0]
 800b7d6:	6838      	ldr	r0, [r7, #0]
 800b7d8:	f004 fa0a 	bl	800fbf0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	47a0      	blx	r4
    print("']\n");
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	332c      	adds	r3, #44	; 0x2c
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4906      	ldr	r1, [pc, #24]	; (800b808 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4798      	blx	r3
 800b7f4:	e000      	b.n	800b7f8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800b7f6:	bf00      	nop
}
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b7fe:	bf00      	nop
 800b800:	08021164 	.word	0x08021164
 800b804:	08021184 	.word	0x08021184
 800b808:	08021140 	.word	0x08021140

0800b80c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f103 0414 	add.w	r4, r3, #20
 800b81c:	f107 0308 	add.w	r3, r7, #8
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	f004 fd53 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800b828:	f107 0308 	add.w	r3, r7, #8
 800b82c:	4619      	mov	r1, r3
 800b82e:	4620      	mov	r0, r4
 800b830:	f7fe fbaf 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800b834:	f107 0308 	add.w	r3, r7, #8
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe fef6 	bl	800a62a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	332c      	adds	r3, #44	; 0x2c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	490c      	ldr	r1, [pc, #48]	; (800b87c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800b84a:	4610      	mov	r0, r2
 800b84c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	3314      	adds	r3, #20
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe febc 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800b858:	4603      	mov	r3, r0
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f853 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	332c      	adds	r3, #44	; 0x2c
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4904      	ldr	r1, [pc, #16]	; (800b880 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800b86e:	4610      	mov	r0, r2
 800b870:	4798      	blx	r3
}
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	bd90      	pop	{r4, r7, pc}
 800b87a:	bf00      	nop
 800b87c:	08021194 	.word	0x08021194
 800b880:	08021140 	.word	0x08021140

0800b884 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800b884:	b590      	push	{r4, r7, lr}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f103 0414 	add.w	r4, r3, #20
 800b894:	f107 0308 	add.w	r3, r7, #8
 800b898:	4918      	ldr	r1, [pc, #96]	; (800b8fc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fb0d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800b8a0:	f107 0308 	add.w	r3, r7, #8
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f7fe fecb 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461c      	mov	r4, r3
 800b8b0:	f107 0308 	add.w	r3, r7, #8
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fe feb8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	d11a      	bne.n	800b8f4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	332c      	adds	r3, #44	; 0x2c
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	490d      	ldr	r1, [pc, #52]	; (800b900 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	3314      	adds	r3, #20
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe fe7c 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f813 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	332c      	adds	r3, #44	; 0x2c
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4905      	ldr	r1, [pc, #20]	; (800b904 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4798      	blx	r3
 800b8f2:	e000      	b.n	800b8f6 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800b8f4:	bf00      	nop
}
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd90      	pop	{r4, r7, pc}
 800b8fc:	0802111c 	.word	0x0802111c
 800b900:	080211b8 	.word	0x080211b8
 800b904:	08021140 	.word	0x08021140

0800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
    while (*s) {
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d03f      	beq.n	800b99a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b27      	cmp	r3, #39	; 0x27
 800b920:	d00b      	beq.n	800b93a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b7c      	cmp	r3, #124	; 0x7c
 800b928:	d007      	beq.n	800b93a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b5b      	cmp	r3, #91	; 0x5b
 800b930:	d003      	beq.n	800b93a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	2b5d      	cmp	r3, #93	; 0x5d
 800b938:	d107      	bne.n	800b94a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800b93a:	237c      	movs	r3, #124	; 0x7c
 800b93c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	73bb      	strb	r3, [r7, #14]
 800b948:	e01a      	b.n	800b980 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b0d      	cmp	r3, #13
 800b950:	d106      	bne.n	800b960 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800b952:	237c      	movs	r3, #124	; 0x7c
 800b954:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800b956:	2372      	movs	r3, #114	; 0x72
 800b958:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73bb      	strb	r3, [r7, #14]
 800b95e:	e00f      	b.n	800b980 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b0a      	cmp	r3, #10
 800b966:	d106      	bne.n	800b976 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800b968:	237c      	movs	r3, #124	; 0x7c
 800b96a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800b96c:	236e      	movs	r3, #110	; 0x6e
 800b96e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	73bb      	strb	r3, [r7, #14]
 800b974:	e004      	b.n	800b980 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3328      	adds	r3, #40	; 0x28
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f107 010c 	add.w	r1, r7, #12
 800b98e:	4610      	mov	r0, r2
 800b990:	4798      	blx	r3
        s++;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	3301      	adds	r3, #1
 800b996:	603b      	str	r3, [r7, #0]
    while (*s) {
 800b998:	e7bb      	b.n	800b912 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800b9a4:	b5b0      	push	{r4, r5, r7, lr}
 800b9a6:	b08a      	sub	sp, #40	; 0x28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	332c      	adds	r3, #44	; 0x2c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4968      	ldr	r1, [pc, #416]	; (800bb5c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3310      	adds	r3, #16
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f107 0208 	add.w	r2, r7, #8
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	4798      	blx	r3
 800b9d0:	f107 0308 	add.w	r3, r7, #8
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fdfb 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff ff92 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b9e4:	f107 0308 	add.w	r3, r7, #8
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe fe1e 	bl	800a62a <_ZN12SimpleStringD1Ev>
    print("' message='");
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	332c      	adds	r3, #44	; 0x2c
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4959      	ldr	r1, [pc, #356]	; (800bb60 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800b9fe:	6838      	ldr	r0, [r7, #0]
 800ba00:	f000 fa15 	bl	800be2e <_ZNK11TestFailure17isOutsideTestFileEv>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d105      	bne.n	800ba16 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800ba0a:	6838      	ldr	r0, [r7, #0]
 800ba0c:	f000 fa21 	bl	800be52 <_ZNK11TestFailure18isInHelperFunctionEv>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d042      	beq.n	800baa6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	332c      	adds	r3, #44	; 0x2c
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	494e      	ldr	r1, [pc, #312]	; (800bb64 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800ba30:	687d      	ldr	r5, [r7, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	332c      	adds	r3, #44	; 0x2c
 800ba38:	681c      	ldr	r4, [r3, #0]
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	331c      	adds	r3, #28
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f107 0210 	add.w	r2, r7, #16
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
 800ba4c:	f107 0310 	add.w	r3, r7, #16
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe fdbd 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800ba56:	4603      	mov	r3, r0
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	47a0      	blx	r4
 800ba5e:	f107 0310 	add.w	r3, r7, #16
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe fde1 	bl	800a62a <_ZN12SimpleStringD1Ev>
        print(":");
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	332c      	adds	r3, #44	; 0x2c
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	493d      	ldr	r1, [pc, #244]	; (800bb68 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800ba74:	4610      	mov	r0, r2
 800ba76:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800ba78:	687d      	ldr	r5, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3334      	adds	r3, #52	; 0x34
 800ba80:	681c      	ldr	r4, [r3, #0]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3320      	adds	r3, #32
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6838      	ldr	r0, [r7, #0]
 800ba8c:	4798      	blx	r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	4619      	mov	r1, r3
 800ba92:	4628      	mov	r0, r5
 800ba94:	47a0      	blx	r4
        print("): ");
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	332c      	adds	r3, #44	; 0x2c
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4932      	ldr	r1, [pc, #200]	; (800bb6c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800baa2:	4610      	mov	r0, r2
 800baa4:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3308      	adds	r3, #8
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f107 0218 	add.w	r2, r7, #24
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	4610      	mov	r0, r2
 800bab6:	4798      	blx	r3
 800bab8:	f107 0318 	add.w	r3, r7, #24
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fd87 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800bac2:	4603      	mov	r3, r0
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff ff1e 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bacc:	f107 0318 	add.w	r3, r7, #24
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe fdaa 	bl	800a62a <_ZN12SimpleStringD1Ev>
    print(":");
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	332c      	adds	r3, #44	; 0x2c
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4921      	ldr	r1, [pc, #132]	; (800bb68 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800bae2:	4610      	mov	r0, r2
 800bae4:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800bae6:	687d      	ldr	r5, [r7, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	3334      	adds	r3, #52	; 0x34
 800baee:	681c      	ldr	r4, [r3, #0]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3314      	adds	r3, #20
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6838      	ldr	r0, [r7, #0]
 800bafa:	4798      	blx	r3
 800bafc:	4603      	mov	r3, r0
 800bafe:	4619      	mov	r1, r3
 800bb00:	4628      	mov	r0, r5
 800bb02:	47a0      	blx	r4

    print("' details='");
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	332c      	adds	r3, #44	; 0x2c
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4918      	ldr	r1, [pc, #96]	; (800bb70 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800bb10:	4610      	mov	r0, r2
 800bb12:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3318      	adds	r3, #24
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f107 0220 	add.w	r2, r7, #32
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	4610      	mov	r0, r2
 800bb24:	4798      	blx	r3
 800bb26:	f107 0320 	add.w	r3, r7, #32
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe fd50 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800bb30:	4603      	mov	r3, r0
 800bb32:	4619      	mov	r1, r3
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fee7 	bl	800b908 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bb3a:	f107 0320 	add.w	r3, r7, #32
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe fd73 	bl	800a62a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	332c      	adds	r3, #44	; 0x2c
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4909      	ldr	r1, [pc, #36]	; (800bb74 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800bb50:	4610      	mov	r0, r2
 800bb52:	4798      	blx	r3
}
 800bb54:	bf00      	nop
 800bb56:	3728      	adds	r7, #40	; 0x28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb5c:	080211dc 	.word	0x080211dc
 800bb60:	080211fc 	.word	0x080211fc
 800bb64:	08021208 	.word	0x08021208
 800bb68:	08021218 	.word	0x08021218
 800bb6c:	0802121c 	.word	0x0802121c
 800bb70:	08021220 	.word	0x08021220
 800bb74:	08021140 	.word	0x08021140

0800bb78 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800bb84:	4a1a      	ldr	r2, [pc, #104]	; (800bbf0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3314      	adds	r3, #20
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	3204      	adds	r2, #4
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	4610      	mov	r0, r2
 800bb9a:	4798      	blx	r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	330c      	adds	r3, #12
 800bba0:	68b9      	ldr	r1, [r7, #8]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f004 fb84 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	68b9      	ldr	r1, [r7, #8]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f004 fc4f 	bl	8010452 <_ZNK10UtestShell7getFileEv>
 800bbb4:	68b8      	ldr	r0, [r7, #8]
 800bbb6:	f004 fc5b 	bl	8010470 <_ZNK10UtestShell13getLineNumberEv>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	61da      	str	r2, [r3, #28]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3320      	adds	r3, #32
 800bbc4:	68b9      	ldr	r1, [r7, #8]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f004 fc43 	bl	8010452 <_ZNK10UtestShell7getFileEv>
 800bbcc:	68b8      	ldr	r0, [r7, #8]
 800bbce:	f004 fc4f 	bl	8010470 <_ZNK10UtestShell13getLineNumberEv>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	629a      	str	r2, [r3, #40]	; 0x28
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	332c      	adds	r3, #44	; 0x2c
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7fe f9bf 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
{
}
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	080244a8 	.word	0x080244a8

0800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800bc02:	4a19      	ldr	r2, [pc, #100]	; (800bc68 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3314      	adds	r3, #20
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	3204      	adds	r2, #4
 800bc14:	68b9      	ldr	r1, [r7, #8]
 800bc16:	4610      	mov	r0, r2
 800bc18:	4798      	blx	r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	68b9      	ldr	r1, [r7, #8]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f004 fb45 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3314      	adds	r3, #20
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe f944 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	61da      	str	r2, [r3, #28]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3320      	adds	r3, #32
 800bc3c:	68b9      	ldr	r1, [r7, #8]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f004 fc07 	bl	8010452 <_ZNK10UtestShell7getFileEv>
 800bc44:	68b8      	ldr	r0, [r7, #8]
 800bc46:	f004 fc13 	bl	8010470 <_ZNK10UtestShell13getLineNumberEv>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	629a      	str	r2, [r3, #40]	; 0x28
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	332c      	adds	r3, #44	; 0x2c
 800bc54:	4905      	ldr	r1, [pc, #20]	; (800bc6c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe f92f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
{
}
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	080244a8 	.word	0x080244a8
 800bc6c:	0802122c 	.word	0x0802122c

0800bc70 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800bc7a:	4a1e      	ldr	r2, [pc, #120]	; (800bcf4 <_ZN11TestFailureC1ERKS_+0x84>)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	1d1a      	adds	r2, r3, #4
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	f7fe f969 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f103 020c 	add.w	r2, r3, #12
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	330c      	adds	r3, #12
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	f7fe f960 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f103 0214 	add.w	r2, r3, #20
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	3314      	adds	r3, #20
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f7fe f957 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	69da      	ldr	r2, [r3, #28]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	61da      	str	r2, [r3, #28]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f103 0220 	add.w	r2, r3, #32
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	3320      	adds	r3, #32
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7fe f94a 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	629a      	str	r2, [r3, #40]	; 0x28
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	332c      	adds	r3, #44	; 0x2c
 800bce0:	4619      	mov	r1, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	f7fe f93d 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
{
}
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	080244a8 	.word	0x080244a8

0800bcf8 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	4a10      	ldr	r2, [pc, #64]	; (800bd44 <_ZN11TestFailureD1Ev+0x4c>)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	332c      	adds	r3, #44	; 0x2c
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fc8d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3320      	adds	r3, #32
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7fe fc88 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe fc83 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	330c      	adds	r3, #12
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fc7e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3304      	adds	r3, #4
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fe fc79 	bl	800a62a <_ZN12SimpleStringD1Ev>
{
}
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	080244a8 	.word	0x080244a8

0800bd48 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
}
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ffd1 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800bd56:	2134      	movs	r1, #52	; 0x34
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7fb fcff 	bl	800775c <_ZdlPvj>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
    return fileName_;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	3314      	adds	r3, #20
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7fe f8f2 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	3320      	adds	r3, #32
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7fe f8e3 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
    return testName_;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7fe f8d4 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	330c      	adds	r3, #12
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7fe f8c5 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	69db      	ldr	r3, [r3, #28]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
    return message_;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	332c      	adds	r3, #44	; 0x2c
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7fe f89e 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f103 0220 	add.w	r2, r3, #32
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3314      	adds	r3, #20
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7fe fc42 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 800be48:	4603      	mov	r3, r0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	69da      	ldr	r2, [r3, #28]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be62:	429a      	cmp	r2, r3
 800be64:	bf34      	ite	cc
 800be66:	2301      	movcc	r3, #1
 800be68:	2300      	movcs	r3, #0
 800be6a:	b2db      	uxtb	r3, r3
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800be78:	b590      	push	{r4, r7, lr}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7fe fba2 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800be8c:	4604      	mov	r4, r0
 800be8e:	6838      	ldr	r0, [r7, #0]
 800be90:	f7fe fb9e 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800be94:	4603      	mov	r3, r0
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	4622      	mov	r2, r4
 800be9a:	4903      	ldr	r1, [pc, #12]	; (800bea8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800be9c:	f7ff f8cc 	bl	800b038 <_Z16StringFromFormatPKcz>
}
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd90      	pop	{r4, r7, pc}
 800bea8:	08021238 	.word	0x08021238

0800beac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800beac:	b590      	push	{r4, r7, lr}
 800beae:	b097      	sub	sp, #92	; 0x5c
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800beba:	494c      	ldr	r1, [pc, #304]	; (800bfec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7fd fffc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800bec2:	2314      	movs	r3, #20
 800bec4:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800bec6:	230a      	movs	r3, #10
 800bec8:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800beca:	f107 0320 	add.w	r3, r7, #32
 800bece:	220a      	movs	r2, #10
 800bed0:	4947      	ldr	r1, [pc, #284]	; (800bff0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe f80c 	bl	8009ef0 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800bed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bedc:	f107 0120 	add.w	r1, r7, #32
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fe fc03 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800bee8:	f107 0318 	add.w	r3, r7, #24
 800beec:	f107 0220 	add.w	r2, r7, #32
 800bef0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fe fbfa 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800befa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe fb93 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800bf04:	f107 0310 	add.w	r3, r7, #16
 800bf08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf0a:	493a      	ldr	r1, [pc, #232]	; (800bff4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff f893 	bl	800b038 <_Z16StringFromFormatPKcz>

    result += "\n";
 800bf12:	4939      	ldr	r1, [pc, #228]	; (800bff8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7fe fc17 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800bf1a:	f107 0310 	add.w	r3, r7, #16
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fe fb56 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800bf24:	4604      	mov	r4, r0
 800bf26:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800bf2a:	f107 0118 	add.w	r1, r7, #24
 800bf2e:	2314      	movs	r3, #20
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	f7fe fc83 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
 800bf36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fb48 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800bf40:	4603      	mov	r3, r0
 800bf42:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bf46:	4622      	mov	r2, r4
 800bf48:	492c      	ldr	r1, [pc, #176]	; (800bffc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800bf4a:	f7ff f875 	bl	800b038 <_Z16StringFromFormatPKcz>
 800bf4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf52:	4619      	mov	r1, r3
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f7fe fbe5 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800bf5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fb63 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800bf64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe fb5e 	bl	800a62a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800bf6e:	f107 0310 	add.w	r3, r7, #16
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fb38 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f103 020a 	add.w	r2, r3, #10
 800bf7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf82:	491b      	ldr	r1, [pc, #108]	; (800bff0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fd ffb3 	bl	8009ef0 <_ZN12SimpleStringC1EPKcj>
 800bf8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe fb1e 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800bf94:	4602      	mov	r2, r0
 800bf96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf9a:	4919      	ldr	r1, [pc, #100]	; (800c000 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff f84b 	bl	800b038 <_Z16StringFromFormatPKcz>
 800bfa2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7fe fbbb 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800bfae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fe fb39 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800bfb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fb34 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return result;
 800bfc2:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800bfc4:	f107 0310 	add.w	r3, r7, #16
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fb2e 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800bfce:	f107 0318 	add.w	r3, r7, #24
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fb29 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800bfd8:	f107 0320 	add.w	r3, r7, #32
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fb24 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return result;
 800bfe2:	bf00      	nop
}
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	375c      	adds	r7, #92	; 0x5c
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd90      	pop	{r4, r7, pc}
 800bfec:	08021258 	.word	0x08021258
 800bff0:	0802125c 	.word	0x0802125c
 800bff4:	08021260 	.word	0x08021260
 800bff8:	08021288 	.word	0x08021288
 800bffc:	0802128c 	.word	0x0802128c
 800c000:	08021294 	.word	0x08021294

0800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800c004:	b590      	push	{r4, r7, lr}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800c010:	491a      	ldr	r1, [pc, #104]	; (800c07c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7fd ff51 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7fe faf5 	bl	800a608 <_ZNK12SimpleString7isEmptyEv>
 800c01e:	4603      	mov	r3, r0
 800c020:	f083 0301 	eor.w	r3, r3, #1
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d022      	beq.n	800c070 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800c02a:	f107 0310 	add.w	r3, r7, #16
 800c02e:	4914      	ldr	r1, [pc, #80]	; (800c080 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd ff42 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c036:	f107 0310 	add.w	r3, r7, #16
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7fe f800 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 800c042:	4603      	mov	r3, r0
 800c044:	f083 0301 	eor.w	r3, r3, #1
 800c048:	b2dc      	uxtb	r4, r3
 800c04a:	f107 0310 	add.w	r3, r7, #16
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe faeb 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c054:	2c00      	cmp	r4, #0
 800c056:	d003      	beq.n	800c060 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800c058:	490a      	ldr	r1, [pc, #40]	; (800c084 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7fe fb74 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7fe fb5e 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800c068:	4907      	ldr	r1, [pc, #28]	; (800c088 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f7fe fb6c 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800c070:	bf00      	nop
}
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	371c      	adds	r7, #28
 800c076:	46bd      	mov	sp, r7
 800c078:	bd90      	pop	{r4, r7, pc}
 800c07a:	bf00      	nop
 800c07c:	08021258 	.word	0x08021258
 800c080:	0802129c 	.word	0x0802129c
 800c084:	080212a8 	.word	0x080212a8
 800c088:	080212b4 	.word	0x080212b4

0800c08c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c08c:	b590      	push	{r4, r7, lr}
 800c08e:	b089      	sub	sp, #36	; 0x24
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
 800c098:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	f7ff fda7 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c0a6:	4a19      	ldr	r2, [pc, #100]	; (800c10c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c0b2:	68f9      	ldr	r1, [r7, #12]
 800c0b4:	f107 0310 	add.w	r3, r7, #16
 800c0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7ff ffa2 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c0c0:	f107 0310 	add.w	r3, r7, #16
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f7fd ff63 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c0cc:	f107 0310 	add.w	r3, r7, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe faaa 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c0dc:	68f9      	ldr	r1, [r7, #12]
 800c0de:	f107 0018 	add.w	r0, r7, #24
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0e6:	f7ff fec7 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c0ea:	f107 0318 	add.w	r3, r7, #24
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7fe fb17 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c0f6:	f107 0318 	add.w	r3, r7, #24
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fa95 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4618      	mov	r0, r3
 800c104:	3724      	adds	r7, #36	; 0x24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd90      	pop	{r4, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	0802447c 	.word	0x0802447c

0800c110 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800c110:	b5b0      	push	{r4, r5, r7, lr}
 800c112:	b094      	sub	sp, #80	; 0x50
 800c114:	af00      	add	r7, sp, #0
 800c116:	6278      	str	r0, [r7, #36]	; 0x24
 800c118:	6239      	str	r1, [r7, #32]
 800c11a:	61fa      	str	r2, [r7, #28]
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	ed87 0b04 	vstr	d0, [r7, #16]
 800c122:	ed87 1b02 	vstr	d1, [r7, #8]
 800c126:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800c12a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	69fa      	ldr	r2, [r7, #28]
 800c130:	6a39      	ldr	r1, [r7, #32]
 800c132:	f7ff fd5f 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c136:	4a4a      	ldr	r2, [pc, #296]	; (800c260 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ff5a 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c154:	4619      	mov	r1, r3
 800c156:	4620      	mov	r0, r4
 800c158:	f7fd ff1b 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c15c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe fa62 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c16c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c16e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c172:	2107      	movs	r1, #7
 800c174:	ed97 0b04 	vldr	d0, [r7, #16]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe ff1b 	bl	800afb4 <_Z10StringFromdi>
 800c17e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c182:	2107      	movs	r1, #7
 800c184:	ed97 0b02 	vldr	d0, [r7, #8]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe ff13 	bl	800afb4 <_Z10StringFromdi>
 800c18e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c192:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c196:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c19a:	4629      	mov	r1, r5
 800c19c:	f7ff fe6c 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c1a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7fe fabc 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c1ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe fa3a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c1b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fa35 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c1c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fa30 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	332c      	adds	r3, #44	; 0x2c
 800c1ce:	4925      	ldr	r1, [pc, #148]	; (800c264 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fab9 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c1dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1e0:	2107      	movs	r1, #7
 800c1e2:	ed97 0b00 	vldr	d0, [r7]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fee4 	bl	800afb4 <_Z10StringFromdi>
 800c1ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7fe fa96 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c1f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fe fa14 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	332c      	adds	r3, #44	; 0x2c
 800c206:	4918      	ldr	r1, [pc, #96]	; (800c268 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fa9d 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800c20e:	4b17      	ldr	r3, [pc, #92]	; (800c26c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	ed97 0b04 	vldr	d0, [r7, #16]
 800c216:	4798      	blx	r3
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10f      	bne.n	800c23e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800c21e:	4b13      	ldr	r3, [pc, #76]	; (800c26c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	ed97 0b02 	vldr	d0, [r7, #8]
 800c226:	4798      	blx	r3
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d107      	bne.n	800c23e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800c22e:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	ed97 0b00 	vldr	d0, [r7]
 800c236:	4798      	blx	r3
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800c23e:	2301      	movs	r3, #1
 800c240:	e000      	b.n	800c244 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800c242:	2300      	movs	r3, #0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d005      	beq.n	800c254 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	332c      	adds	r3, #44	; 0x2c
 800c24c:	4908      	ldr	r1, [pc, #32]	; (800c270 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fa7a 	bl	800a748 <_ZN12SimpleStringpLEPKc>
}
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	4618      	mov	r0, r3
 800c258:	3750      	adds	r7, #80	; 0x50
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bdb0      	pop	{r4, r5, r7, pc}
 800c25e:	bf00      	nop
 800c260:	08024450 	.word	0x08024450
 800c264:	080212b8 	.word	0x080212b8
 800c268:	080212d0 	.word	0x080212d0
 800c26c:	200000e4 	.word	0x200000e4
 800c270:	080212d4 	.word	0x080212d4

0800c274 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c274:	b590      	push	{r4, r7, lr}
 800c276:	b093      	sub	sp, #76	; 0x4c
 800c278:	af02      	add	r7, sp, #8
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	68b9      	ldr	r1, [r7, #8]
 800c28a:	f7ff fcb3 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c28e:	4a4f      	ldr	r2, [pc, #316]	; (800c3cc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c29a:	68f9      	ldr	r1, [r7, #12]
 800c29c:	f107 0320 	add.w	r3, r7, #32
 800c2a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff feae 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c2a8:	f107 0320 	add.w	r3, r7, #32
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7fd fe6f 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c2b4:	f107 0320 	add.w	r3, r7, #32
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fe f9b6 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c2be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c2c0:	f7fe f986 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	f107 0318 	add.w	r3, r7, #24
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fc47 	bl	800ab60 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c2d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c2d4:	f7fe f97c 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	f107 0310 	add.w	r3, r7, #16
 800c2de:	4611      	mov	r1, r2
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe fc3d 	bl	800ab60 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c2ec:	68f9      	ldr	r1, [r7, #12]
 800c2ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c2f2:	f107 0310 	add.w	r3, r7, #16
 800c2f6:	f107 0218 	add.w	r2, r7, #24
 800c2fa:	f7ff fdbd 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c2fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c302:	4619      	mov	r1, r3
 800c304:	4620      	mov	r0, r4
 800c306:	f7fe fa0d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c30a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe f98b 	bl	800a62a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800c314:	2300      	movs	r3, #0
 800c316:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c318:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c31a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c31c:	f7fe fae9 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800c320:	4603      	mov	r3, r0
 800c322:	461c      	mov	r4, r3
 800c324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c326:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c328:	f7fe fae3 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800c32c:	4603      	mov	r3, r0
 800c32e:	429c      	cmp	r4, r3
 800c330:	bf0c      	ite	eq
 800c332:	2301      	moveq	r3, #1
 800c334:	2300      	movne	r3, #0
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	3301      	adds	r3, #1
 800c340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c342:	e7e9      	b.n	800c318 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800c344:	2300      	movs	r3, #0
 800c346:	63bb      	str	r3, [r7, #56]	; 0x38
 800c348:	f107 0310 	add.w	r3, r7, #16
 800c34c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe facf 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800c354:	4603      	mov	r3, r0
 800c356:	461c      	mov	r4, r3
 800c358:	f107 0318 	add.w	r3, r7, #24
 800c35c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fac7 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800c364:	4603      	mov	r3, r0
 800c366:	429c      	cmp	r4, r3
 800c368:	bf0c      	ite	eq
 800c36a:	2301      	moveq	r3, #1
 800c36c:	2300      	movne	r3, #0
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	3301      	adds	r3, #1
 800c378:	63bb      	str	r3, [r7, #56]	; 0x38
 800c37a:	e7e5      	b.n	800c348 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c382:	68f9      	ldr	r1, [r7, #12]
 800c384:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c388:	f107 0210 	add.w	r2, r7, #16
 800c38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	f7ff fd8b 	bl	800beac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c39a:	4619      	mov	r1, r3
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7fe f9c1 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c3a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe f93f 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c3ac:	f107 0310 	add.w	r3, r7, #16
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe f93a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c3b6:	f107 0318 	add.w	r3, r7, #24
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe f935 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3744      	adds	r7, #68	; 0x44
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd90      	pop	{r4, r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	08024424 	.word	0x08024424

0800c3d0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800c3d0:	b590      	push	{r4, r7, lr}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	68b9      	ldr	r1, [r7, #8]
 800c3e6:	f7ff fc05 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c3ea:	4a1a      	ldr	r2, [pc, #104]	; (800c454 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c3f6:	68f9      	ldr	r1, [r7, #12]
 800c3f8:	f107 0310 	add.w	r3, r7, #16
 800c3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff fe00 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c404:	f107 0310 	add.w	r3, r7, #16
 800c408:	4619      	mov	r1, r3
 800c40a:	4620      	mov	r0, r4
 800c40c:	f7fd fdc1 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c410:	f107 0310 	add.w	r3, r7, #16
 800c414:	4618      	mov	r0, r3
 800c416:	f7fe f908 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	332c      	adds	r3, #44	; 0x2c
 800c41e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c420:	4618      	mov	r0, r3
 800c422:	f7fe f97f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	332c      	adds	r3, #44	; 0x2c
 800c42a:	490b      	ldr	r1, [pc, #44]	; (800c458 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe f98b 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	332c      	adds	r3, #44	; 0x2c
 800c436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe f973 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	332c      	adds	r3, #44	; 0x2c
 800c442:	4906      	ldr	r1, [pc, #24]	; (800c45c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe f97f 	bl	800a748 <_ZN12SimpleStringpLEPKc>
}
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4618      	mov	r0, r3
 800c44e:	371c      	adds	r7, #28
 800c450:	46bd      	mov	sp, r7
 800c452:	bd90      	pop	{r4, r7, pc}
 800c454:	080243f8 	.word	0x080243f8
 800c458:	080212f8 	.word	0x080212f8
 800c45c:	080212fc 	.word	0x080212fc

0800c460 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c460:	b5b0      	push	{r4, r5, r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	68b9      	ldr	r1, [r7, #8]
 800c476:	f7ff fbbd 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c47a:	4a1c      	ldr	r2, [pc, #112]	; (800c4ec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c486:	68f9      	ldr	r1, [r7, #12]
 800c488:	f107 0310 	add.w	r3, r7, #16
 800c48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c48e:	4618      	mov	r0, r3
 800c490:	f7ff fdb8 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c494:	f107 0310 	add.w	r3, r7, #16
 800c498:	4619      	mov	r1, r3
 800c49a:	4620      	mov	r0, r4
 800c49c:	f7fd fd79 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c4a0:	f107 0310 	add.w	r3, r7, #16
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe f8c0 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c4b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4b2:	f7fe f88d 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ba:	f7fe f889 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f107 0018 	add.w	r0, r7, #24
 800c4c4:	462a      	mov	r2, r5
 800c4c6:	490a      	ldr	r1, [pc, #40]	; (800c4f0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800c4c8:	f7fe fdb6 	bl	800b038 <_Z16StringFromFormatPKcz>
 800c4cc:	f107 0318 	add.w	r3, r7, #24
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f7fe f926 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c4d8:	f107 0318 	add.w	r3, r7, #24
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe f8a4 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c4ec:	080243cc 	.word	0x080243cc
 800c4f0:	08021308 	.word	0x08021308

0800c4f4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800c4f4:	b590      	push	{r4, r7, lr}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	f7ff fb73 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c50e:	4a1a      	ldr	r2, [pc, #104]	; (800c578 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c51a:	68f9      	ldr	r1, [r7, #12]
 800c51c:	f107 0310 	add.w	r3, r7, #16
 800c520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c522:	4618      	mov	r0, r3
 800c524:	f7ff fd6e 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c528:	f107 0310 	add.w	r3, r7, #16
 800c52c:	4619      	mov	r1, r3
 800c52e:	4620      	mov	r0, r4
 800c530:	f7fd fd2f 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c534:	f107 0310 	add.w	r3, r7, #16
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe f876 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	332c      	adds	r3, #44	; 0x2c
 800c542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe f8ed 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	332c      	adds	r3, #44	; 0x2c
 800c54e:	490b      	ldr	r1, [pc, #44]	; (800c57c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800c550:	4618      	mov	r0, r3
 800c552:	f7fe f8f9 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	332c      	adds	r3, #44	; 0x2c
 800c55a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe f8e1 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	332c      	adds	r3, #44	; 0x2c
 800c566:	4906      	ldr	r1, [pc, #24]	; (800c580 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe f8ed 	bl	800a748 <_ZN12SimpleStringpLEPKc>
}
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4618      	mov	r0, r3
 800c572:	371c      	adds	r7, #28
 800c574:	46bd      	mov	sp, r7
 800c576:	bd90      	pop	{r4, r7, pc}
 800c578:	080243a0 	.word	0x080243a0
 800c57c:	080212f8 	.word	0x080212f8
 800c580:	080212fc 	.word	0x080212fc

0800c584 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
 800c590:	603b      	str	r3, [r7, #0]
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	68b9      	ldr	r1, [r7, #8]
 800c59a:	f7ff fb2b 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c59e:	4a07      	ldr	r2, [pc, #28]	; (800c5bc <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	332c      	adds	r3, #44	; 0x2c
 800c5a8:	69b9      	ldr	r1, [r7, #24]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fd fcf1 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
}
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	0802405c 	.word	0x0802405c

0800c5c0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800c5c0:	b590      	push	{r4, r7, lr}
 800c5c2:	b09d      	sub	sp, #116	; 0x74
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	f7ff fb0d 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c5da:	4a5d      	ldr	r2, [pc, #372]	; (800c750 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff fd07 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c5f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f7fd fcc8 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe f80f 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c60c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c610:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fae1 	bl	800abdc <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800c61a:	f107 0320 	add.w	r3, r7, #32
 800c61e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe fada 	bl	800abdc <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c628:	f107 0120 	add.w	r1, r7, #32
 800c62c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c630:	2220      	movs	r2, #32
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe f8b6 	bl	800a7a4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c638:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c63c:	4945      	ldr	r1, [pc, #276]	; (800c754 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c63e:	4618      	mov	r0, r3
 800c640:	f7fd fc3b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c648:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c64c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c650:	4618      	mov	r0, r3
 800c652:	f7fe f84c 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c656:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c65a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe fbd2 	bl	800ae08 <_Z30BracketsFormattedHexStringFroml>
 800c664:	f107 0318 	add.w	r3, r7, #24
 800c668:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c66c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c670:	4618      	mov	r0, r3
 800c672:	f7fe f83c 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c676:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fd ffd5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c684:	4618      	mov	r0, r3
 800c686:	f7fd ffd0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c68a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fd ffcb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c694:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c698:	492e      	ldr	r1, [pc, #184]	; (800c754 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fd fc0d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c6a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c6a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c6a8:	f107 0120 	add.w	r1, r7, #32
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe f81e 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c6b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c6b6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe fba4 	bl	800ae08 <_Z30BracketsFormattedHexStringFroml>
 800c6c0:	f107 0310 	add.w	r3, r7, #16
 800c6c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c6c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe f80e 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c6d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fd ffa7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c6dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fd ffa2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c6e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd ff9d 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c6f6:	68f9      	ldr	r1, [r7, #12]
 800c6f8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c6fc:	f107 0318 	add.w	r3, r7, #24
 800c700:	f107 0210 	add.w	r2, r7, #16
 800c704:	f7ff fbb8 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c708:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c70c:	4619      	mov	r1, r3
 800c70e:	4620      	mov	r0, r4
 800c710:	f7fe f808 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c714:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c718:	4618      	mov	r0, r3
 800c71a:	f7fd ff86 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c71e:	f107 0310 	add.w	r3, r7, #16
 800c722:	4618      	mov	r0, r3
 800c724:	f7fd ff81 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c728:	f107 0318 	add.w	r3, r7, #24
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fd ff7c 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800c732:	f107 0320 	add.w	r3, r7, #32
 800c736:	4618      	mov	r0, r3
 800c738:	f7fd ff77 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800c73c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c740:	4618      	mov	r0, r3
 800c742:	f7fd ff72 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	4618      	mov	r0, r3
 800c74a:	3774      	adds	r7, #116	; 0x74
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd90      	pop	{r4, r7, pc}
 800c750:	08024374 	.word	0x08024374
 800c754:	0802125c 	.word	0x0802125c

0800c758 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800c758:	b590      	push	{r4, r7, lr}
 800c75a:	b09d      	sub	sp, #116	; 0x74
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	f7ff fa41 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c772:	4a5d      	ldr	r2, [pc, #372]	; (800c8e8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c77e:	68f9      	ldr	r1, [r7, #12]
 800c780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c784:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff fc3b 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c78e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c792:	4619      	mov	r1, r3
 800c794:	4620      	mov	r0, r4
 800c796:	f7fd fbfc 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c79a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fd ff43 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c7a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7a8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fe fc7d 	bl	800b0ac <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800c7b2:	f107 0320 	add.w	r3, r7, #32
 800c7b6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fc76 	bl	800b0ac <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c7c0:	f107 0120 	add.w	r1, r7, #32
 800c7c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fd ffea 	bl	800a7a4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c7d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c7d4:	4945      	ldr	r1, [pc, #276]	; (800c8ec <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7fd fb6f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c7dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c7e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c7e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fd ff80 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c7ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c7f2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fb22 	bl	800ae40 <_Z30BracketsFormattedHexStringFromm>
 800c7fc:	f107 0318 	add.w	r3, r7, #24
 800c800:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c804:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd ff70 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c80e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c812:	4618      	mov	r0, r3
 800c814:	f7fd ff09 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c818:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd ff04 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c826:	4618      	mov	r0, r3
 800c828:	f7fd feff 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c82c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c830:	492e      	ldr	r1, [pc, #184]	; (800c8ec <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800c832:	4618      	mov	r0, r3
 800c834:	f7fd fb41 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c83c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c840:	f107 0120 	add.w	r1, r7, #32
 800c844:	4618      	mov	r0, r3
 800c846:	f7fd ff52 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c84a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c84e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe faf4 	bl	800ae40 <_Z30BracketsFormattedHexStringFromm>
 800c858:	f107 0310 	add.w	r3, r7, #16
 800c85c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c860:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd ff42 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c86a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fd fedb 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c874:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fd fed6 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c87e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c882:	4618      	mov	r0, r3
 800c884:	f7fd fed1 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c88e:	68f9      	ldr	r1, [r7, #12]
 800c890:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c894:	f107 0318 	add.w	r3, r7, #24
 800c898:	f107 0210 	add.w	r2, r7, #16
 800c89c:	f7ff faec 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c8a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7fd ff3c 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800c8ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fd feba 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c8b6:	f107 0310 	add.w	r3, r7, #16
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fd feb5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c8c0:	f107 0318 	add.w	r3, r7, #24
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fd feb0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800c8ca:	f107 0320 	add.w	r3, r7, #32
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fd feab 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800c8d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7fd fea6 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3774      	adds	r7, #116	; 0x74
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd90      	pop	{r4, r7, pc}
 800c8e8:	08024348 	.word	0x08024348
 800c8ec:	0802125c 	.word	0x0802125c

0800c8f0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800c8f0:	b590      	push	{r4, r7, lr}
 800c8f2:	b09d      	sub	sp, #116	; 0x74
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
 800c8fc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	f7ff f975 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c90a:	4a5f      	ldr	r2, [pc, #380]	; (800ca88 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c916:	68f9      	ldr	r1, [r7, #12]
 800c918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c91c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff fb6f 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c92a:	4619      	mov	r1, r3
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7fd fb30 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800c932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c936:	4618      	mov	r0, r3
 800c938:	f7fd fe77 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800c93c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800c940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c944:	4611      	mov	r1, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe f936 	bl	800abb8 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800c94c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800c950:	f107 0320 	add.w	r3, r7, #32
 800c954:	4611      	mov	r1, r2
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe f92e 	bl	800abb8 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c95c:	f107 0120 	add.w	r1, r7, #32
 800c960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c964:	2220      	movs	r2, #32
 800c966:	4618      	mov	r0, r3
 800c968:	f7fd ff1c 	bl	800a7a4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c96c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c970:	4946      	ldr	r1, [pc, #280]	; (800ca8c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800c972:	4618      	mov	r0, r3
 800c974:	f7fd faa1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c978:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c97c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c980:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c984:	4618      	mov	r0, r3
 800c986:	f7fd feb2 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c98a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c98e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe fa6f 	bl	800ae78 <_Z30BracketsFormattedHexStringFroma>
 800c99a:	f107 0318 	add.w	r3, r7, #24
 800c99e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c9a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fd fea1 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c9ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fd fe3a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c9b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fd fe35 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800c9c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fe30 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c9ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c9ce:	492f      	ldr	r1, [pc, #188]	; (800ca8c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fd fa72 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800c9d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c9da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9de:	f107 0120 	add.w	r1, r7, #32
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fd fe83 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800c9e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c9ec:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fa40 	bl	800ae78 <_Z30BracketsFormattedHexStringFroma>
 800c9f8:	f107 0310 	add.w	r3, r7, #16
 800c9fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ca00:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fd fe72 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 800ca0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fd fe0b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ca14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fd fe06 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800ca1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd fe01 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ca34:	f107 0318 	add.w	r3, r7, #24
 800ca38:	f107 0210 	add.w	r2, r7, #16
 800ca3c:	f7ff fa1c 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ca40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ca44:	4619      	mov	r1, r3
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7fd fe6c 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800ca4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fd fdea 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ca56:	f107 0310 	add.w	r3, r7, #16
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fd fde5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ca60:	f107 0318 	add.w	r3, r7, #24
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fd fde0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800ca6a:	f107 0320 	add.w	r3, r7, #32
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fd fddb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800ca74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fd fdd6 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4618      	mov	r0, r3
 800ca82:	3774      	adds	r7, #116	; 0x74
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd90      	pop	{r4, r7, pc}
 800ca88:	0802431c 	.word	0x0802431c
 800ca8c:	0802125c 	.word	0x0802125c

0800ca90 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800ca90:	b590      	push	{r4, r7, lr}
 800ca92:	b093      	sub	sp, #76	; 0x4c
 800ca94:	af02      	add	r7, sp, #8
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	f7ff f8a5 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800caaa:	4a4a      	ldr	r2, [pc, #296]	; (800cbd4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cab6:	68f9      	ldr	r1, [r7, #12]
 800cab8:	f107 0320 	add.w	r3, r7, #32
 800cabc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7ff faa0 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cac4:	f107 0320 	add.w	r3, r7, #32
 800cac8:	4619      	mov	r1, r3
 800caca:	4620      	mov	r0, r4
 800cacc:	f7fd fa61 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800cad0:	f107 0320 	add.w	r3, r7, #32
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7fd fda8 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cada:	f107 0318 	add.w	r3, r7, #24
 800cade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fe f83d 	bl	800ab60 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cae6:	f107 0310 	add.w	r3, r7, #16
 800caea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800caec:	4618      	mov	r0, r3
 800caee:	f7fe f837 	bl	800ab60 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800caf8:	68f9      	ldr	r1, [r7, #12]
 800cafa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cafe:	f107 0310 	add.w	r3, r7, #16
 800cb02:	f107 0218 	add.w	r2, r7, #24
 800cb06:	f7ff f9b7 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cb0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4620      	mov	r0, r4
 800cb12:	f7fd fe07 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cb16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fd fd85 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800cb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d046      	beq.n	800cbb4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800cb26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d043      	beq.n	800cbb4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb34:	4413      	add	r3, r2
 800cb36:	781a      	ldrb	r2, [r3, #0]
 800cb38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3c:	440b      	add	r3, r1
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d103      	bne.n	800cb4c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800cb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb46:	3301      	adds	r3, #1
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4a:	e7f1      	b.n	800cb30 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb50:	f107 0310 	add.w	r3, r7, #16
 800cb54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fd fecb 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	461c      	mov	r4, r3
 800cb60:	f107 0318 	add.w	r3, r7, #24
 800cb64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fd fec3 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	bf0c      	ite	eq
 800cb72:	2301      	moveq	r3, #1
 800cb74:	2300      	movne	r3, #0
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	3301      	adds	r3, #1
 800cb80:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb82:	e7e5      	b.n	800cb50 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cb8a:	68f9      	ldr	r1, [r7, #12]
 800cb8c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cb90:	f107 0210 	add.w	r2, r7, #16
 800cb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f7ff f987 	bl	800beac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800cb9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cba2:	4619      	mov	r1, r3
 800cba4:	4620      	mov	r0, r4
 800cba6:	f7fd fdbd 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cbaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fd fd3b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cbb4:	f107 0310 	add.w	r3, r7, #16
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fd fd36 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cbbe:	f107 0318 	add.w	r3, r7, #24
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fd fd31 	bl	800a62a <_ZN12SimpleStringD1Ev>
    }
}
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3744      	adds	r7, #68	; 0x44
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd90      	pop	{r4, r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	080242f0 	.word	0x080242f0

0800cbd8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800cbd8:	b590      	push	{r4, r7, lr}
 800cbda:	b093      	sub	sp, #76	; 0x4c
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	68b9      	ldr	r1, [r7, #8]
 800cbee:	f7ff f801 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cbf2:	4a55      	ldr	r2, [pc, #340]	; (800cd48 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cbfe:	68f9      	ldr	r1, [r7, #12]
 800cc00:	f107 0320 	add.w	r3, r7, #32
 800cc04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff f9fc 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cc0c:	f107 0320 	add.w	r3, r7, #32
 800cc10:	4619      	mov	r1, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	f7fd f9bd 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800cc18:	f107 0320 	add.w	r3, r7, #32
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fd fd04 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cc22:	f107 0318 	add.w	r3, r7, #24
 800cc26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fd ff99 	bl	800ab60 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cc2e:	f107 0310 	add.w	r3, r7, #16
 800cc32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fd ff93 	bl	800ab60 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc40:	68f9      	ldr	r1, [r7, #12]
 800cc42:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc46:	f107 0310 	add.w	r3, r7, #16
 800cc4a:	f107 0218 	add.w	r2, r7, #24
 800cc4e:	f7ff f913 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cc52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc56:	4619      	mov	r1, r3
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f7fd fd63 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cc5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fd fce1 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800cc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d05c      	beq.n	800cd28 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800cc6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d059      	beq.n	800cd28 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800cc74:	2300      	movs	r3, #0
 800cc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7c:	4413      	add	r3, r2
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fd f824 	bl	8009cce <_ZN12SimpleString7ToLowerEc>
 800cc86:	4603      	mov	r3, r0
 800cc88:	461c      	mov	r4, r3
 800cc8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc8e:	4413      	add	r3, r2
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fd f81b 	bl	8009cce <_ZN12SimpleString7ToLowerEc>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	429c      	cmp	r4, r3
 800cc9c:	bf0c      	ite	eq
 800cc9e:	2301      	moveq	r3, #1
 800cca0:	2300      	movne	r3, #0
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d003      	beq.n	800ccb0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800cca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccaa:	3301      	adds	r3, #1
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccae:	e7e3      	b.n	800cc78 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800ccb4:	f107 0310 	add.w	r3, r7, #16
 800ccb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fd fe19 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fd f803 	bl	8009cce <_ZN12SimpleString7ToLowerEc>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461c      	mov	r4, r3
 800cccc:	f107 0318 	add.w	r3, r7, #24
 800ccd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fd fe0d 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fc fff7 	bl	8009cce <_ZN12SimpleString7ToLowerEc>
 800cce0:	4603      	mov	r3, r0
 800cce2:	429c      	cmp	r4, r3
 800cce4:	bf0c      	ite	eq
 800cce6:	2301      	moveq	r3, #1
 800cce8:	2300      	movne	r3, #0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccf6:	e7dd      	b.n	800ccb4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ccfe:	68f9      	ldr	r1, [r7, #12]
 800cd00:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cd04:	f107 0210 	add.w	r2, r7, #16
 800cd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	f7ff f8cd 	bl	800beac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800cd12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd16:	4619      	mov	r1, r3
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7fd fd03 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cd1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fd fc81 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cd28:	f107 0310 	add.w	r3, r7, #16
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fd fc7c 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cd32:	f107 0318 	add.w	r3, r7, #24
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fd fc77 	bl	800a62a <_ZN12SimpleStringD1Ev>
    }
}
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3744      	adds	r7, #68	; 0x44
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd90      	pop	{r4, r7, pc}
 800cd46:	bf00      	nop
 800cd48:	080242c4 	.word	0x080242c4

0800cd4c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800cd4c:	b5b0      	push	{r4, r5, r7, lr}
 800cd4e:	b092      	sub	sp, #72	; 0x48
 800cd50:	af02      	add	r7, sp, #8
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	68b9      	ldr	r1, [r7, #8]
 800cd62:	f7fe ff47 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cd66:	4a40      	ldr	r2, [pc, #256]	; (800ce68 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cd72:	68f9      	ldr	r1, [r7, #12]
 800cd74:	f107 031c 	add.w	r3, r7, #28
 800cd78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff f942 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cd80:	f107 031c 	add.w	r3, r7, #28
 800cd84:	4619      	mov	r1, r3
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7fd f903 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800cd8c:	f107 031c 	add.w	r3, r7, #28
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fd fc4a 	bl	800a62a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800cd96:	f107 0314 	add.w	r3, r7, #20
 800cd9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe fa4c 	bl	800b23c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cdaa:	68fd      	ldr	r5, [r7, #12]
 800cdac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cdb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fa41 	bl	800b23c <_Z22StringFromBinaryOrNullPKhj>
 800cdba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cdbe:	f107 0314 	add.w	r3, r7, #20
 800cdc2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f7ff f856 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cdcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7fd fca6 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cdd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fd fc24 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800cde2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fd fc1f 	bl	800a62a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800cdec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d02f      	beq.n	800ce52 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800cdf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d02c      	beq.n	800ce52 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce00:	4413      	add	r3, r2
 800ce02:	781a      	ldrb	r2, [r3, #0]
 800ce04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce08:	440b      	add	r3, r1
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d103      	bne.n	800ce18 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800ce10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce12:	3301      	adds	r3, #1
 800ce14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce16:	e7f1      	b.n	800cdfc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ce1e:	68f9      	ldr	r1, [r7, #12]
 800ce20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce22:	4613      	mov	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	1c5d      	adds	r5, r3, #1
 800ce2a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ce2e:	f107 0214 	add.w	r2, r7, #20
 800ce32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	462b      	mov	r3, r5
 800ce38:	f7ff f838 	bl	800beac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ce3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce40:	4619      	mov	r1, r3
 800ce42:	4620      	mov	r0, r4
 800ce44:	f7fd fc6e 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800ce48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fd fbec 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800ce52:	f107 0314 	add.w	r3, r7, #20
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fd fbe7 	bl	800a62a <_ZN12SimpleStringD1Ev>
	}
}
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3740      	adds	r7, #64	; 0x40
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bdb0      	pop	{r4, r5, r7, pc}
 800ce66:	bf00      	nop
 800ce68:	08024298 	.word	0x08024298

0800ce6c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800ce6c:	b5b0      	push	{r4, r5, r7, lr}
 800ce6e:	b08c      	sub	sp, #48	; 0x30
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	68b9      	ldr	r1, [r7, #8]
 800ce82:	f7fe feb7 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ce86:	4a26      	ldr	r2, [pc, #152]	; (800cf20 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ce92:	68f9      	ldr	r1, [r7, #12]
 800ce94:	f107 0310 	add.w	r3, r7, #16
 800ce98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7ff f8b2 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cea0:	f107 0310 	add.w	r3, r7, #16
 800cea4:	4619      	mov	r1, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7fd f873 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800ceac:	f107 0310 	add.w	r3, r7, #16
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fd fbba 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cebc:	68fd      	ldr	r5, [r7, #12]
 800cebe:	f107 0020 	add.w	r0, r7, #32
 800cec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cec8:	f7fe fa24 	bl	800b314 <_Z20StringFromMaskedBitsmmj>
 800cecc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ced0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ced2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ced4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ced6:	f7fe fa1d 	bl	800b314 <_Z20StringFromMaskedBitsmmj>
 800ceda:	f107 0018 	add.w	r0, r7, #24
 800cede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cee2:	f107 0220 	add.w	r2, r7, #32
 800cee6:	4629      	mov	r1, r5
 800cee8:	f7fe ffc6 	bl	800be78 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ceec:	f107 0318 	add.w	r3, r7, #24
 800cef0:	4619      	mov	r1, r3
 800cef2:	4620      	mov	r0, r4
 800cef4:	f7fd fc16 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cef8:	f107 0318 	add.w	r3, r7, #24
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fd fb94 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800cf02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fd fb8f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800cf0c:	f107 0320 	add.w	r3, r7, #32
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fd fb8a 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3730      	adds	r7, #48	; 0x30
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bdb0      	pop	{r4, r5, r7, pc}
 800cf20:	0802426c 	.word	0x0802426c

0800cf24 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b089      	sub	sp, #36	; 0x24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	f7fe fe5b 	bl	800bbf4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cf3e:	4a1a      	ldr	r2, [pc, #104]	; (800cfa8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf4a:	68f9      	ldr	r1, [r7, #12]
 800cf4c:	f107 0310 	add.w	r3, r7, #16
 800cf50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff f856 	bl	800c004 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cf58:	f107 0310 	add.w	r3, r7, #16
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f7fd f817 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800cf64:	f107 0310 	add.w	r3, r7, #16
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fd fb5e 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf76:	f7fd fb2b 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	f107 0318 	add.w	r3, r7, #24
 800cf80:	490a      	ldr	r1, [pc, #40]	; (800cfac <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe f858 	bl	800b038 <_Z16StringFromFormatPKcz>
 800cf88:	f107 0318 	add.w	r3, r7, #24
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f7fd fbc8 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800cf94:	f107 0318 	add.w	r3, r7, #24
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fd fb46 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3724      	adds	r7, #36	; 0x24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd90      	pop	{r4, r7, pc}
 800cfa8:	08024240 	.word	0x08024240
 800cfac:	0802132c 	.word	0x0802132c

0800cfb0 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	4a05      	ldr	r2, [pc, #20]	; (800cfd0 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fe99 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08024240 	.word	0x08024240

0800cfd4 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f7ff ffe7 	bl	800cfb0 <_ZN25FeatureUnsupportedFailureD1Ev>
 800cfe2:	2134      	movs	r1, #52	; 0x34
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7fa fbb9 	bl	800775c <_ZdlPvj>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	4a05      	ldr	r2, [pc, #20]	; (800d014 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fe77 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	0802426c 	.word	0x0802426c

0800d018 <_ZN16BitsEqualFailureD0Ev>:
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ffe7 	bl	800cff4 <_ZN16BitsEqualFailureD1Ev>
 800d026:	2134      	movs	r1, #52	; 0x34
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7fa fb97 	bl	800775c <_ZdlPvj>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	4a05      	ldr	r2, [pc, #20]	; (800d058 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe fe55 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08024298 	.word	0x08024298

0800d05c <_ZN18BinaryEqualFailureD0Ev>:
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7ff ffe7 	bl	800d038 <_ZN18BinaryEqualFailureD1Ev>
 800d06a:	2134      	movs	r1, #52	; 0x34
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7fa fb75 	bl	800775c <_ZdlPvj>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4618      	mov	r0, r3
 800d076:	3708      	adds	r7, #8
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	4a05      	ldr	r2, [pc, #20]	; (800d09c <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fe33 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	080242c4 	.word	0x080242c4

0800d0a0 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7ff ffe7 	bl	800d07c <_ZN24StringEqualNoCaseFailureD1Ev>
 800d0ae:	2134      	movs	r1, #52	; 0x34
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7fa fb53 	bl	800775c <_ZdlPvj>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	4a05      	ldr	r2, [pc, #20]	; (800d0e0 <_ZN18StringEqualFailureD1Ev+0x20>)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fe fe11 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	080242f0 	.word	0x080242f0

0800d0e4 <_ZN18StringEqualFailureD0Ev>:
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff ffe7 	bl	800d0c0 <_ZN18StringEqualFailureD1Ev>
 800d0f2:	2134      	movs	r1, #52	; 0x34
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7fa fb31 	bl	800775c <_ZdlPvj>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	4a05      	ldr	r2, [pc, #20]	; (800d124 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe fdef 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4618      	mov	r0, r3
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	0802431c 	.word	0x0802431c

0800d128 <_ZN23SignedBytesEqualFailureD0Ev>:
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff ffe7 	bl	800d104 <_ZN23SignedBytesEqualFailureD1Ev>
 800d136:	2134      	movs	r1, #52	; 0x34
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7fa fb0f 	bl	800775c <_ZdlPvj>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4618      	mov	r0, r3
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	4a05      	ldr	r2, [pc, #20]	; (800d168 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fe fdcd 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	08024348 	.word	0x08024348

0800d16c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff ffe7 	bl	800d148 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800d17a:	2134      	movs	r1, #52	; 0x34
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7fa faed 	bl	800775c <_ZdlPvj>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	4a05      	ldr	r2, [pc, #20]	; (800d1ac <_ZN17LongsEqualFailureD1Ev+0x20>)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fdab 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	08024374 	.word	0x08024374

0800d1b0 <_ZN17LongsEqualFailureD0Ev>:
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ffe7 	bl	800d18c <_ZN17LongsEqualFailureD1Ev>
 800d1be:	2134      	movs	r1, #52	; 0x34
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7fa facb 	bl	800775c <_ZdlPvj>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	4a05      	ldr	r2, [pc, #20]	; (800d1f0 <_ZN12CheckFailureD1Ev+0x20>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fe fd89 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	080243a0 	.word	0x080243a0

0800d1f4 <_ZN12CheckFailureD0Ev>:
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff ffe7 	bl	800d1d0 <_ZN12CheckFailureD1Ev>
 800d202:	2134      	movs	r1, #52	; 0x34
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7fa faa9 	bl	800775c <_ZdlPvj>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	4a05      	ldr	r2, [pc, #20]	; (800d234 <_ZN15ContainsFailureD1Ev+0x20>)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4618      	mov	r0, r3
 800d226:	f7fe fd67 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	080243cc 	.word	0x080243cc

0800d238 <_ZN15ContainsFailureD0Ev>:
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff ffe7 	bl	800d214 <_ZN15ContainsFailureD1Ev>
 800d246:	2134      	movs	r1, #52	; 0x34
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7fa fa87 	bl	800775c <_ZdlPvj>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	4a05      	ldr	r2, [pc, #20]	; (800d278 <_ZN17ComparisonFailureD1Ev+0x20>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fe fd45 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	080243f8 	.word	0x080243f8

0800d27c <_ZN17ComparisonFailureD0Ev>:
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff ffe7 	bl	800d258 <_ZN17ComparisonFailureD1Ev>
 800d28a:	2134      	movs	r1, #52	; 0x34
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7fa fa65 	bl	800775c <_ZdlPvj>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4618      	mov	r0, r3
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	4a05      	ldr	r2, [pc, #20]	; (800d2bc <_ZN17CheckEqualFailureD1Ev+0x20>)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fd23 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	08024424 	.word	0x08024424

0800d2c0 <_ZN17CheckEqualFailureD0Ev>:
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7ff ffe7 	bl	800d29c <_ZN17CheckEqualFailureD1Ev>
 800d2ce:	2134      	movs	r1, #52	; 0x34
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fa fa43 	bl	800775c <_ZdlPvj>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	4a05      	ldr	r2, [pc, #20]	; (800d300 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fe fd01 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	08024450 	.word	0x08024450

0800d304 <_ZN19DoublesEqualFailureD0Ev>:
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff ffe7 	bl	800d2e0 <_ZN19DoublesEqualFailureD1Ev>
 800d312:	2134      	movs	r1, #52	; 0x34
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7fa fa21 	bl	800775c <_ZdlPvj>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	4a05      	ldr	r2, [pc, #20]	; (800d344 <_ZN13EqualsFailureD1Ev+0x20>)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	f7fe fcdf 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	0802447c 	.word	0x0802447c

0800d348 <_ZN13EqualsFailureD0Ev>:
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7ff ffe7 	bl	800d324 <_ZN13EqualsFailureD1Ev>
 800d356:	2134      	movs	r1, #52	; 0x34
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7fa f9ff 	bl	800775c <_ZdlPvj>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800d368:	b5b0      	push	{r4, r5, r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af02      	add	r7, sp, #8
 800d36e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800d370:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <_ZL13checkedMallocj+0x40>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	4798      	blx	r3
 800d378:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10e      	bne.n	800d39e <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800d380:	f004 f97e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 800d384:	4604      	mov	r4, r0
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	3368      	adds	r3, #104	; 0x68
 800d38a:	681d      	ldr	r5, [r3, #0]
 800d38c:	f004 f988 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d390:	4603      	mov	r3, r0
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	2325      	movs	r3, #37	; 0x25
 800d396:	4a05      	ldr	r2, [pc, #20]	; (800d3ac <_ZL13checkedMallocj+0x44>)
 800d398:	4905      	ldr	r1, [pc, #20]	; (800d3b0 <_ZL13checkedMallocj+0x48>)
 800d39a:	4620      	mov	r0, r4
 800d39c:	47a8      	blx	r5
    return mem;
 800d39e:	68fb      	ldr	r3, [r7, #12]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d3a8:	200000c4 	.word	0x200000c4
 800d3ac:	080213a0 	.word	0x080213a0
 800d3b0:	080213c0 	.word	0x080213c0

0800d3b4 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800d3b8:	4b04      	ldr	r3, [pc, #16]	; (800d3cc <_Z22getCurrentNewAllocatorv+0x18>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <_Z22getCurrentNewAllocatorv+0x10>
 800d3c0:	f000 f806 	bl	800d3d0 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800d3c4:	4b01      	ldr	r3, [pc, #4]	; (800d3cc <_Z22getCurrentNewAllocatorv+0x18>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20000690 	.word	0x20000690

0800d3d0 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800d3d4:	f000 f810 	bl	800d3f8 <_Z19defaultNewAllocatorv>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	4a02      	ldr	r2, [pc, #8]	; (800d3e4 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800d3dc:	6013      	str	r3, [r2, #0]
}
 800d3de:	bf00      	nop
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000690 	.word	0x20000690

0800d3e8 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	4801      	ldr	r0, [pc, #4]	; (800d3f4 <__tcf_0+0xc>)
 800d3ee:	f000 f909 	bl	800d604 <_ZN19TestMemoryAllocatorD1Ev>
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	2000069c 	.word	0x2000069c

0800d3f8 <_Z19defaultNewAllocatorv>:
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800d3fc:	4b13      	ldr	r3, [pc, #76]	; (800d44c <_Z19defaultNewAllocatorv+0x54>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	f3bf 8f5b 	dmb	ish
 800d404:	b2db      	uxtb	r3, r3
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	bf0c      	ite	eq
 800d40e:	2301      	moveq	r3, #1
 800d410:	2300      	movne	r3, #0
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	d016      	beq.n	800d446 <_Z19defaultNewAllocatorv+0x4e>
 800d418:	480c      	ldr	r0, [pc, #48]	; (800d44c <_Z19defaultNewAllocatorv+0x54>)
 800d41a:	f00f fc0d 	bl	801cc38 <__cxa_guard_acquire>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	bf14      	ite	ne
 800d424:	2301      	movne	r3, #1
 800d426:	2300      	moveq	r3, #0
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00b      	beq.n	800d446 <_Z19defaultNewAllocatorv+0x4e>
 800d42e:	4b08      	ldr	r3, [pc, #32]	; (800d450 <_Z19defaultNewAllocatorv+0x58>)
 800d430:	4a08      	ldr	r2, [pc, #32]	; (800d454 <_Z19defaultNewAllocatorv+0x5c>)
 800d432:	4909      	ldr	r1, [pc, #36]	; (800d458 <_Z19defaultNewAllocatorv+0x60>)
 800d434:	4809      	ldr	r0, [pc, #36]	; (800d45c <_Z19defaultNewAllocatorv+0x64>)
 800d436:	f000 f8c5 	bl	800d5c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d43a:	4804      	ldr	r0, [pc, #16]	; (800d44c <_Z19defaultNewAllocatorv+0x54>)
 800d43c:	f00f fc08 	bl	801cc50 <__cxa_guard_release>
 800d440:	4807      	ldr	r0, [pc, #28]	; (800d460 <_Z19defaultNewAllocatorv+0x68>)
 800d442:	f00f fc2c 	bl	801cc9e <atexit>
    return &allocator;
 800d446:	4b05      	ldr	r3, [pc, #20]	; (800d45c <_Z19defaultNewAllocatorv+0x64>)
}
 800d448:	4618      	mov	r0, r3
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	200006b0 	.word	0x200006b0
 800d450:	080213e0 	.word	0x080213e0
 800d454:	080213e8 	.word	0x080213e8
 800d458:	080213ec 	.word	0x080213ec
 800d45c:	2000069c 	.word	0x2000069c
 800d460:	0800d3e9 	.word	0x0800d3e9

0800d464 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800d464:	b580      	push	{r7, lr}
 800d466:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800d468:	4b04      	ldr	r3, [pc, #16]	; (800d47c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d101      	bne.n	800d474 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800d470:	f000 f806 	bl	800d480 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800d474:	4b01      	ldr	r3, [pc, #4]	; (800d47c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800d476:	681b      	ldr	r3, [r3, #0]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20000694 	.word	0x20000694

0800d480 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800d480:	b580      	push	{r7, lr}
 800d482:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800d484:	f000 f810 	bl	800d4a8 <_Z24defaultNewArrayAllocatorv>
 800d488:	4603      	mov	r3, r0
 800d48a:	4a02      	ldr	r2, [pc, #8]	; (800d494 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800d48c:	6013      	str	r3, [r2, #0]
}
 800d48e:	bf00      	nop
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20000694 	.word	0x20000694

0800d498 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	4801      	ldr	r0, [pc, #4]	; (800d4a4 <__tcf_1+0xc>)
 800d49e:	f000 f8b1 	bl	800d604 <_ZN19TestMemoryAllocatorD1Ev>
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	200006b4 	.word	0x200006b4

0800d4a8 <_Z24defaultNewArrayAllocatorv>:
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800d4ac:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <_Z24defaultNewArrayAllocatorv+0x54>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f3bf 8f5b 	dmb	ish
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	bf0c      	ite	eq
 800d4be:	2301      	moveq	r3, #1
 800d4c0:	2300      	movne	r3, #0
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d016      	beq.n	800d4f6 <_Z24defaultNewArrayAllocatorv+0x4e>
 800d4c8:	480c      	ldr	r0, [pc, #48]	; (800d4fc <_Z24defaultNewArrayAllocatorv+0x54>)
 800d4ca:	f00f fbb5 	bl	801cc38 <__cxa_guard_acquire>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	bf14      	ite	ne
 800d4d4:	2301      	movne	r3, #1
 800d4d6:	2300      	moveq	r3, #0
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <_Z24defaultNewArrayAllocatorv+0x4e>
 800d4de:	4b08      	ldr	r3, [pc, #32]	; (800d500 <_Z24defaultNewArrayAllocatorv+0x58>)
 800d4e0:	4a08      	ldr	r2, [pc, #32]	; (800d504 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800d4e2:	4909      	ldr	r1, [pc, #36]	; (800d508 <_Z24defaultNewArrayAllocatorv+0x60>)
 800d4e4:	4809      	ldr	r0, [pc, #36]	; (800d50c <_Z24defaultNewArrayAllocatorv+0x64>)
 800d4e6:	f000 f86d 	bl	800d5c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d4ea:	4804      	ldr	r0, [pc, #16]	; (800d4fc <_Z24defaultNewArrayAllocatorv+0x54>)
 800d4ec:	f00f fbb0 	bl	801cc50 <__cxa_guard_release>
 800d4f0:	4807      	ldr	r0, [pc, #28]	; (800d510 <_Z24defaultNewArrayAllocatorv+0x68>)
 800d4f2:	f00f fbd4 	bl	801cc9e <atexit>
    return &allocator;
 800d4f6:	4b05      	ldr	r3, [pc, #20]	; (800d50c <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	200006c8 	.word	0x200006c8
 800d500:	08021404 	.word	0x08021404
 800d504:	08021410 	.word	0x08021410
 800d508:	08021418 	.word	0x08021418
 800d50c:	200006b4 	.word	0x200006b4
 800d510:	0800d499 	.word	0x0800d499

0800d514 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <_Z25getCurrentMallocAllocatorv+0x18>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <_Z25getCurrentMallocAllocatorv+0x10>
 800d520:	f000 f806 	bl	800d530 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800d524:	4b01      	ldr	r3, [pc, #4]	; (800d52c <_Z25getCurrentMallocAllocatorv+0x18>)
 800d526:	681b      	ldr	r3, [r3, #0]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20000698 	.word	0x20000698

0800d530 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800d534:	f000 f810 	bl	800d558 <_Z22defaultMallocAllocatorv>
 800d538:	4603      	mov	r3, r0
 800d53a:	4a02      	ldr	r2, [pc, #8]	; (800d544 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800d53c:	6013      	str	r3, [r2, #0]
}
 800d53e:	bf00      	nop
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20000698 	.word	0x20000698

0800d548 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800d548:	b580      	push	{r7, lr}
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	4801      	ldr	r0, [pc, #4]	; (800d554 <__tcf_2+0xc>)
 800d54e:	f000 f859 	bl	800d604 <_ZN19TestMemoryAllocatorD1Ev>
 800d552:	bd80      	pop	{r7, pc}
 800d554:	200006cc 	.word	0x200006cc

0800d558 <_Z22defaultMallocAllocatorv>:
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800d55c:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <_Z22defaultMallocAllocatorv+0x54>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	f3bf 8f5b 	dmb	ish
 800d564:	b2db      	uxtb	r3, r3
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bf0c      	ite	eq
 800d56e:	2301      	moveq	r3, #1
 800d570:	2300      	movne	r3, #0
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d016      	beq.n	800d5a6 <_Z22defaultMallocAllocatorv+0x4e>
 800d578:	480c      	ldr	r0, [pc, #48]	; (800d5ac <_Z22defaultMallocAllocatorv+0x54>)
 800d57a:	f00f fb5d 	bl	801cc38 <__cxa_guard_acquire>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	bf14      	ite	ne
 800d584:	2301      	movne	r3, #1
 800d586:	2300      	moveq	r3, #0
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00b      	beq.n	800d5a6 <_Z22defaultMallocAllocatorv+0x4e>
 800d58e:	4b08      	ldr	r3, [pc, #32]	; (800d5b0 <_Z22defaultMallocAllocatorv+0x58>)
 800d590:	4a08      	ldr	r2, [pc, #32]	; (800d5b4 <_Z22defaultMallocAllocatorv+0x5c>)
 800d592:	4909      	ldr	r1, [pc, #36]	; (800d5b8 <_Z22defaultMallocAllocatorv+0x60>)
 800d594:	4809      	ldr	r0, [pc, #36]	; (800d5bc <_Z22defaultMallocAllocatorv+0x64>)
 800d596:	f000 f815 	bl	800d5c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d59a:	4804      	ldr	r0, [pc, #16]	; (800d5ac <_Z22defaultMallocAllocatorv+0x54>)
 800d59c:	f00f fb58 	bl	801cc50 <__cxa_guard_release>
 800d5a0:	4807      	ldr	r0, [pc, #28]	; (800d5c0 <_Z22defaultMallocAllocatorv+0x68>)
 800d5a2:	f00f fb7c 	bl	801cc9e <atexit>
    return &allocator;
 800d5a6:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <_Z22defaultMallocAllocatorv+0x64>)
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	200006e0 	.word	0x200006e0
 800d5b0:	08021434 	.word	0x08021434
 800d5b4:	0802143c 	.word	0x0802143c
 800d5b8:	08021444 	.word	0x08021444
 800d5bc:	200006cc 	.word	0x200006cc
 800d5c0:	0800d549 	.word	0x0800d549

0800d5c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
 800d5d0:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800d5d2:	4a0b      	ldr	r2, [pc, #44]	; (800d600 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	601a      	str	r2, [r3, #0]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	605a      	str	r2, [r3, #4]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	609a      	str	r2, [r3, #8]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	60da      	str	r2, [r3, #12]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	741a      	strb	r2, [r3, #16]
{
}
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	08024508 	.word	0x08024508

0800d604 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	4a06      	ldr	r2, [pc, #24]	; (800d628 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	741a      	strb	r2, [r3, #16]
}
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4618      	mov	r0, r3
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	08024508 	.word	0x08024508

0800d62c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
}
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7ff ffe5 	bl	800d604 <_ZN19TestMemoryAllocatorD1Ev>
 800d63a:	2114      	movs	r1, #20
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7fa f88d 	bl	800775c <_ZdlPvj>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	7c1b      	ldrb	r3, [r3, #16]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3310      	adds	r3, #16
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	4798      	blx	r3
 800d67a:	4604      	mov	r4, r0
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3310      	adds	r3, #16
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6838      	ldr	r0, [r7, #0]
 800d686:	4798      	blx	r3
 800d688:	4603      	mov	r3, r0
 800d68a:	4619      	mov	r1, r3
 800d68c:	4620      	mov	r0, r4
 800d68e:	f7fc fa51 	bl	8009b34 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	bf0c      	ite	eq
 800d698:	2301      	moveq	r3, #1
 800d69a:	2300      	movne	r3, #0
 800d69c:	b2db      	uxtb	r3, r3
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	370c      	adds	r7, #12
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd90      	pop	{r4, r7, pc}
	...

0800d6a8 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	681c      	ldr	r4, [r3, #0]
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4a04      	ldr	r2, [pc, #16]	; (800d6d0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	47a0      	blx	r4
 800d6c4:	4603      	mov	r3, r0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	370c      	adds	r7, #12
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd90      	pop	{r4, r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	08021460 	.word	0x08021460

0800d6d4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800d6d4:	b590      	push	{r4, r7, lr}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af02      	add	r7, sp, #8
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	330c      	adds	r3, #12
 800d6e4:	681c      	ldr	r4, [r3, #0]
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	47a0      	blx	r4
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd90      	pop	{r4, r7, pc}
 800d6fc:	08021460 	.word	0x08021460

0800d700 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
 800d70c:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800d70e:	68b8      	ldr	r0, [r7, #8]
 800d710:	f7ff fe2a 	bl	800d368 <_ZL13checkedMallocj>
 800d714:	4603      	mov	r3, r0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800d72e:	4b04      	ldr	r3, [pc, #16]	; (800d740 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68b8      	ldr	r0, [r7, #8]
 800d734:	4798      	blx	r3
}
 800d736:	bf00      	nop
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	200000cc 	.word	0x200000cc

0800d744 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
    return name_;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
}
 800d750:	4618      	mov	r0, r3
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	689b      	ldr	r3, [r3, #8]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	370c      	adds	r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
    return free_name_;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	68db      	ldr	r3, [r3, #12]
}
 800d780:	4618      	mov	r0, r3
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
    return this;
 800d794:	687b      	ldr	r3, [r7, #4]
}
 800d796:	4618      	mov	r0, r3
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	4a05      	ldr	r2, [pc, #20]	; (800d7c4 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff ff25 	bl	800d604 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	080244d4 	.word	0x080244d4

0800d7c8 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
}
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff ffe7 	bl	800d7a4 <_ZN20NullUnknownAllocatorD1Ev>
 800d7d6:	2114      	movs	r1, #20
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7f9 ffbf 	bl	800775c <_ZdlPvj>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
 800d7f4:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
}
 800d812:	bf00      	nop
 800d814:	3714      	adds	r7, #20
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr
	...

0800d820 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	4b06      	ldr	r3, [pc, #24]	; (800d844 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800d82c:	4a05      	ldr	r2, [pc, #20]	; (800d844 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800d82e:	4906      	ldr	r1, [pc, #24]	; (800d848 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800d830:	f7ff fec8 	bl	800d5c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d834:	4a05      	ldr	r2, [pc, #20]	; (800d84c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	601a      	str	r2, [r3, #0]
{
}
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	08021494 	.word	0x08021494
 800d848:	0802149c 	.word	0x0802149c
 800d84c:	080244d4 	.word	0x080244d4

0800d850 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
 800d854:	4801      	ldr	r0, [pc, #4]	; (800d85c <__tcf_3+0xc>)
 800d856:	f7ff ffa5 	bl	800d7a4 <_ZN20NullUnknownAllocatorD1Ev>
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	200006e4 	.word	0x200006e4

0800d860 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800d864:	4b12      	ldr	r3, [pc, #72]	; (800d8b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	f3bf 8f5b 	dmb	ish
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	bf0c      	ite	eq
 800d876:	2301      	moveq	r3, #1
 800d878:	2300      	movne	r3, #0
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d013      	beq.n	800d8a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800d880:	480b      	ldr	r0, [pc, #44]	; (800d8b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d882:	f00f f9d9 	bl	801cc38 <__cxa_guard_acquire>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	bf14      	ite	ne
 800d88c:	2301      	movne	r3, #1
 800d88e:	2300      	moveq	r3, #0
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d008      	beq.n	800d8a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800d896:	4807      	ldr	r0, [pc, #28]	; (800d8b4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800d898:	f7ff ffc2 	bl	800d820 <_ZN20NullUnknownAllocatorC1Ev>
 800d89c:	4804      	ldr	r0, [pc, #16]	; (800d8b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d89e:	f00f f9d7 	bl	801cc50 <__cxa_guard_release>
 800d8a2:	4805      	ldr	r0, [pc, #20]	; (800d8b8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800d8a4:	f00f f9fb 	bl	801cc9e <atexit>
    return &allocator;
 800d8a8:	4b02      	ldr	r3, [pc, #8]	; (800d8b4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200006f8 	.word	0x200006f8
 800d8b4:	200006e4 	.word	0x200006e4
 800d8b8:	0800d851 	.word	0x0800d851

0800d8bc <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
        return testCount_;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	689b      	ldr	r3, [r3, #8]
    }
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	699b      	ldr	r3, [r3, #24]
    }
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800d8f0:	4b05      	ldr	r3, [pc, #20]	; (800d908 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d103      	bne.n	800d900 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800d8f8:	f004 fa4a 	bl	8011d90 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	e001      	b.n	800d904 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800d900:	4b01      	ldr	r3, [pc, #4]	; (800d908 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800d902:	781b      	ldrb	r3, [r3, #0]
}
 800d904:	4618      	mov	r0, r3
 800d906:	bd80      	pop	{r7, pc}
 800d908:	20000084 	.word	0x20000084

0800d90c <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800d914:	4a0a      	ldr	r2, [pc, #40]	; (800d940 <_ZN10TestOutputC1Ev+0x34>)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	605a      	str	r2, [r3, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	721a      	strb	r2, [r3, #8]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	725a      	strb	r2, [r3, #9]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4a05      	ldr	r2, [pc, #20]	; (800d944 <_ZN10TestOutputC1Ev+0x38>)
 800d930:	60da      	str	r2, [r3, #12]
{
}
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	0802460c 	.word	0x0802460c
 800d944:	0802189c 	.word	0x0802189c

0800d948 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	4a04      	ldr	r2, [pc, #16]	; (800d964 <_ZN10TestOutputD1Ev+0x1c>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	601a      	str	r2, [r3, #0]
{
}
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	0802460c 	.word	0x0802460c

0800d968 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	460b      	mov	r3, r1
 800d972:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	78fa      	ldrb	r2, [r7, #3]
 800d978:	721a      	strb	r2, [r3, #8]
}
 800d97a:	bf00      	nop
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
    color_ = true;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	725a      	strb	r2, [r3, #9]
}
 800d994:	bf00      	nop
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3328      	adds	r3, #40	; 0x28
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	4798      	blx	r3
}
 800d9b8:	bf00      	nop
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800d9c0:	b590      	push	{r4, r7, lr}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	332c      	adds	r3, #44	; 0x2c
 800d9d0:	681c      	ldr	r4, [r3, #0]
 800d9d2:	f107 0308 	add.w	r3, r7, #8
 800d9d6:	6839      	ldr	r1, [r7, #0]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fd f8ff 	bl	800abdc <_Z10StringFroml>
 800d9de:	f107 0308 	add.w	r3, r7, #8
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fc fdf4 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	47a0      	blx	r4
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fc fe18 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800d9fa:	bf00      	nop
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd90      	pop	{r4, r7, pc}

0800da02 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800da02:	b590      	push	{r4, r7, lr}
 800da04:	b085      	sub	sp, #20
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
 800da0a:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	332c      	adds	r3, #44	; 0x2c
 800da12:	681c      	ldr	r4, [r3, #0]
 800da14:	f107 0308 	add.w	r3, r7, #8
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fd fb34 	bl	800b088 <_Z10StringFromj>
 800da20:	f107 0308 	add.w	r3, r7, #8
 800da24:	4618      	mov	r0, r3
 800da26:	f7fc fdd3 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800da2a:	4603      	mov	r3, r0
 800da2c:	4619      	mov	r1, r3
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	47a0      	blx	r4
 800da32:	f107 0308 	add.w	r3, r7, #8
 800da36:	4618      	mov	r0, r3
 800da38:	f7fc fdf7 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800da3c:	bf00      	nop
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	bd90      	pop	{r4, r7, pc}

0800da44 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800da44:	b590      	push	{r4, r7, lr}
 800da46:	b087      	sub	sp, #28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	332c      	adds	r3, #44	; 0x2c
 800da56:	681c      	ldr	r4, [r3, #0]
 800da58:	f107 0310 	add.w	r3, r7, #16
 800da5c:	2106      	movs	r1, #6
 800da5e:	ed97 0b00 	vldr	d0, [r7]
 800da62:	4618      	mov	r0, r3
 800da64:	f7fd faa6 	bl	800afb4 <_Z10StringFromdi>
 800da68:	f107 0310 	add.w	r3, r7, #16
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fc fdaf 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800da72:	4603      	mov	r3, r0
 800da74:	4619      	mov	r1, r3
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	47a0      	blx	r4
 800da7a:	f107 0310 	add.w	r3, r7, #16
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fc fdd3 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800da84:	bf00      	nop
 800da86:	371c      	adds	r7, #28
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd90      	pop	{r4, r7, pc}

0800da8c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
    p.print(s);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	332c      	adds	r3, #44	; 0x2c
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	4798      	blx	r3
    return p;
 800daa4:	687b      	ldr	r3, [r7, #4]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
	...

0800dab0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800dab0:	b590      	push	{r4, r7, lr}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	7a1b      	ldrb	r3, [r3, #8]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d01a      	beq.n	800daf8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	332c      	adds	r3, #44	; 0x2c
 800dac8:	681c      	ldr	r4, [r3, #0]
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3314      	adds	r3, #20
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f107 0208 	add.w	r2, r7, #8
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	4610      	mov	r0, r2
 800dada:	4798      	blx	r3
 800dadc:	f107 0308 	add.w	r3, r7, #8
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fc fd75 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800dae6:	4603      	mov	r3, r0
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	47a0      	blx	r4
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fc fd99 	bl	800a62a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	3318      	adds	r3, #24
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6838      	ldr	r0, [r7, #0]
 800db02:	4798      	blx	r3
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d007      	beq.n	800db1a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3344      	adds	r3, #68	; 0x44
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4907      	ldr	r1, [pc, #28]	; (800db30 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800db18:	e006      	b.n	800db28 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3344      	adds	r3, #68	; 0x44
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4904      	ldr	r1, [pc, #16]	; (800db34 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	4798      	blx	r3
}
 800db28:	bf00      	nop
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd90      	pop	{r4, r7, pc}
 800db30:	0802189c 	.word	0x0802189c
 800db34:	080218a0 	.word	0x080218a0

0800db38 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7a1b      	ldrb	r3, [r3, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d019      	beq.n	800db7e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	332c      	adds	r3, #44	; 0x2c
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4910      	ldr	r1, [pc, #64]	; (800db94 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3334      	adds	r3, #52	; 0x34
 800db5e:	681c      	ldr	r4, [r3, #0]
 800db60:	6838      	ldr	r0, [r7, #0]
 800db62:	f002 f845 	bl	800fbf0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800db66:	4603      	mov	r3, r0
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	47a0      	blx	r4
        print(" ms\n");
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	332c      	adds	r3, #44	; 0x2c
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4908      	ldr	r1, [pc, #32]	; (800db98 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800db7c:	e005      	b.n	800db8a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3358      	adds	r3, #88	; 0x58
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
}
 800db8a:	bf00      	nop
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd90      	pop	{r4, r7, pc}
 800db92:	bf00      	nop
 800db94:	080218a4 	.word	0x080218a4
 800db98:	080218a8 	.word	0x080218a8

0800db9c <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	332c      	adds	r3, #44	; 0x2c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	68d2      	ldr	r2, [r2, #12]
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	605a      	str	r2, [r3, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685a      	ldr	r2, [r3, #4]
 800dbc4:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800dbc6:	fb83 1302 	smull	r1, r3, r3, r2
 800dbca:	1119      	asrs	r1, r3, #4
 800dbcc:	17d3      	asrs	r3, r2, #31
 800dbce:	1acb      	subs	r3, r1, r3
 800dbd0:	2132      	movs	r1, #50	; 0x32
 800dbd2:	fb01 f303 	mul.w	r3, r1, r3
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	bf0c      	ite	eq
 800dbdc:	2301      	moveq	r3, #1
 800dbde:	2300      	movne	r3, #0
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d006      	beq.n	800dbf4 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	332c      	adds	r3, #44	; 0x2c
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4904      	ldr	r1, [pc, #16]	; (800dc00 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	4798      	blx	r3
}
 800dbf4:	bf00      	nop
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	51eb851f 	.word	0x51eb851f
 800dc00:	080218b0 	.word	0x080218b0

0800dc04 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	60da      	str	r2, [r3, #12]
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
}
 800dc3e:	bf00      	nop
 800dc40:	370c      	adds	r7, #12
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800dc60:	b590      	push	{r4, r7, lr}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
    print("\n");
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	332c      	adds	r3, #44	; 0x2c
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	496f      	ldr	r1, [pc, #444]	; (800de30 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800dc78:	6838      	ldr	r0, [r7, #0]
 800dc7a:	f7f8 f83d 	bl	8005cf8 <_ZNK10TestResult9isFailureEv>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800dc82:	6838      	ldr	r0, [r7, #0]
 800dc84:	f7f8 f82c 	bl	8005ce0 <_ZNK10TestResult15getFailureCountEv>
 800dc88:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d02b      	beq.n	800dce8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	7a5b      	ldrb	r3, [r3, #9]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d006      	beq.n	800dca6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	332c      	adds	r3, #44	; 0x2c
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4964      	ldr	r1, [pc, #400]	; (800de34 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	4798      	blx	r3
        }
        print("Errors (");
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	332c      	adds	r3, #44	; 0x2c
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4962      	ldr	r1, [pc, #392]	; (800de38 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	4798      	blx	r3
        if (failureCount > 0) {
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00e      	beq.n	800dcd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3334      	adds	r3, #52	; 0x34
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	4798      	blx	r3
            print(" failures, ");
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	332c      	adds	r3, #44	; 0x2c
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	495a      	ldr	r1, [pc, #360]	; (800de3c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	4798      	blx	r3
 800dcd6:	e019      	b.n	800dd0c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	332c      	adds	r3, #44	; 0x2c
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4957      	ldr	r1, [pc, #348]	; (800de40 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	4798      	blx	r3
 800dce6:	e011      	b.n	800dd0c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	7a5b      	ldrb	r3, [r3, #9]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d006      	beq.n	800dcfe <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	332c      	adds	r3, #44	; 0x2c
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4952      	ldr	r1, [pc, #328]	; (800de44 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	4798      	blx	r3
        }
        print("OK (");
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	332c      	adds	r3, #44	; 0x2c
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4950      	ldr	r1, [pc, #320]	; (800de48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	4798      	blx	r3
    }
    print(result.getTestCount());
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	3334      	adds	r3, #52	; 0x34
 800dd12:	681c      	ldr	r4, [r3, #0]
 800dd14:	6838      	ldr	r0, [r7, #0]
 800dd16:	f7ff fdd1 	bl	800d8bc <_ZNK10TestResult12getTestCountEv>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	47a0      	blx	r4
    print(" tests, ");
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	332c      	adds	r3, #44	; 0x2c
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4948      	ldr	r1, [pc, #288]	; (800de4c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	4798      	blx	r3
    print(result.getRunCount());
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3334      	adds	r3, #52	; 0x34
 800dd36:	681c      	ldr	r4, [r3, #0]
 800dd38:	6838      	ldr	r0, [r7, #0]
 800dd3a:	f7f7 ffb9 	bl	8005cb0 <_ZNK10TestResult11getRunCountEv>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	47a0      	blx	r4
    print(" ran, ");
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	332c      	adds	r3, #44	; 0x2c
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4940      	ldr	r1, [pc, #256]	; (800de50 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	4798      	blx	r3
    print(result.getCheckCount());
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3334      	adds	r3, #52	; 0x34
 800dd5a:	681c      	ldr	r4, [r3, #0]
 800dd5c:	6838      	ldr	r0, [r7, #0]
 800dd5e:	f7f8 fc13 	bl	8006588 <_ZNK10TestResult13getCheckCountEv>
 800dd62:	4603      	mov	r3, r0
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	47a0      	blx	r4
    print(" checks, ");
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	332c      	adds	r3, #44	; 0x2c
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4938      	ldr	r1, [pc, #224]	; (800de54 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	4798      	blx	r3
    print(result.getIgnoredCount());
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3334      	adds	r3, #52	; 0x34
 800dd7e:	681c      	ldr	r4, [r3, #0]
 800dd80:	6838      	ldr	r0, [r7, #0]
 800dd82:	f7f7 ffa1 	bl	8005cc8 <_ZNK10TestResult15getIgnoredCountEv>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	47a0      	blx	r4
    print(" ignored, ");
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	332c      	adds	r3, #44	; 0x2c
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4930      	ldr	r1, [pc, #192]	; (800de58 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	3334      	adds	r3, #52	; 0x34
 800dda2:	681c      	ldr	r4, [r3, #0]
 800dda4:	6838      	ldr	r0, [r7, #0]
 800dda6:	f7ff fd95 	bl	800d8d4 <_ZNK10TestResult19getFilteredOutCountEv>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	47a0      	blx	r4
    print(" filtered out, ");
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	332c      	adds	r3, #44	; 0x2c
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4928      	ldr	r1, [pc, #160]	; (800de5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3334      	adds	r3, #52	; 0x34
 800ddc6:	681c      	ldr	r4, [r3, #0]
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	f001 ff05 	bl	800fbd8 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	47a0      	blx	r4
    print(" ms)");
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	332c      	adds	r3, #44	; 0x2c
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4920      	ldr	r1, [pc, #128]	; (800de60 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	4798      	blx	r3
    if (color_) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7a5b      	ldrb	r3, [r3, #9]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d006      	beq.n	800ddfa <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	332c      	adds	r3, #44	; 0x2c
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	491b      	ldr	r1, [pc, #108]	; (800de64 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d009      	beq.n	800de14 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	332c      	adds	r3, #44	; 0x2c
 800de0c:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800de0e:	4916      	ldr	r1, [pc, #88]	; (800de68 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	4798      	blx	r3
    }
    print("\n\n");
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	332c      	adds	r3, #44	; 0x2c
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4913      	ldr	r1, [pc, #76]	; (800de6c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	4798      	blx	r3

    dotCount_ = 0;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	605a      	str	r2, [r3, #4]
}
 800de28:	bf00      	nop
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd90      	pop	{r4, r7, pc}
 800de30:	080218b0 	.word	0x080218b0
 800de34:	080218b4 	.word	0x080218b4
 800de38:	080218bc 	.word	0x080218bc
 800de3c:	080218c8 	.word	0x080218c8
 800de40:	080218d4 	.word	0x080218d4
 800de44:	080218e4 	.word	0x080218e4
 800de48:	080218ec 	.word	0x080218ec
 800de4c:	080218f4 	.word	0x080218f4
 800de50:	08021900 	.word	0x08021900
 800de54:	08021908 	.word	0x08021908
 800de58:	08021914 	.word	0x08021914
 800de5c:	08021920 	.word	0x08021920
 800de60:	08021930 	.word	0x08021930
 800de64:	08021938 	.word	0x08021938
 800de68:	0802193c 	.word	0x0802193c
 800de6c:	080219e0 	.word	0x080219e0

0800de70 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d922      	bls.n	800dec8 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	332c      	adds	r3, #44	; 0x2c
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4911      	ldr	r1, [pc, #68]	; (800ded0 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	4798      	blx	r3
        print(number);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3334      	adds	r3, #52	; 0x34
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	68b9      	ldr	r1, [r7, #8]
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	4798      	blx	r3
        print(" of ");
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	332c      	adds	r3, #44	; 0x2c
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	490b      	ldr	r1, [pc, #44]	; (800ded4 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	4798      	blx	r3
        print(total);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	3334      	adds	r3, #52	; 0x34
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	4798      	blx	r3
        print("\n");
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	332c      	adds	r3, #44	; 0x2c
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4905      	ldr	r1, [pc, #20]	; (800ded8 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	4798      	blx	r3
    }
}
 800dec8:	bf00      	nop
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	080219e4 	.word	0x080219e4
 800ded4:	080219f0 	.word	0x080219f0
 800ded8:	080218b0 	.word	0x080218b0

0800dedc <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800dee6:	6838      	ldr	r0, [r7, #0]
 800dee8:	f7fd ffa1 	bl	800be2e <_ZNK11TestFailure17isOutsideTestFileEv>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d105      	bne.n	800defe <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800def2:	6838      	ldr	r0, [r7, #0]
 800def4:	f7fd ffad 	bl	800be52 <_ZNK11TestFailure18isInHelperFunctionEv>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800defe:	2301      	movs	r3, #1
 800df00:	e000      	b.n	800df04 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800df02:	2300      	movs	r3, #0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f81d 	bl	800df4a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800df10:	e003      	b.n	800df1a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 f86b 	bl	800dff0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3318      	adds	r3, #24
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f107 0208 	add.w	r2, r7, #8
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	4610      	mov	r0, r2
 800df2a:	4798      	blx	r3
 800df2c:	f107 0308 	add.w	r3, r7, #8
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f8b2 	bl	800e09c <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800df38:	f107 0308 	add.w	r3, r7, #8
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fc fb74 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b088      	sub	sp, #32
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	331c      	adds	r3, #28
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f107 0208 	add.w	r2, r7, #8
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	4610      	mov	r0, r2
 800df64:	4798      	blx	r3
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	3320      	adds	r3, #32
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6838      	ldr	r0, [r7, #0]
 800df70:	4798      	blx	r3
 800df72:	4602      	mov	r2, r0
 800df74:	f107 0308 	add.w	r3, r7, #8
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f8be 	bl	800e0fc <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800df80:	f107 0308 	add.w	r3, r7, #8
 800df84:	4618      	mov	r0, r3
 800df86:	f7fc fb50 	bl	800a62a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	330c      	adds	r3, #12
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f107 0210 	add.w	r2, r7, #16
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	4610      	mov	r0, r2
 800df9a:	4798      	blx	r3
 800df9c:	f107 0310 	add.w	r3, r7, #16
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 f85c 	bl	800e060 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800dfa8:	f107 0310 	add.w	r3, r7, #16
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fc fb3c 	bl	800a62a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f107 0218 	add.w	r2, r7, #24
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3314      	adds	r3, #20
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	6838      	ldr	r0, [r7, #0]
 800dfce:	4798      	blx	r3
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	f107 0318 	add.w	r3, r7, #24
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f88f 	bl	800e0fc <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800dfde:	f107 0318 	add.w	r3, r7, #24
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fc fb21 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800dfe8:	bf00      	nop
 800dfea:	3720      	adds	r7, #32
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3308      	adds	r3, #8
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f107 0208 	add.w	r2, r7, #8
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3314      	adds	r3, #20
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6838      	ldr	r0, [r7, #0]
 800e016:	4798      	blx	r3
 800e018:	4602      	mov	r2, r0
 800e01a:	f107 0308 	add.w	r3, r7, #8
 800e01e:	4619      	mov	r1, r3
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f86b 	bl	800e0fc <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e026:	f107 0308 	add.w	r3, r7, #8
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc fafd 	bl	800a62a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	330c      	adds	r3, #12
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f107 0210 	add.w	r2, r7, #16
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	4610      	mov	r0, r2
 800e040:	4798      	blx	r3
 800e042:	f107 0310 	add.w	r3, r7, #16
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f809 	bl	800e060 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800e04e:	f107 0310 	add.w	r3, r7, #16
 800e052:	4618      	mov	r0, r3
 800e054:	f7fc fae9 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800e058:	bf00      	nop
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	332c      	adds	r3, #44	; 0x2c
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4909      	ldr	r1, [pc, #36]	; (800e098 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	4798      	blx	r3
    print(testName.asCharString());
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	332c      	adds	r3, #44	; 0x2c
 800e07e:	681c      	ldr	r4, [r3, #0]
 800e080:	6838      	ldr	r0, [r7, #0]
 800e082:	f7fc faa5 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800e086:	4603      	mov	r3, r0
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	47a0      	blx	r4
}
 800e08e:	bf00      	nop
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	bd90      	pop	{r4, r7, pc}
 800e096:	bf00      	nop
 800e098:	080219f8 	.word	0x080219f8

0800e09c <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800e09c:	b590      	push	{r4, r7, lr}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
    print("\n");
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	332c      	adds	r3, #44	; 0x2c
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4910      	ldr	r1, [pc, #64]	; (800e0f0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	4798      	blx	r3
    print("\t");
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	332c      	adds	r3, #44	; 0x2c
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	490d      	ldr	r1, [pc, #52]	; (800e0f4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	4798      	blx	r3
    print(reason.asCharString());
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	332c      	adds	r3, #44	; 0x2c
 800e0c8:	681c      	ldr	r4, [r3, #0]
 800e0ca:	6838      	ldr	r0, [r7, #0]
 800e0cc:	f7fc fa80 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	47a0      	blx	r4
    print("\n\n");
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	332c      	adds	r3, #44	; 0x2c
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4905      	ldr	r1, [pc, #20]	; (800e0f8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	4798      	blx	r3
}
 800e0e6:	bf00      	nop
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd90      	pop	{r4, r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	080218b0 	.word	0x080218b0
 800e0f4:	08021a08 	.word	0x08021a08
 800e0f8:	080219e0 	.word	0x080219e0

0800e0fc <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800e0fc:	b590      	push	{r4, r7, lr}
 800e0fe:	b089      	sub	sp, #36	; 0x24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800e108:	f7ff fbf0 	bl	800d8ec <_ZN10TestOutput21getWorkingEnvironmentEv>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	bf0c      	ite	eq
 800e112:	2301      	moveq	r3, #1
 800e114:	2300      	movne	r3, #0
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d015      	beq.n	800e148 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	3354      	adds	r3, #84	; 0x54
 800e122:	681c      	ldr	r4, [r3, #0]
 800e124:	f107 0310 	add.w	r3, r7, #16
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fb ff19 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800e130:	f107 0310 	add.w	r3, r7, #16
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	4619      	mov	r1, r3
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	47a0      	blx	r4
 800e13c:	f107 0310 	add.w	r3, r7, #16
 800e140:	4618      	mov	r0, r3
 800e142:	f7fc fa72 	bl	800a62a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800e146:	e014      	b.n	800e172 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3350      	adds	r3, #80	; 0x50
 800e14e:	681c      	ldr	r4, [r3, #0]
 800e150:	f107 0318 	add.w	r3, r7, #24
 800e154:	68b9      	ldr	r1, [r7, #8]
 800e156:	4618      	mov	r0, r3
 800e158:	f7fb ff03 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800e15c:	f107 0318 	add.w	r3, r7, #24
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	4619      	mov	r1, r3
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	47a0      	blx	r4
 800e168:	f107 0318 	add.w	r3, r7, #24
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fc fa5c 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800e172:	bf00      	nop
 800e174:	3724      	adds	r7, #36	; 0x24
 800e176:	46bd      	mov	sp, r7
 800e178:	bd90      	pop	{r4, r7, pc}
	...

0800e17c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800e17c:	b590      	push	{r4, r7, lr}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
    print("\n");
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	332c      	adds	r3, #44	; 0x2c
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4916      	ldr	r1, [pc, #88]	; (800e1ec <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	4798      	blx	r3
    print(file.asCharString());
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	332c      	adds	r3, #44	; 0x2c
 800e19c:	681c      	ldr	r4, [r3, #0]
 800e19e:	68b8      	ldr	r0, [r7, #8]
 800e1a0:	f7fc fa16 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	47a0      	blx	r4
    print(":");
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	332c      	adds	r3, #44	; 0x2c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	490e      	ldr	r1, [pc, #56]	; (800e1f0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	4798      	blx	r3
    print(lineNumber);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3334      	adds	r3, #52	; 0x34
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	4798      	blx	r3
    print(":");
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	332c      	adds	r3, #44	; 0x2c
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4907      	ldr	r1, [pc, #28]	; (800e1f0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	4798      	blx	r3
    print(" error:");
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	332c      	adds	r3, #44	; 0x2c
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	4905      	ldr	r1, [pc, #20]	; (800e1f4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	4798      	blx	r3
}
 800e1e4:	bf00      	nop
 800e1e6:	3714      	adds	r7, #20
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd90      	pop	{r4, r7, pc}
 800e1ec:	080218b0 	.word	0x080218b0
 800e1f0:	08021a0c 	.word	0x08021a0c
 800e1f4:	08021a10 	.word	0x08021a10

0800e1f8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800e1f8:	b590      	push	{r4, r7, lr}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
    print("\n");
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	332c      	adds	r3, #44	; 0x2c
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4916      	ldr	r1, [pc, #88]	; (800e268 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	4798      	blx	r3
    print(file.asCharString());
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	332c      	adds	r3, #44	; 0x2c
 800e218:	681c      	ldr	r4, [r3, #0]
 800e21a:	68b8      	ldr	r0, [r7, #8]
 800e21c:	f7fc f9d8 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800e220:	4603      	mov	r3, r0
 800e222:	4619      	mov	r1, r3
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	47a0      	blx	r4
    print("(");
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	332c      	adds	r3, #44	; 0x2c
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	490e      	ldr	r1, [pc, #56]	; (800e26c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	4798      	blx	r3
    print(lineNumber);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3334      	adds	r3, #52	; 0x34
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	6879      	ldr	r1, [r7, #4]
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	4798      	blx	r3
    print("):");
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	332c      	adds	r3, #44	; 0x2c
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4908      	ldr	r1, [pc, #32]	; (800e270 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	4798      	blx	r3
    print(" error:");
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	332c      	adds	r3, #44	; 0x2c
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4906      	ldr	r1, [pc, #24]	; (800e274 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	4798      	blx	r3
}
 800e260:	bf00      	nop
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	bd90      	pop	{r4, r7, pc}
 800e268:	080218b0 	.word	0x080218b0
 800e26c:	08021a18 	.word	0x08021a18
 800e270:	08021a1c 	.word	0x08021a1c
 800e274:	08021a10 	.word	0x08021a10

0800e278 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	7a1b      	ldrb	r3, [r3, #8]
 800e286:	2b02      	cmp	r3, #2
 800e288:	d106      	bne.n	800e298 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3328      	adds	r3, #40	; 0x28
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	4798      	blx	r3
}
 800e298:	bf00      	nop
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d009      	beq.n	800e2c6 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800e2b2:	4b0a      	ldr	r3, [pc, #40]	; (800e2dc <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	7812      	ldrb	r2, [r2, #0]
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	4798      	blx	r3
        s++;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e2c4:	e7f1      	b.n	800e2aa <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	334c      	adds	r3, #76	; 0x4c
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	4798      	blx	r3
}
 800e2d2:	bf00      	nop
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	200000bc 	.word	0x200000bc

0800e2e0 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800e2e8:	4b03      	ldr	r3, [pc, #12]	; (800e2f8 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4798      	blx	r3
}
 800e2ee:	bf00      	nop
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	200000c0 	.word	0x200000c0

0800e2fc <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4618      	mov	r0, r3
 800e308:	f7ff fb00 	bl	800d90c <_ZN10TestOutputC1Ev>
 800e30c:	4a06      	ldr	r2, [pc, #24]	; (800e328 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	611a      	str	r2, [r3, #16]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	615a      	str	r2, [r3, #20]
{
}
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	0802453c 	.word	0x0802453c

0800e32c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	4a0e      	ldr	r2, [pc, #56]	; (800e370 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d004      	beq.n	800e34c <_ZN19CompositeTestOutputD1Ev+0x20>
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	3204      	adds	r2, #4
 800e346:	6812      	ldr	r2, [r2, #0]
 800e348:	4618      	mov	r0, r3
 800e34a:	4790      	blx	r2
  delete outputTwo_;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d004      	beq.n	800e35e <_ZN19CompositeTestOutputD1Ev+0x32>
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	3204      	adds	r2, #4
 800e358:	6812      	ldr	r2, [r2, #0]
 800e35a:	4618      	mov	r0, r3
 800e35c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff faf1 	bl	800d948 <_ZN10TestOutputD1Ev>
}
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4618      	mov	r0, r3
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	0802453c 	.word	0x0802453c

0800e374 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
}
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7ff ffd5 	bl	800e32c <_ZN19CompositeTestOutputD1Ev>
 800e382:	2118      	movs	r1, #24
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f9 f9e9 	bl	800775c <_ZdlPvj>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d004      	beq.n	800e3b0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	3204      	adds	r2, #4
 800e3aa:	6812      	ldr	r2, [r2, #0]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	4790      	blx	r2
  outputOne_ = output;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	611a      	str	r2, [r3, #16]
}
 800e3b6:	bf00      	nop
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b082      	sub	sp, #8
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	695b      	ldr	r3, [r3, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d004      	beq.n	800e3da <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	3204      	adds	r2, #4
 800e3d4:	6812      	ldr	r2, [r2, #0]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	4790      	blx	r2
  outputTwo_ = output;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	683a      	ldr	r2, [r7, #0]
 800e3de:	615a      	str	r2, [r3, #20]
}
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d008      	beq.n	800e40a <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	691a      	ldr	r2, [r3, #16]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3308      	adds	r3, #8
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4610      	mov	r0, r2
 800e408:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	695b      	ldr	r3, [r3, #20]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d008      	beq.n	800e424 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	695a      	ldr	r2, [r3, #20]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	695b      	ldr	r3, [r3, #20]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3308      	adds	r3, #8
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
}
 800e424:	bf00      	nop
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d009      	beq.n	800e452 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	691a      	ldr	r2, [r3, #16]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	330c      	adds	r3, #12
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6839      	ldr	r1, [r7, #0]
 800e44e:	4610      	mov	r0, r2
 800e450:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d009      	beq.n	800e46e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	695a      	ldr	r2, [r3, #20]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	330c      	adds	r3, #12
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	4610      	mov	r0, r2
 800e46c:	4798      	blx	r3
}
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b082      	sub	sp, #8
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d009      	beq.n	800e49c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	691a      	ldr	r2, [r3, #16]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3310      	adds	r3, #16
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6839      	ldr	r1, [r7, #0]
 800e498:	4610      	mov	r0, r2
 800e49a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d009      	beq.n	800e4b8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	695a      	ldr	r2, [r3, #20]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	695b      	ldr	r3, [r3, #20]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3310      	adds	r3, #16
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	6839      	ldr	r1, [r7, #0]
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	4798      	blx	r3
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d009      	beq.n	800e4e6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	691a      	ldr	r2, [r3, #16]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	691b      	ldr	r3, [r3, #16]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	3314      	adds	r3, #20
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	4610      	mov	r0, r2
 800e4e4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	695b      	ldr	r3, [r3, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d009      	beq.n	800e502 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	695a      	ldr	r2, [r3, #20]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3314      	adds	r3, #20
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6839      	ldr	r1, [r7, #0]
 800e4fe:	4610      	mov	r0, r2
 800e500:	4798      	blx	r3
}
 800e502:	bf00      	nop
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	691b      	ldr	r3, [r3, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d009      	beq.n	800e530 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	691a      	ldr	r2, [r3, #16]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3318      	adds	r3, #24
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	4610      	mov	r0, r2
 800e52e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	695b      	ldr	r3, [r3, #20]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d009      	beq.n	800e54c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	695a      	ldr	r2, [r3, #20]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	695b      	ldr	r3, [r3, #20]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3318      	adds	r3, #24
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	4610      	mov	r0, r2
 800e54a:	4798      	blx	r3
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	691b      	ldr	r3, [r3, #16]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d009      	beq.n	800e57a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	691a      	ldr	r2, [r3, #16]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	691b      	ldr	r3, [r3, #16]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	331c      	adds	r3, #28
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6839      	ldr	r1, [r7, #0]
 800e576:	4610      	mov	r0, r2
 800e578:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	695b      	ldr	r3, [r3, #20]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d009      	beq.n	800e596 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	695a      	ldr	r2, [r3, #20]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	331c      	adds	r3, #28
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6839      	ldr	r1, [r7, #0]
 800e592:	4610      	mov	r0, r2
 800e594:	4798      	blx	r3
}
 800e596:	bf00      	nop
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d009      	beq.n	800e5c6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	691a      	ldr	r2, [r3, #16]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3320      	adds	r3, #32
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	78f9      	ldrb	r1, [r7, #3]
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d009      	beq.n	800e5e2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	695a      	ldr	r2, [r3, #20]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	695b      	ldr	r3, [r3, #20]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	3320      	adds	r3, #32
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	78f9      	ldrb	r1, [r7, #3]
 800e5de:	4610      	mov	r0, r2
 800e5e0:	4798      	blx	r3
}
 800e5e2:	bf00      	nop
 800e5e4:	3708      	adds	r7, #8
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b082      	sub	sp, #8
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d008      	beq.n	800e60c <_ZN19CompositeTestOutput5colorEv+0x22>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	691a      	ldr	r2, [r3, #16]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	691b      	ldr	r3, [r3, #16]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3324      	adds	r3, #36	; 0x24
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4610      	mov	r0, r2
 800e60a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d008      	beq.n	800e626 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	695a      	ldr	r2, [r3, #20]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	695b      	ldr	r3, [r3, #20]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	3324      	adds	r3, #36	; 0x24
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4610      	mov	r0, r2
 800e624:	4798      	blx	r3
}
 800e626:	bf00      	nop
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b082      	sub	sp, #8
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d009      	beq.n	800e654 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	691a      	ldr	r2, [r3, #16]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	691b      	ldr	r3, [r3, #16]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	3328      	adds	r3, #40	; 0x28
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	4610      	mov	r0, r2
 800e652:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	695b      	ldr	r3, [r3, #20]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d009      	beq.n	800e670 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	695a      	ldr	r2, [r3, #20]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	695b      	ldr	r3, [r3, #20]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3328      	adds	r3, #40	; 0x28
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	6839      	ldr	r1, [r7, #0]
 800e66c:	4610      	mov	r0, r2
 800e66e:	4798      	blx	r3
}
 800e670:	bf00      	nop
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	691b      	ldr	r3, [r3, #16]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d009      	beq.n	800e69e <_ZN19CompositeTestOutput5printEPKc+0x26>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	691a      	ldr	r2, [r3, #16]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	691b      	ldr	r3, [r3, #16]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	332c      	adds	r3, #44	; 0x2c
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	4610      	mov	r0, r2
 800e69c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d009      	beq.n	800e6ba <_ZN19CompositeTestOutput5printEPKc+0x42>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	695a      	ldr	r2, [r3, #20]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	332c      	adds	r3, #44	; 0x2c
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	6839      	ldr	r1, [r7, #0]
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	4798      	blx	r3
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	691b      	ldr	r3, [r3, #16]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d009      	beq.n	800e6e8 <_ZN19CompositeTestOutput5printEl+0x26>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	691a      	ldr	r2, [r3, #16]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3330      	adds	r3, #48	; 0x30
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	695b      	ldr	r3, [r3, #20]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d009      	beq.n	800e704 <_ZN19CompositeTestOutput5printEl+0x42>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	695a      	ldr	r2, [r3, #20]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3330      	adds	r3, #48	; 0x30
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6839      	ldr	r1, [r7, #0]
 800e700:	4610      	mov	r0, r2
 800e702:	4798      	blx	r3
}
 800e704:	bf00      	nop
 800e706:	3708      	adds	r7, #8
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d009      	beq.n	800e732 <_ZN19CompositeTestOutput5printEj+0x26>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	691a      	ldr	r2, [r3, #16]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	3334      	adds	r3, #52	; 0x34
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	4610      	mov	r0, r2
 800e730:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d009      	beq.n	800e74e <_ZN19CompositeTestOutput5printEj+0x42>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	695a      	ldr	r2, [r3, #20]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	695b      	ldr	r3, [r3, #20]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3334      	adds	r3, #52	; 0x34
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	4610      	mov	r0, r2
 800e74c:	4798      	blx	r3
}
 800e74e:	bf00      	nop
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	691a      	ldr	r2, [r3, #16]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3338      	adds	r3, #56	; 0x38
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	ed97 0b00 	vldr	d0, [r7]
 800e77c:	4610      	mov	r0, r2
 800e77e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00a      	beq.n	800e79e <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	695a      	ldr	r2, [r3, #20]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	695b      	ldr	r3, [r3, #20]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	3338      	adds	r3, #56	; 0x38
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	ed97 0b00 	vldr	d0, [r7]
 800e79a:	4610      	mov	r0, r2
 800e79c:	4798      	blx	r3
}
 800e79e:	bf00      	nop
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d009      	beq.n	800e7cc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	691a      	ldr	r2, [r3, #16]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	333c      	adds	r3, #60	; 0x3c
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d009      	beq.n	800e7e8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	695a      	ldr	r2, [r3, #20]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	695b      	ldr	r3, [r3, #20]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	333c      	adds	r3, #60	; 0x3c
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	4798      	blx	r3
}
 800e7e8:	bf00      	nop
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d009      	beq.n	800e816 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	691a      	ldr	r2, [r3, #16]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3344      	adds	r3, #68	; 0x44
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	4610      	mov	r0, r2
 800e814:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d009      	beq.n	800e832 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	695a      	ldr	r2, [r3, #20]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3344      	adds	r3, #68	; 0x44
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6839      	ldr	r1, [r7, #0]
 800e82e:	4610      	mov	r0, r2
 800e830:	4798      	blx	r3
}
 800e832:	bf00      	nop
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b082      	sub	sp, #8
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d008      	beq.n	800e85c <_ZN19CompositeTestOutput5flushEv+0x22>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	691a      	ldr	r2, [r3, #16]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	334c      	adds	r3, #76	; 0x4c
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4610      	mov	r0, r2
 800e85a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d008      	beq.n	800e876 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	695a      	ldr	r2, [r3, #20]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	334c      	adds	r3, #76	; 0x4c
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4610      	mov	r0, r2
 800e874:	4798      	blx	r3
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800e87e:	b480      	push	{r7}
 800e880:	b085      	sub	sp, #20
 800e882:	af00      	add	r7, sp, #0
 800e884:	60f8      	str	r0, [r7, #12]
 800e886:	60b9      	str	r1, [r7, #8]
 800e888:	607a      	str	r2, [r7, #4]
    }
 800e88a:	bf00      	nop
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800e896:	b480      	push	{r7}
 800e898:	b085      	sub	sp, #20
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	607a      	str	r2, [r7, #4]
    }
 800e8a2:	bf00      	nop
 800e8a4:	3714      	adds	r7, #20
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
	...

0800e8b0 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800e8ba:	4a0b      	ldr	r2, [pc, #44]	; (800e8e8 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	601a      	str	r2, [r3, #0]
 800e8c0:	f000 f9ce 	bl	800ec60 <_ZN14NullTestPlugin8instanceEv>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	605a      	str	r2, [r3, #4]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3308      	adds	r3, #8
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fb fb46 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	741a      	strb	r2, [r3, #16]
{
}
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	080246f8 	.word	0x080246f8

0800e8ec <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800e8f6:	4a0a      	ldr	r2, [pc, #40]	; (800e920 <_ZN10TestPluginC1EPS_+0x34>)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	605a      	str	r2, [r3, #4]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	3308      	adds	r3, #8
 800e906:	4907      	ldr	r1, [pc, #28]	; (800e924 <_ZN10TestPluginC1EPS_+0x38>)
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fb fad6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2201      	movs	r2, #1
 800e912:	741a      	strb	r2, [r3, #16]
{
}
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	080246f8 	.word	0x080246f8
 800e924:	08021a20 	.word	0x08021a20

0800e928 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	4a06      	ldr	r2, [pc, #24]	; (800e94c <_ZN10TestPluginD1Ev+0x24>)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	3308      	adds	r3, #8
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fb fe75 	bl	800a62a <_ZN12SimpleStringD1Ev>
{
}
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	080246f8 	.word	0x080246f8

0800e950 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
}
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7ff ffe5 	bl	800e928 <_ZN10TestPluginD1Ev>
 800e95e:	2114      	movs	r1, #20
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f7f8 fefb 	bl	800775c <_ZdlPvj>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4618      	mov	r0, r3
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	683a      	ldr	r2, [r7, #0]
 800e97e:	605a      	str	r2, [r3, #4]
    return this;
 800e980:	687b      	ldr	r3, [r7, #4]
}
 800e982:	4618      	mov	r0, r3
 800e984:	370c      	adds	r7, #12
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b084      	sub	sp, #16
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	7c1b      	ldrb	r3, [r3, #16]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d007      	beq.n	800e9b2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	68b9      	ldr	r1, [r7, #8]
 800e9ae:	68f8      	ldr	r0, [r7, #12]
 800e9b0:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6858      	ldr	r0, [r3, #4]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3314      	adds	r3, #20
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	68b9      	ldr	r1, [r7, #8]
 800e9c4:	4798      	blx	r3
}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	60f8      	str	r0, [r7, #12]
 800e9d6:	60b9      	str	r1, [r7, #8]
 800e9d8:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	6858      	ldr	r0, [r3, #4]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3318      	adds	r3, #24
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	68b9      	ldr	r1, [r7, #8]
 800e9ec:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	7c1b      	ldrb	r3, [r3, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d007      	beq.n	800ea06 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	330c      	adds	r3, #12
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	68b9      	ldr	r1, [r7, #8]
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	4798      	blx	r3
}
 800ea06:	bf00      	nop
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800ea0e:	b590      	push	{r4, r7, lr}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	60f8      	str	r0, [r7, #12]
 800ea16:	60b9      	str	r1, [r7, #8]
 800ea18:	607a      	str	r2, [r7, #4]
 800ea1a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	331c      	adds	r3, #28
 800ea22:	681c      	ldr	r4, [r3, #0]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	68b9      	ldr	r1, [r7, #8]
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	47a0      	blx	r4
 800ea2e:	4603      	mov	r3, r0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd90      	pop	{r4, r7, pc}

0800ea38 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800ea38:	b590      	push	{r4, r7, lr}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]
 800ea44:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3310      	adds	r3, #16
 800ea4c:	681c      	ldr	r4, [r3, #0]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	47a0      	blx	r4
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d001      	beq.n	800ea62 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e011      	b.n	800ea86 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00c      	beq.n	800ea84 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	6858      	ldr	r0, [r3, #4]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	331c      	adds	r3, #28
 800ea76:	681c      	ldr	r4, [r3, #0]
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	47a0      	blx	r4
 800ea80:	4603      	mov	r3, r0
 800ea82:	e000      	b.n	800ea86 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd90      	pop	{r4, r7, pc}

0800ea8e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
    return name_;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	3308      	adds	r3, #8
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3308      	adds	r3, #8
 800eab4:	4619      	mov	r1, r3
 800eab6:	6838      	ldr	r0, [r7, #0]
 800eab8:	f7fb fdc3 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	e00d      	b.n	800eae2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d007      	beq.n	800eade <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff ffe6 	bl	800eaa6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800eada:	4603      	mov	r3, r0
 800eadc:	e001      	b.n	800eae2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	685b      	ldr	r3, [r3, #4]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800eaea:	b480      	push	{r7}
 800eaec:	b083      	sub	sp, #12
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
    return next_;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00e      	beq.n	800eb36 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff ffb6 	bl	800ea8e <_ZN10TestPlugin7getNameEv>
 800eb22:	4603      	mov	r3, r0
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fb fd8b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d001      	beq.n	800eb36 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800eb36:	2300      	movs	r3, #0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d007      	beq.n	800eb4c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	685a      	ldr	r2, [r3, #4]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3710      	adds	r7, #16
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800eb56:	b480      	push	{r7}
 800eb58:	b083      	sub	sp, #12
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	741a      	strb	r2, [r3, #16]
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	741a      	strb	r2, [r3, #16]
}
 800eb7e:	bf00      	nop
 800eb80:	370c      	adds	r7, #12
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b083      	sub	sp, #12
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
    return enabled_;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	7c1b      	ldrb	r3, [r3, #16]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr
	...

0800eba4 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7ff fe7c 	bl	800e8b0 <_ZN10TestPluginC1ERK12SimpleString>
 800ebb8:	4a05      	ldr	r2, [pc, #20]	; (800ebd0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800ebbe:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	601a      	str	r2, [r3, #0]
}
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	080246b4 	.word	0x080246b4
 800ebd4:	200006fc 	.word	0x200006fc

0800ebd8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	db0d      	blt.n	800ec0e <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800ebf2:	4a0c      	ldr	r2, [pc, #48]	; (800ec24 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ebfa:	490a      	ldr	r1, [pc, #40]	; (800ec24 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	440b      	add	r3, r1
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	e7ee      	b.n	800ebec <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800ec0e:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	371c      	adds	r7, #28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	200006fc 	.word	0x200006fc
 800ec24:	20000700 	.word	0x20000700

0800ec28 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2100      	movs	r1, #0
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7ff fe59 	bl	800e8ec <_ZN10TestPluginC1EPS_>
 800ec3a:	4a04      	ldr	r2, [pc, #16]	; (800ec4c <_ZN14NullTestPluginC1Ev+0x24>)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	601a      	str	r2, [r3, #0]
{
}
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4618      	mov	r0, r3
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	08024670 	.word	0x08024670

0800ec50 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800ec50:	b580      	push	{r7, lr}
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	4801      	ldr	r0, [pc, #4]	; (800ec5c <__tcf_0+0xc>)
 800ec56:	f000 f849 	bl	800ecec <_ZN14NullTestPluginD1Ev>
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20000800 	.word	0x20000800

0800ec60 <_ZN14NullTestPlugin8instanceEv>:
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800ec64:	4b12      	ldr	r3, [pc, #72]	; (800ecb0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	f3bf 8f5b 	dmb	ish
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	f003 0301 	and.w	r3, r3, #1
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	bf0c      	ite	eq
 800ec76:	2301      	moveq	r3, #1
 800ec78:	2300      	movne	r3, #0
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d013      	beq.n	800eca8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800ec80:	480b      	ldr	r0, [pc, #44]	; (800ecb0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ec82:	f00d ffd9 	bl	801cc38 <__cxa_guard_acquire>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	bf14      	ite	ne
 800ec8c:	2301      	movne	r3, #1
 800ec8e:	2300      	moveq	r3, #0
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d008      	beq.n	800eca8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800ec96:	4807      	ldr	r0, [pc, #28]	; (800ecb4 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800ec98:	f7ff ffc6 	bl	800ec28 <_ZN14NullTestPluginC1Ev>
 800ec9c:	4804      	ldr	r0, [pc, #16]	; (800ecb0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ec9e:	f00d ffd7 	bl	801cc50 <__cxa_guard_release>
 800eca2:	4805      	ldr	r0, [pc, #20]	; (800ecb8 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800eca4:	f00d fffb 	bl	801cc9e <atexit>
    return &_instance;
 800eca8:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	20000814 	.word	0x20000814
 800ecb4:	20000800 	.word	0x20000800
 800ecb8:	0800ec51 	.word	0x0800ec51

0800ecbc <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
}
 800ecc8:	bf00      	nop
 800ecca:	3714      	adds	r7, #20
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
}
 800ece0:	bf00      	nop
 800ece2:	3714      	adds	r7, #20
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	4a05      	ldr	r2, [pc, #20]	; (800ed0c <_ZN14NullTestPluginD1Ev+0x20>)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	601a      	str	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff fe13 	bl	800e928 <_ZN10TestPluginD1Ev>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	08024670 	.word	0x08024670

0800ed10 <_ZN14NullTestPluginD0Ev>:
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f7ff ffe7 	bl	800ecec <_ZN14NullTestPluginD1Ev>
 800ed1e:	2114      	movs	r1, #20
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7f8 fd1b 	bl	800775c <_ZdlPvj>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800ed38:	4a0f      	ldr	r2, [pc, #60]	; (800ed78 <_ZN12TestRegistryC1Ev+0x48>)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	601a      	str	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	605a      	str	r2, [r3, #4]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	609a      	str	r2, [r3, #8]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	60da      	str	r2, [r3, #12]
 800ed50:	f7ff ff86 	bl	800ec60 <_ZN14NullTestPlugin8instanceEv>
 800ed54:	4602      	mov	r2, r0
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	611a      	str	r2, [r3, #16]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	751a      	strb	r2, [r3, #20]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	619a      	str	r2, [r3, #24]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	771a      	strb	r2, [r3, #28]
{
}
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	0802473c 	.word	0x0802473c

0800ed7c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800ed7c:	b480      	push	{r7}
 800ed7e:	b083      	sub	sp, #12
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	4a04      	ldr	r2, [pc, #16]	; (800ed98 <_ZN12TestRegistryD1Ev+0x1c>)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	601a      	str	r2, [r3, #0]
{
}
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr
 800ed98:	0802473c 	.word	0x0802473c

0800ed9c <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
}
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff ffe9 	bl	800ed7c <_ZN12TestRegistryD1Ev>
 800edaa:	2120      	movs	r1, #32
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7f8 fcd5 	bl	800775c <_ZdlPvj>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4618      	mov	r0, r3
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	3308      	adds	r3, #8
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	6852      	ldr	r2, [r2, #4]
 800edd2:	4611      	mov	r1, r2
 800edd4:	6838      	ldr	r0, [r7, #0]
 800edd6:	4798      	blx	r3
 800edd8:	4602      	mov	r2, r0
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	605a      	str	r2, [r3, #4]
}
 800edde:	bf00      	nop
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b084      	sub	sp, #16
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800edf0:	2301      	movs	r3, #1
 800edf2:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	3308      	adds	r3, #8
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	6838      	ldr	r0, [r7, #0]
 800edfe:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	60bb      	str	r3, [r7, #8]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d05c      	beq.n	800eec6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d005      	beq.n	800ee20 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	3380      	adds	r3, #128	; 0x80
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	68b8      	ldr	r0, [r7, #8]
 800ee1e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	7f1b      	ldrb	r3, [r3, #28]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d005      	beq.n	800ee34 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3384      	adds	r3, #132	; 0x84
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68b8      	ldr	r0, [r7, #8]
 800ee32:	4798      	blx	r3

        if (groupStart) {
 800ee34:	7bfb      	ldrb	r3, [r7, #15]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d008      	beq.n	800ee4c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	3310      	adds	r3, #16
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68b9      	ldr	r1, [r7, #8]
 800ee44:	6838      	ldr	r0, [r7, #0]
 800ee46:	4798      	blx	r3
            groupStart = false;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3320      	adds	r3, #32
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6838      	ldr	r0, [r7, #0]
 800ee56:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	68b9      	ldr	r1, [r7, #8]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 fb79 	bl	800f554 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d016      	beq.n	800ee96 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	3318      	adds	r3, #24
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68b9      	ldr	r1, [r7, #8]
 800ee72:	6838      	ldr	r0, [r7, #0]
 800ee74:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3390      	adds	r3, #144	; 0x90
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	6911      	ldr	r1, [r2, #16]
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	68b8      	ldr	r0, [r7, #8]
 800ee86:	4798      	blx	r3
            result.currentTestEnded(test);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	331c      	adds	r3, #28
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68b9      	ldr	r1, [r7, #8]
 800ee92:	6838      	ldr	r0, [r7, #0]
 800ee94:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800ee96:	68b9      	ldr	r1, [r7, #8]
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 fa5b 	bl	800f354 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d008      	beq.n	800eeb6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800eea4:	2301      	movs	r3, #1
 800eea6:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	3314      	adds	r3, #20
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	68b9      	ldr	r1, [r7, #8]
 800eeb2:	6838      	ldr	r0, [r7, #0]
 800eeb4:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	330c      	adds	r3, #12
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	68b8      	ldr	r0, [r7, #8]
 800eec0:	4798      	blx	r3
 800eec2:	60b8      	str	r0, [r7, #8]
 800eec4:	e79f      	b.n	800ee06 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	330c      	adds	r3, #12
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	6838      	ldr	r0, [r7, #0]
 800eed0:	4798      	blx	r3
    currentRepetition_++;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	1c5a      	adds	r2, r3, #1
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	619a      	str	r2, [r3, #24]
}
 800eedc:	bf00      	nop
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800eee4:	b590      	push	{r4, r7, lr}
 800eee6:	b08f      	sub	sp, #60	; 0x3c
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800eeee:	f107 0314 	add.w	r3, r7, #20
 800eef2:	4953      	ldr	r1, [pc, #332]	; (800f040 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fa ffe0 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	637b      	str	r3, [r7, #52]	; 0x34
 800ef00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d04d      	beq.n	800efa2 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800ef06:	f107 030c 	add.w	r3, r7, #12
 800ef0a:	494d      	ldr	r1, [pc, #308]	; (800f040 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fa ffd4 	bl	8009eba <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800ef12:	f107 030c 	add.w	r3, r7, #12
 800ef16:	494b      	ldr	r1, [pc, #300]	; (800f044 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fb fc15 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800ef1e:	f107 031c 	add.w	r3, r7, #28
 800ef22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ef24:	4618      	mov	r0, r3
 800ef26:	f001 f9d2 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800ef2a:	f107 021c 	add.w	r2, r7, #28
 800ef2e:	f107 030c 	add.w	r3, r7, #12
 800ef32:	4611      	mov	r1, r2
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fb fbf5 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800ef3a:	f107 031c 	add.w	r3, r7, #28
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fb fb73 	bl	800a62a <_ZN12SimpleStringD1Ev>
        gname += "#";
 800ef44:	f107 030c 	add.w	r3, r7, #12
 800ef48:	493e      	ldr	r1, [pc, #248]	; (800f044 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fb fbfc 	bl	800a748 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800ef50:	f107 020c 	add.w	r2, r7, #12
 800ef54:	f107 0314 	add.w	r3, r7, #20
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fb f82b 	bl	8009fb6 <_ZNK12SimpleString8containsERKS_>
 800ef60:	4603      	mov	r3, r0
 800ef62:	f083 0301 	eor.w	r3, r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00d      	beq.n	800ef88 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800ef6c:	f107 020c 	add.w	r2, r7, #12
 800ef70:	f107 0314 	add.w	r3, r7, #20
 800ef74:	4611      	mov	r1, r2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fb fbd4 	bl	800a724 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800ef7c:	f107 0314 	add.w	r3, r7, #20
 800ef80:	4931      	ldr	r1, [pc, #196]	; (800f048 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fb fbe0 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800ef88:	f107 030c 	add.w	r3, r7, #12
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fb fb4c 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ef92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	330c      	adds	r3, #12
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef9c:	4798      	blx	r3
 800ef9e:	6378      	str	r0, [r7, #52]	; 0x34
 800efa0:	e7ae      	b.n	800ef00 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800efa2:	f107 0314 	add.w	r3, r7, #20
 800efa6:	4a26      	ldr	r2, [pc, #152]	; (800f040 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800efa8:	4926      	ldr	r1, [pc, #152]	; (800f044 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fb f99a 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800efb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efb4:	4924      	ldr	r1, [pc, #144]	; (800f048 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fa ff7f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800efbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800efc0:	f107 0314 	add.w	r3, r7, #20
 800efc4:	4611      	mov	r1, r2
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fb f874 	bl	800a0b4 <_ZNK12SimpleString8endsWithERKS_>
 800efcc:	4603      	mov	r3, r0
 800efce:	461c      	mov	r4, r3
 800efd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7fb fb28 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800efda:	2c00      	cmp	r4, #0
 800efdc:	d01a      	beq.n	800f014 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800efde:	f107 0314 	add.w	r3, r7, #20
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fb fb00 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800efe8:	4603      	mov	r3, r0
 800efea:	3b01      	subs	r3, #1
 800efec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800eff0:	f107 0114 	add.w	r1, r7, #20
 800eff4:	2200      	movs	r2, #0
 800eff6:	f7fb fc21 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
 800effa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800effe:	f107 0314 	add.w	r3, r7, #20
 800f002:	4611      	mov	r1, r2
 800f004:	4618      	mov	r0, r3
 800f006:	f7fa ffc4 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800f00a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fb fb0b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	3338      	adds	r3, #56	; 0x38
 800f01a:	681c      	ldr	r4, [r3, #0]
 800f01c:	f107 0314 	add.w	r3, r7, #20
 800f020:	4618      	mov	r0, r3
 800f022:	f7fb fad5 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800f026:	4603      	mov	r3, r0
 800f028:	4619      	mov	r1, r3
 800f02a:	6838      	ldr	r0, [r7, #0]
 800f02c:	47a0      	blx	r4
    SimpleString groupList;
 800f02e:	f107 0314 	add.w	r3, r7, #20
 800f032:	4618      	mov	r0, r3
 800f034:	f7fb faf9 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800f038:	bf00      	nop
 800f03a:	373c      	adds	r7, #60	; 0x3c
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd90      	pop	{r4, r7, pc}
 800f040:	08021a70 	.word	0x08021a70
 800f044:	08021a74 	.word	0x08021a74
 800f048:	08021a78 	.word	0x08021a78

0800f04c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b091      	sub	sp, #68	; 0x44
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800f056:	f107 0314 	add.w	r3, r7, #20
 800f05a:	4964      	ldr	r1, [pc, #400]	; (800f1ec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fa ff2c 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d06e      	beq.n	800f14c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fa6e 	bl	800f554 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d05e      	beq.n	800f13c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800f07e:	f107 030c 	add.w	r3, r7, #12
 800f082:	495a      	ldr	r1, [pc, #360]	; (800f1ec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f084:	4618      	mov	r0, r3
 800f086:	f7fa ff18 	bl	8009eba <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800f08a:	f107 030c 	add.w	r3, r7, #12
 800f08e:	4958      	ldr	r1, [pc, #352]	; (800f1f0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f090:	4618      	mov	r0, r3
 800f092:	f7fb fb59 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800f096:	f107 031c 	add.w	r3, r7, #28
 800f09a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f09c:	4618      	mov	r0, r3
 800f09e:	f001 f916 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800f0a2:	f107 021c 	add.w	r2, r7, #28
 800f0a6:	f107 030c 	add.w	r3, r7, #12
 800f0aa:	4611      	mov	r1, r2
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fb fb39 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800f0b2:	f107 031c 	add.w	r3, r7, #28
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fb fab7 	bl	800a62a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800f0bc:	f107 030c 	add.w	r3, r7, #12
 800f0c0:	494c      	ldr	r1, [pc, #304]	; (800f1f4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fb fb40 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800f0c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f001 f8ee 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800f0d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f0d8:	f107 030c 	add.w	r3, r7, #12
 800f0dc:	4611      	mov	r1, r2
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fb fb20 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800f0e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fb fa9e 	bl	800a62a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800f0ee:	f107 030c 	add.w	r3, r7, #12
 800f0f2:	493f      	ldr	r1, [pc, #252]	; (800f1f0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fb fb27 	bl	800a748 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800f0fa:	f107 020c 	add.w	r2, r7, #12
 800f0fe:	f107 0314 	add.w	r3, r7, #20
 800f102:	4611      	mov	r1, r2
 800f104:	4618      	mov	r0, r3
 800f106:	f7fa ff56 	bl	8009fb6 <_ZNK12SimpleString8containsERKS_>
 800f10a:	4603      	mov	r3, r0
 800f10c:	f083 0301 	eor.w	r3, r3, #1
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00d      	beq.n	800f132 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800f116:	f107 020c 	add.w	r2, r7, #12
 800f11a:	f107 0314 	add.w	r3, r7, #20
 800f11e:	4611      	mov	r1, r2
 800f120:	4618      	mov	r0, r3
 800f122:	f7fb faff 	bl	800a724 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800f126:	f107 0314 	add.w	r3, r7, #20
 800f12a:	4933      	ldr	r1, [pc, #204]	; (800f1f8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fb fb0b 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800f132:	f107 030c 	add.w	r3, r7, #12
 800f136:	4618      	mov	r0, r3
 800f138:	f7fb fa77 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	330c      	adds	r3, #12
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f146:	4798      	blx	r3
 800f148:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f14a:	e78d      	b.n	800f068 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800f14c:	f107 0314 	add.w	r3, r7, #20
 800f150:	4a26      	ldr	r2, [pc, #152]	; (800f1ec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f152:	4927      	ldr	r1, [pc, #156]	; (800f1f0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f154:	4618      	mov	r0, r3
 800f156:	f7fb f8c5 	bl	800a2e4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800f15a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f15e:	4926      	ldr	r1, [pc, #152]	; (800f1f8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800f160:	4618      	mov	r0, r3
 800f162:	f7fa feaa 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 800f166:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f16a:	f107 0314 	add.w	r3, r7, #20
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f7fa ff9f 	bl	800a0b4 <_ZNK12SimpleString8endsWithERKS_>
 800f176:	4603      	mov	r3, r0
 800f178:	461c      	mov	r4, r3
 800f17a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fb fa53 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800f184:	2c00      	cmp	r4, #0
 800f186:	d01a      	beq.n	800f1be <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800f188:	f107 0314 	add.w	r3, r7, #20
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fb fa2b 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 800f192:	4603      	mov	r3, r0
 800f194:	3b01      	subs	r3, #1
 800f196:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f19a:	f107 0114 	add.w	r1, r7, #20
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f7fb fb4c 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
 800f1a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f1a8:	f107 0314 	add.w	r3, r7, #20
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7fa feef 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 800f1b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fb fa36 	bl	800a62a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3338      	adds	r3, #56	; 0x38
 800f1c4:	681c      	ldr	r4, [r3, #0]
 800f1c6:	f107 0314 	add.w	r3, r7, #20
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fb fa00 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	6838      	ldr	r0, [r7, #0]
 800f1d6:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800f1d8:	f107 0314 	add.w	r3, r7, #20
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fb fa24 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800f1e2:	bf00      	nop
 800f1e4:	3744      	adds	r7, #68	; 0x44
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd90      	pop	{r4, r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	08021a70 	.word	0x08021a70
 800f1f0:	08021a74 	.word	0x08021a74
 800f1f4:	08021a7c 	.word	0x08021a7c
 800f1f8:	08021a78 	.word	0x08021a78

0800f1fc <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800f1fc:	b590      	push	{r4, r7, lr}
 800f1fe:	b091      	sub	sp, #68	; 0x44
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800f206:	f107 0314 	add.w	r3, r7, #20
 800f20a:	494f      	ldr	r1, [pc, #316]	; (800f348 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fa fe54 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d07d      	beq.n	800f31a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800f21e:	f107 030c 	add.w	r3, r7, #12
 800f222:	4949      	ldr	r1, [pc, #292]	; (800f348 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800f224:	4618      	mov	r0, r3
 800f226:	f7fa fe48 	bl	8009eba <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800f22a:	f107 031c 	add.w	r3, r7, #28
 800f22e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f230:	4618      	mov	r0, r3
 800f232:	f001 f84c 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800f236:	f107 021c 	add.w	r2, r7, #28
 800f23a:	f107 030c 	add.w	r3, r7, #12
 800f23e:	4611      	mov	r1, r2
 800f240:	4618      	mov	r0, r3
 800f242:	f7fb fa6f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800f246:	f107 031c 	add.w	r3, r7, #28
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fb f9ed 	bl	800a62a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f250:	f107 030c 	add.w	r3, r7, #12
 800f254:	493d      	ldr	r1, [pc, #244]	; (800f34c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f256:	4618      	mov	r0, r3
 800f258:	f7fb fa76 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800f25c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f262:	4618      	mov	r0, r3
 800f264:	f001 f824 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800f268:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f26c:	f107 030c 	add.w	r3, r7, #12
 800f270:	4611      	mov	r1, r2
 800f272:	4618      	mov	r0, r3
 800f274:	f7fb fa56 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800f278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fb f9d4 	bl	800a62a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f282:	f107 030c 	add.w	r3, r7, #12
 800f286:	4931      	ldr	r1, [pc, #196]	; (800f34c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fb fa5d 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800f28e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f294:	4618      	mov	r0, r3
 800f296:	f001 f8dc 	bl	8010452 <_ZNK10UtestShell7getFileEv>
 800f29a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f29e:	f107 030c 	add.w	r3, r7, #12
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fb fa3d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800f2aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fb f9bb 	bl	800a62a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f2b4:	f107 030c 	add.w	r3, r7, #12
 800f2b8:	4924      	ldr	r1, [pc, #144]	; (800f34c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fb fa44 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800f2c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f2c2:	f001 f8d5 	bl	8010470 <_ZNK10UtestShell13getLineNumberEv>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f2ce:	4920      	ldr	r1, [pc, #128]	; (800f350 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fb feb1 	bl	800b038 <_Z16StringFromFormatPKcz>
 800f2d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f2da:	f107 030c 	add.w	r3, r7, #12
 800f2de:	4611      	mov	r1, r2
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fb fa1f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 800f2e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fb f99d 	bl	800a62a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800f2f0:	f107 020c 	add.w	r2, r7, #12
 800f2f4:	f107 0314 	add.w	r3, r7, #20
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fb fa12 	bl	800a724 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800f300:	f107 030c 	add.w	r3, r7, #12
 800f304:	4618      	mov	r0, r3
 800f306:	f7fb f990 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	330c      	adds	r3, #12
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f314:	4798      	blx	r3
 800f316:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f318:	e77e      	b.n	800f218 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3338      	adds	r3, #56	; 0x38
 800f320:	681c      	ldr	r4, [r3, #0]
 800f322:	f107 0314 	add.w	r3, r7, #20
 800f326:	4618      	mov	r0, r3
 800f328:	f7fb f952 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 800f32c:	4603      	mov	r3, r0
 800f32e:	4619      	mov	r1, r3
 800f330:	6838      	ldr	r0, [r7, #0]
 800f332:	47a0      	blx	r4
    SimpleString testLocations;
 800f334:	f107 0314 	add.w	r3, r7, #20
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fb f976 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 800f33e:	bf00      	nop
 800f340:	3744      	adds	r7, #68	; 0x44
 800f342:	46bd      	mov	sp, r7
 800f344:	bd90      	pop	{r4, r7, pc}
 800f346:	bf00      	nop
 800f348:	08021a70 	.word	0x08021a70
 800f34c:	08021a7c 	.word	0x08021a7c
 800f350:	08021a80 	.word	0x08021a80

0800f354 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800f354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800f35e:	2400      	movs	r4, #0
 800f360:	2500      	movs	r5, #0
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d028      	beq.n	800f3ba <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	330c      	adds	r3, #12
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	6838      	ldr	r0, [r7, #0]
 800f372:	4798      	blx	r3
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d01f      	beq.n	800f3ba <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800f37a:	f107 0308 	add.w	r3, r7, #8
 800f37e:	6839      	ldr	r1, [r7, #0]
 800f380:	4618      	mov	r0, r3
 800f382:	f000 ffa4 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800f386:	2401      	movs	r4, #1
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	330c      	adds	r3, #12
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6838      	ldr	r0, [r7, #0]
 800f392:	4798      	blx	r3
 800f394:	4602      	mov	r2, r0
 800f396:	f107 0310 	add.w	r3, r7, #16
 800f39a:	4611      	mov	r1, r2
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 ff96 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800f3a2:	2501      	movs	r5, #1
 800f3a4:	f107 0210 	add.w	r2, r7, #16
 800f3a8:	f107 0308 	add.w	r3, r7, #8
 800f3ac:	4611      	mov	r1, r2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fb f98c 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800f3ba:	2601      	movs	r6, #1
 800f3bc:	e000      	b.n	800f3c0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800f3be:	2600      	movs	r6, #0
 800f3c0:	2d00      	cmp	r5, #0
 800f3c2:	d004      	beq.n	800f3ce <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800f3c4:	f107 0310 	add.w	r3, r7, #16
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fb f92e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800f3ce:	2c00      	cmp	r4, #0
 800f3d0:	d004      	beq.n	800f3dc <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800f3d2:	f107 0308 	add.w	r3, r7, #8
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fb f927 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800f3dc:	4633      	mov	r3, r6
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	371c      	adds	r7, #28
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3e6 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d00a      	beq.n	800f40c <_ZN12TestRegistry10countTestsEv+0x26>
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685a      	ldr	r2, [r3, #4]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3310      	adds	r3, #16
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4610      	mov	r0, r2
 800f406:	4798      	blx	r3
 800f408:	4603      	mov	r3, r0
 800f40a:	e000      	b.n	800f40e <_ZN12TestRegistry10countTestsEv+0x28>
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
	...

0800f418 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800f418:	b580      	push	{r7, lr}
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	4801      	ldr	r0, [pc, #4]	; (800f424 <__tcf_0+0xc>)
 800f41e:	f7ff fcad 	bl	800ed7c <_ZN12TestRegistryD1Ev>
 800f422:	bd80      	pop	{r7, pc}
 800f424:	2000081c 	.word	0x2000081c

0800f428 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800f42c:	4b15      	ldr	r3, [pc, #84]	; (800f484 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f3bf 8f5b 	dmb	ish
 800f434:	b2db      	uxtb	r3, r3
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	bf0c      	ite	eq
 800f43e:	2301      	moveq	r3, #1
 800f440:	2300      	movne	r3, #0
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b00      	cmp	r3, #0
 800f446:	d013      	beq.n	800f470 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800f448:	480e      	ldr	r0, [pc, #56]	; (800f484 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f44a:	f00d fbf5 	bl	801cc38 <__cxa_guard_acquire>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	bf14      	ite	ne
 800f454:	2301      	movne	r3, #1
 800f456:	2300      	moveq	r3, #0
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d008      	beq.n	800f470 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800f45e:	480a      	ldr	r0, [pc, #40]	; (800f488 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800f460:	f7ff fc66 	bl	800ed30 <_ZN12TestRegistryC1Ev>
 800f464:	4807      	ldr	r0, [pc, #28]	; (800f484 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f466:	f00d fbf3 	bl	801cc50 <__cxa_guard_release>
 800f46a:	4808      	ldr	r0, [pc, #32]	; (800f48c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800f46c:	f00d fc17 	bl	801cc9e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800f470:	4b07      	ldr	r3, [pc, #28]	; (800f490 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800f478:	4b05      	ldr	r3, [pc, #20]	; (800f490 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	e000      	b.n	800f480 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800f47e:	4b02      	ldr	r3, [pc, #8]	; (800f488 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800f480:	4618      	mov	r0, r3
 800f482:	bd80      	pop	{r7, pc}
 800f484:	2000083c 	.word	0x2000083c
 800f488:	2000081c 	.word	0x2000081c
 800f48c:	0800f419 	.word	0x0800f419
 800f490:	20000818 	.word	0x20000818

0800f494 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800f49e:	4a04      	ldr	r2, [pc, #16]	; (800f4b0 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	6013      	str	r3, [r2, #0]
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	20000818 	.word	0x20000818

0800f4b4 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d00a      	beq.n	800f4da <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	685a      	ldr	r2, [r3, #4]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	330c      	adds	r3, #12
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4610      	mov	r0, r2
 800f4d4:	4798      	blx	r3
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	e000      	b.n	800f4dc <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	6053      	str	r3, [r2, #4]

}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	609a      	str	r2, [r3, #8]
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	60da      	str	r2, [r3, #12]
}
 800f514:	bf00      	nop
 800f516:	370c      	adds	r7, #12
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	771a      	strb	r2, [r3, #28]
}
 800f52e:	bf00      	nop
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800f53a:	b480      	push	{r7}
 800f53c:	b083      	sub	sp, #12
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2201      	movs	r2, #1
 800f546:	751a      	strb	r2, [r3, #20]
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	68d9      	ldr	r1, [r3, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	461a      	mov	r2, r3
 800f56a:	68b8      	ldr	r0, [r7, #8]
 800f56c:	f000 ffbb 	bl	80104e6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800f576:	2301      	movs	r3, #1
 800f578:	e006      	b.n	800f588 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	332c      	adds	r3, #44	; 0x2c
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	4798      	blx	r3
        return false;
 800f586:	2300      	movs	r3, #0
    }
}
 800f588:	4618      	mov	r0, r3
 800f58a:	3710      	adds	r7, #16
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}

0800f590 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800f598:	f7ff fb62 	bl	800ec60 <_ZN14NullTestPlugin8instanceEv>
 800f59c:	4602      	mov	r2, r0
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	611a      	str	r2, [r3, #16]
}
 800f5a2:	bf00      	nop
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3324      	adds	r3, #36	; 0x24
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	6912      	ldr	r2, [r2, #16]
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	6838      	ldr	r0, [r7, #0]
 800f5c4:	4798      	blx	r3
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	611a      	str	r2, [r3, #16]
}
 800f5cc:	bf00      	nop
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	691b      	ldr	r3, [r3, #16]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	6839      	ldr	r1, [r7, #0]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fa52 	bl	800eaa6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800f602:	4603      	mov	r3, r0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	691a      	ldr	r2, [r3, #16]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3328      	adds	r3, #40	; 0x28
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	4610      	mov	r0, r2
 800f628:	4798      	blx	r3
 800f62a:	4602      	mov	r2, r0
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	429a      	cmp	r2, r3
 800f632:	bf0c      	ite	eq
 800f634:	2301      	moveq	r3, #1
 800f636:	2300      	movne	r3, #0
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00b      	beq.n	800f656 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	691a      	ldr	r2, [r3, #16]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	332c      	adds	r3, #44	; 0x2c
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4610      	mov	r0, r2
 800f64e:	4798      	blx	r3
 800f650:	4602      	mov	r2, r0
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	691b      	ldr	r3, [r3, #16]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7ff fa17 	bl	800ea8e <_ZN10TestPlugin7getNameEv>
 800f660:	4603      	mov	r3, r0
 800f662:	6839      	ldr	r1, [r7, #0]
 800f664:	4618      	mov	r0, r3
 800f666:	f7fa ffec 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d00b      	beq.n	800f688 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	691a      	ldr	r2, [r3, #16]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	332c      	adds	r3, #44	; 0x2c
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4610      	mov	r0, r2
 800f680:	4798      	blx	r3
 800f682:	4602      	mov	r2, r0
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	691a      	ldr	r2, [r3, #16]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	3328      	adds	r3, #40	; 0x28
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	4610      	mov	r0, r2
 800f69a:	4798      	blx	r3
}
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
    int count = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	60bb      	str	r3, [r7, #8]
 800f6b6:	f7ff fad3 	bl	800ec60 <_ZN14NullTestPlugin8instanceEv>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	bf14      	ite	ne
 800f6c2:	2301      	movne	r3, #1
 800f6c4:	2300      	moveq	r3, #0
 800f6c6:	b2db      	uxtb	r3, r3
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00a      	beq.n	800f6e2 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	332c      	adds	r3, #44	; 0x2c
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68b8      	ldr	r0, [r7, #8]
 800f6dc:	4798      	blx	r3
 800f6de:	60b8      	str	r0, [r7, #8]
 800f6e0:	e7e9      	b.n	800f6b6 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    return tests_;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	685b      	ldr	r3, [r3, #4]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	334c      	adds	r3, #76	; 0x4c
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	4798      	blx	r3
 800f71a:	4602      	mov	r2, r0
 800f71c:	f107 0308 	add.w	r3, r7, #8
 800f720:	4611      	mov	r1, r2
 800f722:	4618      	mov	r0, r3
 800f724:	f002 f8f8 	bl	8011918 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800f728:	f107 0308 	add.w	r3, r7, #8
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	4618      	mov	r0, r3
 800f730:	f002 f980 	bl	8011a34 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800f734:	f107 0308 	add.w	r3, r7, #8
 800f738:	4618      	mov	r0, r3
 800f73a:	f002 fa13 	bl	8011b64 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800f73e:	4602      	mov	r2, r0
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800f744:	f107 0308 	add.w	r3, r7, #8
 800f748:	4618      	mov	r0, r3
 800f74a:	f002 f939 	bl	80119c0 <_ZN22UtestShellPointerArrayD1Ev>
}
 800f74e:	bf00      	nop
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800f756:	b580      	push	{r7, lr}
 800f758:	b084      	sub	sp, #16
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	334c      	adds	r3, #76	; 0x4c
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	4798      	blx	r3
 800f76a:	4602      	mov	r2, r0
 800f76c:	f107 0308 	add.w	r3, r7, #8
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f002 f8d0 	bl	8011918 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800f778:	f107 0308 	add.w	r3, r7, #8
 800f77c:	4618      	mov	r0, r3
 800f77e:	f002 f995 	bl	8011aac <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800f782:	f107 0308 	add.w	r3, r7, #8
 800f786:	4618      	mov	r0, r3
 800f788:	f002 f9ec 	bl	8011b64 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800f78c:	4602      	mov	r2, r0
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800f792:	f107 0308 	add.w	r3, r7, #8
 800f796:	4618      	mov	r0, r3
 800f798:	f002 f912 	bl	80119c0 <_ZN22UtestShellPointerArrayD1Ev>
}
 800f79c:	bf00      	nop
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00b      	beq.n	800f7d2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	330c      	adds	r3, #12
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	4798      	blx	r3
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d001      	beq.n	800f7d2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e000      	b.n	800f7d4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	330c      	adds	r3, #12
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800f7e6:	e7e5      	b.n	800f7b4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800f7f2:	b590      	push	{r4, r7, lr}
 800f7f4:	b087      	sub	sp, #28
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	617b      	str	r3, [r7, #20]
    while (current) {
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d01e      	beq.n	800f846 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800f808:	f107 030c 	add.w	r3, r7, #12
 800f80c:	6979      	ldr	r1, [r7, #20]
 800f80e:	4618      	mov	r0, r3
 800f810:	f000 fd4e 	bl	80102b0 <_ZNK10UtestShell7getNameEv>
 800f814:	f107 030c 	add.w	r3, r7, #12
 800f818:	6839      	ldr	r1, [r7, #0]
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fa ff11 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800f820:	4603      	mov	r3, r0
 800f822:	461c      	mov	r4, r3
 800f824:	f107 030c 	add.w	r3, r7, #12
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fa fefe 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800f82e:	2c00      	cmp	r4, #0
 800f830:	d001      	beq.n	800f836 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	e008      	b.n	800f848 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	330c      	adds	r3, #12
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	6978      	ldr	r0, [r7, #20]
 800f840:	4798      	blx	r3
 800f842:	6178      	str	r0, [r7, #20]
    while (current) {
 800f844:	e7dd      	b.n	800f802 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	371c      	adds	r7, #28
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd90      	pop	{r4, r7, pc}

0800f850 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800f850:	b590      	push	{r4, r7, lr}
 800f852:	b087      	sub	sp, #28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	617b      	str	r3, [r7, #20]
    while (current) {
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d01e      	beq.n	800f8a4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800f866:	f107 030c 	add.w	r3, r7, #12
 800f86a:	6979      	ldr	r1, [r7, #20]
 800f86c:	4618      	mov	r0, r3
 800f86e:	f000 fd2e 	bl	80102ce <_ZNK10UtestShell8getGroupEv>
 800f872:	f107 030c 	add.w	r3, r7, #12
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fa fee2 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 800f87e:	4603      	mov	r3, r0
 800f880:	461c      	mov	r4, r3
 800f882:	f107 030c 	add.w	r3, r7, #12
 800f886:	4618      	mov	r0, r3
 800f888:	f7fa fecf 	bl	800a62a <_ZN12SimpleStringD1Ev>
 800f88c:	2c00      	cmp	r4, #0
 800f88e:	d001      	beq.n	800f894 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	e008      	b.n	800f8a6 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	330c      	adds	r3, #12
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6978      	ldr	r0, [r7, #20]
 800f89e:	4798      	blx	r3
 800f8a0:	6178      	str	r0, [r7, #20]
    while (current) {
 800f8a2:	e7dd      	b.n	800f860 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	371c      	adds	r7, #28
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd90      	pop	{r4, r7, pc}
	...

0800f8b0 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800f8ba:	4a18      	ldr	r2, [pc, #96]	; (800f91c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	601a      	str	r2, [r3, #0]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	683a      	ldr	r2, [r7, #0]
 800f8c4:	605a      	str	r2, [r3, #4]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	609a      	str	r2, [r3, #8]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	60da      	str	r2, [r3, #12]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	611a      	str	r2, [r3, #16]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	615a      	str	r2, [r3, #20]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	619a      	str	r2, [r3, #24]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	61da      	str	r2, [r3, #28]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	621a      	str	r2, [r3, #32]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	625a      	str	r2, [r3, #36]	; 0x24
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	629a      	str	r2, [r3, #40]	; 0x28
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	62da      	str	r2, [r3, #44]	; 0x2c
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	631a      	str	r2, [r3, #48]	; 0x30
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4618      	mov	r0, r3
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr
 800f91c:	080247a8 	.word	0x080247a8

0800f920 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	4a04      	ldr	r2, [pc, #16]	; (800f93c <_ZN10TestResultD1Ev+0x1c>)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	601a      	str	r2, [r3, #0]
{
}
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	080247a8 	.word	0x080247a8

0800f940 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
}
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff ffe9 	bl	800f920 <_ZN10TestResultD1Ev>
 800f94e:	2138      	movs	r1, #56	; 0x38
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7f7 ff03 	bl	800775c <_ZdlPvj>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	685a      	ldr	r2, [r3, #4]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	3318      	adds	r3, #24
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	4610      	mov	r0, r2
 800f97c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f97e:	4b05      	ldr	r3, [pc, #20]	; (800f994 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4798      	blx	r3
 800f984:	4603      	mov	r3, r0
 800f986:	461a      	mov	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f98c:	bf00      	nop
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	200000a4 	.word	0x200000a4

0800f998 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800f9a2:	4b0c      	ldr	r3, [pc, #48]	; (800f9d4 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4798      	blx	r3
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b0:	1ad2      	subs	r2, r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	331c      	adds	r3, #28
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6879      	ldr	r1, [r7, #4]
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	4798      	blx	r3
}
 800f9ca:	bf00      	nop
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	200000a4 	.word	0x200000a4

0800f9d8 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	3310      	adds	r3, #16
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	6839      	ldr	r1, [r7, #0]
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f9f6:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4798      	blx	r3
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	461a      	mov	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fa04:	bf00      	nop
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	200000a4 	.word	0x200000a4

0800fa10 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	685a      	ldr	r2, [r3, #4]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	332c      	adds	r3, #44	; 0x2c
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	4798      	blx	r3
}
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b082      	sub	sp, #8
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685a      	ldr	r2, [r3, #4]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3348      	adds	r3, #72	; 0x48
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	4610      	mov	r0, r2
 800fa52:	4798      	blx	r3
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800fa66:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4798      	blx	r3
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	461a      	mov	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa74:	1ad2      	subs	r2, r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3314      	adds	r3, #20
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	4610      	mov	r0, r2
 800fa8c:	4798      	blx	r3

}
 800fa8e:	bf00      	nop
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	200000a4 	.word	0x200000a4

0800fa9c <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685a      	ldr	r2, [r3, #4]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	333c      	adds	r3, #60	; 0x3c
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6839      	ldr	r1, [r7, #0]
 800fab6:	4610      	mov	r0, r2
 800fab8:	4798      	blx	r3
    failureCount_++;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	1c5a      	adds	r2, r3, #1
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	615a      	str	r2, [r3, #20]
}
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    testCount_++;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	609a      	str	r2, [r3, #8]
}
 800fade:	bf00      	nop
 800fae0:	370c      	adds	r7, #12
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr

0800faea <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
    runCount_++;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	1c5a      	adds	r2, r3, #1
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	60da      	str	r2, [r3, #12]
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	691b      	ldr	r3, [r3, #16]
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	611a      	str	r2, [r3, #16]
}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr

0800fb26 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800fb26:	b480      	push	{r7}
 800fb28:	b083      	sub	sp, #12
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	699b      	ldr	r3, [r3, #24]
 800fb32:	1c5a      	adds	r2, r3, #1
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	619a      	str	r2, [r3, #24]
}
 800fb38:	bf00      	nop
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr

0800fb44 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	69db      	ldr	r3, [r3, #28]
 800fb50:	1c5a      	adds	r2, r3, #1
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	61da      	str	r2, [r3, #28]
}
 800fb56:	bf00      	nop
 800fb58:	370c      	adds	r7, #12
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
	...

0800fb64 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800fb6c:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <_ZN10TestResult12testsStartedEv+0x30>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4798      	blx	r3
 800fb72:	4603      	mov	r3, r0
 800fb74:	461a      	mov	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	685a      	ldr	r2, [r3, #4]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	3308      	adds	r3, #8
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4610      	mov	r0, r2
 800fb8a:	4798      	blx	r3
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	200000a4 	.word	0x200000a4

0800fb98 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800fba0:	4b0c      	ldr	r3, [pc, #48]	; (800fbd4 <_ZN10TestResult10testsEndedEv+0x3c>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4798      	blx	r3
 800fba6:	4603      	mov	r3, r0
 800fba8:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	1ad2      	subs	r2, r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	330c      	adds	r3, #12
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	4610      	mov	r0, r2
 800fbc8:	4798      	blx	r3
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	200000a4 	.word	0x200000a4

0800fbd8 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b083      	sub	sp, #12
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800fc20:	b590      	push	{r4, r7, lr}
 800fc22:	b087      	sub	sp, #28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	ed87 0b04 	vstr	d0, [r7, #16]
 800fc2a:	ed87 1b02 	vstr	d1, [r7, #8]
 800fc2e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800fc32:	4b2c      	ldr	r3, [pc, #176]	; (800fce4 <_Z13doubles_equalddd+0xc4>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	ed97 0b04 	vldr	d0, [r7, #16]
 800fc3a:	4798      	blx	r3
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10f      	bne.n	800fc62 <_Z13doubles_equalddd+0x42>
 800fc42:	4b28      	ldr	r3, [pc, #160]	; (800fce4 <_Z13doubles_equalddd+0xc4>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	ed97 0b02 	vldr	d0, [r7, #8]
 800fc4a:	4798      	blx	r3
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d107      	bne.n	800fc62 <_Z13doubles_equalddd+0x42>
 800fc52:	4b24      	ldr	r3, [pc, #144]	; (800fce4 <_Z13doubles_equalddd+0xc4>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	ed97 0b00 	vldr	d0, [r7]
 800fc5a:	4798      	blx	r3
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <_Z13doubles_equalddd+0x46>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <_Z13doubles_equalddd+0x48>
 800fc66:	2300      	movs	r3, #0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <_Z13doubles_equalddd+0x50>
        return false;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	e035      	b.n	800fcdc <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800fc70:	4b1d      	ldr	r3, [pc, #116]	; (800fce8 <_Z13doubles_equalddd+0xc8>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	ed97 0b04 	vldr	d0, [r7, #16]
 800fc78:	4798      	blx	r3
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d009      	beq.n	800fc94 <_Z13doubles_equalddd+0x74>
 800fc80:	4b19      	ldr	r3, [pc, #100]	; (800fce8 <_Z13doubles_equalddd+0xc8>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	ed97 0b02 	vldr	d0, [r7, #8]
 800fc88:	4798      	blx	r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <_Z13doubles_equalddd+0x74>
 800fc90:	2301      	movs	r3, #1
 800fc92:	e000      	b.n	800fc96 <_Z13doubles_equalddd+0x76>
 800fc94:	2300      	movs	r3, #0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e01e      	b.n	800fcdc <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800fc9e:	4b13      	ldr	r3, [pc, #76]	; (800fcec <_Z13doubles_equalddd+0xcc>)
 800fca0:	681c      	ldr	r4, [r3, #0]
 800fca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fca6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fcaa:	f7f0 fb2d 	bl	8000308 <__aeabi_dsub>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	ec43 2b17 	vmov	d7, r2, r3
 800fcb6:	eeb0 0a47 	vmov.f32	s0, s14
 800fcba:	eef0 0a67 	vmov.f32	s1, s15
 800fcbe:	47a0      	blx	r4
 800fcc0:	ec53 2b10 	vmov	r2, r3, d0
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fccc:	f7f0 fd48 	bl	8000760 <__aeabi_dcmpge>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d101      	bne.n	800fcda <_Z13doubles_equalddd+0xba>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	461c      	mov	r4, r3
 800fcda:	b2e3      	uxtb	r3, r4
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	371c      	adds	r7, #28
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd90      	pop	{r4, r7, pc}
 800fce4:	200000e4 	.word	0x200000e4
 800fce8:	200000e8 	.word	0x200000e8
 800fcec:	200000d8 	.word	0x200000d8

0800fcf0 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	332c      	adds	r3, #44	; 0x2c
    }
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
    {
 800fd10:	4a0a      	ldr	r2, [pc, #40]	; (800fd3c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	332c      	adds	r3, #44	; 0x2c
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7ff fe00 	bl	800f920 <_ZN10TestResultD1Ev>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	331c      	adds	r3, #28
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f6 f815 	bl	8005d54 <_ZN17ConsoleTestOutputD1Ev>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f000 f943 	bl	800ffb8 <_ZN10UtestShellD1Ev>
    }
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4618      	mov	r0, r3
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	080247f0 	.word	0x080247f0

0800fd40 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    }
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff ffdd 	bl	800fd08 <_ZN22OutsideTestRunnerUTestD1Ev>
 800fd4e:	2164      	movs	r1, #100	; 0x64
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7f7 fd03 	bl	800775c <_ZdlPvj>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af02      	add	r7, sp, #8
 800fd66:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	4b0d      	ldr	r3, [pc, #52]	; (800fda4 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800fd70:	4a0d      	ldr	r2, [pc, #52]	; (800fda8 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800fd72:	490e      	ldr	r1, [pc, #56]	; (800fdac <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800fd74:	f000 f8f8 	bl	800ff68 <_ZN10UtestShellC1EPKcS1_S1_j>
 800fd78:	4a0d      	ldr	r2, [pc, #52]	; (800fdb0 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	331c      	adds	r3, #28
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7f5 ffd4 	bl	8005d30 <_ZN17ConsoleTestOutputC1Ev>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	331c      	adds	r3, #28
 800fd92:	4619      	mov	r1, r3
 800fd94:	4610      	mov	r0, r2
 800fd96:	f7ff fd8b 	bl	800f8b0 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	08021a84 	.word	0x08021a84
 800fda8:	08021a94 	.word	0x08021a94
 800fdac:	08021ad4 	.word	0x08021ad4
 800fdb0:	080247f0 	.word	0x080247f0

0800fdb4 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	4801      	ldr	r0, [pc, #4]	; (800fdc0 <__tcf_0+0xc>)
 800fdba:	f7ff ffa5 	bl	800fd08 <_ZN22OutsideTestRunnerUTestD1Ev>
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	20000840 	.word	0x20000840

0800fdc4 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800fdc8:	4b12      	ldr	r3, [pc, #72]	; (800fe14 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	f3bf 8f5b 	dmb	ish
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	f003 0301 	and.w	r3, r3, #1
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bf0c      	ite	eq
 800fdda:	2301      	moveq	r3, #1
 800fddc:	2300      	movne	r3, #0
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d013      	beq.n	800fe0c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800fde4:	480b      	ldr	r0, [pc, #44]	; (800fe14 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800fde6:	f00c ff27 	bl	801cc38 <__cxa_guard_acquire>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	bf14      	ite	ne
 800fdf0:	2301      	movne	r3, #1
 800fdf2:	2300      	moveq	r3, #0
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d008      	beq.n	800fe0c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800fdfa:	4807      	ldr	r0, [pc, #28]	; (800fe18 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800fdfc:	f7ff ffb0 	bl	800fd60 <_ZN22OutsideTestRunnerUTestC1Ev>
 800fe00:	4804      	ldr	r0, [pc, #16]	; (800fe14 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800fe02:	f00c ff25 	bl	801cc50 <__cxa_guard_release>
 800fe06:	4805      	ldr	r0, [pc, #20]	; (800fe1c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800fe08:	f00c ff49 	bl	801cc9e <atexit>
    return instance_;
 800fe0c:	4b02      	ldr	r3, [pc, #8]	; (800fe18 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	200008a4 	.word	0x200008a4
 800fe18:	20000840 	.word	0x20000840
 800fe1c:	0800fdb5 	.word	0x0800fdb5

0800fe20 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	330c      	adds	r3, #12
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	4798      	blx	r3
    }
 800fe34:	bf00      	nop
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	3314      	adds	r3, #20
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	4798      	blx	r3
    }
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3310      	adds	r3, #16
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	4798      	blx	r3
    }
 800fe6c:	bf00      	nop
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	603b      	str	r3, [r7, #0]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	601a      	str	r2, [r3, #0]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	605a      	str	r2, [r3, #4]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	683a      	ldr	r2, [r7, #0]
 800fe92:	609a      	str	r2, [r3, #8]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	4618      	mov	r0, r3
 800fe98:	3714      	adds	r7, #20
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr

0800fea2 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b086      	sub	sp, #24
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3394      	adds	r3, #148	; 0x94
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	68f9      	ldr	r1, [r7, #12]
 800fecc:	6938      	ldr	r0, [r7, #16]
 800fece:	4798      	blx	r3
    }
 800fed0:	bf00      	nop
 800fed2:	3718      	adds	r7, #24
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800fef6:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <helperDoRunOneTestSeperateProcess+0x34>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	68f9      	ldr	r1, [r7, #12]
 800fefe:	6938      	ldr	r0, [r7, #16]
 800ff00:	4798      	blx	r3
    }
 800ff02:	bf00      	nop
 800ff04:	3718      	adds	r7, #24
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20000098 	.word	0x20000098

0800ff10 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800ff18:	4a0f      	ldr	r2, [pc, #60]	; (800ff58 <_ZN10UtestShellC1Ev+0x48>)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4a0e      	ldr	r2, [pc, #56]	; (800ff5c <_ZN10UtestShellC1Ev+0x4c>)
 800ff22:	605a      	str	r2, [r3, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4a0e      	ldr	r2, [pc, #56]	; (800ff60 <_ZN10UtestShellC1Ev+0x50>)
 800ff28:	609a      	str	r2, [r3, #8]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4a0d      	ldr	r2, [pc, #52]	; (800ff64 <_ZN10UtestShellC1Ev+0x54>)
 800ff2e:	60da      	str	r2, [r3, #12]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	611a      	str	r2, [r3, #16]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	615a      	str	r2, [r3, #20]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	761a      	strb	r2, [r3, #24]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	765a      	strb	r2, [r3, #25]
{
}
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr
 800ff56:	bf00      	nop
 800ff58:	080248b0 	.word	0x080248b0
 800ff5c:	08021b20 	.word	0x08021b20
 800ff60:	08021b34 	.word	0x08021b34
 800ff64:	08021b44 	.word	0x08021b44

0800ff68 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
 800ff74:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800ff76:	4a0f      	ldr	r2, [pc, #60]	; (800ffb4 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	601a      	str	r2, [r3, #0]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	605a      	str	r2, [r3, #4]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	609a      	str	r2, [r3, #8]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	683a      	ldr	r2, [r7, #0]
 800ff8c:	60da      	str	r2, [r3, #12]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	69ba      	ldr	r2, [r7, #24]
 800ff92:	611a      	str	r2, [r3, #16]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2200      	movs	r2, #0
 800ff98:	615a      	str	r2, [r3, #20]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	761a      	strb	r2, [r3, #24]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	765a      	strb	r2, [r3, #25]
{
}
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3714      	adds	r7, #20
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr
 800ffb4:	080248b0 	.word	0x080248b0

0800ffb8 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	4a04      	ldr	r2, [pc, #16]	; (800ffd4 <_ZN10UtestShellD1Ev+0x1c>)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	601a      	str	r2, [r3, #0]
{
}
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	080248b0 	.word	0x080248b0

0800ffd8 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
}
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f7ff ffe9 	bl	800ffb8 <_ZN10UtestShellD1Ev>
 800ffe6:	211c      	movs	r1, #28
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7f7 fbb7 	bl	800775c <_ZdlPvj>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4618      	mov	r0, r3
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800fffe:	2300      	movs	r3, #0
 8010000:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	3310      	adds	r3, #16
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	4798      	blx	r3
}
 801000e:	bf00      	nop
 8010010:	3708      	adds	r7, #8
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
	...

08010018 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8010018:	b580      	push	{r7, lr}
 801001a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 801001c:	4b02      	ldr	r3, [pc, #8]	; (8010028 <_ZN10UtestShell5crashEv+0x10>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4798      	blx	r3
}
 8010022:	bf00      	nop
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	20000094 	.word	0x20000094

0801002c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b088      	sub	sp, #32
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	3324      	adds	r3, #36	; 0x24
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801004a:	f107 0014 	add.w	r0, r7, #20
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	68f9      	ldr	r1, [r7, #12]
 8010054:	f7ff ff0e 	bl	800fe74 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	337c      	adds	r3, #124	; 0x7c
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	4798      	blx	r3
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801006a:	4b09      	ldr	r3, [pc, #36]	; (8010090 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f107 0214 	add.w	r2, r7, #20
 8010072:	4611      	mov	r1, r2
 8010074:	4807      	ldr	r0, [pc, #28]	; (8010094 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8010076:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8010078:	e006      	b.n	8010088 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801007a:	4b05      	ldr	r3, [pc, #20]	; (8010090 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f107 0214 	add.w	r2, r7, #20
 8010082:	4611      	mov	r1, r2
 8010084:	4804      	ldr	r0, [pc, #16]	; (8010098 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8010086:	4798      	blx	r3
}
 8010088:	bf00      	nop
 801008a:	3720      	adds	r7, #32
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	200000a0 	.word	0x200000a0
 8010094:	0800fed9 	.word	0x0800fed9
 8010098:	0800fea3 	.word	0x0800fea3

0801009c <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 801009c:	b590      	push	{r4, r7, lr}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
    return new Utest();
 80100a4:	22d3      	movs	r2, #211	; 0xd3
 80100a6:	4906      	ldr	r1, [pc, #24]	; (80100c0 <_ZN10UtestShell10createTestEv+0x24>)
 80100a8:	2004      	movs	r0, #4
 80100aa:	f7f7 fb43 	bl	8007734 <_ZnwjPKci>
 80100ae:	4604      	mov	r4, r0
 80100b0:	4620      	mov	r0, r4
 80100b2:	f001 fb0f 	bl	80116d4 <_ZN5UtestC1Ev>
 80100b6:	4623      	mov	r3, r4
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd90      	pop	{r4, r7, pc}
 80100c0:	08021b54 	.word	0x08021b54

080100c4 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
    delete test;
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d004      	beq.n	80100de <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	3204      	adds	r2, #4
 80100d8:	6812      	ldr	r2, [r2, #0]
 80100da:	4618      	mov	r0, r3
 80100dc:	4790      	blx	r2
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
	...

080100e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b088      	sub	sp, #32
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	333c      	adds	r3, #60	; 0x3c
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4940      	ldr	r1, [pc, #256]	; (8010200 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3314      	adds	r3, #20
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	68f9      	ldr	r1, [r7, #12]
 801010e:	68b8      	ldr	r0, [r7, #8]
 8010110:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	333c      	adds	r3, #60	; 0x3c
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	493a      	ldr	r1, [pc, #232]	; (8010204 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8010120:	f001 faae 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8010124:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f001 fa90 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 801012c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801012e:	6879      	ldr	r1, [r7, #4]
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f001 fa6b 	bl	801160c <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8010136:	68f9      	ldr	r1, [r7, #12]
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f001 fa77 	bl	801162c <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	333c      	adds	r3, #60	; 0x3c
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4930      	ldr	r1, [pc, #192]	; (8010208 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	4798      	blx	r3
    Utest* testToRun = createTest();
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	3388      	adds	r3, #136	; 0x88
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68f8      	ldr	r0, [r7, #12]
 8010156:	4798      	blx	r3
 8010158:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	333c      	adds	r3, #60	; 0x3c
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	492a      	ldr	r1, [pc, #168]	; (801020c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	333c      	adds	r3, #60	; 0x3c
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4927      	ldr	r1, [pc, #156]	; (8010210 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	4798      	blx	r3
    testToRun->run();
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3308      	adds	r3, #8
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6978      	ldr	r0, [r7, #20]
 8010180:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	333c      	adds	r3, #60	; 0x3c
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4922      	ldr	r1, [pc, #136]	; (8010214 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8010190:	69f9      	ldr	r1, [r7, #28]
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f001 fa4a 	bl	801162c <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8010198:	69b9      	ldr	r1, [r7, #24]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f001 fa36 	bl	801160c <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	333c      	adds	r3, #60	; 0x3c
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	491b      	ldr	r1, [pc, #108]	; (8010218 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	4798      	blx	r3
    destroyTest(testToRun);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	338c      	adds	r3, #140	; 0x8c
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	6979      	ldr	r1, [r7, #20]
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	333c      	adds	r3, #60	; 0x3c
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4915      	ldr	r1, [pc, #84]	; (801021c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	333c      	adds	r3, #60	; 0x3c
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4913      	ldr	r1, [pc, #76]	; (8010220 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	3318      	adds	r3, #24
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	68b8      	ldr	r0, [r7, #8]
 80101e6:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	333c      	adds	r3, #60	; 0x3c
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	490c      	ldr	r1, [pc, #48]	; (8010224 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	4798      	blx	r3
}
 80101f6:	bf00      	nop
 80101f8:	3720      	adds	r7, #32
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	08021b68 	.word	0x08021b68
 8010204:	08021b8c 	.word	0x08021b8c
 8010208:	08021bac 	.word	0x08021bac
 801020c:	08021bc8 	.word	0x08021bc8
 8010210:	08021be4 	.word	0x08021be4
 8010214:	08021c00 	.word	0x08021c00
 8010218:	08021c18 	.word	0x08021c18
 801021c:	08021c34 	.word	0x08021c34
 8010220:	08021c50 	.word	0x08021c50
 8010224:	08021c74 	.word	0x08021c74

08010228 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
    return next_;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	695b      	ldr	r3, [r3, #20]
}
 8010234:	4618      	mov	r0, r3
 8010236:	370c      	adds	r7, #12
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr

08010240 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8010240:	b480      	push	{r7}
 8010242:	b083      	sub	sp, #12
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
    next_ = test;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	615a      	str	r2, [r3, #20]
    return this;
 8010250:	687b      	ldr	r3, [r7, #4]
}
 8010252:	4618      	mov	r0, r3
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b082      	sub	sp, #8
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	695b      	ldr	r3, [r3, #20]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00b      	beq.n	8010286 <_ZN10UtestShell10countTestsEv+0x28>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	695a      	ldr	r2, [r3, #20]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	695b      	ldr	r3, [r3, #20]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	3310      	adds	r3, #16
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4610      	mov	r0, r2
 801027e:	4798      	blx	r3
 8010280:	4603      	mov	r3, r0
 8010282:	3301      	adds	r3, #1
 8010284:	e000      	b.n	8010288 <_ZN10UtestShell10countTestsEv+0x2a>
 8010286:	2301      	movs	r3, #1
}
 8010288:	4618      	mov	r0, r3
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
    return "TEST";
 801029a:	4904      	ldr	r1, [pc, #16]	; (80102ac <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f7f9 fe0c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
}
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	08021c98 	.word	0x08021c98

080102b0 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	4619      	mov	r1, r3
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7f9 fdfa 	bl	8009eba <_ZN12SimpleStringC1EPKc>
}
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b082      	sub	sp, #8
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7f9 fdeb 	bl	8009eba <_ZN12SimpleStringC1EPKc>
}
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	33a0      	adds	r3, #160	; 0xa0
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	4610      	mov	r0, r2
 8010304:	4798      	blx	r3
    formattedName += "(";
 8010306:	490e      	ldr	r1, [pc, #56]	; (8010340 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7fa fa1d 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	4619      	mov	r1, r3
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7fa fa17 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801031a:	490a      	ldr	r1, [pc, #40]	; (8010344 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7fa fa13 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7fa fa0d 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801032e:	4906      	ldr	r1, [pc, #24]	; (8010348 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7fa fa09 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8010336:	bf00      	nop
}
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	3708      	adds	r7, #8
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	08021ca0 	.word	0x08021ca0
 8010344:	08021ca4 	.word	0x08021ca4
 8010348:	08021ca8 	.word	0x08021ca8

0801034c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 801034c:	b480      	push	{r7}
 801034e:	b083      	sub	sp, #12
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7e5b      	ldrb	r3, [r3, #25]
}
 8010358:	4618      	mov	r0, r3
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f001 f96d 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010372:	4603      	mov	r3, r0
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	3228      	adds	r2, #40	; 0x28
 8010378:	6812      	ldr	r2, [r2, #0]
 801037a:	4618      	mov	r0, r3
 801037c:	4790      	blx	r2
}
 801037e:	bf00      	nop
 8010380:	3708      	adds	r7, #8
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
    return true;
 801038e:	2301      	movs	r3, #1
}
 8010390:	4618      	mov	r0, r3
 8010392:	370c      	adds	r7, #12
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7e1b      	ldrb	r3, [r3, #24]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2201      	movs	r2, #1
 80103c0:	761a      	strb	r2, [r3, #24]
}
 80103c2:	bf00      	nop
 80103c4:	370c      	adds	r7, #12
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr

080103ce <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80103ce:	b480      	push	{r7}
 80103d0:	b083      	sub	sp, #12
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]

}
 80103d6:	bf00      	nop
 80103d8:	370c      	adds	r7, #12
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80103e2:	b480      	push	{r7}
 80103e4:	b083      	sub	sp, #12
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
 80103ea:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	683a      	ldr	r2, [r7, #0]
 80103f0:	60da      	str	r2, [r3, #12]
}
 80103f2:	bf00      	nop
 80103f4:	370c      	adds	r7, #12
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr

080103fe <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80103fe:	b480      	push	{r7}
 8010400:	b083      	sub	sp, #12
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	683a      	ldr	r2, [r7, #0]
 801040c:	611a      	str	r2, [r3, #16]
}
 801040e:	bf00      	nop
 8010410:	370c      	adds	r7, #12
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr

0801041a <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 801041a:	b480      	push	{r7}
 801041c:	b083      	sub	sp, #12
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	605a      	str	r2, [r3, #4]
}
 801042a:	bf00      	nop
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr

08010436 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8010436:	b480      	push	{r7}
 8010438:	b083      	sub	sp, #12
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
 801043e:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	683a      	ldr	r2, [r7, #0]
 8010444:	609a      	str	r2, [r3, #8]
}
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr

08010452 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b082      	sub	sp, #8
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	68db      	ldr	r3, [r3, #12]
 8010460:	4619      	mov	r1, r3
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7f9 fd29 	bl	8009eba <_ZN12SimpleStringC1EPKc>
}
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	3708      	adds	r7, #8
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	691b      	ldr	r3, [r3, #16]
}
 801047c:	4618      	mov	r0, r3
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8010488:	b590      	push	{r4, r7, lr}
 801048a:	b087      	sub	sp, #28
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d101      	bne.n	801049e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801049a:	2301      	movs	r3, #1
 801049c:	e01f      	b.n	80104de <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d01b      	beq.n	80104dc <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 80104a4:	f107 0310 	add.w	r3, r7, #16
 80104a8:	68b9      	ldr	r1, [r7, #8]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f9 fd05 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80104b0:	f107 0310 	add.w	r3, r7, #16
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f00c fb91 	bl	801cbde <_ZNK10TestFilter5matchERK12SimpleString>
 80104bc:	4603      	mov	r3, r0
 80104be:	461c      	mov	r4, r3
 80104c0:	f107 0310 	add.w	r3, r7, #16
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fa f8b0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80104ca:	2c00      	cmp	r4, #0
 80104cc:	d001      	beq.n	80104d2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 80104ce:	2301      	movs	r3, #1
 80104d0:	e005      	b.n	80104de <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f00c fb5d 	bl	801cb92 <_ZNK10TestFilter7getNextEv>
 80104d8:	6078      	str	r0, [r7, #4]
 80104da:	e7e0      	b.n	801049e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	371c      	adds	r7, #28
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd90      	pop	{r4, r7, pc}

080104e6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b084      	sub	sp, #16
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	60f8      	str	r0, [r7, #12]
 80104ee:	60b9      	str	r1, [r7, #8]
 80104f0:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	68ba      	ldr	r2, [r7, #8]
 80104f8:	4619      	mov	r1, r3
 80104fa:	68f8      	ldr	r0, [r7, #12]
 80104fc:	f7ff ffc4 	bl	8010488 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010500:	4603      	mov	r3, r0
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00b      	beq.n	801051e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	4619      	mov	r1, r3
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f7ff ffba 	bl	8010488 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801051a:	2301      	movs	r3, #1
 801051c:	e000      	b.n	8010520 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	339c      	adds	r3, #156	; 0x9c
 8010538:	681c      	ldr	r4, [r3, #0]
 801053a:	f001 f8b1 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801053e:	4603      	mov	r3, r0
 8010540:	461a      	mov	r2, r3
 8010542:	6839      	ldr	r1, [r7, #0]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	bd90      	pop	{r4, r7, pc}

08010550 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2201      	movs	r2, #1
 8010560:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f001 f872 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010568:	4603      	mov	r3, r0
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	3234      	adds	r2, #52	; 0x34
 801056e:	6812      	ldr	r2, [r2, #0]
 8010570:	68b9      	ldr	r1, [r7, #8]
 8010572:	4618      	mov	r0, r3
 8010574:	4790      	blx	r2
    terminator.exitCurrentTest();
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8010580:	bf00      	nop
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	6838      	ldr	r0, [r7, #0]
 801059a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b09d      	sub	sp, #116	; 0x74
 80105a8:	af04      	add	r7, sp, #16
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	607a      	str	r2, [r7, #4]
 80105ae:	603b      	str	r3, [r7, #0]
 80105b0:	460b      	mov	r3, r1
 80105b2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f001 f849 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80105ba:	4603      	mov	r3, r0
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	3228      	adds	r2, #40	; 0x28
 80105c0:	6812      	ldr	r2, [r2, #0]
 80105c2:	4618      	mov	r0, r3
 80105c4:	4790      	blx	r2
    if (!condition)
 80105c6:	7afb      	ldrb	r3, [r7, #11]
 80105c8:	f083 0301 	eor.w	r3, r3, #1
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d03f      	beq.n	8010652 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	339c      	adds	r3, #156	; 0x9c
 80105d8:	681c      	ldr	r4, [r3, #0]
 80105da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80105de:	6879      	ldr	r1, [r7, #4]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7f9 fc6a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80105e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7f9 fc64 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80105f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80105f6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7f9 fc5e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80105fe:	f107 0014 	add.w	r0, r7, #20
 8010602:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010606:	9302      	str	r3, [sp, #8]
 8010608:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010616:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010618:	68f9      	ldr	r1, [r7, #12]
 801061a:	f7fb ff6b 	bl	800c4f4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801061e:	f107 0314 	add.w	r3, r7, #20
 8010622:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010624:	4619      	mov	r1, r3
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	47a0      	blx	r4
 801062a:	f107 0314 	add.w	r3, r7, #20
 801062e:	4618      	mov	r0, r3
 8010630:	f7fc fdce 	bl	800d1d0 <_ZN12CheckFailureD1Ev>
 8010634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010638:	4618      	mov	r0, r3
 801063a:	f7f9 fff6 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801063e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010642:	4618      	mov	r0, r3
 8010644:	f7f9 fff1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801064c:	4618      	mov	r0, r3
 801064e:	f7f9 ffec 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8010652:	bf00      	nop
 8010654:	3764      	adds	r7, #100	; 0x64
 8010656:	46bd      	mov	sp, r7
 8010658:	bd90      	pop	{r4, r7, pc}

0801065a <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801065a:	b590      	push	{r4, r7, lr}
 801065c:	b097      	sub	sp, #92	; 0x5c
 801065e:	af02      	add	r7, sp, #8
 8010660:	60f8      	str	r0, [r7, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	607a      	str	r2, [r7, #4]
 8010666:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f000 ffef 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 801066e:	4603      	mov	r3, r0
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	3228      	adds	r2, #40	; 0x28
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	4618      	mov	r0, r3
 8010678:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	339c      	adds	r3, #156	; 0x9c
 8010680:	681c      	ldr	r4, [r3, #0]
 8010682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010686:	68b9      	ldr	r1, [r7, #8]
 8010688:	4618      	mov	r0, r3
 801068a:	f7f9 fc16 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801068e:	f107 0014 	add.w	r0, r7, #20
 8010692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	68f9      	ldr	r1, [r7, #12]
 801069e:	f7fb ff71 	bl	800c584 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80106a2:	f107 0314 	add.w	r3, r7, #20
 80106a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106a8:	4619      	mov	r1, r3
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	47a0      	blx	r4
 80106ae:	f107 0314 	add.w	r3, r7, #20
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f7 fc16 	bl	8007ee4 <_ZN11FailFailureD1Ev>
 80106b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80106bc:	4618      	mov	r0, r3
 80106be:	f7f9 ffb4 	bl	800a62a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80106c2:	bf00      	nop
 80106c4:	3754      	adds	r7, #84	; 0x54
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd90      	pop	{r4, r7, pc}

080106ca <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80106ca:	b590      	push	{r4, r7, lr}
 80106cc:	b0a7      	sub	sp, #156	; 0x9c
 80106ce:	af04      	add	r7, sp, #16
 80106d0:	60f8      	str	r0, [r7, #12]
 80106d2:	60b9      	str	r1, [r7, #8]
 80106d4:	607a      	str	r2, [r7, #4]
 80106d6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f000 ffb7 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80106de:	4603      	mov	r3, r0
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	3228      	adds	r2, #40	; 0x28
 80106e4:	6812      	ldr	r2, [r2, #0]
 80106e6:	4618      	mov	r0, r3
 80106e8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d102      	bne.n	80106f6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d068      	beq.n	80107c8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d12a      	bne.n	8010758 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	339c      	adds	r3, #156	; 0x9c
 8010708:	681c      	ldr	r4, [r3, #0]
 801070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	4618      	mov	r0, r3
 8010712:	f7f9 fbd2 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010716:	f107 0010 	add.w	r0, r7, #16
 801071a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801071e:	9302      	str	r3, [sp, #8]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	9301      	str	r3, [sp, #4]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	9300      	str	r3, [sp, #0]
 8010728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801072c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010730:	68f9      	ldr	r1, [r7, #12]
 8010732:	f7fc f9ad 	bl	800ca90 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010736:	f107 0310 	add.w	r3, r7, #16
 801073a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801073e:	4619      	mov	r1, r3
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	47a0      	blx	r4
 8010744:	f107 0310 	add.w	r3, r7, #16
 8010748:	4618      	mov	r0, r3
 801074a:	f7fc fcb9 	bl	800d0c0 <_ZN18StringEqualFailureD1Ev>
 801074e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010752:	4618      	mov	r0, r3
 8010754:	f7f9 ff69 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8010758:	6879      	ldr	r1, [r7, #4]
 801075a:	68b8      	ldr	r0, [r7, #8]
 801075c:	f7f9 f9ea 	bl	8009b34 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	bf14      	ite	ne
 8010766:	2301      	movne	r3, #1
 8010768:	2300      	moveq	r3, #0
 801076a:	b2db      	uxtb	r3, r3
 801076c:	2b00      	cmp	r3, #0
 801076e:	d02c      	beq.n	80107ca <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	339c      	adds	r3, #156	; 0x9c
 8010776:	681c      	ldr	r4, [r3, #0]
 8010778:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801077c:	6839      	ldr	r1, [r7, #0]
 801077e:	4618      	mov	r0, r3
 8010780:	f7f9 fb9b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010784:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010788:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801078c:	9302      	str	r3, [sp, #8]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	9301      	str	r3, [sp, #4]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801079a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801079e:	68f9      	ldr	r1, [r7, #12]
 80107a0:	f7fc f976 	bl	800ca90 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80107a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80107a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80107ac:	4619      	mov	r1, r3
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	47a0      	blx	r4
 80107b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fc fc82 	bl	800d0c0 <_ZN18StringEqualFailureD1Ev>
 80107bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7f9 ff32 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80107c6:	e000      	b.n	80107ca <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80107c8:	bf00      	nop
}
 80107ca:	378c      	adds	r7, #140	; 0x8c
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd90      	pop	{r4, r7, pc}

080107d0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80107d0:	b590      	push	{r4, r7, lr}
 80107d2:	b0a7      	sub	sp, #156	; 0x9c
 80107d4:	af04      	add	r7, sp, #16
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
 80107dc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	f000 ff34 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80107e4:	4603      	mov	r3, r0
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	3228      	adds	r2, #40	; 0x28
 80107ea:	6812      	ldr	r2, [r2, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d102      	bne.n	80107fc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d06b      	beq.n	80108d4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d002      	beq.n	8010808 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d12b      	bne.n	8010860 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	339c      	adds	r3, #156	; 0x9c
 801080e:	681c      	ldr	r4, [r3, #0]
 8010810:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010814:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010818:	4618      	mov	r0, r3
 801081a:	f7f9 fb4e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801081e:	f107 0010 	add.w	r0, r7, #16
 8010822:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010826:	9302      	str	r3, [sp, #8]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010834:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010838:	68f9      	ldr	r1, [r7, #12]
 801083a:	f7fc f929 	bl	800ca90 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801083e:	f107 0310 	add.w	r3, r7, #16
 8010842:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010846:	4619      	mov	r1, r3
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	47a0      	blx	r4
 801084c:	f107 0310 	add.w	r3, r7, #16
 8010850:	4618      	mov	r0, r3
 8010852:	f7fc fc35 	bl	800d0c0 <_ZN18StringEqualFailureD1Ev>
 8010856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801085a:	4618      	mov	r0, r3
 801085c:	f7f9 fee5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	6879      	ldr	r1, [r7, #4]
 8010864:	68b8      	ldr	r0, [r7, #8]
 8010866:	f7f9 f9a4 	bl	8009bb2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	bf14      	ite	ne
 8010870:	2301      	movne	r3, #1
 8010872:	2300      	moveq	r3, #0
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	d02d      	beq.n	80108d6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	339c      	adds	r3, #156	; 0x9c
 8010880:	681c      	ldr	r4, [r3, #0]
 8010882:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010886:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801088a:	4618      	mov	r0, r3
 801088c:	f7f9 fb15 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010890:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010894:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010898:	9302      	str	r3, [sp, #8]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	9301      	str	r3, [sp, #4]
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80108a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80108aa:	68f9      	ldr	r1, [r7, #12]
 80108ac:	f7fc f8f0 	bl	800ca90 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80108b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80108b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80108b8:	4619      	mov	r1, r3
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	47a0      	blx	r4
 80108be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fc fbfc 	bl	800d0c0 <_ZN18StringEqualFailureD1Ev>
 80108c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f9 feac 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80108d2:	e000      	b.n	80108d6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80108d4:	bf00      	nop
}
 80108d6:	378c      	adds	r7, #140	; 0x8c
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd90      	pop	{r4, r7, pc}

080108dc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80108dc:	b590      	push	{r4, r7, lr}
 80108de:	b0ab      	sub	sp, #172	; 0xac
 80108e0:	af04      	add	r7, sp, #16
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
 80108e8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80108ea:	68f8      	ldr	r0, [r7, #12]
 80108ec:	f000 feae 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80108f0:	4603      	mov	r3, r0
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	3228      	adds	r2, #40	; 0x28
 80108f6:	6812      	ldr	r2, [r2, #0]
 80108f8:	4618      	mov	r0, r3
 80108fa:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d102      	bne.n	8010908 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d07c      	beq.n	8010a02 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d128      	bne.n	8010966 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	3398      	adds	r3, #152	; 0x98
 801091a:	681c      	ldr	r4, [r3, #0]
 801091c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	4618      	mov	r0, r3
 8010924:	f7f9 fac9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010928:	f107 0010 	add.w	r0, r7, #16
 801092c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010930:	9302      	str	r3, [sp, #8]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801093e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010942:	68f9      	ldr	r1, [r7, #12]
 8010944:	f7fc f948 	bl	800cbd8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010948:	f107 0310 	add.w	r3, r7, #16
 801094c:	4619      	mov	r1, r3
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	47a0      	blx	r4
 8010952:	f107 0310 	add.w	r3, r7, #16
 8010956:	4618      	mov	r0, r3
 8010958:	f7fc fb90 	bl	800d07c <_ZN24StringEqualNoCaseFailureD1Ev>
 801095c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010960:	4618      	mov	r0, r3
 8010962:	f7f9 fe62 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8010966:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801096a:	68b9      	ldr	r1, [r7, #8]
 801096c:	4618      	mov	r0, r3
 801096e:	f7f9 faa4 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010972:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	f7f9 fa9e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801097e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010986:	4611      	mov	r1, r2
 8010988:	4618      	mov	r0, r3
 801098a:	f7f9 fe75 	bl	800a678 <_ZNK12SimpleString12equalsNoCaseERKS_>
 801098e:	4603      	mov	r3, r0
 8010990:	f083 0301 	eor.w	r3, r3, #1
 8010994:	b2dc      	uxtb	r4, r3
 8010996:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801099a:	4618      	mov	r0, r3
 801099c:	f7f9 fe45 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80109a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7f9 fe40 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80109aa:	2c00      	cmp	r4, #0
 80109ac:	d02a      	beq.n	8010a04 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	3398      	adds	r3, #152	; 0x98
 80109b4:	681c      	ldr	r4, [r3, #0]
 80109b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80109ba:	6839      	ldr	r1, [r7, #0]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7f9 fa7c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80109c2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80109c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80109ca:	9302      	str	r3, [sp, #8]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	9301      	str	r3, [sp, #4]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80109d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80109dc:	68f9      	ldr	r1, [r7, #12]
 80109de:	f7fc f8fb 	bl	800cbd8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80109e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80109e6:	4619      	mov	r1, r3
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	47a0      	blx	r4
 80109ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fc fb43 	bl	800d07c <_ZN24StringEqualNoCaseFailureD1Ev>
 80109f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7f9 fe15 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010a00:	e000      	b.n	8010a04 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010a02:	bf00      	nop
}
 8010a04:	379c      	adds	r7, #156	; 0x9c
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd90      	pop	{r4, r7, pc}

08010a0a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010a0a:	b590      	push	{r4, r7, lr}
 8010a0c:	b0b3      	sub	sp, #204	; 0xcc
 8010a0e:	af04      	add	r7, sp, #16
 8010a10:	60f8      	str	r0, [r7, #12]
 8010a12:	60b9      	str	r1, [r7, #8]
 8010a14:	607a      	str	r2, [r7, #4]
 8010a16:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010a18:	68f8      	ldr	r0, [r7, #12]
 8010a1a:	f000 fe17 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	3228      	adds	r2, #40	; 0x28
 8010a24:	6812      	ldr	r2, [r2, #0]
 8010a26:	4618      	mov	r0, r3
 8010a28:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d103      	bne.n	8010a38 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 80ad 	beq.w	8010b92 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d002      	beq.n	8010a44 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d140      	bne.n	8010ac6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	3398      	adds	r3, #152	; 0x98
 8010a4a:	681c      	ldr	r4, [r3, #0]
 8010a4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a50:	68b9      	ldr	r1, [r7, #8]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7f9 fa31 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010a58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010a5c:	6879      	ldr	r1, [r7, #4]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7f9 fa2b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010a68:	6839      	ldr	r1, [r7, #0]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7f9 fa25 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010a70:	f107 0010 	add.w	r0, r7, #16
 8010a74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010a78:	9302      	str	r3, [sp, #8]
 8010a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010a7e:	9301      	str	r3, [sp, #4]
 8010a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010a8e:	68f9      	ldr	r1, [r7, #12]
 8010a90:	f7fb fce6 	bl	800c460 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010a94:	f107 0310 	add.w	r3, r7, #16
 8010a98:	4619      	mov	r1, r3
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	47a0      	blx	r4
 8010a9e:	f107 0310 	add.w	r3, r7, #16
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fc fbb6 	bl	800d214 <_ZN15ContainsFailureD1Ev>
 8010aa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7f9 fdbc 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010ab2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7f9 fdb7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010abc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7f9 fdb2 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8010ac6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010aca:	6879      	ldr	r1, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7f9 f9f4 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010ad2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010ad6:	68b9      	ldr	r1, [r7, #8]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f9 f9ee 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010ade:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010ae2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7f9 fa64 	bl	8009fb6 <_ZNK12SimpleString8containsERKS_>
 8010aee:	4603      	mov	r3, r0
 8010af0:	f083 0301 	eor.w	r3, r3, #1
 8010af4:	b2dc      	uxtb	r4, r3
 8010af6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f9 fd95 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010b00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7f9 fd90 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010b0a:	2c00      	cmp	r4, #0
 8010b0c:	d042      	beq.n	8010b94 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	3398      	adds	r3, #152	; 0x98
 8010b14:	681c      	ldr	r4, [r3, #0]
 8010b16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010b1a:	68b9      	ldr	r1, [r7, #8]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f9 f9cc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010b22:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7f9 f9c6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010b2e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010b32:	6839      	ldr	r1, [r7, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f9 f9c0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010b3a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010b3e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010b42:	9302      	str	r3, [sp, #8]
 8010b44:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010b48:	9301      	str	r3, [sp, #4]
 8010b4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010b54:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010b58:	68f9      	ldr	r1, [r7, #12]
 8010b5a:	f7fb fc81 	bl	800c460 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010b5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010b62:	4619      	mov	r1, r3
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	47a0      	blx	r4
 8010b68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fc fb51 	bl	800d214 <_ZN15ContainsFailureD1Ev>
 8010b72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7f9 fd57 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010b7c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7f9 fd52 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010b86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7f9 fd4d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010b90:	e000      	b.n	8010b94 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010b92:	bf00      	nop
}
 8010b94:	37bc      	adds	r7, #188	; 0xbc
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd90      	pop	{r4, r7, pc}

08010b9a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010b9a:	b590      	push	{r4, r7, lr}
 8010b9c:	b0b3      	sub	sp, #204	; 0xcc
 8010b9e:	af04      	add	r7, sp, #16
 8010ba0:	60f8      	str	r0, [r7, #12]
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	607a      	str	r2, [r7, #4]
 8010ba6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f000 fd4f 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	3228      	adds	r2, #40	; 0x28
 8010bb4:	6812      	ldr	r2, [r2, #0]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d103      	bne.n	8010bc8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 80ad 	beq.w	8010d22 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d002      	beq.n	8010bd4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d140      	bne.n	8010c56 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3398      	adds	r3, #152	; 0x98
 8010bda:	681c      	ldr	r4, [r3, #0]
 8010bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010be0:	68b9      	ldr	r1, [r7, #8]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7f9 f969 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010be8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010bec:	6879      	ldr	r1, [r7, #4]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7f9 f963 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010bf8:	6839      	ldr	r1, [r7, #0]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7f9 f95d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010c00:	f107 0010 	add.w	r0, r7, #16
 8010c04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010c08:	9302      	str	r3, [sp, #8]
 8010c0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c0e:	9301      	str	r3, [sp, #4]
 8010c10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c14:	9300      	str	r3, [sp, #0]
 8010c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010c1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010c1e:	68f9      	ldr	r1, [r7, #12]
 8010c20:	f7fb fc1e 	bl	800c460 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010c24:	f107 0310 	add.w	r3, r7, #16
 8010c28:	4619      	mov	r1, r3
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	47a0      	blx	r4
 8010c2e:	f107 0310 	add.w	r3, r7, #16
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7fc faee 	bl	800d214 <_ZN15ContainsFailureD1Ev>
 8010c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f9 fcf4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010c42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7f9 fcef 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010c4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7f9 fcea 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8010c56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010c5a:	6879      	ldr	r1, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7f9 f92c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010c62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010c66:	68b9      	ldr	r1, [r7, #8]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7f9 f926 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010c6e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010c76:	4611      	mov	r1, r2
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7f9 f9b7 	bl	8009fec <_ZNK12SimpleString14containsNoCaseERKS_>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	f083 0301 	eor.w	r3, r3, #1
 8010c84:	b2dc      	uxtb	r4, r3
 8010c86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7f9 fccd 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7f9 fcc8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010c9a:	2c00      	cmp	r4, #0
 8010c9c:	d042      	beq.n	8010d24 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	3398      	adds	r3, #152	; 0x98
 8010ca4:	681c      	ldr	r4, [r3, #0]
 8010ca6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010caa:	68b9      	ldr	r1, [r7, #8]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f9 f904 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010cb2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010cb6:	6879      	ldr	r1, [r7, #4]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7f9 f8fe 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010cbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010cc2:	6839      	ldr	r1, [r7, #0]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7f9 f8f8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010cca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010cce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010cd2:	9302      	str	r3, [sp, #8]
 8010cd4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010ce4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010ce8:	68f9      	ldr	r1, [r7, #12]
 8010cea:	f7fb fbb9 	bl	800c460 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010cee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	47a0      	blx	r4
 8010cf8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fc fa89 	bl	800d214 <_ZN15ContainsFailureD1Ev>
 8010d02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7f9 fc8f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010d0c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7f9 fc8a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010d16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7f9 fc85 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010d20:	e000      	b.n	8010d24 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010d22:	bf00      	nop
}
 8010d24:	37bc      	adds	r7, #188	; 0xbc
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd90      	pop	{r4, r7, pc}

08010d2a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010d2a:	b590      	push	{r4, r7, lr}
 8010d2c:	b099      	sub	sp, #100	; 0x64
 8010d2e:	af04      	add	r7, sp, #16
 8010d30:	60f8      	str	r0, [r7, #12]
 8010d32:	60b9      	str	r1, [r7, #8]
 8010d34:	607a      	str	r2, [r7, #4]
 8010d36:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f000 fc87 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	3228      	adds	r2, #40	; 0x28
 8010d44:	6812      	ldr	r2, [r2, #0]
 8010d46:	4618      	mov	r0, r3
 8010d48:	4790      	blx	r2
    if (expected != actual)
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d027      	beq.n	8010da2 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	339c      	adds	r3, #156	; 0x9c
 8010d58:	681c      	ldr	r4, [r3, #0]
 8010d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d5e:	6839      	ldr	r1, [r7, #0]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7f9 f8aa 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010d66:	f107 0014 	add.w	r0, r7, #20
 8010d6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d6e:	9302      	str	r3, [sp, #8]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	9301      	str	r3, [sp, #4]
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	9300      	str	r3, [sp, #0]
 8010d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d7c:	68f9      	ldr	r1, [r7, #12]
 8010d7e:	f7fb fc1f 	bl	800c5c0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8010d82:	f107 0314 	add.w	r3, r7, #20
 8010d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d88:	4619      	mov	r1, r3
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	47a0      	blx	r4
 8010d8e:	f107 0314 	add.w	r3, r7, #20
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fc f9fa 	bl	800d18c <_ZN17LongsEqualFailureD1Ev>
 8010d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7f9 fc44 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8010da2:	bf00      	nop
 8010da4:	3754      	adds	r7, #84	; 0x54
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd90      	pop	{r4, r7, pc}

08010daa <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010daa:	b590      	push	{r4, r7, lr}
 8010dac:	b099      	sub	sp, #100	; 0x64
 8010dae:	af04      	add	r7, sp, #16
 8010db0:	60f8      	str	r0, [r7, #12]
 8010db2:	60b9      	str	r1, [r7, #8]
 8010db4:	607a      	str	r2, [r7, #4]
 8010db6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f000 fc47 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	3228      	adds	r2, #40	; 0x28
 8010dc4:	6812      	ldr	r2, [r2, #0]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	4790      	blx	r2
    if (expected != actual)
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d027      	beq.n	8010e22 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	339c      	adds	r3, #156	; 0x9c
 8010dd8:	681c      	ldr	r4, [r3, #0]
 8010dda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dde:	6839      	ldr	r1, [r7, #0]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f9 f86a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010de6:	f107 0014 	add.w	r0, r7, #20
 8010dea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dee:	9302      	str	r3, [sp, #8]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010dfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010dfc:	68f9      	ldr	r1, [r7, #12]
 8010dfe:	f7fb fcab 	bl	800c758 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8010e02:	f107 0314 	add.w	r3, r7, #20
 8010e06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010e08:	4619      	mov	r1, r3
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	47a0      	blx	r4
 8010e0e:	f107 0314 	add.w	r3, r7, #20
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fc f998 	bl	800d148 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8010e18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f9 fc04 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8010e22:	bf00      	nop
 8010e24:	3754      	adds	r7, #84	; 0x54
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd90      	pop	{r4, r7, pc}
	...

08010e2c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010e2c:	b082      	sub	sp, #8
 8010e2e:	b590      	push	{r4, r7, lr}
 8010e30:	b099      	sub	sp, #100	; 0x64
 8010e32:	af02      	add	r7, sp, #8
 8010e34:	60f8      	str	r0, [r7, #12]
 8010e36:	1d38      	adds	r0, r7, #4
 8010e38:	e880 0006 	stmia.w	r0, {r1, r2}
 8010e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f000 fc04 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010e44:	4603      	mov	r3, r0
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	3228      	adds	r2, #40	; 0x28
 8010e4a:	6812      	ldr	r2, [r2, #0]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	339c      	adds	r3, #156	; 0x9c
 8010e56:	681c      	ldr	r4, [r3, #0]
 8010e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e5c:	4919      	ldr	r1, [pc, #100]	; (8010ec4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7f9 f82b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010e64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e68:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7f9 f825 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010e70:	f107 0014 	add.w	r0, r7, #20
 8010e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e78:	9301      	str	r3, [sp, #4]
 8010e7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e7e:	9300      	str	r3, [sp, #0]
 8010e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010e84:	68f9      	ldr	r1, [r7, #12]
 8010e86:	f7fc f84d 	bl	800cf24 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8010e8a:	f107 0314 	add.w	r3, r7, #20
 8010e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e92:	4619      	mov	r1, r3
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	47a0      	blx	r4
 8010e98:	f107 0314 	add.w	r3, r7, #20
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fc f887 	bl	800cfb0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8010ea2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7f9 fbbf 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7f9 fbba 	bl	800a62a <_ZN12SimpleStringD1Ev>
#endif
}
 8010eb6:	bf00      	nop
 8010eb8:	375c      	adds	r7, #92	; 0x5c
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010ec0:	b002      	add	sp, #8
 8010ec2:	4770      	bx	lr
 8010ec4:	08021cac 	.word	0x08021cac

08010ec8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010ec8:	b082      	sub	sp, #8
 8010eca:	b590      	push	{r4, r7, lr}
 8010ecc:	b099      	sub	sp, #100	; 0x64
 8010ece:	af02      	add	r7, sp, #8
 8010ed0:	60f8      	str	r0, [r7, #12]
 8010ed2:	1d38      	adds	r0, r7, #4
 8010ed4:	e880 0006 	stmia.w	r0, {r1, r2}
 8010ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f000 fbb6 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	681a      	ldr	r2, [r3, #0]
 8010ee4:	3228      	adds	r2, #40	; 0x28
 8010ee6:	6812      	ldr	r2, [r2, #0]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	339c      	adds	r3, #156	; 0x9c
 8010ef2:	681c      	ldr	r4, [r3, #0]
 8010ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ef8:	4919      	ldr	r1, [pc, #100]	; (8010f60 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7f8 ffdd 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010f00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f04:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7f8 ffd7 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010f0c:	f107 0014 	add.w	r0, r7, #20
 8010f10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f14:	9301      	str	r3, [sp, #4]
 8010f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f1a:	9300      	str	r3, [sp, #0]
 8010f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010f1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010f20:	68f9      	ldr	r1, [r7, #12]
 8010f22:	f7fb ffff 	bl	800cf24 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8010f26:	f107 0314 	add.w	r3, r7, #20
 8010f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f2e:	4619      	mov	r1, r3
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	47a0      	blx	r4
 8010f34:	f107 0314 	add.w	r3, r7, #20
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fc f839 	bl	800cfb0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8010f3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7f9 fb71 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8010f48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f9 fb6c 	bl	800a62a <_ZN12SimpleStringD1Ev>
#endif
}
 8010f52:	bf00      	nop
 8010f54:	375c      	adds	r7, #92	; 0x5c
 8010f56:	46bd      	mov	sp, r7
 8010f58:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010f5c:	b002      	add	sp, #8
 8010f5e:	4770      	bx	lr
 8010f60:	08021cac 	.word	0x08021cac

08010f64 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010f64:	b590      	push	{r4, r7, lr}
 8010f66:	b099      	sub	sp, #100	; 0x64
 8010f68:	af04      	add	r7, sp, #16
 8010f6a:	60f8      	str	r0, [r7, #12]
 8010f6c:	607b      	str	r3, [r7, #4]
 8010f6e:	460b      	mov	r3, r1
 8010f70:	72fb      	strb	r3, [r7, #11]
 8010f72:	4613      	mov	r3, r2
 8010f74:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 fb68 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	3228      	adds	r2, #40	; 0x28
 8010f82:	6812      	ldr	r2, [r2, #0]
 8010f84:	4618      	mov	r0, r3
 8010f86:	4790      	blx	r2
    if (expected != actual)
 8010f88:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010f8c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d029      	beq.n	8010fe8 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	339c      	adds	r3, #156	; 0x9c
 8010f9a:	681c      	ldr	r4, [r3, #0]
 8010f9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fa0:	6879      	ldr	r1, [r7, #4]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7f8 ff89 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8010fa8:	f107 0014 	add.w	r0, r7, #20
 8010fac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fb0:	9302      	str	r3, [sp, #8]
 8010fb2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8010fb6:	9301      	str	r3, [sp, #4]
 8010fb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010fbc:	9300      	str	r3, [sp, #0]
 8010fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010fc2:	68f9      	ldr	r1, [r7, #12]
 8010fc4:	f7fb fc94 	bl	800c8f0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8010fc8:	f107 0314 	add.w	r3, r7, #20
 8010fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010fce:	4619      	mov	r1, r3
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	47a0      	blx	r4
 8010fd4:	f107 0314 	add.w	r3, r7, #20
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fc f893 	bl	800d104 <_ZN23SignedBytesEqualFailureD1Ev>
 8010fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f9 fb21 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8010fe8:	bf00      	nop
 8010fea:	3754      	adds	r7, #84	; 0x54
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd90      	pop	{r4, r7, pc}

08010ff0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010ff0:	b590      	push	{r4, r7, lr}
 8010ff2:	b09d      	sub	sp, #116	; 0x74
 8010ff4:	af04      	add	r7, sp, #16
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
 8010ffc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	f000 fb24 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8011004:	4603      	mov	r3, r0
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	3228      	adds	r2, #40	; 0x28
 801100a:	6812      	ldr	r2, [r2, #0]
 801100c:	4618      	mov	r0, r3
 801100e:	4790      	blx	r2
    if (expected != actual)
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	429a      	cmp	r2, r3
 8011016:	d03f      	beq.n	8011098 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	339c      	adds	r3, #156	; 0x9c
 801101e:	681c      	ldr	r4, [r3, #0]
 8011020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011024:	68b9      	ldr	r1, [r7, #8]
 8011026:	4618      	mov	r0, r3
 8011028:	f7f9 fdea 	bl	800ac00 <_Z10StringFromPKv>
 801102c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011030:	6879      	ldr	r1, [r7, #4]
 8011032:	4618      	mov	r0, r3
 8011034:	f7f9 fde4 	bl	800ac00 <_Z10StringFromPKv>
 8011038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	4618      	mov	r0, r3
 8011040:	f7f8 ff3b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8011044:	f107 0014 	add.w	r0, r7, #20
 8011048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801104c:	9302      	str	r3, [sp, #8]
 801104e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011052:	9301      	str	r3, [sp, #4]
 8011054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801105c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801105e:	68f9      	ldr	r1, [r7, #12]
 8011060:	f7fb f814 	bl	800c08c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011064:	f107 0314 	add.w	r3, r7, #20
 8011068:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801106a:	4619      	mov	r1, r3
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	47a0      	blx	r4
 8011070:	f107 0314 	add.w	r3, r7, #20
 8011074:	4618      	mov	r0, r3
 8011076:	f7fc f955 	bl	800d324 <_ZN13EqualsFailureD1Ev>
 801107a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801107e:	4618      	mov	r0, r3
 8011080:	f7f9 fad3 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8011084:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011088:	4618      	mov	r0, r3
 801108a:	f7f9 face 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801108e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011092:	4618      	mov	r0, r3
 8011094:	f7f9 fac9 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8011098:	bf00      	nop
 801109a:	3764      	adds	r7, #100	; 0x64
 801109c:	46bd      	mov	sp, r7
 801109e:	bd90      	pop	{r4, r7, pc}

080110a0 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80110a0:	b590      	push	{r4, r7, lr}
 80110a2:	b09d      	sub	sp, #116	; 0x74
 80110a4:	af04      	add	r7, sp, #16
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f000 facc 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80110b4:	4603      	mov	r3, r0
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	3228      	adds	r2, #40	; 0x28
 80110ba:	6812      	ldr	r2, [r2, #0]
 80110bc:	4618      	mov	r0, r3
 80110be:	4790      	blx	r2
    if (expected != actual)
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d03f      	beq.n	8011148 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	339c      	adds	r3, #156	; 0x9c
 80110ce:	681c      	ldr	r4, [r3, #0]
 80110d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110d4:	68b9      	ldr	r1, [r7, #8]
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7f9 fdbc 	bl	800ac54 <_Z10StringFromPFvvE>
 80110dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80110e0:	6879      	ldr	r1, [r7, #4]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7f9 fdb6 	bl	800ac54 <_Z10StringFromPFvvE>
 80110e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f8 fee3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80110f4:	f107 0014 	add.w	r0, r7, #20
 80110f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80110fc:	9302      	str	r3, [sp, #8]
 80110fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011102:	9301      	str	r3, [sp, #4]
 8011104:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011108:	9300      	str	r3, [sp, #0]
 801110a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801110c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801110e:	68f9      	ldr	r1, [r7, #12]
 8011110:	f7fa ffbc 	bl	800c08c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011114:	f107 0314 	add.w	r3, r7, #20
 8011118:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801111a:	4619      	mov	r1, r3
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	47a0      	blx	r4
 8011120:	f107 0314 	add.w	r3, r7, #20
 8011124:	4618      	mov	r0, r3
 8011126:	f7fc f8fd 	bl	800d324 <_ZN13EqualsFailureD1Ev>
 801112a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801112e:	4618      	mov	r0, r3
 8011130:	f7f9 fa7b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8011134:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011138:	4618      	mov	r0, r3
 801113a:	f7f9 fa76 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801113e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011142:	4618      	mov	r0, r3
 8011144:	f7f9 fa71 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8011148:	bf00      	nop
 801114a:	3764      	adds	r7, #100	; 0x64
 801114c:	46bd      	mov	sp, r7
 801114e:	bd90      	pop	{r4, r7, pc}

08011150 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011150:	b590      	push	{r4, r7, lr}
 8011152:	b09d      	sub	sp, #116	; 0x74
 8011154:	af02      	add	r7, sp, #8
 8011156:	6278      	str	r0, [r7, #36]	; 0x24
 8011158:	ed87 0b06 	vstr	d0, [r7, #24]
 801115c:	ed87 1b04 	vstr	d1, [r7, #16]
 8011160:	ed87 2b02 	vstr	d2, [r7, #8]
 8011164:	6239      	str	r1, [r7, #32]
 8011166:	607a      	str	r2, [r7, #4]
 8011168:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801116a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801116c:	f000 fa6e 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8011170:	4603      	mov	r3, r0
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	3228      	adds	r2, #40	; 0x28
 8011176:	6812      	ldr	r2, [r2, #0]
 8011178:	4618      	mov	r0, r3
 801117a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 801117c:	ed97 2b02 	vldr	d2, [r7, #8]
 8011180:	ed97 1b04 	vldr	d1, [r7, #16]
 8011184:	ed97 0b06 	vldr	d0, [r7, #24]
 8011188:	f7fe fd4a 	bl	800fc20 <_Z13doubles_equalddd>
 801118c:	4603      	mov	r3, r0
 801118e:	f083 0301 	eor.w	r3, r3, #1
 8011192:	b2db      	uxtb	r3, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	d029      	beq.n	80111ec <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8011198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	339c      	adds	r3, #156	; 0x9c
 801119e:	681c      	ldr	r4, [r3, #0]
 80111a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80111a4:	6a39      	ldr	r1, [r7, #32]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7f8 fe87 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80111ac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80111b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80111b4:	9300      	str	r3, [sp, #0]
 80111b6:	ed97 2b02 	vldr	d2, [r7, #8]
 80111ba:	ed97 1b04 	vldr	d1, [r7, #16]
 80111be:	ed97 0b06 	vldr	d0, [r7, #24]
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111c8:	f7fa ffa2 	bl	800c110 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80111cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80111d2:	4619      	mov	r1, r3
 80111d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111d6:	47a0      	blx	r4
 80111d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fc f87f 	bl	800d2e0 <_ZN19DoublesEqualFailureD1Ev>
 80111e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7f9 fa1f 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80111ec:	bf00      	nop
 80111ee:	376c      	adds	r7, #108	; 0x6c
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd90      	pop	{r4, r7, pc}

080111f4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80111f4:	b590      	push	{r4, r7, lr}
 80111f6:	b0a7      	sub	sp, #156	; 0x9c
 80111f8:	af04      	add	r7, sp, #16
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
 8011200:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	f000 fa22 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8011208:	4603      	mov	r3, r0
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	3228      	adds	r2, #40	; 0x28
 801120e:	6812      	ldr	r2, [r2, #0]
 8011210:	4618      	mov	r0, r3
 8011212:	4790      	blx	r2
	if (length == 0) return;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d075      	beq.n	8011306 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d102      	bne.n	8011226 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d071      	beq.n	801130a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d002      	beq.n	8011232 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d12d      	bne.n	801128e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	339c      	adds	r3, #156	; 0x9c
 8011238:	681c      	ldr	r4, [r3, #0]
 801123a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801123e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011242:	4618      	mov	r0, r3
 8011244:	f7f8 fe39 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8011248:	f107 0010 	add.w	r0, r7, #16
 801124c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011250:	9303      	str	r3, [sp, #12]
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	9302      	str	r3, [sp, #8]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	9301      	str	r3, [sp, #4]
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	9300      	str	r3, [sp, #0]
 801125e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011262:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011266:	68f9      	ldr	r1, [r7, #12]
 8011268:	f7fb fd70 	bl	800cd4c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801126c:	f107 0310 	add.w	r3, r7, #16
 8011270:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011274:	4619      	mov	r1, r3
 8011276:	68f8      	ldr	r0, [r7, #12]
 8011278:	47a0      	blx	r4
 801127a:	f107 0310 	add.w	r3, r7, #16
 801127e:	4618      	mov	r0, r3
 8011280:	f7fb feda 	bl	800d038 <_ZN18BinaryEqualFailureD1Ev>
 8011284:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011288:	4618      	mov	r0, r3
 801128a:	f7f9 f9ce 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801128e:	683a      	ldr	r2, [r7, #0]
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	68b8      	ldr	r0, [r7, #8]
 8011294:	f7f8 fd30 	bl	8009cf8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	bf14      	ite	ne
 801129e:	2301      	movne	r3, #1
 80112a0:	2300      	moveq	r3, #0
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d031      	beq.n	801130c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	339c      	adds	r3, #156	; 0x9c
 80112ae:	681c      	ldr	r4, [r3, #0]
 80112b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80112b4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f8 fdfe 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80112be:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80112c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80112c6:	9303      	str	r3, [sp, #12]
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	9302      	str	r3, [sp, #8]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	9301      	str	r3, [sp, #4]
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80112d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80112dc:	68f9      	ldr	r1, [r7, #12]
 80112de:	f7fb fd35 	bl	800cd4c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80112e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80112e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80112ea:	4619      	mov	r1, r3
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	47a0      	blx	r4
 80112f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fb fe9f 	bl	800d038 <_ZN18BinaryEqualFailureD1Ev>
 80112fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f9 f993 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8011304:	e002      	b.n	801130c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8011306:	bf00      	nop
 8011308:	e000      	b.n	801130c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801130a:	bf00      	nop
}
 801130c:	378c      	adds	r7, #140	; 0x8c
 801130e:	46bd      	mov	sp, r7
 8011310:	bd90      	pop	{r4, r7, pc}

08011312 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011312:	b590      	push	{r4, r7, lr}
 8011314:	b09b      	sub	sp, #108	; 0x6c
 8011316:	af06      	add	r7, sp, #24
 8011318:	60f8      	str	r0, [r7, #12]
 801131a:	60b9      	str	r1, [r7, #8]
 801131c:	607a      	str	r2, [r7, #4]
 801131e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f000 f993 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8011326:	4603      	mov	r3, r0
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	3228      	adds	r2, #40	; 0x28
 801132c:	6812      	ldr	r2, [r2, #0]
 801132e:	4618      	mov	r0, r3
 8011330:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	405a      	eors	r2, r3
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	4013      	ands	r3, r2
 801133c:	2b00      	cmp	r3, #0
 801133e:	d02b      	beq.n	8011398 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	339c      	adds	r3, #156	; 0x9c
 8011346:	681c      	ldr	r4, [r3, #0]
 8011348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801134c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801134e:	4618      	mov	r0, r3
 8011350:	f7f8 fdb3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8011354:	f107 0014 	add.w	r0, r7, #20
 8011358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801135c:	9304      	str	r3, [sp, #16]
 801135e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011360:	9303      	str	r3, [sp, #12]
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	9302      	str	r3, [sp, #8]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011370:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011372:	68f9      	ldr	r1, [r7, #12]
 8011374:	f7fb fd7a 	bl	800ce6c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8011378:	f107 0314 	add.w	r3, r7, #20
 801137c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801137e:	4619      	mov	r1, r3
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	47a0      	blx	r4
 8011384:	f107 0314 	add.w	r3, r7, #20
 8011388:	4618      	mov	r0, r3
 801138a:	f7fb fe33 	bl	800cff4 <_ZN16BitsEqualFailureD1Ev>
 801138e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011392:	4618      	mov	r0, r3
 8011394:	f7f9 f949 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8011398:	bf00      	nop
 801139a:	3754      	adds	r7, #84	; 0x54
 801139c:	46bd      	mov	sp, r7
 801139e:	bd90      	pop	{r4, r7, pc}

080113a0 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 80113a0:	b590      	push	{r4, r7, lr}
 80113a2:	b09d      	sub	sp, #116	; 0x74
 80113a4:	af04      	add	r7, sp, #16
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	607a      	str	r2, [r7, #4]
 80113aa:	603b      	str	r3, [r7, #0]
 80113ac:	460b      	mov	r3, r1
 80113ae:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f000 f94b 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80113b6:	4603      	mov	r3, r0
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	3228      	adds	r2, #40	; 0x28
 80113bc:	6812      	ldr	r2, [r2, #0]
 80113be:	4618      	mov	r0, r3
 80113c0:	4790      	blx	r2
    if (failed)
 80113c2:	7afb      	ldrb	r3, [r7, #11]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d03f      	beq.n	8011448 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	339c      	adds	r3, #156	; 0x9c
 80113ce:	681c      	ldr	r4, [r3, #0]
 80113d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80113d4:	6879      	ldr	r1, [r7, #4]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7f8 fd6f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80113dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7f8 fd69 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80113e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80113ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7f8 fd63 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80113f4:	f107 0014 	add.w	r0, r7, #20
 80113f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80113fc:	9302      	str	r3, [sp, #8]
 80113fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801140c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801140e:	68f9      	ldr	r1, [r7, #12]
 8011410:	f7fa ff30 	bl	800c274 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011414:	f107 0314 	add.w	r3, r7, #20
 8011418:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801141a:	4619      	mov	r1, r3
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	47a0      	blx	r4
 8011420:	f107 0314 	add.w	r3, r7, #20
 8011424:	4618      	mov	r0, r3
 8011426:	f7fb ff39 	bl	800d29c <_ZN17CheckEqualFailureD1Ev>
 801142a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801142e:	4618      	mov	r0, r3
 8011430:	f7f9 f8fb 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8011434:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011438:	4618      	mov	r0, r3
 801143a:	f7f9 f8f6 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801143e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011442:	4618      	mov	r0, r3
 8011444:	f7f9 f8f1 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8011448:	bf00      	nop
 801144a:	3764      	adds	r7, #100	; 0x64
 801144c:	46bd      	mov	sp, r7
 801144e:	bd90      	pop	{r4, r7, pc}

08011450 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8011450:	b590      	push	{r4, r7, lr}
 8011452:	b09d      	sub	sp, #116	; 0x74
 8011454:	af04      	add	r7, sp, #16
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	607a      	str	r2, [r7, #4]
 801145a:	603b      	str	r3, [r7, #0]
 801145c:	460b      	mov	r3, r1
 801145e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f000 f8f3 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 8011466:	4603      	mov	r3, r0
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	3228      	adds	r2, #40	; 0x28
 801146c:	6812      	ldr	r2, [r2, #0]
 801146e:	4618      	mov	r0, r3
 8011470:	4790      	blx	r2
    if (!comparison)
 8011472:	7afb      	ldrb	r3, [r7, #11]
 8011474:	f083 0301 	eor.w	r3, r3, #1
 8011478:	b2db      	uxtb	r3, r3
 801147a:	2b00      	cmp	r3, #0
 801147c:	d03f      	beq.n	80114fe <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	339c      	adds	r3, #156	; 0x9c
 8011484:	681c      	ldr	r4, [r3, #0]
 8011486:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801148a:	6879      	ldr	r1, [r7, #4]
 801148c:	4618      	mov	r0, r3
 801148e:	f7f8 fd14 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8011492:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011496:	6839      	ldr	r1, [r7, #0]
 8011498:	4618      	mov	r0, r3
 801149a:	f7f8 fd0e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801149e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7f8 fd08 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80114aa:	f107 0014 	add.w	r0, r7, #20
 80114ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114b2:	9302      	str	r3, [sp, #8]
 80114b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80114c4:	68f9      	ldr	r1, [r7, #12]
 80114c6:	f7fa ff83 	bl	800c3d0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80114ca:	f107 0314 	add.w	r3, r7, #20
 80114ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114d0:	4619      	mov	r1, r3
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	47a0      	blx	r4
 80114d6:	f107 0314 	add.w	r3, r7, #20
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fb febc 	bl	800d258 <_ZN17ComparisonFailureD1Ev>
 80114e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7f9 f8a0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80114ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7f9 f89b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80114f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7f9 f896 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80114fe:	bf00      	nop
 8011500:	3764      	adds	r7, #100	; 0x64
 8011502:	46bd      	mov	sp, r7
 8011504:	bd90      	pop	{r4, r7, pc}
	...

08011508 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8011508:	b5b0      	push	{r4, r5, r7, lr}
 801150a:	b088      	sub	sp, #32
 801150c:	af00      	add	r7, sp, #0
 801150e:	60f8      	str	r0, [r7, #12]
 8011510:	60b9      	str	r1, [r7, #8]
 8011512:	607a      	str	r2, [r7, #4]
 8011514:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8011516:	f107 0310 	add.w	r3, r7, #16
 801151a:	4924      	ldr	r1, [pc, #144]	; (80115ac <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 801151c:	4618      	mov	r0, r3
 801151e:	f7f8 fccc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8011522:	f107 0310 	add.w	r3, r7, #16
 8011526:	6879      	ldr	r1, [r7, #4]
 8011528:	4618      	mov	r0, r3
 801152a:	f7f9 f90d 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 801152e:	f107 0310 	add.w	r3, r7, #16
 8011532:	491f      	ldr	r1, [pc, #124]	; (80115b0 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8011534:	4618      	mov	r0, r3
 8011536:	f7f9 f907 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801153a:	f107 0318 	add.w	r3, r7, #24
 801153e:	6839      	ldr	r1, [r7, #0]
 8011540:	4618      	mov	r0, r3
 8011542:	f7f9 fda1 	bl	800b088 <_Z10StringFromj>
 8011546:	f107 0218 	add.w	r2, r7, #24
 801154a:	f107 0310 	add.w	r3, r7, #16
 801154e:	4611      	mov	r1, r2
 8011550:	4618      	mov	r0, r3
 8011552:	f7f9 f8e7 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8011556:	f107 0318 	add.w	r3, r7, #24
 801155a:	4618      	mov	r0, r3
 801155c:	f7f9 f865 	bl	800a62a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8011560:	f107 0310 	add.w	r3, r7, #16
 8011564:	4913      	ldr	r1, [pc, #76]	; (80115b4 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8011566:	4618      	mov	r0, r3
 8011568:	f7f9 f8ee 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 801156c:	f107 0310 	add.w	r3, r7, #16
 8011570:	68b9      	ldr	r1, [r7, #8]
 8011572:	4618      	mov	r0, r3
 8011574:	f7f9 f8e8 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8011578:	68f8      	ldr	r0, [r7, #12]
 801157a:	f000 f867 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 801157e:	4604      	mov	r4, r0
 8011580:	6823      	ldr	r3, [r4, #0]
 8011582:	3338      	adds	r3, #56	; 0x38
 8011584:	681d      	ldr	r5, [r3, #0]
 8011586:	f107 0310 	add.w	r3, r7, #16
 801158a:	4618      	mov	r0, r3
 801158c:	f7f9 f820 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8011590:	4603      	mov	r3, r0
 8011592:	4619      	mov	r1, r3
 8011594:	4620      	mov	r0, r4
 8011596:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8011598:	f107 0310 	add.w	r3, r7, #16
 801159c:	4618      	mov	r0, r3
 801159e:	f7f9 f844 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 80115a2:	bf00      	nop
 80115a4:	3720      	adds	r7, #32
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bdb0      	pop	{r4, r5, r7, pc}
 80115aa:	bf00      	nop
 80115ac:	08021cc4 	.word	0x08021cc4
 80115b0:	08021cc8 	.word	0x08021cc8
 80115b4:	08021ccc 	.word	0x08021ccc

080115b8 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80115b8:	b590      	push	{r4, r7, lr}
 80115ba:	b085      	sub	sp, #20
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	607a      	str	r2, [r7, #4]
 80115c4:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	3370      	adds	r3, #112	; 0x70
 80115cc:	681c      	ldr	r4, [r3, #0]
 80115ce:	68b8      	ldr	r0, [r7, #8]
 80115d0:	f7f8 fffe 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 80115d4:	4601      	mov	r1, r0
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	47a0      	blx	r4
}
 80115de:	bf00      	nop
 80115e0:	3714      	adds	r7, #20
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd90      	pop	{r4, r7, pc}

080115e6 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b082      	sub	sp, #8
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]
 80115ee:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f82b 	bl	801164c <_ZN10UtestShell13getTestResultEv>
 80115f6:	4603      	mov	r3, r0
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	323c      	adds	r2, #60	; 0x3c
 80115fc:	6812      	ldr	r2, [r2, #0]
 80115fe:	6839      	ldr	r1, [r7, #0]
 8011600:	4618      	mov	r0, r3
 8011602:	4790      	blx	r2
}
 8011604:	bf00      	nop
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}

0801160c <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8011616:	4a04      	ldr	r2, [pc, #16]	; (8011628 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	6013      	str	r3, [r2, #0]
}
 801161c:	bf00      	nop
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	200008a8 	.word	0x200008a8

0801162c <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8011636:	4a04      	ldr	r2, [pc, #16]	; (8011648 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	6013      	str	r3, [r2, #0]
}
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	200008ac 	.word	0x200008ac

0801164c <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8011654:	4b09      	ldr	r3, [pc, #36]	; (801167c <_ZN10UtestShell13getTestResultEv+0x30>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d109      	bne.n	8011670 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 801165c:	f7fe fbb2 	bl	800fdc4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8011660:	4603      	mov	r3, r0
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	32a4      	adds	r2, #164	; 0xa4
 8011666:	6812      	ldr	r2, [r2, #0]
 8011668:	4618      	mov	r0, r3
 801166a:	4790      	blx	r2
 801166c:	4603      	mov	r3, r0
 801166e:	e001      	b.n	8011674 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8011670:	4b02      	ldr	r3, [pc, #8]	; (801167c <_ZN10UtestShell13getTestResultEv+0x30>)
 8011672:	681b      	ldr	r3, [r3, #0]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3708      	adds	r7, #8
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}
 801167c:	200008a8 	.word	0x200008a8

08011680 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8011680:	b580      	push	{r7, lr}
 8011682:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8011684:	4b05      	ldr	r3, [pc, #20]	; (801169c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d103      	bne.n	8011694 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 801168c:	f7fe fb9a 	bl	800fdc4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8011690:	4603      	mov	r3, r0
 8011692:	e001      	b.n	8011698 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8011694:	4b01      	ldr	r3, [pc, #4]	; (801169c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011696:	681b      	ldr	r3, [r3, #0]
}
 8011698:	4618      	mov	r0, r3
 801169a:	bd80      	pop	{r7, pc}
 801169c:	200008ac 	.word	0x200008ac

080116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80116a0:	b480      	push	{r7}
 80116a2:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80116a4:	4b03      	ldr	r3, [pc, #12]	; (80116b4 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80116a6:	681b      	ldr	r3, [r3, #0]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	20000090 	.word	0x20000090

080116b8 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80116b8:	b480      	push	{r7}
 80116ba:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80116bc:	4b03      	ldr	r3, [pc, #12]	; (80116cc <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80116be:	4a04      	ldr	r2, [pc, #16]	; (80116d0 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80116c0:	601a      	str	r2, [r3, #0]
}
 80116c2:	bf00      	nop
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	20000090 	.word	0x20000090
 80116d0:	2000008c 	.word	0x2000008c

080116d4 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	4a04      	ldr	r2, [pc, #16]	; (80116f0 <_ZN5UtestC1Ev+0x1c>)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	601a      	str	r2, [r3, #0]
{
}
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4618      	mov	r0, r3
 80116e6:	370c      	adds	r7, #12
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	080249ac 	.word	0x080249ac

080116f4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	4a04      	ldr	r2, [pc, #16]	; (8011710 <_ZN5UtestD1Ev+0x1c>)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	601a      	str	r2, [r3, #0]
{
}
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4618      	mov	r0, r3
 8011706:	370c      	adds	r7, #12
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr
 8011710:	080249ac 	.word	0x080249ac

08011714 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
}
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7ff ffe9 	bl	80116f4 <_ZN5UtestD1Ev>
 8011722:	2104      	movs	r1, #4
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7f6 f819 	bl	800775c <_ZdlPvj>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4618      	mov	r0, r3
 801172e:	3708      	adds	r7, #8
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 801173c:	4b0d      	ldr	r3, [pc, #52]	; (8011774 <_ZN5Utest3runEv+0x40>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	6879      	ldr	r1, [r7, #4]
 8011742:	480d      	ldr	r0, [pc, #52]	; (8011778 <_ZN5Utest3runEv+0x44>)
 8011744:	4798      	blx	r3
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	bf14      	ite	ne
 801174c:	2301      	movne	r3, #1
 801174e:	2300      	moveq	r3, #0
 8011750:	b2db      	uxtb	r3, r3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d004      	beq.n	8011760 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8011756:	4b07      	ldr	r3, [pc, #28]	; (8011774 <_ZN5Utest3runEv+0x40>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	6879      	ldr	r1, [r7, #4]
 801175c:	4807      	ldr	r0, [pc, #28]	; (801177c <_ZN5Utest3runEv+0x48>)
 801175e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8011760:	4b04      	ldr	r3, [pc, #16]	; (8011774 <_ZN5Utest3runEv+0x40>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	6879      	ldr	r1, [r7, #4]
 8011766:	4806      	ldr	r0, [pc, #24]	; (8011780 <_ZN5Utest3runEv+0x4c>)
 8011768:	4798      	blx	r3
}
 801176a:	bf00      	nop
 801176c:	3708      	adds	r7, #8
 801176e:	46bd      	mov	sp, r7
 8011770:	bd80      	pop	{r7, pc}
 8011772:	bf00      	nop
 8011774:	200000a0 	.word	0x200000a0
 8011778:	0800fe21 	.word	0x0800fe21
 801177c:	0800fe3d 	.word	0x0800fe3d
 8011780:	0800fe59 	.word	0x0800fe59

08011784 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
}
 80117b4:	bf00      	nop
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	4a04      	ldr	r2, [pc, #16]	; (80117dc <_ZN14TestTerminatorD1Ev+0x1c>)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	601a      	str	r2, [r3, #0]
{
}
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	4618      	mov	r0, r3
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	08024998 	.word	0x08024998

080117e0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80117e8:	2300      	movs	r3, #0
 80117ea:	60fb      	str	r3, [r7, #12]
 80117ec:	f107 030c 	add.w	r3, r7, #12
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7f6 f975 	bl	8007ae0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80117f6:	f107 030c 	add.w	r3, r7, #12
 80117fa:	4618      	mov	r0, r3
 80117fc:	f000 f82c 	bl	8011858 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8011800:	f107 030c 	add.w	r3, r7, #12
 8011804:	4618      	mov	r0, r3
 8011806:	f000 f835 	bl	8011874 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 801180a:	bf00      	nop
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
	...

08011814 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	4a05      	ldr	r2, [pc, #20]	; (8011834 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4618      	mov	r0, r3
 8011826:	f7ff ffcb 	bl	80117c0 <_ZN14TestTerminatorD1Ev>
{
}
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4618      	mov	r0, r3
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	08024984 	.word	0x08024984

08011838 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
}
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f7ff ffe7 	bl	8011814 <_ZN20NormalTestTerminatorD1Ev>
 8011846:	2104      	movs	r1, #4
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7f5 ff87 	bl	800775c <_ZdlPvj>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8011860:	4b03      	ldr	r3, [pc, #12]	; (8011870 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011866:	bf00      	nop
 8011868:	3708      	adds	r7, #8
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	2000009c 	.word	0x2000009c

08011874 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	4a05      	ldr	r2, [pc, #20]	; (8011894 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	601a      	str	r2, [r3, #0]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	4618      	mov	r0, r3
 8011886:	f7ff ff9b 	bl	80117c0 <_ZN14TestTerminatorD1Ev>
{
}
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4618      	mov	r0, r3
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	08024970 	.word	0x08024970

08011898 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
}
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff ffe7 	bl	8011874 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80118a6:	2104      	movs	r1, #4
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7f5 ff57 	bl	800775c <_ZdlPvj>
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80118c0:	f7fe fbaa 	bl	8010018 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7ff ff8a 	bl	80117e0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80118cc:	bf00      	nop
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	4a05      	ldr	r2, [pc, #20]	; (80118f4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	601a      	str	r2, [r3, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff ff95 	bl	8011814 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	0802495c 	.word	0x0802495c

080118f8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
}
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff ffe7 	bl	80118d4 <_ZN22CrashingTestTerminatorD1Ev>
 8011906:	2104      	movs	r1, #4
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7f5 ff27 	bl	800775c <_ZdlPvj>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d007      	beq.n	8011944 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3310      	adds	r3, #16
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	6838      	ldr	r0, [r7, #0]
 801193e:	4798      	blx	r3
 8011940:	4603      	mov	r3, r0
 8011942:	e000      	b.n	8011946 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8011944:	2300      	movs	r3, #0
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d02d      	beq.n	80119ae <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801195a:	4293      	cmp	r3, r2
 801195c:	d201      	bcs.n	8011962 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	e001      	b.n	8011966 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8011962:	f04f 33ff 	mov.w	r3, #4294967295
 8011966:	f240 3237 	movw	r2, #823	; 0x337
 801196a:	4914      	ldr	r1, [pc, #80]	; (80119bc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 801196c:	4618      	mov	r0, r3
 801196e:	f7f5 ff05 	bl	800777c <_ZnajPKci>
 8011972:	4602      	mov	r2, r0
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801197c:	2300      	movs	r3, #0
 801197e:	60bb      	str	r3, [r7, #8]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	68ba      	ldr	r2, [r7, #8]
 8011986:	429a      	cmp	r2, r3
 8011988:	d212      	bcs.n	80119b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	330c      	adds	r3, #12
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	68f8      	ldr	r0, [r7, #12]
 80119a2:	4798      	blx	r3
 80119a4:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	3301      	adds	r3, #1
 80119aa:	60bb      	str	r3, [r7, #8]
 80119ac:	e7e8      	b.n	8011980 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80119ae:	bf00      	nop
    }
}
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	4618      	mov	r0, r3
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	08021b54 	.word	0x08021b54

080119c0 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d004      	beq.n	80119da <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7f5 fee5 	bl	80077a4 <_ZdaPv>
}
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	4618      	mov	r0, r3
 80119de:	3708      	adds	r7, #8
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b087      	sub	sp, #28
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4413      	add	r3, r2
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4413      	add	r3, r2
 8011a16:	697a      	ldr	r2, [r7, #20]
 8011a18:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681a      	ldr	r2, [r3, #0]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	4413      	add	r3, r2
 8011a24:	693a      	ldr	r2, [r7, #16]
 8011a26:	601a      	str	r2, [r3, #0]
}
 8011a28:	bf00      	nop
 8011a2a:	371c      	adds	r7, #28
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d028      	beq.n	8011a98 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8011a46:	4b17      	ldr	r3, [pc, #92]	; (8011aa4 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	6838      	ldr	r0, [r7, #0]
 8011a4c:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	60fb      	str	r3, [r7, #12]
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d019      	beq.n	8011a90 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d01b      	beq.n	8011a9c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8011a64:	4b10      	ldr	r3, [pc, #64]	; (8011aa8 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4798      	blx	r3
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3301      	adds	r3, #1
 8011a72:	fbb2 f1f3 	udiv	r1, r2, r3
 8011a76:	fb03 f301 	mul.w	r3, r3, r1
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8011a7e:	68ba      	ldr	r2, [r7, #8]
 8011a80:	68f9      	ldr	r1, [r7, #12]
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f7ff ffae 	bl	80119e4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	e7e2      	b.n	8011a56 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 f834 	bl	8011afe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011a96:	e002      	b.n	8011a9e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8011a98:	bf00      	nop
 8011a9a:	e000      	b.n	8011a9e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8011a9c:	bf00      	nop
}
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	200000dc 	.word	0x200000dc
 8011aa8:	200000e0 	.word	0x200000e0

08011aac <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b086      	sub	sp, #24
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d01c      	beq.n	8011af6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	085b      	lsrs	r3, r3, #1
 8011ac2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	617b      	str	r3, [r7, #20]
 8011ac8:	697a      	ldr	r2, [r7, #20]
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d20e      	bcs.n	8011aee <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	685a      	ldr	r2, [r3, #4]
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	3b01      	subs	r3, #1
 8011ada:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	6979      	ldr	r1, [r7, #20]
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff ff7f 	bl	80119e4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	617b      	str	r3, [r7, #20]
 8011aec:	e7ec      	b.n	8011ac8 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f000 f805 	bl	8011afe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011af4:	e000      	b.n	8011af8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8011af6:	bf00      	nop
}
 8011af8:	3718      	adds	r7, #24
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b084      	sub	sp, #16
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8011b06:	2300      	movs	r3, #0
 8011b08:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	60bb      	str	r3, [r7, #8]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	68ba      	ldr	r2, [r7, #8]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d221      	bcs.n	8011b5c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6859      	ldr	r1, [r3, #4]
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	1acb      	subs	r3, r1, r3
 8011b24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	6818      	ldr	r0, [r3, #0]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6859      	ldr	r1, [r3, #4]
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	1acb      	subs	r3, r1, r3
 8011b3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011b40:	3b01      	subs	r3, #1
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	68f9      	ldr	r1, [r7, #12]
 8011b50:	4798      	blx	r3
 8011b52:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	3301      	adds	r3, #1
 8011b58:	60bb      	str	r3, [r7, #8]
 8011b5a:	e7d8      	b.n	8011b0e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8011b5c:	bf00      	nop
 8011b5e:	3710      	adds	r7, #16
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
    return get(0);
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f000 f805 	bl	8011b7e <_ZNK22UtestShellPointerArray3getEj>
 8011b74:	4603      	mov	r3, r0
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8011b7e:	b480      	push	{r7}
 8011b80:	b083      	sub	sp, #12
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
 8011b86:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d301      	bcc.n	8011b96 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8011b92:	2300      	movs	r3, #0
 8011b94:	e005      	b.n	8011ba2 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4413      	add	r3, r2
 8011ba0:	681b      	ldr	r3, [r3, #0]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	370c      	adds	r7, #12
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr
	...

08011bb0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	607a      	str	r2, [r7, #4]
 8011bbc:	603b      	str	r3, [r7, #0]
 8011bbe:	4a10      	ldr	r2, [pc, #64]	; (8011c00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8011bc4:	6879      	ldr	r1, [r7, #4]
 8011bc6:	68b8      	ldr	r0, [r7, #8]
 8011bc8:	f7fe fc27 	bl	801041a <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8011bcc:	6839      	ldr	r1, [r7, #0]
 8011bce:	68b8      	ldr	r0, [r7, #8]
 8011bd0:	f7fe fc31 	bl	8010436 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8011bd4:	69b9      	ldr	r1, [r7, #24]
 8011bd6:	68b8      	ldr	r0, [r7, #8]
 8011bd8:	f7fe fc03 	bl	80103e2 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8011bdc:	69f9      	ldr	r1, [r7, #28]
 8011bde:	68b8      	ldr	r0, [r7, #8]
 8011be0:	f7fe fc0d 	bl	80103fe <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8011be4:	f7fd fc20 	bl	800f428 <_ZN12TestRegistry18getCurrentRegistryEv>
 8011be8:	4603      	mov	r3, r0
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	3208      	adds	r2, #8
 8011bee:	6812      	ldr	r2, [r2, #0]
 8011bf0:	68b9      	ldr	r1, [r7, #8]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	4790      	blx	r2
}
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3710      	adds	r7, #16
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	080248a0 	.word	0x080248a0

08011c04 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8011c04:	b480      	push	{r7}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	4a04      	ldr	r2, [pc, #16]	; (8011c20 <_ZN13TestInstallerD1Ev+0x1c>)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	601a      	str	r2, [r3, #0]
{
}
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4618      	mov	r0, r3
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr
 8011c20:	080248a0 	.word	0x080248a0

08011c24 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
}
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7ff ffe9 	bl	8011c04 <_ZN13TestInstallerD1Ev>
 8011c32:	2104      	movs	r1, #4
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7f5 fd91 	bl	800775c <_ZdlPvj>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10a      	bne.n	8011c6a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d105      	bne.n	8011c6a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8011c5e:	4805      	ldr	r0, [pc, #20]	; (8011c74 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8011c60:	f7ff fe38 	bl	80118d4 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8011c64:	4804      	ldr	r0, [pc, #16]	; (8011c78 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8011c66:	f7ff fdd5 	bl	8011814 <_ZN20NormalTestTerminatorD1Ev>
}
 8011c6a:	bf00      	nop
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	2000008c 	.word	0x2000008c
 8011c78:	20000088 	.word	0x20000088

08011c7c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c84:	2001      	movs	r0, #1
 8011c86:	f7ff ffdd 	bl	8011c44 <_Z41__static_initialization_and_destruction_0ii>
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c94:	2000      	movs	r0, #0
 8011c96:	f7ff ffd5 	bl	8011c44 <_Z41__static_initialization_and_destruction_0ii>
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8011c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	ed87 0b00 	vstr	d0, [r7]
 8011ca6:	683c      	ldr	r4, [r7, #0]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8011cae:	2301      	movs	r3, #1
 8011cb0:	461e      	mov	r6, r3
 8011cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb6:	4b10      	ldr	r3, [pc, #64]	; (8011cf8 <_ZSt5isinfd+0x5c>)
 8011cb8:	4620      	mov	r0, r4
 8011cba:	4629      	mov	r1, r5
 8011cbc:	f7ee fd64 	bl	8000788 <__aeabi_dcmpun>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10b      	bne.n	8011cde <_ZSt5isinfd+0x42>
 8011cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cca:	4b0b      	ldr	r3, [pc, #44]	; (8011cf8 <_ZSt5isinfd+0x5c>)
 8011ccc:	4620      	mov	r0, r4
 8011cce:	4629      	mov	r1, r5
 8011cd0:	f7ee fd3c 	bl	800074c <__aeabi_dcmple>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d101      	bne.n	8011cde <_ZSt5isinfd+0x42>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	461e      	mov	r6, r3
 8011cde:	b2f3      	uxtb	r3, r6
 8011ce0:	f083 0301 	eor.w	r3, r3, #1
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	bf14      	ite	ne
 8011cea:	2301      	movne	r3, #1
 8011cec:	2300      	moveq	r3, #0
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	370c      	adds	r7, #12
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cf8:	7fefffff 	.word	0x7fefffff

08011cfc <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8011cfc:	b590      	push	{r4, r7, lr}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	ed87 0b00 	vstr	d0, [r7]
 8011d06:	2301      	movs	r3, #1
 8011d08:	461c      	mov	r4, r3
 8011d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011d12:	f7ee fd39 	bl	8000788 <__aeabi_dcmpun>
 8011d16:	4603      	mov	r3, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <_ZSt5isnand+0x24>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	461c      	mov	r4, r3
 8011d20:	b2e3      	uxtb	r3, r4
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	bf14      	ite	ne
 8011d26:	2301      	movne	r3, #1
 8011d28:	2300      	moveq	r3, #0
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd90      	pop	{r4, r7, pc}

08011d34 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8011d34:	b590      	push	{r4, r7, lr}
 8011d36:	b095      	sub	sp, #84	; 0x54
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	3334      	adds	r3, #52	; 0x34
 8011d46:	681c      	ldr	r4, [r3, #0]
 8011d48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d4c:	490f      	ldr	r1, [pc, #60]	; (8011d8c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7f8 f8b3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8011d54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011d58:	f107 0314 	add.w	r3, r7, #20
 8011d5c:	68f9      	ldr	r1, [r7, #12]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7f9 ff0a 	bl	800bb78 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8011d64:	f107 0314 	add.w	r3, r7, #20
 8011d68:	4619      	mov	r1, r3
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	47a0      	blx	r4
 8011d6e:	f107 0314 	add.w	r3, r7, #20
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7f9 ffc0 	bl	800bcf8 <_ZN11TestFailureD1Ev>
 8011d78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f8 fc54 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8011d82:	bf00      	nop
 8011d84:	3754      	adds	r7, #84	; 0x54
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd90      	pop	{r4, r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	08021cdc 	.word	0x08021cdc

08011d90 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8011d90:	b480      	push	{r7}
 8011d92:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8011d94:	2301      	movs	r3, #1
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8011daa:	4b13      	ldr	r3, [pc, #76]	; (8011df8 <PlatformSpecificSetJmpImplementation+0x58>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	225c      	movs	r2, #92	; 0x5c
 8011db0:	fb02 f303 	mul.w	r3, r2, r3
 8011db4:	4a11      	ldr	r2, [pc, #68]	; (8011dfc <PlatformSpecificSetJmpImplementation+0x5c>)
 8011db6:	4413      	add	r3, r2
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7ee fa31 	bl	8000220 <setjmp>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	bf0c      	ite	eq
 8011dc4:	2301      	moveq	r3, #1
 8011dc6:	2300      	movne	r3, #0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d00e      	beq.n	8011dec <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8011dce:	4b0a      	ldr	r3, [pc, #40]	; (8011df8 <PlatformSpecificSetJmpImplementation+0x58>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	4a08      	ldr	r2, [pc, #32]	; (8011df8 <PlatformSpecificSetJmpImplementation+0x58>)
 8011dd6:	6013      	str	r3, [r2, #0]
        function(data);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6838      	ldr	r0, [r7, #0]
 8011ddc:	4798      	blx	r3
        jmp_buf_index--;
 8011dde:	4b06      	ldr	r3, [pc, #24]	; (8011df8 <PlatformSpecificSetJmpImplementation+0x58>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	3b01      	subs	r3, #1
 8011de4:	4a04      	ldr	r2, [pc, #16]	; (8011df8 <PlatformSpecificSetJmpImplementation+0x58>)
 8011de6:	6013      	str	r3, [r2, #0]
        return 1;
 8011de8:	2301      	movs	r3, #1
 8011dea:	e000      	b.n	8011dee <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	20000c48 	.word	0x20000c48
 8011dfc:	200008b0 	.word	0x200008b0

08011e00 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8011e04:	4b07      	ldr	r3, [pc, #28]	; (8011e24 <PlatformSpecificLongJmpImplementation+0x24>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	4a06      	ldr	r2, [pc, #24]	; (8011e24 <PlatformSpecificLongJmpImplementation+0x24>)
 8011e0c:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8011e0e:	4b05      	ldr	r3, [pc, #20]	; (8011e24 <PlatformSpecificLongJmpImplementation+0x24>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	225c      	movs	r2, #92	; 0x5c
 8011e14:	fb02 f303 	mul.w	r3, r2, r3
 8011e18:	4a03      	ldr	r2, [pc, #12]	; (8011e28 <PlatformSpecificLongJmpImplementation+0x28>)
 8011e1a:	4413      	add	r3, r2
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7ee fa04 	bl	800022c <longjmp>
 8011e24:	20000c48 	.word	0x20000c48
 8011e28:	200008b0 	.word	0x200008b0

08011e2c <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8011e30:	2300      	movs	r3, #0
#endif
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8011e42:	2000      	movs	r0, #0
 8011e44:	f00c fd0e 	bl	801e864 <time>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8011e50:	463b      	mov	r3, r7
 8011e52:	4618      	mov	r0, r3
 8011e54:	f00b fb74 	bl	801d540 <localtime>
 8011e58:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	4a04      	ldr	r2, [pc, #16]	; (8011e70 <TimeStringImplementation+0x34>)
 8011e5e:	2150      	movs	r1, #80	; 0x50
 8011e60:	4804      	ldr	r0, [pc, #16]	; (8011e74 <TimeStringImplementation+0x38>)
 8011e62:	f00c fc55 	bl	801e710 <strftime>
    return dateTime;
 8011e66:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <TimeStringImplementation+0x38>)
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3710      	adds	r7, #16
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}
 8011e70:	08021d18 	.word	0x08021d18
 8011e74:	20000c4c 	.word	0x20000c4c

08011e78 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8011e82:	6839      	ldr	r1, [r7, #0]
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f00b f991 	bl	801d1ac <fopen>
 8011e8a:	4603      	mov	r3, r0
#endif
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8011e9e:	6839      	ldr	r1, [r7, #0]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f00b f9f1 	bl	801d288 <fputs>
}
 8011ea6:	bf00      	nop
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b082      	sub	sp, #8
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f00a ff72 	bl	801cda0 <fclose>
}
 8011ebc:	bf00      	nop
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	af00      	add	r7, sp, #0
  fflush(stdout);
 8011ec8:	4b03      	ldr	r3, [pc, #12]	; (8011ed8 <PlatformSpecificFlushImplementation+0x14>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f00b f830 	bl	801cf34 <fflush>
}
 8011ed4:	bf00      	nop
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	20000104 	.word	0x20000104

08011edc <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8011ee6:	ed97 0b00 	vldr	d0, [r7]
 8011eea:	f7ff ff07 	bl	8011cfc <_ZSt5isnand>
 8011eee:	4603      	mov	r3, r0
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3708      	adds	r7, #8
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8011f02:	ed97 0b00 	vldr	d0, [r7]
 8011f06:	f7ff fec9 	bl	8011c9c <_ZSt5isinfd>
 8011f0a:	4603      	mov	r3, r0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8011f14:	b480      	push	{r7}
 8011f16:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8011f18:	2300      	movs	r3, #0
#endif

}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f22:	4770      	bx	lr

08011f24 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
}
 8011f2c:	bf00      	nop
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
}
 8011f40:	bf00      	nop
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8011f6c:	4a25      	ldr	r2, [pc, #148]	; (8012004 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	601a      	str	r2, [r3, #0]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	605a      	str	r2, [r3, #4]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	609a      	str	r2, [r3, #8]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2200      	movs	r2, #0
 8011f82:	731a      	strb	r2, [r3, #12]
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2200      	movs	r2, #0
 8011f88:	735a      	strb	r2, [r3, #13]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	739a      	strb	r2, [r3, #14]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2200      	movs	r2, #0
 8011f94:	73da      	strb	r2, [r3, #15]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	741a      	strb	r2, [r3, #16]
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	745a      	strb	r2, [r3, #17]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	749a      	strb	r2, [r3, #18]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	2200      	movs	r2, #0
 8011fac:	74da      	strb	r2, [r3, #19]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	751a      	strb	r2, [r3, #20]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	755a      	strb	r2, [r3, #21]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	759a      	strb	r2, [r3, #22]
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	75da      	strb	r2, [r3, #23]
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	761a      	strb	r2, [r3, #24]
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	61da      	str	r2, [r3, #28]
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	621a      	str	r2, [r3, #32]
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	2200      	movs	r2, #0
 8011fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	3330      	adds	r3, #48	; 0x30
 8011ff0:	4905      	ldr	r1, [pc, #20]	; (8012008 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7f7 ff61 	bl	8009eba <_ZN12SimpleStringC1EPKc>
{
}
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	080249cc 	.word	0x080249cc
 8012008:	08021d2c 	.word	0x08021d2c

0801200c <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	4618      	mov	r0, r3
 8012018:	f7f8 fb07 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	4618      	mov	r0, r3
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
	...

08012028 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8012028:	b590      	push	{r4, r7, lr}
 801202a:	b085      	sub	sp, #20
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	4a20      	ldr	r2, [pc, #128]	; (80120b4 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203a:	2b00      	cmp	r3, #0
 801203c:	d015      	beq.n	801206a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012042:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012048:	4618      	mov	r0, r3
 801204a:	f00a fda2 	bl	801cb92 <_ZNK10TestFilter7getNextEv>
 801204e:	4602      	mov	r2, r0
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8012054:	68fc      	ldr	r4, [r7, #12]
 8012056:	2c00      	cmp	r4, #0
 8012058:	d0ed      	beq.n	8012036 <_ZN20CommandLineArgumentsD1Ev+0xe>
 801205a:	4620      	mov	r0, r4
 801205c:	f7ff ffd6 	bl	801200c <_ZN10TestFilterD1Ev>
 8012060:	2110      	movs	r1, #16
 8012062:	4620      	mov	r0, r4
 8012064:	f7f5 fb7a 	bl	800775c <_ZdlPvj>
    while(groupFilters_) {
 8012068:	e7e5      	b.n	8012036 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801206e:	2b00      	cmp	r3, #0
 8012070:	d015      	beq.n	801209e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012076:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801207c:	4618      	mov	r0, r3
 801207e:	f00a fd88 	bl	801cb92 <_ZNK10TestFilter7getNextEv>
 8012082:	4602      	mov	r2, r0
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8012088:	68bc      	ldr	r4, [r7, #8]
 801208a:	2c00      	cmp	r4, #0
 801208c:	d0ed      	beq.n	801206a <_ZN20CommandLineArgumentsD1Ev+0x42>
 801208e:	4620      	mov	r0, r4
 8012090:	f7ff ffbc 	bl	801200c <_ZN10TestFilterD1Ev>
 8012094:	2110      	movs	r1, #16
 8012096:	4620      	mov	r0, r4
 8012098:	f7f5 fb60 	bl	800775c <_ZdlPvj>
    while(nameFilters_) {
 801209c:	e7e5      	b.n	801206a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	3330      	adds	r3, #48	; 0x30
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7f8 fac1 	bl	800a62a <_ZN12SimpleStringD1Ev>
    }
}
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	4618      	mov	r0, r3
 80120ac:	3714      	adds	r7, #20
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd90      	pop	{r4, r7, pc}
 80120b2:	bf00      	nop
 80120b4:	080249cc 	.word	0x080249cc

080120b8 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
}
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7ff ffb1 	bl	8012028 <_ZN20CommandLineArgumentsD1Ev>
 80120c6:	2138      	movs	r1, #56	; 0x38
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7f5 fb47 	bl	800775c <_ZdlPvj>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	4618      	mov	r0, r3
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80120d8:	b5b0      	push	{r4, r5, r7, lr}
 80120da:	b0be      	sub	sp, #248	; 0xf8
 80120dc:	af02      	add	r7, sp, #8
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
 80120e2:	2400      	movs	r4, #0
    bool correctParameters = true;
 80120e4:	2301      	movs	r3, #1
 80120e6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80120ea:	2301      	movs	r3, #1
 80120ec:	613b      	str	r3, [r7, #16]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	685a      	ldr	r2, [r3, #4]
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	f340 83a4 	ble.w	8012842 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	689a      	ldr	r2, [r3, #8]
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	4413      	add	r3, r2
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	f107 0308 	add.w	r3, r7, #8
 801210a:	4611      	mov	r1, r2
 801210c:	4618      	mov	r0, r3
 801210e:	f7f7 fed4 	bl	8009eba <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8012112:	f107 0314 	add.w	r3, r7, #20
 8012116:	49c8      	ldr	r1, [pc, #800]	; (8012438 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8012118:	4618      	mov	r0, r3
 801211a:	f7f7 fece 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801211e:	f107 0214 	add.w	r2, r7, #20
 8012122:	f107 0308 	add.w	r3, r7, #8
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f7f8 fa8a 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801212e:	4603      	mov	r3, r0
 8012130:	461d      	mov	r5, r3
 8012132:	f107 0314 	add.w	r3, r7, #20
 8012136:	4618      	mov	r0, r3
 8012138:	f7f8 fa77 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801213c:	2d00      	cmp	r5, #0
 801213e:	d006      	beq.n	801214e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2201      	movs	r2, #1
 8012144:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8012146:	2300      	movs	r3, #0
 8012148:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801214c:	e366      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801214e:	f107 031c 	add.w	r3, r7, #28
 8012152:	49ba      	ldr	r1, [pc, #744]	; (801243c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8012154:	4618      	mov	r0, r3
 8012156:	f7f7 feb0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801215a:	f107 021c 	add.w	r2, r7, #28
 801215e:	f107 0308 	add.w	r3, r7, #8
 8012162:	4611      	mov	r1, r2
 8012164:	4618      	mov	r0, r3
 8012166:	f7f8 fa6c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801216a:	4603      	mov	r3, r0
 801216c:	461d      	mov	r5, r3
 801216e:	f107 031c 	add.w	r3, r7, #28
 8012172:	4618      	mov	r0, r3
 8012174:	f7f8 fa59 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012178:	2d00      	cmp	r5, #0
 801217a:	d003      	beq.n	8012184 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2201      	movs	r2, #1
 8012180:	735a      	strb	r2, [r3, #13]
 8012182:	e34b      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8012184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012188:	49ad      	ldr	r1, [pc, #692]	; (8012440 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801218a:	4618      	mov	r0, r3
 801218c:	f7f7 fe95 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012190:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012194:	f107 0308 	add.w	r3, r7, #8
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f7f8 fa51 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80121a0:	4603      	mov	r3, r0
 80121a2:	461d      	mov	r5, r3
 80121a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7f8 fa3e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	d003      	beq.n	80121ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2201      	movs	r2, #1
 80121b6:	739a      	strb	r2, [r3, #14]
 80121b8:	e330      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 80121ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80121be:	49a1      	ldr	r1, [pc, #644]	; (8012444 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7f7 fe7a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80121c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80121ca:	f107 0308 	add.w	r3, r7, #8
 80121ce:	4611      	mov	r1, r2
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7f8 fa36 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80121d6:	4603      	mov	r3, r0
 80121d8:	461d      	mov	r5, r3
 80121da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80121de:	4618      	mov	r0, r3
 80121e0:	f7f8 fa23 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80121e4:	2d00      	cmp	r5, #0
 80121e6:	d003      	beq.n	80121f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2201      	movs	r2, #1
 80121ec:	73da      	strb	r2, [r3, #15]
 80121ee:	e315      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80121f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80121f4:	4994      	ldr	r1, [pc, #592]	; (8012448 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7f7 fe5f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80121fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012200:	f107 0308 	add.w	r3, r7, #8
 8012204:	4611      	mov	r1, r2
 8012206:	4618      	mov	r0, r3
 8012208:	f7f8 fa1b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801220c:	4603      	mov	r3, r0
 801220e:	461d      	mov	r5, r3
 8012210:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012214:	4618      	mov	r0, r3
 8012216:	f7f8 fa08 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801221a:	2d00      	cmp	r5, #0
 801221c:	d003      	beq.n	8012226 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2201      	movs	r2, #1
 8012222:	741a      	strb	r2, [r3, #16]
 8012224:	e2fa      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8012226:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801222a:	4988      	ldr	r1, [pc, #544]	; (801244c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 801222c:	4618      	mov	r0, r3
 801222e:	f7f7 fe44 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012232:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012236:	f107 0308 	add.w	r3, r7, #8
 801223a:	4611      	mov	r1, r2
 801223c:	4618      	mov	r0, r3
 801223e:	f7f8 fa00 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 8012242:	4603      	mov	r3, r0
 8012244:	461d      	mov	r5, r3
 8012246:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801224a:	4618      	mov	r0, r3
 801224c:	f7f8 f9ed 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012250:	2d00      	cmp	r5, #0
 8012252:	d003      	beq.n	801225c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2201      	movs	r2, #1
 8012258:	755a      	strb	r2, [r3, #21]
 801225a:	e2df      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 801225c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012260:	497b      	ldr	r1, [pc, #492]	; (8012450 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8012262:	4618      	mov	r0, r3
 8012264:	f7f7 fe29 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012268:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801226c:	f107 0308 	add.w	r3, r7, #8
 8012270:	4611      	mov	r1, r2
 8012272:	4618      	mov	r0, r3
 8012274:	f7f8 f9e5 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 8012278:	4603      	mov	r3, r0
 801227a:	461d      	mov	r5, r3
 801227c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012280:	4618      	mov	r0, r3
 8012282:	f7f8 f9d2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012286:	2d00      	cmp	r5, #0
 8012288:	d003      	beq.n	8012292 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2201      	movs	r2, #1
 801228e:	745a      	strb	r2, [r3, #17]
 8012290:	e2c4      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8012292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012296:	496f      	ldr	r1, [pc, #444]	; (8012454 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8012298:	4618      	mov	r0, r3
 801229a:	f7f7 fe0e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801229e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80122a2:	f107 0308 	add.w	r3, r7, #8
 80122a6:	4611      	mov	r1, r2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7f8 f9ca 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80122ae:	4603      	mov	r3, r0
 80122b0:	461d      	mov	r5, r3
 80122b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7f8 f9b7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80122bc:	2d00      	cmp	r5, #0
 80122be:	d003      	beq.n	80122c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2201      	movs	r2, #1
 80122c4:	749a      	strb	r2, [r3, #18]
 80122c6:	e2a9      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80122c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80122cc:	4962      	ldr	r1, [pc, #392]	; (8012458 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7f7 fdf3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80122d4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80122d8:	f107 0308 	add.w	r3, r7, #8
 80122dc:	4611      	mov	r1, r2
 80122de:	4618      	mov	r0, r3
 80122e0:	f7f8 f9af 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80122e4:	4603      	mov	r3, r0
 80122e6:	461d      	mov	r5, r3
 80122e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7f8 f99c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80122f2:	2d00      	cmp	r5, #0
 80122f4:	d003      	beq.n	80122fe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2201      	movs	r2, #1
 80122fa:	74da      	strb	r2, [r3, #19]
 80122fc:	e28e      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80122fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012302:	4956      	ldr	r1, [pc, #344]	; (801245c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8012304:	4618      	mov	r0, r3
 8012306:	f7f7 fdd8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801230a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801230e:	f107 0308 	add.w	r3, r7, #8
 8012312:	4611      	mov	r1, r2
 8012314:	4618      	mov	r0, r3
 8012316:	f7f8 f994 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801231a:	4603      	mov	r3, r0
 801231c:	461d      	mov	r5, r3
 801231e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012322:	4618      	mov	r0, r3
 8012324:	f7f8 f981 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012328:	2d00      	cmp	r5, #0
 801232a:	d003      	beq.n	8012334 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2201      	movs	r2, #1
 8012330:	751a      	strb	r2, [r3, #20]
 8012332:	e273      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8012334:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012338:	4949      	ldr	r1, [pc, #292]	; (8012460 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801233a:	4618      	mov	r0, r3
 801233c:	f7f7 fdbd 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012340:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012344:	f107 0308 	add.w	r3, r7, #8
 8012348:	4611      	mov	r1, r2
 801234a:	4618      	mov	r0, r3
 801234c:	f7f8 f979 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 8012350:	4603      	mov	r3, r0
 8012352:	461d      	mov	r5, r3
 8012354:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012358:	4618      	mov	r0, r3
 801235a:	f7f8 f966 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801235e:	2d00      	cmp	r5, #0
 8012360:	d003      	beq.n	801236a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2201      	movs	r2, #1
 8012366:	759a      	strb	r2, [r3, #22]
 8012368:	e258      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801236a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801236e:	493d      	ldr	r1, [pc, #244]	; (8012464 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8012370:	4618      	mov	r0, r3
 8012372:	f7f7 fda2 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012376:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801237a:	f107 0308 	add.w	r3, r7, #8
 801237e:	4611      	mov	r1, r2
 8012380:	4618      	mov	r0, r3
 8012382:	f7f7 fe5e 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 8012386:	4603      	mov	r3, r0
 8012388:	461d      	mov	r5, r3
 801238a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801238e:	4618      	mov	r0, r3
 8012390:	f7f8 f94b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012394:	2d00      	cmp	r5, #0
 8012396:	d009      	beq.n	80123ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6859      	ldr	r1, [r3, #4]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	689a      	ldr	r2, [r3, #8]
 80123a0:	f107 0310 	add.w	r3, r7, #16
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 fb33 	bl	8012a10 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 80123aa:	e237      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 80123ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80123b0:	492d      	ldr	r1, [pc, #180]	; (8012468 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7f7 fd81 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80123b8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80123bc:	f107 0308 	add.w	r3, r7, #8
 80123c0:	4611      	mov	r1, r2
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7f7 fe3d 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80123c8:	4603      	mov	r3, r0
 80123ca:	461d      	mov	r5, r3
 80123cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f8 f92a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80123d6:	2d00      	cmp	r5, #0
 80123d8:	d009      	beq.n	80123ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6859      	ldr	r1, [r3, #4]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	689a      	ldr	r2, [r3, #8]
 80123e2:	f107 0310 	add.w	r3, r7, #16
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f000 fc40 	bl	8012c6c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80123ec:	e216      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80123ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80123f2:	491e      	ldr	r1, [pc, #120]	; (801246c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7f7 fd60 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80123fa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80123fe:	f107 0308 	add.w	r3, r7, #8
 8012402:	4611      	mov	r1, r2
 8012404:	4618      	mov	r0, r3
 8012406:	f7f7 fe1c 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 801240a:	4603      	mov	r3, r0
 801240c:	461d      	mov	r5, r3
 801240e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012412:	4618      	mov	r0, r3
 8012414:	f7f8 f909 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012418:	2d00      	cmp	r5, #0
 801241a:	d029      	beq.n	8012470 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6859      	ldr	r1, [r3, #4]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	689a      	ldr	r2, [r3, #8]
 8012424:	f107 0310 	add.w	r3, r7, #16
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 fc61 	bl	8012cf0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 801242e:	4603      	mov	r3, r0
 8012430:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012434:	e1f2      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8012436:	bf00      	nop
 8012438:	08021d30 	.word	0x08021d30
 801243c:	08021d34 	.word	0x08021d34
 8012440:	08021d38 	.word	0x08021d38
 8012444:	08021d3c 	.word	0x08021d3c
 8012448:	08021d40 	.word	0x08021d40
 801244c:	08021d44 	.word	0x08021d44
 8012450:	08021d48 	.word	0x08021d48
 8012454:	08021d4c 	.word	0x08021d4c
 8012458:	08021d50 	.word	0x08021d50
 801245c:	08021d54 	.word	0x08021d54
 8012460:	08021d58 	.word	0x08021d58
 8012464:	08021d5c 	.word	0x08021d5c
 8012468:	08021d60 	.word	0x08021d60
 801246c:	08021d64 	.word	0x08021d64
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8012470:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012474:	49b9      	ldr	r1, [pc, #740]	; (801275c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8012476:	4618      	mov	r0, r3
 8012478:	f7f7 fd1f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801247c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012480:	f107 0308 	add.w	r3, r7, #8
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f7f7 fddb 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 801248c:	4603      	mov	r3, r0
 801248e:	461d      	mov	r5, r3
 8012490:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012494:	4618      	mov	r0, r3
 8012496:	f7f8 f8c8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801249a:	2d00      	cmp	r5, #0
 801249c:	d009      	beq.n	80124b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6859      	ldr	r1, [r3, #4]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	689a      	ldr	r2, [r3, #8]
 80124a6:	f107 0310 	add.w	r3, r7, #16
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 fccc 	bl	8012e48 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80124b0:	e1b4      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80124b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80124b6:	49aa      	ldr	r1, [pc, #680]	; (8012760 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f7 fcfe 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80124be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80124c2:	f107 0308 	add.w	r3, r7, #8
 80124c6:	4611      	mov	r1, r2
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7f7 fdba 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80124ce:	4603      	mov	r3, r0
 80124d0:	461d      	mov	r5, r3
 80124d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7f8 f8a7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80124dc:	2d00      	cmp	r5, #0
 80124de:	d009      	beq.n	80124f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6859      	ldr	r1, [r3, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	689a      	ldr	r2, [r3, #8]
 80124e8:	f107 0310 	add.w	r3, r7, #16
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fcf1 	bl	8012ed4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80124f2:	e193      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80124f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80124f8:	499a      	ldr	r1, [pc, #616]	; (8012764 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f7 fcdd 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012500:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8012504:	f107 0308 	add.w	r3, r7, #8
 8012508:	4611      	mov	r1, r2
 801250a:	4618      	mov	r0, r3
 801250c:	f7f7 fd99 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 8012510:	4603      	mov	r3, r0
 8012512:	461d      	mov	r5, r3
 8012514:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012518:	4618      	mov	r0, r3
 801251a:	f7f8 f886 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801251e:	2d00      	cmp	r5, #0
 8012520:	d009      	beq.n	8012536 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6859      	ldr	r1, [r3, #4]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	689a      	ldr	r2, [r3, #8]
 801252a:	f107 0310 	add.w	r3, r7, #16
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 fd16 	bl	8012f60 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8012534:	e172      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8012536:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801253a:	498b      	ldr	r1, [pc, #556]	; (8012768 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 801253c:	4618      	mov	r0, r3
 801253e:	f7f7 fcbc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012542:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8012546:	f107 0308 	add.w	r3, r7, #8
 801254a:	4611      	mov	r1, r2
 801254c:	4618      	mov	r0, r3
 801254e:	f7f7 fd78 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 8012552:	4603      	mov	r3, r0
 8012554:	461d      	mov	r5, r3
 8012556:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801255a:	4618      	mov	r0, r3
 801255c:	f7f8 f865 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012560:	2d00      	cmp	r5, #0
 8012562:	d009      	beq.n	8012578 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6859      	ldr	r1, [r3, #4]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	689a      	ldr	r2, [r3, #8]
 801256c:	f107 0310 	add.w	r3, r7, #16
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fd3d 	bl	8012ff0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8012576:	e151      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8012578:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801257c:	497b      	ldr	r1, [pc, #492]	; (801276c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 801257e:	4618      	mov	r0, r3
 8012580:	f7f7 fc9b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012584:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8012588:	f107 0308 	add.w	r3, r7, #8
 801258c:	4611      	mov	r1, r2
 801258e:	4618      	mov	r0, r3
 8012590:	f7f7 fd57 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 8012594:	4603      	mov	r3, r0
 8012596:	461d      	mov	r5, r3
 8012598:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801259c:	4618      	mov	r0, r3
 801259e:	f7f8 f844 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80125a2:	2d00      	cmp	r5, #0
 80125a4:	d009      	beq.n	80125ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6859      	ldr	r1, [r3, #4]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	689a      	ldr	r2, [r3, #8]
 80125ae:	f107 0310 	add.w	r3, r7, #16
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 fd5e 	bl	8013074 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80125b8:	e130      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80125ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80125be:	496c      	ldr	r1, [pc, #432]	; (8012770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f7 fc7a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80125c6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80125ca:	f107 0308 	add.w	r3, r7, #8
 80125ce:	4611      	mov	r1, r2
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7f7 fd36 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80125d6:	4603      	mov	r3, r0
 80125d8:	461d      	mov	r5, r3
 80125da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80125de:	4618      	mov	r0, r3
 80125e0:	f7f8 f823 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80125e4:	2d00      	cmp	r5, #0
 80125e6:	d009      	beq.n	80125fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6859      	ldr	r1, [r3, #4]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	689a      	ldr	r2, [r3, #8]
 80125f0:	f107 0310 	add.w	r3, r7, #16
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f000 fd83 	bl	8013100 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80125fa:	e10f      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80125fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012600:	495c      	ldr	r1, [pc, #368]	; (8012774 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8012602:	4618      	mov	r0, r3
 8012604:	f7f7 fc59 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012608:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801260c:	f107 0308 	add.w	r3, r7, #8
 8012610:	4611      	mov	r1, r2
 8012612:	4618      	mov	r0, r3
 8012614:	f7f7 fd15 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 8012618:	4603      	mov	r3, r0
 801261a:	461d      	mov	r5, r3
 801261c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012620:	4618      	mov	r0, r3
 8012622:	f7f8 f802 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012626:	2d00      	cmp	r5, #0
 8012628:	d009      	beq.n	801263e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6859      	ldr	r1, [r3, #4]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	689a      	ldr	r2, [r3, #8]
 8012632:	f107 0310 	add.w	r3, r7, #16
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f000 fda8 	bl	801318c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 801263c:	e0ee      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801263e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012642:	494d      	ldr	r1, [pc, #308]	; (8012778 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8012644:	4618      	mov	r0, r3
 8012646:	f7f7 fc38 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801264a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801264e:	f107 0308 	add.w	r3, r7, #8
 8012652:	4611      	mov	r1, r2
 8012654:	4618      	mov	r0, r3
 8012656:	f7f7 fcf4 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 801265a:	4603      	mov	r3, r0
 801265c:	461d      	mov	r5, r3
 801265e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012662:	4618      	mov	r0, r3
 8012664:	f7f7 ffe1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012668:	2d00      	cmp	r5, #0
 801266a:	d00c      	beq.n	8012686 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6859      	ldr	r1, [r3, #4]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	689a      	ldr	r2, [r3, #8]
 8012674:	f107 0310 	add.w	r3, r7, #16
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fa29 	bl	8012ad0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 801267e:	4603      	mov	r3, r0
 8012680:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012684:	e0ca      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8012686:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801268a:	493c      	ldr	r1, [pc, #240]	; (801277c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801268c:	4618      	mov	r0, r3
 801268e:	f7f7 fc14 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012692:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8012696:	f107 0308 	add.w	r3, r7, #8
 801269a:	4611      	mov	r1, r2
 801269c:	4618      	mov	r0, r3
 801269e:	f7f7 fcd0 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80126a2:	4603      	mov	r3, r0
 80126a4:	461d      	mov	r5, r3
 80126a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7f7 ffbd 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80126b0:	2d00      	cmp	r5, #0
 80126b2:	d00b      	beq.n	80126cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6859      	ldr	r1, [r3, #4]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	689a      	ldr	r2, [r3, #8]
 80126bc:	f107 0310 	add.w	r3, r7, #16
 80126c0:	482e      	ldr	r0, [pc, #184]	; (801277c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80126c2:	9000      	str	r0, [sp, #0]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f000 fda9 	bl	801321c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80126ca:	e0a7      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 80126cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80126d0:	492b      	ldr	r1, [pc, #172]	; (8012780 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7f7 fbf1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80126d8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80126dc:	f107 0308 	add.w	r3, r7, #8
 80126e0:	4611      	mov	r1, r2
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f7 fcad 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80126e8:	4603      	mov	r3, r0
 80126ea:	461d      	mov	r5, r3
 80126ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7f7 ff9a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80126f6:	2d00      	cmp	r5, #0
 80126f8:	d00b      	beq.n	8012712 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6859      	ldr	r1, [r3, #4]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	689a      	ldr	r2, [r3, #8]
 8012702:	f107 0310 	add.w	r3, r7, #16
 8012706:	481e      	ldr	r0, [pc, #120]	; (8012780 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012708:	9000      	str	r0, [sp, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fd86 	bl	801321c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8012710:	e084      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8012712:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012716:	491b      	ldr	r1, [pc, #108]	; (8012784 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8012718:	4618      	mov	r0, r3
 801271a:	f7f7 fbce 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801271e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8012722:	f107 0308 	add.w	r3, r7, #8
 8012726:	4611      	mov	r1, r2
 8012728:	4618      	mov	r0, r3
 801272a:	f7f7 fc8a 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 801272e:	4603      	mov	r3, r0
 8012730:	461d      	mov	r5, r3
 8012732:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012736:	4618      	mov	r0, r3
 8012738:	f7f7 ff77 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801273c:	2d00      	cmp	r5, #0
 801273e:	d023      	beq.n	8012788 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6859      	ldr	r1, [r3, #4]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	689a      	ldr	r2, [r3, #8]
 8012748:	f107 0310 	add.w	r3, r7, #16
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 fe3b 	bl	80133c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8012752:	4603      	mov	r3, r0
 8012754:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012758:	e060      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801275a:	bf00      	nop
 801275c:	08021d68 	.word	0x08021d68
 8012760:	08021d6c 	.word	0x08021d6c
 8012764:	08021d70 	.word	0x08021d70
 8012768:	08021d78 	.word	0x08021d78
 801276c:	08021d7c 	.word	0x08021d7c
 8012770:	08021d80 	.word	0x08021d80
 8012774:	08021d84 	.word	0x08021d84
 8012778:	08021d8c 	.word	0x08021d8c
 801277c:	08021d90 	.word	0x08021d90
 8012780:	08021d98 	.word	0x08021d98
 8012784:	08021da8 	.word	0x08021da8
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8012788:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801278c:	4930      	ldr	r1, [pc, #192]	; (8012850 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 801278e:	4618      	mov	r0, r3
 8012790:	f7f7 fb93 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012794:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8012798:	f107 0308 	add.w	r3, r7, #8
 801279c:	4611      	mov	r1, r2
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f7 fc4f 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461d      	mov	r5, r3
 80127a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7f7 ff3c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80127b2:	2d00      	cmp	r5, #0
 80127b4:	d00e      	beq.n	80127d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	331c      	adds	r3, #28
 80127bc:	681d      	ldr	r5, [r3, #0]
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6859      	ldr	r1, [r3, #4]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	689a      	ldr	r2, [r3, #8]
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	6838      	ldr	r0, [r7, #0]
 80127ca:	47a8      	blx	r5
 80127cc:	4603      	mov	r3, r0
 80127ce:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80127d2:	e023      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80127d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80127d8:	491e      	ldr	r1, [pc, #120]	; (8012854 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f7 fb6d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80127e0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80127e4:	f107 0308 	add.w	r3, r7, #8
 80127e8:	4611      	mov	r1, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f7 fc29 	bl	800a042 <_ZNK12SimpleString10startsWithERKS_>
 80127f0:	4603      	mov	r3, r0
 80127f2:	461d      	mov	r5, r3
 80127f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7f7 ff16 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80127fe:	2d00      	cmp	r5, #0
 8012800:	d009      	beq.n	8012816 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6859      	ldr	r1, [r3, #4]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	689a      	ldr	r2, [r3, #8]
 801280a:	f107 0310 	add.w	r3, r7, #16
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 fd98 	bl	8013344 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8012814:	e002      	b.n	801281c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8012816:	2300      	movs	r3, #0
 8012818:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 801281c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8012820:	2b00      	cmp	r3, #0
 8012822:	d102      	bne.n	801282a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8012824:	2400      	movs	r4, #0
 8012826:	2500      	movs	r5, #0
 8012828:	e000      	b.n	801282c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 801282a:	2501      	movs	r5, #1
 801282c:	f107 0308 	add.w	r3, r7, #8
 8012830:	4618      	mov	r0, r3
 8012832:	f7f7 fefa 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012836:	2d01      	cmp	r5, #1
 8012838:	d104      	bne.n	8012844 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	3301      	adds	r3, #1
 801283e:	613b      	str	r3, [r7, #16]
 8012840:	e455      	b.n	80120ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8012842:	2401      	movs	r4, #1
 8012844:	4623      	mov	r3, r4
}
 8012846:	4618      	mov	r0, r3
 8012848:	37f0      	adds	r7, #240	; 0xf0
 801284a:	46bd      	mov	sp, r7
 801284c:	bdb0      	pop	{r4, r5, r7, pc}
 801284e:	bf00      	nop
 8012850:	08021d40 	.word	0x08021d40
 8012854:	08021dac 	.word	0x08021dac

08012858 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8012860:	4b03      	ldr	r3, [pc, #12]	; (8012870 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	08021db0 	.word	0x08021db0

08012874 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 801287c:	4b03      	ldr	r3, [pc, #12]	; (801288c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801287e:	4618      	mov	r0, r3
 8012880:	370c      	adds	r7, #12
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr
 801288a:	bf00      	nop
 801288c:	08021ee0 	.word	0x08021ee0

08012890 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8012890:	b480      	push	{r7}
 8012892:	b083      	sub	sp, #12
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7b1b      	ldrb	r3, [r3, #12]
}
 801289c:	4618      	mov	r0, r3
 801289e:	370c      	adds	r7, #12
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
    return verbose_;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7b5b      	ldrb	r3, [r3, #13]
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	370c      	adds	r7, #12
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80128c0:	b480      	push	{r7}
 80128c2:	b083      	sub	sp, #12
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	7b9b      	ldrb	r3, [r3, #14]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	370c      	adds	r7, #12
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
    return color_;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	7bdb      	ldrb	r3, [r3, #15]
}
 80128e4:	4618      	mov	r0, r3
 80128e6:	370c      	adds	r7, #12
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr

080128f0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80128f0:	b480      	push	{r7}
 80128f2:	b083      	sub	sp, #12
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	7c5b      	ldrb	r3, [r3, #17]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8012908:	b480      	push	{r7}
 801290a:	b083      	sub	sp, #12
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	7c9b      	ldrb	r3, [r3, #18]
}
 8012914:	4618      	mov	r0, r3
 8012916:	370c      	adds	r7, #12
 8012918:	46bd      	mov	sp, r7
 801291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291e:	4770      	bx	lr

08012920 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	7cdb      	ldrb	r3, [r3, #19]
}
 801292c:	4618      	mov	r0, r3
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	7d1b      	ldrb	r3, [r3, #20]
}
 8012944:	4618      	mov	r0, r3
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	7c1b      	ldrb	r3, [r3, #16]
}
 801295c:	4618      	mov	r0, r3
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
    return repeat_;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	69db      	ldr	r3, [r3, #28]
}
 8012974:	4618      	mov	r0, r3
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
    return reversing_;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	7d5b      	ldrb	r3, [r3, #21]
}
 801298c:	4618      	mov	r0, r3
 801298e:	370c      	adds	r7, #12
 8012990:	46bd      	mov	sp, r7
 8012992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012996:	4770      	bx	lr

08012998 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	7d9b      	ldrb	r3, [r3, #22]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	7ddb      	ldrb	r3, [r3, #23]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6a1b      	ldr	r3, [r3, #32]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	607a      	str	r2, [r7, #4]
 8012a1c:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2200      	movs	r2, #0
 8012a22:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	f107 0310 	add.w	r3, r7, #16
 8012a34:	4611      	mov	r1, r2
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7f7 fa3f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8012a3c:	f107 0310 	add.w	r3, r7, #16
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7f7 fdd1 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b02      	cmp	r3, #2
 8012a4a:	bf8c      	ite	hi
 8012a4c:	2301      	movhi	r3, #1
 8012a4e:	2300      	movls	r3, #0
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d00e      	beq.n	8012a74 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	4413      	add	r3, r2
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	3302      	adds	r3, #2
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7f7 f824 	bl	8009ab2 <_ZN12SimpleString4AtoIEPKc>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	61da      	str	r2, [r3, #28]
 8012a72:	e01c      	b.n	8012aae <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	3301      	adds	r3, #1
 8012a7a:	68ba      	ldr	r2, [r7, #8]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	dd16      	ble.n	8012aae <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	3301      	adds	r3, #1
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7f7 f80f 	bl	8009ab2 <_ZN12SimpleString4AtoIEPKc>
 8012a94:	4603      	mov	r3, r0
 8012a96:	461a      	mov	r2, r3
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	69db      	ldr	r3, [r3, #28]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d004      	beq.n	8012aae <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	69db      	ldr	r3, [r3, #28]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d102      	bne.n	8012abc <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2202      	movs	r2, #2
 8012aba:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8012abc:	f107 0310 	add.w	r3, r7, #16
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f7 fdb2 	bl	800a62a <_ZN12SimpleStringD1Ev>

}
 8012ac6:	bf00      	nop
 8012ac8:	3718      	adds	r7, #24
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
	...

08012ad0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8012ad0:	b590      	push	{r4, r7, lr}
 8012ad2:	b089      	sub	sp, #36	; 0x24
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	607a      	str	r2, [r7, #4]
 8012adc:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8012ae4:	4b34      	ldr	r3, [pc, #208]	; (8012bb8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4798      	blx	r3
 8012aea:	4603      	mov	r3, r0
 8012aec:	461a      	mov	r2, r3
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6a1b      	ldr	r3, [r3, #32]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d104      	bne.n	8012b04 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6a1b      	ldr	r3, [r3, #32]
 8012afe:	1c5a      	adds	r2, r3, #1
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	f107 0314 	add.w	r3, r7, #20
 8012b14:	4611      	mov	r1, r2
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7f7 f9cf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8012b1c:	f107 0314 	add.w	r3, r7, #20
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7f7 fd61 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b02      	cmp	r3, #2
 8012b2a:	bf8c      	ite	hi
 8012b2c:	2301      	movhi	r3, #1
 8012b2e:	2300      	movls	r3, #0
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d010      	beq.n	8012b58 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	4413      	add	r3, r2
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	3302      	adds	r3, #2
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7f6 ff78 	bl	8009a40 <_ZN12SimpleString4AtoUEPKc>
 8012b50:	4602      	mov	r2, r0
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	621a      	str	r2, [r3, #32]
 8012b56:	e01e      	b.n	8012b96 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	68ba      	ldr	r2, [r7, #8]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	dd18      	ble.n	8012b96 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3301      	adds	r3, #1
 8012b6a:	009b      	lsls	r3, r3, #2
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	4413      	add	r3, r2
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7f6 ff64 	bl	8009a40 <_ZN12SimpleString4AtoUEPKc>
 8012b78:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00a      	beq.n	8012b96 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2201      	movs	r2, #1
 8012b84:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	69fa      	ldr	r2, [r7, #28]
 8012b8a:	621a      	str	r2, [r3, #32]
            i++;
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	1c5a      	adds	r2, r3, #1
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	6a1b      	ldr	r3, [r3, #32]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	bf14      	ite	ne
 8012b9e:	2301      	movne	r3, #1
 8012ba0:	2300      	moveq	r3, #0
 8012ba2:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8012ba4:	f107 0314 	add.w	r3, r7, #20
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7f7 fd3e 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8012bae:	4623      	mov	r3, r4
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3724      	adds	r7, #36	; 0x24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd90      	pop	{r4, r7, pc}
 8012bb8:	200000a4 	.word	0x200000a4

08012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b088      	sub	sp, #32
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	60f8      	str	r0, [r7, #12]
 8012bc4:	60b9      	str	r1, [r7, #8]
 8012bc6:	607a      	str	r2, [r7, #4]
 8012bc8:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8012bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bcc:	f7f7 fd0c 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 8012bd0:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8012bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	683a      	ldr	r2, [r7, #0]
 8012bda:	4413      	add	r3, r2
 8012bdc:	681a      	ldr	r2, [r3, #0]
 8012bde:	f107 0314 	add.w	r3, r7, #20
 8012be2:	4611      	mov	r1, r2
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7f7 f968 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8012bea:	f107 0314 	add.w	r3, r7, #20
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7f7 fcfa 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	bf34      	ite	cc
 8012bfc:	2301      	movcc	r3, #1
 8012bfe:	2300      	movcs	r3, #0
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d00c      	beq.n	8012c20 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8012c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	683a      	ldr	r2, [r7, #0]
 8012c0e:	4413      	add	r3, r2
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	4413      	add	r3, r2
 8012c16:	4619      	mov	r1, r3
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f7f7 f94e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012c1e:	e019      	b.n	8012c54 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8012c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3301      	adds	r3, #1
 8012c26:	687a      	ldr	r2, [r7, #4]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	dd0f      	ble.n	8012c4c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8012c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	1c5a      	adds	r2, r3, #1
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	601a      	str	r2, [r3, #0]
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	683a      	ldr	r2, [r7, #0]
 8012c3e:	4413      	add	r3, r2
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4619      	mov	r1, r3
 8012c44:	68f8      	ldr	r0, [r7, #12]
 8012c46:	f7f7 f938 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012c4a:	e003      	b.n	8012c54 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8012c4c:	4906      	ldr	r1, [pc, #24]	; (8012c68 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f7f7 f933 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8012c54:	f107 0314 	add.w	r3, r7, #20
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f7 fce6 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8012c5e:	68f8      	ldr	r0, [r7, #12]
 8012c60:	3720      	adds	r7, #32
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	08021d2c 	.word	0x08021d2c

08012c6c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8012c6c:	b5b0      	push	{r4, r5, r7, lr}
 8012c6e:	b08c      	sub	sp, #48	; 0x30
 8012c70:	af02      	add	r7, sp, #8
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
 8012c78:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8012c7a:	f107 031c 	add.w	r3, r7, #28
 8012c7e:	491a      	ldr	r1, [pc, #104]	; (8012ce8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f7 f91a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012c86:	f107 0014 	add.w	r0, r7, #20
 8012c8a:	f107 031c 	add.w	r3, r7, #28
 8012c8e:	9301      	str	r3, [sp, #4]
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	9300      	str	r3, [sp, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	68ba      	ldr	r2, [r7, #8]
 8012c98:	68f9      	ldr	r1, [r7, #12]
 8012c9a:	f7ff ff8f 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012c9e:	f107 0514 	add.w	r5, r7, #20
 8012ca2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012ca6:	4911      	ldr	r1, [pc, #68]	; (8012cec <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8012ca8:	2010      	movs	r0, #16
 8012caa:	f7f4 fd43 	bl	8007734 <_ZnwjPKci>
 8012cae:	4604      	mov	r4, r0
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	4620      	mov	r0, r4
 8012cb4:	f009 ff3e 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 8012cb8:	627c      	str	r4, [r7, #36]	; 0x24
 8012cba:	f107 0314 	add.w	r3, r7, #20
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7f7 fcb3 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012cc4:	f107 031c 	add.w	r3, r7, #28
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7f7 fcae 	bl	800a62a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd2:	4619      	mov	r1, r3
 8012cd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cd6:	f009 ff4d 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012ce0:	bf00      	nop
 8012ce2:	3728      	adds	r7, #40	; 0x28
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ce8:	08021d60 	.word	0x08021d60
 8012cec:	080226f4 	.word	0x080226f4

08012cf0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8012cf0:	b5b0      	push	{r4, r5, r7, lr}
 8012cf2:	b092      	sub	sp, #72	; 0x48
 8012cf4:	af02      	add	r7, sp, #8
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8012cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d02:	494e      	ldr	r1, [pc, #312]	; (8012e3c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7f7 f8d8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012d0a:	f107 0020 	add.w	r0, r7, #32
 8012d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d12:	9301      	str	r3, [sp, #4]
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	9300      	str	r3, [sp, #0]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	68ba      	ldr	r2, [r7, #8]
 8012d1c:	68f9      	ldr	r1, [r7, #12]
 8012d1e:	f7ff ff4d 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7f7 fc7f 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8012d2c:	f107 0310 	add.w	r3, r7, #16
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f8 fb8f 	bl	800b454 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8012d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d3a:	4941      	ldr	r1, [pc, #260]	; (8012e40 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f7 f8bc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012d42:	f107 0210 	add.w	r2, r7, #16
 8012d46:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012d4a:	f107 0320 	add.w	r3, r7, #32
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7f7 fa1f 	bl	800a192 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8012d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7f7 fc66 	bl	800a62a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8012d5e:	f107 0310 	add.w	r3, r7, #16
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f8 fc1b 	bl	800b59e <_ZNK22SimpleStringCollection4sizeEv>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b02      	cmp	r3, #2
 8012d6c:	bf14      	ite	ne
 8012d6e:	2301      	movne	r3, #1
 8012d70:	2300      	moveq	r3, #0
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d001      	beq.n	8012d7c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8012d78:	2400      	movs	r4, #0
 8012d7a:	e04f      	b.n	8012e1c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8012d7c:	f107 0310 	add.w	r3, r7, #16
 8012d80:	2100      	movs	r1, #0
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7f8 fc18 	bl	800b5b8 <_ZN22SimpleStringCollectionixEj>
 8012d88:	4604      	mov	r4, r0
 8012d8a:	f107 0310 	add.w	r3, r7, #16
 8012d8e:	2100      	movs	r1, #0
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7f8 fc11 	bl	800b5b8 <_ZN22SimpleStringCollectionixEj>
 8012d96:	4603      	mov	r3, r0
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7f7 fc25 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	3b01      	subs	r3, #1
 8012da2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012da6:	2200      	movs	r2, #0
 8012da8:	4621      	mov	r1, r4
 8012daa:	f7f7 fd47 	bl	800a83c <_ZNK12SimpleString9subStringEjj>
 8012dae:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8012db2:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8012db6:	4923      	ldr	r1, [pc, #140]	; (8012e44 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8012db8:	2010      	movs	r0, #16
 8012dba:	f7f4 fcbb 	bl	8007734 <_ZnwjPKci>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	4629      	mov	r1, r5
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	f009 feb6 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dcc:	4619      	mov	r1, r3
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f009 fed0 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8012dda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7f7 fc23 	bl	800a62a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8012de4:	f107 0310 	add.w	r3, r7, #16
 8012de8:	2101      	movs	r1, #1
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7f8 fbe4 	bl	800b5b8 <_ZN22SimpleStringCollectionixEj>
 8012df0:	4605      	mov	r5, r0
 8012df2:	f240 121f 	movw	r2, #287	; 0x11f
 8012df6:	4913      	ldr	r1, [pc, #76]	; (8012e44 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8012df8:	2010      	movs	r0, #16
 8012dfa:	f7f4 fc9b 	bl	8007734 <_ZnwjPKci>
 8012dfe:	4604      	mov	r4, r0
 8012e00:	4629      	mov	r1, r5
 8012e02:	4620      	mov	r0, r4
 8012e04:	f009 fe96 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f009 feb0 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8012e14:	4602      	mov	r2, r0
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8012e1a:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8012e1c:	f107 0310 	add.w	r3, r7, #16
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7f8 fb8b 	bl	800b53c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8012e26:	f107 0320 	add.w	r3, r7, #32
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7f7 fbfd 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012e30:	4623      	mov	r3, r4
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3740      	adds	r7, #64	; 0x40
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bdb0      	pop	{r4, r5, r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	08021d64 	.word	0x08021d64
 8012e40:	08022714 	.word	0x08022714
 8012e44:	080226f4 	.word	0x080226f4

08012e48 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8012e48:	b5b0      	push	{r4, r5, r7, lr}
 8012e4a:	b08c      	sub	sp, #48	; 0x30
 8012e4c:	af02      	add	r7, sp, #8
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
 8012e54:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8012e56:	f107 031c 	add.w	r3, r7, #28
 8012e5a:	491c      	ldr	r1, [pc, #112]	; (8012ecc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7f7 f82c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012e62:	f107 0014 	add.w	r0, r7, #20
 8012e66:	f107 031c 	add.w	r3, r7, #28
 8012e6a:	9301      	str	r3, [sp, #4]
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	68ba      	ldr	r2, [r7, #8]
 8012e74:	68f9      	ldr	r1, [r7, #12]
 8012e76:	f7ff fea1 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012e7a:	f107 0514 	add.w	r5, r7, #20
 8012e7e:	f240 1225 	movw	r2, #293	; 0x125
 8012e82:	4913      	ldr	r1, [pc, #76]	; (8012ed0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8012e84:	2010      	movs	r0, #16
 8012e86:	f7f4 fc55 	bl	8007734 <_ZnwjPKci>
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	4629      	mov	r1, r5
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f009 fe50 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 8012e94:	627c      	str	r4, [r7, #36]	; 0x24
 8012e96:	f107 0314 	add.w	r3, r7, #20
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7f7 fbc5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012ea0:	f107 031c 	add.w	r3, r7, #28
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f7 fbc0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8012eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012eac:	f009 fe7d 	bl	801cbaa <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012eb8:	f009 fe5c 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8012ebc:	4602      	mov	r2, r0
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012ec2:	bf00      	nop
 8012ec4:	3728      	adds	r7, #40	; 0x28
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	08021d68 	.word	0x08021d68
 8012ed0:	080226f4 	.word	0x080226f4

08012ed4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8012ed4:	b5b0      	push	{r4, r5, r7, lr}
 8012ed6:	b08c      	sub	sp, #48	; 0x30
 8012ed8:	af02      	add	r7, sp, #8
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
 8012ee0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8012ee2:	f107 031c 	add.w	r3, r7, #28
 8012ee6:	491c      	ldr	r1, [pc, #112]	; (8012f58 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7f6 ffe6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012eee:	f107 0014 	add.w	r0, r7, #20
 8012ef2:	f107 031c 	add.w	r3, r7, #28
 8012ef6:	9301      	str	r3, [sp, #4]
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	68ba      	ldr	r2, [r7, #8]
 8012f00:	68f9      	ldr	r1, [r7, #12]
 8012f02:	f7ff fe5b 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012f06:	f107 0514 	add.w	r5, r7, #20
 8012f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012f0e:	4913      	ldr	r1, [pc, #76]	; (8012f5c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8012f10:	2010      	movs	r0, #16
 8012f12:	f7f4 fc0f 	bl	8007734 <_ZnwjPKci>
 8012f16:	4604      	mov	r4, r0
 8012f18:	4629      	mov	r1, r5
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	f009 fe0a 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 8012f20:	627c      	str	r4, [r7, #36]	; 0x24
 8012f22:	f107 0314 	add.w	r3, r7, #20
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7f7 fb7f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012f2c:	f107 031c 	add.w	r3, r7, #28
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7f7 fb7a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8012f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f38:	f009 fe44 	bl	801cbc4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f40:	4619      	mov	r1, r3
 8012f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f44:	f009 fe16 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8012f48:	4602      	mov	r2, r0
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012f4e:	bf00      	nop
 8012f50:	3728      	adds	r7, #40	; 0x28
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bdb0      	pop	{r4, r5, r7, pc}
 8012f56:	bf00      	nop
 8012f58:	08021d6c 	.word	0x08021d6c
 8012f5c:	080226f4 	.word	0x080226f4

08012f60 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8012f60:	b5b0      	push	{r4, r5, r7, lr}
 8012f62:	b08c      	sub	sp, #48	; 0x30
 8012f64:	af02      	add	r7, sp, #8
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8012f6e:	f107 031c 	add.w	r3, r7, #28
 8012f72:	491d      	ldr	r1, [pc, #116]	; (8012fe8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7f6 ffa0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8012f7a:	f107 0014 	add.w	r0, r7, #20
 8012f7e:	f107 031c 	add.w	r3, r7, #28
 8012f82:	9301      	str	r3, [sp, #4]
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	68ba      	ldr	r2, [r7, #8]
 8012f8c:	68f9      	ldr	r1, [r7, #12]
 8012f8e:	f7ff fe15 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012f92:	f107 0514 	add.w	r5, r7, #20
 8012f96:	f240 1233 	movw	r2, #307	; 0x133
 8012f9a:	4914      	ldr	r1, [pc, #80]	; (8012fec <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8012f9c:	2010      	movs	r0, #16
 8012f9e:	f7f4 fbc9 	bl	8007734 <_ZnwjPKci>
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f009 fdc4 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 8012fac:	627c      	str	r4, [r7, #36]	; 0x24
 8012fae:	f107 0314 	add.w	r3, r7, #20
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f7f7 fb39 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8012fb8:	f107 031c 	add.w	r3, r7, #28
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7f7 fb34 	bl	800a62a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8012fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fc4:	f009 fdf1 	bl	801cbaa <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8012fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fca:	f009 fdfb 	bl	801cbc4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fd6:	f009 fdcd 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012fe0:	bf00      	nop
 8012fe2:	3728      	adds	r7, #40	; 0x28
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fe8:	08021d70 	.word	0x08021d70
 8012fec:	080226f4 	.word	0x080226f4

08012ff0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8012ff0:	b5b0      	push	{r4, r5, r7, lr}
 8012ff2:	b08c      	sub	sp, #48	; 0x30
 8012ff4:	af02      	add	r7, sp, #8
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8012ffe:	f107 031c 	add.w	r3, r7, #28
 8013002:	491a      	ldr	r1, [pc, #104]	; (801306c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8013004:	4618      	mov	r0, r3
 8013006:	f7f6 ff58 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801300a:	f107 0014 	add.w	r0, r7, #20
 801300e:	f107 031c 	add.w	r3, r7, #28
 8013012:	9301      	str	r3, [sp, #4]
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	9300      	str	r3, [sp, #0]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	68f9      	ldr	r1, [r7, #12]
 801301e:	f7ff fdcd 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013022:	f107 0514 	add.w	r5, r7, #20
 8013026:	f240 123b 	movw	r2, #315	; 0x13b
 801302a:	4911      	ldr	r1, [pc, #68]	; (8013070 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 801302c:	2010      	movs	r0, #16
 801302e:	f7f4 fb81 	bl	8007734 <_ZnwjPKci>
 8013032:	4604      	mov	r4, r0
 8013034:	4629      	mov	r1, r5
 8013036:	4620      	mov	r0, r4
 8013038:	f009 fd7c 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 801303c:	627c      	str	r4, [r7, #36]	; 0x24
 801303e:	f107 0314 	add.w	r3, r7, #20
 8013042:	4618      	mov	r0, r3
 8013044:	f7f7 faf1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8013048:	f107 031c 	add.w	r3, r7, #28
 801304c:	4618      	mov	r0, r3
 801304e:	f7f7 faec 	bl	800a62a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013056:	4619      	mov	r1, r3
 8013058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801305a:	f009 fd8b 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 801305e:	4602      	mov	r2, r0
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013064:	bf00      	nop
 8013066:	3728      	adds	r7, #40	; 0x28
 8013068:	46bd      	mov	sp, r7
 801306a:	bdb0      	pop	{r4, r5, r7, pc}
 801306c:	08021d78 	.word	0x08021d78
 8013070:	080226f4 	.word	0x080226f4

08013074 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013074:	b5b0      	push	{r4, r5, r7, lr}
 8013076:	b08c      	sub	sp, #48	; 0x30
 8013078:	af02      	add	r7, sp, #8
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
 8013080:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8013082:	f107 031c 	add.w	r3, r7, #28
 8013086:	491c      	ldr	r1, [pc, #112]	; (80130f8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8013088:	4618      	mov	r0, r3
 801308a:	f7f6 ff16 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801308e:	f107 0014 	add.w	r0, r7, #20
 8013092:	f107 031c 	add.w	r3, r7, #28
 8013096:	9301      	str	r3, [sp, #4]
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	68ba      	ldr	r2, [r7, #8]
 80130a0:	68f9      	ldr	r1, [r7, #12]
 80130a2:	f7ff fd8b 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80130a6:	f107 0514 	add.w	r5, r7, #20
 80130aa:	f240 1241 	movw	r2, #321	; 0x141
 80130ae:	4913      	ldr	r1, [pc, #76]	; (80130fc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80130b0:	2010      	movs	r0, #16
 80130b2:	f7f4 fb3f 	bl	8007734 <_ZnwjPKci>
 80130b6:	4604      	mov	r4, r0
 80130b8:	4629      	mov	r1, r5
 80130ba:	4620      	mov	r0, r4
 80130bc:	f009 fd3a 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 80130c0:	627c      	str	r4, [r7, #36]	; 0x24
 80130c2:	f107 0314 	add.w	r3, r7, #20
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7f7 faaf 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80130cc:	f107 031c 	add.w	r3, r7, #28
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7f7 faaa 	bl	800a62a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80130d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130d8:	f009 fd67 	bl	801cbaa <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130e0:	4619      	mov	r1, r3
 80130e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130e4:	f009 fd46 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 80130e8:	4602      	mov	r2, r0
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80130ee:	bf00      	nop
 80130f0:	3728      	adds	r7, #40	; 0x28
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bdb0      	pop	{r4, r5, r7, pc}
 80130f6:	bf00      	nop
 80130f8:	08021d7c 	.word	0x08021d7c
 80130fc:	080226f4 	.word	0x080226f4

08013100 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8013100:	b5b0      	push	{r4, r5, r7, lr}
 8013102:	b08c      	sub	sp, #48	; 0x30
 8013104:	af02      	add	r7, sp, #8
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
 801310c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 801310e:	f107 031c 	add.w	r3, r7, #28
 8013112:	491c      	ldr	r1, [pc, #112]	; (8013184 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8013114:	4618      	mov	r0, r3
 8013116:	f7f6 fed0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801311a:	f107 0014 	add.w	r0, r7, #20
 801311e:	f107 031c 	add.w	r3, r7, #28
 8013122:	9301      	str	r3, [sp, #4]
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	68ba      	ldr	r2, [r7, #8]
 801312c:	68f9      	ldr	r1, [r7, #12]
 801312e:	f7ff fd45 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013132:	f107 0514 	add.w	r5, r7, #20
 8013136:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801313a:	4913      	ldr	r1, [pc, #76]	; (8013188 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801313c:	2010      	movs	r0, #16
 801313e:	f7f4 faf9 	bl	8007734 <_ZnwjPKci>
 8013142:	4604      	mov	r4, r0
 8013144:	4629      	mov	r1, r5
 8013146:	4620      	mov	r0, r4
 8013148:	f009 fcf4 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 801314c:	627c      	str	r4, [r7, #36]	; 0x24
 801314e:	f107 0314 	add.w	r3, r7, #20
 8013152:	4618      	mov	r0, r3
 8013154:	f7f7 fa69 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8013158:	f107 031c 	add.w	r3, r7, #28
 801315c:	4618      	mov	r0, r3
 801315e:	f7f7 fa64 	bl	800a62a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8013162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013164:	f009 fd2e 	bl	801cbc4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801316c:	4619      	mov	r1, r3
 801316e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013170:	f009 fd00 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8013174:	4602      	mov	r2, r0
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	629a      	str	r2, [r3, #40]	; 0x28
}
 801317a:	bf00      	nop
 801317c:	3728      	adds	r7, #40	; 0x28
 801317e:	46bd      	mov	sp, r7
 8013180:	bdb0      	pop	{r4, r5, r7, pc}
 8013182:	bf00      	nop
 8013184:	08021d80 	.word	0x08021d80
 8013188:	080226f4 	.word	0x080226f4

0801318c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801318c:	b5b0      	push	{r4, r5, r7, lr}
 801318e:	b08c      	sub	sp, #48	; 0x30
 8013190:	af02      	add	r7, sp, #8
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801319a:	f107 031c 	add.w	r3, r7, #28
 801319e:	491d      	ldr	r1, [pc, #116]	; (8013214 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f6 fe8a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80131a6:	f107 0014 	add.w	r0, r7, #20
 80131aa:	f107 031c 	add.w	r3, r7, #28
 80131ae:	9301      	str	r3, [sp, #4]
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	9300      	str	r3, [sp, #0]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	68ba      	ldr	r2, [r7, #8]
 80131b8:	68f9      	ldr	r1, [r7, #12]
 80131ba:	f7ff fcff 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80131be:	f107 0514 	add.w	r5, r7, #20
 80131c2:	f240 124f 	movw	r2, #335	; 0x14f
 80131c6:	4914      	ldr	r1, [pc, #80]	; (8013218 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80131c8:	2010      	movs	r0, #16
 80131ca:	f7f4 fab3 	bl	8007734 <_ZnwjPKci>
 80131ce:	4604      	mov	r4, r0
 80131d0:	4629      	mov	r1, r5
 80131d2:	4620      	mov	r0, r4
 80131d4:	f009 fcae 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 80131d8:	627c      	str	r4, [r7, #36]	; 0x24
 80131da:	f107 0314 	add.w	r3, r7, #20
 80131de:	4618      	mov	r0, r3
 80131e0:	f7f7 fa23 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80131e4:	f107 031c 	add.w	r3, r7, #28
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7f7 fa1e 	bl	800a62a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80131ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131f0:	f009 fce8 	bl	801cbc4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80131f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131f6:	f009 fcd8 	bl	801cbaa <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131fe:	4619      	mov	r1, r3
 8013200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013202:	f009 fcb7 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 8013206:	4602      	mov	r2, r0
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801320c:	bf00      	nop
 801320e:	3728      	adds	r7, #40	; 0x28
 8013210:	46bd      	mov	sp, r7
 8013212:	bdb0      	pop	{r4, r5, r7, pc}
 8013214:	08021d84 	.word	0x08021d84
 8013218:	080226f4 	.word	0x080226f4

0801321c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 801321c:	b5b0      	push	{r4, r5, r7, lr}
 801321e:	b092      	sub	sp, #72	; 0x48
 8013220:	af02      	add	r7, sp, #8
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
 8013228:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801322a:	f107 0320 	add.w	r3, r7, #32
 801322e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013230:	4618      	mov	r0, r3
 8013232:	f7f6 fe42 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8013236:	f107 0018 	add.w	r0, r7, #24
 801323a:	f107 0320 	add.w	r3, r7, #32
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	68ba      	ldr	r2, [r7, #8]
 8013248:	68f9      	ldr	r1, [r7, #12]
 801324a:	f7ff fcb7 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801324e:	f107 0320 	add.w	r3, r7, #32
 8013252:	4618      	mov	r0, r3
 8013254:	f7f7 f9e9 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013258:	f107 0010 	add.w	r0, r7, #16
 801325c:	f107 0118 	add.w	r1, r7, #24
 8013260:	2329      	movs	r3, #41	; 0x29
 8013262:	222c      	movs	r2, #44	; 0x2c
 8013264:	f7f7 fb92 	bl	800a98c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8013268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801326c:	f107 0110 	add.w	r1, r7, #16
 8013270:	2202      	movs	r2, #2
 8013272:	4618      	mov	r0, r3
 8013274:	f7f7 fb2c 	bl	800a8d0 <_ZNK12SimpleString9subStringEj>
 8013278:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801327c:	f107 0310 	add.w	r3, r7, #16
 8013280:	4611      	mov	r1, r2
 8013282:	4618      	mov	r0, r3
 8013284:	f7f6 fe85 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 8013288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801328c:	4618      	mov	r0, r3
 801328e:	f7f7 f9cc 	bl	800a62a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8013292:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8013296:	492a      	ldr	r1, [pc, #168]	; (8013340 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8013298:	2010      	movs	r0, #16
 801329a:	f7f4 fa4b 	bl	8007734 <_ZnwjPKci>
 801329e:	4604      	mov	r4, r0
 80132a0:	f107 0310 	add.w	r3, r7, #16
 80132a4:	4619      	mov	r1, r3
 80132a6:	4620      	mov	r0, r4
 80132a8:	f009 fc44 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 80132ac:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 80132ae:	f107 0318 	add.w	r3, r7, #24
 80132b2:	2100      	movs	r1, #0
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7f7 fb1c 	bl	800a8f2 <_ZNK12SimpleString2atEj>
 80132ba:	4603      	mov	r3, r0
 80132bc:	461a      	mov	r2, r3
 80132be:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80132c2:	f107 0118 	add.w	r1, r7, #24
 80132c6:	232c      	movs	r3, #44	; 0x2c
 80132c8:	f7f7 fb60 	bl	800a98c <_ZNK12SimpleString17subStringFromTillEcc>
 80132cc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80132d0:	f240 125b 	movw	r2, #347	; 0x15b
 80132d4:	491a      	ldr	r1, [pc, #104]	; (8013340 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80132d6:	2010      	movs	r0, #16
 80132d8:	f7f4 fa2c 	bl	8007734 <_ZnwjPKci>
 80132dc:	4604      	mov	r4, r0
 80132de:	4629      	mov	r1, r5
 80132e0:	4620      	mov	r0, r4
 80132e2:	f009 fc27 	bl	801cb34 <_ZN10TestFilterC1ERK12SimpleString>
 80132e6:	63bc      	str	r4, [r7, #56]	; 0x38
 80132e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7f7 f99c 	bl	800a62a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80132f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80132f4:	f009 fc59 	bl	801cbaa <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80132f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132fa:	f009 fc56 	bl	801cbaa <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013302:	4619      	mov	r1, r3
 8013304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013306:	f009 fc35 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 801330a:	4602      	mov	r2, r0
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013314:	4619      	mov	r1, r3
 8013316:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013318:	f009 fc2c 	bl	801cb74 <_ZN10TestFilter3addEPS_>
 801331c:	4602      	mov	r2, r0
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013322:	f107 0310 	add.w	r3, r7, #16
 8013326:	4618      	mov	r0, r3
 8013328:	f7f7 f97f 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801332c:	f107 0318 	add.w	r3, r7, #24
 8013330:	4618      	mov	r0, r3
 8013332:	f7f7 f97a 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8013336:	bf00      	nop
 8013338:	3740      	adds	r7, #64	; 0x40
 801333a:	46bd      	mov	sp, r7
 801333c:	bdb0      	pop	{r4, r5, r7, pc}
 801333e:	bf00      	nop
 8013340:	080226f4 	.word	0x080226f4

08013344 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8013344:	b590      	push	{r4, r7, lr}
 8013346:	b08b      	sub	sp, #44	; 0x2c
 8013348:	af02      	add	r7, sp, #8
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
 8013350:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8013352:	f107 0318 	add.w	r3, r7, #24
 8013356:	491b      	ldr	r1, [pc, #108]	; (80133c4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8013358:	4618      	mov	r0, r3
 801335a:	f7f6 fdae 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801335e:	f107 0010 	add.w	r0, r7, #16
 8013362:	f107 0318 	add.w	r3, r7, #24
 8013366:	9301      	str	r3, [sp, #4]
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	68f9      	ldr	r1, [r7, #12]
 8013372:	f7ff fc23 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013376:	f107 0318 	add.w	r3, r7, #24
 801337a:	4618      	mov	r0, r3
 801337c:	f7f7 f955 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8013380:	f107 0310 	add.w	r3, r7, #16
 8013384:	4618      	mov	r0, r3
 8013386:	f7f7 f92f 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	bf0c      	ite	eq
 8013390:	2301      	moveq	r3, #1
 8013392:	2300      	movne	r3, #0
 8013394:	b2db      	uxtb	r3, r3
 8013396:	2b00      	cmp	r3, #0
 8013398:	d001      	beq.n	801339e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801339a:	2400      	movs	r4, #0
 801339c:	e008      	b.n	80133b0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	3330      	adds	r3, #48	; 0x30
 80133a2:	f107 0210 	add.w	r2, r7, #16
 80133a6:	4611      	mov	r1, r2
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7f6 fdf2 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80133ae:	2401      	movs	r4, #1
 80133b0:	f107 0310 	add.w	r3, r7, #16
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f7 f938 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80133ba:	2c01      	cmp	r4, #1
}
 80133bc:	3724      	adds	r7, #36	; 0x24
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd90      	pop	{r4, r7, pc}
 80133c2:	bf00      	nop
 80133c4:	08021dac 	.word	0x08021dac

080133c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80133c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133ca:	b093      	sub	sp, #76	; 0x4c
 80133cc:	af02      	add	r7, sp, #8
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80133d6:	f107 0318 	add.w	r3, r7, #24
 80133da:	4953      	ldr	r1, [pc, #332]	; (8013528 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80133dc:	4618      	mov	r0, r3
 80133de:	f7f6 fd6c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80133e2:	f107 0010 	add.w	r0, r7, #16
 80133e6:	f107 0318 	add.w	r3, r7, #24
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	9300      	str	r3, [sp, #0]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	68ba      	ldr	r2, [r7, #8]
 80133f4:	68f9      	ldr	r1, [r7, #12]
 80133f6:	f7ff fbe1 	bl	8012bbc <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80133fa:	f107 0318 	add.w	r3, r7, #24
 80133fe:	4618      	mov	r0, r3
 8013400:	f7f7 f913 	bl	800a62a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8013404:	f107 0310 	add.w	r3, r7, #16
 8013408:	4618      	mov	r0, r3
 801340a:	f7f7 f8ed 	bl	800a5e8 <_ZNK12SimpleString4sizeEv>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	bf0c      	ite	eq
 8013414:	2301      	moveq	r3, #1
 8013416:	2300      	movne	r3, #0
 8013418:	b2db      	uxtb	r3, r3
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 801341e:	2400      	movs	r4, #0
 8013420:	e078      	b.n	8013514 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8013422:	2500      	movs	r5, #0
 8013424:	f107 0320 	add.w	r3, r7, #32
 8013428:	4940      	ldr	r1, [pc, #256]	; (801352c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 801342a:	4618      	mov	r0, r3
 801342c:	f7f6 fd45 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8013430:	2601      	movs	r6, #1
 8013432:	f107 0220 	add.w	r2, r7, #32
 8013436:	f107 0310 	add.w	r3, r7, #16
 801343a:	4611      	mov	r1, r2
 801343c:	4618      	mov	r0, r3
 801343e:	f7f7 f900 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d111      	bne.n	801346c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8013448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801344c:	4938      	ldr	r1, [pc, #224]	; (8013530 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 801344e:	4618      	mov	r0, r3
 8013450:	f7f6 fd33 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8013454:	2501      	movs	r5, #1
 8013456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801345a:	f107 0310 	add.w	r3, r7, #16
 801345e:	4611      	mov	r1, r2
 8013460:	4618      	mov	r0, r3
 8013462:	f7f7 f8ee 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d001      	beq.n	8013470 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 801346c:	2401      	movs	r4, #1
 801346e:	e000      	b.n	8013472 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8013470:	2400      	movs	r4, #0
 8013472:	2d00      	cmp	r5, #0
 8013474:	d004      	beq.n	8013480 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8013476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801347a:	4618      	mov	r0, r3
 801347c:	f7f7 f8d5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8013480:	2e00      	cmp	r6, #0
 8013482:	d004      	beq.n	801348e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8013484:	f107 0320 	add.w	r3, r7, #32
 8013488:	4618      	mov	r0, r3
 801348a:	f7f7 f8ce 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801348e:	2c00      	cmp	r4, #0
 8013490:	d005      	beq.n	801349e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2200      	movs	r2, #0
 8013496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801349a:	2401      	movs	r4, #1
 801349c:	e03a      	b.n	8013514 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 801349e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80134a2:	4924      	ldr	r1, [pc, #144]	; (8013534 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7f6 fd08 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80134aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80134ae:	f107 0310 	add.w	r3, r7, #16
 80134b2:	4611      	mov	r1, r2
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7f7 f8c4 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80134ba:	4603      	mov	r3, r0
 80134bc:	461c      	mov	r4, r3
 80134be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7f7 f8b1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80134c8:	2c00      	cmp	r4, #0
 80134ca:	d005      	beq.n	80134d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2201      	movs	r2, #1
 80134d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80134d4:	2401      	movs	r4, #1
 80134d6:	e01d      	b.n	8013514 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 80134d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80134dc:	4916      	ldr	r1, [pc, #88]	; (8013538 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80134de:	4618      	mov	r0, r3
 80134e0:	f7f6 fceb 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80134e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80134e8:	f107 0310 	add.w	r3, r7, #16
 80134ec:	4611      	mov	r1, r2
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7f7 f8a7 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80134f4:	4603      	mov	r3, r0
 80134f6:	461c      	mov	r4, r3
 80134f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f7 f894 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8013502:	2c00      	cmp	r4, #0
 8013504:	d005      	beq.n	8013512 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2202      	movs	r2, #2
 801350a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801350e:	2401      	movs	r4, #1
 8013510:	e000      	b.n	8013514 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8013512:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8013514:	f107 0310 	add.w	r3, r7, #16
 8013518:	4618      	mov	r0, r3
 801351a:	f7f7 f886 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801351e:	4623      	mov	r3, r4
}
 8013520:	4618      	mov	r0, r3
 8013522:	3744      	adds	r7, #68	; 0x44
 8013524:	46bd      	mov	sp, r7
 8013526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013528:	08021da8 	.word	0x08021da8
 801352c:	08022718 	.word	0x08022718
 8013530:	08022720 	.word	0x08022720
 8013534:	08022728 	.word	0x08022728
 8013538:	08022730 	.word	0x08022730

0801353c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801354a:	2b01      	cmp	r3, #1
 801354c:	bf0c      	ite	eq
 801354e:	2301      	moveq	r3, #1
 8013550:	2300      	movne	r3, #0
 8013552:	b2db      	uxtb	r3, r3
}
 8013554:	4618      	mov	r0, r3
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801356e:	2b02      	cmp	r3, #2
 8013570:	bf0c      	ite	eq
 8013572:	2301      	moveq	r3, #1
 8013574:	2300      	movne	r3, #0
 8013576:	b2db      	uxtb	r3, r3
}
 8013578:	4618      	mov	r0, r3
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8013584:	b480      	push	{r7}
 8013586:	b083      	sub	sp, #12
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
    return packageName_;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	3330      	adds	r3, #48	; 0x30
}
 8013590:	4618      	mov	r0, r3
 8013592:	370c      	adds	r7, #12
 8013594:	46bd      	mov	sp, r7
 8013596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359a:	4770      	bx	lr

0801359c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2200      	movs	r2, #0
 80135a8:	601a      	str	r2, [r3, #0]
    {}
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4618      	mov	r0, r3
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr

080135b8 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135c6:	2200      	movs	r2, #0
 80135c8:	601a      	str	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135d0:	3304      	adds	r3, #4
 80135d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80135d6:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	701a      	strb	r2, [r3, #0]
}
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135fa:	2200      	movs	r2, #0
 80135fc:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	701a      	strb	r2, [r3, #0]
}
 8013604:	bf00      	nop
 8013606:	370c      	adds	r7, #12
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8013610:	b40e      	push	{r1, r2, r3}
 8013612:	b590      	push	{r4, r7, lr}
 8013614:	b086      	sub	sp, #24
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013620:	3304      	adds	r3, #4
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	1ad3      	subs	r3, r2, r3
 801362e:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d032      	beq.n	801369c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8013636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801363a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 801363c:	4b1b      	ldr	r3, [pc, #108]	; (80136ac <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801363e:	681c      	ldr	r4, [r3, #0]
 8013640:	687a      	ldr	r2, [r7, #4]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	18d0      	adds	r0, r2, r3
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	1c59      	adds	r1, r3, #1
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013654:	47a0      	blx	r4
 8013656:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	2b00      	cmp	r3, #0
 801365c:	dd09      	ble.n	8013672 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	441a      	add	r2, r3
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013670:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013680:	3304      	adds	r3, #4
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	429a      	cmp	r2, r3
 8013686:	d90a      	bls.n	801369e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801368e:	3304      	adds	r3, #4
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	e000      	b.n	801369e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 801369c:	bf00      	nop
    va_end(arguments);
}
 801369e:	3718      	adds	r7, #24
 80136a0:	46bd      	mov	sp, r7
 80136a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80136a6:	b003      	add	sp, #12
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	200000ac 	.word	0x200000ac

080136b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b08c      	sub	sp, #48	; 0x30
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80136c0:	2310      	movs	r3, #16
 80136c2:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80136c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d273      	bcs.n	80137b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80136d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136d2:	493b      	ldr	r1, [pc, #236]	; (80137c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80136d4:	68f8      	ldr	r0, [r7, #12]
 80136d6:	f7ff ff9b 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136de:	1ad3      	subs	r3, r2, r3
 80136e0:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80136e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e4:	2b10      	cmp	r3, #16
 80136e6:	d901      	bls.n	80136ec <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80136e8:	2310      	movs	r3, #16
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80136ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ee:	f1c3 0310 	rsb	r3, r3, #16
 80136f2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80136f4:	2300      	movs	r3, #0
 80136f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80136f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d215      	bcs.n	801372c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8013700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013704:	4413      	add	r3, r2
 8013706:	69fa      	ldr	r2, [r7, #28]
 8013708:	4413      	add	r3, r2
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	461a      	mov	r2, r3
 801370e:	492d      	ldr	r1, [pc, #180]	; (80137c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f7ff ff7d 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8013716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013718:	2b07      	cmp	r3, #7
 801371a:	d103      	bne.n	8013724 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 801371c:	492a      	ldr	r1, [pc, #168]	; (80137c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801371e:	68f8      	ldr	r0, [r7, #12]
 8013720:	f7ff ff76 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013726:	3301      	adds	r3, #1
 8013728:	62bb      	str	r3, [r7, #40]	; 0x28
 801372a:	e7e5      	b.n	80136f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 801372c:	2300      	movs	r3, #0
 801372e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	429a      	cmp	r2, r3
 8013736:	d207      	bcs.n	8013748 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8013738:	4924      	ldr	r1, [pc, #144]	; (80137cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 801373a:	68f8      	ldr	r0, [r7, #12]
 801373c:	f7ff ff68 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8013740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013742:	3301      	adds	r3, #1
 8013744:	62bb      	str	r3, [r7, #40]	; 0x28
 8013746:	e7f3      	b.n	8013730 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	2b08      	cmp	r3, #8
 801374c:	d903      	bls.n	8013756 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801374e:	491e      	ldr	r1, [pc, #120]	; (80137c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f7ff ff5d 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8013756:	491e      	ldr	r1, [pc, #120]	; (80137d0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8013758:	68f8      	ldr	r0, [r7, #12]
 801375a:	f7ff ff59 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801375e:	2300      	movs	r3, #0
 8013760:	62bb      	str	r3, [r7, #40]	; 0x28
 8013762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	429a      	cmp	r2, r3
 8013768:	d21d      	bcs.n	80137a6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801376a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376e:	4413      	add	r3, r2
 8013770:	69fa      	ldr	r2, [r7, #28]
 8013772:	4413      	add	r3, r2
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801377a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801377e:	2b1f      	cmp	r3, #31
 8013780:	d903      	bls.n	801378a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8013782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013786:	2b7e      	cmp	r3, #126	; 0x7e
 8013788:	d902      	bls.n	8013790 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801378a:	232e      	movs	r3, #46	; 0x2e
 801378c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8013790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013794:	461a      	mov	r2, r3
 8013796:	490f      	ldr	r1, [pc, #60]	; (80137d4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f7ff ff39 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a0:	3301      	adds	r3, #1
 80137a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80137a4:	e7dd      	b.n	8013762 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80137a6:	490c      	ldr	r1, [pc, #48]	; (80137d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f7ff ff31 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80137ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b2:	4413      	add	r3, r2
 80137b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80137b6:	e787      	b.n	80136c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80137b8:	bf00      	nop
 80137ba:	3730      	adds	r7, #48	; 0x30
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	08022748 	.word	0x08022748
 80137c4:	08022754 	.word	0x08022754
 80137c8:	0802275c 	.word	0x0802275c
 80137cc:	08022760 	.word	0x08022760
 80137d0:	08022764 	.word	0x08022764
 80137d4:	08022768 	.word	0x08022768
 80137d8:	0802276c 	.word	0x0802276c

080137dc <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80137dc:	b480      	push	{r7}
 80137de:	b083      	sub	sp, #12
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
    return buffer_;
 80137e4:	687b      	ldr	r3, [r7, #4]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	370c      	adds	r7, #12
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr

080137f2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80137f2:	b480      	push	{r7}
 80137f4:	b083      	sub	sp, #12
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
 80137fa:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013802:	3304      	adds	r3, #4
 8013804:	683a      	ldr	r2, [r7, #0]
 8013806:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801380e:	3304      	adds	r3, #4
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013816:	d306      	bcc.n	8013826 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801381e:	3304      	adds	r3, #4
 8013820:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013824:	601a      	str	r2, [r3, #0]
}
 8013826:	bf00      	nop
 8013828:	370c      	adds	r7, #12
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr

08013832 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8013832:	b480      	push	{r7}
 8013834:	b083      	sub	sp, #12
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013840:	3304      	adds	r3, #4
 8013842:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013846:	601a      	str	r2, [r3, #0]
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801386a:	3304      	adds	r3, #4
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	bf2c      	ite	cs
 8013872:	2301      	movcs	r3, #1
 8013874:	2300      	movcc	r3, #0
 8013876:	b2db      	uxtb	r3, r3
}
 8013878:	4618      	mov	r0, r3
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2200      	movs	r2, #0
 8013890:	601a      	str	r2, [r3, #0]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2200      	movs	r2, #0
 8013896:	711a      	strb	r2, [r3, #4]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	3308      	adds	r3, #8
 801389c:	4618      	mov	r0, r3
 801389e:	f7ff fe8b 	bl	80135b8 <_ZN18SimpleStringBufferC1Ev>
{
}
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4618      	mov	r0, r3
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80138ac:	b5b0      	push	{r4, r5, r7, lr}
 80138ae:	b086      	sub	sp, #24
 80138b0:	af02      	add	r7, sp, #8
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	607a      	str	r2, [r7, #4]
 80138b8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	f103 0408 	add.w	r4, r3, #8
 80138c0:	687d      	ldr	r5, [r7, #4]
 80138c2:	6a3b      	ldr	r3, [r7, #32]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	3314      	adds	r3, #20
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	6a38      	ldr	r0, [r7, #32]
 80138cc:	4798      	blx	r3
 80138ce:	4603      	mov	r3, r0
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	462b      	mov	r3, r5
 80138d8:	68ba      	ldr	r2, [r7, #8]
 80138da:	4904      	ldr	r1, [pc, #16]	; (80138ec <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80138dc:	4620      	mov	r0, r4
 80138de:	f7ff fe97 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80138e2:	bf00      	nop
 80138e4:	3710      	adds	r7, #16
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bdb0      	pop	{r4, r5, r7, pc}
 80138ea:	bf00      	nop
 80138ec:	08022770 	.word	0x08022770

080138f0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80138f0:	b5b0      	push	{r4, r5, r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af02      	add	r7, sp, #8
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
 80138fc:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f103 0408 	add.w	r4, r3, #8
 8013904:	687d      	ldr	r5, [r7, #4]
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	3318      	adds	r3, #24
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	6838      	ldr	r0, [r7, #0]
 8013910:	4798      	blx	r3
 8013912:	4603      	mov	r3, r0
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	462b      	mov	r3, r5
 8013918:	68ba      	ldr	r2, [r7, #8]
 801391a:	4904      	ldr	r1, [pc, #16]	; (801392c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 801391c:	4620      	mov	r0, r4
 801391e:	f7ff fe77 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013922:	bf00      	nop
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bdb0      	pop	{r4, r5, r7, pc}
 801392a:	bf00      	nop
 801392c:	080227a8 	.word	0x080227a8

08013930 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	3308      	adds	r3, #8
 801393c:	4903      	ldr	r1, [pc, #12]	; (801394c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801393e:	4618      	mov	r0, r3
 8013940:	f7ff fe66 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013944:	bf00      	nop
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	080227d8 	.word	0x080227d8

08013950 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b084      	sub	sp, #16
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2200      	movs	r2, #0
 8013962:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8013964:	2367      	movs	r3, #103	; 0x67
 8013966:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f203 1311 	addw	r3, r3, #273	; 0x111
 801396e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f103 0208 	add.w	r2, r3, #8
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801397c:	4619      	mov	r1, r3
 801397e:	4610      	mov	r0, r2
 8013980:	f7ff ff37 	bl	80137f2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8013984:	bf00      	nop
 8013986:	3710      	adds	r7, #16
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}

0801398c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 801398c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801398e:	b089      	sub	sp, #36	; 0x24
 8013990:	af04      	add	r7, sp, #16
 8013992:	60f8      	str	r0, [r7, #12]
 8013994:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d102      	bne.n	80139a4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801399e:	68f8      	ldr	r0, [r7, #12]
 80139a0:	f000 f882 	bl	8013aa8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	1c5a      	adds	r2, r3, #1
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	f103 0508 	add.w	r5, r3, #8
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80139c6:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	695a      	ldr	r2, [r3, #20]
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	695b      	ldr	r3, [r3, #20]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	3314      	adds	r3, #20
 80139d4:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80139d6:	4610      	mov	r0, r2
 80139d8:	4798      	blx	r3
 80139da:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80139e0:	9303      	str	r3, [sp, #12]
 80139e2:	9202      	str	r2, [sp, #8]
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	9201      	str	r2, [sp, #4]
 80139e8:	9400      	str	r4, [sp, #0]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4632      	mov	r2, r6
 80139ee:	4915      	ldr	r1, [pc, #84]	; (8013a44 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80139f0:	4628      	mov	r0, r5
 80139f2:	f7ff fe0d 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	f103 0008 	add.w	r0, r3, #8
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	6899      	ldr	r1, [r3, #8]
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	461a      	mov	r2, r3
 8013a06:	f7ff fe53 	bl	80136b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	695a      	ldr	r2, [r3, #20]
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	695b      	ldr	r3, [r3, #20]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	3314      	adds	r3, #20
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	4610      	mov	r0, r2
 8013a1a:	4798      	blx	r3
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	490a      	ldr	r1, [pc, #40]	; (8013a48 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7f6 f887 	bl	8009b34 <_ZN12SimpleString6StrCmpEPKcS1_>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	bf0c      	ite	eq
 8013a2c:	2301      	moveq	r3, #1
 8013a2e:	2300      	movne	r3, #0
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d002      	beq.n	8013a3c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2201      	movs	r2, #1
 8013a3a:	711a      	strb	r2, [r3, #4]
}
 8013a3c:	bf00      	nop
 8013a3e:	3714      	adds	r7, #20
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a44:	080227f8 	.word	0x080227f8
 8013a48:	08022858 	.word	0x08022858

08013a4c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d103      	bne.n	8013a64 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7ff ff67 	bl	8013930 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8013a62:	e01e      	b.n	8013aa2 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	3308      	adds	r3, #8
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7ff fef3 	bl	8013854 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	3308      	adds	r3, #8
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7ff fedb 	bl	8013832 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8013a7c:	7bfb      	ldrb	r3, [r7, #15]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d002      	beq.n	8013a88 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f000 f820 	bl	8013ac8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 f82a 	bl	8013ae8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	791b      	ldrb	r3, [r3, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d002      	beq.n	8013aa2 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f000 f839 	bl	8013b14 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8013aa2:	3710      	adds	r7, #16
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	3308      	adds	r3, #8
 8013ab4:	4903      	ldr	r1, [pc, #12]	; (8013ac4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7ff fdaa 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013abc:	bf00      	nop
 8013abe:	3708      	adds	r7, #8
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	08022860 	.word	0x08022860

08013ac8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	3308      	adds	r3, #8
 8013ad4:	4903      	ldr	r1, [pc, #12]	; (8013ae4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7ff fd9a 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013adc:	bf00      	nop
 8013ade:	3708      	adds	r7, #8
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	08022878 	.word	0x08022878

08013ae8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f103 0008 	add.w	r0, r3, #8
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	4a04      	ldr	r2, [pc, #16]	; (8013b0c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8013afc:	4904      	ldr	r1, [pc, #16]	; (8013b10 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8013afe:	f7ff fd87 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013b02:	bf00      	nop
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	080228c0 	.word	0x080228c0
 8013b10:	080228d8 	.word	0x080228d8

08013b14 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	3308      	adds	r3, #8
 8013b20:	4903      	ldr	r1, [pc, #12]	; (8013b30 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ff fd74 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013b28:	bf00      	nop
 8013b2a:	3708      	adds	r7, #8
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	080228e0 	.word	0x080228e0

08013b34 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b08a      	sub	sp, #40	; 0x28
 8013b38:	af06      	add	r7, sp, #24
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
 8013b40:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8013b42:	f7f9 fe8d 	bl	800d860 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8013b46:	4602      	mov	r2, r0
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	9305      	str	r3, [sp, #20]
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	9304      	str	r3, [sp, #16]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	9303      	str	r3, [sp, #12]
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	9302      	str	r3, [sp, #8]
 8013b58:	9201      	str	r2, [sp, #4]
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	2300      	movs	r3, #0
 8013b60:	4a04      	ldr	r2, [pc, #16]	; (8013b74 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8013b62:	4905      	ldr	r1, [pc, #20]	; (8013b78 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f000 f855 	bl	8013c14 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013b6a:	bf00      	nop
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	0802273c 	.word	0x0802273c
 8013b78:	080229f4 	.word	0x080229f4

08013b7c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013b7c:	b590      	push	{r4, r7, lr}
 8013b7e:	b08b      	sub	sp, #44	; 0x2c
 8013b80:	af06      	add	r7, sp, #24
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	68d8      	ldr	r0, [r3, #12]
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	691c      	ldr	r4, [r3, #16]
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	6952      	ldr	r2, [r2, #20]
 8013b9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b9c:	9105      	str	r1, [sp, #20]
 8013b9e:	6a39      	ldr	r1, [r7, #32]
 8013ba0:	9104      	str	r1, [sp, #16]
 8013ba2:	6839      	ldr	r1, [r7, #0]
 8013ba4:	9103      	str	r1, [sp, #12]
 8013ba6:	6879      	ldr	r1, [r7, #4]
 8013ba8:	9102      	str	r1, [sp, #8]
 8013baa:	9201      	str	r2, [sp, #4]
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	4623      	mov	r3, r4
 8013bb0:	4602      	mov	r2, r0
 8013bb2:	4904      	ldr	r1, [pc, #16]	; (8013bc4 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8013bb4:	68f8      	ldr	r0, [r7, #12]
 8013bb6:	f000 f82d 	bl	8013c14 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013bba:	bf00      	nop
 8013bbc:	3714      	adds	r7, #20
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd90      	pop	{r4, r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	08022a18 	.word	0x08022a18

08013bc8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013bc8:	b590      	push	{r4, r7, lr}
 8013bca:	b08b      	sub	sp, #44	; 0x2c
 8013bcc:	af06      	add	r7, sp, #24
 8013bce:	60f8      	str	r0, [r7, #12]
 8013bd0:	60b9      	str	r1, [r7, #8]
 8013bd2:	607a      	str	r2, [r7, #4]
 8013bd4:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	68d8      	ldr	r0, [r3, #12]
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	691c      	ldr	r4, [r3, #16]
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	68ba      	ldr	r2, [r7, #8]
 8013be4:	6952      	ldr	r2, [r2, #20]
 8013be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013be8:	9105      	str	r1, [sp, #20]
 8013bea:	6a39      	ldr	r1, [r7, #32]
 8013bec:	9104      	str	r1, [sp, #16]
 8013bee:	6839      	ldr	r1, [r7, #0]
 8013bf0:	9103      	str	r1, [sp, #12]
 8013bf2:	6879      	ldr	r1, [r7, #4]
 8013bf4:	9102      	str	r1, [sp, #8]
 8013bf6:	9201      	str	r2, [sp, #4]
 8013bf8:	9300      	str	r3, [sp, #0]
 8013bfa:	4623      	mov	r3, r4
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	4904      	ldr	r1, [pc, #16]	; (8013c10 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f000 f807 	bl	8013c14 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013c06:	bf00      	nop
 8013c08:	3714      	adds	r7, #20
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd90      	pop	{r4, r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	08022a40 	.word	0x08022a40

08013c14 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013c14:	b590      	push	{r4, r7, lr}
 8013c16:	b087      	sub	sp, #28
 8013c18:	af02      	add	r7, sp, #8
 8013c1a:	60f8      	str	r0, [r7, #12]
 8013c1c:	60b9      	str	r1, [r7, #8]
 8013c1e:	607a      	str	r2, [r7, #4]
 8013c20:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	3308      	adds	r3, #8
 8013c26:	68ba      	ldr	r2, [r7, #8]
 8013c28:	4910      	ldr	r1, [pc, #64]	; (8013c6c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7ff fcf0 	bl	8013610 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8013c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	6a3b      	ldr	r3, [r7, #32]
 8013c36:	683a      	ldr	r2, [r7, #0]
 8013c38:	6879      	ldr	r1, [r7, #4]
 8013c3a:	68f8      	ldr	r0, [r7, #12]
 8013c3c:	f7ff fe36 	bl	80138ac <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8013c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7ff fe52 	bl	80138f0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8013c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3308      	adds	r3, #8
 8013c52:	681c      	ldr	r4, [r3, #0]
 8013c54:	68f8      	ldr	r0, [r7, #12]
 8013c56:	f000 f80b 	bl	8013c70 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c60:	47a0      	blx	r4
}
 8013c62:	bf00      	nop
 8013c64:	3714      	adds	r7, #20
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd90      	pop	{r4, r7, pc}
 8013c6a:	bf00      	nop
 8013c6c:	08022a6c 	.word	0x08022a6c

08013c70 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	3308      	adds	r3, #8
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7ff fdad 	bl	80137dc <_ZN18SimpleStringBuffer8toStringEv>
 8013c82:	4603      	mov	r3, r0
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	3308      	adds	r3, #8
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7ff fca7 	bl	80135ec <_ZN18SimpleStringBuffer5clearEv>
}
 8013c9e:	bf00      	nop
 8013ca0:	3708      	adds	r7, #8
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8013ca6:	b480      	push	{r7}
 8013ca8:	b085      	sub	sp, #20
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	60f8      	str	r0, [r7, #12]
 8013cae:	60b9      	str	r1, [r7, #8]
 8013cb0:	607a      	str	r2, [r7, #4]
 8013cb2:	603b      	str	r3, [r7, #0]
    number_ = number;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	609a      	str	r2, [r3, #8]
    size_ = size;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	683a      	ldr	r2, [r7, #0]
 8013cc4:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	69ba      	ldr	r2, [r7, #24]
 8013cca:	615a      	str	r2, [r3, #20]
    period_ = period;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	7f3a      	ldrb	r2, [r7, #28]
 8013cd0:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013cd8:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cde:	60da      	str	r2, [r3, #12]
    line_ = line;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ce4:	611a      	str	r2, [r3, #16]
}
 8013ce6:	bf00      	nop
 8013ce8:	3714      	adds	r7, #20
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr

08013cf2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8013cf2:	b480      	push	{r7}
 8013cf4:	b085      	sub	sp, #20
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	60f8      	str	r0, [r7, #12]
 8013cfa:	60b9      	str	r1, [r7, #8]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8013d00:	79fb      	ldrb	r3, [r7, #7]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d00b      	beq.n	8013d1e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	7e1b      	ldrb	r3, [r3, #24]
 8013d0a:	79fa      	ldrb	r2, [r7, #7]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d006      	beq.n	8013d1e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	7e1b      	ldrb	r3, [r3, #24]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d004      	beq.n	8013d22 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8013d18:	79fb      	ldrb	r3, [r7, #7]
 8013d1a:	2b02      	cmp	r3, #2
 8013d1c:	d101      	bne.n	8013d22 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e000      	b.n	8013d24 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3714      	adds	r7, #20
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr

08013d30 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8013d30:	b480      	push	{r7}
 8013d32:	b083      	sub	sp, #12
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	61da      	str	r2, [r3, #28]
    head_ = node;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	683a      	ldr	r2, [r7, #0]
 8013d46:	601a      	str	r2, [r3, #0]
}
 8013d48:	bf00      	nop
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b085      	sub	sp, #20
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8013d64:	2300      	movs	r3, #0
 8013d66:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d019      	beq.n	8013da2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	689b      	ldr	r3, [r3, #8]
 8013d72:	683a      	ldr	r2, [r7, #0]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d10e      	bne.n	8013d96 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d005      	beq.n	8013d8a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	69da      	ldr	r2, [r3, #28]
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	61da      	str	r2, [r3, #28]
                return cur;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	e00c      	b.n	8013da4 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	69da      	ldr	r2, [r3, #28]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	601a      	str	r2, [r3, #0]
                return cur;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	e006      	b.n	8013da4 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	69db      	ldr	r3, [r3, #28]
 8013d9e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8013da0:	e7e2      	b.n	8013d68 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b085      	sub	sp, #20
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00a      	beq.n	8013ddc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	689b      	ldr	r3, [r3, #8]
 8013dca:	683a      	ldr	r2, [r7, #0]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d101      	bne.n	8013dd4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	e004      	b.n	8013dde <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	69db      	ldr	r3, [r3, #28]
 8013dd8:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8013dda:	e7f1      	b.n	8013dc0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8013ddc:	2300      	movs	r3, #0
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3714      	adds	r7, #20
 8013de2:	46bd      	mov	sp, r7
 8013de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de8:	4770      	bx	lr

08013dea <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b086      	sub	sp, #24
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	60f8      	str	r0, [r7, #12]
 8013df2:	60b9      	str	r1, [r7, #8]
 8013df4:	4613      	mov	r3, r2
 8013df6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	617b      	str	r3, [r7, #20]
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d00e      	beq.n	8013e20 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8013e02:	79fb      	ldrb	r3, [r7, #7]
 8013e04:	461a      	mov	r2, r3
 8013e06:	6979      	ldr	r1, [r7, #20]
 8013e08:	68f8      	ldr	r0, [r7, #12]
 8013e0a:	f7ff ff72 	bl	8013cf2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d001      	beq.n	8013e18 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	e004      	b.n	8013e22 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	69db      	ldr	r3, [r3, #28]
 8013e1c:	617b      	str	r3, [r7, #20]
 8013e1e:	e7ed      	b.n	8013dfc <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8013e20:	2300      	movs	r3, #0
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	3718      	adds	r7, #24
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}

08013e2a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b082      	sub	sp, #8
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
 8013e32:	460b      	mov	r3, r1
 8013e34:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	78fa      	ldrb	r2, [r7, #3]
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f7ff ffd3 	bl	8013dea <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013e44:	4603      	mov	r3, r0
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b084      	sub	sp, #16
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	60f8      	str	r0, [r7, #12]
 8013e56:	60b9      	str	r1, [r7, #8]
 8013e58:	4613      	mov	r3, r2
 8013e5a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	69db      	ldr	r3, [r3, #28]
 8013e60:	79fa      	ldrb	r2, [r7, #7]
 8013e62:	4619      	mov	r1, r3
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f7ff ffc0 	bl	8013dea <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013e6a:	4603      	mov	r3, r0
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	60bb      	str	r3, [r7, #8]
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00f      	beq.n	8013eb0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8013e90:	78fb      	ldrb	r3, [r7, #3]
 8013e92:	461a      	mov	r2, r3
 8013e94:	68b9      	ldr	r1, [r7, #8]
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f7ff ff2b 	bl	8013cf2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d002      	beq.n	8013ea8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	69db      	ldr	r3, [r3, #28]
 8013eac:	60bb      	str	r3, [r7, #8]
 8013eae:	e7ec      	b.n	8013e8a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
	...

08013ebc <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8013ec6:	6839      	ldr	r1, [r7, #0]
 8013ec8:	4b09      	ldr	r3, [pc, #36]	; (8013ef0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8013eca:	fba3 2301 	umull	r2, r3, r3, r1
 8013ece:	1aca      	subs	r2, r1, r3
 8013ed0:	0852      	lsrs	r2, r2, #1
 8013ed2:	4413      	add	r3, r2
 8013ed4:	099a      	lsrs	r2, r3, #6
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	00db      	lsls	r3, r3, #3
 8013eda:	4413      	add	r3, r2
 8013edc:	00db      	lsls	r3, r3, #3
 8013ede:	4413      	add	r3, r2
 8013ee0:	1aca      	subs	r2, r1, r3
 8013ee2:	4613      	mov	r3, r2
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	370c      	adds	r7, #12
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eee:	4770      	bx	lr
 8013ef0:	c0e07039 	.word	0xc0e07039

08013ef4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	689b      	ldr	r3, [r3, #8]
 8013f02:	4619      	mov	r1, r3
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f7ff ffd9 	bl	8013ebc <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	4413      	add	r3, r2
 8013f12:	6839      	ldr	r1, [r7, #0]
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7ff ff0b 	bl	8013d30 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8013f1a:	bf00      	nop
 8013f1c:	3708      	adds	r7, #8
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b082      	sub	sp, #8
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
 8013f2a:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8013f2c:	6839      	ldr	r1, [r7, #0]
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7ff ffc4 	bl	8013ebc <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013f34:	4603      	mov	r3, r0
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	4413      	add	r3, r2
 8013f3c:	6839      	ldr	r1, [r7, #0]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff ff08 	bl	8013d54 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8013f44:	4603      	mov	r3, r0
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3708      	adds	r7, #8
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}

08013f4e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8013f4e:	b580      	push	{r7, lr}
 8013f50:	b082      	sub	sp, #8
 8013f52:	af00      	add	r7, sp, #0
 8013f54:	6078      	str	r0, [r7, #4]
 8013f56:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8013f58:	6839      	ldr	r1, [r7, #0]
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7ff ffae 	bl	8013ebc <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013f60:	4603      	mov	r3, r0
 8013f62:	009b      	lsls	r3, r3, #2
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	4413      	add	r3, r2
 8013f68:	6839      	ldr	r1, [r7, #0]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7ff ff20 	bl	8013db0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8013f70:	4603      	mov	r3, r0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3708      	adds	r7, #8
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b084      	sub	sp, #16
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	460b      	mov	r3, r1
 8013f84:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	60bb      	str	r3, [r7, #8]
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	2b48      	cmp	r3, #72	; 0x48
 8013f92:	dc10      	bgt.n	8013fb6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	009b      	lsls	r3, r3, #2
 8013f98:	687a      	ldr	r2, [r7, #4]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	78fa      	ldrb	r2, [r7, #3]
 8013f9e:	4611      	mov	r1, r2
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7ff ff67 	bl	8013e74 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8013fa6:	4602      	mov	r2, r0
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	4413      	add	r3, r2
 8013fac:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	3301      	adds	r3, #1
 8013fb2:	60bb      	str	r3, [r7, #8]
 8013fb4:	e7eb      	b.n	8013f8e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3710      	adds	r7, #16
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}

08013fc0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	460b      	mov	r3, r1
 8013fca:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8013fcc:	2300      	movs	r3, #0
 8013fce:	60fb      	str	r3, [r7, #12]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b48      	cmp	r3, #72	; 0x48
 8013fd4:	dc12      	bgt.n	8013ffc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	009b      	lsls	r3, r3, #2
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	4413      	add	r3, r2
 8013fde:	78fa      	ldrb	r2, [r7, #3]
 8013fe0:	4611      	mov	r1, r2
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ff ff21 	bl	8013e2a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8013fe8:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	e004      	b.n	8013ffe <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	60fb      	str	r3, [r7, #12]
 8013ffa:	e7e9      	b.n	8013fd0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3710      	adds	r7, #16
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}

08014006 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8014006:	b580      	push	{r7, lr}
 8014008:	b086      	sub	sp, #24
 801400a:	af00      	add	r7, sp, #0
 801400c:	60f8      	str	r0, [r7, #12]
 801400e:	60b9      	str	r1, [r7, #8]
 8014010:	4613      	mov	r3, r2
 8014012:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	4619      	mov	r1, r3
 801401a:	68f8      	ldr	r0, [r7, #12]
 801401c:	f7ff ff4e 	bl	8013ebc <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014020:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	009b      	lsls	r3, r3, #2
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	4413      	add	r3, r2
 801402a:	79fa      	ldrb	r2, [r7, #7]
 801402c:	68b9      	ldr	r1, [r7, #8]
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff ff0d 	bl	8013e4e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014034:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d001      	beq.n	8014040 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	e019      	b.n	8014074 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	3301      	adds	r3, #1
 8014044:	617b      	str	r3, [r7, #20]
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	2b48      	cmp	r3, #72	; 0x48
 801404a:	d812      	bhi.n	8014072 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	009b      	lsls	r3, r3, #2
 8014050:	68fa      	ldr	r2, [r7, #12]
 8014052:	4413      	add	r3, r2
 8014054:	79fa      	ldrb	r2, [r7, #7]
 8014056:	4611      	mov	r1, r2
 8014058:	4618      	mov	r0, r3
 801405a:	f7ff fee6 	bl	8013e2a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801405e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d001      	beq.n	801406a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	e004      	b.n	8014074 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	3301      	adds	r3, #1
 801406e:	617b      	str	r3, [r7, #20]
 8014070:	e7e9      	b.n	8014046 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	3718      	adds	r7, #24
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801407c:	b5b0      	push	{r4, r5, r7, lr}
 801407e:	b082      	sub	sp, #8
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2448      	movs	r4, #72	; 0x48
 8014088:	461d      	mov	r5, r3
 801408a:	2c00      	cmp	r4, #0
 801408c:	db05      	blt.n	801409a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801408e:	4628      	mov	r0, r5
 8014090:	f7ff fa84 	bl	801359c <_ZN22MemoryLeakDetectorListC1Ev>
 8014094:	3504      	adds	r5, #4
 8014096:	3c01      	subs	r4, #1
 8014098:	e7f7      	b.n	801408a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	4618      	mov	r0, r3
 801409e:	3708      	adds	r7, #8
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bdb0      	pop	{r4, r5, r7, pc}

080140a4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 80140a4:	b590      	push	{r4, r7, lr}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
 80140ae:	4a1d      	ldr	r2, [pc, #116]	; (8014124 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	601a      	str	r2, [r3, #0]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	330c      	adds	r3, #12
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7ff fbe3 	bl	8013884 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140c4:	331c      	adds	r3, #28
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7ff ffd8 	bl	801407c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80140d2:	2201      	movs	r2, #1
 80140d4:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80140dc:	3304      	adds	r3, #4
 80140de:	2201      	movs	r2, #1
 80140e0:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2201      	movs	r2, #1
 80140e6:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80140ee:	3308      	adds	r3, #8
 80140f0:	2200      	movs	r2, #0
 80140f2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	683a      	ldr	r2, [r7, #0]
 80140f8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80140fa:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80140fe:	490a      	ldr	r1, [pc, #40]	; (8014128 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8014100:	2004      	movs	r0, #4
 8014102:	f7f3 fb17 	bl	8007734 <_ZnwjPKci>
 8014106:	4604      	mov	r4, r0
 8014108:	4620      	mov	r0, r4
 801410a:	f7f5 fbe7 	bl	80098dc <_ZN11SimpleMutexC1Ev>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014114:	330c      	adds	r3, #12
 8014116:	601c      	str	r4, [r3, #0]
}
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	4618      	mov	r0, r3
 801411c:	370c      	adds	r7, #12
 801411e:	46bd      	mov	sp, r7
 8014120:	bd90      	pop	{r4, r7, pc}
 8014122:	bf00      	nop
 8014124:	080249e0 	.word	0x080249e0
 8014128:	08022a70 	.word	0x08022a70

0801412c <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 801412c:	b590      	push	{r4, r7, lr}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	4a0e      	ldr	r2, [pc, #56]	; (8014170 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014140:	330c      	adds	r3, #12
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00d      	beq.n	8014164 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801414e:	330c      	adds	r3, #12
 8014150:	681c      	ldr	r4, [r3, #0]
 8014152:	2c00      	cmp	r4, #0
 8014154:	d006      	beq.n	8014164 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8014156:	4620      	mov	r0, r4
 8014158:	f7f5 fbd2 	bl	8009900 <_ZN11SimpleMutexD1Ev>
 801415c:	2104      	movs	r1, #4
 801415e:	4620      	mov	r0, r4
 8014160:	f7f3 fafc 	bl	800775c <_ZdlPvj>
    }
}
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	4618      	mov	r0, r3
 8014168:	370c      	adds	r7, #12
 801416a:	46bd      	mov	sp, r7
 801416c:	bd90      	pop	{r4, r7, pc}
 801416e:	bf00      	nop
 8014170:	080249e0 	.word	0x080249e0

08014174 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
}
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7ff ffd5 	bl	801412c <_ZN18MemoryLeakDetectorD1Ev>
 8014182:	f241 1150 	movw	r1, #4432	; 0x1150
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7f3 fae8 	bl	800775c <_ZdlPvj>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	4618      	mov	r0, r3
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8014196:	b580      	push	{r7, lr}
 8014198:	b082      	sub	sp, #8
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	330c      	adds	r3, #12
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7ff fd72 	bl	8013c8c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2203      	movs	r2, #3
 80141ac:	721a      	strb	r2, [r3, #8]
}
 80141ae:	bf00      	nop
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80141b6:	b480      	push	{r7}
 80141b8:	b083      	sub	sp, #12
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2202      	movs	r2, #2
 80141c2:	721a      	strb	r2, [r3, #8]
}
 80141c4:	bf00      	nop
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ce:	4770      	bx	lr

080141d0 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2202      	movs	r2, #2
 80141dc:	721a      	strb	r2, [r3, #8]
}
 80141de:	bf00      	nop
 80141e0:	370c      	adds	r7, #12
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr

080141ea <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80141ea:	b480      	push	{r7}
 80141ec:	b083      	sub	sp, #12
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80141f8:	330c      	adds	r3, #12
 80141fa:	681b      	ldr	r3, [r3, #0]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f023 0303 	bic.w	r3, r3, #3
 8014216:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8014218:	4618      	mov	r0, r3
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	3303      	adds	r3, #3
 8014232:	4618      	mov	r0, r3
 8014234:	f7ff ffe8 	bl	8014208 <_ZL31calculateVoidPointerAlignedSizej>
 8014238:	4603      	mov	r3, r0
}
 801423a:	4618      	mov	r0, r3
 801423c:	3708      	adds	r7, #8
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8014242:	b580      	push	{r7, lr}
 8014244:	b084      	sub	sp, #16
 8014246:	af00      	add	r7, sp, #0
 8014248:	60f8      	str	r0, [r7, #12]
 801424a:	60b9      	str	r1, [r7, #8]
 801424c:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801424e:	6879      	ldr	r1, [r7, #4]
 8014250:	68f8      	ldr	r0, [r7, #12]
 8014252:	f7ff ffe7 	bl	8014224 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014256:	4602      	mov	r2, r0
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	4413      	add	r3, r2
}
 801425c:	4618      	mov	r0, r3
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b08a      	sub	sp, #40	; 0x28
 8014268:	af06      	add	r7, sp, #24
 801426a:	60f8      	str	r0, [r7, #12]
 801426c:	60b9      	str	r1, [r7, #8]
 801426e:	607a      	str	r2, [r7, #4]
 8014270:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014278:	3304      	adds	r3, #4
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	1c51      	adds	r1, r2, #1
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014284:	3304      	adds	r3, #4
 8014286:	6019      	str	r1, [r3, #0]
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	7a19      	ldrb	r1, [r3, #8]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014292:	3308      	adds	r3, #8
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	6a38      	ldr	r0, [r7, #32]
 8014298:	9004      	str	r0, [sp, #16]
 801429a:	69f8      	ldr	r0, [r7, #28]
 801429c:	9003      	str	r0, [sp, #12]
 801429e:	9302      	str	r3, [sp, #8]
 80142a0:	9101      	str	r1, [sp, #4]
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	9300      	str	r3, [sp, #0]
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	6879      	ldr	r1, [r7, #4]
 80142aa:	68b8      	ldr	r0, [r7, #8]
 80142ac:	f7ff fcfb 	bl	8013ca6 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	689a      	ldr	r2, [r3, #8]
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	4413      	add	r3, r2
 80142ba:	4619      	mov	r1, r3
 80142bc:	68f8      	ldr	r0, [r7, #12]
 80142be:	f000 f861 	bl	8014384 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142c8:	331c      	adds	r3, #28
 80142ca:	68b9      	ldr	r1, [r7, #8]
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7ff fe11 	bl	8013ef4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80142d2:	bf00      	nop
 80142d4:	3710      	adds	r7, #16
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}

080142da <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80142da:	b580      	push	{r7, lr}
 80142dc:	b08a      	sub	sp, #40	; 0x28
 80142de:	af04      	add	r7, sp, #16
 80142e0:	60f8      	str	r0, [r7, #12]
 80142e2:	60b9      	str	r1, [r7, #8]
 80142e4:	607a      	str	r2, [r7, #4]
 80142e6:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80142e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80142ec:	9302      	str	r3, [sp, #8]
 80142ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f0:	9301      	str	r3, [sp, #4]
 80142f2:	6a3b      	ldr	r3, [r7, #32]
 80142f4:	9300      	str	r3, [sp, #0]
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	687a      	ldr	r2, [r7, #4]
 80142fa:	68b9      	ldr	r1, [r7, #8]
 80142fc:	68f8      	ldr	r0, [r7, #12]
 80142fe:	f000 f96f 	bl	80145e0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014302:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d101      	bne.n	801430e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801430a:	2300      	movs	r3, #0
 801430c:	e017      	b.n	801433e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801430e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	68b9      	ldr	r1, [r7, #8]
 801431a:	68f8      	ldr	r0, [r7, #12]
 801431c:	f000 f98a 	bl	8014634 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8014320:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8014322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014324:	9302      	str	r3, [sp, #8]
 8014326:	6a3b      	ldr	r3, [r7, #32]
 8014328:	9301      	str	r3, [sp, #4]
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	9300      	str	r3, [sp, #0]
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	697a      	ldr	r2, [r7, #20]
 8014332:	6939      	ldr	r1, [r7, #16]
 8014334:	68f8      	ldr	r0, [r7, #12]
 8014336:	f7ff ff95 	bl	8014264 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	689b      	ldr	r3, [r3, #8]
}
 801433e:	4618      	mov	r0, r3
 8014340:	3718      	adds	r7, #24
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}
	...

08014348 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014358:	331c      	adds	r3, #28
 801435a:	6839      	ldr	r1, [r7, #0]
 801435c:	4618      	mov	r0, r3
 801435e:	f7ff fdf6 	bl	8013f4e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8014362:	60f8      	str	r0, [r7, #12]
  if (node)
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d006      	beq.n	8014378 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801436a:	4b05      	ldr	r3, [pc, #20]	; (8014380 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	6812      	ldr	r2, [r2, #0]
 8014372:	21cd      	movs	r1, #205	; 0xcd
 8014374:	6838      	ldr	r0, [r7, #0]
 8014376:	4798      	blx	r3
#endif
}
 8014378:	bf00      	nop
 801437a:	3710      	adds	r7, #16
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	200000d4 	.word	0x200000d4

08014384 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2b02      	cmp	r3, #2
 8014396:	d812      	bhi.n	80143be <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8014398:	68f9      	ldr	r1, [r7, #12]
 801439a:	4b0c      	ldr	r3, [pc, #48]	; (80143cc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 801439c:	fba3 2301 	umull	r2, r3, r3, r1
 80143a0:	085a      	lsrs	r2, r3, #1
 80143a2:	4613      	mov	r3, r2
 80143a4:	005b      	lsls	r3, r3, #1
 80143a6:	4413      	add	r3, r2
 80143a8:	1aca      	subs	r2, r1, r3
 80143aa:	6839      	ldr	r1, [r7, #0]
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	440b      	add	r3, r1
 80143b0:	4907      	ldr	r1, [pc, #28]	; (80143d0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80143b2:	5c8a      	ldrb	r2, [r1, r2]
 80143b4:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	3301      	adds	r3, #1
 80143ba:	60fb      	str	r3, [r7, #12]
 80143bc:	e7e9      	b.n	8014392 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80143be:	bf00      	nop
 80143c0:	3714      	adds	r7, #20
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	aaaaaaab 	.word	0xaaaaaaab
 80143d0:	080249d4 	.word	0x080249d4

080143d4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b085      	sub	sp, #20
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80143de:	2300      	movs	r3, #0
 80143e0:	60fb      	str	r3, [r7, #12]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b02      	cmp	r3, #2
 80143e6:	d816      	bhi.n	8014416 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80143e8:	683a      	ldr	r2, [r7, #0]
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	4413      	add	r3, r2
 80143ee:	7818      	ldrb	r0, [r3, #0]
 80143f0:	68f9      	ldr	r1, [r7, #12]
 80143f2:	4b0c      	ldr	r3, [pc, #48]	; (8014424 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80143f4:	fba3 2301 	umull	r2, r3, r3, r1
 80143f8:	085a      	lsrs	r2, r3, #1
 80143fa:	4613      	mov	r3, r2
 80143fc:	005b      	lsls	r3, r3, #1
 80143fe:	4413      	add	r3, r2
 8014400:	1aca      	subs	r2, r1, r3
 8014402:	4b09      	ldr	r3, [pc, #36]	; (8014428 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8014404:	5c9b      	ldrb	r3, [r3, r2]
 8014406:	4298      	cmp	r0, r3
 8014408:	d001      	beq.n	801440e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 801440a:	2300      	movs	r3, #0
 801440c:	e004      	b.n	8014418 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	3301      	adds	r3, #1
 8014412:	60fb      	str	r3, [r7, #12]
 8014414:	e7e5      	b.n	80143e2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8014416:	2301      	movs	r3, #1
}
 8014418:	4618      	mov	r0, r3
 801441a:	3714      	adds	r7, #20
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr
 8014424:	aaaaaaab 	.word	0xaaaaaaab
 8014428:	080249d4 	.word	0x080249d4

0801442c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8014438:	68ba      	ldr	r2, [r7, #8]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	429a      	cmp	r2, r3
 801443e:	d101      	bne.n	8014444 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8014440:	2301      	movs	r3, #1
 8014442:	e013      	b.n	801446c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f083 0301 	eor.w	r3, r3, #1
 8014450:	b2db      	uxtb	r3, r3
 8014452:	2b00      	cmp	r3, #0
 8014454:	d001      	beq.n	801445a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8014456:	2301      	movs	r3, #1
 8014458:	e008      	b.n	801446c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	331c      	adds	r3, #28
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	68b9      	ldr	r1, [r7, #8]
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	4798      	blx	r3
 8014468:	4603      	mov	r3, r0
 801446a:	bf00      	nop
}
 801446c:	4618      	mov	r0, r3
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8014474:	b590      	push	{r4, r7, lr}
 8014476:	b087      	sub	sp, #28
 8014478:	af02      	add	r7, sp, #8
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	607a      	str	r2, [r7, #4]
 8014480:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	695a      	ldr	r2, [r3, #20]
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	695b      	ldr	r3, [r3, #20]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	3328      	adds	r3, #40	; 0x28
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	4610      	mov	r0, r2
 8014492:	4798      	blx	r3
 8014494:	4604      	mov	r4, r0
 8014496:	6a3b      	ldr	r3, [r7, #32]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	3328      	adds	r3, #40	; 0x28
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	6a38      	ldr	r0, [r7, #32]
 80144a0:	4798      	blx	r3
 80144a2:	4603      	mov	r3, r0
 80144a4:	461a      	mov	r2, r3
 80144a6:	4621      	mov	r1, r4
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f7ff ffbf 	bl	801442c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80144ae:	4603      	mov	r3, r0
 80144b0:	f083 0301 	eor.w	r3, r3, #1
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d014      	beq.n	80144e4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	f103 040c 	add.w	r4, r3, #12
 80144c0:	6a3b      	ldr	r3, [r7, #32]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	3328      	adds	r3, #40	; 0x28
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	6a38      	ldr	r0, [r7, #32]
 80144ca:	4798      	blx	r3
 80144cc:	4602      	mov	r2, r0
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	9301      	str	r3, [sp, #4]
 80144d4:	9200      	str	r2, [sp, #0]
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	68b9      	ldr	r1, [r7, #8]
 80144dc:	4620      	mov	r0, r4
 80144de:	f7ff fb4d 	bl	8013b7c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80144e2:	e02e      	b.n	8014542 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	689a      	ldr	r2, [r3, #8]
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	4413      	add	r3, r2
 80144ee:	4619      	mov	r1, r3
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f7ff ff6f 	bl	80143d4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80144f6:	4603      	mov	r3, r0
 80144f8:	f083 0301 	eor.w	r3, r3, #1
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d014      	beq.n	801452c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f103 040c 	add.w	r4, r3, #12
 8014508:	6a3b      	ldr	r3, [r7, #32]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	3328      	adds	r3, #40	; 0x28
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	6a38      	ldr	r0, [r7, #32]
 8014512:	4798      	blx	r3
 8014514:	4602      	mov	r2, r0
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	9301      	str	r3, [sp, #4]
 801451c:	9200      	str	r2, [sp, #0]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	687a      	ldr	r2, [r7, #4]
 8014522:	68b9      	ldr	r1, [r7, #8]
 8014524:	4620      	mov	r0, r4
 8014526:	f7ff fb4f 	bl	8013bc8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801452a:	e00a      	b.n	8014542 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 801452c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014530:	2b00      	cmp	r3, #0
 8014532:	d006      	beq.n	8014542 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8014534:	6a3b      	ldr	r3, [r7, #32]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	3324      	adds	r3, #36	; 0x24
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	68b9      	ldr	r1, [r7, #8]
 801453e:	6a38      	ldr	r0, [r7, #32]
 8014540:	4798      	blx	r3
}
 8014542:	bf00      	nop
 8014544:	3714      	adds	r7, #20
 8014546:	46bd      	mov	sp, r7
 8014548:	bd90      	pop	{r4, r7, pc}
	...

0801454c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af02      	add	r7, sp, #8
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	607a      	str	r2, [r7, #4]
 8014558:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801455a:	4b08      	ldr	r3, [pc, #32]	; (801457c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	78fb      	ldrb	r3, [r7, #3]
 8014560:	9301      	str	r3, [sp, #4]
 8014562:	2300      	movs	r3, #0
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	4613      	mov	r3, r2
 8014568:	687a      	ldr	r2, [r7, #4]
 801456a:	68b9      	ldr	r1, [r7, #8]
 801456c:	68f8      	ldr	r0, [r7, #12]
 801456e:	f000 f87f 	bl	8014670 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8014572:	4603      	mov	r3, r0
}
 8014574:	4618      	mov	r0, r3
 8014576:	3710      	adds	r7, #16
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	200000fc 	.word	0x200000fc

08014580 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014580:	b590      	push	{r4, r7, lr}
 8014582:	b085      	sub	sp, #20
 8014584:	af00      	add	r7, sp, #0
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	607a      	str	r2, [r7, #4]
 801458c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801458e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00e      	beq.n	80145b4 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	3308      	adds	r3, #8
 801459c:	681c      	ldr	r4, [r3, #0]
 801459e:	6879      	ldr	r1, [r7, #4]
 80145a0:	68f8      	ldr	r0, [r7, #12]
 80145a2:	f7ff fe3f 	bl	8014224 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80145a6:	4601      	mov	r1, r0
 80145a8:	6a3b      	ldr	r3, [r7, #32]
 80145aa:	683a      	ldr	r2, [r7, #0]
 80145ac:	68b8      	ldr	r0, [r7, #8]
 80145ae:	47a0      	blx	r4
 80145b0:	4603      	mov	r3, r0
 80145b2:	e010      	b.n	80145d6 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	3308      	adds	r3, #8
 80145ba:	681c      	ldr	r4, [r3, #0]
 80145bc:	6879      	ldr	r1, [r7, #4]
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f7ff fe30 	bl	8014224 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80145c4:	4603      	mov	r3, r0
 80145c6:	f103 0120 	add.w	r1, r3, #32
 80145ca:	6a3b      	ldr	r3, [r7, #32]
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	68b8      	ldr	r0, [r7, #8]
 80145d0:	47a0      	blx	r4
 80145d2:	4603      	mov	r3, r0
 80145d4:	bf00      	nop
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3714      	adds	r7, #20
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd90      	pop	{r4, r7, pc}
	...

080145e0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80145e0:	b590      	push	{r4, r7, lr}
 80145e2:	b085      	sub	sp, #20
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	60f8      	str	r0, [r7, #12]
 80145e8:	60b9      	str	r1, [r7, #8]
 80145ea:	607a      	str	r2, [r7, #4]
 80145ec:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80145ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d00b      	beq.n	801460e <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80145f6:	4b0e      	ldr	r3, [pc, #56]	; (8014630 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80145f8:	681c      	ldr	r4, [r3, #0]
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	68f8      	ldr	r0, [r7, #12]
 80145fe:	f7ff fe11 	bl	8014224 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014602:	4603      	mov	r3, r0
 8014604:	4619      	mov	r1, r3
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	47a0      	blx	r4
 801460a:	4603      	mov	r3, r0
 801460c:	e00c      	b.n	8014628 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 801460e:	4b08      	ldr	r3, [pc, #32]	; (8014630 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8014610:	681c      	ldr	r4, [r3, #0]
 8014612:	6839      	ldr	r1, [r7, #0]
 8014614:	68f8      	ldr	r0, [r7, #12]
 8014616:	f7ff fe05 	bl	8014224 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801461a:	4603      	mov	r3, r0
 801461c:	3320      	adds	r3, #32
 801461e:	4619      	mov	r1, r3
 8014620:	6878      	ldr	r0, [r7, #4]
 8014622:	47a0      	blx	r4
 8014624:	4603      	mov	r3, r0
 8014626:	bf00      	nop
}
 8014628:	4618      	mov	r0, r3
 801462a:	3714      	adds	r7, #20
 801462c:	46bd      	mov	sp, r7
 801462e:	bd90      	pop	{r4, r7, pc}
 8014630:	200000c8 	.word	0x200000c8

08014634 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b084      	sub	sp, #16
 8014638:	af00      	add	r7, sp, #0
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	60b9      	str	r1, [r7, #8]
 801463e:	607a      	str	r2, [r7, #4]
 8014640:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8014642:	7e3b      	ldrb	r3, [r7, #24]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d008      	beq.n	801465a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	3320      	adds	r3, #32
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2120      	movs	r1, #32
 8014652:	68b8      	ldr	r0, [r7, #8]
 8014654:	4798      	blx	r3
 8014656:	4603      	mov	r3, r0
 8014658:	e006      	b.n	8014668 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	6839      	ldr	r1, [r7, #0]
 801465e:	68f8      	ldr	r0, [r7, #12]
 8014660:	f7ff fdef 	bl	8014242 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8014664:	4603      	mov	r3, r0
 8014666:	bf00      	nop
}
 8014668:	4618      	mov	r0, r3
 801466a:	3710      	adds	r7, #16
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b08a      	sub	sp, #40	; 0x28
 8014674:	af04      	add	r7, sp, #16
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
 801467c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801467e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	6a3b      	ldr	r3, [r7, #32]
 8014686:	9300      	str	r3, [sp, #0]
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	687a      	ldr	r2, [r7, #4]
 801468c:	68b9      	ldr	r1, [r7, #8]
 801468e:	68f8      	ldr	r0, [r7, #12]
 8014690:	f7ff ff76 	bl	8014580 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8014694:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d101      	bne.n	80146a0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 801469c:	2300      	movs	r3, #0
 801469e:	e017      	b.n	80146d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80146a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146a4:	9300      	str	r3, [sp, #0]
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	68b9      	ldr	r1, [r7, #8]
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f7ff ffc1 	bl	8014634 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80146b2:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80146b4:	6a3b      	ldr	r3, [r7, #32]
 80146b6:	9302      	str	r3, [sp, #8]
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	9301      	str	r3, [sp, #4]
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	9300      	str	r3, [sp, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	697a      	ldr	r2, [r7, #20]
 80146c4:	6939      	ldr	r1, [r7, #16]
 80146c6:	68f8      	ldr	r0, [r7, #12]
 80146c8:	f7ff fdcc 	bl	8014264 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80146cc:	693b      	ldr	r3, [r7, #16]
 80146ce:	689b      	ldr	r3, [r3, #8]
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80146d8:	b590      	push	{r4, r7, lr}
 80146da:	b089      	sub	sp, #36	; 0x24
 80146dc:	af02      	add	r7, sp, #8
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
 80146e4:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d03a      	beq.n	8014762 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146f2:	331c      	adds	r3, #28
 80146f4:	6879      	ldr	r1, [r7, #4]
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7ff fc13 	bl	8013f22 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80146fc:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80146fe:	697b      	ldr	r3, [r7, #20]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d10b      	bne.n	801471c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	f103 000c 	add.w	r0, r3, #12
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014714:	6839      	ldr	r1, [r7, #0]
 8014716:	f7ff fa0d 	bl	8013b34 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801471a:	e023      	b.n	8014764 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 801471c:	68b8      	ldr	r0, [r7, #8]
 801471e:	f7f8 ff95 	bl	800d64c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8014722:	4603      	mov	r3, r0
 8014724:	f083 0301 	eor.w	r3, r3, #1
 8014728:	b2db      	uxtb	r3, r3
 801472a:	2b00      	cmp	r3, #0
 801472c:	d01a      	beq.n	8014764 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014734:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014738:	9301      	str	r3, [sp, #4]
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	9300      	str	r3, [sp, #0]
 801473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014740:	683a      	ldr	r2, [r7, #0]
 8014742:	6979      	ldr	r1, [r7, #20]
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f7ff fe95 	bl	8014474 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	330c      	adds	r3, #12
 8014750:	681c      	ldr	r4, [r3, #0]
 8014752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014754:	9300      	str	r3, [sp, #0]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	693a      	ldr	r2, [r7, #16]
 801475a:	6879      	ldr	r1, [r7, #4]
 801475c:	68b8      	ldr	r0, [r7, #8]
 801475e:	47a0      	blx	r4
 8014760:	e000      	b.n	8014764 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8014762:	bf00      	nop
    }
}
 8014764:	371c      	adds	r7, #28
 8014766:	46bd      	mov	sp, r7
 8014768:	bd90      	pop	{r4, r7, pc}
	...

0801476c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b086      	sub	sp, #24
 8014770:	af02      	add	r7, sp, #8
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
 8014778:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801477a:	4b08      	ldr	r3, [pc, #32]	; (801479c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	78fb      	ldrb	r3, [r7, #3]
 8014780:	9301      	str	r3, [sp, #4]
 8014782:	2300      	movs	r3, #0
 8014784:	9300      	str	r3, [sp, #0]
 8014786:	4613      	mov	r3, r2
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	68b9      	ldr	r1, [r7, #8]
 801478c:	68f8      	ldr	r0, [r7, #12]
 801478e:	f7ff ffa3 	bl	80146d8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8014792:	bf00      	nop
 8014794:	3710      	adds	r7, #16
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	200000fc 	.word	0x200000fc

080147a0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b08a      	sub	sp, #40	; 0x28
 80147a4:	af04      	add	r7, sp, #16
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	607a      	str	r2, [r7, #4]
 80147ac:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d023      	beq.n	80147fc <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147ba:	331c      	adds	r3, #28
 80147bc:	6879      	ldr	r1, [r7, #4]
 80147be:	4618      	mov	r0, r3
 80147c0:	f7ff fbaf 	bl	8013f22 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80147c4:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d10c      	bne.n	80147e6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f103 000c 	add.w	r0, r3, #12
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147dc:	6a39      	ldr	r1, [r7, #32]
 80147de:	f7ff f9a9 	bl	8013b34 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80147e2:	2300      	movs	r3, #0
 80147e4:	e019      	b.n	801481a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80147e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80147ea:	9301      	str	r3, [sp, #4]
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	9300      	str	r3, [sp, #0]
 80147f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f2:	6a3a      	ldr	r2, [r7, #32]
 80147f4:	6979      	ldr	r1, [r7, #20]
 80147f6:	68f8      	ldr	r0, [r7, #12]
 80147f8:	f7ff fe3c 	bl	8014474 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80147fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014800:	9302      	str	r3, [sp, #8]
 8014802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014804:	9301      	str	r3, [sp, #4]
 8014806:	6a3b      	ldr	r3, [r7, #32]
 8014808:	9300      	str	r3, [sp, #0]
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	687a      	ldr	r2, [r7, #4]
 801480e:	68b9      	ldr	r1, [r7, #8]
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f7ff fd62 	bl	80142da <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014816:	4603      	mov	r3, r0
 8014818:	bf00      	nop
}
 801481a:	4618      	mov	r0, r3
 801481c:	3718      	adds	r7, #24
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}

08014822 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8014822:	b580      	push	{r7, lr}
 8014824:	b084      	sub	sp, #16
 8014826:	af00      	add	r7, sp, #0
 8014828:	6078      	str	r0, [r7, #4]
 801482a:	460b      	mov	r3, r1
 801482c:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014834:	331c      	adds	r3, #28
 8014836:	78fa      	ldrb	r2, [r7, #3]
 8014838:	4611      	mov	r1, r2
 801483a:	4618      	mov	r0, r3
 801483c:	f7ff fbc0 	bl	8013fc0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8014840:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	330c      	adds	r3, #12
 8014846:	4618      	mov	r0, r3
 8014848:	f7ff f882 	bl	8013950 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d010      	beq.n	8014874 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	330c      	adds	r3, #12
 8014856:	68f9      	ldr	r1, [r7, #12]
 8014858:	4618      	mov	r0, r3
 801485a:	f7ff f897 	bl	801398c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014864:	331c      	adds	r3, #28
 8014866:	78fa      	ldrb	r2, [r7, #3]
 8014868:	68f9      	ldr	r1, [r7, #12]
 801486a:	4618      	mov	r0, r3
 801486c:	f7ff fbcb 	bl	8014006 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014870:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014872:	e7eb      	b.n	801484c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	330c      	adds	r3, #12
 8014878:	4618      	mov	r0, r3
 801487a:	f7ff f8e7 	bl	8013a4c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801487e:	bf00      	nop
 8014880:	3710      	adds	r7, #16
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}

08014886 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8014886:	b580      	push	{r7, lr}
 8014888:	b082      	sub	sp, #8
 801488a:	af00      	add	r7, sp, #0
 801488c:	6078      	str	r0, [r7, #4]
 801488e:	460b      	mov	r3, r1
 8014890:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8014892:	78fb      	ldrb	r3, [r7, #3]
 8014894:	4619      	mov	r1, r3
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7ff ffc3 	bl	8014822 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	330c      	adds	r3, #12
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff f9e5 	bl	8013c70 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80148a6:	4603      	mov	r3, r0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80148be:	331c      	adds	r3, #28
 80148c0:	2103      	movs	r1, #3
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7ff fb7c 	bl	8013fc0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80148c8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d011      	beq.n	80148f4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	7e1b      	ldrb	r3, [r3, #24]
 80148d4:	2b03      	cmp	r3, #3
 80148d6:	d102      	bne.n	80148de <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2202      	movs	r2, #2
 80148dc:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80148e4:	331c      	adds	r3, #28
 80148e6:	2203      	movs	r2, #3
 80148e8:	68f9      	ldr	r1, [r7, #12]
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7ff fb8b 	bl	8014006 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80148f0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80148f2:	e7ea      	b.n	80148ca <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80148f4:	bf00      	nop
 80148f6:	3710      	adds	r7, #16
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	460b      	mov	r3, r1
 8014906:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801490e:	331c      	adds	r3, #28
 8014910:	78fa      	ldrb	r2, [r7, #3]
 8014912:	4611      	mov	r1, r2
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff fb30 	bl	8013f7a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801491a:	4603      	mov	r3, r0
}
 801491c:	4618      	mov	r0, r3
 801491e:	3708      	adds	r7, #8
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8014924:	b580      	push	{r7, lr}
 8014926:	b084      	sub	sp, #16
 8014928:	af00      	add	r7, sp, #0
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	607a      	str	r2, [r7, #4]
 8014930:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	68b9      	ldr	r1, [r7, #8]
 8014936:	4618      	mov	r0, r3
 8014938:	f7f5 fb13 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	3308      	adds	r3, #8
 8014940:	6879      	ldr	r1, [r7, #4]
 8014942:	4618      	mov	r0, r3
 8014944:	f7f5 fb0d 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	611a      	str	r2, [r3, #16]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	2200      	movs	r2, #0
 8014952:	615a      	str	r2, [r3, #20]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	4618      	mov	r0, r3
 8014958:	3710      	adds	r7, #16
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}

0801495e <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801495e:	b480      	push	{r7}
 8014960:	b083      	sub	sp, #12
 8014962:	af00      	add	r7, sp, #0
 8014964:	6078      	str	r0, [r7, #4]
 8014966:	6039      	str	r1, [r7, #0]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	4618      	mov	r0, r3
 801496c:	370c      	adds	r7, #12
 801496e:	46bd      	mov	sp, r7
 8014970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014974:	4770      	bx	lr

08014976 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8014976:	b480      	push	{r7}
 8014978:	b083      	sub	sp, #12
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	6039      	str	r1, [r7, #0]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	4618      	mov	r0, r3
 8014984:	370c      	adds	r7, #12
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr

0801498e <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801498e:	b480      	push	{r7}
 8014990:	b085      	sub	sp, #20
 8014992:	af00      	add	r7, sp, #0
 8014994:	60f8      	str	r0, [r7, #12]
 8014996:	60b9      	str	r1, [r7, #8]
 8014998:	4613      	mov	r3, r2
 801499a:	71fb      	strb	r3, [r7, #7]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	4618      	mov	r0, r3
 80149a0:	3714      	adds	r7, #20
 80149a2:	46bd      	mov	sp, r7
 80149a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a8:	4770      	bx	lr

080149aa <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80149aa:	b480      	push	{r7}
 80149ac:	b085      	sub	sp, #20
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	60f8      	str	r0, [r7, #12]
 80149b2:	60b9      	str	r1, [r7, #8]
 80149b4:	607a      	str	r2, [r7, #4]
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	4618      	mov	r0, r3
 80149ba:	3714      	adds	r7, #20
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr

080149c4 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80149c4:	b480      	push	{r7}
 80149c6:	b085      	sub	sp, #20
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	607a      	str	r2, [r7, #4]
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	4618      	mov	r0, r3
 80149d4:	3714      	adds	r7, #20
 80149d6:	46bd      	mov	sp, r7
 80149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149dc:	4770      	bx	lr

080149de <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80149de:	b480      	push	{r7}
 80149e0:	b085      	sub	sp, #20
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	60f8      	str	r0, [r7, #12]
 80149e6:	60b9      	str	r1, [r7, #8]
 80149e8:	607a      	str	r2, [r7, #4]
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	4618      	mov	r0, r3
 80149ee:	3714      	adds	r7, #20
 80149f0:	46bd      	mov	sp, r7
 80149f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f6:	4770      	bx	lr

080149f8 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80149f8:	b480      	push	{r7}
 80149fa:	b085      	sub	sp, #20
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	4618      	mov	r0, r3
 8014a08:	3714      	adds	r7, #20
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr

08014a12 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8014a12:	b480      	push	{r7}
 8014a14:	b085      	sub	sp, #20
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	60f8      	str	r0, [r7, #12]
 8014a1a:	60b9      	str	r1, [r7, #8]
 8014a1c:	4639      	mov	r1, r7
 8014a1e:	e881 000c 	stmia.w	r1, {r2, r3}
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	4618      	mov	r0, r3
 8014a26:	3714      	adds	r7, #20
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8014a30:	b480      	push	{r7}
 8014a32:	b085      	sub	sp, #20
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	4639      	mov	r1, r7
 8014a3c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	4618      	mov	r0, r3
 8014a44:	3714      	adds	r7, #20
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8014a4e:	b480      	push	{r7}
 8014a50:	b085      	sub	sp, #20
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	60f8      	str	r0, [r7, #12]
 8014a56:	60b9      	str	r1, [r7, #8]
 8014a58:	ed87 0b00 	vstr	d0, [r7]
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3714      	adds	r7, #20
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr

08014a6a <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8014a6a:	b480      	push	{r7}
 8014a6c:	b085      	sub	sp, #20
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	60f8      	str	r0, [r7, #12]
 8014a72:	60b9      	str	r1, [r7, #8]
 8014a74:	607a      	str	r2, [r7, #4]
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3714      	adds	r7, #20
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a82:	4770      	bx	lr

08014a84 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8014a84:	b480      	push	{r7}
 8014a86:	b085      	sub	sp, #20
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	4618      	mov	r0, r3
 8014a94:	3714      	adds	r7, #20
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr

08014a9e <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8014a9e:	b480      	push	{r7}
 8014aa0:	b085      	sub	sp, #20
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	60f8      	str	r0, [r7, #12]
 8014aa6:	60b9      	str	r1, [r7, #8]
 8014aa8:	607a      	str	r2, [r7, #4]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	4618      	mov	r0, r3
 8014aae:	3714      	adds	r7, #20
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab6:	4770      	bx	lr

08014ab8 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8014ab8:	b480      	push	{r7}
 8014aba:	b085      	sub	sp, #20
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3714      	adds	r7, #20
 8014aca:	46bd      	mov	sp, r7
 8014acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad0:	4770      	bx	lr

08014ad2 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8014ad2:	b480      	push	{r7}
 8014ad4:	b085      	sub	sp, #20
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	60f8      	str	r0, [r7, #12]
 8014ada:	60b9      	str	r1, [r7, #8]
 8014adc:	607a      	str	r2, [r7, #4]
 8014ade:	603b      	str	r3, [r7, #0]
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	3714      	adds	r7, #20
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aec:	4770      	bx	lr

08014aee <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8014aee:	b480      	push	{r7}
 8014af0:	b085      	sub	sp, #20
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	60f8      	str	r0, [r7, #12]
 8014af6:	60b9      	str	r1, [r7, #8]
 8014af8:	607a      	str	r2, [r7, #4]
 8014afa:	603b      	str	r3, [r7, #0]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	4618      	mov	r0, r3
 8014b00:	3714      	adds	r7, #20
 8014b02:	46bd      	mov	sp, r7
 8014b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b08:	4770      	bx	lr

08014b0a <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8014b0a:	b480      	push	{r7}
 8014b0c:	b085      	sub	sp, #20
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	60f8      	str	r0, [r7, #12]
 8014b12:	60b9      	str	r1, [r7, #8]
 8014b14:	607a      	str	r2, [r7, #4]
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	3714      	adds	r7, #20
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8014b24:	b480      	push	{r7}
 8014b26:	b085      	sub	sp, #20
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	60f8      	str	r0, [r7, #12]
 8014b2c:	60b9      	str	r1, [r7, #8]
 8014b2e:	607a      	str	r2, [r7, #4]
 8014b30:	603b      	str	r3, [r7, #0]
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	4618      	mov	r0, r3
 8014b36:	3714      	adds	r7, #20
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3e:	4770      	bx	lr

08014b40 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8014b40:	b480      	push	{r7}
 8014b42:	b083      	sub	sp, #12
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	2300      	movs	r3, #0
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr
	...

08014b58 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
 8014b62:	f107 0308 	add.w	r3, r7, #8
 8014b66:	4909      	ldr	r1, [pc, #36]	; (8014b8c <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7f5 f9a6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8014b6e:	f107 0308 	add.w	r3, r7, #8
 8014b72:	4619      	mov	r1, r3
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f005 fec5 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8014b7a:	f107 0308 	add.w	r3, r7, #8
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7f5 fd53 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	3710      	adds	r7, #16
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	08022a90 	.word	0x08022a90

08014b90 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8014b90:	b480      	push	{r7}
 8014b92:	b083      	sub	sp, #12
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	70fb      	strb	r3, [r7, #3]
 8014b9c:	78fb      	ldrb	r3, [r7, #3]
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	370c      	adds	r7, #12
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr

08014baa <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8014baa:	b480      	push	{r7}
 8014bac:	b083      	sub	sp, #12
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	370c      	adds	r7, #12
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr

08014bc0 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	2300      	movs	r3, #0
 8014bca:	4618      	mov	r0, r3
 8014bcc:	370c      	adds	r7, #12
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd4:	4770      	bx	lr

08014bd6 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8014bd6:	b480      	push	{r7}
 8014bd8:	b083      	sub	sp, #12
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	6039      	str	r1, [r7, #0]
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	4618      	mov	r0, r3
 8014be4:	370c      	adds	r7, #12
 8014be6:	46bd      	mov	sp, r7
 8014be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bec:	4770      	bx	lr

08014bee <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8014bee:	b480      	push	{r7}
 8014bf0:	b083      	sub	sp, #12
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	370c      	adds	r7, #12
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	4618      	mov	r0, r3
 8014c12:	370c      	adds	r7, #12
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8014c1c:	b480      	push	{r7}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
 8014c24:	2300      	movs	r3, #0
 8014c26:	4618      	mov	r0, r3
 8014c28:	370c      	adds	r7, #12
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr

08014c32 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8014c32:	b480      	push	{r7}
 8014c34:	b083      	sub	sp, #12
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	6078      	str	r0, [r7, #4]
 8014c3a:	6039      	str	r1, [r7, #0]
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	370c      	adds	r7, #12
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr

08014c4a <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8014c4a:	b580      	push	{r7, lr}
 8014c4c:	b082      	sub	sp, #8
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
 8014c52:	6039      	str	r1, [r7, #0]
 8014c54:	2100      	movs	r1, #0
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f7f3 f972 	bl	8007f40 <_ZN18cpputest_ulonglongC1Ei>
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	3708      	adds	r7, #8
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8014c64:	b480      	push	{r7}
 8014c66:	b085      	sub	sp, #20
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	4639      	mov	r1, r7
 8014c70:	e881 000c 	stmia.w	r1, {r2, r3}
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	461a      	mov	r2, r3
 8014c78:	463b      	mov	r3, r7
 8014c7a:	cb03      	ldmia	r3!, {r0, r1}
 8014c7c:	6010      	str	r0, [r2, #0]
 8014c7e:	6051      	str	r1, [r2, #4]
 8014c80:	68f8      	ldr	r0, [r7, #12]
 8014c82:	3714      	adds	r7, #20
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr

08014c8c <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
 8014c96:	2100      	movs	r1, #0
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f7f3 f945 	bl	8007f28 <_ZN17cpputest_longlongC1Ei>
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	3708      	adds	r7, #8
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}

08014ca6 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8014ca6:	b480      	push	{r7}
 8014ca8:	b085      	sub	sp, #20
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	60f8      	str	r0, [r7, #12]
 8014cae:	60b9      	str	r1, [r7, #8]
 8014cb0:	4639      	mov	r1, r7
 8014cb2:	e881 000c 	stmia.w	r1, {r2, r3}
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	463b      	mov	r3, r7
 8014cbc:	cb03      	ldmia	r3!, {r0, r1}
 8014cbe:	6010      	str	r0, [r2, #0]
 8014cc0:	6051      	str	r1, [r2, #4]
 8014cc2:	68f8      	ldr	r0, [r7, #12]
 8014cc4:	3714      	adds	r7, #20
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ccc:	4770      	bx	lr

08014cce <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8014cce:	b480      	push	{r7}
 8014cd0:	b083      	sub	sp, #12
 8014cd2:	af00      	add	r7, sp, #0
 8014cd4:	6078      	str	r0, [r7, #4]
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	4618      	mov	r0, r3
 8014cda:	370c      	adds	r7, #12
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr

08014ce4 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr

08014cfc <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	f04f 0200 	mov.w	r2, #0
 8014d08:	f04f 0300 	mov.w	r3, #0
 8014d0c:	ec43 2b17 	vmov	d7, r2, r3
 8014d10:	eeb0 0a47 	vmov.f32	s0, s14
 8014d14:	eef0 0a67 	vmov.f32	s1, s15
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8014d22:	b480      	push	{r7}
 8014d24:	b085      	sub	sp, #20
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	60f8      	str	r0, [r7, #12]
 8014d2a:	ed87 0b00 	vstr	d0, [r7]
 8014d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d32:	ec43 2b17 	vmov	d7, r2, r3
 8014d36:	eeb0 0a47 	vmov.f32	s0, s14
 8014d3a:	eef0 0a67 	vmov.f32	s1, s15
 8014d3e:	3714      	adds	r7, #20
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8014d48:	b480      	push	{r7}
 8014d4a:	b083      	sub	sp, #12
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	4b03      	ldr	r3, [pc, #12]	; (8014d60 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8014d52:	4618      	mov	r0, r3
 8014d54:	370c      	adds	r7, #12
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop
 8014d60:	08022a90 	.word	0x08022a90

08014d64 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	4618      	mov	r0, r3
 8014d72:	370c      	adds	r7, #12
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr

08014d7c <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	2300      	movs	r3, #0
 8014d86:	4618      	mov	r0, r3
 8014d88:	370c      	adds	r7, #12
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8014d92:	b480      	push	{r7}
 8014d94:	b083      	sub	sp, #12
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
 8014d9a:	6039      	str	r1, [r7, #0]
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	4618      	mov	r0, r3
 8014da0:	370c      	adds	r7, #12
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr

08014daa <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8014daa:	b480      	push	{r7}
 8014dac:	b083      	sub	sp, #12
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	2300      	movs	r3, #0
 8014db4:	4618      	mov	r0, r3
 8014db6:	370c      	adds	r7, #12
 8014db8:	46bd      	mov	sp, r7
 8014dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbe:	4770      	bx	lr

08014dc0 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	4618      	mov	r0, r3
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	2300      	movs	r3, #0
 8014de2:	4618      	mov	r0, r3
 8014de4:	370c      	adds	r7, #12
 8014de6:	46bd      	mov	sp, r7
 8014de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dec:	4770      	bx	lr

08014dee <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8014dee:	b480      	push	{r7}
 8014df0:	b083      	sub	sp, #12
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	6078      	str	r0, [r7, #4]
 8014df6:	6039      	str	r1, [r7, #0]
 8014df8:	683b      	ldr	r3, [r7, #0]
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	370c      	adds	r7, #12
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e04:	4770      	bx	lr

08014e06 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8014e06:	b480      	push	{r7}
 8014e08:	b083      	sub	sp, #12
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
 8014e0e:	6039      	str	r1, [r7, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	4618      	mov	r0, r3
 8014e14:	370c      	adds	r7, #12
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr
	...

08014e20 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8014e20:	b480      	push	{r7}
 8014e22:	b083      	sub	sp, #12
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	4a04      	ldr	r2, [pc, #16]	; (8014e3c <_ZN14MockActualCallC1Ev+0x1c>)
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	601a      	str	r2, [r3, #0]
{
}
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	4618      	mov	r0, r3
 8014e32:	370c      	adds	r7, #12
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr
 8014e3c:	08024dd8 	.word	0x08024dd8

08014e40 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	4a04      	ldr	r2, [pc, #16]	; (8014e5c <_ZN14MockActualCallD1Ev+0x1c>)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	601a      	str	r2, [r3, #0]
{
}
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4618      	mov	r0, r3
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr
 8014e5c:	08024dd8 	.word	0x08024dd8

08014e60 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	3304      	adds	r3, #4
 8014e6e:	6839      	ldr	r1, [r7, #0]
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7f5 f88e 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
}
 8014e76:	bf00      	nop
 8014e78:	3708      	adds	r7, #8
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}

08014e7e <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8014e7e:	b580      	push	{r7, lr}
 8014e80:	b082      	sub	sp, #8
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	6078      	str	r0, [r7, #4]
 8014e86:	6039      	str	r1, [r7, #0]
    return functionName_;
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	3304      	adds	r3, #4
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f7f5 f867 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7ff ffb7 	bl	8014e20 <_ZN14MockActualCallC1Ev>
 8014eb2:	4a17      	ldr	r2, [pc, #92]	; (8014f10 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	601a      	str	r2, [r3, #0]
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	3304      	adds	r3, #4
 8014ebc:	4915      	ldr	r1, [pc, #84]	; (8014f14 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7f4 fffb 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	68ba      	ldr	r2, [r7, #8]
 8014ec8:	60da      	str	r2, [r3, #12]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	611a      	str	r2, [r3, #16]
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2202      	movs	r2, #2
 8014ed4:	751a      	strb	r2, [r3, #20]
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	755a      	strb	r2, [r3, #21]
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	619a      	str	r2, [r3, #24]
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	331c      	adds	r3, #28
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f004 f814 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	683a      	ldr	r2, [r7, #0]
 8014ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	331c      	adds	r3, #28
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	4618      	mov	r0, r3
 8014f00:	f004 f986 	bl	8019210 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	4618      	mov	r0, r3
 8014f08:	3710      	adds	r7, #16
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
 8014f0e:	bf00      	nop
 8014f10:	08024cd8 	.word	0x08024cd8
 8014f14:	08022a90 	.word	0x08022a90

08014f18 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	4a0c      	ldr	r2, [pc, #48]	; (8014f54 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f001 fae4 	bl	80164f4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	331c      	adds	r3, #28
 8014f30:	4618      	mov	r0, r3
 8014f32:	f004 f803 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	3304      	adds	r3, #4
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7f5 fb75 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7ff ff7c 	bl	8014e40 <_ZN14MockActualCallD1Ev>
}
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3708      	adds	r7, #8
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	08024cd8 	.word	0x08024cd8

08014f58 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
}
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f7ff ffd9 	bl	8014f18 <_ZN21MockCheckedActualCallD1Ev>
 8014f66:	212c      	movs	r1, #44	; 0x2c
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f7f2 fbf7 	bl	800775c <_ZdlPvj>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4618      	mov	r0, r3
 8014f72:	3708      	adds	r7, #8
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	683a      	ldr	r2, [r7, #0]
 8014f86:	611a      	str	r2, [r3, #16]
}
 8014f88:	bf00      	nop
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr

08014f94 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	691a      	ldr	r2, [r3, #16]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	691b      	ldr	r3, [r3, #16]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	330c      	adds	r3, #12
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	4610      	mov	r0, r2
 8014fac:	4798      	blx	r3
 8014fae:	4603      	mov	r3, r0
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3708      	adds	r7, #8
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}

08014fb8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	33c0      	adds	r3, #192	; 0xc0
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	4798      	blx	r3
 8014fce:	4603      	mov	r3, r0
 8014fd0:	f083 0301 	eor.w	r3, r3, #1
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d010      	beq.n	8014ffc <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	33ec      	adds	r3, #236	; 0xec
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	4798      	blx	r3
        reporter_->failTest(failure);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	691a      	ldr	r2, [r3, #16]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	691b      	ldr	r3, [r3, #16]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	3308      	adds	r3, #8
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	6839      	ldr	r1, [r7, #0]
 8014ff8:	4610      	mov	r0, r2
 8014ffa:	4798      	blx	r3
    }
}
 8014ffc:	bf00      	nop
 8014ffe:	3708      	adds	r7, #8
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8015004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015008:	b0bc      	sub	sp, #240	; 0xf0
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
 801500e:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801501c:	2b00      	cmp	r3, #0
 801501e:	f000 80f5 	beq.w	801520c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	339c      	adds	r3, #156	; 0x9c
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801502e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015032:	6839      	ldr	r1, [r7, #0]
 8015034:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8015036:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801503a:	4618      	mov	r0, r3
 801503c:	f006 fa6c 	bl	801b518 <_ZNK14MockNamedValue9getCopierEv>
 8015040:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8015044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015048:	2b00      	cmp	r3, #0
 801504a:	d013      	beq.n	8015074 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 801504c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	3308      	adds	r3, #8
 8015054:	681c      	ldr	r4, [r3, #0]
 8015056:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801505a:	691d      	ldr	r5, [r3, #16]
 801505c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015060:	4618      	mov	r0, r3
 8015062:	f006 fa29 	bl	801b4b8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8015066:	4603      	mov	r3, r0
 8015068:	461a      	mov	r2, r3
 801506a:	4629      	mov	r1, r5
 801506c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015070:	47a0      	blx	r4
 8015072:	e0c0      	b.n	80151f6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8015074:	2500      	movs	r5, #0
 8015076:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801507a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801507e:	4611      	mov	r1, r2
 8015080:	4618      	mov	r0, r3
 8015082:	f005 ff0c 	bl	801ae9e <_ZNK14MockNamedValue7getTypeEv>
 8015086:	2601      	movs	r6, #1
 8015088:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801508c:	4962      	ldr	r1, [pc, #392]	; (8015218 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801508e:	4618      	mov	r0, r3
 8015090:	f7f4 ff13 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8015094:	f04f 0801 	mov.w	r8, #1
 8015098:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801509c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80150a0:	4611      	mov	r1, r2
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7f5 facd 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d015      	beq.n	80150da <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80150ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80150b2:	f103 0408 	add.w	r4, r3, #8
 80150b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80150ba:	4958      	ldr	r1, [pc, #352]	; (801521c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 80150bc:	4618      	mov	r0, r3
 80150be:	f7f4 fefc 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80150c2:	2501      	movs	r5, #1
 80150c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80150c8:	4619      	mov	r1, r3
 80150ca:	4620      	mov	r0, r4
 80150cc:	f7f5 fab9 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80150d0:	4603      	mov	r3, r0
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d001      	beq.n	80150da <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80150d6:	2401      	movs	r4, #1
 80150d8:	e000      	b.n	80150dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80150da:	2400      	movs	r4, #0
 80150dc:	2d00      	cmp	r5, #0
 80150de:	d004      	beq.n	80150ea <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80150e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7f5 faa0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80150ea:	f1b8 0f00 	cmp.w	r8, #0
 80150ee:	d004      	beq.n	80150fa <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80150f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7f5 fa98 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80150fa:	2e00      	cmp	r6, #0
 80150fc:	d004      	beq.n	8015108 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80150fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015102:	4618      	mov	r0, r3
 8015104:	f7f5 fa91 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8015108:	2c00      	cmp	r4, #0
 801510a:	d018      	beq.n	801513e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 801510c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015110:	4618      	mov	r0, r3
 8015112:	f006 f959 	bl	801b3c8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8015116:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801511a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801511e:	4618      	mov	r0, r3
 8015120:	f006 f9e2 	bl	801b4e8 <_ZNK14MockNamedValue7getSizeEv>
 8015124:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8015128:	4b3d      	ldr	r3, [pc, #244]	; (8015220 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015130:	6910      	ldr	r0, [r2, #16]
 8015132:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015136:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801513a:	4798      	blx	r3
 801513c:	e05b      	b.n	80151f6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801513e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015142:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015146:	4611      	mov	r1, r2
 8015148:	4618      	mov	r0, r3
 801514a:	f005 fe99 	bl	801ae80 <_ZNK14MockNamedValue7getNameEv>
 801514e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015152:	4934      	ldr	r1, [pc, #208]	; (8015224 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8015154:	4618      	mov	r0, r3
 8015156:	f7f4 feb0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801515a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801515e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015162:	4611      	mov	r1, r2
 8015164:	4618      	mov	r0, r3
 8015166:	f7f5 fab1 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 801516a:	4603      	mov	r3, r0
 801516c:	461c      	mov	r4, r3
 801516e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015172:	4618      	mov	r0, r3
 8015174:	f7f5 fa59 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8015178:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801517c:	4618      	mov	r0, r3
 801517e:	f7f5 fa54 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8015182:	2c00      	cmp	r4, #0
 8015184:	d037      	beq.n	80151f6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	339c      	adds	r3, #156	; 0x9c
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015192:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8015196:	6839      	ldr	r1, [r7, #0]
 8015198:	4798      	blx	r3
 801519a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801519e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80151a2:	4611      	mov	r1, r2
 80151a4:	4618      	mov	r0, r3
 80151a6:	f005 fe7a 	bl	801ae9e <_ZNK14MockNamedValue7getTypeEv>
 80151aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80151ae:	4618      	mov	r0, r3
 80151b0:	f005 fbd2 	bl	801a958 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	33cc      	adds	r3, #204	; 0xcc
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	4798      	blx	r3
 80151c0:	4601      	mov	r1, r0
 80151c2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80151c6:	f107 030c 	add.w	r3, r7, #12
 80151ca:	4618      	mov	r0, r3
 80151cc:	f005 faee 	bl	801a7ac <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	33dc      	adds	r3, #220	; 0xdc
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f107 020c 	add.w	r2, r7, #12
 80151dc:	4611      	mov	r1, r2
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80151e2:	f107 030c 	add.w	r3, r7, #12
 80151e6:	4618      	mov	r0, r3
 80151e8:	f001 ffe2 	bl	80171b0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80151ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7f5 fa1a 	bl	800a62a <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80151f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80151fa:	4618      	mov	r0, r3
 80151fc:	f005 fbac 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015200:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015204:	695b      	ldr	r3, [r3, #20]
 8015206:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801520a:	e705      	b.n	8015018 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 801520c:	bf00      	nop
 801520e:	37f0      	adds	r7, #240	; 0xf0
 8015210:	46bd      	mov	sp, r7
 8015212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015216:	bf00      	nop
 8015218:	08022a94 	.word	0x08022a94
 801521c:	08022aa0 	.word	0x08022aa0
 8015220:	200000d0 	.word	0x200000d0
 8015224:	08022a90 	.word	0x08022a90

08015228 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	331c      	adds	r3, #28
 8015234:	4618      	mov	r0, r3
 8015236:	f004 f9bb 	bl	80195b0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801523a:	4602      	mov	r2, r0
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	699b      	ldr	r3, [r3, #24]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d00f      	beq.n	8015268 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	33d4      	adds	r3, #212	; 0xd4
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	687a      	ldr	r2, [r7, #4]
 8015252:	6992      	ldr	r2, [r2, #24]
 8015254:	4611      	mov	r1, r2
 8015256:	6878      	ldr	r0, [r7, #4]
 8015258:	4798      	blx	r3
        callHasSucceeded();
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	33d0      	adds	r3, #208	; 0xd0
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	6878      	ldr	r0, [r7, #4]
 8015264:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8015266:	e00f      	b.n	8015288 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	331c      	adds	r3, #28
 801526c:	4618      	mov	r0, r3
 801526e:	f004 f9cc 	bl	801960a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8015272:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d006      	beq.n	8015288 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	33d4      	adds	r3, #212	; 0xd4
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	68f9      	ldr	r1, [r7, #12]
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	4798      	blx	r3
}
 8015288:	bf00      	nop
 801528a:	3710      	adds	r7, #16
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	33ec      	adds	r3, #236	; 0xec
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2102      	movs	r1, #2
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	4798      	blx	r3
}
 80152a6:	bf00      	nop
 80152a8:	3708      	adds	r7, #8
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b082      	sub	sp, #8
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	699b      	ldr	r3, [r3, #24]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d00b      	beq.n	80152d6 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	699a      	ldr	r2, [r3, #24]
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	699b      	ldr	r3, [r3, #24]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	33ec      	adds	r3, #236	; 0xec
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	4610      	mov	r0, r2
 80152ce:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2200      	movs	r2, #0
 80152d4:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	331c      	adds	r3, #28
 80152da:	4618      	mov	r0, r3
 80152dc:	f004 f85c 	bl	8019398 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80152e0:	bf00      	nop
 80152e2:	3708      	adds	r7, #8
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80152e8:	b590      	push	{r4, r7, lr}
 80152ea:	b091      	sub	sp, #68	; 0x44
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
    setName(name);
 80152f2:	6839      	ldr	r1, [r7, #0]
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff fdb3 	bl	8014e60 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	33ec      	adds	r3, #236	; 0xec
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	2100      	movs	r1, #0
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	331c      	adds	r3, #28
 801530c:	6839      	ldr	r1, [r7, #0]
 801530e:	4618      	mov	r0, r3
 8015310:	f003 ffec 	bl	80192ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	331c      	adds	r3, #28
 8015318:	4618      	mov	r0, r3
 801531a:	f003 fe7c 	bl	8019016 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d01d      	beq.n	8015360 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	33cc      	adds	r3, #204	; 0xcc
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	4798      	blx	r3
 8015330:	4601      	mov	r1, r0
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015336:	f107 000c 	add.w	r0, r7, #12
 801533a:	683a      	ldr	r2, [r7, #0]
 801533c:	f004 fe24 	bl	8019f88 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	33dc      	adds	r3, #220	; 0xdc
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	f107 020c 	add.w	r2, r7, #12
 801534c:	4611      	mov	r1, r2
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	4798      	blx	r3
        return *this;
 8015352:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015354:	f107 030c 	add.w	r3, r7, #12
 8015358:	4618      	mov	r0, r3
 801535a:	f001 ff4b 	bl	80171f4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801535e:	e006      	b.n	801536e <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	33d8      	adds	r3, #216	; 0xd8
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	4798      	blx	r3

    return *this;
 801536c:	687c      	ldr	r4, [r7, #4]
 801536e:	4623      	mov	r3, r4
}
 8015370:	4618      	mov	r0, r3
 8015372:	3744      	adds	r7, #68	; 0x44
 8015374:	46bd      	mov	sp, r7
 8015376:	bd90      	pop	{r4, r7, pc}

08015378 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8015378:	b480      	push	{r7}
 801537a:	b083      	sub	sp, #12
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
 8015380:	6039      	str	r1, [r7, #0]
    return *this;
 8015382:	687b      	ldr	r3, [r7, #4]
}
 8015384:	4618      	mov	r0, r3
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8015390:	b590      	push	{r4, r7, lr}
 8015392:	b097      	sub	sp, #92	; 0x5c
 8015394:	af02      	add	r7, sp, #8
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	33c0      	adds	r3, #192	; 0xc0
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	4798      	blx	r3
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d164      	bne.n	8015476 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	33ec      	adds	r3, #236	; 0xec
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2100      	movs	r1, #0
 80153b6:	6878      	ldr	r0, [r7, #4]
 80153b8:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	33e8      	adds	r3, #232	; 0xe8
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	331c      	adds	r3, #28
 80153ca:	6839      	ldr	r1, [r7, #0]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f004 f86b 	bl	80194a8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	331c      	adds	r3, #28
 80153d6:	4618      	mov	r0, r3
 80153d8:	f003 fe1d 	bl	8019016 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80153dc:	4603      	mov	r3, r0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d02b      	beq.n	801543a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	33cc      	adds	r3, #204	; 0xcc
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	4798      	blx	r3
 80153ee:	4604      	mov	r4, r0
 80153f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80153f4:	6879      	ldr	r1, [r7, #4]
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7ff fd41 	bl	8014e7e <_ZNK21MockCheckedActualCall7getNameEv>
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015400:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015404:	f107 000c 	add.w	r0, r7, #12
 8015408:	9300      	str	r3, [sp, #0]
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	4621      	mov	r1, r4
 801540e:	f004 fe7f 	bl	801a110 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015412:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015416:	4618      	mov	r0, r3
 8015418:	f7f5 f907 	bl	800a62a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	33dc      	adds	r3, #220	; 0xdc
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	f107 020c 	add.w	r2, r7, #12
 8015428:	4611      	mov	r1, r2
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801542e:	f107 030c 	add.w	r3, r7, #12
 8015432:	4618      	mov	r0, r3
 8015434:	f001 ff00 	bl	8017238 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8015438:	e01e      	b.n	8015478 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f103 041c 	add.w	r4, r3, #28
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	335c      	adds	r3, #92	; 0x5c
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801544c:	6839      	ldr	r1, [r7, #0]
 801544e:	4610      	mov	r0, r2
 8015450:	4798      	blx	r3
 8015452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015456:	4619      	mov	r1, r3
 8015458:	4620      	mov	r0, r4
 801545a:	f004 f9b8 	bl	80197ce <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801545e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015462:	4618      	mov	r0, r3
 8015464:	f7f5 f8e1 	bl	800a62a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	33d8      	adds	r3, #216	; 0xd8
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	4798      	blx	r3
 8015474:	e000      	b.n	8015478 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8015476:	bf00      	nop
}
 8015478:	3754      	adds	r7, #84	; 0x54
 801547a:	46bd      	mov	sp, r7
 801547c:	bd90      	pop	{r4, r7, pc}

0801547e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801547e:	b590      	push	{r4, r7, lr}
 8015480:	b097      	sub	sp, #92	; 0x5c
 8015482:	af02      	add	r7, sp, #8
 8015484:	6078      	str	r0, [r7, #4]
 8015486:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	33c0      	adds	r3, #192	; 0xc0
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	4798      	blx	r3
 8015494:	4603      	mov	r3, r0
 8015496:	2b00      	cmp	r3, #0
 8015498:	d164      	bne.n	8015564 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	33ec      	adds	r3, #236	; 0xec
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2100      	movs	r1, #0
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	33e8      	adds	r3, #232	; 0xe8
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	331c      	adds	r3, #28
 80154b8:	6839      	ldr	r1, [r7, #0]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f004 f820 	bl	8019500 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	331c      	adds	r3, #28
 80154c4:	4618      	mov	r0, r3
 80154c6:	f003 fda6 	bl	8019016 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80154ca:	4603      	mov	r3, r0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d02b      	beq.n	8015528 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	33cc      	adds	r3, #204	; 0xcc
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	4798      	blx	r3
 80154dc:	4604      	mov	r4, r0
 80154de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80154e2:	6879      	ldr	r1, [r7, #4]
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7ff fcca 	bl	8014e7e <_ZNK21MockCheckedActualCall7getNameEv>
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80154f2:	f107 000c 	add.w	r0, r7, #12
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	4621      	mov	r1, r4
 80154fc:	f004 ff6a 	bl	801a3d4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015504:	4618      	mov	r0, r3
 8015506:	f7f5 f890 	bl	800a62a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	33dc      	adds	r3, #220	; 0xdc
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	f107 020c 	add.w	r2, r7, #12
 8015516:	4611      	mov	r1, r2
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801551c:	f107 030c 	add.w	r3, r7, #12
 8015520:	4618      	mov	r0, r3
 8015522:	f001 feab 	bl	801727c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8015526:	e01e      	b.n	8015566 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f103 041c 	add.w	r4, r3, #28
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	335c      	adds	r3, #92	; 0x5c
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	4610      	mov	r0, r2
 801553e:	4798      	blx	r3
 8015540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015544:	4619      	mov	r1, r3
 8015546:	4620      	mov	r0, r4
 8015548:	f004 f95e 	bl	8019808 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 801554c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015550:	4618      	mov	r0, r3
 8015552:	f7f5 f86a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	33d8      	adds	r3, #216	; 0xd8
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	4798      	blx	r3
 8015562:	e000      	b.n	8015566 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8015564:	bf00      	nop
}
 8015566:	3754      	adds	r7, #84	; 0x54
 8015568:	46bd      	mov	sp, r7
 801556a:	bd90      	pop	{r4, r7, pc}

0801556c <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 801556c:	b590      	push	{r4, r7, lr}
 801556e:	b093      	sub	sp, #76	; 0x4c
 8015570:	af00      	add	r7, sp, #0
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	4613      	mov	r3, r2
 8015578:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801557a:	f107 0310 	add.w	r3, r7, #16
 801557e:	68b9      	ldr	r1, [r7, #8]
 8015580:	4618      	mov	r0, r3
 8015582:	f005 f9bf 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015586:	79fa      	ldrb	r2, [r7, #7]
 8015588:	f107 0310 	add.w	r3, r7, #16
 801558c:	4611      	mov	r1, r2
 801558e:	4618      	mov	r0, r3
 8015590:	f005 fa0a 	bl	801a9a8 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	33e0      	adds	r3, #224	; 0xe0
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	f107 0210 	add.w	r2, r7, #16
 80155a0:	4611      	mov	r1, r2
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	4798      	blx	r3
    return *this;
 80155a6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80155a8:	f107 0310 	add.w	r3, r7, #16
 80155ac:	4618      	mov	r0, r3
 80155ae:	f005 f9d3 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 80155b2:	4623      	mov	r3, r4
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	374c      	adds	r7, #76	; 0x4c
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd90      	pop	{r4, r7, pc}

080155bc <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80155bc:	b590      	push	{r4, r7, lr}
 80155be:	b093      	sub	sp, #76	; 0x4c
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80155c8:	f107 0310 	add.w	r3, r7, #16
 80155cc:	68b9      	ldr	r1, [r7, #8]
 80155ce:	4618      	mov	r0, r3
 80155d0:	f005 f998 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80155d4:	f107 0310 	add.w	r3, r7, #16
 80155d8:	6879      	ldr	r1, [r7, #4]
 80155da:	4618      	mov	r0, r3
 80155dc:	f005 fa08 	bl	801a9f0 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	33e0      	adds	r3, #224	; 0xe0
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f107 0210 	add.w	r2, r7, #16
 80155ec:	4611      	mov	r1, r2
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	4798      	blx	r3
    return *this;
 80155f2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80155f4:	f107 0310 	add.w	r3, r7, #16
 80155f8:	4618      	mov	r0, r3
 80155fa:	f005 f9ad 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 80155fe:	4623      	mov	r3, r4
}
 8015600:	4618      	mov	r0, r3
 8015602:	374c      	adds	r7, #76	; 0x4c
 8015604:	46bd      	mov	sp, r7
 8015606:	bd90      	pop	{r4, r7, pc}

08015608 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8015608:	b590      	push	{r4, r7, lr}
 801560a:	b093      	sub	sp, #76	; 0x4c
 801560c:	af00      	add	r7, sp, #0
 801560e:	60f8      	str	r0, [r7, #12]
 8015610:	60b9      	str	r1, [r7, #8]
 8015612:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015614:	f107 0310 	add.w	r3, r7, #16
 8015618:	68b9      	ldr	r1, [r7, #8]
 801561a:	4618      	mov	r0, r3
 801561c:	f005 f972 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015620:	f107 0310 	add.w	r3, r7, #16
 8015624:	6879      	ldr	r1, [r7, #4]
 8015626:	4618      	mov	r0, r3
 8015628:	f005 fa04 	bl	801aa34 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	33e0      	adds	r3, #224	; 0xe0
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f107 0210 	add.w	r2, r7, #16
 8015638:	4611      	mov	r1, r2
 801563a:	68f8      	ldr	r0, [r7, #12]
 801563c:	4798      	blx	r3
    return *this;
 801563e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015640:	f107 0310 	add.w	r3, r7, #16
 8015644:	4618      	mov	r0, r3
 8015646:	f005 f987 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 801564a:	4623      	mov	r3, r4
}
 801564c:	4618      	mov	r0, r3
 801564e:	374c      	adds	r7, #76	; 0x4c
 8015650:	46bd      	mov	sp, r7
 8015652:	bd90      	pop	{r4, r7, pc}

08015654 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8015654:	b590      	push	{r4, r7, lr}
 8015656:	b093      	sub	sp, #76	; 0x4c
 8015658:	af00      	add	r7, sp, #0
 801565a:	60f8      	str	r0, [r7, #12]
 801565c:	60b9      	str	r1, [r7, #8]
 801565e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015660:	f107 0310 	add.w	r3, r7, #16
 8015664:	68b9      	ldr	r1, [r7, #8]
 8015666:	4618      	mov	r0, r3
 8015668:	f005 f94c 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801566c:	f107 0310 	add.w	r3, r7, #16
 8015670:	6879      	ldr	r1, [r7, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f005 fa22 	bl	801aabc <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	33e0      	adds	r3, #224	; 0xe0
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	f107 0210 	add.w	r2, r7, #16
 8015684:	4611      	mov	r1, r2
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	4798      	blx	r3
    return *this;
 801568a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801568c:	f107 0310 	add.w	r3, r7, #16
 8015690:	4618      	mov	r0, r3
 8015692:	f005 f961 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015696:	4623      	mov	r3, r4
}
 8015698:	4618      	mov	r0, r3
 801569a:	374c      	adds	r7, #76	; 0x4c
 801569c:	46bd      	mov	sp, r7
 801569e:	bd90      	pop	{r4, r7, pc}

080156a0 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80156a0:	b590      	push	{r4, r7, lr}
 80156a2:	b093      	sub	sp, #76	; 0x4c
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	60f8      	str	r0, [r7, #12]
 80156a8:	60b9      	str	r1, [r7, #8]
 80156aa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80156ac:	f107 0310 	add.w	r3, r7, #16
 80156b0:	68b9      	ldr	r1, [r7, #8]
 80156b2:	4618      	mov	r0, r3
 80156b4:	f005 f926 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80156b8:	f107 0310 	add.w	r3, r7, #16
 80156bc:	6879      	ldr	r1, [r7, #4]
 80156be:	4618      	mov	r0, r3
 80156c0:	f005 f9da 	bl	801aa78 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	33e0      	adds	r3, #224	; 0xe0
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	f107 0210 	add.w	r2, r7, #16
 80156d0:	4611      	mov	r1, r2
 80156d2:	68f8      	ldr	r0, [r7, #12]
 80156d4:	4798      	blx	r3
    return *this;
 80156d6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80156d8:	f107 0310 	add.w	r3, r7, #16
 80156dc:	4618      	mov	r0, r3
 80156de:	f005 f93b 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 80156e2:	4623      	mov	r3, r4
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	374c      	adds	r7, #76	; 0x4c
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd90      	pop	{r4, r7, pc}

080156ec <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80156ec:	b5b0      	push	{r4, r5, r7, lr}
 80156ee:	b086      	sub	sp, #24
 80156f0:	af02      	add	r7, sp, #8
 80156f2:	60f8      	str	r0, [r7, #12]
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	4639      	mov	r1, r7
 80156f8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80156fc:	f7fb ffc0 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8015700:	4604      	mov	r4, r0
 8015702:	6823      	ldr	r3, [r4, #0]
 8015704:	3368      	adds	r3, #104	; 0x68
 8015706:	681d      	ldr	r5, [r3, #0]
 8015708:	f7fb ffca 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801570c:	4603      	mov	r3, r0
 801570e:	9300      	str	r3, [sp, #0]
 8015710:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8015714:	4a04      	ldr	r2, [pc, #16]	; (8015728 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8015716:	4905      	ldr	r1, [pc, #20]	; (801572c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8015718:	4620      	mov	r0, r4
 801571a:	47a8      	blx	r5
    return *this;
 801571c:	68fb      	ldr	r3, [r7, #12]
}
 801571e:	4618      	mov	r0, r3
 8015720:	3710      	adds	r7, #16
 8015722:	46bd      	mov	sp, r7
 8015724:	bdb0      	pop	{r4, r5, r7, pc}
 8015726:	bf00      	nop
 8015728:	08022aa8 	.word	0x08022aa8
 801572c:	08022ac4 	.word	0x08022ac4

08015730 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8015730:	b5b0      	push	{r4, r5, r7, lr}
 8015732:	b086      	sub	sp, #24
 8015734:	af02      	add	r7, sp, #8
 8015736:	60f8      	str	r0, [r7, #12]
 8015738:	60b9      	str	r1, [r7, #8]
 801573a:	4639      	mov	r1, r7
 801573c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8015740:	f7fb ff9e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8015744:	4604      	mov	r4, r0
 8015746:	6823      	ldr	r3, [r4, #0]
 8015748:	3368      	adds	r3, #104	; 0x68
 801574a:	681d      	ldr	r5, [r3, #0]
 801574c:	f7fb ffa8 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015750:	4603      	mov	r3, r0
 8015752:	9300      	str	r3, [sp, #0]
 8015754:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015758:	4a04      	ldr	r2, [pc, #16]	; (801576c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801575a:	4905      	ldr	r1, [pc, #20]	; (8015770 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801575c:	4620      	mov	r0, r4
 801575e:	47a8      	blx	r5
    return *this;
 8015760:	68fb      	ldr	r3, [r7, #12]
}
 8015762:	4618      	mov	r0, r3
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bdb0      	pop	{r4, r5, r7, pc}
 801576a:	bf00      	nop
 801576c:	08022aa8 	.word	0x08022aa8
 8015770:	08022af0 	.word	0x08022af0

08015774 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8015774:	b590      	push	{r4, r7, lr}
 8015776:	b093      	sub	sp, #76	; 0x4c
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8015782:	f107 0310 	add.w	r3, r7, #16
 8015786:	68b9      	ldr	r1, [r7, #8]
 8015788:	4618      	mov	r0, r3
 801578a:	f005 f8bb 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801578e:	f107 0310 	add.w	r3, r7, #16
 8015792:	ed97 0b00 	vldr	d0, [r7]
 8015796:	4618      	mov	r0, r3
 8015798:	f005 f9ee 	bl	801ab78 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	33e0      	adds	r3, #224	; 0xe0
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f107 0210 	add.w	r2, r7, #16
 80157a8:	4611      	mov	r1, r2
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	4798      	blx	r3
    return *this;
 80157ae:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80157b0:	f107 0310 	add.w	r3, r7, #16
 80157b4:	4618      	mov	r0, r3
 80157b6:	f005 f8cf 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 80157ba:	4623      	mov	r3, r4
}
 80157bc:	4618      	mov	r0, r3
 80157be:	374c      	adds	r7, #76	; 0x4c
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd90      	pop	{r4, r7, pc}

080157c4 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 80157c4:	b590      	push	{r4, r7, lr}
 80157c6:	b093      	sub	sp, #76	; 0x4c
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80157d0:	f107 0310 	add.w	r3, r7, #16
 80157d4:	68b9      	ldr	r1, [r7, #8]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f005 f894 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80157dc:	f107 0310 	add.w	r3, r7, #16
 80157e0:	6879      	ldr	r1, [r7, #4]
 80157e2:	4618      	mov	r0, r3
 80157e4:	f005 fa72 	bl	801accc <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	33e0      	adds	r3, #224	; 0xe0
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f107 0210 	add.w	r2, r7, #16
 80157f4:	4611      	mov	r1, r2
 80157f6:	68f8      	ldr	r0, [r7, #12]
 80157f8:	4798      	blx	r3
    return *this;
 80157fa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80157fc:	f107 0310 	add.w	r3, r7, #16
 8015800:	4618      	mov	r0, r3
 8015802:	f005 f8a9 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015806:	4623      	mov	r3, r4
}
 8015808:	4618      	mov	r0, r3
 801580a:	374c      	adds	r7, #76	; 0x4c
 801580c:	46bd      	mov	sp, r7
 801580e:	bd90      	pop	{r4, r7, pc}

08015810 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8015810:	b590      	push	{r4, r7, lr}
 8015812:	b093      	sub	sp, #76	; 0x4c
 8015814:	af00      	add	r7, sp, #0
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801581c:	f107 0310 	add.w	r3, r7, #16
 8015820:	68b9      	ldr	r1, [r7, #8]
 8015822:	4618      	mov	r0, r3
 8015824:	f005 f86e 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015828:	f107 0310 	add.w	r3, r7, #16
 801582c:	6879      	ldr	r1, [r7, #4]
 801582e:	4618      	mov	r0, r3
 8015830:	f005 f9e6 	bl	801ac00 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	33e0      	adds	r3, #224	; 0xe0
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f107 0210 	add.w	r2, r7, #16
 8015840:	4611      	mov	r1, r2
 8015842:	68f8      	ldr	r0, [r7, #12]
 8015844:	4798      	blx	r3
    return *this;
 8015846:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015848:	f107 0310 	add.w	r3, r7, #16
 801584c:	4618      	mov	r0, r3
 801584e:	f005 f883 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015852:	4623      	mov	r3, r4
}
 8015854:	4618      	mov	r0, r3
 8015856:	374c      	adds	r7, #76	; 0x4c
 8015858:	46bd      	mov	sp, r7
 801585a:	bd90      	pop	{r4, r7, pc}

0801585c <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801585c:	b590      	push	{r4, r7, lr}
 801585e:	b093      	sub	sp, #76	; 0x4c
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015868:	f107 0310 	add.w	r3, r7, #16
 801586c:	68b9      	ldr	r1, [r7, #8]
 801586e:	4618      	mov	r0, r3
 8015870:	f005 f848 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015874:	f107 0310 	add.w	r3, r7, #16
 8015878:	6879      	ldr	r1, [r7, #4]
 801587a:	4618      	mov	r0, r3
 801587c:	f005 f9e2 	bl	801ac44 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	33e0      	adds	r3, #224	; 0xe0
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	f107 0210 	add.w	r2, r7, #16
 801588c:	4611      	mov	r1, r2
 801588e:	68f8      	ldr	r0, [r7, #12]
 8015890:	4798      	blx	r3
    return *this;
 8015892:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015894:	f107 0310 	add.w	r3, r7, #16
 8015898:	4618      	mov	r0, r3
 801589a:	f005 f85d 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 801589e:	4623      	mov	r3, r4
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	374c      	adds	r7, #76	; 0x4c
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd90      	pop	{r4, r7, pc}

080158a8 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80158a8:	b590      	push	{r4, r7, lr}
 80158aa:	b093      	sub	sp, #76	; 0x4c
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80158b4:	f107 0310 	add.w	r3, r7, #16
 80158b8:	68b9      	ldr	r1, [r7, #8]
 80158ba:	4618      	mov	r0, r3
 80158bc:	f005 f822 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80158c0:	f107 0310 	add.w	r3, r7, #16
 80158c4:	6879      	ldr	r1, [r7, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f005 f9de 	bl	801ac88 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	33e0      	adds	r3, #224	; 0xe0
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	f107 0210 	add.w	r2, r7, #16
 80158d8:	4611      	mov	r1, r2
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	4798      	blx	r3
    return *this;
 80158de:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80158e0:	f107 0310 	add.w	r3, r7, #16
 80158e4:	4618      	mov	r0, r3
 80158e6:	f005 f837 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 80158ea:	4623      	mov	r3, r4
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	374c      	adds	r7, #76	; 0x4c
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd90      	pop	{r4, r7, pc}

080158f4 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80158f4:	b590      	push	{r4, r7, lr}
 80158f6:	b093      	sub	sp, #76	; 0x4c
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
 8015900:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8015902:	f107 0310 	add.w	r3, r7, #16
 8015906:	68b9      	ldr	r1, [r7, #8]
 8015908:	4618      	mov	r0, r3
 801590a:	f004 fffb 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801590e:	f107 0310 	add.w	r3, r7, #16
 8015912:	683a      	ldr	r2, [r7, #0]
 8015914:	6879      	ldr	r1, [r7, #4]
 8015916:	4618      	mov	r0, r3
 8015918:	f005 f9fa 	bl	801ad10 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	33e0      	adds	r3, #224	; 0xe0
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f107 0210 	add.w	r2, r7, #16
 8015928:	4611      	mov	r1, r2
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	4798      	blx	r3
    return *this;
 801592e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015930:	f107 0310 	add.w	r3, r7, #16
 8015934:	4618      	mov	r0, r3
 8015936:	f005 f80f 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 801593a:	4623      	mov	r3, r4
}
 801593c:	4618      	mov	r0, r3
 801593e:	374c      	adds	r7, #76	; 0x4c
 8015940:	46bd      	mov	sp, r7
 8015942:	bd90      	pop	{r4, r7, pc}

08015944 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8015944:	b590      	push	{r4, r7, lr}
 8015946:	b0a1      	sub	sp, #132	; 0x84
 8015948:	af00      	add	r7, sp, #0
 801594a:	60f8      	str	r0, [r7, #12]
 801594c:	60b9      	str	r1, [r7, #8]
 801594e:	607a      	str	r2, [r7, #4]
 8015950:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8015952:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015956:	6879      	ldr	r1, [r7, #4]
 8015958:	4618      	mov	r0, r3
 801595a:	f004 ffd3 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801595e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015962:	683a      	ldr	r2, [r7, #0]
 8015964:	68b9      	ldr	r1, [r7, #8]
 8015966:	4618      	mov	r0, r3
 8015968:	f005 f9f8 	bl	801ad5c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 801596c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015970:	4618      	mov	r0, r3
 8015972:	f005 fdc5 	bl	801b500 <_ZNK14MockNamedValue13getComparatorEv>
 8015976:	4603      	mov	r3, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	bf0c      	ite	eq
 801597c:	2301      	moveq	r3, #1
 801597e:	2300      	movne	r3, #0
 8015980:	b2db      	uxtb	r3, r3
 8015982:	2b00      	cmp	r3, #0
 8015984:	d01c      	beq.n	80159c0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	33cc      	adds	r3, #204	; 0xcc
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	4798      	blx	r3
 8015992:	4601      	mov	r1, r0
 8015994:	f107 0314 	add.w	r3, r7, #20
 8015998:	68ba      	ldr	r2, [r7, #8]
 801599a:	4618      	mov	r0, r3
 801599c:	f004 fed6 	bl	801a74c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	33dc      	adds	r3, #220	; 0xdc
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	f107 0214 	add.w	r2, r7, #20
 80159ac:	4611      	mov	r1, r2
 80159ae:	68f8      	ldr	r0, [r7, #12]
 80159b0:	4798      	blx	r3
        return *this;
 80159b2:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80159b4:	f107 0314 	add.w	r3, r7, #20
 80159b8:	4618      	mov	r0, r3
 80159ba:	f001 fc81 	bl	80172c0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80159be:	e009      	b.n	80159d4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	33e0      	adds	r3, #224	; 0xe0
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80159cc:	4611      	mov	r1, r2
 80159ce:	68f8      	ldr	r0, [r7, #12]
 80159d0:	4798      	blx	r3
    return *this;
 80159d2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80159d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80159d8:	4618      	mov	r0, r3
 80159da:	f004 ffbd 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 80159de:	4623      	mov	r3, r4
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3784      	adds	r7, #132	; 0x84
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd90      	pop	{r4, r7, pc}

080159e8 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80159e8:	b590      	push	{r4, r7, lr}
 80159ea:	b095      	sub	sp, #84	; 0x54
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	33f0      	adds	r3, #240	; 0xf0
 80159fa:	681c      	ldr	r4, [r3, #0]
 80159fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a00:	4917      	ldr	r1, [pc, #92]	; (8015a60 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f4 fa59 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8015a08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	68b9      	ldr	r1, [r7, #8]
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	47a0      	blx	r4
 8015a14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f4 fe06 	bl	800a62a <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8015a1e:	f107 0310 	add.w	r3, r7, #16
 8015a22:	68b9      	ldr	r1, [r7, #8]
 8015a24:	4618      	mov	r0, r3
 8015a26:	f004 ff6d 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8015a2a:	f107 0310 	add.w	r3, r7, #16
 8015a2e:	6879      	ldr	r1, [r7, #4]
 8015a30:	4618      	mov	r0, r3
 8015a32:	f005 f8e5 	bl	801ac00 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	33e4      	adds	r3, #228	; 0xe4
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	f107 0210 	add.w	r2, r7, #16
 8015a42:	4611      	mov	r1, r2
 8015a44:	68f8      	ldr	r0, [r7, #12]
 8015a46:	4798      	blx	r3

    return *this;
 8015a48:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8015a4a:	f107 0310 	add.w	r3, r7, #16
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f004 ff82 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015a54:	4623      	mov	r3, r4
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3754      	adds	r7, #84	; 0x54
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd90      	pop	{r4, r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	08022aa0 	.word	0x08022aa0

08015a64 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8015a64:	b590      	push	{r4, r7, lr}
 8015a66:	b093      	sub	sp, #76	; 0x4c
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	60f8      	str	r0, [r7, #12]
 8015a6c:	60b9      	str	r1, [r7, #8]
 8015a6e:	607a      	str	r2, [r7, #4]
 8015a70:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	33f0      	adds	r3, #240	; 0xf0
 8015a78:	681c      	ldr	r4, [r3, #0]
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	68ba      	ldr	r2, [r7, #8]
 8015a7e:	6879      	ldr	r1, [r7, #4]
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8015a84:	f107 0310 	add.w	r3, r7, #16
 8015a88:	6879      	ldr	r1, [r7, #4]
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f004 ff3a 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8015a90:	f107 0310 	add.w	r3, r7, #16
 8015a94:	683a      	ldr	r2, [r7, #0]
 8015a96:	68b9      	ldr	r1, [r7, #8]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f005 f95f 	bl	801ad5c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	33e4      	adds	r3, #228	; 0xe4
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	f107 0210 	add.w	r2, r7, #16
 8015aaa:	4611      	mov	r1, r2
 8015aac:	68f8      	ldr	r0, [r7, #12]
 8015aae:	4798      	blx	r3

    return *this;
 8015ab0:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8015ab2:	f107 0310 	add.w	r3, r7, #16
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f004 ff4e 	bl	801a958 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015abc:	4623      	mov	r3, r4
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	374c      	adds	r7, #76	; 0x4c
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd90      	pop	{r4, r7, pc}

08015ac6 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8015ac6:	b480      	push	{r7}
 8015ac8:	b083      	sub	sp, #12
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	7d1b      	ldrb	r3, [r3, #20]
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	bf0c      	ite	eq
 8015ad6:	2301      	moveq	r3, #1
 8015ad8:	2300      	movne	r3, #0
 8015ada:	b2db      	uxtb	r3, r3
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	370c      	adds	r7, #12
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae6:	4770      	bx	lr

08015ae8 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b083      	sub	sp, #12
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	7d1b      	ldrb	r3, [r3, #20]
 8015af4:	2b01      	cmp	r3, #1
 8015af6:	bf0c      	ite	eq
 8015af8:	2301      	moveq	r3, #1
 8015afa:	2300      	movne	r3, #0
 8015afc:	b2db      	uxtb	r3, r3
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	370c      	adds	r7, #12
 8015b02:	46bd      	mov	sp, r7
 8015b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b08:	4770      	bx	lr
	...

08015b0c <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8015b0c:	b5b0      	push	{r4, r5, r7, lr}
 8015b0e:	b096      	sub	sp, #88	; 0x58
 8015b10:	af02      	add	r7, sp, #8
 8015b12:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	7d5b      	ldrb	r3, [r3, #21]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	f040 80bc 	bne.w	8015c96 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2201      	movs	r2, #1
 8015b22:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	7d1b      	ldrb	r3, [r3, #20]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d014      	beq.n	8015b56 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	7d1b      	ldrb	r3, [r3, #20]
 8015b30:	2b02      	cmp	r3, #2
 8015b32:	d10a      	bne.n	8015b4a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	6998      	ldr	r0, [r3, #24]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	699b      	ldr	r3, [r3, #24]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	33d8      	adds	r3, #216	; 0xd8
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	68d2      	ldr	r2, [r2, #12]
 8015b46:	4611      	mov	r1, r2
 8015b48:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	331c      	adds	r3, #28
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f003 fe07 	bl	8019762 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8015b54:	e0a0      	b.n	8015c98 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	331c      	adds	r3, #28
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f003 fac3 	bl	80190e6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8015b60:	4603      	mov	r3, r0
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00f      	beq.n	8015b86 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8015b66:	f7fb fd8b 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	6823      	ldr	r3, [r4, #0]
 8015b6e:	3368      	adds	r3, #104	; 0x68
 8015b70:	681d      	ldr	r5, [r3, #0]
 8015b72:	f7fb fd95 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015b76:	4603      	mov	r3, r0
 8015b78:	9300      	str	r3, [sp, #0]
 8015b7a:	f240 1385 	movw	r3, #389	; 0x185
 8015b7e:	4a48      	ldr	r2, [pc, #288]	; (8015ca0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8015b80:	4948      	ldr	r1, [pc, #288]	; (8015ca4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8015b82:	4620      	mov	r0, r4
 8015b84:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	331c      	adds	r3, #28
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f003 fd5f 	bl	801964e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8015b90:	4602      	mov	r2, r0
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	699b      	ldr	r3, [r3, #24]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d01f      	beq.n	8015bde <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	699a      	ldr	r2, [r3, #24]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	699b      	ldr	r3, [r3, #24]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	33e4      	adds	r3, #228	; 0xe4
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4610      	mov	r0, r2
 8015bae:	4798      	blx	r3
        callHasSucceeded();
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	33d0      	adds	r3, #208	; 0xd0
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	6998      	ldr	r0, [r3, #24]
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	699b      	ldr	r3, [r3, #24]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	33d8      	adds	r3, #216	; 0xd8
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	68d2      	ldr	r2, [r2, #12]
 8015bce:	4611      	mov	r1, r2
 8015bd0:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	331c      	adds	r3, #28
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f003 fdc3 	bl	8019762 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8015bdc:	e05c      	b.n	8015c98 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	331c      	adds	r3, #28
 8015be2:	4618      	mov	r0, r3
 8015be4:	f003 ffc4 	bl	8019b70 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d029      	beq.n	8015c42 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	33cc      	adds	r3, #204	; 0xcc
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	4798      	blx	r3
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015c00:	6879      	ldr	r1, [r7, #4]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ff f93b 	bl	8014e7e <_ZNK21MockCheckedActualCall7getNameEv>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015c10:	f107 000c 	add.w	r0, r7, #12
 8015c14:	4621      	mov	r1, r4
 8015c16:	f004 fd21 	bl	801a65c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8015c1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7f4 fd03 	bl	800a62a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	33dc      	adds	r3, #220	; 0xdc
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f107 020c 	add.w	r2, r7, #12
 8015c30:	4611      	mov	r1, r2
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015c36:	f107 030c 	add.w	r3, r7, #12
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f001 fb62 	bl	8017304 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8015c40:	e02a      	b.n	8015c98 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	33cc      	adds	r3, #204	; 0xcc
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	4798      	blx	r3
 8015c4e:	4604      	mov	r4, r0
 8015c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c54:	6879      	ldr	r1, [r7, #4]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7ff f911 	bl	8014e7e <_ZNK21MockCheckedActualCall7getNameEv>
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015c64:	f107 000c 	add.w	r0, r7, #12
 8015c68:	4621      	mov	r1, r4
 8015c6a:	f004 fe05 	bl	801a878 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8015c6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7f4 fcd9 	bl	800a62a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	33dc      	adds	r3, #220	; 0xdc
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	f107 020c 	add.w	r2, r7, #12
 8015c84:	4611      	mov	r1, r2
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015c8a:	f107 030c 	add.w	r3, r7, #12
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f001 fb5a 	bl	8017348 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8015c94:	e000      	b.n	8015c98 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8015c96:	bf00      	nop
    }
}
 8015c98:	3750      	adds	r7, #80	; 0x50
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	08022aa8 	.word	0x08022aa8
 8015ca4:	08022b10 	.word	0x08022b10

08015ca8 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8015ca8:	b480      	push	{r7}
 8015caa:	b083      	sub	sp, #12
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	460b      	mov	r3, r1
 8015cb2:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	78fa      	ldrb	r2, [r7, #3]
 8015cb8:	751a      	strb	r2, [r3, #20]
}
 8015cba:	bf00      	nop
 8015cbc:	370c      	adds	r7, #12
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc4:	4770      	bx	lr
	...

08015cc8 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b084      	sub	sp, #16
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	33c4      	adds	r3, #196	; 0xc4
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	6838      	ldr	r0, [r7, #0]
 8015cdc:	4798      	blx	r3
    if (matchingExpectation_)
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	699b      	ldr	r3, [r3, #24]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00a      	beq.n	8015cfc <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	6999      	ldr	r1, [r3, #24]
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	699b      	ldr	r3, [r3, #24]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	3394      	adds	r3, #148	; 0x94
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	4610      	mov	r0, r2
 8015cf8:	4798      	blx	r3
 8015cfa:	e010      	b.n	8015d1e <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8015cfc:	f107 0308 	add.w	r3, r7, #8
 8015d00:	4909      	ldr	r1, [pc, #36]	; (8015d28 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7f4 f8d9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8015d08:	f107 0308 	add.w	r3, r7, #8
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f004 fdf8 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8015d14:	f107 0308 	add.w	r3, r7, #8
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7f4 fc86 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	3710      	adds	r7, #16
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	08022b8c 	.word	0x08022b8c

08015d2c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	460b      	mov	r3, r1
 8015d36:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	3350      	adds	r3, #80	; 0x50
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	6878      	ldr	r0, [r7, #4]
 8015d42:	4798      	blx	r3
 8015d44:	4603      	mov	r3, r0
 8015d46:	f083 0301 	eor.w	r3, r3, #1
 8015d4a:	b2db      	uxtb	r3, r3
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d001      	beq.n	8015d54 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8015d50:	78fb      	ldrb	r3, [r7, #3]
 8015d52:	e007      	b.n	8015d64 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	335c      	adds	r3, #92	; 0x5c
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	4798      	blx	r3
 8015d60:	4603      	mov	r3, r0
 8015d62:	bf00      	nop
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8015d6c:	b590      	push	{r4, r7, lr}
 8015d6e:	b091      	sub	sp, #68	; 0x44
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	3354      	adds	r3, #84	; 0x54
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f107 0208 	add.w	r2, r7, #8
 8015d80:	6879      	ldr	r1, [r7, #4]
 8015d82:	4610      	mov	r0, r2
 8015d84:	4798      	blx	r3
 8015d86:	f107 0308 	add.w	r3, r7, #8
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f005 f896 	bl	801aebc <_ZNK14MockNamedValue12getBoolValueEv>
 8015d90:	4603      	mov	r3, r0
 8015d92:	461c      	mov	r4, r3
 8015d94:	bf00      	nop
 8015d96:	f107 0308 	add.w	r3, r7, #8
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f004 fddc 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8015da0:	4623      	mov	r3, r4
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3744      	adds	r7, #68	; 0x44
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd90      	pop	{r4, r7, pc}

08015daa <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8015daa:	b580      	push	{r7, lr}
 8015dac:	b082      	sub	sp, #8
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	6078      	str	r0, [r7, #4]
 8015db2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	3350      	adds	r3, #80	; 0x50
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	4798      	blx	r3
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	f083 0301 	eor.w	r3, r3, #1
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d001      	beq.n	8015dd0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	e007      	b.n	8015de0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	3364      	adds	r3, #100	; 0x64
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	6878      	ldr	r0, [r7, #4]
 8015dda:	4798      	blx	r3
 8015ddc:	4603      	mov	r3, r0
 8015dde:	bf00      	nop
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3708      	adds	r7, #8
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8015de8:	b590      	push	{r4, r7, lr}
 8015dea:	b091      	sub	sp, #68	; 0x44
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	3354      	adds	r3, #84	; 0x54
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	f107 0208 	add.w	r2, r7, #8
 8015dfc:	6879      	ldr	r1, [r7, #4]
 8015dfe:	4610      	mov	r0, r2
 8015e00:	4798      	blx	r3
 8015e02:	f107 0308 	add.w	r3, r7, #8
 8015e06:	4618      	mov	r0, r3
 8015e08:	f005 f8d0 	bl	801afac <_ZNK14MockNamedValue11getIntValueEv>
 8015e0c:	4604      	mov	r4, r0
 8015e0e:	bf00      	nop
 8015e10:	f107 0308 	add.w	r3, r7, #8
 8015e14:	4618      	mov	r0, r3
 8015e16:	f004 fd9f 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8015e1a:	4623      	mov	r3, r4
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3744      	adds	r7, #68	; 0x44
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd90      	pop	{r4, r7, pc}

08015e24 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8015e24:	b590      	push	{r4, r7, lr}
 8015e26:	b091      	sub	sp, #68	; 0x44
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	3354      	adds	r3, #84	; 0x54
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	f107 0208 	add.w	r2, r7, #8
 8015e38:	6879      	ldr	r1, [r7, #4]
 8015e3a:	4610      	mov	r0, r2
 8015e3c:	4798      	blx	r3
 8015e3e:	f107 0308 	add.w	r3, r7, #8
 8015e42:	4618      	mov	r0, r3
 8015e44:	f005 f93c 	bl	801b0c0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8015e48:	4604      	mov	r4, r0
 8015e4a:	bf00      	nop
 8015e4c:	f107 0308 	add.w	r3, r7, #8
 8015e50:	4618      	mov	r0, r3
 8015e52:	f004 fd81 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8015e56:	4623      	mov	r3, r4
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3744      	adds	r7, #68	; 0x44
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd90      	pop	{r4, r7, pc}

08015e60 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b082      	sub	sp, #8
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	3350      	adds	r3, #80	; 0x50
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	4798      	blx	r3
 8015e76:	4603      	mov	r3, r0
 8015e78:	f083 0301 	eor.w	r3, r3, #1
 8015e7c:	b2db      	uxtb	r3, r3
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d001      	beq.n	8015e86 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	e007      	b.n	8015e96 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	3368      	adds	r3, #104	; 0x68
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	4798      	blx	r3
 8015e92:	4603      	mov	r3, r0
 8015e94:	bf00      	nop
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8015e9e:	b590      	push	{r4, r7, lr}
 8015ea0:	b091      	sub	sp, #68	; 0x44
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	3354      	adds	r3, #84	; 0x54
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	f107 0208 	add.w	r2, r7, #8
 8015eb2:	6879      	ldr	r1, [r7, #4]
 8015eb4:	4610      	mov	r0, r2
 8015eb6:	4798      	blx	r3
 8015eb8:	f107 0308 	add.w	r3, r7, #8
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f005 f89d 	bl	801affc <_ZNK14MockNamedValue15getLongIntValueEv>
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	bf00      	nop
 8015ec6:	f107 0308 	add.w	r3, r7, #8
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f004 fd44 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8015ed0:	4623      	mov	r3, r4
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3744      	adds	r7, #68	; 0x44
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd90      	pop	{r4, r7, pc}

08015eda <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8015eda:	b580      	push	{r7, lr}
 8015edc:	b082      	sub	sp, #8
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
 8015ee2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	3350      	adds	r3, #80	; 0x50
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	4798      	blx	r3
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	f083 0301 	eor.w	r3, r3, #1
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d001      	beq.n	8015f00 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	e007      	b.n	8015f10 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	3370      	adds	r3, #112	; 0x70
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	4798      	blx	r3
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	bf00      	nop
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3708      	adds	r7, #8
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8015f18:	b5b0      	push	{r4, r5, r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af02      	add	r7, sp, #8
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8015f22:	f7fb fbad 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8015f26:	4604      	mov	r4, r0
 8015f28:	6823      	ldr	r3, [r4, #0]
 8015f2a:	3368      	adds	r3, #104	; 0x68
 8015f2c:	681d      	ldr	r5, [r3, #0]
 8015f2e:	f7fb fbb7 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015f32:	4603      	mov	r3, r0
 8015f34:	9300      	str	r3, [sp, #0]
 8015f36:	f240 13fb 	movw	r3, #507	; 0x1fb
 8015f3a:	4a06      	ldr	r2, [pc, #24]	; (8015f54 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8015f3c:	4906      	ldr	r1, [pc, #24]	; (8015f58 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8015f3e:	4620      	mov	r0, r4
 8015f40:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8015f42:	2100      	movs	r1, #0
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7f1 fffb 	bl	8007f40 <_ZN18cpputest_ulonglongC1Ei>
}
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	3708      	adds	r7, #8
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bdb0      	pop	{r4, r5, r7, pc}
 8015f52:	bf00      	nop
 8015f54:	08022aa8 	.word	0x08022aa8
 8015f58:	08022ac4 	.word	0x08022ac4

08015f5c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8015f5c:	b5b0      	push	{r4, r5, r7, lr}
 8015f5e:	b086      	sub	sp, #24
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	4639      	mov	r1, r7
 8015f68:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8015f6c:	f7fb fb88 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8015f70:	4604      	mov	r4, r0
 8015f72:	6823      	ldr	r3, [r4, #0]
 8015f74:	3368      	adds	r3, #104	; 0x68
 8015f76:	681d      	ldr	r5, [r3, #0]
 8015f78:	f7fb fb92 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	f240 2301 	movw	r3, #513	; 0x201
 8015f84:	4a06      	ldr	r2, [pc, #24]	; (8015fa0 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8015f86:	4907      	ldr	r1, [pc, #28]	; (8015fa4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8015f88:	4620      	mov	r0, r4
 8015f8a:	47a8      	blx	r5
    return default_value;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	461a      	mov	r2, r3
 8015f90:	463b      	mov	r3, r7
 8015f92:	cb03      	ldmia	r3!, {r0, r1}
 8015f94:	6010      	str	r0, [r2, #0]
 8015f96:	6051      	str	r1, [r2, #4]
}
 8015f98:	68f8      	ldr	r0, [r7, #12]
 8015f9a:	3710      	adds	r7, #16
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8015fa0:	08022aa8 	.word	0x08022aa8
 8015fa4:	08022ac4 	.word	0x08022ac4

08015fa8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8015fa8:	b5b0      	push	{r4, r5, r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af02      	add	r7, sp, #8
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8015fb2:	f7fb fb65 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	6823      	ldr	r3, [r4, #0]
 8015fba:	3368      	adds	r3, #104	; 0x68
 8015fbc:	681d      	ldr	r5, [r3, #0]
 8015fbe:	f7fb fb6f 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	9300      	str	r3, [sp, #0]
 8015fc6:	f240 2307 	movw	r3, #519	; 0x207
 8015fca:	4a06      	ldr	r2, [pc, #24]	; (8015fe4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8015fcc:	4906      	ldr	r1, [pc, #24]	; (8015fe8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8015fce:	4620      	mov	r0, r4
 8015fd0:	47a8      	blx	r5
    return cpputest_longlong(0);
 8015fd2:	2100      	movs	r1, #0
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f7f1 ffa7 	bl	8007f28 <_ZN17cpputest_longlongC1Ei>
}
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	3708      	adds	r7, #8
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	08022aa8 	.word	0x08022aa8
 8015fe8:	08022af0 	.word	0x08022af0

08015fec <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8015fec:	b5b0      	push	{r4, r5, r7, lr}
 8015fee:	b086      	sub	sp, #24
 8015ff0:	af02      	add	r7, sp, #8
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	4639      	mov	r1, r7
 8015ff8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8015ffc:	f7fb fb40 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8016000:	4604      	mov	r4, r0
 8016002:	6823      	ldr	r3, [r4, #0]
 8016004:	3368      	adds	r3, #104	; 0x68
 8016006:	681d      	ldr	r5, [r3, #0]
 8016008:	f7fb fb4a 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801600c:	4603      	mov	r3, r0
 801600e:	9300      	str	r3, [sp, #0]
 8016010:	f240 230d 	movw	r3, #525	; 0x20d
 8016014:	4a06      	ldr	r2, [pc, #24]	; (8016030 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016016:	4907      	ldr	r1, [pc, #28]	; (8016034 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8016018:	4620      	mov	r0, r4
 801601a:	47a8      	blx	r5
    return default_value;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	461a      	mov	r2, r3
 8016020:	463b      	mov	r3, r7
 8016022:	cb03      	ldmia	r3!, {r0, r1}
 8016024:	6010      	str	r0, [r2, #0]
 8016026:	6051      	str	r1, [r2, #4]
}
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	3710      	adds	r7, #16
 801602c:	46bd      	mov	sp, r7
 801602e:	bdb0      	pop	{r4, r5, r7, pc}
 8016030:	08022aa8 	.word	0x08022aa8
 8016034:	08022af0 	.word	0x08022af0

08016038 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8016038:	b580      	push	{r7, lr}
 801603a:	ed2d 8b02 	vpush	{d8}
 801603e:	b090      	sub	sp, #64	; 0x40
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	3354      	adds	r3, #84	; 0x54
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	f107 0208 	add.w	r2, r7, #8
 8016050:	6879      	ldr	r1, [r7, #4]
 8016052:	4610      	mov	r0, r2
 8016054:	4798      	blx	r3
 8016056:	f107 0308 	add.w	r3, r7, #8
 801605a:	4618      	mov	r0, r3
 801605c:	f005 f908 	bl	801b270 <_ZNK14MockNamedValue14getDoubleValueEv>
 8016060:	eeb0 8a40 	vmov.f32	s16, s0
 8016064:	eef0 8a60 	vmov.f32	s17, s1
 8016068:	bf00      	nop
 801606a:	f107 0308 	add.w	r3, r7, #8
 801606e:	4618      	mov	r0, r3
 8016070:	f004 fc72 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8016074:	eeb0 7a48 	vmov.f32	s14, s16
 8016078:	eef0 7a68 	vmov.f32	s15, s17
}
 801607c:	eeb0 0a47 	vmov.f32	s0, s14
 8016080:	eef0 0a67 	vmov.f32	s1, s15
 8016084:	3740      	adds	r7, #64	; 0x40
 8016086:	46bd      	mov	sp, r7
 8016088:	ecbd 8b02 	vpop	{d8}
 801608c:	bd80      	pop	{r7, pc}

0801608e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801608e:	b580      	push	{r7, lr}
 8016090:	b084      	sub	sp, #16
 8016092:	af00      	add	r7, sp, #0
 8016094:	60f8      	str	r0, [r7, #12]
 8016096:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	3350      	adds	r3, #80	; 0x50
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	68f8      	ldr	r0, [r7, #12]
 80160a4:	4798      	blx	r3
 80160a6:	4603      	mov	r3, r0
 80160a8:	f083 0301 	eor.w	r3, r3, #1
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d002      	beq.n	80160b8 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 80160b2:	ed97 7b00 	vldr	d7, [r7]
 80160b6:	e00a      	b.n	80160ce <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	3398      	adds	r3, #152	; 0x98
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	68f8      	ldr	r0, [r7, #12]
 80160c2:	4798      	blx	r3
 80160c4:	eeb0 7a40 	vmov.f32	s14, s0
 80160c8:	eef0 7a60 	vmov.f32	s15, s1
 80160cc:	bf00      	nop
}
 80160ce:	eeb0 0a47 	vmov.f32	s0, s14
 80160d2:	eef0 0a67 	vmov.f32	s1, s15
 80160d6:	3710      	adds	r7, #16
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80160dc:	b590      	push	{r4, r7, lr}
 80160de:	b091      	sub	sp, #68	; 0x44
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	3354      	adds	r3, #84	; 0x54
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	f107 0208 	add.w	r2, r7, #8
 80160f0:	6879      	ldr	r1, [r7, #4]
 80160f2:	4610      	mov	r0, r2
 80160f4:	4798      	blx	r3
 80160f6:	f107 0308 	add.w	r3, r7, #8
 80160fa:	4618      	mov	r0, r3
 80160fc:	f004 ff06 	bl	801af0c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8016100:	4604      	mov	r4, r0
 8016102:	bf00      	nop
 8016104:	f107 0308 	add.w	r3, r7, #8
 8016108:	4618      	mov	r0, r3
 801610a:	f004 fc25 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 801610e:	4623      	mov	r3, r4
}
 8016110:	4618      	mov	r0, r3
 8016112:	3744      	adds	r7, #68	; 0x44
 8016114:	46bd      	mov	sp, r7
 8016116:	bd90      	pop	{r4, r7, pc}

08016118 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	3350      	adds	r3, #80	; 0x50
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	4798      	blx	r3
 801612e:	4603      	mov	r3, r0
 8016130:	f083 0301 	eor.w	r3, r3, #1
 8016134:	b2db      	uxtb	r3, r3
 8016136:	2b00      	cmp	r3, #0
 8016138:	d001      	beq.n	801613e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	e007      	b.n	801614e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	3388      	adds	r3, #136	; 0x88
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	4798      	blx	r3
 801614a:	4603      	mov	r3, r0
 801614c:	bf00      	nop
}
 801614e:	4618      	mov	r0, r3
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b082      	sub	sp, #8
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
 801615e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	3350      	adds	r3, #80	; 0x50
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	4798      	blx	r3
 801616c:	4603      	mov	r3, r0
 801616e:	f083 0301 	eor.w	r3, r3, #1
 8016172:	b2db      	uxtb	r3, r3
 8016174:	2b00      	cmp	r3, #0
 8016176:	d001      	beq.n	801617c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	e007      	b.n	801618c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	33a0      	adds	r3, #160	; 0xa0
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	4798      	blx	r3
 8016188:	4603      	mov	r3, r0
 801618a:	bf00      	nop
}
 801618c:	4618      	mov	r0, r3
 801618e:	3708      	adds	r7, #8
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}

08016194 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8016194:	b590      	push	{r4, r7, lr}
 8016196:	b091      	sub	sp, #68	; 0x44
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	3354      	adds	r3, #84	; 0x54
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	f107 0208 	add.w	r2, r7, #8
 80161a8:	6879      	ldr	r1, [r7, #4]
 80161aa:	4610      	mov	r0, r2
 80161ac:	4798      	blx	r3
 80161ae:	f107 0308 	add.w	r3, r7, #8
 80161b2:	4618      	mov	r0, r3
 80161b4:	f005 f8e0 	bl	801b378 <_ZNK14MockNamedValue15getPointerValueEv>
 80161b8:	4604      	mov	r4, r0
 80161ba:	bf00      	nop
 80161bc:	f107 0308 	add.w	r3, r7, #8
 80161c0:	4618      	mov	r0, r3
 80161c2:	f004 fbc9 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 80161c6:	4623      	mov	r3, r4
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	3744      	adds	r7, #68	; 0x44
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd90      	pop	{r4, r7, pc}

080161d0 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 80161d0:	b590      	push	{r4, r7, lr}
 80161d2:	b091      	sub	sp, #68	; 0x44
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	3354      	adds	r3, #84	; 0x54
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f107 0208 	add.w	r2, r7, #8
 80161e4:	6879      	ldr	r1, [r7, #4]
 80161e6:	4610      	mov	r0, r2
 80161e8:	4798      	blx	r3
 80161ea:	f107 0308 	add.w	r3, r7, #8
 80161ee:	4618      	mov	r0, r3
 80161f0:	f005 f8ea 	bl	801b3c8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80161f4:	4604      	mov	r4, r0
 80161f6:	bf00      	nop
 80161f8:	f107 0308 	add.w	r3, r7, #8
 80161fc:	4618      	mov	r0, r3
 80161fe:	f004 fbab 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8016202:	4623      	mov	r3, r4
}
 8016204:	4618      	mov	r0, r3
 8016206:	3744      	adds	r7, #68	; 0x44
 8016208:	46bd      	mov	sp, r7
 801620a:	bd90      	pop	{r4, r7, pc}

0801620c <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	3350      	adds	r3, #80	; 0x50
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	4798      	blx	r3
 8016222:	4603      	mov	r3, r0
 8016224:	f083 0301 	eor.w	r3, r3, #1
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b00      	cmp	r3, #0
 801622c:	d001      	beq.n	8016232 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	e007      	b.n	8016242 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	33a8      	adds	r3, #168	; 0xa8
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	4798      	blx	r3
 801623e:	4603      	mov	r3, r0
 8016240:	bf00      	nop
}
 8016242:	4618      	mov	r0, r3
 8016244:	3708      	adds	r7, #8
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}

0801624a <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801624a:	b590      	push	{r4, r7, lr}
 801624c:	b091      	sub	sp, #68	; 0x44
 801624e:	af00      	add	r7, sp, #0
 8016250:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	3354      	adds	r3, #84	; 0x54
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	f107 0208 	add.w	r2, r7, #8
 801625e:	6879      	ldr	r1, [r7, #4]
 8016260:	4610      	mov	r0, r2
 8016262:	4798      	blx	r3
 8016264:	f107 0308 	add.w	r3, r7, #8
 8016268:	4618      	mov	r0, r3
 801626a:	f005 f8d5 	bl	801b418 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801626e:	4604      	mov	r4, r0
 8016270:	bf00      	nop
 8016272:	f107 0308 	add.w	r3, r7, #8
 8016276:	4618      	mov	r0, r3
 8016278:	f004 fb6e 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 801627c:	4623      	mov	r3, r4
}
 801627e:	4618      	mov	r0, r3
 8016280:	3744      	adds	r7, #68	; 0x44
 8016282:	46bd      	mov	sp, r7
 8016284:	bd90      	pop	{r4, r7, pc}

08016286 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8016286:	b580      	push	{r7, lr}
 8016288:	b082      	sub	sp, #8
 801628a:	af00      	add	r7, sp, #0
 801628c:	6078      	str	r0, [r7, #4]
 801628e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	3350      	adds	r3, #80	; 0x50
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	4798      	blx	r3
 801629c:	4603      	mov	r3, r0
 801629e:	f083 0301 	eor.w	r3, r3, #1
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 80162a8:	683b      	ldr	r3, [r7, #0]
 80162aa:	e007      	b.n	80162bc <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	33b0      	adds	r3, #176	; 0xb0
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	4798      	blx	r3
 80162b8:	4603      	mov	r3, r0
 80162ba:	bf00      	nop
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3708      	adds	r7, #8
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	3350      	adds	r3, #80	; 0x50
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	4798      	blx	r3
 80162da:	4603      	mov	r3, r0
 80162dc:	f083 0301 	eor.w	r3, r3, #1
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d001      	beq.n	80162ea <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	e007      	b.n	80162fa <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	3394      	adds	r3, #148	; 0x94
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	4798      	blx	r3
 80162f6:	4603      	mov	r3, r0
 80162f8:	bf00      	nop
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	3708      	adds	r7, #8
 80162fe:	46bd      	mov	sp, r7
 8016300:	bd80      	pop	{r7, pc}

08016302 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8016302:	b590      	push	{r4, r7, lr}
 8016304:	b091      	sub	sp, #68	; 0x44
 8016306:	af00      	add	r7, sp, #0
 8016308:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	3354      	adds	r3, #84	; 0x54
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	f107 0208 	add.w	r2, r7, #8
 8016316:	6879      	ldr	r1, [r7, #4]
 8016318:	4610      	mov	r0, r2
 801631a:	4798      	blx	r3
 801631c:	f107 0308 	add.w	r3, r7, #8
 8016320:	4618      	mov	r0, r3
 8016322:	f005 f801 	bl	801b328 <_ZNK14MockNamedValue14getStringValueEv>
 8016326:	4604      	mov	r4, r0
 8016328:	bf00      	nop
 801632a:	f107 0308 	add.w	r3, r7, #8
 801632e:	4618      	mov	r0, r3
 8016330:	f004 fb12 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8016334:	4623      	mov	r3, r4
}
 8016336:	4618      	mov	r0, r3
 8016338:	3744      	adds	r7, #68	; 0x44
 801633a:	46bd      	mov	sp, r7
 801633c:	bd90      	pop	{r4, r7, pc}

0801633e <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801633e:	b590      	push	{r4, r7, lr}
 8016340:	b093      	sub	sp, #76	; 0x4c
 8016342:	af00      	add	r7, sp, #0
 8016344:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	3354      	adds	r3, #84	; 0x54
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	f107 0210 	add.w	r2, r7, #16
 8016352:	6879      	ldr	r1, [r7, #4]
 8016354:	4610      	mov	r0, r2
 8016356:	4798      	blx	r3
 8016358:	f107 0308 	add.w	r3, r7, #8
 801635c:	f107 0210 	add.w	r2, r7, #16
 8016360:	4611      	mov	r1, r2
 8016362:	4618      	mov	r0, r3
 8016364:	f004 fd8c 	bl	801ae80 <_ZNK14MockNamedValue7getNameEv>
 8016368:	f107 0308 	add.w	r3, r7, #8
 801636c:	4618      	mov	r0, r3
 801636e:	f7f4 f94b 	bl	800a608 <_ZNK12SimpleString7isEmptyEv>
 8016372:	4603      	mov	r3, r0
 8016374:	f083 0301 	eor.w	r3, r3, #1
 8016378:	b2dc      	uxtb	r4, r3
 801637a:	f107 0308 	add.w	r3, r7, #8
 801637e:	4618      	mov	r0, r3
 8016380:	f7f4 f953 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016384:	f107 0310 	add.w	r3, r7, #16
 8016388:	4618      	mov	r0, r3
 801638a:	f004 fae5 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 801638e:	4623      	mov	r3, r4
}
 8016390:	4618      	mov	r0, r3
 8016392:	374c      	adds	r7, #76	; 0x4c
 8016394:	46bd      	mov	sp, r7
 8016396:	bd90      	pop	{r4, r7, pc}

08016398 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8016398:	b590      	push	{r4, r7, lr}
 801639a:	b095      	sub	sp, #84	; 0x54
 801639c:	af02      	add	r7, sp, #8
 801639e:	6078      	str	r0, [r7, #4]
 80163a0:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	33c0      	adds	r3, #192	; 0xc0
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	4798      	blx	r3
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d001      	beq.n	80163b8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 80163b4:	687c      	ldr	r4, [r7, #4]
 80163b6:	e053      	b.n	8016460 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	331c      	adds	r3, #28
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	4618      	mov	r0, r3
 80163c0:	f003 f8ca 	bl	8019558 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	699b      	ldr	r3, [r3, #24]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d109      	bne.n	80163e0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	331c      	adds	r3, #28
 80163d0:	4618      	mov	r0, r3
 80163d2:	f002 fe20 	bl	8019016 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d001      	beq.n	80163e0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80163dc:	2301      	movs	r3, #1
 80163de:	e000      	b.n	80163e2 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 80163e0:	2300      	movs	r3, #0
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d02c      	beq.n	8016440 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	33cc      	adds	r3, #204	; 0xcc
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	6878      	ldr	r0, [r7, #4]
 80163f0:	4798      	blx	r3
 80163f2:	4604      	mov	r4, r0
 80163f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80163f8:	6879      	ldr	r1, [r7, #4]
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7fe fd3f 	bl	8014e7e <_ZNK21MockCheckedActualCall7getNameEv>
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016404:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016408:	f107 000c 	add.w	r0, r7, #12
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	4621      	mov	r1, r4
 8016412:	f004 f9fb 	bl	801a80c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8016416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801641a:	4618      	mov	r0, r3
 801641c:	f7f4 f905 	bl	800a62a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	33dc      	adds	r3, #220	; 0xdc
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	f107 020c 	add.w	r2, r7, #12
 801642c:	4611      	mov	r1, r2
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	4798      	blx	r3
        return *this;
 8016432:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016434:	f107 030c 	add.w	r3, r7, #12
 8016438:	4618      	mov	r0, r3
 801643a:	f000 ffa7 	bl	801738c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801643e:	e00f      	b.n	8016460 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	331c      	adds	r3, #28
 8016444:	4618      	mov	r0, r3
 8016446:	f003 f9a7 	bl	8019798 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	699b      	ldr	r3, [r3, #24]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d105      	bne.n	801645e <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	33d8      	adds	r3, #216	; 0xd8
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	4798      	blx	r3
    }

    return *this;
 801645e:	687c      	ldr	r4, [r7, #4]
 8016460:	4623      	mov	r3, r4
}
 8016462:	4618      	mov	r0, r3
 8016464:	374c      	adds	r7, #76	; 0x4c
 8016466:	46bd      	mov	sp, r7
 8016468:	bd90      	pop	{r4, r7, pc}
	...

0801646c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801646c:	b590      	push	{r4, r7, lr}
 801646e:	b087      	sub	sp, #28
 8016470:	af00      	add	r7, sp, #0
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	60b9      	str	r1, [r7, #8]
 8016476:	607a      	str	r2, [r7, #4]
 8016478:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801647a:	f240 2282 	movw	r2, #642	; 0x282
 801647e:	4913      	ldr	r1, [pc, #76]	; (80164cc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8016480:	2018      	movs	r0, #24
 8016482:	f7f1 f957 	bl	8007734 <_ZnwjPKci>
 8016486:	4604      	mov	r4, r0
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	68b9      	ldr	r1, [r7, #8]
 801648e:	4620      	mov	r0, r4
 8016490:	f7fe fa48 	bl	8014924 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8016494:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801649a:	2b00      	cmp	r3, #0
 801649c:	d103      	bne.n	80164a6 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	693a      	ldr	r2, [r7, #16]
 80164a2:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 80164a4:	e00d      	b.n	80164c2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164aa:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	695b      	ldr	r3, [r3, #20]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d003      	beq.n	80164bc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	695b      	ldr	r3, [r3, #20]
 80164b8:	617b      	str	r3, [r7, #20]
 80164ba:	e7f7      	b.n	80164ac <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 80164bc:	697b      	ldr	r3, [r7, #20]
 80164be:	693a      	ldr	r2, [r7, #16]
 80164c0:	615a      	str	r2, [r3, #20]
}
 80164c2:	bf00      	nop
 80164c4:	371c      	adds	r7, #28
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd90      	pop	{r4, r7, pc}
 80164ca:	bf00      	nop
 80164cc:	08022aa8 	.word	0x08022aa8

080164d0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	3308      	adds	r3, #8
 80164dc:	4618      	mov	r0, r3
 80164de:	f7f4 f8a4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7f4 f8a0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	4618      	mov	r0, r3
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 80164f4:	b590      	push	{r4, r7, lr}
 80164f6:	b085      	sub	sp, #20
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016500:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8016502:	2300      	movs	r3, #0
 8016504:	60bb      	str	r3, [r7, #8]

    while (current) {
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d012      	beq.n	8016532 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	695b      	ldr	r3, [r3, #20]
 8016514:	60fb      	str	r3, [r7, #12]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	68fa      	ldr	r2, [r7, #12]
 801651a:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801651c:	68bc      	ldr	r4, [r7, #8]
 801651e:	2c00      	cmp	r4, #0
 8016520:	d0f1      	beq.n	8016506 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8016522:	4620      	mov	r0, r4
 8016524:	f7ff ffd4 	bl	80164d0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8016528:	2118      	movs	r1, #24
 801652a:	4620      	mov	r0, r4
 801652c:	f7f1 f916 	bl	800775c <_ZdlPvj>
    while (current) {
 8016530:	e7e9      	b.n	8016506 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8016532:	bf00      	nop
 8016534:	3714      	adds	r7, #20
 8016536:	46bd      	mov	sp, r7
 8016538:	bd90      	pop	{r4, r7, pc}
	...

0801653c <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	4618      	mov	r0, r3
 8016548:	f7fe fc6a 	bl	8014e20 <_ZN14MockActualCallC1Ev>
 801654c:	4a06      	ldr	r2, [pc, #24]	; (8016568 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	601a      	str	r2, [r3, #0]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	3304      	adds	r3, #4
 8016556:	4905      	ldr	r1, [pc, #20]	; (801656c <_ZN19MockActualCallTraceC1Ev+0x30>)
 8016558:	4618      	mov	r0, r3
 801655a:	f7f3 fcae 	bl	8009eba <_ZN12SimpleStringC1EPKc>
{
}
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	4618      	mov	r0, r3
 8016562:	3708      	adds	r7, #8
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}
 8016568:	08024c14 	.word	0x08024c14
 801656c:	08022a90 	.word	0x08022a90

08016570 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8016570:	b580      	push	{r7, lr}
 8016572:	b082      	sub	sp, #8
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	4a08      	ldr	r2, [pc, #32]	; (801659c <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	601a      	str	r2, [r3, #0]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	3304      	adds	r3, #4
 8016582:	4618      	mov	r0, r3
 8016584:	f7f4 f851 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe fc58 	bl	8014e40 <_ZN14MockActualCallD1Ev>
{
}
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	4618      	mov	r0, r3
 8016594:	3708      	adds	r7, #8
 8016596:	46bd      	mov	sp, r7
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	08024c14 	.word	0x08024c14

080165a0 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
}
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	f7ff ffe1 	bl	8016570 <_ZN19MockActualCallTraceD1Ev>
 80165ae:	210c      	movs	r1, #12
 80165b0:	6878      	ldr	r0, [r7, #4]
 80165b2:	f7f1 f8d3 	bl	800775c <_ZdlPvj>
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	4618      	mov	r0, r3
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}

080165c0 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	3304      	adds	r3, #4
 80165ce:	4907      	ldr	r1, [pc, #28]	; (80165ec <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7f4 f8b9 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	3304      	adds	r3, #4
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	4618      	mov	r0, r3
 80165de:	f7f4 f8a1 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    return *this;
 80165e2:	687b      	ldr	r3, [r7, #4]
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	08022b9c 	.word	0x08022b9c

080165f0 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 80165f0:	b590      	push	{r4, r7, lr}
 80165f2:	b085      	sub	sp, #20
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	3304      	adds	r3, #4
 80165fe:	490e      	ldr	r1, [pc, #56]	; (8016638 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8016600:	4618      	mov	r0, r3
 8016602:	f7f4 f8a1 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	1d1c      	adds	r4, r3, #4
 801660a:	f107 0308 	add.w	r3, r7, #8
 801660e:	6839      	ldr	r1, [r7, #0]
 8016610:	4618      	mov	r0, r3
 8016612:	f7f4 fd39 	bl	800b088 <_Z10StringFromj>
 8016616:	f107 0308 	add.w	r3, r7, #8
 801661a:	4619      	mov	r1, r3
 801661c:	4620      	mov	r0, r4
 801661e:	f7f4 f881 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016622:	f107 0308 	add.w	r3, r7, #8
 8016626:	4618      	mov	r0, r3
 8016628:	f7f3 ffff 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 801662c:	687b      	ldr	r3, [r7, #4]
}
 801662e:	4618      	mov	r0, r3
 8016630:	3714      	adds	r7, #20
 8016632:	46bd      	mov	sp, r7
 8016634:	bd90      	pop	{r4, r7, pc}
 8016636:	bf00      	nop
 8016638:	08022bac 	.word	0x08022bac

0801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	3304      	adds	r3, #4
 801664a:	490a      	ldr	r1, [pc, #40]	; (8016674 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801664c:	4618      	mov	r0, r3
 801664e:	f7f4 f87b 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	3304      	adds	r3, #4
 8016656:	6839      	ldr	r1, [r7, #0]
 8016658:	4618      	mov	r0, r3
 801665a:	f7f4 f863 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	3304      	adds	r3, #4
 8016662:	4905      	ldr	r1, [pc, #20]	; (8016678 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8016664:	4618      	mov	r0, r3
 8016666:	f7f4 f86f 	bl	800a748 <_ZN12SimpleStringpLEPKc>
}
 801666a:	bf00      	nop
 801666c:	3708      	adds	r7, #8
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	08022bbc 	.word	0x08022bbc
 8016678:	08022bc0 	.word	0x08022bc0

0801667c <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801667c:	b590      	push	{r4, r7, lr}
 801667e:	b087      	sub	sp, #28
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	4613      	mov	r3, r2
 8016688:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801668a:	68b9      	ldr	r1, [r7, #8]
 801668c:	68f8      	ldr	r0, [r7, #12]
 801668e:	f7ff ffd5 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	1d1c      	adds	r4, r3, #4
 8016696:	f107 0310 	add.w	r3, r7, #16
 801669a:	79fa      	ldrb	r2, [r7, #7]
 801669c:	4611      	mov	r1, r2
 801669e:	4618      	mov	r0, r3
 80166a0:	f7f4 fa34 	bl	800ab0c <_Z10StringFromb>
 80166a4:	f107 0310 	add.w	r3, r7, #16
 80166a8:	4619      	mov	r1, r3
 80166aa:	4620      	mov	r0, r4
 80166ac:	f7f4 f83a 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 80166b0:	f107 0310 	add.w	r3, r7, #16
 80166b4:	4618      	mov	r0, r3
 80166b6:	f7f3 ffb8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 80166ba:	68fb      	ldr	r3, [r7, #12]
}
 80166bc:	4618      	mov	r0, r3
 80166be:	371c      	adds	r7, #28
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd90      	pop	{r4, r7, pc}

080166c4 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80166c4:	b590      	push	{r4, r7, lr}
 80166c6:	b08f      	sub	sp, #60	; 0x3c
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	60f8      	str	r0, [r7, #12]
 80166cc:	60b9      	str	r1, [r7, #8]
 80166ce:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80166d0:	68b9      	ldr	r1, [r7, #8]
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f7ff ffb2 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	1d1c      	adds	r4, r3, #4
 80166dc:	f107 0320 	add.w	r3, r7, #32
 80166e0:	6879      	ldr	r1, [r7, #4]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7f4 fcd0 	bl	800b088 <_Z10StringFromj>
 80166e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80166ec:	491f      	ldr	r1, [pc, #124]	; (801676c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7f3 fbe3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80166f4:	f107 0318 	add.w	r3, r7, #24
 80166f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80166fc:	f107 0120 	add.w	r1, r7, #32
 8016700:	4618      	mov	r0, r3
 8016702:	f7f3 fff4 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 8016706:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801670a:	6879      	ldr	r1, [r7, #4]
 801670c:	4618      	mov	r0, r3
 801670e:	f7f4 fb5f 	bl	800add0 <_Z30BracketsFormattedHexStringFromj>
 8016712:	f107 0310 	add.w	r3, r7, #16
 8016716:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801671a:	f107 0118 	add.w	r1, r7, #24
 801671e:	4618      	mov	r0, r3
 8016720:	f7f3 ffe5 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 8016724:	f107 0310 	add.w	r3, r7, #16
 8016728:	4619      	mov	r1, r3
 801672a:	4620      	mov	r0, r4
 801672c:	f7f3 fffa 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016730:	f107 0310 	add.w	r3, r7, #16
 8016734:	4618      	mov	r0, r3
 8016736:	f7f3 ff78 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801673a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801673e:	4618      	mov	r0, r3
 8016740:	f7f3 ff73 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016744:	f107 0318 	add.w	r3, r7, #24
 8016748:	4618      	mov	r0, r3
 801674a:	f7f3 ff6e 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801674e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016752:	4618      	mov	r0, r3
 8016754:	f7f3 ff69 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016758:	f107 0320 	add.w	r3, r7, #32
 801675c:	4618      	mov	r0, r3
 801675e:	f7f3 ff64 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016762:	68fb      	ldr	r3, [r7, #12]
}
 8016764:	4618      	mov	r0, r3
 8016766:	373c      	adds	r7, #60	; 0x3c
 8016768:	46bd      	mov	sp, r7
 801676a:	bd90      	pop	{r4, r7, pc}
 801676c:	08022bbc 	.word	0x08022bbc

08016770 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8016770:	b590      	push	{r4, r7, lr}
 8016772:	b08f      	sub	sp, #60	; 0x3c
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801677c:	68b9      	ldr	r1, [r7, #8]
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	f7ff ff5c 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	1d1c      	adds	r4, r3, #4
 8016788:	f107 0320 	add.w	r3, r7, #32
 801678c:	6879      	ldr	r1, [r7, #4]
 801678e:	4618      	mov	r0, r3
 8016790:	f7f4 fa12 	bl	800abb8 <_Z10StringFromi>
 8016794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016798:	491f      	ldr	r1, [pc, #124]	; (8016818 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801679a:	4618      	mov	r0, r3
 801679c:	f7f3 fb8d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80167a0:	f107 0318 	add.w	r3, r7, #24
 80167a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80167a8:	f107 0120 	add.w	r1, r7, #32
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7f3 ff9e 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 80167b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80167b6:	6879      	ldr	r1, [r7, #4]
 80167b8:	4618      	mov	r0, r3
 80167ba:	f7f4 faed 	bl	800ad98 <_Z30BracketsFormattedHexStringFromi>
 80167be:	f107 0310 	add.w	r3, r7, #16
 80167c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80167c6:	f107 0118 	add.w	r1, r7, #24
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f3 ff8f 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 80167d0:	f107 0310 	add.w	r3, r7, #16
 80167d4:	4619      	mov	r1, r3
 80167d6:	4620      	mov	r0, r4
 80167d8:	f7f3 ffa4 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 80167dc:	f107 0310 	add.w	r3, r7, #16
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7f3 ff22 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80167e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7f3 ff1d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80167f0:	f107 0318 	add.w	r3, r7, #24
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7f3 ff18 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80167fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80167fe:	4618      	mov	r0, r3
 8016800:	f7f3 ff13 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016804:	f107 0320 	add.w	r3, r7, #32
 8016808:	4618      	mov	r0, r3
 801680a:	f7f3 ff0e 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 801680e:	68fb      	ldr	r3, [r7, #12]
}
 8016810:	4618      	mov	r0, r3
 8016812:	373c      	adds	r7, #60	; 0x3c
 8016814:	46bd      	mov	sp, r7
 8016816:	bd90      	pop	{r4, r7, pc}
 8016818:	08022bbc 	.word	0x08022bbc

0801681c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801681c:	b590      	push	{r4, r7, lr}
 801681e:	b08f      	sub	sp, #60	; 0x3c
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016828:	68b9      	ldr	r1, [r7, #8]
 801682a:	68f8      	ldr	r0, [r7, #12]
 801682c:	f7ff ff06 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	1d1c      	adds	r4, r3, #4
 8016834:	f107 0320 	add.w	r3, r7, #32
 8016838:	6879      	ldr	r1, [r7, #4]
 801683a:	4618      	mov	r0, r3
 801683c:	f7f4 fc36 	bl	800b0ac <_Z10StringFromm>
 8016840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016844:	491f      	ldr	r1, [pc, #124]	; (80168c4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8016846:	4618      	mov	r0, r3
 8016848:	f7f3 fb37 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801684c:	f107 0318 	add.w	r3, r7, #24
 8016850:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016854:	f107 0120 	add.w	r1, r7, #32
 8016858:	4618      	mov	r0, r3
 801685a:	f7f3 ff48 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801685e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016862:	6879      	ldr	r1, [r7, #4]
 8016864:	4618      	mov	r0, r3
 8016866:	f7f4 faeb 	bl	800ae40 <_Z30BracketsFormattedHexStringFromm>
 801686a:	f107 0310 	add.w	r3, r7, #16
 801686e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016872:	f107 0118 	add.w	r1, r7, #24
 8016876:	4618      	mov	r0, r3
 8016878:	f7f3 ff39 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801687c:	f107 0310 	add.w	r3, r7, #16
 8016880:	4619      	mov	r1, r3
 8016882:	4620      	mov	r0, r4
 8016884:	f7f3 ff4e 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016888:	f107 0310 	add.w	r3, r7, #16
 801688c:	4618      	mov	r0, r3
 801688e:	f7f3 fecc 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016896:	4618      	mov	r0, r3
 8016898:	f7f3 fec7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801689c:	f107 0318 	add.w	r3, r7, #24
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7f3 fec2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80168a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7f3 febd 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80168b0:	f107 0320 	add.w	r3, r7, #32
 80168b4:	4618      	mov	r0, r3
 80168b6:	f7f3 feb8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 80168ba:	68fb      	ldr	r3, [r7, #12]
}
 80168bc:	4618      	mov	r0, r3
 80168be:	373c      	adds	r7, #60	; 0x3c
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd90      	pop	{r4, r7, pc}
 80168c4:	08022bbc 	.word	0x08022bbc

080168c8 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 80168c8:	b590      	push	{r4, r7, lr}
 80168ca:	b08f      	sub	sp, #60	; 0x3c
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	60f8      	str	r0, [r7, #12]
 80168d0:	60b9      	str	r1, [r7, #8]
 80168d2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80168d4:	68b9      	ldr	r1, [r7, #8]
 80168d6:	68f8      	ldr	r0, [r7, #12]
 80168d8:	f7ff feb0 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	1d1c      	adds	r4, r3, #4
 80168e0:	f107 0320 	add.w	r3, r7, #32
 80168e4:	6879      	ldr	r1, [r7, #4]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7f4 f978 	bl	800abdc <_Z10StringFroml>
 80168ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80168f0:	491f      	ldr	r1, [pc, #124]	; (8016970 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7f3 fae1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80168f8:	f107 0318 	add.w	r3, r7, #24
 80168fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016900:	f107 0120 	add.w	r1, r7, #32
 8016904:	4618      	mov	r0, r3
 8016906:	f7f3 fef2 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801690a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801690e:	6879      	ldr	r1, [r7, #4]
 8016910:	4618      	mov	r0, r3
 8016912:	f7f4 fa79 	bl	800ae08 <_Z30BracketsFormattedHexStringFroml>
 8016916:	f107 0310 	add.w	r3, r7, #16
 801691a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801691e:	f107 0118 	add.w	r1, r7, #24
 8016922:	4618      	mov	r0, r3
 8016924:	f7f3 fee3 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 8016928:	f107 0310 	add.w	r3, r7, #16
 801692c:	4619      	mov	r1, r3
 801692e:	4620      	mov	r0, r4
 8016930:	f7f3 fef8 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016934:	f107 0310 	add.w	r3, r7, #16
 8016938:	4618      	mov	r0, r3
 801693a:	f7f3 fe76 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801693e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016942:	4618      	mov	r0, r3
 8016944:	f7f3 fe71 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016948:	f107 0318 	add.w	r3, r7, #24
 801694c:	4618      	mov	r0, r3
 801694e:	f7f3 fe6c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8016952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016956:	4618      	mov	r0, r3
 8016958:	f7f3 fe67 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801695c:	f107 0320 	add.w	r3, r7, #32
 8016960:	4618      	mov	r0, r3
 8016962:	f7f3 fe62 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016966:	68fb      	ldr	r3, [r7, #12]
}
 8016968:	4618      	mov	r0, r3
 801696a:	373c      	adds	r7, #60	; 0x3c
 801696c:	46bd      	mov	sp, r7
 801696e:	bd90      	pop	{r4, r7, pc}
 8016970:	08022bbc 	.word	0x08022bbc

08016974 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016974:	b5b0      	push	{r4, r5, r7, lr}
 8016976:	b086      	sub	sp, #24
 8016978:	af02      	add	r7, sp, #8
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	4639      	mov	r1, r7
 8016980:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016984:	f7fa fe7c 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8016988:	4604      	mov	r4, r0
 801698a:	6823      	ldr	r3, [r4, #0]
 801698c:	3368      	adds	r3, #104	; 0x68
 801698e:	681d      	ldr	r5, [r3, #0]
 8016990:	f7fa fe86 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016994:	4603      	mov	r3, r0
 8016996:	9300      	str	r3, [sp, #0]
 8016998:	f240 23ee 	movw	r3, #750	; 0x2ee
 801699c:	4a04      	ldr	r2, [pc, #16]	; (80169b0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801699e:	4905      	ldr	r1, [pc, #20]	; (80169b4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80169a0:	4620      	mov	r0, r4
 80169a2:	47a8      	blx	r5
    return *this;
 80169a4:	68fb      	ldr	r3, [r7, #12]
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bdb0      	pop	{r4, r5, r7, pc}
 80169ae:	bf00      	nop
 80169b0:	08022aa8 	.word	0x08022aa8
 80169b4:	08022ac4 	.word	0x08022ac4

080169b8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80169b8:	b5b0      	push	{r4, r5, r7, lr}
 80169ba:	b086      	sub	sp, #24
 80169bc:	af02      	add	r7, sp, #8
 80169be:	60f8      	str	r0, [r7, #12]
 80169c0:	60b9      	str	r1, [r7, #8]
 80169c2:	4639      	mov	r1, r7
 80169c4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80169c8:	f7fa fe5a 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 80169cc:	4604      	mov	r4, r0
 80169ce:	6823      	ldr	r3, [r4, #0]
 80169d0:	3368      	adds	r3, #104	; 0x68
 80169d2:	681d      	ldr	r5, [r3, #0]
 80169d4:	f7fa fe64 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80169d8:	4603      	mov	r3, r0
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 80169e0:	4a04      	ldr	r2, [pc, #16]	; (80169f4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80169e2:	4905      	ldr	r1, [pc, #20]	; (80169f8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80169e4:	4620      	mov	r0, r4
 80169e6:	47a8      	blx	r5
    return *this;
 80169e8:	68fb      	ldr	r3, [r7, #12]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bdb0      	pop	{r4, r5, r7, pc}
 80169f2:	bf00      	nop
 80169f4:	08022aa8 	.word	0x08022aa8
 80169f8:	08022af0 	.word	0x08022af0

080169fc <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 80169fc:	b590      	push	{r4, r7, lr}
 80169fe:	b087      	sub	sp, #28
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8016a0a:	68b9      	ldr	r1, [r7, #8]
 8016a0c:	68f8      	ldr	r0, [r7, #12]
 8016a0e:	f7ff fe15 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	1d1c      	adds	r4, r3, #4
 8016a16:	f107 0310 	add.w	r3, r7, #16
 8016a1a:	2106      	movs	r1, #6
 8016a1c:	ed97 0b00 	vldr	d0, [r7]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f4 fac7 	bl	800afb4 <_Z10StringFromdi>
 8016a26:	f107 0310 	add.w	r3, r7, #16
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f7f3 fe79 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016a32:	f107 0310 	add.w	r3, r7, #16
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7f3 fdf7 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	371c      	adds	r7, #28
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd90      	pop	{r4, r7, pc}

08016a46 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8016a46:	b590      	push	{r4, r7, lr}
 8016a48:	b087      	sub	sp, #28
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	60f8      	str	r0, [r7, #12]
 8016a4e:	60b9      	str	r1, [r7, #8]
 8016a50:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016a52:	68b9      	ldr	r1, [r7, #8]
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	f7ff fdf1 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	1d1c      	adds	r4, r3, #4
 8016a5e:	f107 0310 	add.w	r3, r7, #16
 8016a62:	6879      	ldr	r1, [r7, #4]
 8016a64:	4618      	mov	r0, r3
 8016a66:	f7f4 f86d 	bl	800ab44 <_Z10StringFromPKc>
 8016a6a:	f107 0310 	add.w	r3, r7, #16
 8016a6e:	4619      	mov	r1, r3
 8016a70:	4620      	mov	r0, r4
 8016a72:	f7f3 fe57 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016a76:	f107 0310 	add.w	r3, r7, #16
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f3 fdd5 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016a80:	68fb      	ldr	r3, [r7, #12]
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	371c      	adds	r7, #28
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd90      	pop	{r4, r7, pc}

08016a8a <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8016a8a:	b590      	push	{r4, r7, lr}
 8016a8c:	b087      	sub	sp, #28
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	60f8      	str	r0, [r7, #12]
 8016a92:	60b9      	str	r1, [r7, #8]
 8016a94:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016a96:	68b9      	ldr	r1, [r7, #8]
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f7ff fdcf 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	1d1c      	adds	r4, r3, #4
 8016aa2:	f107 0310 	add.w	r3, r7, #16
 8016aa6:	6879      	ldr	r1, [r7, #4]
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7f4 f8a9 	bl	800ac00 <_Z10StringFromPKv>
 8016aae:	f107 0310 	add.w	r3, r7, #16
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	f7f3 fe35 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016aba:	f107 0310 	add.w	r3, r7, #16
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f7f3 fdb3 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	371c      	adds	r7, #28
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd90      	pop	{r4, r7, pc}

08016ace <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8016ace:	b590      	push	{r4, r7, lr}
 8016ad0:	b087      	sub	sp, #28
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	60f8      	str	r0, [r7, #12]
 8016ad6:	60b9      	str	r1, [r7, #8]
 8016ad8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016ada:	68b9      	ldr	r1, [r7, #8]
 8016adc:	68f8      	ldr	r0, [r7, #12]
 8016ade:	f7ff fdad 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	1d1c      	adds	r4, r3, #4
 8016ae6:	f107 0310 	add.w	r3, r7, #16
 8016aea:	6879      	ldr	r1, [r7, #4]
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7f4 f887 	bl	800ac00 <_Z10StringFromPKv>
 8016af2:	f107 0310 	add.w	r3, r7, #16
 8016af6:	4619      	mov	r1, r3
 8016af8:	4620      	mov	r0, r4
 8016afa:	f7f3 fe13 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016afe:	f107 0310 	add.w	r3, r7, #16
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7f3 fd91 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016b08:	68fb      	ldr	r3, [r7, #12]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	371c      	adds	r7, #28
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd90      	pop	{r4, r7, pc}

08016b12 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8016b12:	b590      	push	{r4, r7, lr}
 8016b14:	b087      	sub	sp, #28
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	60f8      	str	r0, [r7, #12]
 8016b1a:	60b9      	str	r1, [r7, #8]
 8016b1c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016b1e:	68b9      	ldr	r1, [r7, #8]
 8016b20:	68f8      	ldr	r0, [r7, #12]
 8016b22:	f7ff fd8b 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	1d1c      	adds	r4, r3, #4
 8016b2a:	f107 0310 	add.w	r3, r7, #16
 8016b2e:	6879      	ldr	r1, [r7, #4]
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7f4 f88f 	bl	800ac54 <_Z10StringFromPFvvE>
 8016b36:	f107 0310 	add.w	r3, r7, #16
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	4620      	mov	r0, r4
 8016b3e:	f7f3 fdf1 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016b42:	f107 0310 	add.w	r3, r7, #16
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7f3 fd6f 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	371c      	adds	r7, #28
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd90      	pop	{r4, r7, pc}

08016b56 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8016b56:	b590      	push	{r4, r7, lr}
 8016b58:	b087      	sub	sp, #28
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	60f8      	str	r0, [r7, #12]
 8016b5e:	60b9      	str	r1, [r7, #8]
 8016b60:	607a      	str	r2, [r7, #4]
 8016b62:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8016b64:	68b9      	ldr	r1, [r7, #8]
 8016b66:	68f8      	ldr	r0, [r7, #12]
 8016b68:	f7ff fd68 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	1d1c      	adds	r4, r3, #4
 8016b70:	f107 0310 	add.w	r3, r7, #16
 8016b74:	683a      	ldr	r2, [r7, #0]
 8016b76:	6879      	ldr	r1, [r7, #4]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f4 fbaf 	bl	800b2dc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8016b7e:	f107 0310 	add.w	r3, r7, #16
 8016b82:	4619      	mov	r1, r3
 8016b84:	4620      	mov	r0, r4
 8016b86:	f7f3 fdcd 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016b8a:	f107 0310 	add.w	r3, r7, #16
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7f3 fd4b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016b94:	68fb      	ldr	r3, [r7, #12]
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	371c      	adds	r7, #28
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd90      	pop	{r4, r7, pc}
	...

08016ba0 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8016ba0:	b590      	push	{r4, r7, lr}
 8016ba2:	b087      	sub	sp, #28
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	607a      	str	r2, [r7, #4]
 8016bac:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	4913      	ldr	r1, [pc, #76]	; (8016c00 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f3 fdc7 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	3304      	adds	r3, #4
 8016bbe:	68b9      	ldr	r1, [r7, #8]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7f3 fdaf 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8016bc6:	6879      	ldr	r1, [r7, #4]
 8016bc8:	68f8      	ldr	r0, [r7, #12]
 8016bca:	f7ff fd37 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	1d1c      	adds	r4, r3, #4
 8016bd2:	f107 0310 	add.w	r3, r7, #16
 8016bd6:	6839      	ldr	r1, [r7, #0]
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7f4 f811 	bl	800ac00 <_Z10StringFromPKv>
 8016bde:	f107 0310 	add.w	r3, r7, #16
 8016be2:	4619      	mov	r1, r3
 8016be4:	4620      	mov	r0, r4
 8016be6:	f7f3 fd9d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016bea:	f107 0310 	add.w	r3, r7, #16
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7f3 fd1b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	371c      	adds	r7, #28
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd90      	pop	{r4, r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	08022bbc 	.word	0x08022bbc

08016c04 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8016c04:	b590      	push	{r4, r7, lr}
 8016c06:	b087      	sub	sp, #28
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	60f8      	str	r0, [r7, #12]
 8016c0c:	60b9      	str	r1, [r7, #8]
 8016c0e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016c10:	68b9      	ldr	r1, [r7, #8]
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	f7ff fd12 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	1d1c      	adds	r4, r3, #4
 8016c1c:	f107 0310 	add.w	r3, r7, #16
 8016c20:	6879      	ldr	r1, [r7, #4]
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7f3 ffec 	bl	800ac00 <_Z10StringFromPKv>
 8016c28:	f107 0310 	add.w	r3, r7, #16
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f7f3 fd78 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016c34:	f107 0310 	add.w	r3, r7, #16
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7f3 fcf6 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	371c      	adds	r7, #28
 8016c44:	46bd      	mov	sp, r7
 8016c46:	bd90      	pop	{r4, r7, pc}

08016c48 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8016c48:	b590      	push	{r4, r7, lr}
 8016c4a:	b087      	sub	sp, #28
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	60f8      	str	r0, [r7, #12]
 8016c50:	60b9      	str	r1, [r7, #8]
 8016c52:	607a      	str	r2, [r7, #4]
 8016c54:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	3304      	adds	r3, #4
 8016c5a:	4913      	ldr	r1, [pc, #76]	; (8016ca8 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f3 fd73 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	3304      	adds	r3, #4
 8016c66:	68b9      	ldr	r1, [r7, #8]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7f3 fd5b 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8016c6e:	6879      	ldr	r1, [r7, #4]
 8016c70:	68f8      	ldr	r0, [r7, #12]
 8016c72:	f7ff fce3 	bl	801663c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	1d1c      	adds	r4, r3, #4
 8016c7a:	f107 0310 	add.w	r3, r7, #16
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7f3 ffbd 	bl	800ac00 <_Z10StringFromPKv>
 8016c86:	f107 0310 	add.w	r3, r7, #16
 8016c8a:	4619      	mov	r1, r3
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f7f3 fd49 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8016c92:	f107 0310 	add.w	r3, r7, #16
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7f3 fcc7 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	371c      	adds	r7, #28
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd90      	pop	{r4, r7, pc}
 8016ca6:	bf00      	nop
 8016ca8:	08022bbc 	.word	0x08022bbc

08016cac <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8016cac:	b480      	push	{r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
    return false;
 8016cb4:	2300      	movs	r3, #0
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	370c      	adds	r7, #12
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc0:	4770      	bx	lr
	...

08016cc4 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b084      	sub	sp, #16
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8016cce:	f107 0308 	add.w	r3, r7, #8
 8016cd2:	4909      	ldr	r1, [pc, #36]	; (8016cf8 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7f3 f8f0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8016cda:	f107 0308 	add.w	r3, r7, #8
 8016cde:	4619      	mov	r1, r3
 8016ce0:	6878      	ldr	r0, [r7, #4]
 8016ce2:	f003 fe0f 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016ce6:	f107 0308 	add.w	r3, r7, #8
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7f3 fc9d 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	3710      	adds	r7, #16
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}
 8016cf8:	08022a90 	.word	0x08022a90

08016cfc <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	b083      	sub	sp, #12
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
    return 0;
 8016d04:	2300      	movs	r3, #0
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	370c      	adds	r7, #12
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d10:	4770      	bx	lr

08016d12 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8016d12:	b480      	push	{r7}
 8016d14:	b083      	sub	sp, #12
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
    return 0;
 8016d1a:	2300      	movs	r3, #0
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr

08016d28 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b083      	sub	sp, #12
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	6039      	str	r1, [r7, #0]
    return 0;
 8016d32:	2300      	movs	r3, #0
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	370c      	adds	r7, #12
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3e:	4770      	bx	lr

08016d40 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8016d40:	b480      	push	{r7}
 8016d42:	b083      	sub	sp, #12
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
    return 0;
 8016d4a:	2300      	movs	r3, #0
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8016d58:	b5b0      	push	{r4, r5, r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af02      	add	r7, sp, #8
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8016d62:	f7fa fc8d 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8016d66:	4604      	mov	r4, r0
 8016d68:	6823      	ldr	r3, [r4, #0]
 8016d6a:	3368      	adds	r3, #104	; 0x68
 8016d6c:	681d      	ldr	r5, [r3, #0]
 8016d6e:	f7fa fc97 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016d72:	4603      	mov	r3, r0
 8016d74:	9300      	str	r3, [sp, #0]
 8016d76:	f240 3375 	movw	r3, #885	; 0x375
 8016d7a:	4a06      	ldr	r2, [pc, #24]	; (8016d94 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8016d7c:	4906      	ldr	r1, [pc, #24]	; (8016d98 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8016d7e:	4620      	mov	r0, r4
 8016d80:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016d82:	2100      	movs	r1, #0
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	f7f1 f8cf 	bl	8007f28 <_ZN17cpputest_longlongC1Ei>
}
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	3708      	adds	r7, #8
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bdb0      	pop	{r4, r5, r7, pc}
 8016d92:	bf00      	nop
 8016d94:	08022aa8 	.word	0x08022aa8
 8016d98:	08022af0 	.word	0x08022af0

08016d9c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8016d9c:	b5b0      	push	{r4, r5, r7, lr}
 8016d9e:	b084      	sub	sp, #16
 8016da0:	af02      	add	r7, sp, #8
 8016da2:	6078      	str	r0, [r7, #4]
 8016da4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016da6:	f7fa fc6b 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8016daa:	4604      	mov	r4, r0
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	3368      	adds	r3, #104	; 0x68
 8016db0:	681d      	ldr	r5, [r3, #0]
 8016db2:	f7fa fc75 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016db6:	4603      	mov	r3, r0
 8016db8:	9300      	str	r3, [sp, #0]
 8016dba:	f240 337b 	movw	r3, #891	; 0x37b
 8016dbe:	4a06      	ldr	r2, [pc, #24]	; (8016dd8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8016dc0:	4906      	ldr	r1, [pc, #24]	; (8016ddc <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f7f1 f8b9 	bl	8007f40 <_ZN18cpputest_ulonglongC1Ei>
}
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	3708      	adds	r7, #8
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	08022aa8 	.word	0x08022aa8
 8016ddc:	08022ac4 	.word	0x08022ac4

08016de0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8016de0:	b5b0      	push	{r4, r5, r7, lr}
 8016de2:	b086      	sub	sp, #24
 8016de4:	af02      	add	r7, sp, #8
 8016de6:	60f8      	str	r0, [r7, #12]
 8016de8:	60b9      	str	r1, [r7, #8]
 8016dea:	4639      	mov	r1, r7
 8016dec:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016df0:	f7fa fc46 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8016df4:	4604      	mov	r4, r0
 8016df6:	6823      	ldr	r3, [r4, #0]
 8016df8:	3368      	adds	r3, #104	; 0x68
 8016dfa:	681d      	ldr	r5, [r3, #0]
 8016dfc:	f7fa fc50 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016e00:	4603      	mov	r3, r0
 8016e02:	9300      	str	r3, [sp, #0]
 8016e04:	f240 3381 	movw	r3, #897	; 0x381
 8016e08:	4a05      	ldr	r2, [pc, #20]	; (8016e20 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8016e0a:	4906      	ldr	r1, [pc, #24]	; (8016e24 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016e10:	2100      	movs	r1, #0
 8016e12:	68f8      	ldr	r0, [r7, #12]
 8016e14:	f7f1 f894 	bl	8007f40 <_ZN18cpputest_ulonglongC1Ei>
}
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	3710      	adds	r7, #16
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8016e20:	08022aa8 	.word	0x08022aa8
 8016e24:	08022ac4 	.word	0x08022ac4

08016e28 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8016e28:	b5b0      	push	{r4, r5, r7, lr}
 8016e2a:	b086      	sub	sp, #24
 8016e2c:	af02      	add	r7, sp, #8
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	4639      	mov	r1, r7
 8016e34:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016e38:	f7fa fc22 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	6823      	ldr	r3, [r4, #0]
 8016e40:	3368      	adds	r3, #104	; 0x68
 8016e42:	681d      	ldr	r5, [r3, #0]
 8016e44:	f7fa fc2c 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	9300      	str	r3, [sp, #0]
 8016e4c:	f240 3387 	movw	r3, #903	; 0x387
 8016e50:	4a05      	ldr	r2, [pc, #20]	; (8016e68 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8016e52:	4906      	ldr	r1, [pc, #24]	; (8016e6c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016e54:	4620      	mov	r0, r4
 8016e56:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016e58:	2100      	movs	r1, #0
 8016e5a:	68f8      	ldr	r0, [r7, #12]
 8016e5c:	f7f1 f864 	bl	8007f28 <_ZN17cpputest_longlongC1Ei>
}
 8016e60:	68f8      	ldr	r0, [r7, #12]
 8016e62:	3710      	adds	r7, #16
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bdb0      	pop	{r4, r5, r7, pc}
 8016e68:	08022aa8 	.word	0x08022aa8
 8016e6c:	08022af0 	.word	0x08022af0

08016e70 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8016e70:	b480      	push	{r7}
 8016e72:	b083      	sub	sp, #12
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
    return false;
 8016e78:	2300      	movs	r3, #0
}
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	370c      	adds	r7, #12
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e84:	4770      	bx	lr

08016e86 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8016e86:	b480      	push	{r7}
 8016e88:	b083      	sub	sp, #12
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	6078      	str	r0, [r7, #4]
 8016e8e:	460b      	mov	r3, r1
 8016e90:	70fb      	strb	r3, [r7, #3]
    return false;
 8016e92:	2300      	movs	r3, #0
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	370c      	adds	r7, #12
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b083      	sub	sp, #12
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
    return 0;
 8016ea8:	2300      	movs	r3, #0
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	370c      	adds	r7, #12
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb4:	4770      	bx	lr

08016eb6 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8016eb6:	b480      	push	{r7}
 8016eb8:	b083      	sub	sp, #12
 8016eba:	af00      	add	r7, sp, #0
 8016ebc:	6078      	str	r0, [r7, #4]
    return 0.0;
 8016ebe:	f04f 0200 	mov.w	r2, #0
 8016ec2:	f04f 0300 	mov.w	r3, #0
 8016ec6:	ec43 2b17 	vmov	d7, r2, r3
}
 8016eca:	eeb0 0a47 	vmov.f32	s0, s14
 8016ece:	eef0 0a67 	vmov.f32	s1, s15
 8016ed2:	370c      	adds	r7, #12
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr

08016edc <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b084      	sub	sp, #16
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	3398      	adds	r3, #152	; 0x98
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	68f8      	ldr	r0, [r7, #12]
 8016ef2:	4798      	blx	r3
 8016ef4:	eeb0 7a40 	vmov.f32	s14, s0
 8016ef8:	eef0 7a60 	vmov.f32	s15, s1
}
 8016efc:	eeb0 0a47 	vmov.f32	s0, s14
 8016f00:	eef0 0a67 	vmov.f32	s1, s15
 8016f04:	3710      	adds	r7, #16
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}

08016f0a <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8016f0a:	b480      	push	{r7}
 8016f0c:	b083      	sub	sp, #12
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	6078      	str	r0, [r7, #4]
    return 0;
 8016f12:	2300      	movs	r3, #0
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	370c      	adds	r7, #12
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1e:	4770      	bx	lr

08016f20 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8016f20:	b480      	push	{r7}
 8016f22:	b083      	sub	sp, #12
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016f28:	2300      	movs	r3, #0
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	370c      	adds	r7, #12
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f34:	4770      	bx	lr

08016f36 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8016f36:	b480      	push	{r7}
 8016f38:	b083      	sub	sp, #12
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016f3e:	2300      	movs	r3, #0
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	370c      	adds	r7, #12
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr

08016f4c <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016f54:	2300      	movs	r3, #0
}
 8016f56:	4618      	mov	r0, r3
 8016f58:	370c      	adds	r7, #12
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f60:	4770      	bx	lr

08016f62 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8016f62:	b580      	push	{r7, lr}
 8016f64:	b082      	sub	sp, #8
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	6078      	str	r0, [r7, #4]
 8016f6a:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	33a8      	adds	r3, #168	; 0xa8
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	4798      	blx	r3
 8016f78:	4603      	mov	r3, r0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3708      	adds	r7, #8
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}

08016f82 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8016f82:	b580      	push	{r7, lr}
 8016f84:	b082      	sub	sp, #8
 8016f86:	af00      	add	r7, sp, #0
 8016f88:	6078      	str	r0, [r7, #4]
 8016f8a:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	33a0      	adds	r3, #160	; 0xa0
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	4798      	blx	r3
 8016f98:	4603      	mov	r3, r0
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3708      	adds	r7, #8
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8016fa2:	b580      	push	{r7, lr}
 8016fa4:	b082      	sub	sp, #8
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	6078      	str	r0, [r7, #4]
 8016faa:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	33b0      	adds	r3, #176	; 0xb0
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	4798      	blx	r3
 8016fb8:	4603      	mov	r3, r0
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
	...

08016fc4 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b083      	sub	sp, #12
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
    return "";
 8016fcc:	4b03      	ldr	r3, [pc, #12]	; (8016fdc <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	370c      	adds	r7, #12
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr
 8016fda:	bf00      	nop
 8016fdc:	08022a90 	.word	0x08022a90

08016fe0 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b082      	sub	sp, #8
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	3394      	adds	r3, #148	; 0x94
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	4798      	blx	r3
 8016ff6:	4603      	mov	r3, r0
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3708      	adds	r7, #8
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8017000:	b480      	push	{r7}
 8017002:	b083      	sub	sp, #12
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
 8017008:	6039      	str	r1, [r7, #0]
    return 0;
 801700a:	2300      	movs	r3, #0
}
 801700c:	4618      	mov	r0, r3
 801700e:	370c      	adds	r7, #12
 8017010:	46bd      	mov	sp, r7
 8017012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017016:	4770      	bx	lr

08017018 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	3388      	adds	r3, #136	; 0x88
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	4798      	blx	r3
 801702e:	4603      	mov	r3, r0
}
 8017030:	4618      	mov	r0, r3
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8017038:	b590      	push	{r4, r7, lr}
 801703a:	b085      	sub	sp, #20
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
 8017040:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	3304      	adds	r3, #4
 8017046:	490e      	ldr	r1, [pc, #56]	; (8017080 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8017048:	4618      	mov	r0, r3
 801704a:	f7f3 fb7d 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	1d1c      	adds	r4, r3, #4
 8017052:	f107 0308 	add.w	r3, r7, #8
 8017056:	6839      	ldr	r1, [r7, #0]
 8017058:	4618      	mov	r0, r3
 801705a:	f7f3 fdd1 	bl	800ac00 <_Z10StringFromPKv>
 801705e:	f107 0308 	add.w	r3, r7, #8
 8017062:	4619      	mov	r1, r3
 8017064:	4620      	mov	r0, r4
 8017066:	f7f3 fb5d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801706a:	f107 0308 	add.w	r3, r7, #8
 801706e:	4618      	mov	r0, r3
 8017070:	f7f3 fadb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return *this;
 8017074:	687b      	ldr	r3, [r7, #4]
}
 8017076:	4618      	mov	r0, r3
 8017078:	3714      	adds	r7, #20
 801707a:	46bd      	mov	sp, r7
 801707c:	bd90      	pop	{r4, r7, pc}
 801707e:	bf00      	nop
 8017080:	08022bc4 	.word	0x08022bc4

08017084 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8017084:	b598      	push	{r3, r4, r7, lr}
 8017086:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8017088:	4b09      	ldr	r3, [pc, #36]	; (80170b0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d10b      	bne.n	80170a8 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8017090:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8017094:	4907      	ldr	r1, [pc, #28]	; (80170b4 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8017096:	200c      	movs	r0, #12
 8017098:	f7f0 fb4c 	bl	8007734 <_ZnwjPKci>
 801709c:	4604      	mov	r4, r0
 801709e:	4620      	mov	r0, r4
 80170a0:	f7ff fa4c 	bl	801653c <_ZN19MockActualCallTraceC1Ev>
 80170a4:	4b02      	ldr	r3, [pc, #8]	; (80170b0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80170a6:	601c      	str	r4, [r3, #0]
    return *instance_;
 80170a8:	4b01      	ldr	r3, [pc, #4]	; (80170b0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80170aa:	681b      	ldr	r3, [r3, #0]
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	bd98      	pop	{r3, r4, r7, pc}
 80170b0:	20000c9c 	.word	0x20000c9c
 80170b4:	08022aa8 	.word	0x08022aa8

080170b8 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	af00      	add	r7, sp, #0
    delete instance_;
 80170bc:	4b06      	ldr	r3, [pc, #24]	; (80170d8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d004      	beq.n	80170ce <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	3204      	adds	r2, #4
 80170c8:	6812      	ldr	r2, [r2, #0]
 80170ca:	4618      	mov	r0, r3
 80170cc:	4790      	blx	r2
    instance_ = NULLPTR;
 80170ce:	4b02      	ldr	r3, [pc, #8]	; (80170d8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80170d0:	2200      	movs	r2, #0
 80170d2:	601a      	str	r2, [r3, #0]
}
 80170d4:	bf00      	nop
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	20000c9c 	.word	0x20000c9c

080170dc <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 80170dc:	b580      	push	{r7, lr}
 80170de:	b082      	sub	sp, #8
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	4618      	mov	r0, r3
 80170e8:	f7fd fe9a 	bl	8014e20 <_ZN14MockActualCallC1Ev>
 80170ec:	4a03      	ldr	r2, [pc, #12]	; (80170fc <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	601a      	str	r2, [r3, #0]
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	4618      	mov	r0, r3
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	08024b50 	.word	0x08024b50

08017100 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8017100:	b580      	push	{r7, lr}
 8017102:	af00      	add	r7, sp, #0
 8017104:	4801      	ldr	r0, [pc, #4]	; (801710c <__tcf_0+0xc>)
 8017106:	f000 f831 	bl	801716c <_ZN21MockIgnoredActualCallD1Ev>
 801710a:	bd80      	pop	{r7, pc}
 801710c:	20000ca0 	.word	0x20000ca0

08017110 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8017110:	b580      	push	{r7, lr}
 8017112:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8017114:	4b12      	ldr	r3, [pc, #72]	; (8017160 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	f3bf 8f5b 	dmb	ish
 801711c:	b2db      	uxtb	r3, r3
 801711e:	f003 0301 	and.w	r3, r3, #1
 8017122:	2b00      	cmp	r3, #0
 8017124:	bf0c      	ite	eq
 8017126:	2301      	moveq	r3, #1
 8017128:	2300      	movne	r3, #0
 801712a:	b2db      	uxtb	r3, r3
 801712c:	2b00      	cmp	r3, #0
 801712e:	d013      	beq.n	8017158 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017130:	480b      	ldr	r0, [pc, #44]	; (8017160 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017132:	f005 fd81 	bl	801cc38 <__cxa_guard_acquire>
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	bf14      	ite	ne
 801713c:	2301      	movne	r3, #1
 801713e:	2300      	moveq	r3, #0
 8017140:	b2db      	uxtb	r3, r3
 8017142:	2b00      	cmp	r3, #0
 8017144:	d008      	beq.n	8017158 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017146:	4807      	ldr	r0, [pc, #28]	; (8017164 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8017148:	f7ff ffc8 	bl	80170dc <_ZN21MockIgnoredActualCallC1Ev>
 801714c:	4804      	ldr	r0, [pc, #16]	; (8017160 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801714e:	f005 fd7f 	bl	801cc50 <__cxa_guard_release>
 8017152:	4805      	ldr	r0, [pc, #20]	; (8017168 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8017154:	f005 fda3 	bl	801cc9e <atexit>
    return call;
 8017158:	4b02      	ldr	r3, [pc, #8]	; (8017164 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801715a:	4618      	mov	r0, r3
 801715c:	bd80      	pop	{r7, pc}
 801715e:	bf00      	nop
 8017160:	20000ca4 	.word	0x20000ca4
 8017164:	20000ca0 	.word	0x20000ca0
 8017168:	08017101 	.word	0x08017101

0801716c <_ZN21MockIgnoredActualCallD1Ev>:
 801716c:	b580      	push	{r7, lr}
 801716e:	b082      	sub	sp, #8
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
 8017174:	4a05      	ldr	r2, [pc, #20]	; (801718c <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	601a      	str	r2, [r3, #0]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	4618      	mov	r0, r3
 801717e:	f7fd fe5f 	bl	8014e40 <_ZN14MockActualCallD1Ev>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	4618      	mov	r0, r3
 8017186:	3708      	adds	r7, #8
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}
 801718c:	08024b50 	.word	0x08024b50

08017190 <_ZN21MockIgnoredActualCallD0Ev>:
 8017190:	b580      	push	{r7, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7ff ffe7 	bl	801716c <_ZN21MockIgnoredActualCallD1Ev>
 801719e:	2104      	movs	r1, #4
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7f0 fadb 	bl	800775c <_ZdlPvj>
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	4618      	mov	r0, r3
 80171aa:	3708      	adds	r7, #8
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
 80171b8:	4a05      	ldr	r2, [pc, #20]	; (80171d0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	601a      	str	r2, [r3, #0]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7f0 fefd 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	4618      	mov	r0, r3
 80171ca:	3708      	adds	r7, #8
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}
 80171d0:	08024a48 	.word	0x08024a48

080171d4 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f7ff ffe7 	bl	80171b0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 80171e2:	2134      	movs	r1, #52	; 0x34
 80171e4:	6878      	ldr	r0, [r7, #4]
 80171e6:	f7f0 fab9 	bl	800775c <_ZdlPvj>
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	4618      	mov	r0, r3
 80171ee:	3708      	adds	r7, #8
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}

080171f4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
 80171fc:	4a05      	ldr	r2, [pc, #20]	; (8017214 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	601a      	str	r2, [r3, #0]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	4618      	mov	r0, r3
 8017206:	f7f0 fedb 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4618      	mov	r0, r3
 801720e:	3708      	adds	r7, #8
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	08024b24 	.word	0x08024b24

08017218 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8017218:	b580      	push	{r7, lr}
 801721a:	b082      	sub	sp, #8
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f7ff ffe7 	bl	80171f4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8017226:	2134      	movs	r1, #52	; 0x34
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7f0 fa97 	bl	800775c <_ZdlPvj>
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	4618      	mov	r0, r3
 8017232:	3708      	adds	r7, #8
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}

08017238 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8017238:	b580      	push	{r7, lr}
 801723a:	b082      	sub	sp, #8
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
 8017240:	4a05      	ldr	r2, [pc, #20]	; (8017258 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	601a      	str	r2, [r3, #0]
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	4618      	mov	r0, r3
 801724a:	f7f0 feb9 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	4618      	mov	r0, r3
 8017252:	3708      	adds	r7, #8
 8017254:	46bd      	mov	sp, r7
 8017256:	bd80      	pop	{r7, pc}
 8017258:	08024af8 	.word	0x08024af8

0801725c <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801725c:	b580      	push	{r7, lr}
 801725e:	b082      	sub	sp, #8
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f7ff ffe7 	bl	8017238 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801726a:	2134      	movs	r1, #52	; 0x34
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f7f0 fa75 	bl	800775c <_ZdlPvj>
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	4618      	mov	r0, r3
 8017276:	3708      	adds	r7, #8
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801727c:	b580      	push	{r7, lr}
 801727e:	b082      	sub	sp, #8
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	4a05      	ldr	r2, [pc, #20]	; (801729c <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	601a      	str	r2, [r3, #0]
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	4618      	mov	r0, r3
 801728e:	f7f0 fe97 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	4618      	mov	r0, r3
 8017296:	3708      	adds	r7, #8
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}
 801729c:	08024acc 	.word	0x08024acc

080172a0 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b082      	sub	sp, #8
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f7ff ffe7 	bl	801727c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80172ae:	2134      	movs	r1, #52	; 0x34
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f7f0 fa53 	bl	800775c <_ZdlPvj>
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	4618      	mov	r0, r3
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	4a05      	ldr	r2, [pc, #20]	; (80172e0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7f0 fe75 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4618      	mov	r0, r3
 80172da:	3708      	adds	r7, #8
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}
 80172e0:	08024a74 	.word	0x08024a74

080172e4 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7ff ffe7 	bl	80172c0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80172f2:	2134      	movs	r1, #52	; 0x34
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7f0 fa31 	bl	800775c <_ZdlPvj>
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	4618      	mov	r0, r3
 80172fe:	3708      	adds	r7, #8
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	4a05      	ldr	r2, [pc, #20]	; (8017324 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	601a      	str	r2, [r3, #0]
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	4618      	mov	r0, r3
 8017316:	f7f0 fe53 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	4618      	mov	r0, r3
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	08024aa0 	.word	0x08024aa0

08017328 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7ff ffe7 	bl	8017304 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8017336:	2134      	movs	r1, #52	; 0x34
 8017338:	6878      	ldr	r0, [r7, #4]
 801733a:	f7f0 fa0f 	bl	800775c <_ZdlPvj>
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	4618      	mov	r0, r3
 8017342:	3708      	adds	r7, #8
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}

08017348 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	4a05      	ldr	r2, [pc, #20]	; (8017368 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	601a      	str	r2, [r3, #0]
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	4618      	mov	r0, r3
 801735a:	f7f0 fe31 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	4618      	mov	r0, r3
 8017362:	3708      	adds	r7, #8
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	080249f0 	.word	0x080249f0

0801736c <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7ff ffe7 	bl	8017348 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801737a:	2134      	movs	r1, #52	; 0x34
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7f0 f9ed 	bl	800775c <_ZdlPvj>
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	4618      	mov	r0, r3
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}

0801738c <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801738c:	b580      	push	{r7, lr}
 801738e:	b082      	sub	sp, #8
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
 8017394:	4a05      	ldr	r2, [pc, #20]	; (80173ac <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	601a      	str	r2, [r3, #0]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	4618      	mov	r0, r3
 801739e:	f7f0 fe0f 	bl	8007fc0 <_ZN11MockFailureD1Ev>
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	4618      	mov	r0, r3
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	08024a1c 	.word	0x08024a1c

080173b0 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	f7ff ffe7 	bl	801738c <_ZN27MockUnexpectedObjectFailureD1Ev>
 80173be:	2134      	movs	r1, #52	; 0x34
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7f0 f9cb 	bl	800775c <_ZdlPvj>
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	4618      	mov	r0, r3
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	3310      	adds	r3, #16
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	683a      	ldr	r2, [r7, #0]
 80173e4:	6839      	ldr	r1, [r7, #0]
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	4798      	blx	r3
 80173ea:	4603      	mov	r3, r0
 80173ec:	4618      	mov	r0, r3
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}

080173f4 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 80173f4:	b480      	push	{r7}
 80173f6:	b083      	sub	sp, #12
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
 80173fc:	6039      	str	r1, [r7, #0]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	4618      	mov	r0, r3
 8017402:	370c      	adds	r7, #12
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr

0801740c <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801740c:	b480      	push	{r7}
 801740e:	b083      	sub	sp, #12
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	6039      	str	r1, [r7, #0]
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	4618      	mov	r0, r3
 801741a:	370c      	adds	r7, #12
 801741c:	46bd      	mov	sp, r7
 801741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017422:	4770      	bx	lr

08017424 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8017424:	b480      	push	{r7}
 8017426:	b085      	sub	sp, #20
 8017428:	af00      	add	r7, sp, #0
 801742a:	60f8      	str	r0, [r7, #12]
 801742c:	60b9      	str	r1, [r7, #8]
 801742e:	607a      	str	r2, [r7, #4]
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	4618      	mov	r0, r3
 8017434:	3714      	adds	r7, #20
 8017436:	46bd      	mov	sp, r7
 8017438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743c:	4770      	bx	lr

0801743e <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801743e:	b480      	push	{r7}
 8017440:	b085      	sub	sp, #20
 8017442:	af00      	add	r7, sp, #0
 8017444:	60f8      	str	r0, [r7, #12]
 8017446:	60b9      	str	r1, [r7, #8]
 8017448:	4613      	mov	r3, r2
 801744a:	71fb      	strb	r3, [r7, #7]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	4618      	mov	r0, r3
 8017450:	3714      	adds	r7, #20
 8017452:	46bd      	mov	sp, r7
 8017454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017458:	4770      	bx	lr

0801745a <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801745a:	b480      	push	{r7}
 801745c:	b085      	sub	sp, #20
 801745e:	af00      	add	r7, sp, #0
 8017460:	60f8      	str	r0, [r7, #12]
 8017462:	60b9      	str	r1, [r7, #8]
 8017464:	607a      	str	r2, [r7, #4]
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	4618      	mov	r0, r3
 801746a:	3714      	adds	r7, #20
 801746c:	46bd      	mov	sp, r7
 801746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017472:	4770      	bx	lr

08017474 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8017474:	b480      	push	{r7}
 8017476:	b085      	sub	sp, #20
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	607a      	str	r2, [r7, #4]
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	4618      	mov	r0, r3
 8017484:	3714      	adds	r7, #20
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr

0801748e <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801748e:	b480      	push	{r7}
 8017490:	b085      	sub	sp, #20
 8017492:	af00      	add	r7, sp, #0
 8017494:	60f8      	str	r0, [r7, #12]
 8017496:	60b9      	str	r1, [r7, #8]
 8017498:	607a      	str	r2, [r7, #4]
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	4618      	mov	r0, r3
 801749e:	3714      	adds	r7, #20
 80174a0:	46bd      	mov	sp, r7
 80174a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a6:	4770      	bx	lr

080174a8 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80174a8:	b480      	push	{r7}
 80174aa:	b085      	sub	sp, #20
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	60f8      	str	r0, [r7, #12]
 80174b0:	60b9      	str	r1, [r7, #8]
 80174b2:	607a      	str	r2, [r7, #4]
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	4618      	mov	r0, r3
 80174b8:	3714      	adds	r7, #20
 80174ba:	46bd      	mov	sp, r7
 80174bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c0:	4770      	bx	lr

080174c2 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 80174c2:	b480      	push	{r7}
 80174c4:	b085      	sub	sp, #20
 80174c6:	af00      	add	r7, sp, #0
 80174c8:	60f8      	str	r0, [r7, #12]
 80174ca:	60b9      	str	r1, [r7, #8]
 80174cc:	4639      	mov	r1, r7
 80174ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	4618      	mov	r0, r3
 80174d6:	3714      	adds	r7, #20
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr

080174e0 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 80174e0:	b480      	push	{r7}
 80174e2:	b085      	sub	sp, #20
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	60f8      	str	r0, [r7, #12]
 80174e8:	60b9      	str	r1, [r7, #8]
 80174ea:	4639      	mov	r1, r7
 80174ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	4618      	mov	r0, r3
 80174f4:	3714      	adds	r7, #20
 80174f6:	46bd      	mov	sp, r7
 80174f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fc:	4770      	bx	lr

080174fe <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 80174fe:	b480      	push	{r7}
 8017500:	b085      	sub	sp, #20
 8017502:	af00      	add	r7, sp, #0
 8017504:	60f8      	str	r0, [r7, #12]
 8017506:	60b9      	str	r1, [r7, #8]
 8017508:	ed87 0b00 	vstr	d0, [r7]
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	4618      	mov	r0, r3
 8017510:	3714      	adds	r7, #20
 8017512:	46bd      	mov	sp, r7
 8017514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017518:	4770      	bx	lr

0801751a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801751a:	b480      	push	{r7}
 801751c:	b087      	sub	sp, #28
 801751e:	af00      	add	r7, sp, #0
 8017520:	6178      	str	r0, [r7, #20]
 8017522:	6139      	str	r1, [r7, #16]
 8017524:	ed87 0b02 	vstr	d0, [r7, #8]
 8017528:	ed87 1b00 	vstr	d1, [r7]
 801752c:	697b      	ldr	r3, [r7, #20]
 801752e:	4618      	mov	r0, r3
 8017530:	371c      	adds	r7, #28
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr

0801753a <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801753a:	b480      	push	{r7}
 801753c:	b085      	sub	sp, #20
 801753e:	af00      	add	r7, sp, #0
 8017540:	60f8      	str	r0, [r7, #12]
 8017542:	60b9      	str	r1, [r7, #8]
 8017544:	607a      	str	r2, [r7, #4]
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	4618      	mov	r0, r3
 801754a:	3714      	adds	r7, #20
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8017554:	b480      	push	{r7}
 8017556:	b085      	sub	sp, #20
 8017558:	af00      	add	r7, sp, #0
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	4618      	mov	r0, r3
 8017564:	3714      	adds	r7, #20
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801756e:	b480      	push	{r7}
 8017570:	b085      	sub	sp, #20
 8017572:	af00      	add	r7, sp, #0
 8017574:	60f8      	str	r0, [r7, #12]
 8017576:	60b9      	str	r1, [r7, #8]
 8017578:	607a      	str	r2, [r7, #4]
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	4618      	mov	r0, r3
 801757e:	3714      	adds	r7, #20
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr

08017588 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8017588:	b480      	push	{r7}
 801758a:	b085      	sub	sp, #20
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	4618      	mov	r0, r3
 8017598:	3714      	adds	r7, #20
 801759a:	46bd      	mov	sp, r7
 801759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a0:	4770      	bx	lr

080175a2 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 80175a2:	b480      	push	{r7}
 80175a4:	b085      	sub	sp, #20
 80175a6:	af00      	add	r7, sp, #0
 80175a8:	60f8      	str	r0, [r7, #12]
 80175aa:	60b9      	str	r1, [r7, #8]
 80175ac:	607a      	str	r2, [r7, #4]
 80175ae:	603b      	str	r3, [r7, #0]
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	4618      	mov	r0, r3
 80175b4:	3714      	adds	r7, #20
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr

080175be <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80175be:	b480      	push	{r7}
 80175c0:	b085      	sub	sp, #20
 80175c2:	af00      	add	r7, sp, #0
 80175c4:	60f8      	str	r0, [r7, #12]
 80175c6:	60b9      	str	r1, [r7, #8]
 80175c8:	607a      	str	r2, [r7, #4]
 80175ca:	603b      	str	r3, [r7, #0]
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	4618      	mov	r0, r3
 80175d0:	3714      	adds	r7, #20
 80175d2:	46bd      	mov	sp, r7
 80175d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d8:	4770      	bx	lr

080175da <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 80175da:	b480      	push	{r7}
 80175dc:	b085      	sub	sp, #20
 80175de:	af00      	add	r7, sp, #0
 80175e0:	60f8      	str	r0, [r7, #12]
 80175e2:	60b9      	str	r1, [r7, #8]
 80175e4:	607a      	str	r2, [r7, #4]
 80175e6:	603b      	str	r3, [r7, #0]
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	4618      	mov	r0, r3
 80175ec:	3714      	adds	r7, #20
 80175ee:	46bd      	mov	sp, r7
 80175f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f4:	4770      	bx	lr

080175f6 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80175f6:	b480      	push	{r7}
 80175f8:	b085      	sub	sp, #20
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	60f8      	str	r0, [r7, #12]
 80175fe:	60b9      	str	r1, [r7, #8]
 8017600:	607a      	str	r2, [r7, #4]
 8017602:	603b      	str	r3, [r7, #0]
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	4618      	mov	r0, r3
 8017608:	3714      	adds	r7, #20
 801760a:	46bd      	mov	sp, r7
 801760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017610:	4770      	bx	lr

08017612 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8017612:	b480      	push	{r7}
 8017614:	b083      	sub	sp, #12
 8017616:	af00      	add	r7, sp, #0
 8017618:	6078      	str	r0, [r7, #4]
 801761a:	6039      	str	r1, [r7, #0]
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	4618      	mov	r0, r3
 8017620:	370c      	adds	r7, #12
 8017622:	46bd      	mov	sp, r7
 8017624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017628:	4770      	bx	lr

0801762a <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801762a:	b480      	push	{r7}
 801762c:	b083      	sub	sp, #12
 801762e:	af00      	add	r7, sp, #0
 8017630:	6078      	str	r0, [r7, #4]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	4618      	mov	r0, r3
 8017636:	370c      	adds	r7, #12
 8017638:	46bd      	mov	sp, r7
 801763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763e:	4770      	bx	lr

08017640 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8017640:	b480      	push	{r7}
 8017642:	b083      	sub	sp, #12
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	460b      	mov	r3, r1
 801764a:	70fb      	strb	r3, [r7, #3]
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4618      	mov	r0, r3
 8017650:	370c      	adds	r7, #12
 8017652:	46bd      	mov	sp, r7
 8017654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017658:	4770      	bx	lr

0801765a <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801765a:	b480      	push	{r7}
 801765c:	b083      	sub	sp, #12
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
 8017662:	6039      	str	r1, [r7, #0]
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	4618      	mov	r0, r3
 8017668:	370c      	adds	r7, #12
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr

08017672 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8017672:	b480      	push	{r7}
 8017674:	b083      	sub	sp, #12
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	6039      	str	r1, [r7, #0]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	4618      	mov	r0, r3
 8017680:	370c      	adds	r7, #12
 8017682:	46bd      	mov	sp, r7
 8017684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017688:	4770      	bx	lr

0801768a <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801768a:	b480      	push	{r7}
 801768c:	b083      	sub	sp, #12
 801768e:	af00      	add	r7, sp, #0
 8017690:	6078      	str	r0, [r7, #4]
 8017692:	6039      	str	r1, [r7, #0]
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	4618      	mov	r0, r3
 8017698:	370c      	adds	r7, #12
 801769a:	46bd      	mov	sp, r7
 801769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a0:	4770      	bx	lr

080176a2 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 80176a2:	b480      	push	{r7}
 80176a4:	b083      	sub	sp, #12
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
 80176aa:	6039      	str	r1, [r7, #0]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	4618      	mov	r0, r3
 80176b0:	370c      	adds	r7, #12
 80176b2:	46bd      	mov	sp, r7
 80176b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b8:	4770      	bx	lr

080176ba <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 80176ba:	b480      	push	{r7}
 80176bc:	b085      	sub	sp, #20
 80176be:	af00      	add	r7, sp, #0
 80176c0:	60f8      	str	r0, [r7, #12]
 80176c2:	1d3b      	adds	r3, r7, #4
 80176c4:	e883 0006 	stmia.w	r3, {r1, r2}
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	4618      	mov	r0, r3
 80176cc:	3714      	adds	r7, #20
 80176ce:	46bd      	mov	sp, r7
 80176d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d4:	4770      	bx	lr

080176d6 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 80176d6:	b480      	push	{r7}
 80176d8:	b085      	sub	sp, #20
 80176da:	af00      	add	r7, sp, #0
 80176dc:	60f8      	str	r0, [r7, #12]
 80176de:	1d3b      	adds	r3, r7, #4
 80176e0:	e883 0006 	stmia.w	r3, {r1, r2}
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	4618      	mov	r0, r3
 80176e8:	3714      	adds	r7, #20
 80176ea:	46bd      	mov	sp, r7
 80176ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f0:	4770      	bx	lr

080176f2 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 80176f2:	b480      	push	{r7}
 80176f4:	b085      	sub	sp, #20
 80176f6:	af00      	add	r7, sp, #0
 80176f8:	60f8      	str	r0, [r7, #12]
 80176fa:	ed87 0b00 	vstr	d0, [r7]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	4618      	mov	r0, r3
 8017702:	3714      	adds	r7, #20
 8017704:	46bd      	mov	sp, r7
 8017706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770a:	4770      	bx	lr

0801770c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801770c:	b480      	push	{r7}
 801770e:	b083      	sub	sp, #12
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	6039      	str	r1, [r7, #0]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	4618      	mov	r0, r3
 801771a:	370c      	adds	r7, #12
 801771c:	46bd      	mov	sp, r7
 801771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017722:	4770      	bx	lr

08017724 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8017724:	b480      	push	{r7}
 8017726:	b083      	sub	sp, #12
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	6039      	str	r1, [r7, #0]
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	4618      	mov	r0, r3
 8017732:	370c      	adds	r7, #12
 8017734:	46bd      	mov	sp, r7
 8017736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773a:	4770      	bx	lr

0801773c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801773c:	b480      	push	{r7}
 801773e:	b083      	sub	sp, #12
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	4618      	mov	r0, r3
 801774a:	370c      	adds	r7, #12
 801774c:	46bd      	mov	sp, r7
 801774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017752:	4770      	bx	lr

08017754 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8017754:	b480      	push	{r7}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	6039      	str	r1, [r7, #0]
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	4618      	mov	r0, r3
 8017762:	370c      	adds	r7, #12
 8017764:	46bd      	mov	sp, r7
 8017766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776a:	4770      	bx	lr

0801776c <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801776c:	b480      	push	{r7}
 801776e:	b083      	sub	sp, #12
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	6039      	str	r1, [r7, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	4618      	mov	r0, r3
 801777a:	370c      	adds	r7, #12
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8017784:	b480      	push	{r7}
 8017786:	b083      	sub	sp, #12
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	4a04      	ldr	r2, [pc, #16]	; (80177a0 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	601a      	str	r2, [r3, #0]
{
}
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	4618      	mov	r0, r3
 8017796:	370c      	adds	r7, #12
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr
 80177a0:	080250f4 	.word	0x080250f4

080177a4 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 80177a4:	b480      	push	{r7}
 80177a6:	b083      	sub	sp, #12
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
 80177ac:	4a04      	ldr	r2, [pc, #16]	; (80177c0 <_ZN16MockExpectedCallD1Ev+0x1c>)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	601a      	str	r2, [r3, #0]
{
}
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	4618      	mov	r0, r3
 80177b6:	370c      	adds	r7, #12
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr
 80177c0:	080250f4 	.word	0x080250f4

080177c4 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
 80177cc:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	3358      	adds	r3, #88	; 0x58
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	6839      	ldr	r1, [r7, #0]
 80177da:	4610      	mov	r0, r2
 80177dc:	4798      	blx	r3
}
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b082      	sub	sp, #8
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	6078      	str	r0, [r7, #4]
 80177ee:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	3304      	adds	r3, #4
 80177f4:	6839      	ldr	r1, [r7, #0]
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7f2 fbcb 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
}
 80177fc:	bf00      	nop
 80177fe:	3708      	adds	r7, #8
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	6039      	str	r1, [r7, #0]
    return functionName_;
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	3304      	adds	r3, #4
 8017812:	4619      	mov	r1, r3
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f7f2 fba4 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	3708      	adds	r7, #8
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}
	...

08017824 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8017824:	b590      	push	{r4, r7, lr}
 8017826:	b085      	sub	sp, #20
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	4618      	mov	r0, r3
 8017832:	f7ff ffa7 	bl	8017784 <_ZN16MockExpectedCallC1Ev>
 8017836:	4a2c      	ldr	r2, [pc, #176]	; (80178e8 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	601a      	str	r2, [r3, #0]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	3304      	adds	r3, #4
 8017840:	492a      	ldr	r1, [pc, #168]	; (80178ec <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017842:	4618      	mov	r0, r3
 8017844:	f7f2 fb39 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2200      	movs	r2, #0
 801784c:	731a      	strb	r2, [r3, #12]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2200      	movs	r2, #0
 8017852:	735a      	strb	r2, [r3, #13]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	2200      	movs	r2, #0
 8017858:	611a      	str	r2, [r3, #16]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	2200      	movs	r2, #0
 801785e:	615a      	str	r2, [r3, #20]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2200      	movs	r2, #0
 8017864:	761a      	strb	r2, [r3, #24]
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801786c:	f107 0308 	add.w	r3, r7, #8
 8017870:	491e      	ldr	r1, [pc, #120]	; (80178ec <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017872:	4618      	mov	r0, r3
 8017874:	f7f2 fb21 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8017878:	f107 0308 	add.w	r3, r7, #8
 801787c:	4619      	mov	r1, r3
 801787e:	4620      	mov	r0, r4
 8017880:	f003 f840 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017884:	f107 0308 	add.w	r3, r7, #8
 8017888:	4618      	mov	r0, r3
 801788a:	f7f2 fece 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2200      	movs	r2, #0
 8017892:	661a      	str	r2, [r3, #96]	; 0x60
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	2200      	movs	r2, #0
 8017898:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2201      	movs	r2, #1
 80178a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2200      	movs	r2, #0
 80178a8:	669a      	str	r2, [r3, #104]	; 0x68
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	683a      	ldr	r2, [r7, #0]
 80178ae:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 80178b0:	2246      	movs	r2, #70	; 0x46
 80178b2:	490f      	ldr	r1, [pc, #60]	; (80178f0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80178b4:	2004      	movs	r0, #4
 80178b6:	f7ef ff3d 	bl	8007734 <_ZnwjPKci>
 80178ba:	4604      	mov	r4, r0
 80178bc:	4620      	mov	r0, r4
 80178be:	f004 ff34 	bl	801c72a <_ZN18MockNamedValueListC1Ev>
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 80178c6:	2247      	movs	r2, #71	; 0x47
 80178c8:	4909      	ldr	r1, [pc, #36]	; (80178f0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80178ca:	2004      	movs	r0, #4
 80178cc:	f7ef ff32 	bl	8007734 <_ZnwjPKci>
 80178d0:	4604      	mov	r4, r0
 80178d2:	4620      	mov	r0, r4
 80178d4:	f004 ff29 	bl	801c72a <_ZN18MockNamedValueListC1Ev>
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	621c      	str	r4, [r3, #32]
}
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	4618      	mov	r0, r3
 80178e0:	3714      	adds	r7, #20
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd90      	pop	{r4, r7, pc}
 80178e6:	bf00      	nop
 80178e8:	08024f38 	.word	0x08024f38
 80178ec:	08022bd0 	.word	0x08022bd0
 80178f0:	08022bd4 	.word	0x08022bd4

080178f4 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b082      	sub	sp, #8
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	4a17      	ldr	r2, [pc, #92]	; (801795c <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	69db      	ldr	r3, [r3, #28]
 8017906:	4618      	mov	r0, r3
 8017908:	f004 ff1d 	bl	801c746 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	69db      	ldr	r3, [r3, #28]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d003      	beq.n	801791c <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8017914:	2104      	movs	r1, #4
 8017916:	4618      	mov	r0, r3
 8017918:	f7ef ff20 	bl	800775c <_ZdlPvj>
    outputParameters_->clear();
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	6a1b      	ldr	r3, [r3, #32]
 8017920:	4618      	mov	r0, r3
 8017922:	f004 ff10 	bl	801c746 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6a1b      	ldr	r3, [r3, #32]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d003      	beq.n	8017936 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801792e:	2104      	movs	r1, #4
 8017930:	4618      	mov	r0, r3
 8017932:	f7ef ff13 	bl	800775c <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	3328      	adds	r3, #40	; 0x28
 801793a:	4618      	mov	r0, r3
 801793c:	f003 f80c 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	3304      	adds	r3, #4
 8017944:	4618      	mov	r0, r3
 8017946:	f7f2 fe70 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4618      	mov	r0, r3
 801794e:	f7ff ff29 	bl	80177a4 <_ZN16MockExpectedCallD1Ev>
}
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	4618      	mov	r0, r3
 8017956:	3708      	adds	r7, #8
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}
 801795c:	08024f38 	.word	0x08024f38

08017960 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
}
 8017968:	6878      	ldr	r0, [r7, #4]
 801796a:	f7ff ffc3 	bl	80178f4 <_ZN23MockCheckedExpectedCallD1Ev>
 801796e:	2170      	movs	r1, #112	; 0x70
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f7ef fef3 	bl	800775c <_ZdlPvj>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	4618      	mov	r0, r3
 801797a:	3708      	adds	r7, #8
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}

08017980 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	6039      	str	r1, [r7, #0]
    setName(name);
 801798a:	6839      	ldr	r1, [r7, #0]
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7ff ff2a 	bl	80177e6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8017992:	687b      	ldr	r3, [r7, #4]
}
 8017994:	4618      	mov	r0, r3
 8017996:	3708      	adds	r7, #8
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801799c:	b590      	push	{r4, r7, lr}
 801799e:	b087      	sub	sp, #28
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	4613      	mov	r3, r2
 80179a8:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80179aa:	225a      	movs	r2, #90	; 0x5a
 80179ac:	490e      	ldr	r1, [pc, #56]	; (80179e8 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 80179ae:	2038      	movs	r0, #56	; 0x38
 80179b0:	f7ef fec0 	bl	8007734 <_ZnwjPKci>
 80179b4:	4604      	mov	r4, r0
 80179b6:	68b9      	ldr	r1, [r7, #8]
 80179b8:	4620      	mov	r0, r4
 80179ba:	f001 f851 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80179be:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	69db      	ldr	r3, [r3, #28]
 80179c4:	6979      	ldr	r1, [r7, #20]
 80179c6:	4618      	mov	r0, r3
 80179c8:	f004 fee0 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	3308      	adds	r3, #8
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	79fa      	ldrb	r2, [r7, #7]
 80179d6:	4611      	mov	r1, r2
 80179d8:	6978      	ldr	r0, [r7, #20]
 80179da:	4798      	blx	r3
    return *this;
 80179dc:	68fb      	ldr	r3, [r7, #12]
}
 80179de:	4618      	mov	r0, r3
 80179e0:	371c      	adds	r7, #28
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd90      	pop	{r4, r7, pc}
 80179e6:	bf00      	nop
 80179e8:	08022bd4 	.word	0x08022bd4

080179ec <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80179ec:	b590      	push	{r4, r7, lr}
 80179ee:	b087      	sub	sp, #28
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	60f8      	str	r0, [r7, #12]
 80179f4:	60b9      	str	r1, [r7, #8]
 80179f6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80179f8:	2262      	movs	r2, #98	; 0x62
 80179fa:	490e      	ldr	r1, [pc, #56]	; (8017a34 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 80179fc:	2038      	movs	r0, #56	; 0x38
 80179fe:	f7ef fe99 	bl	8007734 <_ZnwjPKci>
 8017a02:	4604      	mov	r4, r0
 8017a04:	68b9      	ldr	r1, [r7, #8]
 8017a06:	4620      	mov	r0, r4
 8017a08:	f001 f82a 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017a0c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	69db      	ldr	r3, [r3, #28]
 8017a12:	6979      	ldr	r1, [r7, #20]
 8017a14:	4618      	mov	r0, r3
 8017a16:	f004 feb9 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	3310      	adds	r3, #16
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	6879      	ldr	r1, [r7, #4]
 8017a24:	6978      	ldr	r0, [r7, #20]
 8017a26:	4798      	blx	r3
    return *this;
 8017a28:	68fb      	ldr	r3, [r7, #12]
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	371c      	adds	r7, #28
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd90      	pop	{r4, r7, pc}
 8017a32:	bf00      	nop
 8017a34:	08022bd4 	.word	0x08022bd4

08017a38 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8017a38:	b590      	push	{r4, r7, lr}
 8017a3a:	b087      	sub	sp, #28
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017a44:	226a      	movs	r2, #106	; 0x6a
 8017a46:	490e      	ldr	r1, [pc, #56]	; (8017a80 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8017a48:	2038      	movs	r0, #56	; 0x38
 8017a4a:	f7ef fe73 	bl	8007734 <_ZnwjPKci>
 8017a4e:	4604      	mov	r4, r0
 8017a50:	68b9      	ldr	r1, [r7, #8]
 8017a52:	4620      	mov	r0, r4
 8017a54:	f001 f804 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017a58:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	69db      	ldr	r3, [r3, #28]
 8017a5e:	6979      	ldr	r1, [r7, #20]
 8017a60:	4618      	mov	r0, r3
 8017a62:	f004 fe93 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017a66:	697b      	ldr	r3, [r7, #20]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	330c      	adds	r3, #12
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	6879      	ldr	r1, [r7, #4]
 8017a70:	6978      	ldr	r0, [r7, #20]
 8017a72:	4798      	blx	r3
    return *this;
 8017a74:	68fb      	ldr	r3, [r7, #12]
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	371c      	adds	r7, #28
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd90      	pop	{r4, r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	08022bd4 	.word	0x08022bd4

08017a84 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017a84:	b590      	push	{r4, r7, lr}
 8017a86:	b087      	sub	sp, #28
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	60f8      	str	r0, [r7, #12]
 8017a8c:	60b9      	str	r1, [r7, #8]
 8017a8e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017a90:	2272      	movs	r2, #114	; 0x72
 8017a92:	490e      	ldr	r1, [pc, #56]	; (8017acc <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8017a94:	2038      	movs	r0, #56	; 0x38
 8017a96:	f7ef fe4d 	bl	8007734 <_ZnwjPKci>
 8017a9a:	4604      	mov	r4, r0
 8017a9c:	68b9      	ldr	r1, [r7, #8]
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f000 ffde 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017aa4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	69db      	ldr	r3, [r3, #28]
 8017aaa:	6979      	ldr	r1, [r7, #20]
 8017aac:	4618      	mov	r0, r3
 8017aae:	f004 fe6d 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017ab2:	697b      	ldr	r3, [r7, #20]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	3314      	adds	r3, #20
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	6879      	ldr	r1, [r7, #4]
 8017abc:	6978      	ldr	r0, [r7, #20]
 8017abe:	4798      	blx	r3
    return *this;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	371c      	adds	r7, #28
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd90      	pop	{r4, r7, pc}
 8017aca:	bf00      	nop
 8017acc:	08022bd4 	.word	0x08022bd4

08017ad0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017ad0:	b590      	push	{r4, r7, lr}
 8017ad2:	b087      	sub	sp, #28
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	60f8      	str	r0, [r7, #12]
 8017ad8:	60b9      	str	r1, [r7, #8]
 8017ada:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017adc:	227a      	movs	r2, #122	; 0x7a
 8017ade:	490e      	ldr	r1, [pc, #56]	; (8017b18 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8017ae0:	2038      	movs	r0, #56	; 0x38
 8017ae2:	f7ef fe27 	bl	8007734 <_ZnwjPKci>
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	68b9      	ldr	r1, [r7, #8]
 8017aea:	4620      	mov	r0, r4
 8017aec:	f000 ffb8 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017af0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	69db      	ldr	r3, [r3, #28]
 8017af6:	6979      	ldr	r1, [r7, #20]
 8017af8:	4618      	mov	r0, r3
 8017afa:	f004 fe47 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	3318      	adds	r3, #24
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	6879      	ldr	r1, [r7, #4]
 8017b08:	6978      	ldr	r0, [r7, #20]
 8017b0a:	4798      	blx	r3
    return *this;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	371c      	adds	r7, #28
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd90      	pop	{r4, r7, pc}
 8017b16:	bf00      	nop
 8017b18:	08022bd4 	.word	0x08022bd4

08017b1c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017b1c:	b5b0      	push	{r4, r5, r7, lr}
 8017b1e:	b086      	sub	sp, #24
 8017b20:	af02      	add	r7, sp, #8
 8017b22:	60f8      	str	r0, [r7, #12]
 8017b24:	60b9      	str	r1, [r7, #8]
 8017b26:	4639      	mov	r1, r7
 8017b28:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017b2c:	f7f9 fda8 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8017b30:	4604      	mov	r4, r0
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	3368      	adds	r3, #104	; 0x68
 8017b36:	681d      	ldr	r5, [r3, #0]
 8017b38:	f7f9 fdb2 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	9300      	str	r3, [sp, #0]
 8017b40:	2396      	movs	r3, #150	; 0x96
 8017b42:	4a04      	ldr	r2, [pc, #16]	; (8017b54 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8017b44:	4904      	ldr	r1, [pc, #16]	; (8017b58 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017b46:	4620      	mov	r0, r4
 8017b48:	47a8      	blx	r5
    return *this;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3710      	adds	r7, #16
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bdb0      	pop	{r4, r5, r7, pc}
 8017b54:	08022bd4 	.word	0x08022bd4
 8017b58:	08022bf0 	.word	0x08022bf0

08017b5c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017b5c:	b5b0      	push	{r4, r5, r7, lr}
 8017b5e:	b086      	sub	sp, #24
 8017b60:	af02      	add	r7, sp, #8
 8017b62:	60f8      	str	r0, [r7, #12]
 8017b64:	60b9      	str	r1, [r7, #8]
 8017b66:	4639      	mov	r1, r7
 8017b68:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017b6c:	f7f9 fd88 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8017b70:	4604      	mov	r4, r0
 8017b72:	6823      	ldr	r3, [r4, #0]
 8017b74:	3368      	adds	r3, #104	; 0x68
 8017b76:	681d      	ldr	r5, [r3, #0]
 8017b78:	f7f9 fd92 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	9300      	str	r3, [sp, #0]
 8017b80:	239c      	movs	r3, #156	; 0x9c
 8017b82:	4a04      	ldr	r2, [pc, #16]	; (8017b94 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8017b84:	4904      	ldr	r1, [pc, #16]	; (8017b98 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017b86:	4620      	mov	r0, r4
 8017b88:	47a8      	blx	r5
    return *this;
 8017b8a:	68fb      	ldr	r3, [r7, #12]
}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3710      	adds	r7, #16
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bdb0      	pop	{r4, r5, r7, pc}
 8017b94:	08022bd4 	.word	0x08022bd4
 8017b98:	08022c10 	.word	0x08022c10

08017b9c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 8017b9c:	b590      	push	{r4, r7, lr}
 8017b9e:	b087      	sub	sp, #28
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017baa:	22a4      	movs	r2, #164	; 0xa4
 8017bac:	490e      	ldr	r1, [pc, #56]	; (8017be8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 8017bae:	2038      	movs	r0, #56	; 0x38
 8017bb0:	f7ef fdc0 	bl	8007734 <_ZnwjPKci>
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	68b9      	ldr	r1, [r7, #8]
 8017bb8:	4620      	mov	r0, r4
 8017bba:	f000 ff51 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017bbe:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	69db      	ldr	r3, [r3, #28]
 8017bc4:	6979      	ldr	r1, [r7, #20]
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f004 fde0 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	3324      	adds	r3, #36	; 0x24
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	ed97 0b00 	vldr	d0, [r7]
 8017bd8:	6978      	ldr	r0, [r7, #20]
 8017bda:	4798      	blx	r3
    return *this;
 8017bdc:	68fb      	ldr	r3, [r7, #12]
}
 8017bde:	4618      	mov	r0, r3
 8017be0:	371c      	adds	r7, #28
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd90      	pop	{r4, r7, pc}
 8017be6:	bf00      	nop
 8017be8:	08022bd4 	.word	0x08022bd4

08017bec <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 8017bec:	b590      	push	{r4, r7, lr}
 8017bee:	b089      	sub	sp, #36	; 0x24
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6178      	str	r0, [r7, #20]
 8017bf4:	6139      	str	r1, [r7, #16]
 8017bf6:	ed87 0b02 	vstr	d0, [r7, #8]
 8017bfa:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017bfe:	22ac      	movs	r2, #172	; 0xac
 8017c00:	490f      	ldr	r1, [pc, #60]	; (8017c40 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8017c02:	2038      	movs	r0, #56	; 0x38
 8017c04:	f7ef fd96 	bl	8007734 <_ZnwjPKci>
 8017c08:	4604      	mov	r4, r0
 8017c0a:	6939      	ldr	r1, [r7, #16]
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f000 ff27 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017c12:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	69db      	ldr	r3, [r3, #28]
 8017c18:	69f9      	ldr	r1, [r7, #28]
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f004 fdb6 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8017c20:	69fb      	ldr	r3, [r7, #28]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	3328      	adds	r3, #40	; 0x28
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	ed97 1b00 	vldr	d1, [r7]
 8017c2c:	ed97 0b02 	vldr	d0, [r7, #8]
 8017c30:	69f8      	ldr	r0, [r7, #28]
 8017c32:	4798      	blx	r3
    return *this;
 8017c34:	697b      	ldr	r3, [r7, #20]
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3724      	adds	r7, #36	; 0x24
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd90      	pop	{r4, r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	08022bd4 	.word	0x08022bd4

08017c44 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8017c44:	b590      	push	{r4, r7, lr}
 8017c46:	b087      	sub	sp, #28
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	60f8      	str	r0, [r7, #12]
 8017c4c:	60b9      	str	r1, [r7, #8]
 8017c4e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017c50:	22b4      	movs	r2, #180	; 0xb4
 8017c52:	490e      	ldr	r1, [pc, #56]	; (8017c8c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8017c54:	2038      	movs	r0, #56	; 0x38
 8017c56:	f7ef fd6d 	bl	8007734 <_ZnwjPKci>
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	68b9      	ldr	r1, [r7, #8]
 8017c5e:	4620      	mov	r0, r4
 8017c60:	f000 fefe 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017c64:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	69db      	ldr	r3, [r3, #28]
 8017c6a:	6979      	ldr	r1, [r7, #20]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f004 fd8d 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	3338      	adds	r3, #56	; 0x38
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	6879      	ldr	r1, [r7, #4]
 8017c7c:	6978      	ldr	r0, [r7, #20]
 8017c7e:	4798      	blx	r3
    return *this;
 8017c80:	68fb      	ldr	r3, [r7, #12]
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	371c      	adds	r7, #28
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd90      	pop	{r4, r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	08022bd4 	.word	0x08022bd4

08017c90 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017c90:	b590      	push	{r4, r7, lr}
 8017c92:	b087      	sub	sp, #28
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017c9c:	22bc      	movs	r2, #188	; 0xbc
 8017c9e:	490e      	ldr	r1, [pc, #56]	; (8017cd8 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8017ca0:	2038      	movs	r0, #56	; 0x38
 8017ca2:	f7ef fd47 	bl	8007734 <_ZnwjPKci>
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	68b9      	ldr	r1, [r7, #8]
 8017caa:	4620      	mov	r0, r4
 8017cac:	f000 fed8 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017cb0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	69db      	ldr	r3, [r3, #28]
 8017cb6:	6979      	ldr	r1, [r7, #20]
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f004 fd67 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017cbe:	697b      	ldr	r3, [r7, #20]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	332c      	adds	r3, #44	; 0x2c
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	6879      	ldr	r1, [r7, #4]
 8017cc8:	6978      	ldr	r0, [r7, #20]
 8017cca:	4798      	blx	r3
    return *this;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	371c      	adds	r7, #28
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd90      	pop	{r4, r7, pc}
 8017cd6:	bf00      	nop
 8017cd8:	08022bd4 	.word	0x08022bd4

08017cdc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017cdc:	b590      	push	{r4, r7, lr}
 8017cde:	b087      	sub	sp, #28
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	60f8      	str	r0, [r7, #12]
 8017ce4:	60b9      	str	r1, [r7, #8]
 8017ce6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017ce8:	22c4      	movs	r2, #196	; 0xc4
 8017cea:	490e      	ldr	r1, [pc, #56]	; (8017d24 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 8017cec:	2038      	movs	r0, #56	; 0x38
 8017cee:	f7ef fd21 	bl	8007734 <_ZnwjPKci>
 8017cf2:	4604      	mov	r4, r0
 8017cf4:	68b9      	ldr	r1, [r7, #8]
 8017cf6:	4620      	mov	r0, r4
 8017cf8:	f000 feb2 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017cfc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	69db      	ldr	r3, [r3, #28]
 8017d02:	6979      	ldr	r1, [r7, #20]
 8017d04:	4618      	mov	r0, r3
 8017d06:	f004 fd41 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	3330      	adds	r3, #48	; 0x30
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	6879      	ldr	r1, [r7, #4]
 8017d14:	6978      	ldr	r0, [r7, #20]
 8017d16:	4798      	blx	r3
    return *this;
 8017d18:	68fb      	ldr	r3, [r7, #12]
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	371c      	adds	r7, #28
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd90      	pop	{r4, r7, pc}
 8017d22:	bf00      	nop
 8017d24:	08022bd4 	.word	0x08022bd4

08017d28 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017d28:	b590      	push	{r4, r7, lr}
 8017d2a:	b087      	sub	sp, #28
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	60f8      	str	r0, [r7, #12]
 8017d30:	60b9      	str	r1, [r7, #8]
 8017d32:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017d34:	22cc      	movs	r2, #204	; 0xcc
 8017d36:	490e      	ldr	r1, [pc, #56]	; (8017d70 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8017d38:	2038      	movs	r0, #56	; 0x38
 8017d3a:	f7ef fcfb 	bl	8007734 <_ZnwjPKci>
 8017d3e:	4604      	mov	r4, r0
 8017d40:	68b9      	ldr	r1, [r7, #8]
 8017d42:	4620      	mov	r0, r4
 8017d44:	f000 fe8c 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017d48:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	69db      	ldr	r3, [r3, #28]
 8017d4e:	6979      	ldr	r1, [r7, #20]
 8017d50:	4618      	mov	r0, r3
 8017d52:	f004 fd1b 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	3334      	adds	r3, #52	; 0x34
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	6879      	ldr	r1, [r7, #4]
 8017d60:	6978      	ldr	r0, [r7, #20]
 8017d62:	4798      	blx	r3
    return *this;
 8017d64:	68fb      	ldr	r3, [r7, #12]
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	371c      	adds	r7, #28
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd90      	pop	{r4, r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	08022bd4 	.word	0x08022bd4

08017d74 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017d74:	b590      	push	{r4, r7, lr}
 8017d76:	b087      	sub	sp, #28
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	60f8      	str	r0, [r7, #12]
 8017d7c:	60b9      	str	r1, [r7, #8]
 8017d7e:	607a      	str	r2, [r7, #4]
 8017d80:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017d82:	22d4      	movs	r2, #212	; 0xd4
 8017d84:	490e      	ldr	r1, [pc, #56]	; (8017dc0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8017d86:	2038      	movs	r0, #56	; 0x38
 8017d88:	f7ef fcd4 	bl	8007734 <_ZnwjPKci>
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	68b9      	ldr	r1, [r7, #8]
 8017d90:	4620      	mov	r0, r4
 8017d92:	f000 fe65 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017d96:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	69db      	ldr	r3, [r3, #28]
 8017d9c:	6979      	ldr	r1, [r7, #20]
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f004 fcf4 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	333c      	adds	r3, #60	; 0x3c
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	683a      	ldr	r2, [r7, #0]
 8017dae:	6879      	ldr	r1, [r7, #4]
 8017db0:	6978      	ldr	r0, [r7, #20]
 8017db2:	4798      	blx	r3
    return *this;
 8017db4:	68fb      	ldr	r3, [r7, #12]
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	371c      	adds	r7, #28
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd90      	pop	{r4, r7, pc}
 8017dbe:	bf00      	nop
 8017dc0:	08022bd4 	.word	0x08022bd4

08017dc4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017dc4:	b590      	push	{r4, r7, lr}
 8017dc6:	b087      	sub	sp, #28
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	607a      	str	r2, [r7, #4]
 8017dd0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017dd2:	22dc      	movs	r2, #220	; 0xdc
 8017dd4:	490e      	ldr	r1, [pc, #56]	; (8017e10 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 8017dd6:	2038      	movs	r0, #56	; 0x38
 8017dd8:	f7ef fcac 	bl	8007734 <_ZnwjPKci>
 8017ddc:	4604      	mov	r4, r0
 8017dde:	6879      	ldr	r1, [r7, #4]
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 fe3d 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017de6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	69db      	ldr	r3, [r3, #28]
 8017dec:	6979      	ldr	r1, [r7, #20]
 8017dee:	4618      	mov	r0, r3
 8017df0:	f004 fccc 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	3340      	adds	r3, #64	; 0x40
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	683a      	ldr	r2, [r7, #0]
 8017dfe:	68b9      	ldr	r1, [r7, #8]
 8017e00:	6978      	ldr	r0, [r7, #20]
 8017e02:	4798      	blx	r3
    return *this;
 8017e04:	68fb      	ldr	r3, [r7, #12]
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	371c      	adds	r7, #28
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd90      	pop	{r4, r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	08022bd4 	.word	0x08022bd4

08017e14 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8017e14:	b590      	push	{r4, r7, lr}
 8017e16:	b087      	sub	sp, #28
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
 8017e20:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017e22:	22e4      	movs	r2, #228	; 0xe4
 8017e24:	4911      	ldr	r1, [pc, #68]	; (8017e6c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8017e26:	2038      	movs	r0, #56	; 0x38
 8017e28:	f7ef fc84 	bl	8007734 <_ZnwjPKci>
 8017e2c:	4604      	mov	r4, r0
 8017e2e:	68b9      	ldr	r1, [r7, #8]
 8017e30:	4620      	mov	r0, r4
 8017e32:	f000 fe15 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017e36:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	6a1b      	ldr	r3, [r3, #32]
 8017e3c:	6979      	ldr	r1, [r7, #20]
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f004 fca4 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017e44:	697b      	ldr	r3, [r7, #20]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	3330      	adds	r3, #48	; 0x30
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	6879      	ldr	r1, [r7, #4]
 8017e4e:	6978      	ldr	r0, [r7, #20]
 8017e50:	4798      	blx	r3
    newParameter->setSize(size);
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	3348      	adds	r3, #72	; 0x48
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	6839      	ldr	r1, [r7, #0]
 8017e5c:	6978      	ldr	r0, [r7, #20]
 8017e5e:	4798      	blx	r3
    return *this;
 8017e60:	68fb      	ldr	r3, [r7, #12]
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	371c      	adds	r7, #28
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd90      	pop	{r4, r7, pc}
 8017e6a:	bf00      	nop
 8017e6c:	08022bd4 	.word	0x08022bd4

08017e70 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8017e70:	b590      	push	{r4, r7, lr}
 8017e72:	b087      	sub	sp, #28
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	60f8      	str	r0, [r7, #12]
 8017e78:	60b9      	str	r1, [r7, #8]
 8017e7a:	607a      	str	r2, [r7, #4]
 8017e7c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017e7e:	22ed      	movs	r2, #237	; 0xed
 8017e80:	490e      	ldr	r1, [pc, #56]	; (8017ebc <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8017e82:	2038      	movs	r0, #56	; 0x38
 8017e84:	f7ef fc56 	bl	8007734 <_ZnwjPKci>
 8017e88:	4604      	mov	r4, r0
 8017e8a:	6879      	ldr	r1, [r7, #4]
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f000 fde7 	bl	8018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017e92:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	6a1b      	ldr	r3, [r3, #32]
 8017e98:	6979      	ldr	r1, [r7, #20]
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f004 fc76 	bl	801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	3340      	adds	r3, #64	; 0x40
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	683a      	ldr	r2, [r7, #0]
 8017eaa:	68b9      	ldr	r1, [r7, #8]
 8017eac:	6978      	ldr	r0, [r7, #20]
 8017eae:	4798      	blx	r3
    return *this;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
}
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	371c      	adds	r7, #28
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd90      	pop	{r4, r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	08022bd4 	.word	0x08022bd4

08017ec0 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 8017ec0:	b590      	push	{r4, r7, lr}
 8017ec2:	b083      	sub	sp, #12
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	3318      	adds	r3, #24
 8017ed0:	681c      	ldr	r4, [r3, #0]
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	6839      	ldr	r1, [r7, #0]
 8017ed8:	6878      	ldr	r0, [r7, #4]
 8017eda:	47a0      	blx	r4
 8017edc:	4603      	mov	r3, r0
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	370c      	adds	r7, #12
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd90      	pop	{r4, r7, pc}
	...

08017ee8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b086      	sub	sp, #24
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017ef4:	68bb      	ldr	r3, [r7, #8]
 8017ef6:	69db      	ldr	r3, [r3, #28]
 8017ef8:	6879      	ldr	r1, [r7, #4]
 8017efa:	4618      	mov	r0, r3
 8017efc:	f004 fc7c 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017f00:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8017f02:	697b      	ldr	r3, [r7, #20]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d008      	beq.n	8017f1a <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8017f08:	697b      	ldr	r3, [r7, #20]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	3360      	adds	r3, #96	; 0x60
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	68fa      	ldr	r2, [r7, #12]
 8017f12:	6979      	ldr	r1, [r7, #20]
 8017f14:	4610      	mov	r0, r2
 8017f16:	4798      	blx	r3
 8017f18:	e004      	b.n	8017f24 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	4903      	ldr	r1, [pc, #12]	; (8017f2c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7f2 fe10 	bl	800ab44 <_Z10StringFromPKc>
}
 8017f24:	68f8      	ldr	r0, [r7, #12]
 8017f26:	3718      	adds	r7, #24
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd80      	pop	{r7, pc}
 8017f2c:	08022bd0 	.word	0x08022bd0

08017f30 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b084      	sub	sp, #16
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	69db      	ldr	r3, [r3, #28]
 8017f3e:	6839      	ldr	r1, [r7, #0]
 8017f40:	4618      	mov	r0, r3
 8017f42:	f004 fc59 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017f46:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	bf14      	ite	ne
 8017f4e:	2301      	movne	r3, #1
 8017f50:	2300      	moveq	r3, #0
 8017f52:	b2db      	uxtb	r3, r3
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	3710      	adds	r7, #16
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}

08017f5c <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b084      	sub	sp, #16
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6a1b      	ldr	r3, [r3, #32]
 8017f6a:	6839      	ldr	r1, [r7, #0]
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	f004 fc43 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017f72:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	bf14      	ite	ne
 8017f7a:	2301      	movne	r3, #1
 8017f7c:	2300      	moveq	r3, #0
 8017f7e:	b2db      	uxtb	r3, r3
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3710      	adds	r7, #16
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8017f88:	b590      	push	{r4, r7, lr}
 8017f8a:	b089      	sub	sp, #36	; 0x24
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	69db      	ldr	r3, [r3, #28]
 8017f98:	6879      	ldr	r1, [r7, #4]
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f004 fc2c 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017fa0:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8017fa2:	2400      	movs	r4, #0
 8017fa4:	69fb      	ldr	r3, [r7, #28]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d004      	beq.n	8017fb4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 8017faa:	69f9      	ldr	r1, [r7, #28]
 8017fac:	68f8      	ldr	r0, [r7, #12]
 8017fae:	f7f0 f829 	bl	8008004 <_ZN14MockNamedValueC1ERKS_>
 8017fb2:	e00c      	b.n	8017fce <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8017fb4:	f107 0314 	add.w	r3, r7, #20
 8017fb8:	490a      	ldr	r1, [pc, #40]	; (8017fe4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7f1 ff7d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8017fc0:	2401      	movs	r4, #1
 8017fc2:	f107 0314 	add.w	r3, r7, #20
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	68f8      	ldr	r0, [r7, #12]
 8017fca:	f002 fc9b 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017fce:	2c00      	cmp	r4, #0
 8017fd0:	d004      	beq.n	8017fdc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8017fd2:	f107 0314 	add.w	r3, r7, #20
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f7f2 fb27 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8017fdc:	68f8      	ldr	r0, [r7, #12]
 8017fde:	3724      	adds	r7, #36	; 0x24
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd90      	pop	{r4, r7, pc}
 8017fe4:	08022bd0 	.word	0x08022bd0

08017fe8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8017fe8:	b590      	push	{r4, r7, lr}
 8017fea:	b089      	sub	sp, #36	; 0x24
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	60f8      	str	r0, [r7, #12]
 8017ff0:	60b9      	str	r1, [r7, #8]
 8017ff2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	6a1b      	ldr	r3, [r3, #32]
 8017ff8:	6879      	ldr	r1, [r7, #4]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f004 fbfc 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018000:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018002:	2400      	movs	r4, #0
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d004      	beq.n	8018014 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801800a:	69f9      	ldr	r1, [r7, #28]
 801800c:	68f8      	ldr	r0, [r7, #12]
 801800e:	f7ef fff9 	bl	8008004 <_ZN14MockNamedValueC1ERKS_>
 8018012:	e00c      	b.n	801802e <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8018014:	f107 0314 	add.w	r3, r7, #20
 8018018:	490a      	ldr	r1, [pc, #40]	; (8018044 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801801a:	4618      	mov	r0, r3
 801801c:	f7f1 ff4d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8018020:	2401      	movs	r4, #1
 8018022:	f107 0314 	add.w	r3, r7, #20
 8018026:	4619      	mov	r1, r3
 8018028:	68f8      	ldr	r0, [r7, #12]
 801802a:	f002 fc6b 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 801802e:	2c00      	cmp	r4, #0
 8018030:	d004      	beq.n	801803c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8018032:	f107 0314 	add.w	r3, r7, #20
 8018036:	4618      	mov	r0, r3
 8018038:	f7f2 faf7 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 801803c:	68f8      	ldr	r0, [r7, #12]
 801803e:	3724      	adds	r7, #36	; 0x24
 8018040:	46bd      	mov	sp, r7
 8018042:	bd90      	pop	{r4, r7, pc}
 8018044:	08022bd0 	.word	0x08022bd0

08018048 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b084      	sub	sp, #16
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	69db      	ldr	r3, [r3, #28]
 8018054:	4618      	mov	r0, r3
 8018056:	f004 fbfe 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 801805a:	60f8      	str	r0, [r7, #12]
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d014      	beq.n	801808c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8018062:	68f9      	ldr	r1, [r7, #12]
 8018064:	6878      	ldr	r0, [r7, #4]
 8018066:	f000 fced 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801806a:	4603      	mov	r3, r0
 801806c:	4618      	mov	r0, r3
 801806e:	f000 fd1f 	bl	8018ab0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018072:	4603      	mov	r3, r0
 8018074:	f083 0301 	eor.w	r3, r3, #1
 8018078:	b2db      	uxtb	r3, r3
 801807a:	2b00      	cmp	r3, #0
 801807c:	d001      	beq.n	8018082 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801807e:	2300      	movs	r3, #0
 8018080:	e023      	b.n	80180ca <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018082:	68f8      	ldr	r0, [r7, #12]
 8018084:	f004 faf0 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8018088:	60f8      	str	r0, [r7, #12]
 801808a:	e7e7      	b.n	801805c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6a1b      	ldr	r3, [r3, #32]
 8018090:	4618      	mov	r0, r3
 8018092:	f004 fbe0 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8018096:	60f8      	str	r0, [r7, #12]
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d014      	beq.n	80180c8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801809e:	68f9      	ldr	r1, [r7, #12]
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f000 fccf 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80180a6:	4603      	mov	r3, r0
 80180a8:	4618      	mov	r0, r3
 80180aa:	f000 fd01 	bl	8018ab0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80180ae:	4603      	mov	r3, r0
 80180b0:	f083 0301 	eor.w	r3, r3, #1
 80180b4:	b2db      	uxtb	r3, r3
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d001      	beq.n	80180be <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 80180ba:	2300      	movs	r3, #0
 80180bc:	e005      	b.n	80180ca <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 80180be:	68f8      	ldr	r0, [r7, #12]
 80180c0:	f004 fad2 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 80180c4:	60f8      	str	r0, [r7, #12]
 80180c6:	e7e7      	b.n	8018098 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 80180c8:	2301      	movs	r3, #1
}
 80180ca:	4618      	mov	r0, r3
 80180cc:	3710      	adds	r7, #16
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}

080180d2 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 80180d2:	b480      	push	{r7}
 80180d4:	b083      	sub	sp, #12
 80180d6:	af00      	add	r7, sp, #0
 80180d8:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2201      	movs	r2, #1
 80180de:	731a      	strb	r2, [r3, #12]
    return *this;
 80180e0:	687b      	ldr	r3, [r7, #4]
}
 80180e2:	4618      	mov	r0, r3
 80180e4:	370c      	adds	r7, #12
 80180e6:	46bd      	mov	sp, r7
 80180e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ec:	4770      	bx	lr

080180ee <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 80180ee:	b480      	push	{r7}
 80180f0:	b083      	sub	sp, #12
 80180f2:	af00      	add	r7, sp, #0
 80180f4:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180fe:	429a      	cmp	r2, r3
 8018100:	bf0c      	ite	eq
 8018102:	2301      	moveq	r3, #1
 8018104:	2300      	movne	r3, #0
 8018106:	b2db      	uxtb	r3, r3
}
 8018108:	4618      	mov	r0, r3
 801810a:	370c      	adds	r7, #12
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr

08018114 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8018114:	b480      	push	{r7}
 8018116:	b083      	sub	sp, #12
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018124:	429a      	cmp	r2, r3
 8018126:	bf34      	ite	cc
 8018128:	2301      	movcc	r3, #1
 801812a:	2300      	movcs	r3, #0
 801812c:	b2db      	uxtb	r3, r3
}
 801812e:	4618      	mov	r0, r3
 8018130:	370c      	adds	r7, #12
 8018132:	46bd      	mov	sp, r7
 8018134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018138:	4770      	bx	lr

0801813a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801813a:	b580      	push	{r7, lr}
 801813c:	b082      	sub	sp, #8
 801813e:	af00      	add	r7, sp, #0
 8018140:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	33cc      	adds	r3, #204	; 0xcc
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	4798      	blx	r3
 801814e:	4603      	mov	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d00c      	beq.n	801816e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	7b1b      	ldrb	r3, [r3, #12]
 8018158:	f083 0301 	eor.w	r3, r3, #1
 801815c:	b2db      	uxtb	r3, r3
 801815e:	2b00      	cmp	r3, #0
 8018160:	d103      	bne.n	801816a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	7b5b      	ldrb	r3, [r3, #13]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d001      	beq.n	801816e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801816a:	2301      	movs	r3, #1
 801816c:	e000      	b.n	8018170 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801816e:	2300      	movs	r3, #0
}
 8018170:	4618      	mov	r0, r3
 8018172:	3708      	adds	r7, #8
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}

08018178 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b082      	sub	sp, #8
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	33d0      	adds	r3, #208	; 0xd0
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	4798      	blx	r3
 801818c:	4603      	mov	r3, r0
 801818e:	2b00      	cmp	r3, #0
 8018190:	d006      	beq.n	80181a0 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8018198:	2b00      	cmp	r3, #0
 801819a:	d001      	beq.n	80181a0 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801819c:	2301      	movs	r3, #1
 801819e:	e000      	b.n	80181a2 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 80181a0:	2300      	movs	r3, #0
}
 80181a2:	4618      	mov	r0, r3
 80181a4:	3708      	adds	r7, #8
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}

080181aa <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 80181aa:	b580      	push	{r7, lr}
 80181ac:	b082      	sub	sp, #8
 80181ae:	af00      	add	r7, sp, #0
 80181b0:	6078      	str	r0, [r7, #4]
 80181b2:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80181b8:	1c5a      	adds	r2, r3, #1
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	691b      	ldr	r3, [r3, #16]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d00c      	beq.n	80181e0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 80181ca:	683a      	ldr	r2, [r7, #0]
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d304      	bcc.n	80181da <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	695b      	ldr	r3, [r3, #20]
 80181d4:	683a      	ldr	r2, [r7, #0]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d902      	bls.n	80181e0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2201      	movs	r2, #1
 80181de:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	33ec      	adds	r3, #236	; 0xec
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	4798      	blx	r3
}
 80181ec:	bf00      	nop
 80181ee:	3708      	adds	r7, #8
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}

080181f4 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 80181f4:	b480      	push	{r7}
 80181f6:	b083      	sub	sp, #12
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2201      	movs	r2, #1
 8018200:	735a      	strb	r2, [r3, #13]
}
 8018202:	bf00      	nop
 8018204:	370c      	adds	r7, #12
 8018206:	46bd      	mov	sp, r7
 8018208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820c:	4770      	bx	lr

0801820e <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801820e:	b480      	push	{r7}
 8018210:	b083      	sub	sp, #12
 8018212:	af00      	add	r7, sp, #0
 8018214:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2201      	movs	r2, #1
 801821a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801821e:	bf00      	nop
 8018220:	370c      	adds	r7, #12
 8018222:	46bd      	mov	sp, r7
 8018224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018228:	4770      	bx	lr

0801822a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801822a:	b580      	push	{r7, lr}
 801822c:	b084      	sub	sp, #16
 801822e:	af00      	add	r7, sp, #0
 8018230:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018238:	f083 0301 	eor.w	r3, r3, #1
 801823c:	b2da      	uxtb	r2, r3
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2200      	movs	r2, #0
 8018248:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	69db      	ldr	r3, [r3, #28]
 801824e:	4618      	mov	r0, r3
 8018250:	f004 fb01 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8018254:	60f8      	str	r0, [r7, #12]
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d00d      	beq.n	8018278 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801825c:	68f9      	ldr	r1, [r7, #12]
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f000 fbf0 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018264:	4603      	mov	r3, r0
 8018266:	2100      	movs	r1, #0
 8018268:	4618      	mov	r0, r3
 801826a:	f000 fc11 	bl	8018a90 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801826e:	68f8      	ldr	r0, [r7, #12]
 8018270:	f004 f9fa 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8018274:	60f8      	str	r0, [r7, #12]
 8018276:	e7ee      	b.n	8018256 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6a1b      	ldr	r3, [r3, #32]
 801827c:	4618      	mov	r0, r3
 801827e:	f004 faea 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8018282:	60f8      	str	r0, [r7, #12]
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d00d      	beq.n	80182a6 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801828a:	68f9      	ldr	r1, [r7, #12]
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f000 fbd9 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018292:	4603      	mov	r3, r0
 8018294:	2100      	movs	r1, #0
 8018296:	4618      	mov	r0, r3
 8018298:	f000 fbfa 	bl	8018a90 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f004 f9e3 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 80182a2:	60f8      	str	r0, [r7, #12]
 80182a4:	e7ee      	b.n	8018284 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 80182a6:	bf00      	nop
 80182a8:	3710      	adds	r7, #16
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}

080182ae <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 80182ae:	b590      	push	{r4, r7, lr}
 80182b0:	b087      	sub	sp, #28
 80182b2:	af00      	add	r7, sp, #0
 80182b4:	6078      	str	r0, [r7, #4]
 80182b6:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	69db      	ldr	r3, [r3, #28]
 80182bc:	4618      	mov	r0, r3
 80182be:	f004 faca 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80182c2:	6178      	str	r0, [r7, #20]
 80182c4:	697b      	ldr	r3, [r7, #20]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d022      	beq.n	8018310 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 80182ca:	f107 030c 	add.w	r3, r7, #12
 80182ce:	6979      	ldr	r1, [r7, #20]
 80182d0:	4618      	mov	r0, r3
 80182d2:	f004 fa04 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 80182d6:	f107 030c 	add.w	r3, r7, #12
 80182da:	6839      	ldr	r1, [r7, #0]
 80182dc:	4618      	mov	r0, r3
 80182de:	f7f2 f9b0 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80182e2:	4603      	mov	r3, r0
 80182e4:	461c      	mov	r4, r3
 80182e6:	f107 030c 	add.w	r3, r7, #12
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7f2 f99d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80182f0:	2c00      	cmp	r4, #0
 80182f2:	d008      	beq.n	8018306 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80182f4:	6979      	ldr	r1, [r7, #20]
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f000 fba4 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2101      	movs	r1, #1
 8018300:	4618      	mov	r0, r3
 8018302:	f000 fbc5 	bl	8018a90 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8018306:	6978      	ldr	r0, [r7, #20]
 8018308:	f004 f9ae 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801830c:	6178      	str	r0, [r7, #20]
 801830e:	e7d9      	b.n	80182c4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8018310:	bf00      	nop
 8018312:	371c      	adds	r7, #28
 8018314:	46bd      	mov	sp, r7
 8018316:	bd90      	pop	{r4, r7, pc}

08018318 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8018318:	b590      	push	{r4, r7, lr}
 801831a:	b087      	sub	sp, #28
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6a1b      	ldr	r3, [r3, #32]
 8018326:	4618      	mov	r0, r3
 8018328:	f004 fa95 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 801832c:	6178      	str	r0, [r7, #20]
 801832e:	697b      	ldr	r3, [r7, #20]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d022      	beq.n	801837a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8018334:	f107 030c 	add.w	r3, r7, #12
 8018338:	6979      	ldr	r1, [r7, #20]
 801833a:	4618      	mov	r0, r3
 801833c:	f004 f9cf 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 8018340:	f107 030c 	add.w	r3, r7, #12
 8018344:	6839      	ldr	r1, [r7, #0]
 8018346:	4618      	mov	r0, r3
 8018348:	f7f2 f97b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801834c:	4603      	mov	r3, r0
 801834e:	461c      	mov	r4, r3
 8018350:	f107 030c 	add.w	r3, r7, #12
 8018354:	4618      	mov	r0, r3
 8018356:	f7f2 f968 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801835a:	2c00      	cmp	r4, #0
 801835c:	d008      	beq.n	8018370 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801835e:	6979      	ldr	r1, [r7, #20]
 8018360:	6878      	ldr	r0, [r7, #4]
 8018362:	f000 fb6f 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018366:	4603      	mov	r3, r0
 8018368:	2101      	movs	r1, #1
 801836a:	4618      	mov	r0, r3
 801836c:	f000 fb90 	bl	8018a90 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018370:	6978      	ldr	r0, [r7, #20]
 8018372:	f004 f979 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8018376:	6178      	str	r0, [r7, #20]
 8018378:	e7d9      	b.n	801832e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801837a:	bf00      	nop
 801837c:	371c      	adds	r7, #28
 801837e:	46bd      	mov	sp, r7
 8018380:	bd90      	pop	{r4, r7, pc}
	...

08018384 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b086      	sub	sp, #24
 8018388:	af00      	add	r7, sp, #0
 801838a:	60f8      	str	r0, [r7, #12]
 801838c:	60b9      	str	r1, [r7, #8]
 801838e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	69db      	ldr	r3, [r3, #28]
 8018394:	6879      	ldr	r1, [r7, #4]
 8018396:	4618      	mov	r0, r3
 8018398:	f004 fa2e 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801839c:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d005      	beq.n	80183b0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	6979      	ldr	r1, [r7, #20]
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7ff fa0b 	bl	80177c4 <_Z10StringFromRK14MockNamedValue>
 80183ae:	e003      	b.n	80183b8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 80183b0:	4903      	ldr	r1, [pc, #12]	; (80183c0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 80183b2:	68f8      	ldr	r0, [r7, #12]
 80183b4:	f7f1 fd81 	bl	8009eba <_ZN12SimpleStringC1EPKc>
}
 80183b8:	68f8      	ldr	r0, [r7, #12]
 80183ba:	3718      	adds	r7, #24
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	08022c3c 	.word	0x08022c3c

080183c4 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 80183c4:	b590      	push	{r4, r7, lr}
 80183c6:	b087      	sub	sp, #28
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
 80183cc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	69dc      	ldr	r4, [r3, #28]
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	335c      	adds	r3, #92	; 0x5c
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	f107 020c 	add.w	r2, r7, #12
 80183de:	6839      	ldr	r1, [r7, #0]
 80183e0:	4610      	mov	r0, r2
 80183e2:	4798      	blx	r3
 80183e4:	f107 030c 	add.w	r3, r7, #12
 80183e8:	4619      	mov	r1, r3
 80183ea:	4620      	mov	r0, r4
 80183ec:	f004 fa04 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80183f0:	6178      	str	r0, [r7, #20]
 80183f2:	f107 030c 	add.w	r3, r7, #12
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7f2 f917 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 80183fc:	697b      	ldr	r3, [r7, #20]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d00d      	beq.n	801841e <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8018402:	697b      	ldr	r3, [r7, #20]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	3350      	adds	r3, #80	; 0x50
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	6839      	ldr	r1, [r7, #0]
 801840c:	6978      	ldr	r0, [r7, #20]
 801840e:	4798      	blx	r3
 8018410:	4603      	mov	r3, r0
 8018412:	2b00      	cmp	r3, #0
 8018414:	bf14      	ite	ne
 8018416:	2301      	movne	r3, #1
 8018418:	2300      	moveq	r3, #0
 801841a:	b2db      	uxtb	r3, r3
 801841c:	e006      	b.n	801842c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	7b1b      	ldrb	r3, [r3, #12]
 8018422:	2b00      	cmp	r3, #0
 8018424:	bf14      	ite	ne
 8018426:	2301      	movne	r3, #1
 8018428:	2300      	moveq	r3, #0
 801842a:	b2db      	uxtb	r3, r3
}
 801842c:	4618      	mov	r0, r3
 801842e:	371c      	adds	r7, #28
 8018430:	46bd      	mov	sp, r7
 8018432:	bd90      	pop	{r4, r7, pc}

08018434 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8018434:	b590      	push	{r4, r7, lr}
 8018436:	b087      	sub	sp, #28
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
 801843c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	6a1c      	ldr	r4, [r3, #32]
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	335c      	adds	r3, #92	; 0x5c
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	f107 020c 	add.w	r2, r7, #12
 801844e:	6839      	ldr	r1, [r7, #0]
 8018450:	4610      	mov	r0, r2
 8018452:	4798      	blx	r3
 8018454:	f107 030c 	add.w	r3, r7, #12
 8018458:	4619      	mov	r1, r3
 801845a:	4620      	mov	r0, r4
 801845c:	f004 f9cc 	bl	801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018460:	6178      	str	r0, [r7, #20]
 8018462:	f107 030c 	add.w	r3, r7, #12
 8018466:	4618      	mov	r0, r3
 8018468:	f7f2 f8df 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801846c:	697b      	ldr	r3, [r7, #20]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d00d      	beq.n	801848e <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8018472:	697b      	ldr	r3, [r7, #20]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	3354      	adds	r3, #84	; 0x54
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	6839      	ldr	r1, [r7, #0]
 801847c:	6978      	ldr	r0, [r7, #20]
 801847e:	4798      	blx	r3
 8018480:	4603      	mov	r3, r0
 8018482:	2b00      	cmp	r3, #0
 8018484:	bf14      	ite	ne
 8018486:	2301      	movne	r3, #1
 8018488:	2300      	moveq	r3, #0
 801848a:	b2db      	uxtb	r3, r3
 801848c:	e006      	b.n	801849c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	7b1b      	ldrb	r3, [r3, #12]
 8018492:	2b00      	cmp	r3, #0
 8018494:	bf14      	ite	ne
 8018496:	2301      	movne	r3, #1
 8018498:	2300      	moveq	r3, #0
 801849a:	b2db      	uxtb	r3, r3
}
 801849c:	4618      	mov	r0, r3
 801849e:	371c      	adds	r7, #28
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd90      	pop	{r4, r7, pc}

080184a4 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 80184a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184a6:	b0a1      	sub	sp, #132	; 0x84
 80184a8:	af02      	add	r7, sp, #8
 80184aa:	6078      	str	r0, [r7, #4]
 80184ac:	6039      	str	r1, [r7, #0]
    SimpleString str;
 80184ae:	49bc      	ldr	r1, [pc, #752]	; (80187a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f7f1 fd02 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d012      	beq.n	80184e6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80184c4:	f107 030c 	add.w	r3, r7, #12
 80184c8:	49b6      	ldr	r1, [pc, #728]	; (80187a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7f2 fdb4 	bl	800b038 <_Z16StringFromFormatPKcz>
 80184d0:	f107 030c 	add.w	r3, r7, #12
 80184d4:	4619      	mov	r1, r3
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f7f1 fd5b 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 80184dc:	f107 030c 	add.w	r3, r7, #12
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7f2 f8a2 	bl	800a62a <_ZN12SimpleStringD1Ev>

    str += getName();
 80184e6:	f107 0314 	add.w	r3, r7, #20
 80184ea:	6839      	ldr	r1, [r7, #0]
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7ff f989 	bl	8017804 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80184f2:	f107 0314 	add.w	r3, r7, #20
 80184f6:	4619      	mov	r1, r3
 80184f8:	6878      	ldr	r0, [r7, #4]
 80184fa:	f7f2 f913 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 80184fe:	f107 0314 	add.w	r3, r7, #20
 8018502:	4618      	mov	r0, r3
 8018504:	f7f2 f891 	bl	800a62a <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8018508:	49a7      	ldr	r1, [pc, #668]	; (80187a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801850a:	6878      	ldr	r0, [r7, #4]
 801850c:	f7f2 f91c 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	691b      	ldr	r3, [r3, #16]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d02d      	beq.n	8018574 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	691a      	ldr	r2, [r3, #16]
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	695b      	ldr	r3, [r3, #20]
 8018520:	429a      	cmp	r2, r3
 8018522:	d113      	bne.n	801854c <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	691a      	ldr	r2, [r3, #16]
 8018528:	f107 031c 	add.w	r3, r7, #28
 801852c:	499f      	ldr	r1, [pc, #636]	; (80187ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801852e:	4618      	mov	r0, r3
 8018530:	f7f2 fd82 	bl	800b038 <_Z16StringFromFormatPKcz>
 8018534:	f107 031c 	add.w	r3, r7, #28
 8018538:	4619      	mov	r1, r3
 801853a:	6878      	ldr	r0, [r7, #4]
 801853c:	f7f2 f8f2 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8018540:	f107 031c 	add.w	r3, r7, #28
 8018544:	4618      	mov	r0, r3
 8018546:	f7f2 f870 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801854a:	e013      	b.n	8018574 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	691a      	ldr	r2, [r3, #16]
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	695b      	ldr	r3, [r3, #20]
 8018554:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018558:	4995      	ldr	r1, [pc, #596]	; (80187b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801855a:	f7f2 fd6d 	bl	800b038 <_Z16StringFromFormatPKcz>
 801855e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018562:	4619      	mov	r1, r3
 8018564:	6878      	ldr	r0, [r7, #4]
 8018566:	f7f2 f8dd 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801856a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801856e:	4618      	mov	r0, r3
 8018570:	f7f2 f85b 	bl	800a62a <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	69db      	ldr	r3, [r3, #28]
 8018578:	4618      	mov	r0, r3
 801857a:	f004 f96c 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 801857e:	4603      	mov	r3, r0
 8018580:	2b00      	cmp	r3, #0
 8018582:	d109      	bne.n	8018598 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	6a1b      	ldr	r3, [r3, #32]
 8018588:	4618      	mov	r0, r3
 801858a:	f004 f964 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 801858e:	4603      	mov	r3, r0
 8018590:	2b00      	cmp	r3, #0
 8018592:	d101      	bne.n	8018598 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018594:	2301      	movs	r3, #1
 8018596:	e000      	b.n	801859a <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8018598:	2300      	movs	r3, #0
 801859a:	2b00      	cmp	r3, #0
 801859c:	d00b      	beq.n	80185b6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	7b1b      	ldrb	r3, [r3, #12]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d001      	beq.n	80185aa <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 80185a6:	4b83      	ldr	r3, [pc, #524]	; (80187b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 80185a8:	e000      	b.n	80185ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 80185aa:	4b83      	ldr	r3, [pc, #524]	; (80187b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 80185ac:	4619      	mov	r1, r3
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f7f2 f8ca 	bl	800a748 <_ZN12SimpleStringpLEPKc>
 80185b4:	e0e3      	b.n	801877e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	69db      	ldr	r3, [r3, #28]
 80185ba:	4618      	mov	r0, r3
 80185bc:	f004 f94b 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80185c0:	6778      	str	r0, [r7, #116]	; 0x74
 80185c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d069      	beq.n	801869c <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 80185c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80185cc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80185ce:	4618      	mov	r0, r3
 80185d0:	f004 f898 	bl	801c704 <_ZNK22MockNamedValueListNode7getTypeEv>
 80185d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80185d8:	4618      	mov	r0, r3
 80185da:	f7f1 fff9 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 80185de:	4605      	mov	r5, r0
 80185e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80185e4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80185e6:	4618      	mov	r0, r3
 80185e8:	f004 f879 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 80185ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f1 ffed 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 80185f6:	4606      	mov	r6, r0
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	33a4      	adds	r3, #164	; 0xa4
 80185fe:	681c      	ldr	r4, [r3, #0]
 8018600:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018604:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018606:	4618      	mov	r0, r3
 8018608:	f004 f869 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 801860c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018610:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018614:	6839      	ldr	r1, [r7, #0]
 8018616:	4618      	mov	r0, r3
 8018618:	47a0      	blx	r4
 801861a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801861e:	4618      	mov	r0, r3
 8018620:	f7f1 ffd6 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8018624:	4603      	mov	r3, r0
 8018626:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801862a:	9300      	str	r3, [sp, #0]
 801862c:	4633      	mov	r3, r6
 801862e:	462a      	mov	r2, r5
 8018630:	4962      	ldr	r1, [pc, #392]	; (80187bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8018632:	f7f2 fd01 	bl	800b038 <_Z16StringFromFormatPKcz>
 8018636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801863a:	4619      	mov	r1, r3
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7f2 f871 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8018642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018646:	4618      	mov	r0, r3
 8018648:	f7f1 ffef 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801864c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018650:	4618      	mov	r0, r3
 8018652:	f7f1 ffea 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8018656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801865a:	4618      	mov	r0, r3
 801865c:	f7f1 ffe5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8018660:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018664:	4618      	mov	r0, r3
 8018666:	f7f1 ffe0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801866a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801866e:	4618      	mov	r0, r3
 8018670:	f7f1 ffdb 	bl	800a62a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018674:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018676:	f003 fff7 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801867a:	4603      	mov	r3, r0
 801867c:	2b00      	cmp	r3, #0
 801867e:	bf14      	ite	ne
 8018680:	2301      	movne	r3, #1
 8018682:	2300      	moveq	r3, #0
 8018684:	b2db      	uxtb	r3, r3
 8018686:	2b00      	cmp	r3, #0
 8018688:	d003      	beq.n	8018692 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801868a:	494d      	ldr	r1, [pc, #308]	; (80187c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f7f2 f85b 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8018692:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018694:	f003 ffe8 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 8018698:	6778      	str	r0, [r7, #116]	; 0x74
 801869a:	e792      	b.n	80185c2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	69db      	ldr	r3, [r3, #28]
 80186a0:	4618      	mov	r0, r3
 80186a2:	f004 f8d8 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80186a6:	4603      	mov	r3, r0
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d009      	beq.n	80186c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	6a1b      	ldr	r3, [r3, #32]
 80186b0:	4618      	mov	r0, r3
 80186b2:	f004 f8d0 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80186b6:	4603      	mov	r3, r0
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d001      	beq.n	80186c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80186bc:	2301      	movs	r3, #1
 80186be:	e000      	b.n	80186c2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 80186c0:	2300      	movs	r3, #0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d003      	beq.n	80186ce <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 80186c6:	493e      	ldr	r1, [pc, #248]	; (80187c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	f7f2 f83d 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 80186ce:	683b      	ldr	r3, [r7, #0]
 80186d0:	6a1b      	ldr	r3, [r3, #32]
 80186d2:	4618      	mov	r0, r3
 80186d4:	f004 f8bf 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80186d8:	6778      	str	r0, [r7, #116]	; 0x74
 80186da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d046      	beq.n	801876e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 80186e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80186e4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80186e6:	4618      	mov	r0, r3
 80186e8:	f004 f80c 	bl	801c704 <_ZNK22MockNamedValueListNode7getTypeEv>
 80186ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7f1 ff6d 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 80186f6:	4604      	mov	r4, r0
 80186f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80186fc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80186fe:	4618      	mov	r0, r3
 8018700:	f003 ffed 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 8018704:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018708:	4618      	mov	r0, r3
 801870a:	f7f1 ff61 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801870e:	4603      	mov	r3, r0
 8018710:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8018714:	4622      	mov	r2, r4
 8018716:	492b      	ldr	r1, [pc, #172]	; (80187c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8018718:	f7f2 fc8e 	bl	800b038 <_Z16StringFromFormatPKcz>
 801871c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018720:	4619      	mov	r1, r3
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f7f1 fffe 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8018728:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801872c:	4618      	mov	r0, r3
 801872e:	f7f1 ff7c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8018732:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018736:	4618      	mov	r0, r3
 8018738:	f7f1 ff77 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801873c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018740:	4618      	mov	r0, r3
 8018742:	f7f1 ff72 	bl	800a62a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018746:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018748:	f003 ff8e 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801874c:	4603      	mov	r3, r0
 801874e:	2b00      	cmp	r3, #0
 8018750:	bf14      	ite	ne
 8018752:	2301      	movne	r3, #1
 8018754:	2300      	moveq	r3, #0
 8018756:	b2db      	uxtb	r3, r3
 8018758:	2b00      	cmp	r3, #0
 801875a:	d003      	beq.n	8018764 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801875c:	4918      	ldr	r1, [pc, #96]	; (80187c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801875e:	6878      	ldr	r0, [r7, #4]
 8018760:	f7f1 fff2 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8018764:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018766:	f003 ff7f 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801876a:	6778      	str	r0, [r7, #116]	; 0x74
 801876c:	e7b5      	b.n	80186da <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801876e:	683b      	ldr	r3, [r7, #0]
 8018770:	7b1b      	ldrb	r3, [r3, #12]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d003      	beq.n	801877e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8018776:	4914      	ldr	r1, [pc, #80]	; (80187c8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f7f1 ffe5 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018782:	683b      	ldr	r3, [r7, #0]
 8018784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018786:	2b01      	cmp	r3, #1
 8018788:	d101      	bne.n	801878e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801878a:	4c05      	ldr	r4, [pc, #20]	; (80187a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801878c:	e000      	b.n	8018790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801878e:	4c0f      	ldr	r4, [pc, #60]	; (80187cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018794:	683a      	ldr	r2, [r7, #0]
 8018796:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018798:	2a01      	cmp	r2, #1
 801879a:	d119      	bne.n	80187d0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801879c:	4a00      	ldr	r2, [pc, #0]	; (80187a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801879e:	e018      	b.n	80187d2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 80187a0:	08022bd0 	.word	0x08022bd0
 80187a4:	08022c44 	.word	0x08022c44
 80187a8:	08022c5c 	.word	0x08022c5c
 80187ac:	08022c64 	.word	0x08022c64
 80187b0:	08022c84 	.word	0x08022c84
 80187b4:	08022ca8 	.word	0x08022ca8
 80187b8:	08022cc0 	.word	0x08022cc0
 80187bc:	08022cd0 	.word	0x08022cd0
 80187c0:	08022cdc 	.word	0x08022cdc
 80187c4:	08022ce0 	.word	0x08022ce0
 80187c8:	08022cf0 	.word	0x08022cf0
 80187cc:	08022d10 	.word	0x08022d10
 80187d0:	4a0c      	ldr	r2, [pc, #48]	; (8018804 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 80187d2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80187d6:	9201      	str	r2, [sp, #4]
 80187d8:	9300      	str	r3, [sp, #0]
 80187da:	4623      	mov	r3, r4
 80187dc:	460a      	mov	r2, r1
 80187de:	490a      	ldr	r1, [pc, #40]	; (8018808 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 80187e0:	f7f2 fc2a 	bl	800b038 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 80187e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80187e8:	4619      	mov	r1, r3
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	f7f1 ff9a 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 80187f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7f1 ff18 	bl	800a62a <_ZN12SimpleStringD1Ev>

    return str;
 80187fa:	bf00      	nop
}
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	377c      	adds	r7, #124	; 0x7c
 8018800:	46bd      	mov	sp, r7
 8018802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018804:	08022d10 	.word	0x08022d10
 8018808:	08022d14 	.word	0x08022d14

0801880c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801880c:	b590      	push	{r4, r7, lr}
 801880e:	b095      	sub	sp, #84	; 0x54
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
 8018814:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8018816:	496c      	ldr	r1, [pc, #432]	; (80189c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f7f1 fb4e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	69db      	ldr	r3, [r3, #28]
 8018822:	4618      	mov	r0, r3
 8018824:	f004 f817 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 8018828:	64f8      	str	r0, [r7, #76]	; 0x4c
 801882a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801882c:	2b00      	cmp	r3, #0
 801882e:	d05e      	beq.n	80188ee <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8018830:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018832:	6838      	ldr	r0, [r7, #0]
 8018834:	f000 f906 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018838:	4603      	mov	r3, r0
 801883a:	4618      	mov	r0, r3
 801883c:	f000 f938 	bl	8018ab0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018840:	4603      	mov	r3, r0
 8018842:	f083 0301 	eor.w	r3, r3, #1
 8018846:	b2db      	uxtb	r3, r3
 8018848:	2b00      	cmp	r3, #0
 801884a:	d04b      	beq.n	80188e4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801884c:	f107 030c 	add.w	r3, r7, #12
 8018850:	495d      	ldr	r1, [pc, #372]	; (80189c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018852:	4618      	mov	r0, r3
 8018854:	f7f1 fb31 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8018858:	f107 030c 	add.w	r3, r7, #12
 801885c:	4619      	mov	r1, r3
 801885e:	6878      	ldr	r0, [r7, #4]
 8018860:	f7f1 ff34 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 8018864:	4603      	mov	r3, r0
 8018866:	461c      	mov	r4, r3
 8018868:	f107 030c 	add.w	r3, r7, #12
 801886c:	4618      	mov	r0, r3
 801886e:	f7f1 fedc 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8018872:	2c00      	cmp	r4, #0
 8018874:	d003      	beq.n	801887e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8018876:	4955      	ldr	r1, [pc, #340]	; (80189cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f7f1 ff65 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801887e:	f107 031c 	add.w	r3, r7, #28
 8018882:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018884:	4618      	mov	r0, r3
 8018886:	f003 ff3d 	bl	801c704 <_ZNK22MockNamedValueListNode7getTypeEv>
 801888a:	f107 031c 	add.w	r3, r7, #28
 801888e:	4618      	mov	r0, r3
 8018890:	f7f1 fe9e 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8018894:	4604      	mov	r4, r0
 8018896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801889a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801889c:	4618      	mov	r0, r3
 801889e:	f003 ff1e 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 80188a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7f1 fe92 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 80188ac:	4603      	mov	r3, r0
 80188ae:	f107 0014 	add.w	r0, r7, #20
 80188b2:	4622      	mov	r2, r4
 80188b4:	4946      	ldr	r1, [pc, #280]	; (80189d0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 80188b6:	f7f2 fbbf 	bl	800b038 <_Z16StringFromFormatPKcz>
 80188ba:	f107 0314 	add.w	r3, r7, #20
 80188be:	4619      	mov	r1, r3
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f7f1 ff2f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 80188c6:	f107 0314 	add.w	r3, r7, #20
 80188ca:	4618      	mov	r0, r3
 80188cc:	f7f1 fead 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80188d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7f1 fea8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80188da:	f107 031c 	add.w	r3, r7, #28
 80188de:	4618      	mov	r0, r3
 80188e0:	f7f1 fea3 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 80188e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80188e6:	f003 febf 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 80188ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80188ec:	e79d      	b.n	801882a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	6a1b      	ldr	r3, [r3, #32]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f003 ffaf 	bl	801c856 <_ZN18MockNamedValueList5beginEv>
 80188f8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80188fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d05e      	beq.n	80189be <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8018900:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018902:	6838      	ldr	r0, [r7, #0]
 8018904:	f000 f89e 	bl	8018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018908:	4603      	mov	r3, r0
 801890a:	4618      	mov	r0, r3
 801890c:	f000 f8d0 	bl	8018ab0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018910:	4603      	mov	r3, r0
 8018912:	f083 0301 	eor.w	r3, r3, #1
 8018916:	b2db      	uxtb	r3, r3
 8018918:	2b00      	cmp	r3, #0
 801891a:	d04b      	beq.n	80189b4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801891c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018920:	4929      	ldr	r1, [pc, #164]	; (80189c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018922:	4618      	mov	r0, r3
 8018924:	f7f1 fac9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8018928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801892c:	4619      	mov	r1, r3
 801892e:	6878      	ldr	r0, [r7, #4]
 8018930:	f7f1 fecc 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 8018934:	4603      	mov	r3, r0
 8018936:	461c      	mov	r4, r3
 8018938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801893c:	4618      	mov	r0, r3
 801893e:	f7f1 fe74 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8018942:	2c00      	cmp	r4, #0
 8018944:	d003      	beq.n	801894e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8018946:	4921      	ldr	r1, [pc, #132]	; (80189cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018948:	6878      	ldr	r0, [r7, #4]
 801894a:	f7f1 fefd 	bl	800a748 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801894e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018952:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018954:	4618      	mov	r0, r3
 8018956:	f003 fed5 	bl	801c704 <_ZNK22MockNamedValueListNode7getTypeEv>
 801895a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801895e:	4618      	mov	r0, r3
 8018960:	f7f1 fe36 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8018964:	4604      	mov	r4, r0
 8018966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801896a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801896c:	4618      	mov	r0, r3
 801896e:	f003 feb6 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 8018972:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018976:	4618      	mov	r0, r3
 8018978:	f7f1 fe2a 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801897c:	4603      	mov	r3, r0
 801897e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8018982:	4622      	mov	r2, r4
 8018984:	4912      	ldr	r1, [pc, #72]	; (80189d0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018986:	f7f2 fb57 	bl	800b038 <_Z16StringFromFormatPKcz>
 801898a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801898e:	4619      	mov	r1, r3
 8018990:	6878      	ldr	r0, [r7, #4]
 8018992:	f7f1 fec7 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8018996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801899a:	4618      	mov	r0, r3
 801899c:	f7f1 fe45 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80189a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7f1 fe40 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80189aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7f1 fe3b 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80189b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80189b6:	f003 fe57 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 80189ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80189bc:	e79d      	b.n	80188fa <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 80189be:	bf00      	nop
}
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	3754      	adds	r7, #84	; 0x54
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd90      	pop	{r4, r7, pc}
 80189c8:	08022bd0 	.word	0x08022bd0
 80189cc:	08022cdc 	.word	0x08022cdc
 80189d0:	08022d3c 	.word	0x08022d3c

080189d4 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b085      	sub	sp, #20
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 80189de:	f107 0308 	add.w	r3, r7, #8
 80189e2:	6879      	ldr	r1, [r7, #4]
 80189e4:	4618      	mov	r0, r3
 80189e6:	f7fe ff0d 	bl	8017804 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80189ea:	f107 0308 	add.w	r3, r7, #8
 80189ee:	4619      	mov	r1, r3
 80189f0:	6838      	ldr	r0, [r7, #0]
 80189f2:	f7f1 fe26 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 80189f6:	4603      	mov	r3, r0
 80189f8:	461c      	mov	r4, r3
 80189fa:	f107 0308 	add.w	r3, r7, #8
 80189fe:	4618      	mov	r0, r3
 8018a00:	f7f1 fe13 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8018a04:	4623      	mov	r3, r4
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3714      	adds	r7, #20
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd90      	pop	{r4, r7, pc}

08018a0e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 8018a0e:	b480      	push	{r7}
 8018a10:	b083      	sub	sp, #12
 8018a12:	af00      	add	r7, sp, #0
 8018a14:	6078      	str	r0, [r7, #4]
 8018a16:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018a1e:	f083 0301 	eor.w	r3, r3, #1
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d104      	bne.n	8018a32 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a2c:	683a      	ldr	r2, [r7, #0]
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	d101      	bne.n	8018a36 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 8018a32:	2301      	movs	r3, #1
 8018a34:	e000      	b.n	8018a38 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 8018a36:	2300      	movs	r3, #0
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	370c      	adds	r7, #12
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a42:	4770      	bx	lr

08018a44 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b082      	sub	sp, #8
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 8018a4e:	6838      	ldr	r0, [r7, #0]
 8018a50:	f003 fe16 	bl	801c680 <_ZN22MockNamedValueListNode4itemEv>
 8018a54:	4603      	mov	r3, r0
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3708      	adds	r7, #8
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
	...

08018a60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
 8018a68:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6839      	ldr	r1, [r7, #0]
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f001 ff48 	bl	801a904 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018a74:	4a05      	ldr	r2, [pc, #20]	; (8018a8c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	601a      	str	r2, [r3, #0]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	4618      	mov	r0, r3
 8018a86:	3708      	adds	r7, #8
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd80      	pop	{r7, pc}
 8018a8c:	0802503c 	.word	0x0802503c

08018a90 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8018a90:	b480      	push	{r7}
 8018a92:	b083      	sub	sp, #12
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
 8018a98:	460b      	mov	r3, r1
 8018a9a:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	78fa      	ldrb	r2, [r7, #3]
 8018aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8018aa4:	bf00      	nop
 8018aa6:	370c      	adds	r7, #12
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aae:	4770      	bx	lr

08018ab0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 8018ab0:	b480      	push	{r7}
 8018ab2:	b083      	sub	sp, #12
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8018abe:	4618      	mov	r0, r3
 8018ac0:	370c      	adds	r7, #12
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac8:	4770      	bx	lr
	...

08018acc <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
 8018ad4:	460b      	mov	r3, r1
 8018ad6:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	3328      	adds	r3, #40	; 0x28
 8018adc:	4907      	ldr	r1, [pc, #28]	; (8018afc <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f002 f9b2 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	3328      	adds	r3, #40	; 0x28
 8018ae8:	78fa      	ldrb	r2, [r7, #3]
 8018aea:	4611      	mov	r1, r2
 8018aec:	4618      	mov	r0, r3
 8018aee:	f001 ff5b 	bl	801a9a8 <_ZN14MockNamedValue8setValueEb>
    return *this;
 8018af2:	687b      	ldr	r3, [r7, #4]
}
 8018af4:	4618      	mov	r0, r3
 8018af6:	3708      	adds	r7, #8
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bd80      	pop	{r7, pc}
 8018afc:	08022d44 	.word	0x08022d44

08018b00 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b082      	sub	sp, #8
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	6078      	str	r0, [r7, #4]
 8018b08:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	3328      	adds	r3, #40	; 0x28
 8018b0e:	4907      	ldr	r1, [pc, #28]	; (8018b2c <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 8018b10:	4618      	mov	r0, r3
 8018b12:	f002 f999 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	3328      	adds	r3, #40	; 0x28
 8018b1a:	6839      	ldr	r1, [r7, #0]
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	f001 ff67 	bl	801a9f0 <_ZN14MockNamedValue8setValueEj>
    return *this;
 8018b22:	687b      	ldr	r3, [r7, #4]
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	3708      	adds	r7, #8
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	08022d44 	.word	0x08022d44

08018b30 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	3328      	adds	r3, #40	; 0x28
 8018b3e:	4907      	ldr	r1, [pc, #28]	; (8018b5c <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 8018b40:	4618      	mov	r0, r3
 8018b42:	f002 f981 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	3328      	adds	r3, #40	; 0x28
 8018b4a:	6839      	ldr	r1, [r7, #0]
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f001 ff71 	bl	801aa34 <_ZN14MockNamedValue8setValueEi>
    return *this;
 8018b52:	687b      	ldr	r3, [r7, #4]
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3708      	adds	r7, #8
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd80      	pop	{r7, pc}
 8018b5c:	08022d44 	.word	0x08022d44

08018b60 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b082      	sub	sp, #8
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	3328      	adds	r3, #40	; 0x28
 8018b6e:	4907      	ldr	r1, [pc, #28]	; (8018b8c <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8018b70:	4618      	mov	r0, r3
 8018b72:	f002 f969 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	3328      	adds	r3, #40	; 0x28
 8018b7a:	6839      	ldr	r1, [r7, #0]
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	f001 ff7b 	bl	801aa78 <_ZN14MockNamedValue8setValueEl>
    return *this;
 8018b82:	687b      	ldr	r3, [r7, #4]
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	08022d44 	.word	0x08022d44

08018b90 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b082      	sub	sp, #8
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
 8018b98:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	3328      	adds	r3, #40	; 0x28
 8018b9e:	4907      	ldr	r1, [pc, #28]	; (8018bbc <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f002 f951 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	3328      	adds	r3, #40	; 0x28
 8018baa:	6839      	ldr	r1, [r7, #0]
 8018bac:	4618      	mov	r0, r3
 8018bae:	f001 ff85 	bl	801aabc <_ZN14MockNamedValue8setValueEm>
    return *this;
 8018bb2:	687b      	ldr	r3, [r7, #4]
}
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	3708      	adds	r7, #8
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	bd80      	pop	{r7, pc}
 8018bbc:	08022d44 	.word	0x08022d44

08018bc0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 8018bc0:	b5b0      	push	{r4, r5, r7, lr}
 8018bc2:	b086      	sub	sp, #24
 8018bc4:	af02      	add	r7, sp, #8
 8018bc6:	60f8      	str	r0, [r7, #12]
 8018bc8:	1d3b      	adds	r3, r7, #4
 8018bca:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 8018bce:	f7f8 fd57 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8018bd2:	4604      	mov	r4, r0
 8018bd4:	6823      	ldr	r3, [r4, #0]
 8018bd6:	3368      	adds	r3, #104	; 0x68
 8018bd8:	681d      	ldr	r5, [r3, #0]
 8018bda:	f7f8 fd61 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018bde:	4603      	mov	r3, r0
 8018be0:	9300      	str	r3, [sp, #0]
 8018be2:	f240 2319 	movw	r3, #537	; 0x219
 8018be6:	4a04      	ldr	r2, [pc, #16]	; (8018bf8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 8018be8:	4904      	ldr	r1, [pc, #16]	; (8018bfc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 8018bea:	4620      	mov	r0, r4
 8018bec:	47a8      	blx	r5
    return *this;
 8018bee:	68fb      	ldr	r3, [r7, #12]
}
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	3710      	adds	r7, #16
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8018bf8:	08022bd4 	.word	0x08022bd4
 8018bfc:	08022bf0 	.word	0x08022bf0

08018c00 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 8018c00:	b5b0      	push	{r4, r5, r7, lr}
 8018c02:	b086      	sub	sp, #24
 8018c04:	af02      	add	r7, sp, #8
 8018c06:	60f8      	str	r0, [r7, #12]
 8018c08:	1d3b      	adds	r3, r7, #4
 8018c0a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 8018c0e:	f7f8 fd37 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8018c12:	4604      	mov	r4, r0
 8018c14:	6823      	ldr	r3, [r4, #0]
 8018c16:	3368      	adds	r3, #104	; 0x68
 8018c18:	681d      	ldr	r5, [r3, #0]
 8018c1a:	f7f8 fd41 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	9300      	str	r3, [sp, #0]
 8018c22:	f240 231f 	movw	r3, #543	; 0x21f
 8018c26:	4a04      	ldr	r2, [pc, #16]	; (8018c38 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 8018c28:	4904      	ldr	r1, [pc, #16]	; (8018c3c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	47a8      	blx	r5
    return *this;
 8018c2e:	68fb      	ldr	r3, [r7, #12]
}
 8018c30:	4618      	mov	r0, r3
 8018c32:	3710      	adds	r7, #16
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bdb0      	pop	{r4, r5, r7, pc}
 8018c38:	08022bd4 	.word	0x08022bd4
 8018c3c:	08022c10 	.word	0x08022c10

08018c40 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	3328      	adds	r3, #40	; 0x28
 8018c4e:	4907      	ldr	r1, [pc, #28]	; (8018c6c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 8018c50:	4618      	mov	r0, r3
 8018c52:	f002 f8f9 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	3328      	adds	r3, #40	; 0x28
 8018c5a:	6839      	ldr	r1, [r7, #0]
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f002 f835 	bl	801accc <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 8018c62:	687b      	ldr	r3, [r7, #4]
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	3708      	adds	r7, #8
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd80      	pop	{r7, pc}
 8018c6c:	08022d44 	.word	0x08022d44

08018c70 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	60f8      	str	r0, [r7, #12]
 8018c78:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	3328      	adds	r3, #40	; 0x28
 8018c80:	4907      	ldr	r1, [pc, #28]	; (8018ca0 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8018c82:	4618      	mov	r0, r3
 8018c84:	f002 f8e0 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	3328      	adds	r3, #40	; 0x28
 8018c8c:	ed97 0b00 	vldr	d0, [r7]
 8018c90:	4618      	mov	r0, r3
 8018c92:	f001 ff71 	bl	801ab78 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8018c96:	68fb      	ldr	r3, [r7, #12]
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	3710      	adds	r7, #16
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}
 8018ca0:	08022d44 	.word	0x08022d44

08018ca4 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	3328      	adds	r3, #40	; 0x28
 8018cb2:	4907      	ldr	r1, [pc, #28]	; (8018cd0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f002 f8c7 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	3328      	adds	r3, #40	; 0x28
 8018cbe:	6839      	ldr	r1, [r7, #0]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f001 ff9d 	bl	801ac00 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 8018cc6:	687b      	ldr	r3, [r7, #4]
}
 8018cc8:	4618      	mov	r0, r3
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}
 8018cd0:	08022d44 	.word	0x08022d44

08018cd4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b082      	sub	sp, #8
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	3328      	adds	r3, #40	; 0x28
 8018ce2:	4907      	ldr	r1, [pc, #28]	; (8018d00 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f002 f8af 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	3328      	adds	r3, #40	; 0x28
 8018cee:	6839      	ldr	r1, [r7, #0]
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f001 ffa7 	bl	801ac44 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 8018cf6:	687b      	ldr	r3, [r7, #4]
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3708      	adds	r7, #8
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}
 8018d00:	08022d44 	.word	0x08022d44

08018d04 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
 8018d0c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	3328      	adds	r3, #40	; 0x28
 8018d12:	4907      	ldr	r1, [pc, #28]	; (8018d30 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8018d14:	4618      	mov	r0, r3
 8018d16:	f002 f897 	bl	801ae48 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	3328      	adds	r3, #40	; 0x28
 8018d1e:	6839      	ldr	r1, [r7, #0]
 8018d20:	4618      	mov	r0, r3
 8018d22:	f001 ffb1 	bl	801ac88 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 8018d26:	687b      	ldr	r3, [r7, #4]
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	08022d44 	.word	0x08022d44

08018d34 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
 8018d3c:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2201      	movs	r2, #1
 8018d42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	2200      	movs	r2, #0
 8018d4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	683a      	ldr	r2, [r7, #0]
 8018d52:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8018d54:	687b      	ldr	r3, [r7, #4]
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	370c      	adds	r7, #12
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d60:	4770      	bx	lr

08018d62 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8018d62:	b580      	push	{r7, lr}
 8018d64:	b082      	sub	sp, #8
 8018d66:	af00      	add	r7, sp, #0
 8018d68:	6078      	str	r0, [r7, #4]
 8018d6a:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	3328      	adds	r3, #40	; 0x28
 8018d70:	4619      	mov	r1, r3
 8018d72:	6878      	ldr	r0, [r7, #4]
 8018d74:	f7ef f946 	bl	8008004 <_ZN14MockNamedValueC1ERKS_>
}
 8018d78:	6878      	ldr	r0, [r7, #4]
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}

08018d80 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8018d80:	b480      	push	{r7}
 8018d82:	b085      	sub	sp, #20
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	68ba      	ldr	r2, [r7, #8]
 8018d90:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	687a      	ldr	r2, [r7, #4]
 8018d96:	615a      	str	r2, [r3, #20]
    return *this;
 8018d98:	68fb      	ldr	r3, [r7, #12]
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3714      	adds	r7, #20
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 8018da6:	b480      	push	{r7}
 8018da8:	b083      	sub	sp, #12
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	7e1b      	ldrb	r3, [r3, #24]
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	370c      	adds	r7, #12
 8018db6:	46bd      	mov	sp, r7
 8018db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dbc:	4770      	bx	lr

08018dbe <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 8018dbe:	b480      	push	{r7}
 8018dc0:	b083      	sub	sp, #12
 8018dc2:	af00      	add	r7, sp, #0
 8018dc4:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	370c      	adds	r7, #12
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd4:	4770      	bx	lr
	...

08018dd8 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7fe fcce 	bl	8017784 <_ZN16MockExpectedCallC1Ev>
 8018de8:	4a03      	ldr	r2, [pc, #12]	; (8018df8 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	601a      	str	r2, [r3, #0]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	4618      	mov	r0, r3
 8018df2:	3708      	adds	r7, #8
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	08024e9c 	.word	0x08024e9c

08018dfc <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	4801      	ldr	r0, [pc, #4]	; (8018e08 <__tcf_0+0xc>)
 8018e02:	f000 f831 	bl	8018e68 <_ZN23MockIgnoredExpectedCallD1Ev>
 8018e06:	bd80      	pop	{r7, pc}
 8018e08:	20000ca8 	.word	0x20000ca8

08018e0c <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8018e10:	4b12      	ldr	r3, [pc, #72]	; (8018e5c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	f3bf 8f5b 	dmb	ish
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	f003 0301 	and.w	r3, r3, #1
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	bf0c      	ite	eq
 8018e22:	2301      	moveq	r3, #1
 8018e24:	2300      	movne	r3, #0
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d013      	beq.n	8018e54 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8018e2c:	480b      	ldr	r0, [pc, #44]	; (8018e5c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018e2e:	f003 ff03 	bl	801cc38 <__cxa_guard_acquire>
 8018e32:	4603      	mov	r3, r0
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	bf14      	ite	ne
 8018e38:	2301      	movne	r3, #1
 8018e3a:	2300      	moveq	r3, #0
 8018e3c:	b2db      	uxtb	r3, r3
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d008      	beq.n	8018e54 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8018e42:	4807      	ldr	r0, [pc, #28]	; (8018e60 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8018e44:	f7ff ffc8 	bl	8018dd8 <_ZN23MockIgnoredExpectedCallC1Ev>
 8018e48:	4804      	ldr	r0, [pc, #16]	; (8018e5c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018e4a:	f003 ff01 	bl	801cc50 <__cxa_guard_release>
 8018e4e:	4805      	ldr	r0, [pc, #20]	; (8018e64 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8018e50:	f003 ff25 	bl	801cc9e <atexit>
    return call;
 8018e54:	4b02      	ldr	r3, [pc, #8]	; (8018e60 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	bd80      	pop	{r7, pc}
 8018e5a:	bf00      	nop
 8018e5c:	20000cac 	.word	0x20000cac
 8018e60:	20000ca8 	.word	0x20000ca8
 8018e64:	08018dfd 	.word	0x08018dfd

08018e68 <_ZN23MockIgnoredExpectedCallD1Ev>:
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b082      	sub	sp, #8
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	4a05      	ldr	r2, [pc, #20]	; (8018e88 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	601a      	str	r2, [r3, #0]
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7fe fc93 	bl	80177a4 <_ZN16MockExpectedCallD1Ev>
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	4618      	mov	r0, r3
 8018e82:	3708      	adds	r7, #8
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	08024e9c 	.word	0x08024e9c

08018e8c <_ZN23MockIgnoredExpectedCallD0Ev>:
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b082      	sub	sp, #8
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6878      	ldr	r0, [r7, #4]
 8018e96:	f7ff ffe7 	bl	8018e68 <_ZN23MockIgnoredExpectedCallD1Ev>
 8018e9a:	2104      	movs	r1, #4
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f7ee fc5d 	bl	800775c <_ZdlPvj>
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3708      	adds	r7, #8
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b082      	sub	sp, #8
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	4a05      	ldr	r2, [pc, #20]	; (8018ecc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	601a      	str	r2, [r3, #0]
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f001 fd4b 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	3708      	adds	r7, #8
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}
 8018ecc:	0802503c 	.word	0x0802503c

08018ed0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b082      	sub	sp, #8
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	f7ff ffe7 	bl	8018eac <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 8018ede:	2138      	movs	r1, #56	; 0x38
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	f7ee fc3b 	bl	800775c <_ZdlPvj>
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3708      	adds	r7, #8
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}

08018ef0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 8018ef0:	b480      	push	{r7}
 8018ef2:	b083      	sub	sp, #12
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
 8018ef8:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	683a      	ldr	r2, [r7, #0]
 8018efe:	601a      	str	r2, [r3, #0]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2200      	movs	r2, #0
 8018f04:	605a      	str	r2, [r3, #4]
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	4618      	mov	r0, r3
 8018f0a:	370c      	adds	r7, #12
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr

08018f14 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8018f14:	b480      	push	{r7}
 8018f16:	b083      	sub	sp, #12
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
 8018f1c:	4a06      	ldr	r2, [pc, #24]	; (8018f38 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	601a      	str	r2, [r3, #0]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2200      	movs	r2, #0
 8018f26:	605a      	str	r2, [r3, #4]
{
}
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	370c      	adds	r7, #12
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f34:	4770      	bx	lr
 8018f36:	bf00      	nop
 8018f38:	08025190 	.word	0x08025190

08018f3c <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b084      	sub	sp, #16
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
 8018f44:	4a0d      	ldr	r2, [pc, #52]	; (8018f7c <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d00f      	beq.n	8018f72 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	685b      	ldr	r3, [r3, #4]
 8018f56:	685b      	ldr	r3, [r3, #4]
 8018f58:	60fb      	str	r3, [r7, #12]
        delete head_;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d003      	beq.n	8018f6a <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8018f62:	2108      	movs	r1, #8
 8018f64:	4618      	mov	r0, r3
 8018f66:	f7ee fbf9 	bl	800775c <_ZdlPvj>
        head_ = next;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	68fa      	ldr	r2, [r7, #12]
 8018f6e:	605a      	str	r2, [r3, #4]
    while (head_) {
 8018f70:	e7eb      	b.n	8018f4a <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	4618      	mov	r0, r3
 8018f76:	3710      	adds	r7, #16
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	08025190 	.word	0x08025190

08018f80 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
}
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f7ff ffd7 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
 8018f8e:	2108      	movs	r1, #8
 8018f90:	6878      	ldr	r0, [r7, #4]
 8018f92:	f7ee fbe3 	bl	800775c <_ZdlPvj>
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3708      	adds	r7, #8
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}

08018fa0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b084      	sub	sp, #16
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	685b      	ldr	r3, [r3, #4]
 8018fac:	60fb      	str	r3, [r7, #12]
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d011      	beq.n	8018fd8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	681a      	ldr	r2, [r3, #0]
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	33d4      	adds	r3, #212	; 0xd4
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	4610      	mov	r0, r2
 8018fc4:	4798      	blx	r3
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d001      	beq.n	8018fd0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 8018fcc:	2301      	movs	r3, #1
 8018fce:	e004      	b.n	8018fda <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	685b      	ldr	r3, [r3, #4]
 8018fd4:	60fb      	str	r3, [r7, #12]
 8018fd6:	e7ea      	b.n	8018fae <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 8018fd8:	2300      	movs	r3, #0
}
 8018fda:	4618      	mov	r0, r3
 8018fdc:	3710      	adds	r7, #16
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}

08018fe2 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 8018fe2:	b480      	push	{r7}
 8018fe4:	b085      	sub	sp, #20
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8018fea:	2300      	movs	r3, #0
 8018fec:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	60bb      	str	r3, [r7, #8]
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d006      	beq.n	8019008 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	3301      	adds	r3, #1
 8018ffe:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	685b      	ldr	r3, [r3, #4]
 8019004:	60bb      	str	r3, [r7, #8]
 8019006:	e7f5      	b.n	8018ff4 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 8019008:	68fb      	ldr	r3, [r7, #12]
}
 801900a:	4618      	mov	r0, r3
 801900c:	3714      	adds	r7, #20
 801900e:	46bd      	mov	sp, r7
 8019010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019014:	4770      	bx	lr

08019016 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8019016:	b480      	push	{r7}
 8019018:	b083      	sub	sp, #12
 801901a:	af00      	add	r7, sp, #0
 801901c:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	685b      	ldr	r3, [r3, #4]
 8019022:	2b00      	cmp	r3, #0
 8019024:	bf0c      	ite	eq
 8019026:	2301      	moveq	r3, #1
 8019028:	2300      	movne	r3, #0
 801902a:	b2db      	uxtb	r3, r3
}
 801902c:	4618      	mov	r0, r3
 801902e:	370c      	adds	r7, #12
 8019030:	46bd      	mov	sp, r7
 8019032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019036:	4770      	bx	lr

08019038 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b084      	sub	sp, #16
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
 8019040:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8019042:	2300      	movs	r3, #0
 8019044:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	685b      	ldr	r3, [r3, #4]
 801904a:	60bb      	str	r3, [r7, #8]
 801904c:	68bb      	ldr	r3, [r7, #8]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d01d      	beq.n	801908e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	681a      	ldr	r2, [r3, #0]
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	33b8      	adds	r3, #184	; 0xb8
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	6839      	ldr	r1, [r7, #0]
 8019062:	4610      	mov	r0, r2
 8019064:	4798      	blx	r3
 8019066:	4603      	mov	r3, r0
 8019068:	2b00      	cmp	r3, #0
 801906a:	d00c      	beq.n	8019086 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	681a      	ldr	r2, [r3, #0]
 8019070:	68bb      	ldr	r3, [r7, #8]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	33f8      	adds	r3, #248	; 0xf8
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	4610      	mov	r0, r2
 801907c:	4798      	blx	r3
 801907e:	4602      	mov	r2, r0
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	4413      	add	r3, r2
 8019084:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019086:	68bb      	ldr	r3, [r7, #8]
 8019088:	685b      	ldr	r3, [r3, #4]
 801908a:	60bb      	str	r3, [r7, #8]
 801908c:	e7de      	b.n	801904c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801908e:	68fb      	ldr	r3, [r7, #12]
}
 8019090:	4618      	mov	r0, r3
 8019092:	3710      	adds	r7, #16
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}

08019098 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b084      	sub	sp, #16
 801909c:	af00      	add	r7, sp, #0
 801909e:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 80190a0:	2300      	movs	r3, #0
 80190a2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	685b      	ldr	r3, [r3, #4]
 80190a8:	60bb      	str	r3, [r7, #8]
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d015      	beq.n	80190dc <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 80190b0:	68bb      	ldr	r3, [r7, #8]
 80190b2:	681a      	ldr	r2, [r3, #0]
 80190b4:	68bb      	ldr	r3, [r7, #8]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	33c0      	adds	r3, #192	; 0xc0
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	4610      	mov	r0, r2
 80190c0:	4798      	blx	r3
 80190c2:	4603      	mov	r3, r0
 80190c4:	f083 0301 	eor.w	r3, r3, #1
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d002      	beq.n	80190d4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	3301      	adds	r3, #1
 80190d2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	60bb      	str	r3, [r7, #8]
 80190da:	e7e6      	b.n	80190aa <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 80190dc:	68fb      	ldr	r3, [r7, #12]
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3710      	adds	r7, #16
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd80      	pop	{r7, pc}

080190e6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 80190e6:	b580      	push	{r7, lr}
 80190e8:	b084      	sub	sp, #16
 80190ea:	af00      	add	r7, sp, #0
 80190ec:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	685b      	ldr	r3, [r3, #4]
 80190f2:	60fb      	str	r3, [r7, #12]
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d011      	beq.n	801911e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	681a      	ldr	r2, [r3, #0]
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	33c8      	adds	r3, #200	; 0xc8
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	4610      	mov	r0, r2
 801910a:	4798      	blx	r3
 801910c:	4603      	mov	r3, r0
 801910e:	2b00      	cmp	r3, #0
 8019110:	d001      	beq.n	8019116 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8019112:	2301      	movs	r3, #1
 8019114:	e004      	b.n	8019120 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	685b      	ldr	r3, [r3, #4]
 801911a:	60fb      	str	r3, [r7, #12]
 801911c:	e7ea      	b.n	80190f4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801911e:	2300      	movs	r3, #0
}
 8019120:	4618      	mov	r0, r3
 8019122:	3710      	adds	r7, #16
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}

08019128 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b084      	sub	sp, #16
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	60fb      	str	r3, [r7, #12]
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d014      	beq.n	8019166 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	681a      	ldr	r2, [r3, #0]
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	33c0      	adds	r3, #192	; 0xc0
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	4610      	mov	r0, r2
 801914c:	4798      	blx	r3
 801914e:	4603      	mov	r3, r0
 8019150:	f083 0301 	eor.w	r3, r3, #1
 8019154:	b2db      	uxtb	r3, r3
 8019156:	2b00      	cmp	r3, #0
 8019158:	d001      	beq.n	801915e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801915a:	2301      	movs	r3, #1
 801915c:	e004      	b.n	8019168 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	685b      	ldr	r3, [r3, #4]
 8019162:	60fb      	str	r3, [r7, #12]
 8019164:	e7e7      	b.n	8019136 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 8019166:	2300      	movs	r3, #0
}
 8019168:	4618      	mov	r0, r3
 801916a:	3710      	adds	r7, #16
 801916c:	46bd      	mov	sp, r7
 801916e:	bd80      	pop	{r7, pc}

08019170 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b084      	sub	sp, #16
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
 8019178:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	685b      	ldr	r3, [r3, #4]
 801917e:	60fb      	str	r3, [r7, #12]
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d012      	beq.n	80191ac <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	681a      	ldr	r2, [r3, #0]
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	33b8      	adds	r3, #184	; 0xb8
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	6839      	ldr	r1, [r7, #0]
 8019196:	4610      	mov	r0, r2
 8019198:	4798      	blx	r3
 801919a:	4603      	mov	r3, r0
 801919c:	2b00      	cmp	r3, #0
 801919e:	d001      	beq.n	80191a4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 80191a0:	2301      	movs	r3, #1
 80191a2:	e004      	b.n	80191ae <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	685b      	ldr	r3, [r3, #4]
 80191a8:	60fb      	str	r3, [r7, #12]
 80191aa:	e7e9      	b.n	8019180 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 80191ac:	2300      	movs	r3, #0
}
 80191ae:	4618      	mov	r0, r3
 80191b0:	3710      	adds	r7, #16
 80191b2:	46bd      	mov	sp, r7
 80191b4:	bd80      	pop	{r7, pc}
	...

080191b8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 80191b8:	b590      	push	{r4, r7, lr}
 80191ba:	b085      	sub	sp, #20
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 80191c2:	2273      	movs	r2, #115	; 0x73
 80191c4:	4911      	ldr	r1, [pc, #68]	; (801920c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 80191c6:	2008      	movs	r0, #8
 80191c8:	f7ee fab4 	bl	8007734 <_ZnwjPKci>
 80191cc:	4604      	mov	r4, r0
 80191ce:	6839      	ldr	r1, [r7, #0]
 80191d0:	4620      	mov	r0, r4
 80191d2:	f7ff fe8d 	bl	8018ef0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 80191d6:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	685b      	ldr	r3, [r3, #4]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d103      	bne.n	80191e8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	68ba      	ldr	r2, [r7, #8]
 80191e4:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 80191e6:	e00d      	b.n	8019204 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	685b      	ldr	r3, [r3, #4]
 80191ec:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	685b      	ldr	r3, [r3, #4]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d003      	beq.n	80191fe <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	60fb      	str	r3, [r7, #12]
 80191fc:	e7f7      	b.n	80191ee <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	68ba      	ldr	r2, [r7, #8]
 8019202:	605a      	str	r2, [r3, #4]
}
 8019204:	bf00      	nop
 8019206:	3714      	adds	r7, #20
 8019208:	46bd      	mov	sp, r7
 801920a:	bd90      	pop	{r4, r7, pc}
 801920c:	08022d50 	.word	0x08022d50

08019210 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b084      	sub	sp, #16
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
 8019218:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801921a:	683b      	ldr	r3, [r7, #0]
 801921c:	685b      	ldr	r3, [r3, #4]
 801921e:	60fb      	str	r3, [r7, #12]
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d018      	beq.n	8019258 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	681a      	ldr	r2, [r3, #0]
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	33c4      	adds	r3, #196	; 0xc4
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4610      	mov	r0, r2
 8019236:	4798      	blx	r3
 8019238:	4603      	mov	r3, r0
 801923a:	2b00      	cmp	r3, #0
 801923c:	d008      	beq.n	8019250 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	3330      	adds	r3, #48	; 0x30
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	68fa      	ldr	r2, [r7, #12]
 8019248:	6812      	ldr	r2, [r2, #0]
 801924a:	4611      	mov	r1, r2
 801924c:	6878      	ldr	r0, [r7, #4]
 801924e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	60fb      	str	r3, [r7, #12]
 8019256:	e7e3      	b.n	8019220 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 8019258:	bf00      	nop
 801925a:	3710      	adds	r7, #16
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b086      	sub	sp, #24
 8019264:	af00      	add	r7, sp, #0
 8019266:	60f8      	str	r0, [r7, #12]
 8019268:	60b9      	str	r1, [r7, #8]
 801926a:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	617b      	str	r3, [r7, #20]
 8019272:	697b      	ldr	r3, [r7, #20]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d019      	beq.n	80192ac <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 8019278:	697b      	ldr	r3, [r7, #20]
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	33b8      	adds	r3, #184	; 0xb8
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	68b9      	ldr	r1, [r7, #8]
 8019288:	4610      	mov	r0, r2
 801928a:	4798      	blx	r3
 801928c:	4603      	mov	r3, r0
 801928e:	2b00      	cmp	r3, #0
 8019290:	d008      	beq.n	80192a4 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	3330      	adds	r3, #48	; 0x30
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	697a      	ldr	r2, [r7, #20]
 801929c:	6812      	ldr	r2, [r2, #0]
 801929e:	4611      	mov	r1, r2
 80192a0:	68f8      	ldr	r0, [r7, #12]
 80192a2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80192a4:	697b      	ldr	r3, [r7, #20]
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	617b      	str	r3, [r7, #20]
 80192aa:	e7e2      	b.n	8019272 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 80192ac:	bf00      	nop
 80192ae:	3718      	adds	r7, #24
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}

080192b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b084      	sub	sp, #16
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
 80192bc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80192be:	683b      	ldr	r3, [r7, #0]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	60fb      	str	r3, [r7, #12]
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d00c      	beq.n	80192e4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	3330      	adds	r3, #48	; 0x30
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	68fa      	ldr	r2, [r7, #12]
 80192d4:	6812      	ldr	r2, [r2, #0]
 80192d6:	4611      	mov	r1, r2
 80192d8:	6878      	ldr	r0, [r7, #4]
 80192da:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	685b      	ldr	r3, [r3, #4]
 80192e0:	60fb      	str	r3, [r7, #12]
 80192e2:	e7ef      	b.n	80192c4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 80192e4:	bf00      	nop
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}

080192ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b084      	sub	sp, #16
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
 80192f4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	60fb      	str	r3, [r7, #12]
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d016      	beq.n	8019330 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	681a      	ldr	r2, [r3, #0]
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	33b8      	adds	r3, #184	; 0xb8
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	6839      	ldr	r1, [r7, #0]
 8019312:	4610      	mov	r0, r2
 8019314:	4798      	blx	r3
 8019316:	4603      	mov	r3, r0
 8019318:	f083 0301 	eor.w	r3, r3, #1
 801931c:	b2db      	uxtb	r3, r3
 801931e:	2b00      	cmp	r3, #0
 8019320:	d002      	beq.n	8019328 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	2200      	movs	r2, #0
 8019326:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	60fb      	str	r3, [r7, #12]
 801932e:	e7e5      	b.n	80192fc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	3388      	adds	r3, #136	; 0x88
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	6878      	ldr	r0, [r7, #4]
 801933a:	4798      	blx	r3
}
 801933c:	bf00      	nop
 801933e:	3710      	adds	r7, #16
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}

08019344 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b084      	sub	sp, #16
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	685b      	ldr	r3, [r3, #4]
 8019350:	60fb      	str	r3, [r7, #12]
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d015      	beq.n	8019384 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	681a      	ldr	r2, [r3, #0]
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	33d4      	adds	r3, #212	; 0xd4
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	4610      	mov	r0, r2
 8019368:	4798      	blx	r3
 801936a:	4603      	mov	r3, r0
 801936c:	f083 0301 	eor.w	r3, r3, #1
 8019370:	b2db      	uxtb	r3, r3
 8019372:	2b00      	cmp	r3, #0
 8019374:	d002      	beq.n	801937c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	2200      	movs	r2, #0
 801937a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	685b      	ldr	r3, [r3, #4]
 8019380:	60fb      	str	r3, [r7, #12]
 8019382:	e7e6      	b.n	8019352 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	3388      	adds	r3, #136	; 0x88
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	4798      	blx	r3
}
 8019390:	bf00      	nop
 8019392:	3710      	adds	r7, #16
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}

08019398 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b084      	sub	sp, #16
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	60fb      	str	r3, [r7, #12]
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d01b      	beq.n	80193e4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	681a      	ldr	r2, [r3, #0]
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	33c8      	adds	r3, #200	; 0xc8
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	4610      	mov	r0, r2
 80193bc:	4798      	blx	r3
 80193be:	4603      	mov	r3, r0
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d00b      	beq.n	80193dc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	681a      	ldr	r2, [r3, #0]
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	33ec      	adds	r3, #236	; 0xec
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	4610      	mov	r0, r2
 80193d4:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	2200      	movs	r2, #0
 80193da:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	685b      	ldr	r3, [r3, #4]
 80193e0:	60fb      	str	r3, [r7, #12]
 80193e2:	e7e0      	b.n	80193a6 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	3388      	adds	r3, #136	; 0x88
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	6878      	ldr	r0, [r7, #4]
 80193ee:	4798      	blx	r3
}
 80193f0:	bf00      	nop
 80193f2:	3710      	adds	r7, #16
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}

080193f8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b084      	sub	sp, #16
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
 8019400:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	685b      	ldr	r3, [r3, #4]
 8019406:	60fb      	str	r3, [r7, #12]
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d016      	beq.n	801943c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681a      	ldr	r2, [r3, #0]
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	33a8      	adds	r3, #168	; 0xa8
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	6839      	ldr	r1, [r7, #0]
 801941e:	4610      	mov	r0, r2
 8019420:	4798      	blx	r3
 8019422:	4603      	mov	r3, r0
 8019424:	f083 0301 	eor.w	r3, r3, #1
 8019428:	b2db      	uxtb	r3, r3
 801942a:	2b00      	cmp	r3, #0
 801942c:	d002      	beq.n	8019434 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	2200      	movs	r2, #0
 8019432:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	60fb      	str	r3, [r7, #12]
 801943a:	e7e5      	b.n	8019408 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	3388      	adds	r3, #136	; 0x88
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	6878      	ldr	r0, [r7, #4]
 8019446:	4798      	blx	r3
}
 8019448:	bf00      	nop
 801944a:	3710      	adds	r7, #16
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}

08019450 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b084      	sub	sp, #16
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
 8019458:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	685b      	ldr	r3, [r3, #4]
 801945e:	60fb      	str	r3, [r7, #12]
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d016      	beq.n	8019494 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	681a      	ldr	r2, [r3, #0]
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	33b0      	adds	r3, #176	; 0xb0
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	6839      	ldr	r1, [r7, #0]
 8019476:	4610      	mov	r0, r2
 8019478:	4798      	blx	r3
 801947a:	4603      	mov	r3, r0
 801947c:	f083 0301 	eor.w	r3, r3, #1
 8019480:	b2db      	uxtb	r3, r3
 8019482:	2b00      	cmp	r3, #0
 8019484:	d002      	beq.n	801948c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	2200      	movs	r2, #0
 801948a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	685b      	ldr	r3, [r3, #4]
 8019490:	60fb      	str	r3, [r7, #12]
 8019492:	e7e5      	b.n	8019460 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	3388      	adds	r3, #136	; 0x88
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	6878      	ldr	r0, [r7, #4]
 801949e:	4798      	blx	r3
}
 80194a0:	bf00      	nop
 80194a2:	3710      	adds	r7, #16
 80194a4:	46bd      	mov	sp, r7
 80194a6:	bd80      	pop	{r7, pc}

080194a8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b084      	sub	sp, #16
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	6078      	str	r0, [r7, #4]
 80194b0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	685b      	ldr	r3, [r3, #4]
 80194b6:	60fb      	str	r3, [r7, #12]
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d016      	beq.n	80194ec <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	681a      	ldr	r2, [r3, #0]
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	33ac      	adds	r3, #172	; 0xac
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	6839      	ldr	r1, [r7, #0]
 80194ce:	4610      	mov	r0, r2
 80194d0:	4798      	blx	r3
 80194d2:	4603      	mov	r3, r0
 80194d4:	f083 0301 	eor.w	r3, r3, #1
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d002      	beq.n	80194e4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2200      	movs	r2, #0
 80194e2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80194e4:	68fb      	ldr	r3, [r7, #12]
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	60fb      	str	r3, [r7, #12]
 80194ea:	e7e5      	b.n	80194b8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	3388      	adds	r3, #136	; 0x88
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	4798      	blx	r3
}
 80194f8:	bf00      	nop
 80194fa:	3710      	adds	r7, #16
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd80      	pop	{r7, pc}

08019500 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b084      	sub	sp, #16
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	60fb      	str	r3, [r7, #12]
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d016      	beq.n	8019544 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	681a      	ldr	r2, [r3, #0]
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	33b4      	adds	r3, #180	; 0xb4
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	6839      	ldr	r1, [r7, #0]
 8019526:	4610      	mov	r0, r2
 8019528:	4798      	blx	r3
 801952a:	4603      	mov	r3, r0
 801952c:	f083 0301 	eor.w	r3, r3, #1
 8019530:	b2db      	uxtb	r3, r3
 8019532:	2b00      	cmp	r3, #0
 8019534:	d002      	beq.n	801953c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2200      	movs	r2, #0
 801953a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	685b      	ldr	r3, [r3, #4]
 8019540:	60fb      	str	r3, [r7, #12]
 8019542:	e7e5      	b.n	8019510 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	3388      	adds	r3, #136	; 0x88
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	6878      	ldr	r0, [r7, #4]
 801954e:	4798      	blx	r3
}
 8019550:	bf00      	nop
 8019552:	3710      	adds	r7, #16
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}

08019558 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 8019558:	b580      	push	{r7, lr}
 801955a:	b084      	sub	sp, #16
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
 8019560:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	685b      	ldr	r3, [r3, #4]
 8019566:	60fb      	str	r3, [r7, #12]
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d016      	beq.n	801959c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	681a      	ldr	r2, [r3, #0]
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	33bc      	adds	r3, #188	; 0xbc
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	6839      	ldr	r1, [r7, #0]
 801957e:	4610      	mov	r0, r2
 8019580:	4798      	blx	r3
 8019582:	4603      	mov	r3, r0
 8019584:	f083 0301 	eor.w	r3, r3, #1
 8019588:	b2db      	uxtb	r3, r3
 801958a:	2b00      	cmp	r3, #0
 801958c:	d002      	beq.n	8019594 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	2200      	movs	r2, #0
 8019592:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	60fb      	str	r3, [r7, #12]
 801959a:	e7e5      	b.n	8019568 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	3388      	adds	r3, #136	; 0x88
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	6878      	ldr	r0, [r7, #4]
 80195a6:	4798      	blx	r3
}
 80195a8:	bf00      	nop
 80195aa:	3710      	adds	r7, #16
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b084      	sub	sp, #16
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	60fb      	str	r3, [r7, #12]
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d01d      	beq.n	8019600 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	681a      	ldr	r2, [r3, #0]
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	33c8      	adds	r3, #200	; 0xc8
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	4610      	mov	r0, r2
 80195d4:	4798      	blx	r3
 80195d6:	4603      	mov	r3, r0
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d00d      	beq.n	80195f8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	2200      	movs	r2, #0
 80195e6:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	3388      	adds	r3, #136	; 0x88
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	6878      	ldr	r0, [r7, #4]
 80195f2:	4798      	blx	r3
            return matchingCall;
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	e004      	b.n	8019602 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	685b      	ldr	r3, [r3, #4]
 80195fc:	60fb      	str	r3, [r7, #12]
 80195fe:	e7de      	b.n	80195be <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019600:	2300      	movs	r3, #0
}
 8019602:	4618      	mov	r0, r3
 8019604:	3710      	adds	r7, #16
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}

0801960a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801960a:	b580      	push	{r7, lr}
 801960c:	b084      	sub	sp, #16
 801960e:	af00      	add	r7, sp, #0
 8019610:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	685b      	ldr	r3, [r3, #4]
 8019616:	60fb      	str	r3, [r7, #12]
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d012      	beq.n	8019644 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	681a      	ldr	r2, [r3, #0]
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	33cc      	adds	r3, #204	; 0xcc
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	4610      	mov	r0, r2
 801962e:	4798      	blx	r3
 8019630:	4603      	mov	r3, r0
 8019632:	2b00      	cmp	r3, #0
 8019634:	d002      	beq.n	801963c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	e004      	b.n	8019646 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	60fb      	str	r3, [r7, #12]
 8019642:	e7e9      	b.n	8019618 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019644:	2300      	movs	r3, #0
}
 8019646:	4618      	mov	r0, r3
 8019648:	3710      	adds	r7, #16
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}

0801964e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801964e:	b580      	push	{r7, lr}
 8019650:	b084      	sub	sp, #16
 8019652:	af00      	add	r7, sp, #0
 8019654:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	60fb      	str	r3, [r7, #12]
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d01d      	beq.n	801969e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	681a      	ldr	r2, [r3, #0]
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	33cc      	adds	r3, #204	; 0xcc
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	4610      	mov	r0, r2
 8019672:	4798      	blx	r3
 8019674:	4603      	mov	r3, r0
 8019676:	2b00      	cmp	r3, #0
 8019678:	d00d      	beq.n	8019696 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	2200      	movs	r2, #0
 8019684:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	3388      	adds	r3, #136	; 0x88
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	6878      	ldr	r0, [r7, #4]
 8019690:	4798      	blx	r3
            return matchingCall;
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	e004      	b.n	80196a0 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	685b      	ldr	r3, [r3, #4]
 801969a:	60fb      	str	r3, [r7, #12]
 801969c:	e7de      	b.n	801965c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801969e:	2300      	movs	r3, #0
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	3710      	adds	r7, #16
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b086      	sub	sp, #24
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	685b      	ldr	r3, [r3, #4]
 80196b4:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 80196b6:	2300      	movs	r3, #0
 80196b8:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 80196ba:	2300      	movs	r3, #0
 80196bc:	60fb      	str	r3, [r7, #12]

    while (current) {
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d024      	beq.n	801970e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 80196c4:	697b      	ldr	r3, [r7, #20]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d11a      	bne.n	8019702 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 80196cc:	697b      	ldr	r3, [r7, #20]
 80196ce:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 80196d0:	693b      	ldr	r3, [r7, #16]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d106      	bne.n	80196e4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	685b      	ldr	r3, [r3, #4]
 80196da:	617b      	str	r3, [r7, #20]
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	697a      	ldr	r2, [r7, #20]
 80196e0:	605a      	str	r2, [r3, #4]
 80196e2:	e006      	b.n	80196f2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 80196e4:	697b      	ldr	r3, [r7, #20]
 80196e6:	685a      	ldr	r2, [r3, #4]
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	605a      	str	r2, [r3, #4]
 80196ec:	693b      	ldr	r3, [r7, #16]
 80196ee:	685b      	ldr	r3, [r3, #4]
 80196f0:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d0e2      	beq.n	80196be <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 80196f8:	2108      	movs	r1, #8
 80196fa:	4618      	mov	r0, r3
 80196fc:	f7ee f82e 	bl	800775c <_ZdlPvj>
 8019700:	e7dd      	b.n	80196be <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 8019702:	697b      	ldr	r3, [r7, #20]
 8019704:	613b      	str	r3, [r7, #16]
            current = current->next_;
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	617b      	str	r3, [r7, #20]
    while (current) {
 801970c:	e7d7      	b.n	80196be <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801970e:	bf00      	nop
 8019710:	3718      	adds	r7, #24
 8019712:	46bd      	mov	sp, r7
 8019714:	bd80      	pop	{r7, pc}

08019716 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 8019716:	b580      	push	{r7, lr}
 8019718:	b084      	sub	sp, #16
 801971a:	af00      	add	r7, sp, #0
 801971c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	685b      	ldr	r3, [r3, #4]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d019      	beq.n	801975a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	685b      	ldr	r3, [r3, #4]
 801972c:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d004      	beq.n	8019742 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 8019738:	681a      	ldr	r2, [r3, #0]
 801973a:	3204      	adds	r2, #4
 801973c:	6812      	ldr	r2, [r2, #0]
 801973e:	4618      	mov	r0, r3
 8019740:	4790      	blx	r2
        delete head_;
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	685b      	ldr	r3, [r3, #4]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d003      	beq.n	8019752 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801974a:	2108      	movs	r1, #8
 801974c:	4618      	mov	r0, r3
 801974e:	f7ee f805 	bl	800775c <_ZdlPvj>
        head_ = next;
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	68fa      	ldr	r2, [r7, #12]
 8019756:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019758:	e7e1      	b.n	801971e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801975a:	bf00      	nop
 801975c:	3710      	adds	r7, #16
 801975e:	46bd      	mov	sp, r7
 8019760:	bd80      	pop	{r7, pc}

08019762 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 8019762:	b580      	push	{r7, lr}
 8019764:	b084      	sub	sp, #16
 8019766:	af00      	add	r7, sp, #0
 8019768:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	685b      	ldr	r3, [r3, #4]
 801976e:	60fb      	str	r3, [r7, #12]
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d00c      	beq.n	8019790 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	681a      	ldr	r2, [r3, #0]
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	33ec      	adds	r3, #236	; 0xec
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4610      	mov	r0, r2
 8019786:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	685b      	ldr	r3, [r3, #4]
 801978c:	60fb      	str	r3, [r7, #12]
 801978e:	e7ef      	b.n	8019770 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 8019790:	bf00      	nop
 8019792:	3710      	adds	r7, #16
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b084      	sub	sp, #16
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	60fb      	str	r3, [r7, #12]
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d00c      	beq.n	80197c6 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	33e8      	adds	r3, #232	; 0xe8
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	4610      	mov	r0, r2
 80197bc:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	685b      	ldr	r3, [r3, #4]
 80197c2:	60fb      	str	r3, [r7, #12]
 80197c4:	e7ef      	b.n	80197a6 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 80197c6:	bf00      	nop
 80197c8:	3710      	adds	r7, #16
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bd80      	pop	{r7, pc}

080197ce <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 80197ce:	b580      	push	{r7, lr}
 80197d0:	b084      	sub	sp, #16
 80197d2:	af00      	add	r7, sp, #0
 80197d4:	6078      	str	r0, [r7, #4]
 80197d6:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	60fb      	str	r3, [r7, #12]
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d00d      	beq.n	8019800 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	681a      	ldr	r2, [r3, #0]
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	33dc      	adds	r3, #220	; 0xdc
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	6839      	ldr	r1, [r7, #0]
 80197f4:	4610      	mov	r0, r2
 80197f6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	685b      	ldr	r3, [r3, #4]
 80197fc:	60fb      	str	r3, [r7, #12]
 80197fe:	e7ee      	b.n	80197de <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 8019800:	bf00      	nop
 8019802:	3710      	adds	r7, #16
 8019804:	46bd      	mov	sp, r7
 8019806:	bd80      	pop	{r7, pc}

08019808 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b084      	sub	sp, #16
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
 8019810:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	685b      	ldr	r3, [r3, #4]
 8019816:	60fb      	str	r3, [r7, #12]
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d00d      	beq.n	801983a <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	681a      	ldr	r2, [r3, #0]
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	33e0      	adds	r3, #224	; 0xe0
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	6839      	ldr	r1, [r7, #0]
 801982e:	4610      	mov	r0, r2
 8019830:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	685b      	ldr	r3, [r3, #4]
 8019836:	60fb      	str	r3, [r7, #12]
 8019838:	e7ee      	b.n	8019818 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801983a:	bf00      	nop
 801983c:	3710      	adds	r7, #16
 801983e:	46bd      	mov	sp, r7
 8019840:	bd80      	pop	{r7, pc}
	...

08019844 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 8019844:	b590      	push	{r4, r7, lr}
 8019846:	b087      	sub	sp, #28
 8019848:	af00      	add	r7, sp, #0
 801984a:	60f8      	str	r0, [r7, #12]
 801984c:	60b9      	str	r1, [r7, #8]
 801984e:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 8019850:	68b9      	ldr	r1, [r7, #8]
 8019852:	68f8      	ldr	r0, [r7, #12]
 8019854:	f7f0 fb85 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 8019858:	f107 0310 	add.w	r3, r7, #16
 801985c:	490f      	ldr	r1, [pc, #60]	; (801989c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801985e:	4618      	mov	r0, r3
 8019860:	f7f0 fb2b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019864:	f107 0310 	add.w	r3, r7, #16
 8019868:	4619      	mov	r1, r3
 801986a:	68f8      	ldr	r0, [r7, #12]
 801986c:	f7f0 fee9 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 8019870:	4603      	mov	r3, r0
 8019872:	461c      	mov	r4, r3
 8019874:	f107 0310 	add.w	r3, r7, #16
 8019878:	4618      	mov	r0, r3
 801987a:	f7f0 fed6 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801987e:	2c00      	cmp	r4, #0
 8019880:	d007      	beq.n	8019892 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 8019882:	6879      	ldr	r1, [r7, #4]
 8019884:	68f8      	ldr	r0, [r7, #12]
 8019886:	f7f0 ff4d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801988a:	4905      	ldr	r1, [pc, #20]	; (80198a0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801988c:	68f8      	ldr	r0, [r7, #12]
 801988e:	f7f0 ff5b 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 8019892:	bf00      	nop
}
 8019894:	68f8      	ldr	r0, [r7, #12]
 8019896:	371c      	adds	r7, #28
 8019898:	46bd      	mov	sp, r7
 801989a:	bd90      	pop	{r4, r7, pc}
 801989c:	08022d74 	.word	0x08022d74
 80198a0:	08022d78 	.word	0x08022d78

080198a4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 80198a4:	b590      	push	{r4, r7, lr}
 80198a6:	b087      	sub	sp, #28
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	60b9      	str	r1, [r7, #8]
 80198ae:	607a      	str	r2, [r7, #4]
 80198b0:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 80198b2:	68b9      	ldr	r1, [r7, #8]
 80198b4:	68f8      	ldr	r0, [r7, #12]
 80198b6:	f7f0 fb54 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 80198ba:	f107 0310 	add.w	r3, r7, #16
 80198be:	4912      	ldr	r1, [pc, #72]	; (8019908 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 80198c0:	4618      	mov	r0, r3
 80198c2:	f7f0 fafa 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 80198c6:	f107 0310 	add.w	r3, r7, #16
 80198ca:	4619      	mov	r1, r3
 80198cc:	68f8      	ldr	r0, [r7, #12]
 80198ce:	f7f0 fefd 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 80198d2:	4603      	mov	r3, r0
 80198d4:	461c      	mov	r4, r3
 80198d6:	f107 0310 	add.w	r3, r7, #16
 80198da:	4618      	mov	r0, r3
 80198dc:	f7f0 fea5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 80198e0:	2c00      	cmp	r4, #0
 80198e2:	d003      	beq.n	80198ec <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 80198e4:	4909      	ldr	r1, [pc, #36]	; (801990c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 80198e6:	68f8      	ldr	r0, [r7, #12]
 80198e8:	f7f0 ff2e 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 80198ec:	6879      	ldr	r1, [r7, #4]
 80198ee:	68f8      	ldr	r0, [r7, #12]
 80198f0:	f7f0 ff18 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 80198f4:	6839      	ldr	r1, [r7, #0]
 80198f6:	68f8      	ldr	r0, [r7, #12]
 80198f8:	f7f0 ff14 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    return str;
 80198fc:	bf00      	nop
}
 80198fe:	68f8      	ldr	r0, [r7, #12]
 8019900:	371c      	adds	r7, #28
 8019902:	46bd      	mov	sp, r7
 8019904:	bd90      	pop	{r4, r7, pc}
 8019906:	bf00      	nop
 8019908:	08022d74 	.word	0x08022d74
 801990c:	08022d80 	.word	0x08022d80

08019910 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b08c      	sub	sp, #48	; 0x30
 8019914:	af00      	add	r7, sp, #0
 8019916:	60f8      	str	r0, [r7, #12]
 8019918:	60b9      	str	r1, [r7, #8]
 801991a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801991c:	f107 0314 	add.w	r3, r7, #20
 8019920:	4929      	ldr	r1, [pc, #164]	; (80199c8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 8019922:	4618      	mov	r0, r3
 8019924:	f7f0 fac9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019930:	2b00      	cmp	r3, #0
 8019932:	d038      	beq.n	80199a6 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 8019934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019936:	681a      	ldr	r2, [r3, #0]
 8019938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	33c0      	adds	r3, #192	; 0xc0
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	4610      	mov	r0, r2
 8019944:	4798      	blx	r3
 8019946:	4603      	mov	r3, r0
 8019948:	f083 0301 	eor.w	r3, r3, #1
 801994c:	b2db      	uxtb	r3, r3
 801994e:	2b00      	cmp	r3, #0
 8019950:	d025      	beq.n	801999e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 8019952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019954:	6819      	ldr	r1, [r3, #0]
 8019956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	33f0      	adds	r3, #240	; 0xf0
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019964:	4610      	mov	r0, r2
 8019966:	4798      	blx	r3
 8019968:	f107 001c 	add.w	r0, r7, #28
 801996c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019970:	f107 0114 	add.w	r1, r7, #20
 8019974:	687a      	ldr	r2, [r7, #4]
 8019976:	f7ff ff95 	bl	80198a4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801997a:	f107 021c 	add.w	r2, r7, #28
 801997e:	f107 0314 	add.w	r3, r7, #20
 8019982:	4611      	mov	r1, r2
 8019984:	4618      	mov	r0, r3
 8019986:	f7f0 fb04 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801998a:	f107 031c 	add.w	r3, r7, #28
 801998e:	4618      	mov	r0, r3
 8019990:	f7f0 fe4b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019998:	4618      	mov	r0, r3
 801999a:	f7f0 fe46 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a0:	685b      	ldr	r3, [r3, #4]
 80199a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199a4:	e7c3      	b.n	801992e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	f107 0114 	add.w	r1, r7, #20
 80199ac:	687a      	ldr	r2, [r7, #4]
 80199ae:	4618      	mov	r0, r3
 80199b0:	f7ff ff48 	bl	8019844 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 80199b4:	f107 0314 	add.w	r3, r7, #20
 80199b8:	4618      	mov	r0, r3
 80199ba:	f7f0 fe36 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 80199be:	bf00      	nop
}
 80199c0:	68f8      	ldr	r0, [r7, #12]
 80199c2:	3730      	adds	r7, #48	; 0x30
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	08022d74 	.word	0x08022d74

080199cc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b08c      	sub	sp, #48	; 0x30
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	60f8      	str	r0, [r7, #12]
 80199d4:	60b9      	str	r1, [r7, #8]
 80199d6:	607a      	str	r2, [r7, #4]
    SimpleString str;
 80199d8:	f107 0314 	add.w	r3, r7, #20
 80199dc:	4928      	ldr	r1, [pc, #160]	; (8019a80 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 80199de:	4618      	mov	r0, r3
 80199e0:	f7f0 fa6b 	bl	8009eba <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80199e4:	68bb      	ldr	r3, [r7, #8]
 80199e6:	685b      	ldr	r3, [r3, #4]
 80199e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d035      	beq.n	8019a5c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 80199f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199f2:	681a      	ldr	r2, [r3, #0]
 80199f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	33c0      	adds	r3, #192	; 0xc0
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	4610      	mov	r0, r2
 8019a00:	4798      	blx	r3
 8019a02:	4603      	mov	r3, r0
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d025      	beq.n	8019a54 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 8019a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a0a:	6819      	ldr	r1, [r3, #0]
 8019a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	33f0      	adds	r3, #240	; 0xf0
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019a1a:	4610      	mov	r0, r2
 8019a1c:	4798      	blx	r3
 8019a1e:	f107 001c 	add.w	r0, r7, #28
 8019a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a26:	f107 0114 	add.w	r1, r7, #20
 8019a2a:	687a      	ldr	r2, [r7, #4]
 8019a2c:	f7ff ff3a 	bl	80198a4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 8019a30:	f107 021c 	add.w	r2, r7, #28
 8019a34:	f107 0314 	add.w	r3, r7, #20
 8019a38:	4611      	mov	r1, r2
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7f0 faa9 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 8019a40:	f107 031c 	add.w	r3, r7, #28
 8019a44:	4618      	mov	r0, r3
 8019a46:	f7f0 fdf0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f7f0 fdeb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a5a:	e7c6      	b.n	80199ea <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	f107 0114 	add.w	r1, r7, #20
 8019a62:	687a      	ldr	r2, [r7, #4]
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7ff feed 	bl	8019844 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 8019a6a:	f107 0314 	add.w	r3, r7, #20
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f7f0 fddb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019a74:	bf00      	nop
}
 8019a76:	68f8      	ldr	r0, [r7, #12]
 8019a78:	3730      	adds	r7, #48	; 0x30
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	bd80      	pop	{r7, pc}
 8019a7e:	bf00      	nop
 8019a80:	08022d74 	.word	0x08022d74

08019a84 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b08e      	sub	sp, #56	; 0x38
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
 8019a8c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019a8e:	f107 030c 	add.w	r3, r7, #12
 8019a92:	4936      	ldr	r1, [pc, #216]	; (8019b6c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7f0 fa10 	bl	8009eba <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8019aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d044      	beq.n	8019b30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 8019aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aa8:	681a      	ldr	r2, [r3, #0]
 8019aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	33cc      	adds	r3, #204	; 0xcc
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	4610      	mov	r0, r2
 8019ab6:	4798      	blx	r3
 8019ab8:	4603      	mov	r3, r0
 8019aba:	f083 0301 	eor.w	r3, r3, #1
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d031      	beq.n	8019b28 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 8019ac4:	f107 031c 	add.w	r3, r7, #28
 8019ac8:	4928      	ldr	r1, [pc, #160]	; (8019b6c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7f0 f9f5 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ad2:	6819      	ldr	r1, [r3, #0]
 8019ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	33f4      	adds	r3, #244	; 0xf4
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019ae2:	4610      	mov	r0, r2
 8019ae4:	4798      	blx	r3
 8019ae6:	f107 0014 	add.w	r0, r7, #20
 8019aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019aee:	f107 021c 	add.w	r2, r7, #28
 8019af2:	f107 010c 	add.w	r1, r7, #12
 8019af6:	f7ff fed5 	bl	80198a4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 8019afa:	f107 0214 	add.w	r2, r7, #20
 8019afe:	f107 030c 	add.w	r3, r7, #12
 8019b02:	4611      	mov	r1, r2
 8019b04:	4618      	mov	r0, r3
 8019b06:	f7f0 fa44 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 8019b0a:	f107 0314 	add.w	r3, r7, #20
 8019b0e:	4618      	mov	r0, r3
 8019b10:	f7f0 fd8b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019b18:	4618      	mov	r0, r3
 8019b1a:	f7f0 fd86 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019b1e:	f107 031c 	add.w	r3, r7, #28
 8019b22:	4618      	mov	r0, r3
 8019b24:	f7f0 fd81 	bl	800a62a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8019b2e:	e7b7      	b.n	8019aa0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 8019b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019b34:	490d      	ldr	r1, [pc, #52]	; (8019b6c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7f0 f9bf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8019b42:	f107 010c 	add.w	r1, r7, #12
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7ff fe7c 	bl	8019844 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 8019b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019b50:	4618      	mov	r0, r3
 8019b52:	f7f0 fd6a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    SimpleString str;
 8019b56:	f107 030c 	add.w	r3, r7, #12
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f7f0 fd65 	bl	800a62a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 8019b60:	bf00      	nop
}
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	3738      	adds	r7, #56	; 0x38
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bd80      	pop	{r7, pc}
 8019b6a:	bf00      	nop
 8019b6c:	08022d74 	.word	0x08022d74

08019b70 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b084      	sub	sp, #16
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	685b      	ldr	r3, [r3, #4]
 8019b7c:	60fb      	str	r3, [r7, #12]
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d014      	beq.n	8019bae <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	681a      	ldr	r2, [r3, #0]
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	33d0      	adds	r3, #208	; 0xd0
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	4610      	mov	r0, r2
 8019b94:	4798      	blx	r3
 8019b96:	4603      	mov	r3, r0
 8019b98:	f083 0301 	eor.w	r3, r3, #1
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d001      	beq.n	8019ba6 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	e004      	b.n	8019bb0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	685b      	ldr	r3, [r3, #4]
 8019baa:	60fb      	str	r3, [r7, #12]
 8019bac:	e7e7      	b.n	8019b7e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 8019bae:	2300      	movs	r3, #0
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3710      	adds	r7, #16
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 8019bb8:	b480      	push	{r7}
 8019bba:	b083      	sub	sp, #12
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	460b      	mov	r3, r1
 8019bc2:	70fb      	strb	r3, [r7, #3]
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	78fa      	ldrb	r2, [r7, #3]
 8019bc8:	711a      	strb	r2, [r3, #4]
 8019bca:	bf00      	nop
 8019bcc:	370c      	adds	r7, #12
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd4:	4770      	bx	lr
	...

08019bd8 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	460b      	mov	r3, r1
 8019be2:	70fb      	strb	r3, [r7, #3]
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	4618      	mov	r0, r3
 8019be8:	f7ed ff6a 	bl	8007ac0 <_ZN14TestTerminatorC1Ev>
 8019bec:	4a05      	ldr	r2, [pc, #20]	; (8019c04 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	601a      	str	r2, [r3, #0]
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	78fa      	ldrb	r2, [r7, #3]
 8019bf6:	711a      	strb	r2, [r3, #4]
    {
    }
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	3708      	adds	r7, #8
 8019bfe:	46bd      	mov	sp, r7
 8019c00:	bd80      	pop	{r7, pc}
 8019c02:	bf00      	nop
 8019c04:	08025224 	.word	0x08025224

08019c08 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b082      	sub	sp, #8
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	791b      	ldrb	r3, [r3, #4]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d001      	beq.n	8019c1c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 8019c18:	f7f6 f9fe 	bl	8010018 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 8019c1c:	f7f7 fd40 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019c20:	4603      	mov	r3, r0
 8019c22:	681a      	ldr	r2, [r3, #0]
 8019c24:	6812      	ldr	r2, [r2, #0]
 8019c26:	4618      	mov	r0, r3
 8019c28:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 8019c2a:	bf00      	nop
 8019c2c:	3708      	adds	r7, #8
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}
	...

08019c34 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
    {
 8019c3c:	4a05      	ldr	r2, [pc, #20]	; (8019c54 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	601a      	str	r2, [r3, #0]
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	4618      	mov	r0, r3
 8019c46:	f7f7 fdbb 	bl	80117c0 <_ZN14TestTerminatorD1Ev>
    }
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3708      	adds	r7, #8
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}
 8019c54:	08025224 	.word	0x08025224

08019c58 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
    }
 8019c60:	6878      	ldr	r0, [r7, #4]
 8019c62:	f7ff ffe7 	bl	8019c34 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 8019c66:	2108      	movs	r1, #8
 8019c68:	6878      	ldr	r0, [r7, #4]
 8019c6a:	f7ed fd77 	bl	800775c <_ZdlPvj>
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4618      	mov	r0, r3
 8019c72:	3708      	adds	r7, #8
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}

08019c78 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 8019c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c7a:	b085      	sub	sp, #20
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
 8019c80:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	330c      	adds	r3, #12
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	4798      	blx	r3
 8019c8e:	4603      	mov	r3, r0
 8019c90:	681a      	ldr	r2, [r3, #0]
 8019c92:	321c      	adds	r2, #28
 8019c94:	6812      	ldr	r2, [r2, #0]
 8019c96:	4618      	mov	r0, r3
 8019c98:	4790      	blx	r2
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	f083 0301 	eor.w	r3, r3, #1
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d01d      	beq.n	8019ce2 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	330c      	adds	r3, #12
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	6878      	ldr	r0, [r7, #4]
 8019cb0:	4798      	blx	r3
 8019cb2:	4604      	mov	r4, r0
 8019cb4:	6823      	ldr	r3, [r4, #0]
 8019cb6:	339c      	adds	r3, #156	; 0x9c
 8019cb8:	681d      	ldr	r5, [r3, #0]
 8019cba:	683e      	ldr	r6, [r7, #0]
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	791a      	ldrb	r2, [r3, #4]
 8019cc0:	f107 0308 	add.w	r3, r7, #8
 8019cc4:	4611      	mov	r1, r2
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7ff ff86 	bl	8019bd8 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 8019ccc:	f107 0308 	add.w	r3, r7, #8
 8019cd0:	461a      	mov	r2, r3
 8019cd2:	4631      	mov	r1, r6
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	47a8      	blx	r5
 8019cd8:	f107 0308 	add.w	r3, r7, #8
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f7ff ffa9 	bl	8019c34 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 8019ce2:	bf00      	nop
 8019ce4:	3714      	adds	r7, #20
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019cea <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 8019cea:	b580      	push	{r7, lr}
 8019cec:	b082      	sub	sp, #8
 8019cee:	af00      	add	r7, sp, #0
 8019cf0:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 8019cf2:	f7f7 fcc5 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 8019cf6:	4603      	mov	r3, r0
}
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	3708      	adds	r7, #8
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	bd80      	pop	{r7, pc}

08019d00 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 8019d00:	b590      	push	{r4, r7, lr}
 8019d02:	b085      	sub	sp, #20
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
 8019d08:	6039      	str	r1, [r7, #0]
 8019d0a:	687c      	ldr	r4, [r7, #4]
 8019d0c:	f107 0308 	add.w	r3, r7, #8
 8019d10:	490b      	ldr	r1, [pc, #44]	; (8019d40 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 8019d12:	4618      	mov	r0, r3
 8019d14:	f7f0 f8d1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019d18:	f107 0308 	add.w	r3, r7, #8
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	6839      	ldr	r1, [r7, #0]
 8019d20:	4620      	mov	r0, r4
 8019d22:	f7f1 ff29 	bl	800bb78 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8019d26:	f107 0308 	add.w	r3, r7, #8
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f7f0 fc7d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019d30:	4a04      	ldr	r2, [pc, #16]	; (8019d44 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	601a      	str	r2, [r3, #0]
{
}
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	4618      	mov	r0, r3
 8019d3a:	3714      	adds	r7, #20
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd90      	pop	{r4, r7, pc}
 8019d40:	08022d84 	.word	0x08022d84
 8019d44:	080241b0 	.word	0x080241b0

08019d48 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 8019d48:	b5b0      	push	{r4, r5, r7, lr}
 8019d4a:	b08a      	sub	sp, #40	; 0x28
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
 8019d50:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	332c      	adds	r3, #44	; 0x2c
 8019d56:	492b      	ldr	r1, [pc, #172]	; (8019e04 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f7f0 fcf5 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8019d64:	683b      	ldr	r3, [r7, #0]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	337c      	adds	r3, #124	; 0x7c
 8019d6a:	681c      	ldr	r4, [r3, #0]
 8019d6c:	f107 0310 	add.w	r3, r7, #16
 8019d70:	4925      	ldr	r1, [pc, #148]	; (8019e08 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 8019d72:	4618      	mov	r0, r3
 8019d74:	f7f0 f8a1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019d78:	f107 0308 	add.w	r3, r7, #8
 8019d7c:	f107 0210 	add.w	r2, r7, #16
 8019d80:	6839      	ldr	r1, [r7, #0]
 8019d82:	4618      	mov	r0, r3
 8019d84:	47a0      	blx	r4
 8019d86:	f107 0308 	add.w	r3, r7, #8
 8019d8a:	4619      	mov	r1, r3
 8019d8c:	4628      	mov	r0, r5
 8019d8e:	f7f0 fcc9 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8019d92:	f107 0308 	add.w	r3, r7, #8
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7f0 fc47 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019d9c:	f107 0310 	add.w	r3, r7, #16
 8019da0:	4618      	mov	r0, r3
 8019da2:	f7f0 fc42 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	332c      	adds	r3, #44	; 0x2c
 8019daa:	4918      	ldr	r1, [pc, #96]	; (8019e0c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 8019dac:	4618      	mov	r0, r3
 8019dae:	f7f0 fccb 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	3380      	adds	r3, #128	; 0x80
 8019dbe:	681c      	ldr	r4, [r3, #0]
 8019dc0:	f107 0320 	add.w	r3, r7, #32
 8019dc4:	4910      	ldr	r1, [pc, #64]	; (8019e08 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7f0 f877 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019dcc:	f107 0318 	add.w	r3, r7, #24
 8019dd0:	f107 0220 	add.w	r2, r7, #32
 8019dd4:	6839      	ldr	r1, [r7, #0]
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	47a0      	blx	r4
 8019dda:	f107 0318 	add.w	r3, r7, #24
 8019dde:	4619      	mov	r1, r3
 8019de0:	4628      	mov	r0, r5
 8019de2:	f7f0 fc9f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8019de6:	f107 0318 	add.w	r3, r7, #24
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7f0 fc1d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019df0:	f107 0320 	add.w	r3, r7, #32
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7f0 fc18 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 8019dfa:	bf00      	nop
 8019dfc:	3728      	adds	r7, #40	; 0x28
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bdb0      	pop	{r4, r5, r7, pc}
 8019e02:	bf00      	nop
 8019e04:	08022dd4 	.word	0x08022dd4
 8019e08:	08022e00 	.word	0x08022e00
 8019e0c:	08022e04 	.word	0x08022e04

08019e10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 8019e10:	b590      	push	{r4, r7, lr}
 8019e12:	b08f      	sub	sp, #60	; 0x3c
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	60f8      	str	r0, [r7, #12]
 8019e18:	60b9      	str	r1, [r7, #8]
 8019e1a:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 8019e1c:	f107 0310 	add.w	r3, r7, #16
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7ff f877 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 8019e26:	f107 0310 	add.w	r3, r7, #16
 8019e2a:	687a      	ldr	r2, [r7, #4]
 8019e2c:	68b9      	ldr	r1, [r7, #8]
 8019e2e:	4618      	mov	r0, r3
 8019e30:	f7ff fa16 	bl	8019260 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	332c      	adds	r3, #44	; 0x2c
 8019e38:	4937      	ldr	r1, [pc, #220]	; (8019f18 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7f0 fc84 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	332c      	adds	r3, #44	; 0x2c
 8019e44:	68b9      	ldr	r1, [r7, #8]
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7f0 fc6c 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	332c      	adds	r3, #44	; 0x2c
 8019e50:	4932      	ldr	r1, [pc, #200]	; (8019f1c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7f0 fc78 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019e5e:	f107 0320 	add.w	r3, r7, #32
 8019e62:	492f      	ldr	r1, [pc, #188]	; (8019f20 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7f0 f828 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019e6a:	f107 0318 	add.w	r3, r7, #24
 8019e6e:	f107 0220 	add.w	r2, r7, #32
 8019e72:	f107 0110 	add.w	r1, r7, #16
 8019e76:	4618      	mov	r0, r3
 8019e78:	f7ff fd4a 	bl	8019910 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 8019e7c:	f107 0318 	add.w	r3, r7, #24
 8019e80:	4619      	mov	r1, r3
 8019e82:	4620      	mov	r0, r4
 8019e84:	f7f0 fc4e 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8019e88:	f107 0318 	add.w	r3, r7, #24
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f7f0 fbcc 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019e92:	f107 0320 	add.w	r3, r7, #32
 8019e96:	4618      	mov	r0, r3
 8019e98:	f7f0 fbc7 	bl	800a62a <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	332c      	adds	r3, #44	; 0x2c
 8019ea0:	4920      	ldr	r1, [pc, #128]	; (8019f24 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7f0 fc50 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	332c      	adds	r3, #44	; 0x2c
 8019eac:	68b9      	ldr	r1, [r7, #8]
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f7f0 fc38 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	332c      	adds	r3, #44	; 0x2c
 8019eb8:	4918      	ldr	r1, [pc, #96]	; (8019f1c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f7f0 fc44 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019eca:	4915      	ldr	r1, [pc, #84]	; (8019f20 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7ef fff4 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019ed6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019eda:	f107 0110 	add.w	r1, r7, #16
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f7ff fd74 	bl	80199cc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 8019ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019ee8:	4619      	mov	r1, r3
 8019eea:	4620      	mov	r0, r4
 8019eec:	f7f0 fc1a 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 8019ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f0 fb98 	bl	800a62a <_ZN12SimpleStringD1Ev>
 8019efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019efe:	4618      	mov	r0, r3
 8019f00:	f7f0 fb93 	bl	800a62a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 8019f04:	f107 0310 	add.w	r3, r7, #16
 8019f08:	4618      	mov	r0, r3
 8019f0a:	f7ff f817 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 8019f0e:	bf00      	nop
 8019f10:	373c      	adds	r7, #60	; 0x3c
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd90      	pop	{r4, r7, pc}
 8019f16:	bf00      	nop
 8019f18:	08022e2c 	.word	0x08022e2c
 8019f1c:	08022e6c 	.word	0x08022e6c
 8019f20:	08022e00 	.word	0x08022e00
 8019f24:	08022e70 	.word	0x08022e70

08019f28 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019f28:	b590      	push	{r4, r7, lr}
 8019f2a:	b087      	sub	sp, #28
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	60f8      	str	r0, [r7, #12]
 8019f30:	60b9      	str	r1, [r7, #8]
 8019f32:	607a      	str	r2, [r7, #4]
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	68b9      	ldr	r1, [r7, #8]
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7ff fee1 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 8019f3e:	4a10      	ldr	r2, [pc, #64]	; (8019f80 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019f4a:	f107 0310 	add.w	r3, r7, #16
 8019f4e:	490d      	ldr	r1, [pc, #52]	; (8019f84 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 8019f50:	4618      	mov	r0, r3
 8019f52:	f7ef ffb2 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 8019f56:	f107 0310 	add.w	r3, r7, #16
 8019f5a:	4619      	mov	r1, r3
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	f7f0 f818 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 8019f62:	f107 0310 	add.w	r3, r7, #16
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7f0 fb5f 	bl	800a62a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	6879      	ldr	r1, [r7, #4]
 8019f70:	4618      	mov	r0, r3
 8019f72:	f7ff fee9 	bl	8019d48 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	4618      	mov	r0, r3
 8019f7a:	371c      	adds	r7, #28
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd90      	pop	{r4, r7, pc}
 8019f80:	08024184 	.word	0x08024184
 8019f84:	08022eac 	.word	0x08022eac

08019f88 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019f88:	b590      	push	{r4, r7, lr}
 8019f8a:	b08d      	sub	sp, #52	; 0x34
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	60f8      	str	r0, [r7, #12]
 8019f90:	60b9      	str	r1, [r7, #8]
 8019f92:	607a      	str	r2, [r7, #4]
 8019f94:	603b      	str	r3, [r7, #0]
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	68b9      	ldr	r1, [r7, #8]
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	f7ff feb0 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 8019fa0:	4a2f      	ldr	r2, [pc, #188]	; (801a060 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	3310      	adds	r3, #16
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	6879      	ldr	r1, [r7, #4]
 8019fb0:	6838      	ldr	r0, [r7, #0]
 8019fb2:	4798      	blx	r3
 8019fb4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 8019fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d027      	beq.n	801a00c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 8019fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbe:	1c5a      	adds	r2, r3, #1
 8019fc0:	f107 0314 	add.w	r3, r7, #20
 8019fc4:	4611      	mov	r1, r2
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7f1 fa00 	bl	800b3cc <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019fd2:	f107 0314 	add.w	r3, r7, #20
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7f0 fafa 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 8019fdc:	4602      	mov	r2, r0
 8019fde:	f107 031c 	add.w	r3, r7, #28
 8019fe2:	4920      	ldr	r1, [pc, #128]	; (801a064 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f7f1 f827 	bl	800b038 <_Z16StringFromFormatPKcz>
 8019fea:	f107 031c 	add.w	r3, r7, #28
 8019fee:	4619      	mov	r1, r3
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f7ef ffce 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 8019ff6:	f107 031c 	add.w	r3, r7, #28
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	f7f0 fb15 	bl	800a62a <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801a000:	f107 0314 	add.w	r3, r7, #20
 801a004:	4618      	mov	r0, r3
 801a006:	f7f0 fb10 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801a00a:	e013      	b.n	801a034 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a016:	4914      	ldr	r1, [pc, #80]	; (801a068 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a018:	4618      	mov	r0, r3
 801a01a:	f7ef ff4e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a01e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a022:	4619      	mov	r1, r3
 801a024:	4620      	mov	r0, r4
 801a026:	f7ef ffb4 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a02a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a02e:	4618      	mov	r0, r3
 801a030:	f7f0 fafb 	bl	800a62a <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	332c      	adds	r3, #44	; 0x2c
 801a038:	6879      	ldr	r1, [r7, #4]
 801a03a:	4618      	mov	r0, r3
 801a03c:	f7f0 fb72 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	332c      	adds	r3, #44	; 0x2c
 801a044:	4909      	ldr	r1, [pc, #36]	; (801a06c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a046:	4618      	mov	r0, r3
 801a048:	f7f0 fb7e 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	6839      	ldr	r1, [r7, #0]
 801a050:	4618      	mov	r0, r3
 801a052:	f7ff fe79 	bl	8019d48 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	4618      	mov	r0, r3
 801a05a:	3734      	adds	r7, #52	; 0x34
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd90      	pop	{r4, r7, pc}
 801a060:	08024b24 	.word	0x08024b24
 801a064:	08022edc 	.word	0x08022edc
 801a068:	08022f18 	.word	0x08022f18
 801a06c:	08022e6c 	.word	0x08022e6c

0801a070 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a070:	b590      	push	{r4, r7, lr}
 801a072:	b089      	sub	sp, #36	; 0x24
 801a074:	af00      	add	r7, sp, #0
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	60b9      	str	r1, [r7, #8]
 801a07a:	607a      	str	r2, [r7, #4]
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	68b9      	ldr	r1, [r7, #8]
 801a080:	4618      	mov	r0, r3
 801a082:	f7ff fe3d 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a086:	4a1f      	ldr	r2, [pc, #124]	; (801a104 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801a08c:	f107 0310 	add.w	r3, r7, #16
 801a090:	4618      	mov	r0, r3
 801a092:	f7fe ff3f 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801a096:	f107 0310 	add.w	r3, r7, #16
 801a09a:	6879      	ldr	r1, [r7, #4]
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7ff f909 	bl	80192b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801a0a2:	f107 0310 	add.w	r3, r7, #16
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7ff f94c 	bl	8019344 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a0b2:	f107 0318 	add.w	r3, r7, #24
 801a0b6:	4914      	ldr	r1, [pc, #80]	; (801a108 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f7ef fefe 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a0be:	f107 0318 	add.w	r3, r7, #24
 801a0c2:	4619      	mov	r1, r3
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	f7ef ff64 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a0ca:	f107 0318 	add.w	r3, r7, #24
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f7f0 faab 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	332c      	adds	r3, #44	; 0x2c
 801a0d8:	490c      	ldr	r1, [pc, #48]	; (801a10c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7f0 fb34 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	f107 0210 	add.w	r2, r7, #16
 801a0e6:	4611      	mov	r1, r2
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	f7ff fe2d 	bl	8019d48 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801a0ee:	f107 0310 	add.w	r3, r7, #16
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f7fe ff22 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	3724      	adds	r7, #36	; 0x24
 801a0fe:	46bd      	mov	sp, r7
 801a100:	bd90      	pop	{r4, r7, pc}
 801a102:	bf00      	nop
 801a104:	08024158 	.word	0x08024158
 801a108:	08022f44 	.word	0x08022f44
 801a10c:	08022e6c 	.word	0x08022e6c

0801a110 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801a110:	b590      	push	{r4, r7, lr}
 801a112:	b099      	sub	sp, #100	; 0x64
 801a114:	af00      	add	r7, sp, #0
 801a116:	60f8      	str	r0, [r7, #12]
 801a118:	60b9      	str	r1, [r7, #8]
 801a11a:	607a      	str	r2, [r7, #4]
 801a11c:	603b      	str	r3, [r7, #0]
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	68b9      	ldr	r1, [r7, #8]
 801a122:	4618      	mov	r0, r3
 801a124:	f7ff fdec 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a128:	4a9e      	ldr	r2, [pc, #632]	; (801a3a4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a12e:	f107 0310 	add.w	r3, r7, #16
 801a132:	4618      	mov	r0, r3
 801a134:	f7fe feee 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801a138:	f107 0310 	add.w	r3, r7, #16
 801a13c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a13e:	6879      	ldr	r1, [r7, #4]
 801a140:	4618      	mov	r0, r3
 801a142:	f7ff f88d 	bl	8019260 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	335c      	adds	r3, #92	; 0x5c
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	f107 0218 	add.w	r2, r7, #24
 801a152:	6839      	ldr	r1, [r7, #0]
 801a154:	4610      	mov	r0, r2
 801a156:	4798      	blx	r3
 801a158:	f107 0218 	add.w	r2, r7, #24
 801a15c:	f107 0310 	add.w	r3, r7, #16
 801a160:	4611      	mov	r1, r2
 801a162:	4618      	mov	r0, r3
 801a164:	f7ff f948 	bl	80193f8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801a168:	f107 0318 	add.w	r3, r7, #24
 801a16c:	4618      	mov	r0, r3
 801a16e:	f7f0 fa5c 	bl	800a62a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801a172:	f107 0310 	add.w	r3, r7, #16
 801a176:	4618      	mov	r0, r3
 801a178:	f7fe ff4d 	bl	8019016 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a17c:	4603      	mov	r3, r0
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d037      	beq.n	801a1f2 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a188:	f107 0320 	add.w	r3, r7, #32
 801a18c:	4986      	ldr	r1, [pc, #536]	; (801a3a8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801a18e:	4618      	mov	r0, r3
 801a190:	f7ef fe93 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a194:	f107 0320 	add.w	r3, r7, #32
 801a198:	4619      	mov	r1, r3
 801a19a:	4620      	mov	r0, r4
 801a19c:	f7ef fef9 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a1a0:	f107 0320 	add.w	r3, r7, #32
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	f7f0 fa40 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	332c      	adds	r3, #44	; 0x2c
 801a1ae:	6879      	ldr	r1, [r7, #4]
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7f0 fab7 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	332c      	adds	r3, #44	; 0x2c
 801a1ba:	497c      	ldr	r1, [pc, #496]	; (801a3ac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801a1bc:	4618      	mov	r0, r3
 801a1be:	f7f0 fac3 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	335c      	adds	r3, #92	; 0x5c
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a1d4:	6839      	ldr	r1, [r7, #0]
 801a1d6:	4610      	mov	r0, r2
 801a1d8:	4798      	blx	r3
 801a1da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a1de:	4619      	mov	r1, r3
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f7f0 fa9f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a1e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7f0 fa1d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801a1f0:	e056      	b.n	801a2a0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a1f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a1fc:	496c      	ldr	r1, [pc, #432]	; (801a3b0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801a1fe:	4618      	mov	r0, r3
 801a200:	f7ef fe5b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a208:	4619      	mov	r1, r3
 801a20a:	4620      	mov	r0, r4
 801a20c:	f7ef fec1 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a214:	4618      	mov	r0, r3
 801a216:	f7f0 fa08 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a220:	683b      	ldr	r3, [r7, #0]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	335c      	adds	r3, #92	; 0x5c
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a22c:	6839      	ldr	r1, [r7, #0]
 801a22e:	4610      	mov	r0, r2
 801a230:	4798      	blx	r3
 801a232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a236:	4619      	mov	r1, r3
 801a238:	4620      	mov	r0, r4
 801a23a:	f7f0 fa73 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a23e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a242:	4618      	mov	r0, r3
 801a244:	f7f0 f9f1 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	332c      	adds	r3, #44	; 0x2c
 801a24c:	4959      	ldr	r1, [pc, #356]	; (801a3b4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801a24e:	4618      	mov	r0, r3
 801a250:	f7f0 fa7a 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	332c      	adds	r3, #44	; 0x2c
 801a258:	6879      	ldr	r1, [r7, #4]
 801a25a:	4618      	mov	r0, r3
 801a25c:	f7f0 fa62 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	332c      	adds	r3, #44	; 0x2c
 801a264:	4954      	ldr	r1, [pc, #336]	; (801a3b8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801a266:	4618      	mov	r0, r3
 801a268:	f7f0 fa6e 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a276:	6839      	ldr	r1, [r7, #0]
 801a278:	4618      	mov	r0, r3
 801a27a:	f7fd faa3 	bl	80177c4 <_Z10StringFromRK14MockNamedValue>
 801a27e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a282:	4619      	mov	r1, r3
 801a284:	4620      	mov	r0, r4
 801a286:	f7f0 fa4d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a28a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a28e:	4618      	mov	r0, r3
 801a290:	f7f0 f9cb 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	332c      	adds	r3, #44	; 0x2c
 801a298:	4948      	ldr	r1, [pc, #288]	; (801a3bc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a29a:	4618      	mov	r0, r3
 801a29c:	f7f0 fa54 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	332c      	adds	r3, #44	; 0x2c
 801a2a4:	4946      	ldr	r1, [pc, #280]	; (801a3c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	f7f0 fa4e 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a2b0:	6879      	ldr	r1, [r7, #4]
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	f7ff fdac 	bl	8019e10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801a2b8:	68fb      	ldr	r3, [r7, #12]
 801a2ba:	332c      	adds	r3, #44	; 0x2c
 801a2bc:	4941      	ldr	r1, [pc, #260]	; (801a3c4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f7f0 fa42 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	332c      	adds	r3, #44	; 0x2c
 801a2c8:	6879      	ldr	r1, [r7, #4]
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f7f0 fa2a 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	332c      	adds	r3, #44	; 0x2c
 801a2d4:	493a      	ldr	r1, [pc, #232]	; (801a3c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	f7f0 fa36 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	332c      	adds	r3, #44	; 0x2c
 801a2e0:	4939      	ldr	r1, [pc, #228]	; (801a3c8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	f7f0 fa30 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	3360      	adds	r3, #96	; 0x60
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a2fa:	6839      	ldr	r1, [r7, #0]
 801a2fc:	4610      	mov	r0, r2
 801a2fe:	4798      	blx	r3
 801a300:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a304:	4619      	mov	r1, r3
 801a306:	4620      	mov	r0, r4
 801a308:	f7f0 fa0c 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a30c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a310:	4618      	mov	r0, r3
 801a312:	f7f0 f98a 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	332c      	adds	r3, #44	; 0x2c
 801a31a:	492c      	ldr	r1, [pc, #176]	; (801a3cc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7f0 fa13 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a328:	683b      	ldr	r3, [r7, #0]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	335c      	adds	r3, #92	; 0x5c
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a334:	6839      	ldr	r1, [r7, #0]
 801a336:	4610      	mov	r0, r2
 801a338:	4798      	blx	r3
 801a33a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a33e:	4619      	mov	r1, r3
 801a340:	4620      	mov	r0, r4
 801a342:	f7f0 f9ef 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a34a:	4618      	mov	r0, r3
 801a34c:	f7f0 f96d 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	332c      	adds	r3, #44	; 0x2c
 801a354:	491e      	ldr	r1, [pc, #120]	; (801a3d0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801a356:	4618      	mov	r0, r3
 801a358:	f7f0 f9f6 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a366:	6839      	ldr	r1, [r7, #0]
 801a368:	4618      	mov	r0, r3
 801a36a:	f7fd fa2b 	bl	80177c4 <_Z10StringFromRK14MockNamedValue>
 801a36e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a372:	4619      	mov	r1, r3
 801a374:	4620      	mov	r0, r4
 801a376:	f7f0 f9d5 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a37a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a37e:	4618      	mov	r0, r3
 801a380:	f7f0 f953 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	332c      	adds	r3, #44	; 0x2c
 801a388:	490c      	ldr	r1, [pc, #48]	; (801a3bc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7f0 f9dc 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a390:	f107 0310 	add.w	r3, r7, #16
 801a394:	4618      	mov	r0, r3
 801a396:	f7fe fdd1 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	4618      	mov	r0, r3
 801a39e:	3764      	adds	r7, #100	; 0x64
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd90      	pop	{r4, r7, pc}
 801a3a4:	08024af8 	.word	0x08024af8
 801a3a8:	08022f68 	.word	0x08022f68
 801a3ac:	08022fa0 	.word	0x08022fa0
 801a3b0:	08022fa4 	.word	0x08022fa4
 801a3b4:	08022fdc 	.word	0x08022fdc
 801a3b8:	08022fec 	.word	0x08022fec
 801a3bc:	08022ff4 	.word	0x08022ff4
 801a3c0:	08022e6c 	.word	0x08022e6c
 801a3c4:	08022ff8 	.word	0x08022ff8
 801a3c8:	08022e00 	.word	0x08022e00
 801a3cc:	0802302c 	.word	0x0802302c
 801a3d0:	08023030 	.word	0x08023030

0801a3d4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801a3d4:	b590      	push	{r4, r7, lr}
 801a3d6:	b097      	sub	sp, #92	; 0x5c
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	60f8      	str	r0, [r7, #12]
 801a3dc:	60b9      	str	r1, [r7, #8]
 801a3de:	607a      	str	r2, [r7, #4]
 801a3e0:	603b      	str	r3, [r7, #0]
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	68b9      	ldr	r1, [r7, #8]
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7ff fc8a 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a3ec:	4a90      	ldr	r2, [pc, #576]	; (801a630 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a3f2:	f107 0310 	add.w	r3, r7, #16
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f7fe fd8c 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801a3fc:	f107 0310 	add.w	r3, r7, #16
 801a400:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a402:	6879      	ldr	r1, [r7, #4]
 801a404:	4618      	mov	r0, r3
 801a406:	f7fe ff2b 	bl	8019260 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	335c      	adds	r3, #92	; 0x5c
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	f107 0218 	add.w	r2, r7, #24
 801a416:	6839      	ldr	r1, [r7, #0]
 801a418:	4610      	mov	r0, r2
 801a41a:	4798      	blx	r3
 801a41c:	f107 0218 	add.w	r2, r7, #24
 801a420:	f107 0310 	add.w	r3, r7, #16
 801a424:	4611      	mov	r1, r2
 801a426:	4618      	mov	r0, r3
 801a428:	f7ff f812 	bl	8019450 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801a42c:	f107 0318 	add.w	r3, r7, #24
 801a430:	4618      	mov	r0, r3
 801a432:	f7f0 f8fa 	bl	800a62a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801a436:	f107 0310 	add.w	r3, r7, #16
 801a43a:	4618      	mov	r0, r3
 801a43c:	f7fe fdeb 	bl	8019016 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a440:	4603      	mov	r3, r0
 801a442:	2b00      	cmp	r3, #0
 801a444:	d037      	beq.n	801a4b6 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a44c:	f107 0320 	add.w	r3, r7, #32
 801a450:	4978      	ldr	r1, [pc, #480]	; (801a634 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801a452:	4618      	mov	r0, r3
 801a454:	f7ef fd31 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a458:	f107 0320 	add.w	r3, r7, #32
 801a45c:	4619      	mov	r1, r3
 801a45e:	4620      	mov	r0, r4
 801a460:	f7ef fd97 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a464:	f107 0320 	add.w	r3, r7, #32
 801a468:	4618      	mov	r0, r3
 801a46a:	f7f0 f8de 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	332c      	adds	r3, #44	; 0x2c
 801a472:	6879      	ldr	r1, [r7, #4]
 801a474:	4618      	mov	r0, r3
 801a476:	f7f0 f955 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	332c      	adds	r3, #44	; 0x2c
 801a47e:	496e      	ldr	r1, [pc, #440]	; (801a638 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801a480:	4618      	mov	r0, r3
 801a482:	f7f0 f961 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	335c      	adds	r3, #92	; 0x5c
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a498:	6839      	ldr	r1, [r7, #0]
 801a49a:	4610      	mov	r0, r2
 801a49c:	4798      	blx	r3
 801a49e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a4a2:	4619      	mov	r1, r3
 801a4a4:	4620      	mov	r0, r4
 801a4a6:	f7f0 f93d 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a4aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	f7f0 f8bb 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801a4b4:	e059      	b.n	801a56a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a4bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a4c0:	495e      	ldr	r1, [pc, #376]	; (801a63c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	f7ef fcf9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a4c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a4cc:	4619      	mov	r1, r3
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	f7ef fd5f 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a4d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f7f0 f8a6 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	3360      	adds	r3, #96	; 0x60
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a4f0:	6839      	ldr	r1, [r7, #0]
 801a4f2:	4610      	mov	r0, r2
 801a4f4:	4798      	blx	r3
 801a4f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a4fa:	4619      	mov	r1, r3
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f7f0 f911 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a502:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a506:	4618      	mov	r0, r3
 801a508:	f7f0 f88f 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	332c      	adds	r3, #44	; 0x2c
 801a510:	494b      	ldr	r1, [pc, #300]	; (801a640 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801a512:	4618      	mov	r0, r3
 801a514:	f7f0 f918 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	335c      	adds	r3, #92	; 0x5c
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a52a:	6839      	ldr	r1, [r7, #0]
 801a52c:	4610      	mov	r0, r2
 801a52e:	4798      	blx	r3
 801a530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a534:	4619      	mov	r1, r3
 801a536:	4620      	mov	r0, r4
 801a538:	f7f0 f8f4 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a53c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a540:	4618      	mov	r0, r3
 801a542:	f7f0 f872 	bl	800a62a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	332c      	adds	r3, #44	; 0x2c
 801a54a:	493e      	ldr	r1, [pc, #248]	; (801a644 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801a54c:	4618      	mov	r0, r3
 801a54e:	f7f0 f8fb 	bl	800a748 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	332c      	adds	r3, #44	; 0x2c
 801a556:	6879      	ldr	r1, [r7, #4]
 801a558:	4618      	mov	r0, r3
 801a55a:	f7f0 f8e3 	bl	800a724 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	332c      	adds	r3, #44	; 0x2c
 801a562:	4939      	ldr	r1, [pc, #228]	; (801a648 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801a564:	4618      	mov	r0, r3
 801a566:	f7f0 f8ef 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	332c      	adds	r3, #44	; 0x2c
 801a56e:	4937      	ldr	r1, [pc, #220]	; (801a64c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801a570:	4618      	mov	r0, r3
 801a572:	f7f0 f8e9 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a57a:	6879      	ldr	r1, [r7, #4]
 801a57c:	4618      	mov	r0, r3
 801a57e:	f7ff fc47 	bl	8019e10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	332c      	adds	r3, #44	; 0x2c
 801a586:	4932      	ldr	r1, [pc, #200]	; (801a650 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801a588:	4618      	mov	r0, r3
 801a58a:	f7f0 f8dd 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	332c      	adds	r3, #44	; 0x2c
 801a592:	6879      	ldr	r1, [r7, #4]
 801a594:	4618      	mov	r0, r3
 801a596:	f7f0 f8c5 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	332c      	adds	r3, #44	; 0x2c
 801a59e:	492b      	ldr	r1, [pc, #172]	; (801a64c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f7f0 f8d1 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	332c      	adds	r3, #44	; 0x2c
 801a5aa:	492a      	ldr	r1, [pc, #168]	; (801a654 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7f0 f8cb 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	3360      	adds	r3, #96	; 0x60
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a5c4:	6839      	ldr	r1, [r7, #0]
 801a5c6:	4610      	mov	r0, r2
 801a5c8:	4798      	blx	r3
 801a5ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	f7f0 f8a7 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a5d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f7f0 f825 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	332c      	adds	r3, #44	; 0x2c
 801a5e4:	491c      	ldr	r1, [pc, #112]	; (801a658 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f7f0 f8ae 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	335c      	adds	r3, #92	; 0x5c
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a5fe:	6839      	ldr	r1, [r7, #0]
 801a600:	4610      	mov	r0, r2
 801a602:	4798      	blx	r3
 801a604:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a608:	4619      	mov	r1, r3
 801a60a:	4620      	mov	r0, r4
 801a60c:	f7f0 f88a 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a610:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a614:	4618      	mov	r0, r3
 801a616:	f7f0 f808 	bl	800a62a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a61a:	f107 0310 	add.w	r3, r7, #16
 801a61e:	4618      	mov	r0, r3
 801a620:	f7fe fc8c 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	4618      	mov	r0, r3
 801a628:	375c      	adds	r7, #92	; 0x5c
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bd90      	pop	{r4, r7, pc}
 801a62e:	bf00      	nop
 801a630:	08024acc 	.word	0x08024acc
 801a634:	08023034 	.word	0x08023034
 801a638:	08022fa0 	.word	0x08022fa0
 801a63c:	08023074 	.word	0x08023074
 801a640:	080230a0 	.word	0x080230a0
 801a644:	08022fdc 	.word	0x08022fdc
 801a648:	080230b8 	.word	0x080230b8
 801a64c:	08022e6c 	.word	0x08022e6c
 801a650:	080230bc 	.word	0x080230bc
 801a654:	08022e00 	.word	0x08022e00
 801a658:	0802302c 	.word	0x0802302c

0801a65c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a65c:	b590      	push	{r4, r7, lr}
 801a65e:	b08b      	sub	sp, #44	; 0x2c
 801a660:	af00      	add	r7, sp, #0
 801a662:	60f8      	str	r0, [r7, #12]
 801a664:	60b9      	str	r1, [r7, #8]
 801a666:	607a      	str	r2, [r7, #4]
 801a668:	603b      	str	r3, [r7, #0]
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	68b9      	ldr	r1, [r7, #8]
 801a66e:	4618      	mov	r0, r3
 801a670:	f7ff fb46 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a674:	4a30      	ldr	r2, [pc, #192]	; (801a738 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801a67a:	f107 0310 	add.w	r3, r7, #16
 801a67e:	4618      	mov	r0, r3
 801a680:	f7fe fc48 	bl	8018f14 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801a684:	f107 0310 	add.w	r3, r7, #16
 801a688:	683a      	ldr	r2, [r7, #0]
 801a68a:	6879      	ldr	r1, [r7, #4]
 801a68c:	4618      	mov	r0, r3
 801a68e:	f7fe fde7 	bl	8019260 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a698:	f107 0318 	add.w	r3, r7, #24
 801a69c:	4927      	ldr	r1, [pc, #156]	; (801a73c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7ef fc0b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a6a4:	f107 0318 	add.w	r3, r7, #24
 801a6a8:	4619      	mov	r1, r3
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f7ef fc71 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a6b0:	f107 0318 	add.w	r3, r7, #24
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	f7ef ffb8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	332c      	adds	r3, #44	; 0x2c
 801a6be:	6879      	ldr	r1, [r7, #4]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f7f0 f82f 	bl	800a724 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	332c      	adds	r3, #44	; 0x2c
 801a6ca:	491d      	ldr	r1, [pc, #116]	; (801a740 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	f7f0 f83b 	bl	800a748 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	683a      	ldr	r2, [r7, #0]
 801a6d6:	6879      	ldr	r1, [r7, #4]
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f7ff fb99 	bl	8019e10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	332c      	adds	r3, #44	; 0x2c
 801a6e2:	4918      	ldr	r1, [pc, #96]	; (801a744 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f7f0 f82f 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	332c      	adds	r3, #44	; 0x2c
 801a6ee:	4916      	ldr	r1, [pc, #88]	; (801a748 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f7f0 f829 	bl	800a748 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a6fc:	f107 0320 	add.w	r3, r7, #32
 801a700:	f107 0210 	add.w	r2, r7, #16
 801a704:	4611      	mov	r1, r2
 801a706:	4618      	mov	r0, r3
 801a708:	f7ff f9bc 	bl	8019a84 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801a70c:	f107 0320 	add.w	r3, r7, #32
 801a710:	4619      	mov	r1, r3
 801a712:	4620      	mov	r0, r4
 801a714:	f7f0 f806 	bl	800a724 <_ZN12SimpleStringpLERKS_>
 801a718:	f107 0320 	add.w	r3, r7, #32
 801a71c:	4618      	mov	r0, r3
 801a71e:	f7ef ff84 	bl	800a62a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801a722:	f107 0310 	add.w	r3, r7, #16
 801a726:	4618      	mov	r0, r3
 801a728:	f7fe fc08 	bl	8018f3c <_ZN21MockExpectedCallsListD1Ev>
}
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	4618      	mov	r0, r3
 801a730:	372c      	adds	r7, #44	; 0x2c
 801a732:	46bd      	mov	sp, r7
 801a734:	bd90      	pop	{r4, r7, pc}
 801a736:	bf00      	nop
 801a738:	08024aa0 	.word	0x08024aa0
 801a73c:	080230f8 	.word	0x080230f8
 801a740:	08023128 	.word	0x08023128
 801a744:	0802313c 	.word	0x0802313c
 801a748:	08022e00 	.word	0x08022e00

0801a74c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801a74c:	b590      	push	{r4, r7, lr}
 801a74e:	b087      	sub	sp, #28
 801a750:	af00      	add	r7, sp, #0
 801a752:	60f8      	str	r0, [r7, #12]
 801a754:	60b9      	str	r1, [r7, #8]
 801a756:	607a      	str	r2, [r7, #4]
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	68b9      	ldr	r1, [r7, #8]
 801a75c:	4618      	mov	r0, r3
 801a75e:	f7ff facf 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a762:	4a10      	ldr	r2, [pc, #64]	; (801a7a4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a76e:	6878      	ldr	r0, [r7, #4]
 801a770:	f7ef ff2e 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801a774:	4602      	mov	r2, r0
 801a776:	f107 0310 	add.w	r3, r7, #16
 801a77a:	490b      	ldr	r1, [pc, #44]	; (801a7a8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7f0 fc5b 	bl	800b038 <_Z16StringFromFormatPKcz>
 801a782:	f107 0310 	add.w	r3, r7, #16
 801a786:	4619      	mov	r1, r3
 801a788:	4620      	mov	r0, r4
 801a78a:	f7ef fc02 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a78e:	f107 0310 	add.w	r3, r7, #16
 801a792:	4618      	mov	r0, r3
 801a794:	f7ef ff49 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	4618      	mov	r0, r3
 801a79c:	371c      	adds	r7, #28
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd90      	pop	{r4, r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	08024a74 	.word	0x08024a74
 801a7a8:	08023168 	.word	0x08023168

0801a7ac <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801a7ac:	b590      	push	{r4, r7, lr}
 801a7ae:	b087      	sub	sp, #28
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	60f8      	str	r0, [r7, #12]
 801a7b4:	60b9      	str	r1, [r7, #8]
 801a7b6:	607a      	str	r2, [r7, #4]
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	68b9      	ldr	r1, [r7, #8]
 801a7bc:	4618      	mov	r0, r3
 801a7be:	f7ff fa9f 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a7c2:	4a10      	ldr	r2, [pc, #64]	; (801a804 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a7ce:	6878      	ldr	r0, [r7, #4]
 801a7d0:	f7ef fefe 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801a7d4:	4602      	mov	r2, r0
 801a7d6:	f107 0310 	add.w	r3, r7, #16
 801a7da:	490b      	ldr	r1, [pc, #44]	; (801a808 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801a7dc:	4618      	mov	r0, r3
 801a7de:	f7f0 fc2b 	bl	800b038 <_Z16StringFromFormatPKcz>
 801a7e2:	f107 0310 	add.w	r3, r7, #16
 801a7e6:	4619      	mov	r1, r3
 801a7e8:	4620      	mov	r0, r4
 801a7ea:	f7ef fbd2 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a7ee:	f107 0310 	add.w	r3, r7, #16
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f7ef ff19 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	371c      	adds	r7, #28
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd90      	pop	{r4, r7, pc}
 801a802:	bf00      	nop
 801a804:	08024a48 	.word	0x08024a48
 801a808:	080231c0 	.word	0x080231c0

0801a80c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a80c:	b590      	push	{r4, r7, lr}
 801a80e:	b087      	sub	sp, #28
 801a810:	af00      	add	r7, sp, #0
 801a812:	60f8      	str	r0, [r7, #12]
 801a814:	60b9      	str	r1, [r7, #8]
 801a816:	607a      	str	r2, [r7, #4]
 801a818:	603b      	str	r3, [r7, #0]
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	68b9      	ldr	r1, [r7, #8]
 801a81e:	4618      	mov	r0, r3
 801a820:	f7ff fa6e 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a824:	4a12      	ldr	r2, [pc, #72]	; (801a870 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f7ef fecd 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801a836:	4602      	mov	r2, r0
 801a838:	f107 0010 	add.w	r0, r7, #16
 801a83c:	683b      	ldr	r3, [r7, #0]
 801a83e:	490d      	ldr	r1, [pc, #52]	; (801a874 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801a840:	f7f0 fbfa 	bl	800b038 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801a844:	f107 0310 	add.w	r3, r7, #16
 801a848:	4619      	mov	r1, r3
 801a84a:	4620      	mov	r0, r4
 801a84c:	f7ef fba1 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a850:	f107 0310 	add.w	r3, r7, #16
 801a854:	4618      	mov	r0, r3
 801a856:	f7ef fee8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a85e:	6879      	ldr	r1, [r7, #4]
 801a860:	4618      	mov	r0, r3
 801a862:	f7ff fad5 	bl	8019e10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	4618      	mov	r0, r3
 801a86a:	371c      	adds	r7, #28
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd90      	pop	{r4, r7, pc}
 801a870:	08024a1c 	.word	0x08024a1c
 801a874:	08023210 	.word	0x08023210

0801a878 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a878:	b590      	push	{r4, r7, lr}
 801a87a:	b087      	sub	sp, #28
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	60f8      	str	r0, [r7, #12]
 801a880:	60b9      	str	r1, [r7, #8]
 801a882:	607a      	str	r2, [r7, #4]
 801a884:	603b      	str	r3, [r7, #0]
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	68b9      	ldr	r1, [r7, #8]
 801a88a:	4618      	mov	r0, r3
 801a88c:	f7ff fa38 	bl	8019d00 <_ZN11MockFailureC1EP10UtestShell>
 801a890:	4a12      	ldr	r2, [pc, #72]	; (801a8dc <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a89c:	6878      	ldr	r0, [r7, #4]
 801a89e:	f7ef fe97 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801a8a2:	4602      	mov	r2, r0
 801a8a4:	f107 0310 	add.w	r3, r7, #16
 801a8a8:	490d      	ldr	r1, [pc, #52]	; (801a8e0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	f7f0 fbc4 	bl	800b038 <_Z16StringFromFormatPKcz>
 801a8b0:	f107 0310 	add.w	r3, r7, #16
 801a8b4:	4619      	mov	r1, r3
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	f7ef fb6b 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a8bc:	f107 0310 	add.w	r3, r7, #16
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7ef feb2 	bl	800a62a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	683a      	ldr	r2, [r7, #0]
 801a8ca:	6879      	ldr	r1, [r7, #4]
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	f7ff fa9f 	bl	8019e10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	371c      	adds	r7, #28
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd90      	pop	{r4, r7, pc}
 801a8dc:	080249f0 	.word	0x080249f0
 801a8e0:	08023274 	.word	0x08023274

0801a8e4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801a8e4:	b480      	push	{r7}
 801a8e6:	b083      	sub	sp, #12
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801a8ec:	4a04      	ldr	r2, [pc, #16]	; (801a900 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	6013      	str	r3, [r2, #0]
}
 801a8f2:	bf00      	nop
 801a8f4:	370c      	adds	r7, #12
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8fc:	4770      	bx	lr
 801a8fe:	bf00      	nop
 801a900:	20000cb0 	.word	0x20000cb0

0801a904 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801a904:	b580      	push	{r7, lr}
 801a906:	b082      	sub	sp, #8
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
 801a90c:	6039      	str	r1, [r7, #0]
 801a90e:	4a10      	ldr	r2, [pc, #64]	; (801a950 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	601a      	str	r2, [r3, #0]
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	3304      	adds	r3, #4
 801a918:	6839      	ldr	r1, [r7, #0]
 801a91a:	4618      	mov	r0, r3
 801a91c:	f7ef fb21 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	330c      	adds	r3, #12
 801a924:	490b      	ldr	r1, [pc, #44]	; (801a954 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801a926:	4618      	mov	r0, r3
 801a928:	f7ef fac7 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	2200      	movs	r2, #0
 801a930:	629a      	str	r2, [r3, #40]	; 0x28
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	2200      	movs	r2, #0
 801a936:	62da      	str	r2, [r3, #44]	; 0x2c
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2200      	movs	r2, #0
 801a93c:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	2200      	movs	r2, #0
 801a942:	619a      	str	r2, [r3, #24]
}
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	4618      	mov	r0, r3
 801a948:	3708      	adds	r7, #8
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}
 801a94e:	bf00      	nop
 801a950:	08025278 	.word	0x08025278
 801a954:	080232c4 	.word	0x080232c4

0801a958 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
 801a960:	4a08      	ldr	r2, [pc, #32]	; (801a984 <_ZN14MockNamedValueD1Ev+0x2c>)
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	601a      	str	r2, [r3, #0]
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	330c      	adds	r3, #12
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7ef fe5d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	3304      	adds	r3, #4
 801a974:	4618      	mov	r0, r3
 801a976:	f7ef fe58 	bl	800a62a <_ZN12SimpleStringD1Ev>
{
}
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	4618      	mov	r0, r3
 801a97e:	3708      	adds	r7, #8
 801a980:	46bd      	mov	sp, r7
 801a982:	bd80      	pop	{r7, pc}
 801a984:	08025278 	.word	0x08025278

0801a988 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801a988:	b580      	push	{r7, lr}
 801a98a:	b082      	sub	sp, #8
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
}
 801a990:	6878      	ldr	r0, [r7, #4]
 801a992:	f7ff ffe1 	bl	801a958 <_ZN14MockNamedValueD1Ev>
 801a996:	2138      	movs	r1, #56	; 0x38
 801a998:	6878      	ldr	r0, [r7, #4]
 801a99a:	f7ec fedf 	bl	800775c <_ZdlPvj>
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	3708      	adds	r7, #8
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}

0801a9a8 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801a9a8:	b590      	push	{r4, r7, lr}
 801a9aa:	b085      	sub	sp, #20
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
 801a9b0:	460b      	mov	r3, r1
 801a9b2:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f103 040c 	add.w	r4, r3, #12
 801a9ba:	f107 0308 	add.w	r3, r7, #8
 801a9be:	490b      	ldr	r1, [pc, #44]	; (801a9ec <_ZN14MockNamedValue8setValueEb+0x44>)
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	f7ef fa7a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801a9c6:	f107 0308 	add.w	r3, r7, #8
 801a9ca:	4619      	mov	r1, r3
 801a9cc:	4620      	mov	r0, r4
 801a9ce:	f7ef fae0 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801a9d2:	f107 0308 	add.w	r3, r7, #8
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	f7ef fe27 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	78fa      	ldrb	r2, [r7, #3]
 801a9e0:	761a      	strb	r2, [r3, #24]
}
 801a9e2:	bf00      	nop
 801a9e4:	3714      	adds	r7, #20
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	bd90      	pop	{r4, r7, pc}
 801a9ea:	bf00      	nop
 801a9ec:	080232c8 	.word	0x080232c8

0801a9f0 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801a9f0:	b590      	push	{r4, r7, lr}
 801a9f2:	b085      	sub	sp, #20
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	f103 040c 	add.w	r4, r3, #12
 801aa00:	f107 0308 	add.w	r3, r7, #8
 801aa04:	490a      	ldr	r1, [pc, #40]	; (801aa30 <_ZN14MockNamedValue8setValueEj+0x40>)
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7ef fa57 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801aa0c:	f107 0308 	add.w	r3, r7, #8
 801aa10:	4619      	mov	r1, r3
 801aa12:	4620      	mov	r0, r4
 801aa14:	f7ef fabd 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801aa18:	f107 0308 	add.w	r3, r7, #8
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	f7ef fe04 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	683a      	ldr	r2, [r7, #0]
 801aa26:	619a      	str	r2, [r3, #24]
}
 801aa28:	bf00      	nop
 801aa2a:	3714      	adds	r7, #20
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd90      	pop	{r4, r7, pc}
 801aa30:	080232d0 	.word	0x080232d0

0801aa34 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801aa34:	b590      	push	{r4, r7, lr}
 801aa36:	b085      	sub	sp, #20
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
 801aa3c:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f103 040c 	add.w	r4, r3, #12
 801aa44:	f107 0308 	add.w	r3, r7, #8
 801aa48:	490a      	ldr	r1, [pc, #40]	; (801aa74 <_ZN14MockNamedValue8setValueEi+0x40>)
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f7ef fa35 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801aa50:	f107 0308 	add.w	r3, r7, #8
 801aa54:	4619      	mov	r1, r3
 801aa56:	4620      	mov	r0, r4
 801aa58:	f7ef fa9b 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801aa5c:	f107 0308 	add.w	r3, r7, #8
 801aa60:	4618      	mov	r0, r3
 801aa62:	f7ef fde2 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	683a      	ldr	r2, [r7, #0]
 801aa6a:	619a      	str	r2, [r3, #24]
}
 801aa6c:	bf00      	nop
 801aa6e:	3714      	adds	r7, #20
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd90      	pop	{r4, r7, pc}
 801aa74:	080232c4 	.word	0x080232c4

0801aa78 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801aa78:	b590      	push	{r4, r7, lr}
 801aa7a:	b085      	sub	sp, #20
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	f103 040c 	add.w	r4, r3, #12
 801aa88:	f107 0308 	add.w	r3, r7, #8
 801aa8c:	490a      	ldr	r1, [pc, #40]	; (801aab8 <_ZN14MockNamedValue8setValueEl+0x40>)
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7ef fa13 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801aa94:	f107 0308 	add.w	r3, r7, #8
 801aa98:	4619      	mov	r1, r3
 801aa9a:	4620      	mov	r0, r4
 801aa9c:	f7ef fa79 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801aaa0:	f107 0308 	add.w	r3, r7, #8
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f7ef fdc0 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	683a      	ldr	r2, [r7, #0]
 801aaae:	619a      	str	r2, [r3, #24]
}
 801aab0:	bf00      	nop
 801aab2:	3714      	adds	r7, #20
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd90      	pop	{r4, r7, pc}
 801aab8:	080232e0 	.word	0x080232e0

0801aabc <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801aabc:	b590      	push	{r4, r7, lr}
 801aabe:	b085      	sub	sp, #20
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	f103 040c 	add.w	r4, r3, #12
 801aacc:	f107 0308 	add.w	r3, r7, #8
 801aad0:	490a      	ldr	r1, [pc, #40]	; (801aafc <_ZN14MockNamedValue8setValueEm+0x40>)
 801aad2:	4618      	mov	r0, r3
 801aad4:	f7ef f9f1 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801aad8:	f107 0308 	add.w	r3, r7, #8
 801aadc:	4619      	mov	r1, r3
 801aade:	4620      	mov	r0, r4
 801aae0:	f7ef fa57 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801aae4:	f107 0308 	add.w	r3, r7, #8
 801aae8:	4618      	mov	r0, r3
 801aaea:	f7ef fd9e 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	683a      	ldr	r2, [r7, #0]
 801aaf2:	619a      	str	r2, [r3, #24]
}
 801aaf4:	bf00      	nop
 801aaf6:	3714      	adds	r7, #20
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bd90      	pop	{r4, r7, pc}
 801aafc:	080232ec 	.word	0x080232ec

0801ab00 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801ab00:	b5b0      	push	{r4, r5, r7, lr}
 801ab02:	b086      	sub	sp, #24
 801ab04:	af02      	add	r7, sp, #8
 801ab06:	60f8      	str	r0, [r7, #12]
 801ab08:	1d3b      	adds	r3, r7, #4
 801ab0a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ab0e:	f7f6 fdb7 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801ab12:	4604      	mov	r4, r0
 801ab14:	6823      	ldr	r3, [r4, #0]
 801ab16:	3368      	adds	r3, #104	; 0x68
 801ab18:	681d      	ldr	r5, [r3, #0]
 801ab1a:	f7f6 fdc1 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	9300      	str	r3, [sp, #0]
 801ab22:	2367      	movs	r3, #103	; 0x67
 801ab24:	4a03      	ldr	r2, [pc, #12]	; (801ab34 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801ab26:	4904      	ldr	r1, [pc, #16]	; (801ab38 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801ab28:	4620      	mov	r0, r4
 801ab2a:	47a8      	blx	r5
}
 801ab2c:	bf00      	nop
 801ab2e:	3710      	adds	r7, #16
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bdb0      	pop	{r4, r5, r7, pc}
 801ab34:	08023300 	.word	0x08023300
 801ab38:	0802331c 	.word	0x0802331c

0801ab3c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801ab3c:	b5b0      	push	{r4, r5, r7, lr}
 801ab3e:	b086      	sub	sp, #24
 801ab40:	af02      	add	r7, sp, #8
 801ab42:	60f8      	str	r0, [r7, #12]
 801ab44:	1d3b      	adds	r3, r7, #4
 801ab46:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ab4a:	f7f6 fd99 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801ab4e:	4604      	mov	r4, r0
 801ab50:	6823      	ldr	r3, [r4, #0]
 801ab52:	3368      	adds	r3, #104	; 0x68
 801ab54:	681d      	ldr	r5, [r3, #0]
 801ab56:	f7f6 fda3 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	9300      	str	r3, [sp, #0]
 801ab5e:	236c      	movs	r3, #108	; 0x6c
 801ab60:	4a03      	ldr	r2, [pc, #12]	; (801ab70 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801ab62:	4904      	ldr	r1, [pc, #16]	; (801ab74 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801ab64:	4620      	mov	r0, r4
 801ab66:	47a8      	blx	r5
}
 801ab68:	bf00      	nop
 801ab6a:	3710      	adds	r7, #16
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bdb0      	pop	{r4, r5, r7, pc}
 801ab70:	08023300 	.word	0x08023300
 801ab74:	0802333c 	.word	0x0802333c

0801ab78 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b084      	sub	sp, #16
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	60f8      	str	r0, [r7, #12]
 801ab80:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	3328      	adds	r3, #40	; 0x28
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801aba0 <_ZN14MockNamedValue8setValueEd+0x28>
 801ab90:	ed97 0b00 	vldr	d0, [r7]
 801ab94:	68f8      	ldr	r0, [r7, #12]
 801ab96:	4798      	blx	r3
}
 801ab98:	bf00      	nop
 801ab9a:	3710      	adds	r7, #16
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	47ae147b 	.word	0x47ae147b
 801aba4:	3f747ae1 	.word	0x3f747ae1

0801aba8 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801aba8:	b590      	push	{r4, r7, lr}
 801abaa:	b089      	sub	sp, #36	; 0x24
 801abac:	af00      	add	r7, sp, #0
 801abae:	6178      	str	r0, [r7, #20]
 801abb0:	ed87 0b02 	vstr	d0, [r7, #8]
 801abb4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801abb8:	697b      	ldr	r3, [r7, #20]
 801abba:	f103 040c 	add.w	r4, r3, #12
 801abbe:	f107 0318 	add.w	r3, r7, #24
 801abc2:	490e      	ldr	r1, [pc, #56]	; (801abfc <_ZN14MockNamedValue8setValueEdd+0x54>)
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ef f978 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801abca:	f107 0318 	add.w	r3, r7, #24
 801abce:	4619      	mov	r1, r3
 801abd0:	4620      	mov	r0, r4
 801abd2:	f7ef f9de 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801abd6:	f107 0318 	add.w	r3, r7, #24
 801abda:	4618      	mov	r0, r3
 801abdc:	f7ef fd25 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801abe0:	6979      	ldr	r1, [r7, #20]
 801abe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801abe6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801abea:	6979      	ldr	r1, [r7, #20]
 801abec:	e9d7 2300 	ldrd	r2, r3, [r7]
 801abf0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801abf4:	bf00      	nop
 801abf6:	3724      	adds	r7, #36	; 0x24
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd90      	pop	{r4, r7, pc}
 801abfc:	08023368 	.word	0x08023368

0801ac00 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801ac00:	b590      	push	{r4, r7, lr}
 801ac02:	b085      	sub	sp, #20
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	6078      	str	r0, [r7, #4]
 801ac08:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	f103 040c 	add.w	r4, r3, #12
 801ac10:	f107 0308 	add.w	r3, r7, #8
 801ac14:	490a      	ldr	r1, [pc, #40]	; (801ac40 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801ac16:	4618      	mov	r0, r3
 801ac18:	f7ef f94f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ac1c:	f107 0308 	add.w	r3, r7, #8
 801ac20:	4619      	mov	r1, r3
 801ac22:	4620      	mov	r0, r4
 801ac24:	f7ef f9b5 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801ac28:	f107 0308 	add.w	r3, r7, #8
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f7ef fcfc 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	683a      	ldr	r2, [r7, #0]
 801ac36:	619a      	str	r2, [r3, #24]
}
 801ac38:	bf00      	nop
 801ac3a:	3714      	adds	r7, #20
 801ac3c:	46bd      	mov	sp, r7
 801ac3e:	bd90      	pop	{r4, r7, pc}
 801ac40:	08023370 	.word	0x08023370

0801ac44 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801ac44:	b590      	push	{r4, r7, lr}
 801ac46:	b085      	sub	sp, #20
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
 801ac4c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	f103 040c 	add.w	r4, r3, #12
 801ac54:	f107 0308 	add.w	r3, r7, #8
 801ac58:	490a      	ldr	r1, [pc, #40]	; (801ac84 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7ef f92d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ac60:	f107 0308 	add.w	r3, r7, #8
 801ac64:	4619      	mov	r1, r3
 801ac66:	4620      	mov	r0, r4
 801ac68:	f7ef f993 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801ac6c:	f107 0308 	add.w	r3, r7, #8
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7ef fcda 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	683a      	ldr	r2, [r7, #0]
 801ac7a:	619a      	str	r2, [r3, #24]
}
 801ac7c:	bf00      	nop
 801ac7e:	3714      	adds	r7, #20
 801ac80:	46bd      	mov	sp, r7
 801ac82:	bd90      	pop	{r4, r7, pc}
 801ac84:	08023378 	.word	0x08023378

0801ac88 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801ac88:	b590      	push	{r4, r7, lr}
 801ac8a:	b085      	sub	sp, #20
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	f103 040c 	add.w	r4, r3, #12
 801ac98:	f107 0308 	add.w	r3, r7, #8
 801ac9c:	490a      	ldr	r1, [pc, #40]	; (801acc8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7ef f90b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801aca4:	f107 0308 	add.w	r3, r7, #8
 801aca8:	4619      	mov	r1, r3
 801acaa:	4620      	mov	r0, r4
 801acac:	f7ef f971 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801acb0:	f107 0308 	add.w	r3, r7, #8
 801acb4:	4618      	mov	r0, r3
 801acb6:	f7ef fcb8 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	683a      	ldr	r2, [r7, #0]
 801acbe:	619a      	str	r2, [r3, #24]
}
 801acc0:	bf00      	nop
 801acc2:	3714      	adds	r7, #20
 801acc4:	46bd      	mov	sp, r7
 801acc6:	bd90      	pop	{r4, r7, pc}
 801acc8:	08023384 	.word	0x08023384

0801accc <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801accc:	b590      	push	{r4, r7, lr}
 801acce:	b085      	sub	sp, #20
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
 801acd4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	f103 040c 	add.w	r4, r3, #12
 801acdc:	f107 0308 	add.w	r3, r7, #8
 801ace0:	490a      	ldr	r1, [pc, #40]	; (801ad0c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801ace2:	4618      	mov	r0, r3
 801ace4:	f7ef f8e9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ace8:	f107 0308 	add.w	r3, r7, #8
 801acec:	4619      	mov	r1, r3
 801acee:	4620      	mov	r0, r4
 801acf0:	f7ef f94f 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801acf4:	f107 0308 	add.w	r3, r7, #8
 801acf8:	4618      	mov	r0, r3
 801acfa:	f7ef fc96 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	683a      	ldr	r2, [r7, #0]
 801ad02:	619a      	str	r2, [r3, #24]
}
 801ad04:	bf00      	nop
 801ad06:	3714      	adds	r7, #20
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd90      	pop	{r4, r7, pc}
 801ad0c:	08023390 	.word	0x08023390

0801ad10 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801ad10:	b590      	push	{r4, r7, lr}
 801ad12:	b087      	sub	sp, #28
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	60f8      	str	r0, [r7, #12]
 801ad18:	60b9      	str	r1, [r7, #8]
 801ad1a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	f103 040c 	add.w	r4, r3, #12
 801ad22:	f107 0310 	add.w	r3, r7, #16
 801ad26:	490c      	ldr	r1, [pc, #48]	; (801ad58 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801ad28:	4618      	mov	r0, r3
 801ad2a:	f7ef f8c6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ad2e:	f107 0310 	add.w	r3, r7, #16
 801ad32:	4619      	mov	r1, r3
 801ad34:	4620      	mov	r0, r4
 801ad36:	f7ef f92c 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801ad3a:	f107 0310 	add.w	r3, r7, #16
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f7ef fc73 	bl	800a62a <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	68ba      	ldr	r2, [r7, #8]
 801ad48:	619a      	str	r2, [r3, #24]
    size_ = size;
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	687a      	ldr	r2, [r7, #4]
 801ad4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ad50:	bf00      	nop
 801ad52:	371c      	adds	r7, #28
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bd90      	pop	{r4, r7, pc}
 801ad58:	0802339c 	.word	0x0802339c

0801ad5c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801ad5c:	b580      	push	{r7, lr}
 801ad5e:	b084      	sub	sp, #16
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	60f8      	str	r0, [r7, #12]
 801ad64:	60b9      	str	r1, [r7, #8]
 801ad66:	607a      	str	r2, [r7, #4]
    type_ = type;
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	330c      	adds	r3, #12
 801ad6c:	68b9      	ldr	r1, [r7, #8]
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7ef f90f 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801ad74:	68fb      	ldr	r3, [r7, #12]
 801ad76:	687a      	ldr	r2, [r7, #4]
 801ad78:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801ad7a:	4b11      	ldr	r3, [pc, #68]	; (801adc0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d019      	beq.n	801adb6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801ad82:	4b0f      	ldr	r3, [pc, #60]	; (801adc0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ad84:	681a      	ldr	r2, [r3, #0]
 801ad86:	4b0e      	ldr	r3, [pc, #56]	; (801adc0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	3314      	adds	r3, #20
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	68b9      	ldr	r1, [r7, #8]
 801ad92:	4610      	mov	r0, r2
 801ad94:	4798      	blx	r3
 801ad96:	4602      	mov	r2, r0
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801ad9c:	4b08      	ldr	r3, [pc, #32]	; (801adc0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	4b07      	ldr	r3, [pc, #28]	; (801adc0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	3318      	adds	r3, #24
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	68b9      	ldr	r1, [r7, #8]
 801adac:	4610      	mov	r0, r2
 801adae:	4798      	blx	r3
 801adb0:	4602      	mov	r2, r0
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801adb6:	bf00      	nop
 801adb8:	3710      	adds	r7, #16
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}
 801adbe:	bf00      	nop
 801adc0:	20000cb0 	.word	0x20000cb0

0801adc4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	b084      	sub	sp, #16
 801adc8:	af00      	add	r7, sp, #0
 801adca:	60f8      	str	r0, [r7, #12]
 801adcc:	60b9      	str	r1, [r7, #8]
 801adce:	607a      	str	r2, [r7, #4]
    type_ = type;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	330c      	adds	r3, #12
 801add4:	68b9      	ldr	r1, [r7, #8]
 801add6:	4618      	mov	r0, r3
 801add8:	f7ef f8db 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	687a      	ldr	r2, [r7, #4]
 801ade0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801ade2:	4b11      	ldr	r3, [pc, #68]	; (801ae28 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d019      	beq.n	801ae1e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801adea:	4b0f      	ldr	r3, [pc, #60]	; (801ae28 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801adec:	681a      	ldr	r2, [r3, #0]
 801adee:	4b0e      	ldr	r3, [pc, #56]	; (801ae28 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	3314      	adds	r3, #20
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	68b9      	ldr	r1, [r7, #8]
 801adfa:	4610      	mov	r0, r2
 801adfc:	4798      	blx	r3
 801adfe:	4602      	mov	r2, r0
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801ae04:	4b08      	ldr	r3, [pc, #32]	; (801ae28 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ae06:	681a      	ldr	r2, [r3, #0]
 801ae08:	4b07      	ldr	r3, [pc, #28]	; (801ae28 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	3318      	adds	r3, #24
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	68b9      	ldr	r1, [r7, #8]
 801ae14:	4610      	mov	r0, r2
 801ae16:	4798      	blx	r3
 801ae18:	4602      	mov	r2, r0
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801ae1e:	bf00      	nop
 801ae20:	3710      	adds	r7, #16
 801ae22:	46bd      	mov	sp, r7
 801ae24:	bd80      	pop	{r7, pc}
 801ae26:	bf00      	nop
 801ae28:	20000cb0 	.word	0x20000cb0

0801ae2c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801ae2c:	b480      	push	{r7}
 801ae2e:	b083      	sub	sp, #12
 801ae30:	af00      	add	r7, sp, #0
 801ae32:	6078      	str	r0, [r7, #4]
 801ae34:	6039      	str	r1, [r7, #0]
    size_ = size;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	683a      	ldr	r2, [r7, #0]
 801ae3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ae3c:	bf00      	nop
 801ae3e:	370c      	adds	r7, #12
 801ae40:	46bd      	mov	sp, r7
 801ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae46:	4770      	bx	lr

0801ae48 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801ae48:	b590      	push	{r4, r7, lr}
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	6039      	str	r1, [r7, #0]
    name_ = name;
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	1d1c      	adds	r4, r3, #4
 801ae56:	f107 0308 	add.w	r3, r7, #8
 801ae5a:	6839      	ldr	r1, [r7, #0]
 801ae5c:	4618      	mov	r0, r3
 801ae5e:	f7ef f82c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ae62:	f107 0308 	add.w	r3, r7, #8
 801ae66:	4619      	mov	r1, r3
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f7ef f892 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
 801ae6e:	f107 0308 	add.w	r3, r7, #8
 801ae72:	4618      	mov	r0, r3
 801ae74:	f7ef fbd9 	bl	800a62a <_ZN12SimpleStringD1Ev>
}
 801ae78:	bf00      	nop
 801ae7a:	3714      	adds	r7, #20
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd90      	pop	{r4, r7, pc}

0801ae80 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b082      	sub	sp, #8
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
 801ae88:	6039      	str	r1, [r7, #0]
    return name_;
 801ae8a:	683b      	ldr	r3, [r7, #0]
 801ae8c:	3304      	adds	r3, #4
 801ae8e:	4619      	mov	r1, r3
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7ef f866 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 801ae96:	6878      	ldr	r0, [r7, #4]
 801ae98:	3708      	adds	r7, #8
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd80      	pop	{r7, pc}

0801ae9e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801ae9e:	b580      	push	{r7, lr}
 801aea0:	b082      	sub	sp, #8
 801aea2:	af00      	add	r7, sp, #0
 801aea4:	6078      	str	r0, [r7, #4]
 801aea6:	6039      	str	r1, [r7, #0]
    return type_;
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	330c      	adds	r3, #12
 801aeac:	4619      	mov	r1, r3
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f7ef f857 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
}
 801aeb4:	6878      	ldr	r0, [r7, #4]
 801aeb6:	3708      	adds	r7, #8
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}

0801aebc <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aebe:	b087      	sub	sp, #28
 801aec0:	af04      	add	r7, sp, #16
 801aec2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801aec4:	f7f6 fbdc 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801aec8:	4604      	mov	r4, r0
 801aeca:	6823      	ldr	r3, [r4, #0]
 801aecc:	3324      	adds	r3, #36	; 0x24
 801aece:	681d      	ldr	r5, [r3, #0]
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	330c      	adds	r3, #12
 801aed4:	4618      	mov	r0, r3
 801aed6:	f7ef fb7b 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801aeda:	4606      	mov	r6, r0
 801aedc:	f7f6 fbe0 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801aee0:	4603      	mov	r3, r0
 801aee2:	9302      	str	r3, [sp, #8]
 801aee4:	23c8      	movs	r3, #200	; 0xc8
 801aee6:	9301      	str	r3, [sp, #4]
 801aee8:	4b06      	ldr	r3, [pc, #24]	; (801af04 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801aeea:	9300      	str	r3, [sp, #0]
 801aeec:	2300      	movs	r3, #0
 801aeee:	4632      	mov	r2, r6
 801aef0:	4905      	ldr	r1, [pc, #20]	; (801af08 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801aef2:	4620      	mov	r0, r4
 801aef4:	47a8      	blx	r5
    return value_.boolValue_;
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	7e1b      	ldrb	r3, [r3, #24]
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	370c      	adds	r7, #12
 801aefe:	46bd      	mov	sp, r7
 801af00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af02:	bf00      	nop
 801af04:	08023300 	.word	0x08023300
 801af08:	080232c8 	.word	0x080232c8

0801af0c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801af0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af0e:	b089      	sub	sp, #36	; 0x24
 801af10:	af04      	add	r7, sp, #16
 801af12:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	f103 040c 	add.w	r4, r3, #12
 801af1a:	f107 0308 	add.w	r3, r7, #8
 801af1e:	4920      	ldr	r1, [pc, #128]	; (801afa0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801af20:	4618      	mov	r0, r3
 801af22:	f7ee ffca 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801af26:	2501      	movs	r5, #1
 801af28:	f107 0308 	add.w	r3, r7, #8
 801af2c:	4619      	mov	r1, r3
 801af2e:	4620      	mov	r0, r4
 801af30:	f7ef fb87 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801af34:	4603      	mov	r3, r0
 801af36:	2b00      	cmp	r3, #0
 801af38:	d005      	beq.n	801af46 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	699b      	ldr	r3, [r3, #24]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	db01      	blt.n	801af46 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801af42:	2401      	movs	r4, #1
 801af44:	e000      	b.n	801af48 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801af46:	2400      	movs	r4, #0
 801af48:	2d00      	cmp	r5, #0
 801af4a:	d004      	beq.n	801af56 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801af4c:	f107 0308 	add.w	r3, r7, #8
 801af50:	4618      	mov	r0, r3
 801af52:	f7ef fb6a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801af56:	2c00      	cmp	r4, #0
 801af58:	d002      	beq.n	801af60 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	699b      	ldr	r3, [r3, #24]
 801af5e:	e01a      	b.n	801af96 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801af60:	f7f6 fb8e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801af64:	4604      	mov	r4, r0
 801af66:	6823      	ldr	r3, [r4, #0]
 801af68:	3324      	adds	r3, #36	; 0x24
 801af6a:	681d      	ldr	r5, [r3, #0]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	330c      	adds	r3, #12
 801af70:	4618      	mov	r0, r3
 801af72:	f7ef fb2d 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801af76:	4606      	mov	r6, r0
 801af78:	f7f6 fb92 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af7c:	4603      	mov	r3, r0
 801af7e:	9302      	str	r3, [sp, #8]
 801af80:	23d2      	movs	r3, #210	; 0xd2
 801af82:	9301      	str	r3, [sp, #4]
 801af84:	4b07      	ldr	r3, [pc, #28]	; (801afa4 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801af86:	9300      	str	r3, [sp, #0]
 801af88:	2300      	movs	r3, #0
 801af8a:	4632      	mov	r2, r6
 801af8c:	4906      	ldr	r1, [pc, #24]	; (801afa8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801af8e:	4620      	mov	r0, r4
 801af90:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	699b      	ldr	r3, [r3, #24]
    }
}
 801af96:	4618      	mov	r0, r3
 801af98:	3714      	adds	r7, #20
 801af9a:	46bd      	mov	sp, r7
 801af9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af9e:	bf00      	nop
 801afa0:	080232c4 	.word	0x080232c4
 801afa4:	08023300 	.word	0x08023300
 801afa8:	080232d0 	.word	0x080232d0

0801afac <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801afac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afae:	b087      	sub	sp, #28
 801afb0:	af04      	add	r7, sp, #16
 801afb2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801afb4:	f7f6 fb64 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801afb8:	4604      	mov	r4, r0
 801afba:	6823      	ldr	r3, [r4, #0]
 801afbc:	3324      	adds	r3, #36	; 0x24
 801afbe:	681d      	ldr	r5, [r3, #0]
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	330c      	adds	r3, #12
 801afc4:	4618      	mov	r0, r3
 801afc6:	f7ef fb03 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801afca:	4606      	mov	r6, r0
 801afcc:	f7f6 fb68 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801afd0:	4603      	mov	r3, r0
 801afd2:	9302      	str	r3, [sp, #8]
 801afd4:	23d9      	movs	r3, #217	; 0xd9
 801afd6:	9301      	str	r3, [sp, #4]
 801afd8:	4b06      	ldr	r3, [pc, #24]	; (801aff4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801afda:	9300      	str	r3, [sp, #0]
 801afdc:	2300      	movs	r3, #0
 801afde:	4632      	mov	r2, r6
 801afe0:	4905      	ldr	r1, [pc, #20]	; (801aff8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801afe2:	4620      	mov	r0, r4
 801afe4:	47a8      	blx	r5
    return value_.intValue_;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	699b      	ldr	r3, [r3, #24]
}
 801afea:	4618      	mov	r0, r3
 801afec:	370c      	adds	r7, #12
 801afee:	46bd      	mov	sp, r7
 801aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aff2:	bf00      	nop
 801aff4:	08023300 	.word	0x08023300
 801aff8:	080232c4 	.word	0x080232c4

0801affc <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801affc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801affe:	b08b      	sub	sp, #44	; 0x2c
 801b000:	af04      	add	r7, sp, #16
 801b002:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	f103 040c 	add.w	r4, r3, #12
 801b00a:	f107 0308 	add.w	r3, r7, #8
 801b00e:	4928      	ldr	r1, [pc, #160]	; (801b0b0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801b010:	4618      	mov	r0, r3
 801b012:	f7ee ff52 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b016:	f107 0308 	add.w	r3, r7, #8
 801b01a:	4619      	mov	r1, r3
 801b01c:	4620      	mov	r0, r4
 801b01e:	f7ef fb10 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b022:	4603      	mov	r3, r0
 801b024:	461c      	mov	r4, r3
 801b026:	f107 0308 	add.w	r3, r7, #8
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7ef fafd 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b030:	2c00      	cmp	r4, #0
 801b032:	d002      	beq.n	801b03a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	699b      	ldr	r3, [r3, #24]
 801b038:	e035      	b.n	801b0a6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	f103 040c 	add.w	r4, r3, #12
 801b040:	f107 0310 	add.w	r3, r7, #16
 801b044:	491b      	ldr	r1, [pc, #108]	; (801b0b4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801b046:	4618      	mov	r0, r3
 801b048:	f7ee ff37 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b04c:	f107 0310 	add.w	r3, r7, #16
 801b050:	4619      	mov	r1, r3
 801b052:	4620      	mov	r0, r4
 801b054:	f7ef faf5 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b058:	4603      	mov	r3, r0
 801b05a:	461c      	mov	r4, r3
 801b05c:	f107 0310 	add.w	r3, r7, #16
 801b060:	4618      	mov	r0, r3
 801b062:	f7ef fae2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b066:	2c00      	cmp	r4, #0
 801b068:	d002      	beq.n	801b070 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	699b      	ldr	r3, [r3, #24]
 801b06e:	e01a      	b.n	801b0a6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801b070:	f7f6 fb06 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b074:	4604      	mov	r4, r0
 801b076:	6823      	ldr	r3, [r4, #0]
 801b078:	3324      	adds	r3, #36	; 0x24
 801b07a:	681d      	ldr	r5, [r3, #0]
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	330c      	adds	r3, #12
 801b080:	4618      	mov	r0, r3
 801b082:	f7ef faa5 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b086:	4606      	mov	r6, r0
 801b088:	f7f6 fb0a 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b08c:	4603      	mov	r3, r0
 801b08e:	9302      	str	r3, [sp, #8]
 801b090:	23e5      	movs	r3, #229	; 0xe5
 801b092:	9301      	str	r3, [sp, #4]
 801b094:	4b08      	ldr	r3, [pc, #32]	; (801b0b8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801b096:	9300      	str	r3, [sp, #0]
 801b098:	2300      	movs	r3, #0
 801b09a:	4632      	mov	r2, r6
 801b09c:	4907      	ldr	r1, [pc, #28]	; (801b0bc <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801b09e:	4620      	mov	r0, r4
 801b0a0:	47a8      	blx	r5
        return value_.longIntValue_;
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	699b      	ldr	r3, [r3, #24]
    }
}
 801b0a6:	4618      	mov	r0, r3
 801b0a8:	371c      	adds	r7, #28
 801b0aa:	46bd      	mov	sp, r7
 801b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0ae:	bf00      	nop
 801b0b0:	080232c4 	.word	0x080232c4
 801b0b4:	080232d0 	.word	0x080232d0
 801b0b8:	08023300 	.word	0x08023300
 801b0bc:	080232e0 	.word	0x080232e0

0801b0c0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801b0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0c2:	b08d      	sub	sp, #52	; 0x34
 801b0c4:	af04      	add	r7, sp, #16
 801b0c6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	f103 040c 	add.w	r4, r3, #12
 801b0ce:	f107 0308 	add.w	r3, r7, #8
 801b0d2:	4940      	ldr	r1, [pc, #256]	; (801b1d4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	f7ee fef0 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b0da:	f107 0308 	add.w	r3, r7, #8
 801b0de:	4619      	mov	r1, r3
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	f7ef faae 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	461c      	mov	r4, r3
 801b0ea:	f107 0308 	add.w	r3, r7, #8
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	f7ef fa9b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b0f4:	2c00      	cmp	r4, #0
 801b0f6:	d002      	beq.n	801b0fe <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	699b      	ldr	r3, [r3, #24]
 801b0fc:	e066      	b.n	801b1cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	f103 040c 	add.w	r4, r3, #12
 801b104:	f107 0310 	add.w	r3, r7, #16
 801b108:	4933      	ldr	r1, [pc, #204]	; (801b1d8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801b10a:	4618      	mov	r0, r3
 801b10c:	f7ee fed5 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b110:	2501      	movs	r5, #1
 801b112:	f107 0310 	add.w	r3, r7, #16
 801b116:	4619      	mov	r1, r3
 801b118:	4620      	mov	r0, r4
 801b11a:	f7ef fa92 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b11e:	4603      	mov	r3, r0
 801b120:	2b00      	cmp	r3, #0
 801b122:	d005      	beq.n	801b130 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	699b      	ldr	r3, [r3, #24]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	db01      	blt.n	801b130 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801b12c:	2401      	movs	r4, #1
 801b12e:	e000      	b.n	801b132 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801b130:	2400      	movs	r4, #0
 801b132:	2d00      	cmp	r5, #0
 801b134:	d004      	beq.n	801b140 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801b136:	f107 0310 	add.w	r3, r7, #16
 801b13a:	4618      	mov	r0, r3
 801b13c:	f7ef fa75 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b140:	2c00      	cmp	r4, #0
 801b142:	d002      	beq.n	801b14a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	699b      	ldr	r3, [r3, #24]
 801b148:	e040      	b.n	801b1cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	f103 040c 	add.w	r4, r3, #12
 801b150:	f107 0318 	add.w	r3, r7, #24
 801b154:	4921      	ldr	r1, [pc, #132]	; (801b1dc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801b156:	4618      	mov	r0, r3
 801b158:	f7ee feaf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b15c:	2501      	movs	r5, #1
 801b15e:	f107 0318 	add.w	r3, r7, #24
 801b162:	4619      	mov	r1, r3
 801b164:	4620      	mov	r0, r4
 801b166:	f7ef fa6c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b16a:	4603      	mov	r3, r0
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d005      	beq.n	801b17c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	699b      	ldr	r3, [r3, #24]
 801b174:	2b00      	cmp	r3, #0
 801b176:	db01      	blt.n	801b17c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801b178:	2401      	movs	r4, #1
 801b17a:	e000      	b.n	801b17e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801b17c:	2400      	movs	r4, #0
 801b17e:	2d00      	cmp	r5, #0
 801b180:	d004      	beq.n	801b18c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801b182:	f107 0318 	add.w	r3, r7, #24
 801b186:	4618      	mov	r0, r3
 801b188:	f7ef fa4f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b18c:	2c00      	cmp	r4, #0
 801b18e:	d002      	beq.n	801b196 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	699b      	ldr	r3, [r3, #24]
 801b194:	e01a      	b.n	801b1cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801b196:	f7f6 fa73 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b19a:	4604      	mov	r4, r0
 801b19c:	6823      	ldr	r3, [r4, #0]
 801b19e:	3324      	adds	r3, #36	; 0x24
 801b1a0:	681d      	ldr	r5, [r3, #0]
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	330c      	adds	r3, #12
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7ef fa12 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b1ac:	4606      	mov	r6, r0
 801b1ae:	f7f6 fa77 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	9302      	str	r3, [sp, #8]
 801b1b6:	23f4      	movs	r3, #244	; 0xf4
 801b1b8:	9301      	str	r3, [sp, #4]
 801b1ba:	4b09      	ldr	r3, [pc, #36]	; (801b1e0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801b1bc:	9300      	str	r3, [sp, #0]
 801b1be:	2300      	movs	r3, #0
 801b1c0:	4632      	mov	r2, r6
 801b1c2:	4908      	ldr	r1, [pc, #32]	; (801b1e4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	699b      	ldr	r3, [r3, #24]
    }
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3724      	adds	r7, #36	; 0x24
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1d4:	080232d0 	.word	0x080232d0
 801b1d8:	080232c4 	.word	0x080232c4
 801b1dc:	080232e0 	.word	0x080232e0
 801b1e0:	08023300 	.word	0x08023300
 801b1e4:	080232ec 	.word	0x080232ec

0801b1e8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801b1e8:	b5b0      	push	{r4, r5, r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af02      	add	r7, sp, #8
 801b1ee:	6078      	str	r0, [r7, #4]
 801b1f0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801b1f2:	f7f6 fa45 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b1f6:	4604      	mov	r4, r0
 801b1f8:	6823      	ldr	r3, [r4, #0]
 801b1fa:	3368      	adds	r3, #104	; 0x68
 801b1fc:	681d      	ldr	r5, [r3, #0]
 801b1fe:	f7f6 fa4f 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b202:	4603      	mov	r3, r0
 801b204:	9300      	str	r3, [sp, #0]
 801b206:	f240 1323 	movw	r3, #291	; 0x123
 801b20a:	4a06      	ldr	r2, [pc, #24]	; (801b224 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801b20c:	4906      	ldr	r1, [pc, #24]	; (801b228 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801b20e:	4620      	mov	r0, r4
 801b210:	47a8      	blx	r5
    return cpputest_longlong(0);
 801b212:	2100      	movs	r1, #0
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	f7ec fe87 	bl	8007f28 <_ZN17cpputest_longlongC1Ei>
}
 801b21a:	6878      	ldr	r0, [r7, #4]
 801b21c:	3708      	adds	r7, #8
 801b21e:	46bd      	mov	sp, r7
 801b220:	bdb0      	pop	{r4, r5, r7, pc}
 801b222:	bf00      	nop
 801b224:	08023300 	.word	0x08023300
 801b228:	0802331c 	.word	0x0802331c

0801b22c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801b22c:	b5b0      	push	{r4, r5, r7, lr}
 801b22e:	b084      	sub	sp, #16
 801b230:	af02      	add	r7, sp, #8
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801b236:	f7f6 fa23 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b23a:	4604      	mov	r4, r0
 801b23c:	6823      	ldr	r3, [r4, #0]
 801b23e:	3368      	adds	r3, #104	; 0x68
 801b240:	681d      	ldr	r5, [r3, #0]
 801b242:	f7f6 fa2d 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b246:	4603      	mov	r3, r0
 801b248:	9300      	str	r3, [sp, #0]
 801b24a:	f240 1329 	movw	r3, #297	; 0x129
 801b24e:	4a06      	ldr	r2, [pc, #24]	; (801b268 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801b250:	4906      	ldr	r1, [pc, #24]	; (801b26c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801b252:	4620      	mov	r0, r4
 801b254:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801b256:	2100      	movs	r1, #0
 801b258:	6878      	ldr	r0, [r7, #4]
 801b25a:	f7ec fe71 	bl	8007f40 <_ZN18cpputest_ulonglongC1Ei>
}
 801b25e:	6878      	ldr	r0, [r7, #4]
 801b260:	3708      	adds	r7, #8
 801b262:	46bd      	mov	sp, r7
 801b264:	bdb0      	pop	{r4, r5, r7, pc}
 801b266:	bf00      	nop
 801b268:	08023300 	.word	0x08023300
 801b26c:	0802333c 	.word	0x0802333c

0801b270 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801b270:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b272:	b087      	sub	sp, #28
 801b274:	af04      	add	r7, sp, #16
 801b276:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b278:	f7f6 fa02 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b27c:	4604      	mov	r4, r0
 801b27e:	6823      	ldr	r3, [r4, #0]
 801b280:	3324      	adds	r3, #36	; 0x24
 801b282:	681d      	ldr	r5, [r3, #0]
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	330c      	adds	r3, #12
 801b288:	4618      	mov	r0, r3
 801b28a:	f7ef f9a1 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b28e:	4606      	mov	r6, r0
 801b290:	f7f6 fa06 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b294:	4603      	mov	r3, r0
 801b296:	9302      	str	r3, [sp, #8]
 801b298:	f240 1331 	movw	r3, #305	; 0x131
 801b29c:	9301      	str	r3, [sp, #4]
 801b29e:	4b09      	ldr	r3, [pc, #36]	; (801b2c4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801b2a0:	9300      	str	r3, [sp, #0]
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	4632      	mov	r2, r6
 801b2a6:	4908      	ldr	r1, [pc, #32]	; (801b2c8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801b2b2:	ec43 2b17 	vmov	d7, r2, r3
}
 801b2b6:	eeb0 0a47 	vmov.f32	s0, s14
 801b2ba:	eef0 0a67 	vmov.f32	s1, s15
 801b2be:	370c      	adds	r7, #12
 801b2c0:	46bd      	mov	sp, r7
 801b2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2c4:	08023300 	.word	0x08023300
 801b2c8:	08023368 	.word	0x08023368

0801b2cc <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801b2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2ce:	b087      	sub	sp, #28
 801b2d0:	af04      	add	r7, sp, #16
 801b2d2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b2d4:	f7f6 f9d4 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b2d8:	4604      	mov	r4, r0
 801b2da:	6823      	ldr	r3, [r4, #0]
 801b2dc:	3324      	adds	r3, #36	; 0x24
 801b2de:	681d      	ldr	r5, [r3, #0]
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	330c      	adds	r3, #12
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7ef f973 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b2ea:	4606      	mov	r6, r0
 801b2ec:	f7f6 f9d8 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	9302      	str	r3, [sp, #8]
 801b2f4:	f240 1337 	movw	r3, #311	; 0x137
 801b2f8:	9301      	str	r3, [sp, #4]
 801b2fa:	4b09      	ldr	r3, [pc, #36]	; (801b320 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801b2fc:	9300      	str	r3, [sp, #0]
 801b2fe:	2300      	movs	r3, #0
 801b300:	4632      	mov	r2, r6
 801b302:	4908      	ldr	r1, [pc, #32]	; (801b324 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801b304:	4620      	mov	r0, r4
 801b306:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b30e:	ec43 2b17 	vmov	d7, r2, r3
}
 801b312:	eeb0 0a47 	vmov.f32	s0, s14
 801b316:	eef0 0a67 	vmov.f32	s1, s15
 801b31a:	370c      	adds	r7, #12
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b320:	08023300 	.word	0x08023300
 801b324:	08023368 	.word	0x08023368

0801b328 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b32a:	b087      	sub	sp, #28
 801b32c:	af04      	add	r7, sp, #16
 801b32e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801b330:	f7f6 f9a6 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b334:	4604      	mov	r4, r0
 801b336:	6823      	ldr	r3, [r4, #0]
 801b338:	3324      	adds	r3, #36	; 0x24
 801b33a:	681d      	ldr	r5, [r3, #0]
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	330c      	adds	r3, #12
 801b340:	4618      	mov	r0, r3
 801b342:	f7ef f945 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b346:	4606      	mov	r6, r0
 801b348:	f7f6 f9aa 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b34c:	4603      	mov	r3, r0
 801b34e:	9302      	str	r3, [sp, #8]
 801b350:	f240 133d 	movw	r3, #317	; 0x13d
 801b354:	9301      	str	r3, [sp, #4]
 801b356:	4b06      	ldr	r3, [pc, #24]	; (801b370 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801b358:	9300      	str	r3, [sp, #0]
 801b35a:	2300      	movs	r3, #0
 801b35c:	4632      	mov	r2, r6
 801b35e:	4905      	ldr	r1, [pc, #20]	; (801b374 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801b360:	4620      	mov	r0, r4
 801b362:	47a8      	blx	r5
    return value_.stringValue_;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	699b      	ldr	r3, [r3, #24]
}
 801b368:	4618      	mov	r0, r3
 801b36a:	370c      	adds	r7, #12
 801b36c:	46bd      	mov	sp, r7
 801b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b370:	08023300 	.word	0x08023300
 801b374:	08023390 	.word	0x08023390

0801b378 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801b378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b37a:	b087      	sub	sp, #28
 801b37c:	af04      	add	r7, sp, #16
 801b37e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801b380:	f7f6 f97e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b384:	4604      	mov	r4, r0
 801b386:	6823      	ldr	r3, [r4, #0]
 801b388:	3324      	adds	r3, #36	; 0x24
 801b38a:	681d      	ldr	r5, [r3, #0]
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	330c      	adds	r3, #12
 801b390:	4618      	mov	r0, r3
 801b392:	f7ef f91d 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b396:	4606      	mov	r6, r0
 801b398:	f7f6 f982 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b39c:	4603      	mov	r3, r0
 801b39e:	9302      	str	r3, [sp, #8]
 801b3a0:	f240 1343 	movw	r3, #323	; 0x143
 801b3a4:	9301      	str	r3, [sp, #4]
 801b3a6:	4b06      	ldr	r3, [pc, #24]	; (801b3c0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801b3a8:	9300      	str	r3, [sp, #0]
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	4632      	mov	r2, r6
 801b3ae:	4905      	ldr	r1, [pc, #20]	; (801b3c4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	47a8      	blx	r5
    return value_.pointerValue_;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	699b      	ldr	r3, [r3, #24]
}
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	370c      	adds	r7, #12
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3c0:	08023300 	.word	0x08023300
 801b3c4:	08023370 	.word	0x08023370

0801b3c8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3ca:	b087      	sub	sp, #28
 801b3cc:	af04      	add	r7, sp, #16
 801b3ce:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801b3d0:	f7f6 f956 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	6823      	ldr	r3, [r4, #0]
 801b3d8:	3324      	adds	r3, #36	; 0x24
 801b3da:	681d      	ldr	r5, [r3, #0]
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	330c      	adds	r3, #12
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	f7ef f8f5 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b3e6:	4606      	mov	r6, r0
 801b3e8:	f7f6 f95a 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	9302      	str	r3, [sp, #8]
 801b3f0:	f240 1349 	movw	r3, #329	; 0x149
 801b3f4:	9301      	str	r3, [sp, #4]
 801b3f6:	4b06      	ldr	r3, [pc, #24]	; (801b410 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801b3f8:	9300      	str	r3, [sp, #0]
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	4632      	mov	r2, r6
 801b3fe:	4905      	ldr	r1, [pc, #20]	; (801b414 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801b400:	4620      	mov	r0, r4
 801b402:	47a8      	blx	r5
    return value_.pointerValue_;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	699b      	ldr	r3, [r3, #24]
}
 801b408:	4618      	mov	r0, r3
 801b40a:	370c      	adds	r7, #12
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b410:	08023300 	.word	0x08023300
 801b414:	08023378 	.word	0x08023378

0801b418 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b41a:	b087      	sub	sp, #28
 801b41c:	af04      	add	r7, sp, #16
 801b41e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801b420:	f7f6 f92e 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b424:	4604      	mov	r4, r0
 801b426:	6823      	ldr	r3, [r4, #0]
 801b428:	3324      	adds	r3, #36	; 0x24
 801b42a:	681d      	ldr	r5, [r3, #0]
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	330c      	adds	r3, #12
 801b430:	4618      	mov	r0, r3
 801b432:	f7ef f8cd 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b436:	4606      	mov	r6, r0
 801b438:	f7f6 f932 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b43c:	4603      	mov	r3, r0
 801b43e:	9302      	str	r3, [sp, #8]
 801b440:	f240 134f 	movw	r3, #335	; 0x14f
 801b444:	9301      	str	r3, [sp, #4]
 801b446:	4b06      	ldr	r3, [pc, #24]	; (801b460 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801b448:	9300      	str	r3, [sp, #0]
 801b44a:	2300      	movs	r3, #0
 801b44c:	4632      	mov	r2, r6
 801b44e:	4905      	ldr	r1, [pc, #20]	; (801b464 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801b450:	4620      	mov	r0, r4
 801b452:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	699b      	ldr	r3, [r3, #24]
}
 801b458:	4618      	mov	r0, r3
 801b45a:	370c      	adds	r7, #12
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b460:	08023300 	.word	0x08023300
 801b464:	08023384 	.word	0x08023384

0801b468 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801b468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b46a:	b087      	sub	sp, #28
 801b46c:	af04      	add	r7, sp, #16
 801b46e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801b470:	f7f6 f906 	bl	8011680 <_ZN10UtestShell10getCurrentEv>
 801b474:	4604      	mov	r4, r0
 801b476:	6823      	ldr	r3, [r4, #0]
 801b478:	3324      	adds	r3, #36	; 0x24
 801b47a:	681d      	ldr	r5, [r3, #0]
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	330c      	adds	r3, #12
 801b480:	4618      	mov	r0, r3
 801b482:	f7ef f8a5 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801b486:	4606      	mov	r6, r0
 801b488:	f7f6 f90a 	bl	80116a0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b48c:	4603      	mov	r3, r0
 801b48e:	9302      	str	r3, [sp, #8]
 801b490:	f240 1355 	movw	r3, #341	; 0x155
 801b494:	9301      	str	r3, [sp, #4]
 801b496:	4b06      	ldr	r3, [pc, #24]	; (801b4b0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801b498:	9300      	str	r3, [sp, #0]
 801b49a:	2300      	movs	r3, #0
 801b49c:	4632      	mov	r2, r6
 801b49e:	4905      	ldr	r1, [pc, #20]	; (801b4b4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	699b      	ldr	r3, [r3, #24]
}
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	370c      	adds	r7, #12
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4b0:	08023300 	.word	0x08023300
 801b4b4:	0802339c 	.word	0x0802339c

0801b4b8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801b4b8:	b480      	push	{r7}
 801b4ba:	b083      	sub	sp, #12
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	699b      	ldr	r3, [r3, #24]
}
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	370c      	adds	r7, #12
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ce:	4770      	bx	lr

0801b4d0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801b4d0:	b480      	push	{r7}
 801b4d2:	b083      	sub	sp, #12
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	699b      	ldr	r3, [r3, #24]
}
 801b4dc:	4618      	mov	r0, r3
 801b4de:	370c      	adds	r7, #12
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e6:	4770      	bx	lr

0801b4e8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	b083      	sub	sp, #12
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
    return size_;
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	370c      	adds	r7, #12
 801b4f8:	46bd      	mov	sp, r7
 801b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fe:	4770      	bx	lr

0801b500 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801b500:	b480      	push	{r7}
 801b502:	b083      	sub	sp, #12
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
    return comparator_;
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801b50c:	4618      	mov	r0, r3
 801b50e:	370c      	adds	r7, #12
 801b510:	46bd      	mov	sp, r7
 801b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b516:	4770      	bx	lr

0801b518 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801b518:	b480      	push	{r7}
 801b51a:	b083      	sub	sp, #12
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
    return copier_;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801b524:	4618      	mov	r0, r3
 801b526:	370c      	adds	r7, #12
 801b528:	46bd      	mov	sp, r7
 801b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52e:	4770      	bx	lr

0801b530 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801b530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b532:	b0cd      	sub	sp, #308	; 0x134
 801b534:	af00      	add	r7, sp, #0
 801b536:	1d3b      	adds	r3, r7, #4
 801b538:	6018      	str	r0, [r3, #0]
 801b53a:	463b      	mov	r3, r7
 801b53c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801b53e:	2500      	movs	r5, #0
 801b540:	1d3b      	adds	r3, r7, #4
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	f103 040c 	add.w	r4, r3, #12
 801b548:	f107 0308 	add.w	r3, r7, #8
 801b54c:	49bb      	ldr	r1, [pc, #748]	; (801b83c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b54e:	4618      	mov	r0, r3
 801b550:	f7ee fcb3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b554:	2601      	movs	r6, #1
 801b556:	f107 0308 	add.w	r3, r7, #8
 801b55a:	4619      	mov	r1, r3
 801b55c:	4620      	mov	r0, r4
 801b55e:	f7ef f870 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b562:	4603      	mov	r3, r0
 801b564:	2b00      	cmp	r3, #0
 801b566:	d015      	beq.n	801b594 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801b568:	463b      	mov	r3, r7
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	f103 040c 	add.w	r4, r3, #12
 801b570:	f107 0310 	add.w	r3, r7, #16
 801b574:	49b2      	ldr	r1, [pc, #712]	; (801b840 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b576:	4618      	mov	r0, r3
 801b578:	f7ee fc9f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b57c:	2501      	movs	r5, #1
 801b57e:	f107 0310 	add.w	r3, r7, #16
 801b582:	4619      	mov	r1, r3
 801b584:	4620      	mov	r0, r4
 801b586:	f7ef f85c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b58a:	4603      	mov	r3, r0
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d001      	beq.n	801b594 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801b590:	2401      	movs	r4, #1
 801b592:	e000      	b.n	801b596 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801b594:	2400      	movs	r4, #0
 801b596:	2d00      	cmp	r5, #0
 801b598:	d004      	beq.n	801b5a4 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801b59a:	f107 0310 	add.w	r3, r7, #16
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f7ef f843 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b5a4:	2e00      	cmp	r6, #0
 801b5a6:	d004      	beq.n	801b5b2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801b5a8:	f107 0308 	add.w	r3, r7, #8
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f7ef f83c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b5b2:	2c00      	cmp	r4, #0
 801b5b4:	d00c      	beq.n	801b5d0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801b5b6:	1d3b      	adds	r3, r7, #4
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	699a      	ldr	r2, [r3, #24]
 801b5bc:	463b      	mov	r3, r7
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	699b      	ldr	r3, [r3, #24]
 801b5c2:	429a      	cmp	r2, r3
 801b5c4:	bf0c      	ite	eq
 801b5c6:	2301      	moveq	r3, #1
 801b5c8:	2300      	movne	r3, #0
 801b5ca:	b2dc      	uxtb	r4, r3
 801b5cc:	f000 bd60 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801b5d0:	2500      	movs	r5, #0
 801b5d2:	1d3b      	adds	r3, r7, #4
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	f103 040c 	add.w	r4, r3, #12
 801b5da:	f107 0318 	add.w	r3, r7, #24
 801b5de:	4998      	ldr	r1, [pc, #608]	; (801b840 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f7ee fc6a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b5e6:	2601      	movs	r6, #1
 801b5e8:	f107 0318 	add.w	r3, r7, #24
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f7ef f827 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d015      	beq.n	801b626 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b5fa:	463b      	mov	r3, r7
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	f103 040c 	add.w	r4, r3, #12
 801b602:	f107 0320 	add.w	r3, r7, #32
 801b606:	498d      	ldr	r1, [pc, #564]	; (801b83c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b608:	4618      	mov	r0, r3
 801b60a:	f7ee fc56 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b60e:	2501      	movs	r5, #1
 801b610:	f107 0320 	add.w	r3, r7, #32
 801b614:	4619      	mov	r1, r3
 801b616:	4620      	mov	r0, r4
 801b618:	f7ef f813 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b61c:	4603      	mov	r3, r0
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d001      	beq.n	801b626 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b622:	2401      	movs	r4, #1
 801b624:	e000      	b.n	801b628 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801b626:	2400      	movs	r4, #0
 801b628:	2d00      	cmp	r5, #0
 801b62a:	d004      	beq.n	801b636 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801b62c:	f107 0320 	add.w	r3, r7, #32
 801b630:	4618      	mov	r0, r3
 801b632:	f7ee fffa 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b636:	2e00      	cmp	r6, #0
 801b638:	d004      	beq.n	801b644 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801b63a:	f107 0318 	add.w	r3, r7, #24
 801b63e:	4618      	mov	r0, r3
 801b640:	f7ee fff3 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b644:	2c00      	cmp	r4, #0
 801b646:	d00c      	beq.n	801b662 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801b648:	1d3b      	adds	r3, r7, #4
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	699a      	ldr	r2, [r3, #24]
 801b64e:	463b      	mov	r3, r7
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	699b      	ldr	r3, [r3, #24]
 801b654:	429a      	cmp	r2, r3
 801b656:	bf0c      	ite	eq
 801b658:	2301      	moveq	r3, #1
 801b65a:	2300      	movne	r3, #0
 801b65c:	b2dc      	uxtb	r4, r3
 801b65e:	f000 bd17 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801b662:	2500      	movs	r5, #0
 801b664:	1d3b      	adds	r3, r7, #4
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	f103 040c 	add.w	r4, r3, #12
 801b66c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b670:	4974      	ldr	r1, [pc, #464]	; (801b844 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b672:	4618      	mov	r0, r3
 801b674:	f7ee fc21 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b678:	2601      	movs	r6, #1
 801b67a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b67e:	4619      	mov	r1, r3
 801b680:	4620      	mov	r0, r4
 801b682:	f7ee ffde 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b686:	4603      	mov	r3, r0
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d015      	beq.n	801b6b8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b68c:	463b      	mov	r3, r7
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	f103 040c 	add.w	r4, r3, #12
 801b694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b698:	4969      	ldr	r1, [pc, #420]	; (801b840 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7ee fc0d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b6a0:	2501      	movs	r5, #1
 801b6a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6a6:	4619      	mov	r1, r3
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	f7ee ffca 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b6ae:	4603      	mov	r3, r0
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d001      	beq.n	801b6b8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b6b4:	2401      	movs	r4, #1
 801b6b6:	e000      	b.n	801b6ba <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801b6b8:	2400      	movs	r4, #0
 801b6ba:	2d00      	cmp	r5, #0
 801b6bc:	d004      	beq.n	801b6c8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801b6be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	f7ee ffb1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b6c8:	2e00      	cmp	r6, #0
 801b6ca:	d004      	beq.n	801b6d6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801b6cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	f7ee ffaa 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b6d6:	2c00      	cmp	r4, #0
 801b6d8:	d012      	beq.n	801b700 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801b6da:	463b      	mov	r3, r7
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	699b      	ldr	r3, [r3, #24]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	db0a      	blt.n	801b6fa <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b6e4:	1d3b      	adds	r3, r7, #4
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	699b      	ldr	r3, [r3, #24]
 801b6ea:	463a      	mov	r2, r7
 801b6ec:	6812      	ldr	r2, [r2, #0]
 801b6ee:	6992      	ldr	r2, [r2, #24]
 801b6f0:	4293      	cmp	r3, r2
 801b6f2:	d102      	bne.n	801b6fa <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b6f4:	2401      	movs	r4, #1
 801b6f6:	f000 bccb 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b6fa:	2400      	movs	r4, #0
 801b6fc:	f000 bcc8 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801b700:	2500      	movs	r5, #0
 801b702:	1d3b      	adds	r3, r7, #4
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	f103 040c 	add.w	r4, r3, #12
 801b70a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b70e:	494c      	ldr	r1, [pc, #304]	; (801b840 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b710:	4618      	mov	r0, r3
 801b712:	f7ee fbd2 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b716:	2601      	movs	r6, #1
 801b718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b71c:	4619      	mov	r1, r3
 801b71e:	4620      	mov	r0, r4
 801b720:	f7ee ff8f 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b724:	4603      	mov	r3, r0
 801b726:	2b00      	cmp	r3, #0
 801b728:	d015      	beq.n	801b756 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801b72a:	463b      	mov	r3, r7
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	f103 040c 	add.w	r4, r3, #12
 801b732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b736:	4943      	ldr	r1, [pc, #268]	; (801b844 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b738:	4618      	mov	r0, r3
 801b73a:	f7ee fbbe 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b73e:	2501      	movs	r5, #1
 801b740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b744:	4619      	mov	r1, r3
 801b746:	4620      	mov	r0, r4
 801b748:	f7ee ff7b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b74c:	4603      	mov	r3, r0
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d001      	beq.n	801b756 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801b752:	2401      	movs	r4, #1
 801b754:	e000      	b.n	801b758 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801b756:	2400      	movs	r4, #0
 801b758:	2d00      	cmp	r5, #0
 801b75a:	d004      	beq.n	801b766 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801b75c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b760:	4618      	mov	r0, r3
 801b762:	f7ee ff62 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b766:	2e00      	cmp	r6, #0
 801b768:	d004      	beq.n	801b774 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801b76a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b76e:	4618      	mov	r0, r3
 801b770:	f7ee ff5b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b774:	2c00      	cmp	r4, #0
 801b776:	d012      	beq.n	801b79e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801b778:	1d3b      	adds	r3, r7, #4
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	699b      	ldr	r3, [r3, #24]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	db0a      	blt.n	801b798 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801b782:	1d3b      	adds	r3, r7, #4
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	699b      	ldr	r3, [r3, #24]
 801b788:	463a      	mov	r2, r7
 801b78a:	6812      	ldr	r2, [r2, #0]
 801b78c:	6992      	ldr	r2, [r2, #24]
 801b78e:	4293      	cmp	r3, r2
 801b790:	d102      	bne.n	801b798 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801b792:	2401      	movs	r4, #1
 801b794:	f000 bc7c 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b798:	2400      	movs	r4, #0
 801b79a:	f000 bc79 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801b79e:	2500      	movs	r5, #0
 801b7a0:	1d3b      	adds	r3, r7, #4
 801b7a2:	681b      	ldr	r3, [r3, #0]
 801b7a4:	f103 040c 	add.w	r4, r3, #12
 801b7a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b7ac:	4926      	ldr	r1, [pc, #152]	; (801b848 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801b7ae:	4618      	mov	r0, r3
 801b7b0:	f7ee fb83 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b7b4:	2601      	movs	r6, #1
 801b7b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b7ba:	4619      	mov	r1, r3
 801b7bc:	4620      	mov	r0, r4
 801b7be:	f7ee ff40 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b7c2:	4603      	mov	r3, r0
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d015      	beq.n	801b7f4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801b7c8:	463b      	mov	r3, r7
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	f103 040c 	add.w	r4, r3, #12
 801b7d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b7d4:	491a      	ldr	r1, [pc, #104]	; (801b840 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7ee fb6f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b7dc:	2501      	movs	r5, #1
 801b7de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b7e2:	4619      	mov	r1, r3
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	f7ee ff2c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d001      	beq.n	801b7f4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801b7f0:	2401      	movs	r4, #1
 801b7f2:	e000      	b.n	801b7f6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801b7f4:	2400      	movs	r4, #0
 801b7f6:	2d00      	cmp	r5, #0
 801b7f8:	d004      	beq.n	801b804 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801b7fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b7fe:	4618      	mov	r0, r3
 801b800:	f7ee ff13 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b804:	2e00      	cmp	r6, #0
 801b806:	d004      	beq.n	801b812 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801b808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b80c:	4618      	mov	r0, r3
 801b80e:	f7ee ff0c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b812:	2c00      	cmp	r4, #0
 801b814:	d01a      	beq.n	801b84c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801b816:	463b      	mov	r3, r7
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	699b      	ldr	r3, [r3, #24]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	db0a      	blt.n	801b836 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801b820:	1d3b      	adds	r3, r7, #4
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	699b      	ldr	r3, [r3, #24]
 801b826:	463a      	mov	r2, r7
 801b828:	6812      	ldr	r2, [r2, #0]
 801b82a:	6992      	ldr	r2, [r2, #24]
 801b82c:	4293      	cmp	r3, r2
 801b82e:	d102      	bne.n	801b836 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801b830:	2401      	movs	r4, #1
 801b832:	f000 bc2d 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b836:	2400      	movs	r4, #0
 801b838:	f000 bc2a 	b.w	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b83c:	080232e0 	.word	0x080232e0
 801b840:	080232c4 	.word	0x080232c4
 801b844:	080232d0 	.word	0x080232d0
 801b848:	080232ec 	.word	0x080232ec
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801b84c:	2500      	movs	r5, #0
 801b84e:	1d3b      	adds	r3, r7, #4
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	f103 040c 	add.w	r4, r3, #12
 801b856:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b85a:	49b8      	ldr	r1, [pc, #736]	; (801bb3c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801b85c:	4618      	mov	r0, r3
 801b85e:	f7ee fb2c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b862:	2601      	movs	r6, #1
 801b864:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b868:	4619      	mov	r1, r3
 801b86a:	4620      	mov	r0, r4
 801b86c:	f7ee fee9 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b870:	4603      	mov	r3, r0
 801b872:	2b00      	cmp	r3, #0
 801b874:	d015      	beq.n	801b8a2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801b876:	463b      	mov	r3, r7
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	f103 040c 	add.w	r4, r3, #12
 801b87e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b882:	49af      	ldr	r1, [pc, #700]	; (801bb40 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b884:	4618      	mov	r0, r3
 801b886:	f7ee fb18 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b88a:	2501      	movs	r5, #1
 801b88c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b890:	4619      	mov	r1, r3
 801b892:	4620      	mov	r0, r4
 801b894:	f7ee fed5 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b898:	4603      	mov	r3, r0
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d001      	beq.n	801b8a2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801b89e:	2401      	movs	r4, #1
 801b8a0:	e000      	b.n	801b8a4 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801b8a2:	2400      	movs	r4, #0
 801b8a4:	2d00      	cmp	r5, #0
 801b8a6:	d004      	beq.n	801b8b2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801b8a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b8ac:	4618      	mov	r0, r3
 801b8ae:	f7ee febc 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b8b2:	2e00      	cmp	r6, #0
 801b8b4:	d004      	beq.n	801b8c0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801b8b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7ee feb5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b8c0:	2c00      	cmp	r4, #0
 801b8c2:	d010      	beq.n	801b8e6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801b8c4:	1d3b      	adds	r3, r7, #4
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	699b      	ldr	r3, [r3, #24]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	db09      	blt.n	801b8e2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801b8ce:	1d3b      	adds	r3, r7, #4
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	699b      	ldr	r3, [r3, #24]
 801b8d4:	463a      	mov	r2, r7
 801b8d6:	6812      	ldr	r2, [r2, #0]
 801b8d8:	6992      	ldr	r2, [r2, #24]
 801b8da:	4293      	cmp	r3, r2
 801b8dc:	d101      	bne.n	801b8e2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801b8de:	2401      	movs	r4, #1
 801b8e0:	e3d6      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b8e2:	2400      	movs	r4, #0
 801b8e4:	e3d4      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801b8e6:	2500      	movs	r5, #0
 801b8e8:	1d3b      	adds	r3, r7, #4
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	f103 040c 	add.w	r4, r3, #12
 801b8f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b8f4:	4993      	ldr	r1, [pc, #588]	; (801bb44 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7ee fadf 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b8fc:	2601      	movs	r6, #1
 801b8fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b902:	4619      	mov	r1, r3
 801b904:	4620      	mov	r0, r4
 801b906:	f7ee fe9c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b90a:	4603      	mov	r3, r0
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d015      	beq.n	801b93c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801b910:	463b      	mov	r3, r7
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	f103 040c 	add.w	r4, r3, #12
 801b918:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b91c:	498a      	ldr	r1, [pc, #552]	; (801bb48 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801b91e:	4618      	mov	r0, r3
 801b920:	f7ee facb 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b924:	2501      	movs	r5, #1
 801b926:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b92a:	4619      	mov	r1, r3
 801b92c:	4620      	mov	r0, r4
 801b92e:	f7ee fe88 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b932:	4603      	mov	r3, r0
 801b934:	2b00      	cmp	r3, #0
 801b936:	d001      	beq.n	801b93c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801b938:	2401      	movs	r4, #1
 801b93a:	e000      	b.n	801b93e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801b93c:	2400      	movs	r4, #0
 801b93e:	2d00      	cmp	r5, #0
 801b940:	d004      	beq.n	801b94c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801b942:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b946:	4618      	mov	r0, r3
 801b948:	f7ee fe6f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b94c:	2e00      	cmp	r6, #0
 801b94e:	d004      	beq.n	801b95a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801b950:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b954:	4618      	mov	r0, r3
 801b956:	f7ee fe68 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b95a:	2c00      	cmp	r4, #0
 801b95c:	d010      	beq.n	801b980 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801b95e:	463b      	mov	r3, r7
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	699b      	ldr	r3, [r3, #24]
 801b964:	2b00      	cmp	r3, #0
 801b966:	db09      	blt.n	801b97c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801b968:	1d3b      	adds	r3, r7, #4
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	699b      	ldr	r3, [r3, #24]
 801b96e:	463a      	mov	r2, r7
 801b970:	6812      	ldr	r2, [r2, #0]
 801b972:	6992      	ldr	r2, [r2, #24]
 801b974:	4293      	cmp	r3, r2
 801b976:	d101      	bne.n	801b97c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801b978:	2401      	movs	r4, #1
 801b97a:	e389      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b97c:	2400      	movs	r4, #0
 801b97e:	e387      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801b980:	2500      	movs	r5, #0
 801b982:	1d3b      	adds	r3, r7, #4
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	f103 040c 	add.w	r4, r3, #12
 801b98a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b98e:	496e      	ldr	r1, [pc, #440]	; (801bb48 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801b990:	4618      	mov	r0, r3
 801b992:	f7ee fa92 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b996:	2601      	movs	r6, #1
 801b998:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b99c:	4619      	mov	r1, r3
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f7ee fe4f 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b9a4:	4603      	mov	r3, r0
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d015      	beq.n	801b9d6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801b9aa:	463b      	mov	r3, r7
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	f103 040c 	add.w	r4, r3, #12
 801b9b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b9b6:	4963      	ldr	r1, [pc, #396]	; (801bb44 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	f7ee fa7e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801b9be:	2501      	movs	r5, #1
 801b9c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b9c4:	4619      	mov	r1, r3
 801b9c6:	4620      	mov	r0, r4
 801b9c8:	f7ee fe3b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d001      	beq.n	801b9d6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801b9d2:	2401      	movs	r4, #1
 801b9d4:	e000      	b.n	801b9d8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801b9d6:	2400      	movs	r4, #0
 801b9d8:	2d00      	cmp	r5, #0
 801b9da:	d004      	beq.n	801b9e6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801b9dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	f7ee fe22 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b9e6:	2e00      	cmp	r6, #0
 801b9e8:	d004      	beq.n	801b9f4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801b9ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	f7ee fe1b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801b9f4:	2c00      	cmp	r4, #0
 801b9f6:	d010      	beq.n	801ba1a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801b9f8:	1d3b      	adds	r3, r7, #4
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	699b      	ldr	r3, [r3, #24]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	db09      	blt.n	801ba16 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801ba02:	1d3b      	adds	r3, r7, #4
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	699b      	ldr	r3, [r3, #24]
 801ba08:	463a      	mov	r2, r7
 801ba0a:	6812      	ldr	r2, [r2, #0]
 801ba0c:	6992      	ldr	r2, [r2, #24]
 801ba0e:	4293      	cmp	r3, r2
 801ba10:	d101      	bne.n	801ba16 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801ba12:	2401      	movs	r4, #1
 801ba14:	e33c      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ba16:	2400      	movs	r4, #0
 801ba18:	e33a      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801ba1a:	2500      	movs	r5, #0
 801ba1c:	1d3b      	adds	r3, r7, #4
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	f103 040c 	add.w	r4, r3, #12
 801ba24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ba28:	4946      	ldr	r1, [pc, #280]	; (801bb44 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	f7ee fa45 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ba30:	2601      	movs	r6, #1
 801ba32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ba36:	4619      	mov	r1, r3
 801ba38:	4620      	mov	r0, r4
 801ba3a:	f7ee fe02 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801ba3e:	4603      	mov	r3, r0
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d015      	beq.n	801ba70 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801ba44:	463b      	mov	r3, r7
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	f103 040c 	add.w	r4, r3, #12
 801ba4c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ba50:	493b      	ldr	r1, [pc, #236]	; (801bb40 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801ba52:	4618      	mov	r0, r3
 801ba54:	f7ee fa31 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801ba58:	2501      	movs	r5, #1
 801ba5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ba5e:	4619      	mov	r1, r3
 801ba60:	4620      	mov	r0, r4
 801ba62:	f7ee fdee 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801ba66:	4603      	mov	r3, r0
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d001      	beq.n	801ba70 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801ba6c:	2401      	movs	r4, #1
 801ba6e:	e000      	b.n	801ba72 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801ba70:	2400      	movs	r4, #0
 801ba72:	2d00      	cmp	r5, #0
 801ba74:	d004      	beq.n	801ba80 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801ba76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f7ee fdd5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801ba80:	2e00      	cmp	r6, #0
 801ba82:	d004      	beq.n	801ba8e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801ba84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ba88:	4618      	mov	r0, r3
 801ba8a:	f7ee fdce 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801ba8e:	2c00      	cmp	r4, #0
 801ba90:	d00b      	beq.n	801baaa <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801ba92:	1d3b      	adds	r3, r7, #4
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	699a      	ldr	r2, [r3, #24]
 801ba98:	463b      	mov	r3, r7
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	699b      	ldr	r3, [r3, #24]
 801ba9e:	429a      	cmp	r2, r3
 801baa0:	bf0c      	ite	eq
 801baa2:	2301      	moveq	r3, #1
 801baa4:	2300      	movne	r3, #0
 801baa6:	b2dc      	uxtb	r4, r3
 801baa8:	e2f2      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801baaa:	2500      	movs	r5, #0
 801baac:	1d3b      	adds	r3, r7, #4
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	f103 040c 	add.w	r4, r3, #12
 801bab4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bab8:	4921      	ldr	r1, [pc, #132]	; (801bb40 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801baba:	4618      	mov	r0, r3
 801babc:	f7ee f9fd 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bac0:	2601      	movs	r6, #1
 801bac2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bac6:	4619      	mov	r1, r3
 801bac8:	4620      	mov	r0, r4
 801baca:	f7ee fdba 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bace:	4603      	mov	r3, r0
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d015      	beq.n	801bb00 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801bad4:	463b      	mov	r3, r7
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	f103 040c 	add.w	r4, r3, #12
 801badc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801bae0:	4918      	ldr	r1, [pc, #96]	; (801bb44 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801bae2:	4618      	mov	r0, r3
 801bae4:	f7ee f9e9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bae8:	2501      	movs	r5, #1
 801baea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801baee:	4619      	mov	r1, r3
 801baf0:	4620      	mov	r0, r4
 801baf2:	f7ee fda6 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801baf6:	4603      	mov	r3, r0
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d001      	beq.n	801bb00 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801bafc:	2401      	movs	r4, #1
 801bafe:	e000      	b.n	801bb02 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801bb00:	2400      	movs	r4, #0
 801bb02:	2d00      	cmp	r5, #0
 801bb04:	d004      	beq.n	801bb10 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801bb06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	f7ee fd8d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bb10:	2e00      	cmp	r6, #0
 801bb12:	d004      	beq.n	801bb1e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801bb14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f7ee fd86 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bb1e:	2c00      	cmp	r4, #0
 801bb20:	d014      	beq.n	801bb4c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801bb22:	1d3b      	adds	r3, r7, #4
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	699a      	ldr	r2, [r3, #24]
 801bb28:	463b      	mov	r3, r7
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	699b      	ldr	r3, [r3, #24]
 801bb2e:	429a      	cmp	r2, r3
 801bb30:	bf0c      	ite	eq
 801bb32:	2301      	moveq	r3, #1
 801bb34:	2300      	movne	r3, #0
 801bb36:	b2dc      	uxtb	r4, r3
 801bb38:	e2aa      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bb3a:	bf00      	nop
 801bb3c:	080232c4 	.word	0x080232c4
 801bb40:	080232ec 	.word	0x080232ec
 801bb44:	080232d0 	.word	0x080232d0
 801bb48:	080232e0 	.word	0x080232e0
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801bb4c:	2500      	movs	r5, #0
 801bb4e:	1d3b      	adds	r3, r7, #4
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	f103 040c 	add.w	r4, r3, #12
 801bb56:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801bb5a:	49ae      	ldr	r1, [pc, #696]	; (801be14 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7ee f9ac 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bb62:	2601      	movs	r6, #1
 801bb64:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801bb68:	4619      	mov	r1, r3
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	f7ee fd69 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bb70:	4603      	mov	r3, r0
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d015      	beq.n	801bba2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801bb76:	463b      	mov	r3, r7
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	f103 040c 	add.w	r4, r3, #12
 801bb7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bb82:	49a5      	ldr	r1, [pc, #660]	; (801be18 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801bb84:	4618      	mov	r0, r3
 801bb86:	f7ee f998 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bb8a:	2501      	movs	r5, #1
 801bb8c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bb90:	4619      	mov	r1, r3
 801bb92:	4620      	mov	r0, r4
 801bb94:	f7ee fd55 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bb98:	4603      	mov	r3, r0
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d001      	beq.n	801bba2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801bb9e:	2401      	movs	r4, #1
 801bba0:	e000      	b.n	801bba4 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801bba2:	2400      	movs	r4, #0
 801bba4:	2d00      	cmp	r5, #0
 801bba6:	d004      	beq.n	801bbb2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801bba8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bbac:	4618      	mov	r0, r3
 801bbae:	f7ee fd3c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bbb2:	2e00      	cmp	r6, #0
 801bbb4:	d004      	beq.n	801bbc0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801bbb6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f7ee fd35 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bbc0:	2c00      	cmp	r4, #0
 801bbc2:	d010      	beq.n	801bbe6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801bbc4:	1d3b      	adds	r3, r7, #4
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	699b      	ldr	r3, [r3, #24]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	db09      	blt.n	801bbe2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801bbce:	1d3b      	adds	r3, r7, #4
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	699b      	ldr	r3, [r3, #24]
 801bbd4:	463a      	mov	r2, r7
 801bbd6:	6812      	ldr	r2, [r2, #0]
 801bbd8:	6992      	ldr	r2, [r2, #24]
 801bbda:	4293      	cmp	r3, r2
 801bbdc:	d101      	bne.n	801bbe2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801bbde:	2401      	movs	r4, #1
 801bbe0:	e256      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bbe2:	2400      	movs	r4, #0
 801bbe4:	e254      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801bbe6:	2500      	movs	r5, #0
 801bbe8:	1d3b      	adds	r3, r7, #4
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	f103 040c 	add.w	r4, r3, #12
 801bbf0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bbf4:	4988      	ldr	r1, [pc, #544]	; (801be18 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801bbf6:	4618      	mov	r0, r3
 801bbf8:	f7ee f95f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bbfc:	2601      	movs	r6, #1
 801bbfe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bc02:	4619      	mov	r1, r3
 801bc04:	4620      	mov	r0, r4
 801bc06:	f7ee fd1c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d015      	beq.n	801bc3c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801bc10:	463b      	mov	r3, r7
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	f103 040c 	add.w	r4, r3, #12
 801bc18:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bc1c:	497d      	ldr	r1, [pc, #500]	; (801be14 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f7ee f94b 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bc24:	2501      	movs	r5, #1
 801bc26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bc2a:	4619      	mov	r1, r3
 801bc2c:	4620      	mov	r0, r4
 801bc2e:	f7ee fd08 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bc32:	4603      	mov	r3, r0
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d001      	beq.n	801bc3c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801bc38:	2401      	movs	r4, #1
 801bc3a:	e000      	b.n	801bc3e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801bc3c:	2400      	movs	r4, #0
 801bc3e:	2d00      	cmp	r5, #0
 801bc40:	d004      	beq.n	801bc4c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801bc42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bc46:	4618      	mov	r0, r3
 801bc48:	f7ee fcef 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bc4c:	2e00      	cmp	r6, #0
 801bc4e:	d004      	beq.n	801bc5a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801bc50:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bc54:	4618      	mov	r0, r3
 801bc56:	f7ee fce8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bc5a:	2c00      	cmp	r4, #0
 801bc5c:	d010      	beq.n	801bc80 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801bc5e:	463b      	mov	r3, r7
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	699b      	ldr	r3, [r3, #24]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	db09      	blt.n	801bc7c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801bc68:	1d3b      	adds	r3, r7, #4
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	699b      	ldr	r3, [r3, #24]
 801bc6e:	463a      	mov	r2, r7
 801bc70:	6812      	ldr	r2, [r2, #0]
 801bc72:	6992      	ldr	r2, [r2, #24]
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d101      	bne.n	801bc7c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801bc78:	2401      	movs	r4, #1
 801bc7a:	e209      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bc7c:	2400      	movs	r4, #0
 801bc7e:	e207      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801bc80:	1d3b      	adds	r3, r7, #4
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	f103 020c 	add.w	r2, r3, #12
 801bc88:	463b      	mov	r3, r7
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	330c      	adds	r3, #12
 801bc8e:	4619      	mov	r1, r3
 801bc90:	4610      	mov	r0, r2
 801bc92:	f7ee fd1b 	bl	800a6cc <_ZneRK12SimpleStringS1_>
 801bc96:	4603      	mov	r3, r0
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d001      	beq.n	801bca0 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801bc9c:	2400      	movs	r4, #0
 801bc9e:	e1f7      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801bca0:	1d3b      	adds	r3, r7, #4
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	f103 040c 	add.w	r4, r3, #12
 801bca8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bcac:	495b      	ldr	r1, [pc, #364]	; (801be1c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7ee f903 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bcb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bcb8:	4619      	mov	r1, r3
 801bcba:	4620      	mov	r0, r4
 801bcbc:	f7ee fcc1 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	461c      	mov	r4, r3
 801bcc4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bcc8:	4618      	mov	r0, r3
 801bcca:	f7ee fcae 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bcce:	2c00      	cmp	r4, #0
 801bcd0:	d00b      	beq.n	801bcea <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801bcd2:	1d3b      	adds	r3, r7, #4
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	7e1a      	ldrb	r2, [r3, #24]
 801bcd8:	463b      	mov	r3, r7
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	7e1b      	ldrb	r3, [r3, #24]
 801bcde:	429a      	cmp	r2, r3
 801bce0:	bf0c      	ite	eq
 801bce2:	2301      	moveq	r3, #1
 801bce4:	2300      	movne	r3, #0
 801bce6:	b2dc      	uxtb	r4, r3
 801bce8:	e1d2      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801bcea:	1d3b      	adds	r3, r7, #4
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	f103 040c 	add.w	r4, r3, #12
 801bcf2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bcf6:	494a      	ldr	r1, [pc, #296]	; (801be20 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7ee f8de 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bcfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bd02:	4619      	mov	r1, r3
 801bd04:	4620      	mov	r0, r4
 801bd06:	f7ee fc9c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bd0a:	4603      	mov	r3, r0
 801bd0c:	461c      	mov	r4, r3
 801bd0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7ee fc89 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bd18:	2c00      	cmp	r4, #0
 801bd1a:	d00b      	beq.n	801bd34 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801bd1c:	1d3b      	adds	r3, r7, #4
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	699a      	ldr	r2, [r3, #24]
 801bd22:	463b      	mov	r3, r7
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	699b      	ldr	r3, [r3, #24]
 801bd28:	429a      	cmp	r2, r3
 801bd2a:	bf0c      	ite	eq
 801bd2c:	2301      	moveq	r3, #1
 801bd2e:	2300      	movne	r3, #0
 801bd30:	b2dc      	uxtb	r4, r3
 801bd32:	e1ad      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801bd34:	1d3b      	adds	r3, r7, #4
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	f103 040c 	add.w	r4, r3, #12
 801bd3c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bd40:	4938      	ldr	r1, [pc, #224]	; (801be24 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801bd42:	4618      	mov	r0, r3
 801bd44:	f7ee f8b9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bd48:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bd4c:	4619      	mov	r1, r3
 801bd4e:	4620      	mov	r0, r4
 801bd50:	f7ee fc77 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bd54:	4603      	mov	r3, r0
 801bd56:	461c      	mov	r4, r3
 801bd58:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bd5c:	4618      	mov	r0, r3
 801bd5e:	f7ee fc64 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bd62:	2c00      	cmp	r4, #0
 801bd64:	d00b      	beq.n	801bd7e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801bd66:	1d3b      	adds	r3, r7, #4
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	699a      	ldr	r2, [r3, #24]
 801bd6c:	463b      	mov	r3, r7
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	699b      	ldr	r3, [r3, #24]
 801bd72:	429a      	cmp	r2, r3
 801bd74:	bf0c      	ite	eq
 801bd76:	2301      	moveq	r3, #1
 801bd78:	2300      	movne	r3, #0
 801bd7a:	b2dc      	uxtb	r4, r3
 801bd7c:	e188      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801bd7e:	1d3b      	adds	r3, r7, #4
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	f103 040c 	add.w	r4, r3, #12
 801bd86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bd8a:	4922      	ldr	r1, [pc, #136]	; (801be14 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7ee f894 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bd92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bd96:	4619      	mov	r1, r3
 801bd98:	4620      	mov	r0, r4
 801bd9a:	f7ee fc52 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	461c      	mov	r4, r3
 801bda2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bda6:	4618      	mov	r0, r3
 801bda8:	f7ee fc3f 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bdac:	2c00      	cmp	r4, #0
 801bdae:	d00b      	beq.n	801bdc8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801bdb0:	1d3b      	adds	r3, r7, #4
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	699a      	ldr	r2, [r3, #24]
 801bdb6:	463b      	mov	r3, r7
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	699b      	ldr	r3, [r3, #24]
 801bdbc:	429a      	cmp	r2, r3
 801bdbe:	bf0c      	ite	eq
 801bdc0:	2301      	moveq	r3, #1
 801bdc2:	2300      	movne	r3, #0
 801bdc4:	b2dc      	uxtb	r4, r3
 801bdc6:	e163      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801bdc8:	1d3b      	adds	r3, r7, #4
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	f103 040c 	add.w	r4, r3, #12
 801bdd0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801bdd4:	4910      	ldr	r1, [pc, #64]	; (801be18 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f7ee f86f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bddc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801bde0:	4619      	mov	r1, r3
 801bde2:	4620      	mov	r0, r4
 801bde4:	f7ee fc2d 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bde8:	4603      	mov	r3, r0
 801bdea:	461c      	mov	r4, r3
 801bdec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801bdf0:	4618      	mov	r0, r3
 801bdf2:	f7ee fc1a 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bdf6:	2c00      	cmp	r4, #0
 801bdf8:	d016      	beq.n	801be28 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801bdfa:	1d3b      	adds	r3, r7, #4
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	699a      	ldr	r2, [r3, #24]
 801be00:	463b      	mov	r3, r7
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	699b      	ldr	r3, [r3, #24]
 801be06:	429a      	cmp	r2, r3
 801be08:	bf0c      	ite	eq
 801be0a:	2301      	moveq	r3, #1
 801be0c:	2300      	movne	r3, #0
 801be0e:	b2dc      	uxtb	r4, r3
 801be10:	e13e      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801be12:	bf00      	nop
 801be14:	080232e0 	.word	0x080232e0
 801be18:	080232ec 	.word	0x080232ec
 801be1c:	080232c8 	.word	0x080232c8
 801be20:	080232c4 	.word	0x080232c4
 801be24:	080232d0 	.word	0x080232d0
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801be28:	1d3b      	adds	r3, r7, #4
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	f103 040c 	add.w	r4, r3, #12
 801be30:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801be34:	4999      	ldr	r1, [pc, #612]	; (801c09c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801be36:	4618      	mov	r0, r3
 801be38:	f7ee f83f 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801be3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801be40:	4619      	mov	r1, r3
 801be42:	4620      	mov	r0, r4
 801be44:	f7ee fbfd 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801be48:	4603      	mov	r3, r0
 801be4a:	461c      	mov	r4, r3
 801be4c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801be50:	4618      	mov	r0, r3
 801be52:	f7ee fbea 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801be56:	2c00      	cmp	r4, #0
 801be58:	d026      	beq.n	801bea8 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801be5a:	1d3b      	adds	r3, r7, #4
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	699a      	ldr	r2, [r3, #24]
 801be60:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801be64:	4611      	mov	r1, r2
 801be66:	4618      	mov	r0, r3
 801be68:	f7ee f827 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801be6c:	463b      	mov	r3, r7
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	699a      	ldr	r2, [r3, #24]
 801be72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801be76:	4611      	mov	r1, r2
 801be78:	4618      	mov	r0, r3
 801be7a:	f7ee f81e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801be7e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801be82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801be86:	4611      	mov	r1, r2
 801be88:	4618      	mov	r0, r3
 801be8a:	f7ee fbda 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801be8e:	4603      	mov	r3, r0
 801be90:	461c      	mov	r4, r3
 801be92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801be96:	4618      	mov	r0, r3
 801be98:	f7ee fbc7 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801be9c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801bea0:	4618      	mov	r0, r3
 801bea2:	f7ee fbc2 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bea6:	e0f3      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801bea8:	1d3b      	adds	r3, r7, #4
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	f103 040c 	add.w	r4, r3, #12
 801beb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801beb4:	497a      	ldr	r1, [pc, #488]	; (801c0a0 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7ed ffff 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bec0:	4619      	mov	r1, r3
 801bec2:	4620      	mov	r0, r4
 801bec4:	f7ee fbbd 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bec8:	4603      	mov	r3, r0
 801beca:	461c      	mov	r4, r3
 801becc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801bed0:	4618      	mov	r0, r3
 801bed2:	f7ee fbaa 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bed6:	2c00      	cmp	r4, #0
 801bed8:	d00b      	beq.n	801bef2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801beda:	1d3b      	adds	r3, r7, #4
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	699a      	ldr	r2, [r3, #24]
 801bee0:	463b      	mov	r3, r7
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	699b      	ldr	r3, [r3, #24]
 801bee6:	429a      	cmp	r2, r3
 801bee8:	bf0c      	ite	eq
 801beea:	2301      	moveq	r3, #1
 801beec:	2300      	movne	r3, #0
 801beee:	b2dc      	uxtb	r4, r3
 801bef0:	e0ce      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801bef2:	1d3b      	adds	r3, r7, #4
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	f103 040c 	add.w	r4, r3, #12
 801befa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801befe:	4969      	ldr	r1, [pc, #420]	; (801c0a4 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801bf00:	4618      	mov	r0, r3
 801bf02:	f7ed ffda 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bf06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bf0a:	4619      	mov	r1, r3
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f7ee fb98 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bf12:	4603      	mov	r3, r0
 801bf14:	461c      	mov	r4, r3
 801bf16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	f7ee fb85 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bf20:	2c00      	cmp	r4, #0
 801bf22:	d00b      	beq.n	801bf3c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801bf24:	1d3b      	adds	r3, r7, #4
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	699a      	ldr	r2, [r3, #24]
 801bf2a:	463b      	mov	r3, r7
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	699b      	ldr	r3, [r3, #24]
 801bf30:	429a      	cmp	r2, r3
 801bf32:	bf0c      	ite	eq
 801bf34:	2301      	moveq	r3, #1
 801bf36:	2300      	movne	r3, #0
 801bf38:	b2dc      	uxtb	r4, r3
 801bf3a:	e0a9      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801bf3c:	1d3b      	adds	r3, r7, #4
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	f103 040c 	add.w	r4, r3, #12
 801bf44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801bf48:	4957      	ldr	r1, [pc, #348]	; (801c0a8 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	f7ed ffb5 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bf50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801bf54:	4619      	mov	r1, r3
 801bf56:	4620      	mov	r0, r4
 801bf58:	f7ee fb73 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	461c      	mov	r4, r3
 801bf60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801bf64:	4618      	mov	r0, r3
 801bf66:	f7ee fb60 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bf6a:	2c00      	cmp	r4, #0
 801bf6c:	d00b      	beq.n	801bf86 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801bf6e:	1d3b      	adds	r3, r7, #4
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	699a      	ldr	r2, [r3, #24]
 801bf74:	463b      	mov	r3, r7
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	699b      	ldr	r3, [r3, #24]
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	bf0c      	ite	eq
 801bf7e:	2301      	moveq	r3, #1
 801bf80:	2300      	movne	r3, #0
 801bf82:	b2dc      	uxtb	r4, r3
 801bf84:	e084      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801bf86:	1d3b      	adds	r3, r7, #4
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	f103 040c 	add.w	r4, r3, #12
 801bf8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bf92:	4946      	ldr	r1, [pc, #280]	; (801c0ac <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7ed ff90 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801bf9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bf9e:	4619      	mov	r1, r3
 801bfa0:	4620      	mov	r0, r4
 801bfa2:	f7ee fb4e 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	461c      	mov	r4, r3
 801bfaa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801bfae:	4618      	mov	r0, r3
 801bfb0:	f7ee fb3b 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801bfb4:	2c00      	cmp	r4, #0
 801bfb6:	d01c      	beq.n	801bff2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801bfb8:	1d3b      	adds	r3, r7, #4
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	ed93 7b06 	vldr	d7, [r3, #24]
 801bfc0:	463b      	mov	r3, r7
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	ed93 6b06 	vldr	d6, [r3, #24]
 801bfc8:	1d3b      	adds	r3, r7, #4
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	ed93 5b08 	vldr	d5, [r3, #32]
 801bfd0:	eeb0 2a45 	vmov.f32	s4, s10
 801bfd4:	eef0 2a65 	vmov.f32	s5, s11
 801bfd8:	eeb0 1a46 	vmov.f32	s2, s12
 801bfdc:	eef0 1a66 	vmov.f32	s3, s13
 801bfe0:	eeb0 0a47 	vmov.f32	s0, s14
 801bfe4:	eef0 0a67 	vmov.f32	s1, s15
 801bfe8:	f7f3 fe1a 	bl	800fc20 <_Z13doubles_equalddd>
 801bfec:	4603      	mov	r3, r0
 801bfee:	461c      	mov	r4, r3
 801bff0:	e04e      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801bff2:	1d3b      	adds	r3, r7, #4
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	f103 040c 	add.w	r4, r3, #12
 801bffa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801bffe:	492c      	ldr	r1, [pc, #176]	; (801c0b0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801c000:	4618      	mov	r0, r3
 801c002:	f7ed ff5a 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c00a:	4619      	mov	r1, r3
 801c00c:	4620      	mov	r0, r4
 801c00e:	f7ee fb18 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c012:	4603      	mov	r3, r0
 801c014:	461c      	mov	r4, r3
 801c016:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c01a:	4618      	mov	r0, r3
 801c01c:	f7ee fb05 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c020:	2c00      	cmp	r4, #0
 801c022:	d01c      	beq.n	801c05e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801c024:	1d3b      	adds	r3, r7, #4
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c02a:	463b      	mov	r3, r7
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c030:	429a      	cmp	r2, r3
 801c032:	d001      	beq.n	801c038 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801c034:	2400      	movs	r4, #0
 801c036:	e02b      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801c038:	1d3b      	adds	r3, r7, #4
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	6998      	ldr	r0, [r3, #24]
 801c03e:	463b      	mov	r3, r7
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	6999      	ldr	r1, [r3, #24]
 801c044:	1d3b      	adds	r3, r7, #4
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c04a:	461a      	mov	r2, r3
 801c04c:	f7ed fe54 	bl	8009cf8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801c050:	4603      	mov	r3, r0
 801c052:	2b00      	cmp	r3, #0
 801c054:	bf0c      	ite	eq
 801c056:	2301      	moveq	r3, #1
 801c058:	2300      	movne	r3, #0
 801c05a:	b2dc      	uxtb	r4, r3
 801c05c:	e018      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801c05e:	1d3b      	adds	r3, r7, #4
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c064:	2b00      	cmp	r3, #0
 801c066:	d012      	beq.n	801c08e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801c068:	1d3b      	adds	r3, r7, #4
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c06e:	1d3b      	adds	r3, r7, #4
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	3308      	adds	r3, #8
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	1d3a      	adds	r2, r7, #4
 801c07c:	6812      	ldr	r2, [r2, #0]
 801c07e:	6991      	ldr	r1, [r2, #24]
 801c080:	463a      	mov	r2, r7
 801c082:	6812      	ldr	r2, [r2, #0]
 801c084:	6992      	ldr	r2, [r2, #24]
 801c086:	4798      	blx	r3
 801c088:	4603      	mov	r3, r0
 801c08a:	461c      	mov	r4, r3
 801c08c:	e000      	b.n	801c090 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801c08e:	2400      	movs	r4, #0
 801c090:	4623      	mov	r3, r4
}
 801c092:	4618      	mov	r0, r3
 801c094:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801c098:	46bd      	mov	sp, r7
 801c09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c09c:	08023390 	.word	0x08023390
 801c0a0:	08023370 	.word	0x08023370
 801c0a4:	08023378 	.word	0x08023378
 801c0a8:	08023384 	.word	0x08023384
 801c0ac:	08023368 	.word	0x08023368
 801c0b0:	0802339c 	.word	0x0802339c

0801c0b4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0b6:	b087      	sub	sp, #28
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	f103 020c 	add.w	r2, r3, #12
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	330c      	adds	r3, #12
 801c0c8:	4619      	mov	r1, r3
 801c0ca:	4610      	mov	r0, r2
 801c0cc:	f7ee fab9 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d001      	beq.n	801c0da <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	e03c      	b.n	801c154 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801c0da:	2500      	movs	r5, #0
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	f103 040c 	add.w	r4, r3, #12
 801c0e2:	f107 0308 	add.w	r3, r7, #8
 801c0e6:	491d      	ldr	r1, [pc, #116]	; (801c15c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f7ed fee6 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c0ee:	2601      	movs	r6, #1
 801c0f0:	f107 0308 	add.w	r3, r7, #8
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	4620      	mov	r0, r4
 801c0f8:	f7ee faa3 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d014      	beq.n	801c12c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	f103 040c 	add.w	r4, r3, #12
 801c108:	f107 0310 	add.w	r3, r7, #16
 801c10c:	4914      	ldr	r1, [pc, #80]	; (801c160 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801c10e:	4618      	mov	r0, r3
 801c110:	f7ed fed3 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c114:	2501      	movs	r5, #1
 801c116:	f107 0310 	add.w	r3, r7, #16
 801c11a:	4619      	mov	r1, r3
 801c11c:	4620      	mov	r0, r4
 801c11e:	f7ee fa90 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c122:	4603      	mov	r3, r0
 801c124:	2b00      	cmp	r3, #0
 801c126:	d001      	beq.n	801c12c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801c128:	2401      	movs	r4, #1
 801c12a:	e000      	b.n	801c12e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801c12c:	2400      	movs	r4, #0
 801c12e:	2d00      	cmp	r5, #0
 801c130:	d004      	beq.n	801c13c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801c132:	f107 0310 	add.w	r3, r7, #16
 801c136:	4618      	mov	r0, r3
 801c138:	f7ee fa77 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c13c:	2e00      	cmp	r6, #0
 801c13e:	d004      	beq.n	801c14a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801c140:	f107 0308 	add.w	r3, r7, #8
 801c144:	4618      	mov	r0, r3
 801c146:	f7ee fa70 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c14a:	2c00      	cmp	r4, #0
 801c14c:	d001      	beq.n	801c152 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801c14e:	2301      	movs	r3, #1
 801c150:	e000      	b.n	801c154 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801c152:	2300      	movs	r3, #0
}
 801c154:	4618      	mov	r0, r3
 801c156:	371c      	adds	r7, #28
 801c158:	46bd      	mov	sp, r7
 801c15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c15c:	08023378 	.word	0x08023378
 801c160:	08023370 	.word	0x08023370

0801c164 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801c164:	b590      	push	{r4, r7, lr}
 801c166:	b0b9      	sub	sp, #228	; 0xe4
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801c16e:	683b      	ldr	r3, [r7, #0]
 801c170:	f103 040c 	add.w	r4, r3, #12
 801c174:	f107 0308 	add.w	r3, r7, #8
 801c178:	49d4      	ldr	r1, [pc, #848]	; (801c4cc <_ZNK14MockNamedValue8toStringEv+0x368>)
 801c17a:	4618      	mov	r0, r3
 801c17c:	f7ed fe9d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c180:	f107 0308 	add.w	r3, r7, #8
 801c184:	4619      	mov	r1, r3
 801c186:	4620      	mov	r0, r4
 801c188:	f7ee fa5b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c18c:	4603      	mov	r3, r0
 801c18e:	461c      	mov	r4, r3
 801c190:	f107 0308 	add.w	r3, r7, #8
 801c194:	4618      	mov	r0, r3
 801c196:	f7ee fa48 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c19a:	2c00      	cmp	r4, #0
 801c19c:	d007      	beq.n	801c1ae <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801c19e:	683b      	ldr	r3, [r7, #0]
 801c1a0:	7e1a      	ldrb	r2, [r3, #24]
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	4611      	mov	r1, r2
 801c1a6:	4618      	mov	r0, r3
 801c1a8:	f7ee fcb0 	bl	800ab0c <_Z10StringFromb>
 801c1ac:	e23f      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801c1ae:	683b      	ldr	r3, [r7, #0]
 801c1b0:	f103 040c 	add.w	r4, r3, #12
 801c1b4:	f107 0310 	add.w	r3, r7, #16
 801c1b8:	49c5      	ldr	r1, [pc, #788]	; (801c4d0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	f7ed fe7d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c1c0:	f107 0310 	add.w	r3, r7, #16
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	4620      	mov	r0, r4
 801c1c8:	f7ee fa3b 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c1cc:	4603      	mov	r3, r0
 801c1ce:	461c      	mov	r4, r3
 801c1d0:	f107 0310 	add.w	r3, r7, #16
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	f7ee fa28 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c1da:	2c00      	cmp	r4, #0
 801c1dc:	d03b      	beq.n	801c256 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801c1de:	683b      	ldr	r3, [r7, #0]
 801c1e0:	699a      	ldr	r2, [r3, #24]
 801c1e2:	f107 0320 	add.w	r3, r7, #32
 801c1e6:	4611      	mov	r1, r2
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	f7ee fce5 	bl	800abb8 <_Z10StringFromi>
 801c1ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c1f2:	49b8      	ldr	r1, [pc, #736]	; (801c4d4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	f7ed fe60 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c1fa:	f107 0318 	add.w	r3, r7, #24
 801c1fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c202:	f107 0120 	add.w	r1, r7, #32
 801c206:	4618      	mov	r0, r3
 801c208:	f7ee fa71 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c20c:	683b      	ldr	r3, [r7, #0]
 801c20e:	699a      	ldr	r2, [r3, #24]
 801c210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c214:	4611      	mov	r1, r2
 801c216:	4618      	mov	r0, r3
 801c218:	f7ee fdbe 	bl	800ad98 <_Z30BracketsFormattedHexStringFromi>
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c222:	f107 0118 	add.w	r1, r7, #24
 801c226:	4618      	mov	r0, r3
 801c228:	f7ee fa61 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c22c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c230:	4618      	mov	r0, r3
 801c232:	f7ee f9fa 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c236:	f107 0318 	add.w	r3, r7, #24
 801c23a:	4618      	mov	r0, r3
 801c23c:	f7ee f9f5 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c244:	4618      	mov	r0, r3
 801c246:	f7ee f9f0 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c24a:	f107 0320 	add.w	r3, r7, #32
 801c24e:	4618      	mov	r0, r3
 801c250:	f7ee f9eb 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c254:	e1eb      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	f103 040c 	add.w	r4, r3, #12
 801c25c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c260:	499d      	ldr	r1, [pc, #628]	; (801c4d8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801c262:	4618      	mov	r0, r3
 801c264:	f7ed fe29 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c26c:	4619      	mov	r1, r3
 801c26e:	4620      	mov	r0, r4
 801c270:	f7ee f9e7 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c274:	4603      	mov	r3, r0
 801c276:	461c      	mov	r4, r3
 801c278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c27c:	4618      	mov	r0, r3
 801c27e:	f7ee f9d4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c282:	2c00      	cmp	r4, #0
 801c284:	d03b      	beq.n	801c2fe <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801c286:	683b      	ldr	r3, [r7, #0]
 801c288:	699a      	ldr	r2, [r3, #24]
 801c28a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c28e:	4611      	mov	r1, r2
 801c290:	4618      	mov	r0, r3
 801c292:	f7ee fef9 	bl	800b088 <_Z10StringFromj>
 801c296:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c29a:	498e      	ldr	r1, [pc, #568]	; (801c4d4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c29c:	4618      	mov	r0, r3
 801c29e:	f7ed fe0c 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c2a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c2a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c2aa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f7ee fa1d 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	699a      	ldr	r2, [r3, #24]
 801c2b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c2bc:	4611      	mov	r1, r2
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f7ee fd86 	bl	800add0 <_Z30BracketsFormattedHexStringFromj>
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c2ca:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f7ee fa0d 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c2d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c2d8:	4618      	mov	r0, r3
 801c2da:	f7ee f9a6 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c2de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	f7ee f9a1 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c2e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	f7ee f99c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c2f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	f7ee f997 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c2fc:	e197      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	f103 040c 	add.w	r4, r3, #12
 801c304:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c308:	4974      	ldr	r1, [pc, #464]	; (801c4dc <_ZNK14MockNamedValue8toStringEv+0x378>)
 801c30a:	4618      	mov	r0, r3
 801c30c:	f7ed fdd5 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c314:	4619      	mov	r1, r3
 801c316:	4620      	mov	r0, r4
 801c318:	f7ee f993 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c31c:	4603      	mov	r3, r0
 801c31e:	461c      	mov	r4, r3
 801c320:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c324:	4618      	mov	r0, r3
 801c326:	f7ee f980 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c32a:	2c00      	cmp	r4, #0
 801c32c:	d03b      	beq.n	801c3a6 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801c32e:	683b      	ldr	r3, [r7, #0]
 801c330:	699a      	ldr	r2, [r3, #24]
 801c332:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c336:	4611      	mov	r1, r2
 801c338:	4618      	mov	r0, r3
 801c33a:	f7ee fc4f 	bl	800abdc <_Z10StringFroml>
 801c33e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c342:	4964      	ldr	r1, [pc, #400]	; (801c4d4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c344:	4618      	mov	r0, r3
 801c346:	f7ed fdb8 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c34a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c34e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801c352:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801c356:	4618      	mov	r0, r3
 801c358:	f7ee f9c9 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	699a      	ldr	r2, [r3, #24]
 801c360:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c364:	4611      	mov	r1, r2
 801c366:	4618      	mov	r0, r3
 801c368:	f7ee fd4e 	bl	800ae08 <_Z30BracketsFormattedHexStringFroml>
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801c372:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c376:	4618      	mov	r0, r3
 801c378:	f7ee f9b9 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c37c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c380:	4618      	mov	r0, r3
 801c382:	f7ee f952 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c386:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c38a:	4618      	mov	r0, r3
 801c38c:	f7ee f94d 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c390:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c394:	4618      	mov	r0, r3
 801c396:	f7ee f948 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c39a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c39e:	4618      	mov	r0, r3
 801c3a0:	f7ee f943 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c3a4:	e143      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801c3a6:	683b      	ldr	r3, [r7, #0]
 801c3a8:	f103 040c 	add.w	r4, r3, #12
 801c3ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c3b0:	494b      	ldr	r1, [pc, #300]	; (801c4e0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f7ed fd81 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c3b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c3bc:	4619      	mov	r1, r3
 801c3be:	4620      	mov	r0, r4
 801c3c0:	f7ee f93f 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	461c      	mov	r4, r3
 801c3c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f7ee f92c 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c3d2:	2c00      	cmp	r4, #0
 801c3d4:	d03b      	beq.n	801c44e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	699a      	ldr	r2, [r3, #24]
 801c3da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c3de:	4611      	mov	r1, r2
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	f7ee fe63 	bl	800b0ac <_Z10StringFromm>
 801c3e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c3ea:	493a      	ldr	r1, [pc, #232]	; (801c4d4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f7ed fd64 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c3f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c3f6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801c3fa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7ee f975 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	699a      	ldr	r2, [r3, #24]
 801c408:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c40c:	4611      	mov	r1, r2
 801c40e:	4618      	mov	r0, r3
 801c410:	f7ee fd16 	bl	800ae40 <_Z30BracketsFormattedHexStringFromm>
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801c41a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801c41e:	4618      	mov	r0, r3
 801c420:	f7ee f965 	bl	800a6ee <_ZNK12SimpleStringplERKS_>
 801c424:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c428:	4618      	mov	r0, r3
 801c42a:	f7ee f8fe 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c42e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c432:	4618      	mov	r0, r3
 801c434:	f7ee f8f9 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c438:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c43c:	4618      	mov	r0, r3
 801c43e:	f7ee f8f4 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c442:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c446:	4618      	mov	r0, r3
 801c448:	f7ee f8ef 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c44c:	e0ef      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801c44e:	683b      	ldr	r3, [r7, #0]
 801c450:	f103 040c 	add.w	r4, r3, #12
 801c454:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c458:	4922      	ldr	r1, [pc, #136]	; (801c4e4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801c45a:	4618      	mov	r0, r3
 801c45c:	f7ed fd2d 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c460:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c464:	4619      	mov	r1, r3
 801c466:	4620      	mov	r0, r4
 801c468:	f7ee f8eb 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c46c:	4603      	mov	r3, r0
 801c46e:	461c      	mov	r4, r3
 801c470:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c474:	4618      	mov	r0, r3
 801c476:	f7ee f8d8 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c47a:	2c00      	cmp	r4, #0
 801c47c:	d006      	beq.n	801c48c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801c47e:	683b      	ldr	r3, [r7, #0]
 801c480:	699b      	ldr	r3, [r3, #24]
 801c482:	4619      	mov	r1, r3
 801c484:	6878      	ldr	r0, [r7, #4]
 801c486:	f7ed fd18 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c48a:	e0d0      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801c48c:	683b      	ldr	r3, [r7, #0]
 801c48e:	f103 040c 	add.w	r4, r3, #12
 801c492:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c496:	4914      	ldr	r1, [pc, #80]	; (801c4e8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801c498:	4618      	mov	r0, r3
 801c49a:	f7ed fd0e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c49e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c4a2:	4619      	mov	r1, r3
 801c4a4:	4620      	mov	r0, r4
 801c4a6:	f7ee f8cc 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	461c      	mov	r4, r3
 801c4ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f7ee f8b9 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c4b8:	2c00      	cmp	r4, #0
 801c4ba:	d017      	beq.n	801c4ec <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801c4bc:	683b      	ldr	r3, [r7, #0]
 801c4be:	699a      	ldr	r2, [r3, #24]
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	4611      	mov	r1, r2
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	f7ee fb9b 	bl	800ac00 <_Z10StringFromPKv>
 801c4ca:	e0b0      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801c4cc:	080232c8 	.word	0x080232c8
 801c4d0:	080232c4 	.word	0x080232c4
 801c4d4:	080233b4 	.word	0x080233b4
 801c4d8:	080232d0 	.word	0x080232d0
 801c4dc:	080232e0 	.word	0x080232e0
 801c4e0:	080232ec 	.word	0x080232ec
 801c4e4:	08023390 	.word	0x08023390
 801c4e8:	08023370 	.word	0x08023370
    else if (type_ == "void (*)()")
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	f103 040c 	add.w	r4, r3, #12
 801c4f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c4f6:	4950      	ldr	r1, [pc, #320]	; (801c638 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	f7ed fcde 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c4fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c502:	4619      	mov	r1, r3
 801c504:	4620      	mov	r0, r4
 801c506:	f7ee f89c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c50a:	4603      	mov	r3, r0
 801c50c:	461c      	mov	r4, r3
 801c50e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c512:	4618      	mov	r0, r3
 801c514:	f7ee f889 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c518:	2c00      	cmp	r4, #0
 801c51a:	d007      	beq.n	801c52c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801c51c:	683b      	ldr	r3, [r7, #0]
 801c51e:	699a      	ldr	r2, [r3, #24]
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	4611      	mov	r1, r2
 801c524:	4618      	mov	r0, r3
 801c526:	f7ee fb95 	bl	800ac54 <_Z10StringFromPFvvE>
 801c52a:	e080      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801c52c:	683b      	ldr	r3, [r7, #0]
 801c52e:	f103 040c 	add.w	r4, r3, #12
 801c532:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c536:	4941      	ldr	r1, [pc, #260]	; (801c63c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801c538:	4618      	mov	r0, r3
 801c53a:	f7ed fcbe 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c53e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c542:	4619      	mov	r1, r3
 801c544:	4620      	mov	r0, r4
 801c546:	f7ee f87c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c54a:	4603      	mov	r3, r0
 801c54c:	461c      	mov	r4, r3
 801c54e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c552:	4618      	mov	r0, r3
 801c554:	f7ee f869 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c558:	2c00      	cmp	r4, #0
 801c55a:	d007      	beq.n	801c56c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801c55c:	683b      	ldr	r3, [r7, #0]
 801c55e:	699a      	ldr	r2, [r3, #24]
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	4611      	mov	r1, r2
 801c564:	4618      	mov	r0, r3
 801c566:	f7ee fb4b 	bl	800ac00 <_Z10StringFromPKv>
 801c56a:	e060      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801c56c:	683b      	ldr	r3, [r7, #0]
 801c56e:	f103 040c 	add.w	r4, r3, #12
 801c572:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c576:	4932      	ldr	r1, [pc, #200]	; (801c640 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801c578:	4618      	mov	r0, r3
 801c57a:	f7ed fc9e 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c57e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c582:	4619      	mov	r1, r3
 801c584:	4620      	mov	r0, r4
 801c586:	f7ee f85c 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c58a:	4603      	mov	r3, r0
 801c58c:	461c      	mov	r4, r3
 801c58e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c592:	4618      	mov	r0, r3
 801c594:	f7ee f849 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c598:	2c00      	cmp	r4, #0
 801c59a:	d00c      	beq.n	801c5b6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801c59c:	683b      	ldr	r3, [r7, #0]
 801c59e:	ed93 7b06 	vldr	d7, [r3, #24]
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	2106      	movs	r1, #6
 801c5a6:	eeb0 0a47 	vmov.f32	s0, s14
 801c5aa:	eef0 0a67 	vmov.f32	s1, s15
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	f7ee fd00 	bl	800afb4 <_Z10StringFromdi>
 801c5b4:	e03b      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801c5b6:	683b      	ldr	r3, [r7, #0]
 801c5b8:	f103 040c 	add.w	r4, r3, #12
 801c5bc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c5c0:	4920      	ldr	r1, [pc, #128]	; (801c644 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7ed fc79 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801c5c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c5cc:	4619      	mov	r1, r3
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	f7ee f837 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c5d4:	4603      	mov	r3, r0
 801c5d6:	461c      	mov	r4, r3
 801c5d8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c5dc:	4618      	mov	r0, r3
 801c5de:	f7ee f824 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c5e2:	2c00      	cmp	r4, #0
 801c5e4:	d008      	beq.n	801c5f8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	6999      	ldr	r1, [r3, #24]
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7ee fe73 	bl	800b2dc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801c5f6:	e01a      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d00b      	beq.n	801c618 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801c600:	683b      	ldr	r3, [r7, #0]
 801c602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c604:	683b      	ldr	r3, [r7, #0]
 801c606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	330c      	adds	r3, #12
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	683a      	ldr	r2, [r7, #0]
 801c610:	6992      	ldr	r2, [r2, #24]
 801c612:	6878      	ldr	r0, [r7, #4]
 801c614:	4798      	blx	r3
 801c616:	e00a      	b.n	801c62e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801c618:	683b      	ldr	r3, [r7, #0]
 801c61a:	330c      	adds	r3, #12
 801c61c:	4618      	mov	r0, r3
 801c61e:	f7ed ffd7 	bl	800a5d0 <_ZNK12SimpleString12asCharStringEv>
 801c622:	4602      	mov	r2, r0
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	4908      	ldr	r1, [pc, #32]	; (801c648 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801c628:	4618      	mov	r0, r3
 801c62a:	f7ee fd05 	bl	800b038 <_Z16StringFromFormatPKcz>

}
 801c62e:	6878      	ldr	r0, [r7, #4]
 801c630:	37e4      	adds	r7, #228	; 0xe4
 801c632:	46bd      	mov	sp, r7
 801c634:	bd90      	pop	{r4, r7, pc}
 801c636:	bf00      	nop
 801c638:	08023384 	.word	0x08023384
 801c63c:	08023378 	.word	0x08023378
 801c640:	08023368 	.word	0x08023368
 801c644:	0802339c 	.word	0x0802339c
 801c648:	080233b8 	.word	0x080233b8

0801c64c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801c64c:	b480      	push	{r7}
 801c64e:	b083      	sub	sp, #12
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
 801c654:	6039      	str	r1, [r7, #0]
    next_ = node;
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	683a      	ldr	r2, [r7, #0]
 801c65a:	605a      	str	r2, [r3, #4]
}
 801c65c:	bf00      	nop
 801c65e:	370c      	adds	r7, #12
 801c660:	46bd      	mov	sp, r7
 801c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c666:	4770      	bx	lr

0801c668 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801c668:	b480      	push	{r7}
 801c66a:	b083      	sub	sp, #12
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	6078      	str	r0, [r7, #4]
    return next_;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	685b      	ldr	r3, [r3, #4]
}
 801c674:	4618      	mov	r0, r3
 801c676:	370c      	adds	r7, #12
 801c678:	46bd      	mov	sp, r7
 801c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c67e:	4770      	bx	lr

0801c680 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801c680:	b480      	push	{r7}
 801c682:	b083      	sub	sp, #12
 801c684:	af00      	add	r7, sp, #0
 801c686:	6078      	str	r0, [r7, #4]
    return data_;
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	681b      	ldr	r3, [r3, #0]
}
 801c68c:	4618      	mov	r0, r3
 801c68e:	370c      	adds	r7, #12
 801c690:	46bd      	mov	sp, r7
 801c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c696:	4770      	bx	lr

0801c698 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801c698:	b580      	push	{r7, lr}
 801c69a:	b082      	sub	sp, #8
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
    delete data_;
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d004      	beq.n	801c6b2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801c6a8:	681a      	ldr	r2, [r3, #0]
 801c6aa:	3204      	adds	r2, #4
 801c6ac:	6812      	ldr	r2, [r2, #0]
 801c6ae:	4618      	mov	r0, r3
 801c6b0:	4790      	blx	r2
}
 801c6b2:	bf00      	nop
 801c6b4:	3708      	adds	r7, #8
 801c6b6:	46bd      	mov	sp, r7
 801c6b8:	bd80      	pop	{r7, pc}

0801c6ba <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801c6ba:	b480      	push	{r7}
 801c6bc:	b083      	sub	sp, #12
 801c6be:	af00      	add	r7, sp, #0
 801c6c0:	6078      	str	r0, [r7, #4]
 801c6c2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	683a      	ldr	r2, [r7, #0]
 801c6c8:	601a      	str	r2, [r3, #0]
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	605a      	str	r2, [r3, #4]
{
}
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	370c      	adds	r7, #12
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6dc:	4770      	bx	lr

0801c6de <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801c6de:	b580      	push	{r7, lr}
 801c6e0:	b082      	sub	sp, #8
 801c6e2:	af00      	add	r7, sp, #0
 801c6e4:	6078      	str	r0, [r7, #4]
 801c6e6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	6819      	ldr	r1, [r3, #0]
 801c6ec:	683b      	ldr	r3, [r7, #0]
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	335c      	adds	r3, #92	; 0x5c
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	687a      	ldr	r2, [r7, #4]
 801c6f8:	4610      	mov	r0, r2
 801c6fa:	4798      	blx	r3
}
 801c6fc:	6878      	ldr	r0, [r7, #4]
 801c6fe:	3708      	adds	r7, #8
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}

0801c704 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b082      	sub	sp, #8
 801c708:	af00      	add	r7, sp, #0
 801c70a:	6078      	str	r0, [r7, #4]
 801c70c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801c70e:	683b      	ldr	r3, [r7, #0]
 801c710:	6819      	ldr	r1, [r3, #0]
 801c712:	683b      	ldr	r3, [r7, #0]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	3360      	adds	r3, #96	; 0x60
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	687a      	ldr	r2, [r7, #4]
 801c71e:	4610      	mov	r0, r2
 801c720:	4798      	blx	r3
}
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	3708      	adds	r7, #8
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}

0801c72a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801c72a:	b480      	push	{r7}
 801c72c:	b083      	sub	sp, #12
 801c72e:	af00      	add	r7, sp, #0
 801c730:	6078      	str	r0, [r7, #4]
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	2200      	movs	r2, #0
 801c736:	601a      	str	r2, [r3, #0]
{
}
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	4618      	mov	r0, r3
 801c73c:	370c      	adds	r7, #12
 801c73e:	46bd      	mov	sp, r7
 801c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c744:	4770      	bx	lr

0801c746 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801c746:	b580      	push	{r7, lr}
 801c748:	b084      	sub	sp, #16
 801c74a:	af00      	add	r7, sp, #0
 801c74c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d016      	beq.n	801c784 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	4618      	mov	r0, r3
 801c75c:	f7ff ff84 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801c760:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	4618      	mov	r0, r3
 801c768:	f7ff ff96 	bl	801c698 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d003      	beq.n	801c77c <_ZN18MockNamedValueList5clearEv+0x36>
 801c774:	2108      	movs	r1, #8
 801c776:	4618      	mov	r0, r3
 801c778:	f7ea fff0 	bl	800775c <_ZdlPvj>
        head_ = n;
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	68fa      	ldr	r2, [r7, #12]
 801c780:	601a      	str	r2, [r3, #0]
    while (head_) {
 801c782:	e7e4      	b.n	801c74e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801c784:	bf00      	nop
 801c786:	3710      	adds	r7, #16
 801c788:	46bd      	mov	sp, r7
 801c78a:	bd80      	pop	{r7, pc}

0801c78c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801c78c:	b590      	push	{r4, r7, lr}
 801c78e:	b085      	sub	sp, #20
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
 801c794:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801c796:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c79a:	4916      	ldr	r1, [pc, #88]	; (801c7f4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801c79c:	2008      	movs	r0, #8
 801c79e:	f7ea ffc9 	bl	8007734 <_ZnwjPKci>
 801c7a2:	4604      	mov	r4, r0
 801c7a4:	6839      	ldr	r1, [r7, #0]
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	f7ff ff87 	bl	801c6ba <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801c7ac:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d103      	bne.n	801c7be <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	68ba      	ldr	r2, [r7, #8]
 801c7ba:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801c7bc:	e016      	b.n	801c7ec <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801c7c4:	68f8      	ldr	r0, [r7, #12]
 801c7c6:	f7ff ff4f 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	bf14      	ite	ne
 801c7d0:	2301      	movne	r3, #1
 801c7d2:	2300      	moveq	r3, #0
 801c7d4:	b2db      	uxtb	r3, r3
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d004      	beq.n	801c7e4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801c7da:	68f8      	ldr	r0, [r7, #12]
 801c7dc:	f7ff ff44 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801c7e0:	60f8      	str	r0, [r7, #12]
 801c7e2:	e7ef      	b.n	801c7c4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801c7e4:	68b9      	ldr	r1, [r7, #8]
 801c7e6:	68f8      	ldr	r0, [r7, #12]
 801c7e8:	f7ff ff30 	bl	801c64c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801c7ec:	bf00      	nop
 801c7ee:	3714      	adds	r7, #20
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bd90      	pop	{r4, r7, pc}
 801c7f4:	08023300 	.word	0x08023300

0801c7f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801c7f8:	b590      	push	{r4, r7, lr}
 801c7fa:	b087      	sub	sp, #28
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
 801c800:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	617b      	str	r3, [r7, #20]
 801c808:	697b      	ldr	r3, [r7, #20]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d01e      	beq.n	801c84c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801c80e:	f107 030c 	add.w	r3, r7, #12
 801c812:	6979      	ldr	r1, [r7, #20]
 801c814:	4618      	mov	r0, r3
 801c816:	f7ff ff62 	bl	801c6de <_ZNK22MockNamedValueListNode7getNameEv>
 801c81a:	f107 030c 	add.w	r3, r7, #12
 801c81e:	6839      	ldr	r1, [r7, #0]
 801c820:	4618      	mov	r0, r3
 801c822:	f7ed ff0e 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801c826:	4603      	mov	r3, r0
 801c828:	461c      	mov	r4, r3
 801c82a:	f107 030c 	add.w	r3, r7, #12
 801c82e:	4618      	mov	r0, r3
 801c830:	f7ed fefb 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c834:	2c00      	cmp	r4, #0
 801c836:	d004      	beq.n	801c842 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801c838:	6978      	ldr	r0, [r7, #20]
 801c83a:	f7ff ff21 	bl	801c680 <_ZN22MockNamedValueListNode4itemEv>
 801c83e:	4603      	mov	r3, r0
 801c840:	e005      	b.n	801c84e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801c842:	6978      	ldr	r0, [r7, #20]
 801c844:	f7ff ff10 	bl	801c668 <_ZN22MockNamedValueListNode4nextEv>
 801c848:	6178      	str	r0, [r7, #20]
 801c84a:	e7dd      	b.n	801c808 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801c84c:	2300      	movs	r3, #0
}
 801c84e:	4618      	mov	r0, r3
 801c850:	371c      	adds	r7, #28
 801c852:	46bd      	mov	sp, r7
 801c854:	bd90      	pop	{r4, r7, pc}

0801c856 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801c856:	b480      	push	{r7}
 801c858:	b083      	sub	sp, #12
 801c85a:	af00      	add	r7, sp, #0
 801c85c:	6078      	str	r0, [r7, #4]
    return head_;
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	681b      	ldr	r3, [r3, #0]
}
 801c862:	4618      	mov	r0, r3
 801c864:	370c      	adds	r7, #12
 801c866:	46bd      	mov	sp, r7
 801c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c86c:	4770      	bx	lr

0801c86e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c86e:	b580      	push	{r7, lr}
 801c870:	b084      	sub	sp, #16
 801c872:	af00      	add	r7, sp, #0
 801c874:	60f8      	str	r0, [r7, #12]
 801c876:	60b9      	str	r1, [r7, #8]
 801c878:	607a      	str	r2, [r7, #4]
 801c87a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	68b9      	ldr	r1, [r7, #8]
 801c880:	4618      	mov	r0, r3
 801c882:	f7ed fb6e 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	687a      	ldr	r2, [r7, #4]
 801c88a:	609a      	str	r2, [r3, #8]
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	2200      	movs	r2, #0
 801c890:	60da      	str	r2, [r3, #12]
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	683a      	ldr	r2, [r7, #0]
 801c896:	611a      	str	r2, [r3, #16]
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	4618      	mov	r0, r3
 801c89c:	3710      	adds	r7, #16
 801c89e:	46bd      	mov	sp, r7
 801c8a0:	bd80      	pop	{r7, pc}

0801c8a2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c8a2:	b580      	push	{r7, lr}
 801c8a4:	b084      	sub	sp, #16
 801c8a6:	af00      	add	r7, sp, #0
 801c8a8:	60f8      	str	r0, [r7, #12]
 801c8aa:	60b9      	str	r1, [r7, #8]
 801c8ac:	607a      	str	r2, [r7, #4]
 801c8ae:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	68b9      	ldr	r1, [r7, #8]
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	f7ed fb54 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 801c8ba:	68fb      	ldr	r3, [r7, #12]
 801c8bc:	2200      	movs	r2, #0
 801c8be:	609a      	str	r2, [r3, #8]
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	687a      	ldr	r2, [r7, #4]
 801c8c4:	60da      	str	r2, [r3, #12]
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	683a      	ldr	r2, [r7, #0]
 801c8ca:	611a      	str	r2, [r3, #16]
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	3710      	adds	r7, #16
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	bd80      	pop	{r7, pc}

0801c8d6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c8d6:	b580      	push	{r7, lr}
 801c8d8:	b084      	sub	sp, #16
 801c8da:	af00      	add	r7, sp, #0
 801c8dc:	60f8      	str	r0, [r7, #12]
 801c8de:	60b9      	str	r1, [r7, #8]
 801c8e0:	607a      	str	r2, [r7, #4]
 801c8e2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	68b9      	ldr	r1, [r7, #8]
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f7ed fb3a 	bl	8009f62 <_ZN12SimpleStringC1ERKS_>
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	687a      	ldr	r2, [r7, #4]
 801c8f2:	609a      	str	r2, [r3, #8]
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	683a      	ldr	r2, [r7, #0]
 801c8f8:	60da      	str	r2, [r3, #12]
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	69ba      	ldr	r2, [r7, #24]
 801c8fe:	611a      	str	r2, [r3, #16]
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	4618      	mov	r0, r3
 801c904:	3710      	adds	r7, #16
 801c906:	46bd      	mov	sp, r7
 801c908:	bd80      	pop	{r7, pc}
	...

0801c90c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801c90c:	b480      	push	{r7}
 801c90e:	b083      	sub	sp, #12
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
 801c914:	4a06      	ldr	r2, [pc, #24]	; (801c930 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	601a      	str	r2, [r3, #0]
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	2200      	movs	r2, #0
 801c91e:	605a      	str	r2, [r3, #4]
{

}
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	4618      	mov	r0, r3
 801c924:	370c      	adds	r7, #12
 801c926:	46bd      	mov	sp, r7
 801c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c92c:	4770      	bx	lr
 801c92e:	bf00      	nop
 801c930:	08025254 	.word	0x08025254

0801c934 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801c934:	b580      	push	{r7, lr}
 801c936:	b082      	sub	sp, #8
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
 801c93c:	4a05      	ldr	r2, [pc, #20]	; (801c954 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	601a      	str	r2, [r3, #0]
{
    clear();
 801c942:	6878      	ldr	r0, [r7, #4]
 801c944:	f000 f825 	bl	801c992 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	4618      	mov	r0, r3
 801c94c:	3708      	adds	r7, #8
 801c94e:	46bd      	mov	sp, r7
 801c950:	bd80      	pop	{r7, pc}
 801c952:	bf00      	nop
 801c954:	08025254 	.word	0x08025254

0801c958 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
}
 801c960:	6878      	ldr	r0, [r7, #4]
 801c962:	f7ff ffe7 	bl	801c934 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801c966:	2108      	movs	r1, #8
 801c968:	6878      	ldr	r0, [r7, #4]
 801c96a:	f7ea fef7 	bl	800775c <_ZdlPvj>
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	4618      	mov	r0, r3
 801c972:	3708      	adds	r7, #8
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}

0801c978 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801c978:	b580      	push	{r7, lr}
 801c97a:	b082      	sub	sp, #8
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	4618      	mov	r0, r3
 801c984:	f7ed fe51 	bl	800a62a <_ZN12SimpleStringD1Ev>
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	4618      	mov	r0, r3
 801c98c:	3708      	adds	r7, #8
 801c98e:	46bd      	mov	sp, r7
 801c990:	bd80      	pop	{r7, pc}

0801c992 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801c992:	b590      	push	{r4, r7, lr}
 801c994:	b085      	sub	sp, #20
 801c996:	af00      	add	r7, sp, #0
 801c998:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	685b      	ldr	r3, [r3, #4]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d012      	beq.n	801c9c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	685b      	ldr	r3, [r3, #4]
 801c9a6:	691b      	ldr	r3, [r3, #16]
 801c9a8:	60fb      	str	r3, [r7, #12]
        delete head_;
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	685c      	ldr	r4, [r3, #4]
 801c9ae:	2c00      	cmp	r4, #0
 801c9b0:	d006      	beq.n	801c9c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	f7ff ffe0 	bl	801c978 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801c9b8:	2114      	movs	r1, #20
 801c9ba:	4620      	mov	r0, r4
 801c9bc:	f7ea fece 	bl	800775c <_ZdlPvj>
        head_ = next;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	68fa      	ldr	r2, [r7, #12]
 801c9c4:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c9c6:	e7e8      	b.n	801c99a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801c9c8:	bf00      	nop
 801c9ca:	3714      	adds	r7, #20
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bd90      	pop	{r4, r7, pc}

0801c9d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801c9d0:	b590      	push	{r4, r7, lr}
 801c9d2:	b085      	sub	sp, #20
 801c9d4:	af00      	add	r7, sp, #0
 801c9d6:	60f8      	str	r0, [r7, #12]
 801c9d8:	60b9      	str	r1, [r7, #8]
 801c9da:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801c9dc:	f240 227a 	movw	r2, #634	; 0x27a
 801c9e0:	4908      	ldr	r1, [pc, #32]	; (801ca04 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801c9e2:	2014      	movs	r0, #20
 801c9e4:	f7ea fea6 	bl	8007734 <_ZnwjPKci>
 801c9e8:	4604      	mov	r4, r0
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	685b      	ldr	r3, [r3, #4]
 801c9ee:	687a      	ldr	r2, [r7, #4]
 801c9f0:	68b9      	ldr	r1, [r7, #8]
 801c9f2:	4620      	mov	r0, r4
 801c9f4:	f7ff ff3b 	bl	801c86e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	605c      	str	r4, [r3, #4]
}
 801c9fc:	bf00      	nop
 801c9fe:	3714      	adds	r7, #20
 801ca00:	46bd      	mov	sp, r7
 801ca02:	bd90      	pop	{r4, r7, pc}
 801ca04:	08023300 	.word	0x08023300

0801ca08 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801ca08:	b590      	push	{r4, r7, lr}
 801ca0a:	b085      	sub	sp, #20
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	60f8      	str	r0, [r7, #12]
 801ca10:	60b9      	str	r1, [r7, #8]
 801ca12:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801ca14:	f240 227f 	movw	r2, #639	; 0x27f
 801ca18:	4908      	ldr	r1, [pc, #32]	; (801ca3c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801ca1a:	2014      	movs	r0, #20
 801ca1c:	f7ea fe8a 	bl	8007734 <_ZnwjPKci>
 801ca20:	4604      	mov	r4, r0
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	685b      	ldr	r3, [r3, #4]
 801ca26:	687a      	ldr	r2, [r7, #4]
 801ca28:	68b9      	ldr	r1, [r7, #8]
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	f7ff ff39 	bl	801c8a2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	605c      	str	r4, [r3, #4]
}
 801ca34:	bf00      	nop
 801ca36:	3714      	adds	r7, #20
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	bd90      	pop	{r4, r7, pc}
 801ca3c:	08023300 	.word	0x08023300

0801ca40 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b084      	sub	sp, #16
 801ca44:	af00      	add	r7, sp, #0
 801ca46:	6078      	str	r0, [r7, #4]
 801ca48:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	685b      	ldr	r3, [r3, #4]
 801ca4e:	60fb      	str	r3, [r7, #12]
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d017      	beq.n	801ca86 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	6839      	ldr	r1, [r7, #0]
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f7ed fdf1 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801ca60:	4603      	mov	r3, r0
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d005      	beq.n	801ca72 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	689b      	ldr	r3, [r3, #8]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d001      	beq.n	801ca72 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801ca6e:	2301      	movs	r3, #1
 801ca70:	e000      	b.n	801ca74 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801ca72:	2300      	movs	r3, #0
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	d002      	beq.n	801ca7e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	689b      	ldr	r3, [r3, #8]
 801ca7c:	e004      	b.n	801ca88 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	691b      	ldr	r3, [r3, #16]
 801ca82:	60fb      	str	r3, [r7, #12]
 801ca84:	e7e4      	b.n	801ca50 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801ca86:	2300      	movs	r3, #0
}
 801ca88:	4618      	mov	r0, r3
 801ca8a:	3710      	adds	r7, #16
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	bd80      	pop	{r7, pc}

0801ca90 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b084      	sub	sp, #16
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	6078      	str	r0, [r7, #4]
 801ca98:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	685b      	ldr	r3, [r3, #4]
 801ca9e:	60fb      	str	r3, [r7, #12]
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d017      	beq.n	801cad6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	6839      	ldr	r1, [r7, #0]
 801caaa:	4618      	mov	r0, r3
 801caac:	f7ed fdc9 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801cab0:	4603      	mov	r3, r0
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d005      	beq.n	801cac2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	68db      	ldr	r3, [r3, #12]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d001      	beq.n	801cac2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801cabe:	2301      	movs	r3, #1
 801cac0:	e000      	b.n	801cac4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801cac2:	2300      	movs	r3, #0
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d002      	beq.n	801cace <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	68db      	ldr	r3, [r3, #12]
 801cacc:	e004      	b.n	801cad8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	691b      	ldr	r3, [r3, #16]
 801cad2:	60fb      	str	r3, [r7, #12]
 801cad4:	e7e4      	b.n	801caa0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801cad6:	2300      	movs	r3, #0
}
 801cad8:	4618      	mov	r0, r3
 801cada:	3710      	adds	r7, #16
 801cadc:	46bd      	mov	sp, r7
 801cade:	bd80      	pop	{r7, pc}

0801cae0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801cae0:	b590      	push	{r4, r7, lr}
 801cae2:	b087      	sub	sp, #28
 801cae4:	af02      	add	r7, sp, #8
 801cae6:	6078      	str	r0, [r7, #4]
 801cae8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801caea:	683b      	ldr	r3, [r7, #0]
 801caec:	685b      	ldr	r3, [r3, #4]
 801caee:	60fb      	str	r3, [r7, #12]
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d018      	beq.n	801cb28 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801caf6:	f240 2293 	movw	r2, #659	; 0x293
 801cafa:	490d      	ldr	r1, [pc, #52]	; (801cb30 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801cafc:	2014      	movs	r0, #20
 801cafe:	f7ea fe19 	bl	8007734 <_ZnwjPKci>
 801cb02:	4604      	mov	r4, r0
 801cb04:	68f9      	ldr	r1, [r7, #12]
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	689a      	ldr	r2, [r3, #8]
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	68d8      	ldr	r0, [r3, #12]
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	685b      	ldr	r3, [r3, #4]
 801cb12:	9300      	str	r3, [sp, #0]
 801cb14:	4603      	mov	r3, r0
 801cb16:	4620      	mov	r0, r4
 801cb18:	f7ff fedd 	bl	801c8d6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	691b      	ldr	r3, [r3, #16]
 801cb24:	60fb      	str	r3, [r7, #12]
 801cb26:	e7e3      	b.n	801caf0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801cb28:	bf00      	nop
 801cb2a:	3714      	adds	r7, #20
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bd90      	pop	{r4, r7, pc}
 801cb30:	08023300 	.word	0x08023300

0801cb34 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b082      	sub	sp, #8
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
 801cb3c:	6039      	str	r1, [r7, #0]
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	490b      	ldr	r1, [pc, #44]	; (801cb70 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801cb42:	4618      	mov	r0, r3
 801cb44:	f7ed f9b9 	bl	8009eba <_ZN12SimpleStringC1EPKc>
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	2200      	movs	r2, #0
 801cb4c:	721a      	strb	r2, [r3, #8]
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	2200      	movs	r2, #0
 801cb52:	725a      	strb	r2, [r3, #9]
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	2200      	movs	r2, #0
 801cb58:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	6839      	ldr	r1, [r7, #0]
 801cb5e:	4618      	mov	r0, r3
 801cb60:	f7ed fa17 	bl	8009f92 <_ZN12SimpleStringaSERKS_>
}
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	4618      	mov	r0, r3
 801cb68:	3708      	adds	r7, #8
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}
 801cb6e:	bf00      	nop
 801cb70:	080233dc 	.word	0x080233dc

0801cb74 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801cb74:	b480      	push	{r7}
 801cb76:	b083      	sub	sp, #12
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	6078      	str	r0, [r7, #4]
 801cb7c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	683a      	ldr	r2, [r7, #0]
 801cb82:	60da      	str	r2, [r3, #12]
    return this;
 801cb84:	687b      	ldr	r3, [r7, #4]
}
 801cb86:	4618      	mov	r0, r3
 801cb88:	370c      	adds	r7, #12
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb90:	4770      	bx	lr

0801cb92 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801cb92:	b480      	push	{r7}
 801cb94:	b083      	sub	sp, #12
 801cb96:	af00      	add	r7, sp, #0
 801cb98:	6078      	str	r0, [r7, #4]
    return next_;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	68db      	ldr	r3, [r3, #12]
}
 801cb9e:	4618      	mov	r0, r3
 801cba0:	370c      	adds	r7, #12
 801cba2:	46bd      	mov	sp, r7
 801cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba8:	4770      	bx	lr

0801cbaa <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801cbaa:	b480      	push	{r7}
 801cbac:	b083      	sub	sp, #12
 801cbae:	af00      	add	r7, sp, #0
 801cbb0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2201      	movs	r2, #1
 801cbb6:	721a      	strb	r2, [r3, #8]
}
 801cbb8:	bf00      	nop
 801cbba:	370c      	adds	r7, #12
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc2:	4770      	bx	lr

0801cbc4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801cbc4:	b480      	push	{r7}
 801cbc6:	b083      	sub	sp, #12
 801cbc8:	af00      	add	r7, sp, #0
 801cbca:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	2201      	movs	r2, #1
 801cbd0:	725a      	strb	r2, [r3, #9]
}
 801cbd2:	bf00      	nop
 801cbd4:	370c      	adds	r7, #12
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbdc:	4770      	bx	lr

0801cbde <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801cbde:	b580      	push	{r7, lr}
 801cbe0:	b084      	sub	sp, #16
 801cbe2:	af00      	add	r7, sp, #0
 801cbe4:	6078      	str	r0, [r7, #4]
 801cbe6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801cbe8:	2300      	movs	r3, #0
 801cbea:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	7a1b      	ldrb	r3, [r3, #8]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d007      	beq.n	801cc04 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	4619      	mov	r1, r3
 801cbf8:	6838      	ldr	r0, [r7, #0]
 801cbfa:	f7ed fd22 	bl	800a642 <_ZeqRK12SimpleStringS1_>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	73fb      	strb	r3, [r7, #15]
 801cc02:	e006      	b.n	801cc12 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	4619      	mov	r1, r3
 801cc08:	6838      	ldr	r0, [r7, #0]
 801cc0a:	f7ed f9d4 	bl	8009fb6 <_ZNK12SimpleString8containsERKS_>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	7a5b      	ldrb	r3, [r3, #9]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d004      	beq.n	801cc24 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801cc1a:	7bfb      	ldrb	r3, [r7, #15]
 801cc1c:	f083 0301 	eor.w	r3, r3, #1
 801cc20:	b2db      	uxtb	r3, r3
 801cc22:	e005      	b.n	801cc30 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801cc24:	7bfb      	ldrb	r3, [r7, #15]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	bf14      	ite	ne
 801cc2a:	2301      	movne	r3, #1
 801cc2c:	2300      	moveq	r3, #0
 801cc2e:	b2db      	uxtb	r3, r3
}
 801cc30:	4618      	mov	r0, r3
 801cc32:	3710      	adds	r7, #16
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}

0801cc38 <__cxa_guard_acquire>:
 801cc38:	6803      	ldr	r3, [r0, #0]
 801cc3a:	07db      	lsls	r3, r3, #31
 801cc3c:	d406      	bmi.n	801cc4c <__cxa_guard_acquire+0x14>
 801cc3e:	7843      	ldrb	r3, [r0, #1]
 801cc40:	b103      	cbz	r3, 801cc44 <__cxa_guard_acquire+0xc>
 801cc42:	deff      	udf	#255	; 0xff
 801cc44:	2301      	movs	r3, #1
 801cc46:	7043      	strb	r3, [r0, #1]
 801cc48:	4618      	mov	r0, r3
 801cc4a:	4770      	bx	lr
 801cc4c:	2000      	movs	r0, #0
 801cc4e:	4770      	bx	lr

0801cc50 <__cxa_guard_release>:
 801cc50:	2301      	movs	r3, #1
 801cc52:	6003      	str	r3, [r0, #0]
 801cc54:	4770      	bx	lr

0801cc56 <__cxa_pure_virtual>:
 801cc56:	b508      	push	{r3, lr}
 801cc58:	f000 f80c 	bl	801cc74 <_ZSt9terminatev>

0801cc5c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801cc5c:	b508      	push	{r3, lr}
 801cc5e:	4780      	blx	r0
 801cc60:	f000 f816 	bl	801cc90 <abort>

0801cc64 <_ZSt13get_terminatev>:
 801cc64:	4b02      	ldr	r3, [pc, #8]	; (801cc70 <_ZSt13get_terminatev+0xc>)
 801cc66:	6818      	ldr	r0, [r3, #0]
 801cc68:	f3bf 8f5b 	dmb	ish
 801cc6c:	4770      	bx	lr
 801cc6e:	bf00      	nop
 801cc70:	20000100 	.word	0x20000100

0801cc74 <_ZSt9terminatev>:
 801cc74:	b508      	push	{r3, lr}
 801cc76:	f7ff fff5 	bl	801cc64 <_ZSt13get_terminatev>
 801cc7a:	f7ff ffef 	bl	801cc5c <_ZN10__cxxabiv111__terminateEPFvvE>

0801cc7e <fabs>:
 801cc7e:	ec51 0b10 	vmov	r0, r1, d0
 801cc82:	ee10 2a10 	vmov	r2, s0
 801cc86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cc8a:	ec43 2b10 	vmov	d0, r2, r3
 801cc8e:	4770      	bx	lr

0801cc90 <abort>:
 801cc90:	b508      	push	{r3, lr}
 801cc92:	2006      	movs	r0, #6
 801cc94:	f000 ff88 	bl	801dba8 <raise>
 801cc98:	2001      	movs	r0, #1
 801cc9a:	f7e4 f872 	bl	8000d82 <_exit>

0801cc9e <atexit>:
 801cc9e:	2300      	movs	r3, #0
 801cca0:	4601      	mov	r1, r0
 801cca2:	461a      	mov	r2, r3
 801cca4:	4618      	mov	r0, r3
 801cca6:	f002 b939 	b.w	801ef1c <__register_exitproc>
	...

0801ccac <calloc>:
 801ccac:	4b02      	ldr	r3, [pc, #8]	; (801ccb8 <calloc+0xc>)
 801ccae:	460a      	mov	r2, r1
 801ccb0:	4601      	mov	r1, r0
 801ccb2:	6818      	ldr	r0, [r3, #0]
 801ccb4:	f000 bde8 	b.w	801d888 <_calloc_r>
 801ccb8:	20000104 	.word	0x20000104

0801ccbc <__errno>:
 801ccbc:	4b01      	ldr	r3, [pc, #4]	; (801ccc4 <__errno+0x8>)
 801ccbe:	6818      	ldr	r0, [r3, #0]
 801ccc0:	4770      	bx	lr
 801ccc2:	bf00      	nop
 801ccc4:	20000104 	.word	0x20000104

0801ccc8 <_fclose_r>:
 801ccc8:	b570      	push	{r4, r5, r6, lr}
 801ccca:	4605      	mov	r5, r0
 801cccc:	460c      	mov	r4, r1
 801ccce:	b911      	cbnz	r1, 801ccd6 <_fclose_r+0xe>
 801ccd0:	2600      	movs	r6, #0
 801ccd2:	4630      	mov	r0, r6
 801ccd4:	bd70      	pop	{r4, r5, r6, pc}
 801ccd6:	b118      	cbz	r0, 801cce0 <_fclose_r+0x18>
 801ccd8:	6983      	ldr	r3, [r0, #24]
 801ccda:	b90b      	cbnz	r3, 801cce0 <_fclose_r+0x18>
 801ccdc:	f000 f994 	bl	801d008 <__sinit>
 801cce0:	4b2c      	ldr	r3, [pc, #176]	; (801cd94 <_fclose_r+0xcc>)
 801cce2:	429c      	cmp	r4, r3
 801cce4:	d114      	bne.n	801cd10 <_fclose_r+0x48>
 801cce6:	686c      	ldr	r4, [r5, #4]
 801cce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ccea:	07d8      	lsls	r0, r3, #31
 801ccec:	d405      	bmi.n	801ccfa <_fclose_r+0x32>
 801ccee:	89a3      	ldrh	r3, [r4, #12]
 801ccf0:	0599      	lsls	r1, r3, #22
 801ccf2:	d402      	bmi.n	801ccfa <_fclose_r+0x32>
 801ccf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ccf6:	f000 fd3a 	bl	801d76e <__retarget_lock_acquire_recursive>
 801ccfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccfe:	b98b      	cbnz	r3, 801cd24 <_fclose_r+0x5c>
 801cd00:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801cd02:	f016 0601 	ands.w	r6, r6, #1
 801cd06:	d1e3      	bne.n	801ccd0 <_fclose_r+0x8>
 801cd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd0a:	f000 fd32 	bl	801d772 <__retarget_lock_release_recursive>
 801cd0e:	e7e0      	b.n	801ccd2 <_fclose_r+0xa>
 801cd10:	4b21      	ldr	r3, [pc, #132]	; (801cd98 <_fclose_r+0xd0>)
 801cd12:	429c      	cmp	r4, r3
 801cd14:	d101      	bne.n	801cd1a <_fclose_r+0x52>
 801cd16:	68ac      	ldr	r4, [r5, #8]
 801cd18:	e7e6      	b.n	801cce8 <_fclose_r+0x20>
 801cd1a:	4b20      	ldr	r3, [pc, #128]	; (801cd9c <_fclose_r+0xd4>)
 801cd1c:	429c      	cmp	r4, r3
 801cd1e:	bf08      	it	eq
 801cd20:	68ec      	ldreq	r4, [r5, #12]
 801cd22:	e7e1      	b.n	801cce8 <_fclose_r+0x20>
 801cd24:	4621      	mov	r1, r4
 801cd26:	4628      	mov	r0, r5
 801cd28:	f000 f842 	bl	801cdb0 <__sflush_r>
 801cd2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cd2e:	4606      	mov	r6, r0
 801cd30:	b133      	cbz	r3, 801cd40 <_fclose_r+0x78>
 801cd32:	6a21      	ldr	r1, [r4, #32]
 801cd34:	4628      	mov	r0, r5
 801cd36:	4798      	blx	r3
 801cd38:	2800      	cmp	r0, #0
 801cd3a:	bfb8      	it	lt
 801cd3c:	f04f 36ff 	movlt.w	r6, #4294967295
 801cd40:	89a3      	ldrh	r3, [r4, #12]
 801cd42:	061a      	lsls	r2, r3, #24
 801cd44:	d503      	bpl.n	801cd4e <_fclose_r+0x86>
 801cd46:	6921      	ldr	r1, [r4, #16]
 801cd48:	4628      	mov	r0, r5
 801cd4a:	f000 fdad 	bl	801d8a8 <_free_r>
 801cd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd50:	b141      	cbz	r1, 801cd64 <_fclose_r+0x9c>
 801cd52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd56:	4299      	cmp	r1, r3
 801cd58:	d002      	beq.n	801cd60 <_fclose_r+0x98>
 801cd5a:	4628      	mov	r0, r5
 801cd5c:	f000 fda4 	bl	801d8a8 <_free_r>
 801cd60:	2300      	movs	r3, #0
 801cd62:	6363      	str	r3, [r4, #52]	; 0x34
 801cd64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cd66:	b121      	cbz	r1, 801cd72 <_fclose_r+0xaa>
 801cd68:	4628      	mov	r0, r5
 801cd6a:	f000 fd9d 	bl	801d8a8 <_free_r>
 801cd6e:	2300      	movs	r3, #0
 801cd70:	64a3      	str	r3, [r4, #72]	; 0x48
 801cd72:	f000 f931 	bl	801cfd8 <__sfp_lock_acquire>
 801cd76:	2300      	movs	r3, #0
 801cd78:	81a3      	strh	r3, [r4, #12]
 801cd7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd7c:	07db      	lsls	r3, r3, #31
 801cd7e:	d402      	bmi.n	801cd86 <_fclose_r+0xbe>
 801cd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd82:	f000 fcf6 	bl	801d772 <__retarget_lock_release_recursive>
 801cd86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd88:	f000 fcef 	bl	801d76a <__retarget_lock_close_recursive>
 801cd8c:	f000 f92a 	bl	801cfe4 <__sfp_lock_release>
 801cd90:	e79f      	b.n	801ccd2 <_fclose_r+0xa>
 801cd92:	bf00      	nop
 801cd94:	08025348 	.word	0x08025348
 801cd98:	08025368 	.word	0x08025368
 801cd9c:	08025328 	.word	0x08025328

0801cda0 <fclose>:
 801cda0:	4b02      	ldr	r3, [pc, #8]	; (801cdac <fclose+0xc>)
 801cda2:	4601      	mov	r1, r0
 801cda4:	6818      	ldr	r0, [r3, #0]
 801cda6:	f7ff bf8f 	b.w	801ccc8 <_fclose_r>
 801cdaa:	bf00      	nop
 801cdac:	20000104 	.word	0x20000104

0801cdb0 <__sflush_r>:
 801cdb0:	898a      	ldrh	r2, [r1, #12]
 801cdb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdb6:	4605      	mov	r5, r0
 801cdb8:	0710      	lsls	r0, r2, #28
 801cdba:	460c      	mov	r4, r1
 801cdbc:	d458      	bmi.n	801ce70 <__sflush_r+0xc0>
 801cdbe:	684b      	ldr	r3, [r1, #4]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	dc05      	bgt.n	801cdd0 <__sflush_r+0x20>
 801cdc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	dc02      	bgt.n	801cdd0 <__sflush_r+0x20>
 801cdca:	2000      	movs	r0, #0
 801cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdd2:	2e00      	cmp	r6, #0
 801cdd4:	d0f9      	beq.n	801cdca <__sflush_r+0x1a>
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cddc:	682f      	ldr	r7, [r5, #0]
 801cdde:	602b      	str	r3, [r5, #0]
 801cde0:	d032      	beq.n	801ce48 <__sflush_r+0x98>
 801cde2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cde4:	89a3      	ldrh	r3, [r4, #12]
 801cde6:	075a      	lsls	r2, r3, #29
 801cde8:	d505      	bpl.n	801cdf6 <__sflush_r+0x46>
 801cdea:	6863      	ldr	r3, [r4, #4]
 801cdec:	1ac0      	subs	r0, r0, r3
 801cdee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cdf0:	b10b      	cbz	r3, 801cdf6 <__sflush_r+0x46>
 801cdf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cdf4:	1ac0      	subs	r0, r0, r3
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	4602      	mov	r2, r0
 801cdfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdfc:	6a21      	ldr	r1, [r4, #32]
 801cdfe:	4628      	mov	r0, r5
 801ce00:	47b0      	blx	r6
 801ce02:	1c43      	adds	r3, r0, #1
 801ce04:	89a3      	ldrh	r3, [r4, #12]
 801ce06:	d106      	bne.n	801ce16 <__sflush_r+0x66>
 801ce08:	6829      	ldr	r1, [r5, #0]
 801ce0a:	291d      	cmp	r1, #29
 801ce0c:	d82c      	bhi.n	801ce68 <__sflush_r+0xb8>
 801ce0e:	4a2a      	ldr	r2, [pc, #168]	; (801ceb8 <__sflush_r+0x108>)
 801ce10:	40ca      	lsrs	r2, r1
 801ce12:	07d6      	lsls	r6, r2, #31
 801ce14:	d528      	bpl.n	801ce68 <__sflush_r+0xb8>
 801ce16:	2200      	movs	r2, #0
 801ce18:	6062      	str	r2, [r4, #4]
 801ce1a:	04d9      	lsls	r1, r3, #19
 801ce1c:	6922      	ldr	r2, [r4, #16]
 801ce1e:	6022      	str	r2, [r4, #0]
 801ce20:	d504      	bpl.n	801ce2c <__sflush_r+0x7c>
 801ce22:	1c42      	adds	r2, r0, #1
 801ce24:	d101      	bne.n	801ce2a <__sflush_r+0x7a>
 801ce26:	682b      	ldr	r3, [r5, #0]
 801ce28:	b903      	cbnz	r3, 801ce2c <__sflush_r+0x7c>
 801ce2a:	6560      	str	r0, [r4, #84]	; 0x54
 801ce2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce2e:	602f      	str	r7, [r5, #0]
 801ce30:	2900      	cmp	r1, #0
 801ce32:	d0ca      	beq.n	801cdca <__sflush_r+0x1a>
 801ce34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce38:	4299      	cmp	r1, r3
 801ce3a:	d002      	beq.n	801ce42 <__sflush_r+0x92>
 801ce3c:	4628      	mov	r0, r5
 801ce3e:	f000 fd33 	bl	801d8a8 <_free_r>
 801ce42:	2000      	movs	r0, #0
 801ce44:	6360      	str	r0, [r4, #52]	; 0x34
 801ce46:	e7c1      	b.n	801cdcc <__sflush_r+0x1c>
 801ce48:	6a21      	ldr	r1, [r4, #32]
 801ce4a:	2301      	movs	r3, #1
 801ce4c:	4628      	mov	r0, r5
 801ce4e:	47b0      	blx	r6
 801ce50:	1c41      	adds	r1, r0, #1
 801ce52:	d1c7      	bne.n	801cde4 <__sflush_r+0x34>
 801ce54:	682b      	ldr	r3, [r5, #0]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d0c4      	beq.n	801cde4 <__sflush_r+0x34>
 801ce5a:	2b1d      	cmp	r3, #29
 801ce5c:	d001      	beq.n	801ce62 <__sflush_r+0xb2>
 801ce5e:	2b16      	cmp	r3, #22
 801ce60:	d101      	bne.n	801ce66 <__sflush_r+0xb6>
 801ce62:	602f      	str	r7, [r5, #0]
 801ce64:	e7b1      	b.n	801cdca <__sflush_r+0x1a>
 801ce66:	89a3      	ldrh	r3, [r4, #12]
 801ce68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce6c:	81a3      	strh	r3, [r4, #12]
 801ce6e:	e7ad      	b.n	801cdcc <__sflush_r+0x1c>
 801ce70:	690f      	ldr	r7, [r1, #16]
 801ce72:	2f00      	cmp	r7, #0
 801ce74:	d0a9      	beq.n	801cdca <__sflush_r+0x1a>
 801ce76:	0793      	lsls	r3, r2, #30
 801ce78:	680e      	ldr	r6, [r1, #0]
 801ce7a:	bf08      	it	eq
 801ce7c:	694b      	ldreq	r3, [r1, #20]
 801ce7e:	600f      	str	r7, [r1, #0]
 801ce80:	bf18      	it	ne
 801ce82:	2300      	movne	r3, #0
 801ce84:	eba6 0807 	sub.w	r8, r6, r7
 801ce88:	608b      	str	r3, [r1, #8]
 801ce8a:	f1b8 0f00 	cmp.w	r8, #0
 801ce8e:	dd9c      	ble.n	801cdca <__sflush_r+0x1a>
 801ce90:	6a21      	ldr	r1, [r4, #32]
 801ce92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce94:	4643      	mov	r3, r8
 801ce96:	463a      	mov	r2, r7
 801ce98:	4628      	mov	r0, r5
 801ce9a:	47b0      	blx	r6
 801ce9c:	2800      	cmp	r0, #0
 801ce9e:	dc06      	bgt.n	801ceae <__sflush_r+0xfe>
 801cea0:	89a3      	ldrh	r3, [r4, #12]
 801cea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cea6:	81a3      	strh	r3, [r4, #12]
 801cea8:	f04f 30ff 	mov.w	r0, #4294967295
 801ceac:	e78e      	b.n	801cdcc <__sflush_r+0x1c>
 801ceae:	4407      	add	r7, r0
 801ceb0:	eba8 0800 	sub.w	r8, r8, r0
 801ceb4:	e7e9      	b.n	801ce8a <__sflush_r+0xda>
 801ceb6:	bf00      	nop
 801ceb8:	20400001 	.word	0x20400001

0801cebc <_fflush_r>:
 801cebc:	b538      	push	{r3, r4, r5, lr}
 801cebe:	690b      	ldr	r3, [r1, #16]
 801cec0:	4605      	mov	r5, r0
 801cec2:	460c      	mov	r4, r1
 801cec4:	b913      	cbnz	r3, 801cecc <_fflush_r+0x10>
 801cec6:	2500      	movs	r5, #0
 801cec8:	4628      	mov	r0, r5
 801ceca:	bd38      	pop	{r3, r4, r5, pc}
 801cecc:	b118      	cbz	r0, 801ced6 <_fflush_r+0x1a>
 801cece:	6983      	ldr	r3, [r0, #24]
 801ced0:	b90b      	cbnz	r3, 801ced6 <_fflush_r+0x1a>
 801ced2:	f000 f899 	bl	801d008 <__sinit>
 801ced6:	4b14      	ldr	r3, [pc, #80]	; (801cf28 <_fflush_r+0x6c>)
 801ced8:	429c      	cmp	r4, r3
 801ceda:	d11b      	bne.n	801cf14 <_fflush_r+0x58>
 801cedc:	686c      	ldr	r4, [r5, #4]
 801cede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d0ef      	beq.n	801cec6 <_fflush_r+0xa>
 801cee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cee8:	07d0      	lsls	r0, r2, #31
 801ceea:	d404      	bmi.n	801cef6 <_fflush_r+0x3a>
 801ceec:	0599      	lsls	r1, r3, #22
 801ceee:	d402      	bmi.n	801cef6 <_fflush_r+0x3a>
 801cef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cef2:	f000 fc3c 	bl	801d76e <__retarget_lock_acquire_recursive>
 801cef6:	4628      	mov	r0, r5
 801cef8:	4621      	mov	r1, r4
 801cefa:	f7ff ff59 	bl	801cdb0 <__sflush_r>
 801cefe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf00:	07da      	lsls	r2, r3, #31
 801cf02:	4605      	mov	r5, r0
 801cf04:	d4e0      	bmi.n	801cec8 <_fflush_r+0xc>
 801cf06:	89a3      	ldrh	r3, [r4, #12]
 801cf08:	059b      	lsls	r3, r3, #22
 801cf0a:	d4dd      	bmi.n	801cec8 <_fflush_r+0xc>
 801cf0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf0e:	f000 fc30 	bl	801d772 <__retarget_lock_release_recursive>
 801cf12:	e7d9      	b.n	801cec8 <_fflush_r+0xc>
 801cf14:	4b05      	ldr	r3, [pc, #20]	; (801cf2c <_fflush_r+0x70>)
 801cf16:	429c      	cmp	r4, r3
 801cf18:	d101      	bne.n	801cf1e <_fflush_r+0x62>
 801cf1a:	68ac      	ldr	r4, [r5, #8]
 801cf1c:	e7df      	b.n	801cede <_fflush_r+0x22>
 801cf1e:	4b04      	ldr	r3, [pc, #16]	; (801cf30 <_fflush_r+0x74>)
 801cf20:	429c      	cmp	r4, r3
 801cf22:	bf08      	it	eq
 801cf24:	68ec      	ldreq	r4, [r5, #12]
 801cf26:	e7da      	b.n	801cede <_fflush_r+0x22>
 801cf28:	08025348 	.word	0x08025348
 801cf2c:	08025368 	.word	0x08025368
 801cf30:	08025328 	.word	0x08025328

0801cf34 <fflush>:
 801cf34:	4601      	mov	r1, r0
 801cf36:	b920      	cbnz	r0, 801cf42 <fflush+0xe>
 801cf38:	4b04      	ldr	r3, [pc, #16]	; (801cf4c <fflush+0x18>)
 801cf3a:	4905      	ldr	r1, [pc, #20]	; (801cf50 <fflush+0x1c>)
 801cf3c:	6818      	ldr	r0, [r3, #0]
 801cf3e:	f000 babb 	b.w	801d4b8 <_fwalk_reent>
 801cf42:	4b04      	ldr	r3, [pc, #16]	; (801cf54 <fflush+0x20>)
 801cf44:	6818      	ldr	r0, [r3, #0]
 801cf46:	f7ff bfb9 	b.w	801cebc <_fflush_r>
 801cf4a:	bf00      	nop
 801cf4c:	08025388 	.word	0x08025388
 801cf50:	0801cebd 	.word	0x0801cebd
 801cf54:	20000104 	.word	0x20000104

0801cf58 <std>:
 801cf58:	2300      	movs	r3, #0
 801cf5a:	b510      	push	{r4, lr}
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	e9c0 3300 	strd	r3, r3, [r0]
 801cf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf66:	6083      	str	r3, [r0, #8]
 801cf68:	8181      	strh	r1, [r0, #12]
 801cf6a:	6643      	str	r3, [r0, #100]	; 0x64
 801cf6c:	81c2      	strh	r2, [r0, #14]
 801cf6e:	6183      	str	r3, [r0, #24]
 801cf70:	4619      	mov	r1, r3
 801cf72:	2208      	movs	r2, #8
 801cf74:	305c      	adds	r0, #92	; 0x5c
 801cf76:	f000 fc7f 	bl	801d878 <memset>
 801cf7a:	4b05      	ldr	r3, [pc, #20]	; (801cf90 <std+0x38>)
 801cf7c:	6263      	str	r3, [r4, #36]	; 0x24
 801cf7e:	4b05      	ldr	r3, [pc, #20]	; (801cf94 <std+0x3c>)
 801cf80:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf82:	4b05      	ldr	r3, [pc, #20]	; (801cf98 <std+0x40>)
 801cf84:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf86:	4b05      	ldr	r3, [pc, #20]	; (801cf9c <std+0x44>)
 801cf88:	6224      	str	r4, [r4, #32]
 801cf8a:	6323      	str	r3, [r4, #48]	; 0x30
 801cf8c:	bd10      	pop	{r4, pc}
 801cf8e:	bf00      	nop
 801cf90:	0801dbe1 	.word	0x0801dbe1
 801cf94:	0801dc07 	.word	0x0801dc07
 801cf98:	0801dc3f 	.word	0x0801dc3f
 801cf9c:	0801dc63 	.word	0x0801dc63

0801cfa0 <_cleanup_r>:
 801cfa0:	4901      	ldr	r1, [pc, #4]	; (801cfa8 <_cleanup_r+0x8>)
 801cfa2:	f000 ba89 	b.w	801d4b8 <_fwalk_reent>
 801cfa6:	bf00      	nop
 801cfa8:	0801cebd 	.word	0x0801cebd

0801cfac <__sfmoreglue>:
 801cfac:	b570      	push	{r4, r5, r6, lr}
 801cfae:	1e4a      	subs	r2, r1, #1
 801cfb0:	2568      	movs	r5, #104	; 0x68
 801cfb2:	4355      	muls	r5, r2
 801cfb4:	460e      	mov	r6, r1
 801cfb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cfba:	f000 fcc5 	bl	801d948 <_malloc_r>
 801cfbe:	4604      	mov	r4, r0
 801cfc0:	b140      	cbz	r0, 801cfd4 <__sfmoreglue+0x28>
 801cfc2:	2100      	movs	r1, #0
 801cfc4:	e9c0 1600 	strd	r1, r6, [r0]
 801cfc8:	300c      	adds	r0, #12
 801cfca:	60a0      	str	r0, [r4, #8]
 801cfcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cfd0:	f000 fc52 	bl	801d878 <memset>
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	bd70      	pop	{r4, r5, r6, pc}

0801cfd8 <__sfp_lock_acquire>:
 801cfd8:	4801      	ldr	r0, [pc, #4]	; (801cfe0 <__sfp_lock_acquire+0x8>)
 801cfda:	f000 bbc8 	b.w	801d76e <__retarget_lock_acquire_recursive>
 801cfde:	bf00      	nop
 801cfe0:	20000d7c 	.word	0x20000d7c

0801cfe4 <__sfp_lock_release>:
 801cfe4:	4801      	ldr	r0, [pc, #4]	; (801cfec <__sfp_lock_release+0x8>)
 801cfe6:	f000 bbc4 	b.w	801d772 <__retarget_lock_release_recursive>
 801cfea:	bf00      	nop
 801cfec:	20000d7c 	.word	0x20000d7c

0801cff0 <__sinit_lock_acquire>:
 801cff0:	4801      	ldr	r0, [pc, #4]	; (801cff8 <__sinit_lock_acquire+0x8>)
 801cff2:	f000 bbbc 	b.w	801d76e <__retarget_lock_acquire_recursive>
 801cff6:	bf00      	nop
 801cff8:	20000d77 	.word	0x20000d77

0801cffc <__sinit_lock_release>:
 801cffc:	4801      	ldr	r0, [pc, #4]	; (801d004 <__sinit_lock_release+0x8>)
 801cffe:	f000 bbb8 	b.w	801d772 <__retarget_lock_release_recursive>
 801d002:	bf00      	nop
 801d004:	20000d77 	.word	0x20000d77

0801d008 <__sinit>:
 801d008:	b510      	push	{r4, lr}
 801d00a:	4604      	mov	r4, r0
 801d00c:	f7ff fff0 	bl	801cff0 <__sinit_lock_acquire>
 801d010:	69a3      	ldr	r3, [r4, #24]
 801d012:	b11b      	cbz	r3, 801d01c <__sinit+0x14>
 801d014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d018:	f7ff bff0 	b.w	801cffc <__sinit_lock_release>
 801d01c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d020:	6523      	str	r3, [r4, #80]	; 0x50
 801d022:	4b13      	ldr	r3, [pc, #76]	; (801d070 <__sinit+0x68>)
 801d024:	4a13      	ldr	r2, [pc, #76]	; (801d074 <__sinit+0x6c>)
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	62a2      	str	r2, [r4, #40]	; 0x28
 801d02a:	42a3      	cmp	r3, r4
 801d02c:	bf04      	itt	eq
 801d02e:	2301      	moveq	r3, #1
 801d030:	61a3      	streq	r3, [r4, #24]
 801d032:	4620      	mov	r0, r4
 801d034:	f000 f820 	bl	801d078 <__sfp>
 801d038:	6060      	str	r0, [r4, #4]
 801d03a:	4620      	mov	r0, r4
 801d03c:	f000 f81c 	bl	801d078 <__sfp>
 801d040:	60a0      	str	r0, [r4, #8]
 801d042:	4620      	mov	r0, r4
 801d044:	f000 f818 	bl	801d078 <__sfp>
 801d048:	2200      	movs	r2, #0
 801d04a:	60e0      	str	r0, [r4, #12]
 801d04c:	2104      	movs	r1, #4
 801d04e:	6860      	ldr	r0, [r4, #4]
 801d050:	f7ff ff82 	bl	801cf58 <std>
 801d054:	68a0      	ldr	r0, [r4, #8]
 801d056:	2201      	movs	r2, #1
 801d058:	2109      	movs	r1, #9
 801d05a:	f7ff ff7d 	bl	801cf58 <std>
 801d05e:	68e0      	ldr	r0, [r4, #12]
 801d060:	2202      	movs	r2, #2
 801d062:	2112      	movs	r1, #18
 801d064:	f7ff ff78 	bl	801cf58 <std>
 801d068:	2301      	movs	r3, #1
 801d06a:	61a3      	str	r3, [r4, #24]
 801d06c:	e7d2      	b.n	801d014 <__sinit+0xc>
 801d06e:	bf00      	nop
 801d070:	08025388 	.word	0x08025388
 801d074:	0801cfa1 	.word	0x0801cfa1

0801d078 <__sfp>:
 801d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d07a:	4607      	mov	r7, r0
 801d07c:	f7ff ffac 	bl	801cfd8 <__sfp_lock_acquire>
 801d080:	4b1e      	ldr	r3, [pc, #120]	; (801d0fc <__sfp+0x84>)
 801d082:	681e      	ldr	r6, [r3, #0]
 801d084:	69b3      	ldr	r3, [r6, #24]
 801d086:	b913      	cbnz	r3, 801d08e <__sfp+0x16>
 801d088:	4630      	mov	r0, r6
 801d08a:	f7ff ffbd 	bl	801d008 <__sinit>
 801d08e:	3648      	adds	r6, #72	; 0x48
 801d090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d094:	3b01      	subs	r3, #1
 801d096:	d503      	bpl.n	801d0a0 <__sfp+0x28>
 801d098:	6833      	ldr	r3, [r6, #0]
 801d09a:	b30b      	cbz	r3, 801d0e0 <__sfp+0x68>
 801d09c:	6836      	ldr	r6, [r6, #0]
 801d09e:	e7f7      	b.n	801d090 <__sfp+0x18>
 801d0a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d0a4:	b9d5      	cbnz	r5, 801d0dc <__sfp+0x64>
 801d0a6:	4b16      	ldr	r3, [pc, #88]	; (801d100 <__sfp+0x88>)
 801d0a8:	60e3      	str	r3, [r4, #12]
 801d0aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d0ae:	6665      	str	r5, [r4, #100]	; 0x64
 801d0b0:	f000 fb5a 	bl	801d768 <__retarget_lock_init_recursive>
 801d0b4:	f7ff ff96 	bl	801cfe4 <__sfp_lock_release>
 801d0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d0c0:	6025      	str	r5, [r4, #0]
 801d0c2:	61a5      	str	r5, [r4, #24]
 801d0c4:	2208      	movs	r2, #8
 801d0c6:	4629      	mov	r1, r5
 801d0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d0cc:	f000 fbd4 	bl	801d878 <memset>
 801d0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d0d8:	4620      	mov	r0, r4
 801d0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0dc:	3468      	adds	r4, #104	; 0x68
 801d0de:	e7d9      	b.n	801d094 <__sfp+0x1c>
 801d0e0:	2104      	movs	r1, #4
 801d0e2:	4638      	mov	r0, r7
 801d0e4:	f7ff ff62 	bl	801cfac <__sfmoreglue>
 801d0e8:	4604      	mov	r4, r0
 801d0ea:	6030      	str	r0, [r6, #0]
 801d0ec:	2800      	cmp	r0, #0
 801d0ee:	d1d5      	bne.n	801d09c <__sfp+0x24>
 801d0f0:	f7ff ff78 	bl	801cfe4 <__sfp_lock_release>
 801d0f4:	230c      	movs	r3, #12
 801d0f6:	603b      	str	r3, [r7, #0]
 801d0f8:	e7ee      	b.n	801d0d8 <__sfp+0x60>
 801d0fa:	bf00      	nop
 801d0fc:	08025388 	.word	0x08025388
 801d100:	ffff0001 	.word	0xffff0001

0801d104 <_fopen_r>:
 801d104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d106:	460f      	mov	r7, r1
 801d108:	4611      	mov	r1, r2
 801d10a:	aa01      	add	r2, sp, #4
 801d10c:	4605      	mov	r5, r0
 801d10e:	f001 ff99 	bl	801f044 <__sflags>
 801d112:	4606      	mov	r6, r0
 801d114:	b918      	cbnz	r0, 801d11e <_fopen_r+0x1a>
 801d116:	2400      	movs	r4, #0
 801d118:	4620      	mov	r0, r4
 801d11a:	b003      	add	sp, #12
 801d11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d11e:	4628      	mov	r0, r5
 801d120:	f7ff ffaa 	bl	801d078 <__sfp>
 801d124:	4604      	mov	r4, r0
 801d126:	2800      	cmp	r0, #0
 801d128:	d0f5      	beq.n	801d116 <_fopen_r+0x12>
 801d12a:	4639      	mov	r1, r7
 801d12c:	9a01      	ldr	r2, [sp, #4]
 801d12e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801d132:	4628      	mov	r0, r5
 801d134:	f000 fc62 	bl	801d9fc <_open_r>
 801d138:	1e07      	subs	r7, r0, #0
 801d13a:	da09      	bge.n	801d150 <_fopen_r+0x4c>
 801d13c:	2500      	movs	r5, #0
 801d13e:	f7ff ff4b 	bl	801cfd8 <__sfp_lock_acquire>
 801d142:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d144:	81a5      	strh	r5, [r4, #12]
 801d146:	f000 fb10 	bl	801d76a <__retarget_lock_close_recursive>
 801d14a:	f7ff ff4b 	bl	801cfe4 <__sfp_lock_release>
 801d14e:	e7e2      	b.n	801d116 <_fopen_r+0x12>
 801d150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d152:	07db      	lsls	r3, r3, #31
 801d154:	d405      	bmi.n	801d162 <_fopen_r+0x5e>
 801d156:	89a3      	ldrh	r3, [r4, #12]
 801d158:	0598      	lsls	r0, r3, #22
 801d15a:	d402      	bmi.n	801d162 <_fopen_r+0x5e>
 801d15c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d15e:	f000 fb06 	bl	801d76e <__retarget_lock_acquire_recursive>
 801d162:	4b0e      	ldr	r3, [pc, #56]	; (801d19c <_fopen_r+0x98>)
 801d164:	6263      	str	r3, [r4, #36]	; 0x24
 801d166:	4b0e      	ldr	r3, [pc, #56]	; (801d1a0 <_fopen_r+0x9c>)
 801d168:	62a3      	str	r3, [r4, #40]	; 0x28
 801d16a:	4b0e      	ldr	r3, [pc, #56]	; (801d1a4 <_fopen_r+0xa0>)
 801d16c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d16e:	05f1      	lsls	r1, r6, #23
 801d170:	4b0d      	ldr	r3, [pc, #52]	; (801d1a8 <_fopen_r+0xa4>)
 801d172:	81e7      	strh	r7, [r4, #14]
 801d174:	81a6      	strh	r6, [r4, #12]
 801d176:	6224      	str	r4, [r4, #32]
 801d178:	6323      	str	r3, [r4, #48]	; 0x30
 801d17a:	d505      	bpl.n	801d188 <_fopen_r+0x84>
 801d17c:	2302      	movs	r3, #2
 801d17e:	2200      	movs	r2, #0
 801d180:	4621      	mov	r1, r4
 801d182:	4628      	mov	r0, r5
 801d184:	f000 f888 	bl	801d298 <_fseek_r>
 801d188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d18a:	07da      	lsls	r2, r3, #31
 801d18c:	d4c4      	bmi.n	801d118 <_fopen_r+0x14>
 801d18e:	89a3      	ldrh	r3, [r4, #12]
 801d190:	059b      	lsls	r3, r3, #22
 801d192:	d4c1      	bmi.n	801d118 <_fopen_r+0x14>
 801d194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d196:	f000 faec 	bl	801d772 <__retarget_lock_release_recursive>
 801d19a:	e7bd      	b.n	801d118 <_fopen_r+0x14>
 801d19c:	0801dbe1 	.word	0x0801dbe1
 801d1a0:	0801dc07 	.word	0x0801dc07
 801d1a4:	0801dc3f 	.word	0x0801dc3f
 801d1a8:	0801dc63 	.word	0x0801dc63

0801d1ac <fopen>:
 801d1ac:	4b02      	ldr	r3, [pc, #8]	; (801d1b8 <fopen+0xc>)
 801d1ae:	460a      	mov	r2, r1
 801d1b0:	4601      	mov	r1, r0
 801d1b2:	6818      	ldr	r0, [r3, #0]
 801d1b4:	f7ff bfa6 	b.w	801d104 <_fopen_r>
 801d1b8:	20000104 	.word	0x20000104

0801d1bc <_fputs_r>:
 801d1bc:	b570      	push	{r4, r5, r6, lr}
 801d1be:	460e      	mov	r6, r1
 801d1c0:	4614      	mov	r4, r2
 801d1c2:	4605      	mov	r5, r0
 801d1c4:	b118      	cbz	r0, 801d1ce <_fputs_r+0x12>
 801d1c6:	6983      	ldr	r3, [r0, #24]
 801d1c8:	b90b      	cbnz	r3, 801d1ce <_fputs_r+0x12>
 801d1ca:	f7ff ff1d 	bl	801d008 <__sinit>
 801d1ce:	4b2b      	ldr	r3, [pc, #172]	; (801d27c <_fputs_r+0xc0>)
 801d1d0:	429c      	cmp	r4, r3
 801d1d2:	d11e      	bne.n	801d212 <_fputs_r+0x56>
 801d1d4:	686c      	ldr	r4, [r5, #4]
 801d1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1d8:	07da      	lsls	r2, r3, #31
 801d1da:	d405      	bmi.n	801d1e8 <_fputs_r+0x2c>
 801d1dc:	89a3      	ldrh	r3, [r4, #12]
 801d1de:	059b      	lsls	r3, r3, #22
 801d1e0:	d402      	bmi.n	801d1e8 <_fputs_r+0x2c>
 801d1e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1e4:	f000 fac3 	bl	801d76e <__retarget_lock_acquire_recursive>
 801d1e8:	89a3      	ldrh	r3, [r4, #12]
 801d1ea:	0718      	lsls	r0, r3, #28
 801d1ec:	d51b      	bpl.n	801d226 <_fputs_r+0x6a>
 801d1ee:	6923      	ldr	r3, [r4, #16]
 801d1f0:	b1cb      	cbz	r3, 801d226 <_fputs_r+0x6a>
 801d1f2:	3e01      	subs	r6, #1
 801d1f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d1f8:	bb39      	cbnz	r1, 801d24a <_fputs_r+0x8e>
 801d1fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801d1fc:	f015 0501 	ands.w	r5, r5, #1
 801d200:	d139      	bne.n	801d276 <_fputs_r+0xba>
 801d202:	89a3      	ldrh	r3, [r4, #12]
 801d204:	0599      	lsls	r1, r3, #22
 801d206:	d402      	bmi.n	801d20e <_fputs_r+0x52>
 801d208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d20a:	f000 fab2 	bl	801d772 <__retarget_lock_release_recursive>
 801d20e:	4628      	mov	r0, r5
 801d210:	bd70      	pop	{r4, r5, r6, pc}
 801d212:	4b1b      	ldr	r3, [pc, #108]	; (801d280 <_fputs_r+0xc4>)
 801d214:	429c      	cmp	r4, r3
 801d216:	d101      	bne.n	801d21c <_fputs_r+0x60>
 801d218:	68ac      	ldr	r4, [r5, #8]
 801d21a:	e7dc      	b.n	801d1d6 <_fputs_r+0x1a>
 801d21c:	4b19      	ldr	r3, [pc, #100]	; (801d284 <_fputs_r+0xc8>)
 801d21e:	429c      	cmp	r4, r3
 801d220:	bf08      	it	eq
 801d222:	68ec      	ldreq	r4, [r5, #12]
 801d224:	e7d7      	b.n	801d1d6 <_fputs_r+0x1a>
 801d226:	4621      	mov	r1, r4
 801d228:	4628      	mov	r0, r5
 801d22a:	f001 fe09 	bl	801ee40 <__swsetup_r>
 801d22e:	2800      	cmp	r0, #0
 801d230:	d0df      	beq.n	801d1f2 <_fputs_r+0x36>
 801d232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d234:	07da      	lsls	r2, r3, #31
 801d236:	d405      	bmi.n	801d244 <_fputs_r+0x88>
 801d238:	89a3      	ldrh	r3, [r4, #12]
 801d23a:	059b      	lsls	r3, r3, #22
 801d23c:	d402      	bmi.n	801d244 <_fputs_r+0x88>
 801d23e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d240:	f000 fa97 	bl	801d772 <__retarget_lock_release_recursive>
 801d244:	f04f 35ff 	mov.w	r5, #4294967295
 801d248:	e7e1      	b.n	801d20e <_fputs_r+0x52>
 801d24a:	68a3      	ldr	r3, [r4, #8]
 801d24c:	3b01      	subs	r3, #1
 801d24e:	2b00      	cmp	r3, #0
 801d250:	60a3      	str	r3, [r4, #8]
 801d252:	da04      	bge.n	801d25e <_fputs_r+0xa2>
 801d254:	69a2      	ldr	r2, [r4, #24]
 801d256:	4293      	cmp	r3, r2
 801d258:	db06      	blt.n	801d268 <_fputs_r+0xac>
 801d25a:	290a      	cmp	r1, #10
 801d25c:	d004      	beq.n	801d268 <_fputs_r+0xac>
 801d25e:	6823      	ldr	r3, [r4, #0]
 801d260:	1c5a      	adds	r2, r3, #1
 801d262:	6022      	str	r2, [r4, #0]
 801d264:	7019      	strb	r1, [r3, #0]
 801d266:	e7c5      	b.n	801d1f4 <_fputs_r+0x38>
 801d268:	4622      	mov	r2, r4
 801d26a:	4628      	mov	r0, r5
 801d26c:	f001 fd84 	bl	801ed78 <__swbuf_r>
 801d270:	3001      	adds	r0, #1
 801d272:	d1bf      	bne.n	801d1f4 <_fputs_r+0x38>
 801d274:	e7dd      	b.n	801d232 <_fputs_r+0x76>
 801d276:	460d      	mov	r5, r1
 801d278:	e7c9      	b.n	801d20e <_fputs_r+0x52>
 801d27a:	bf00      	nop
 801d27c:	08025348 	.word	0x08025348
 801d280:	08025368 	.word	0x08025368
 801d284:	08025328 	.word	0x08025328

0801d288 <fputs>:
 801d288:	4b02      	ldr	r3, [pc, #8]	; (801d294 <fputs+0xc>)
 801d28a:	460a      	mov	r2, r1
 801d28c:	4601      	mov	r1, r0
 801d28e:	6818      	ldr	r0, [r3, #0]
 801d290:	f7ff bf94 	b.w	801d1bc <_fputs_r>
 801d294:	20000104 	.word	0x20000104

0801d298 <_fseek_r>:
 801d298:	f000 b800 	b.w	801d29c <_fseeko_r>

0801d29c <_fseeko_r>:
 801d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2a0:	460c      	mov	r4, r1
 801d2a2:	4617      	mov	r7, r2
 801d2a4:	461e      	mov	r6, r3
 801d2a6:	4605      	mov	r5, r0
 801d2a8:	b118      	cbz	r0, 801d2b2 <_fseeko_r+0x16>
 801d2aa:	6983      	ldr	r3, [r0, #24]
 801d2ac:	b90b      	cbnz	r3, 801d2b2 <_fseeko_r+0x16>
 801d2ae:	f7ff feab 	bl	801d008 <__sinit>
 801d2b2:	4b44      	ldr	r3, [pc, #272]	; (801d3c4 <_fseeko_r+0x128>)
 801d2b4:	429c      	cmp	r4, r3
 801d2b6:	d122      	bne.n	801d2fe <_fseeko_r+0x62>
 801d2b8:	686c      	ldr	r4, [r5, #4]
 801d2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2bc:	07d9      	lsls	r1, r3, #31
 801d2be:	d405      	bmi.n	801d2cc <_fseeko_r+0x30>
 801d2c0:	89a3      	ldrh	r3, [r4, #12]
 801d2c2:	059a      	lsls	r2, r3, #22
 801d2c4:	d402      	bmi.n	801d2cc <_fseeko_r+0x30>
 801d2c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2c8:	f000 fa51 	bl	801d76e <__retarget_lock_acquire_recursive>
 801d2cc:	89a3      	ldrh	r3, [r4, #12]
 801d2ce:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801d2d2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801d2d6:	d103      	bne.n	801d2e0 <_fseeko_r+0x44>
 801d2d8:	4621      	mov	r1, r4
 801d2da:	4628      	mov	r0, r5
 801d2dc:	f7ff fdee 	bl	801cebc <_fflush_r>
 801d2e0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801d2e4:	f1b8 0f00 	cmp.w	r8, #0
 801d2e8:	d113      	bne.n	801d312 <_fseeko_r+0x76>
 801d2ea:	231d      	movs	r3, #29
 801d2ec:	602b      	str	r3, [r5, #0]
 801d2ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2f0:	07d9      	lsls	r1, r3, #31
 801d2f2:	d55d      	bpl.n	801d3b0 <_fseeko_r+0x114>
 801d2f4:	f04f 36ff 	mov.w	r6, #4294967295
 801d2f8:	4630      	mov	r0, r6
 801d2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2fe:	4b32      	ldr	r3, [pc, #200]	; (801d3c8 <_fseeko_r+0x12c>)
 801d300:	429c      	cmp	r4, r3
 801d302:	d101      	bne.n	801d308 <_fseeko_r+0x6c>
 801d304:	68ac      	ldr	r4, [r5, #8]
 801d306:	e7d8      	b.n	801d2ba <_fseeko_r+0x1e>
 801d308:	4b30      	ldr	r3, [pc, #192]	; (801d3cc <_fseeko_r+0x130>)
 801d30a:	429c      	cmp	r4, r3
 801d30c:	bf08      	it	eq
 801d30e:	68ec      	ldreq	r4, [r5, #12]
 801d310:	e7d3      	b.n	801d2ba <_fseeko_r+0x1e>
 801d312:	2e01      	cmp	r6, #1
 801d314:	d036      	beq.n	801d384 <_fseeko_r+0xe8>
 801d316:	f036 0302 	bics.w	r3, r6, #2
 801d31a:	d147      	bne.n	801d3ac <_fseeko_r+0x110>
 801d31c:	6923      	ldr	r3, [r4, #16]
 801d31e:	b91b      	cbnz	r3, 801d328 <_fseeko_r+0x8c>
 801d320:	4621      	mov	r1, r4
 801d322:	4628      	mov	r0, r5
 801d324:	f000 fa4a 	bl	801d7bc <__smakebuf_r>
 801d328:	4621      	mov	r1, r4
 801d32a:	4628      	mov	r0, r5
 801d32c:	f7ff fdc6 	bl	801cebc <_fflush_r>
 801d330:	2800      	cmp	r0, #0
 801d332:	d1dc      	bne.n	801d2ee <_fseeko_r+0x52>
 801d334:	6a21      	ldr	r1, [r4, #32]
 801d336:	4633      	mov	r3, r6
 801d338:	463a      	mov	r2, r7
 801d33a:	4628      	mov	r0, r5
 801d33c:	47c0      	blx	r8
 801d33e:	3001      	adds	r0, #1
 801d340:	d0d5      	beq.n	801d2ee <_fseeko_r+0x52>
 801d342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d344:	b141      	cbz	r1, 801d358 <_fseeko_r+0xbc>
 801d346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d34a:	4299      	cmp	r1, r3
 801d34c:	d002      	beq.n	801d354 <_fseeko_r+0xb8>
 801d34e:	4628      	mov	r0, r5
 801d350:	f000 faaa 	bl	801d8a8 <_free_r>
 801d354:	2300      	movs	r3, #0
 801d356:	6363      	str	r3, [r4, #52]	; 0x34
 801d358:	6923      	ldr	r3, [r4, #16]
 801d35a:	6023      	str	r3, [r4, #0]
 801d35c:	89a3      	ldrh	r3, [r4, #12]
 801d35e:	2500      	movs	r5, #0
 801d360:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801d364:	6065      	str	r5, [r4, #4]
 801d366:	81a3      	strh	r3, [r4, #12]
 801d368:	2208      	movs	r2, #8
 801d36a:	4629      	mov	r1, r5
 801d36c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d370:	f000 fa82 	bl	801d878 <memset>
 801d374:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d376:	f016 0601 	ands.w	r6, r6, #1
 801d37a:	d120      	bne.n	801d3be <_fseeko_r+0x122>
 801d37c:	89a3      	ldrh	r3, [r4, #12]
 801d37e:	059b      	lsls	r3, r3, #22
 801d380:	d4ba      	bmi.n	801d2f8 <_fseeko_r+0x5c>
 801d382:	e00c      	b.n	801d39e <_fseeko_r+0x102>
 801d384:	4621      	mov	r1, r4
 801d386:	4628      	mov	r0, r5
 801d388:	f000 f822 	bl	801d3d0 <_ftello_r>
 801d38c:	1c43      	adds	r3, r0, #1
 801d38e:	4606      	mov	r6, r0
 801d390:	d109      	bne.n	801d3a6 <_fseeko_r+0x10a>
 801d392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d394:	07dd      	lsls	r5, r3, #31
 801d396:	d4ad      	bmi.n	801d2f4 <_fseeko_r+0x58>
 801d398:	89a3      	ldrh	r3, [r4, #12]
 801d39a:	0598      	lsls	r0, r3, #22
 801d39c:	d4aa      	bmi.n	801d2f4 <_fseeko_r+0x58>
 801d39e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d3a0:	f000 f9e7 	bl	801d772 <__retarget_lock_release_recursive>
 801d3a4:	e7a8      	b.n	801d2f8 <_fseeko_r+0x5c>
 801d3a6:	4407      	add	r7, r0
 801d3a8:	2600      	movs	r6, #0
 801d3aa:	e7b7      	b.n	801d31c <_fseeko_r+0x80>
 801d3ac:	2316      	movs	r3, #22
 801d3ae:	e79d      	b.n	801d2ec <_fseeko_r+0x50>
 801d3b0:	89a3      	ldrh	r3, [r4, #12]
 801d3b2:	059a      	lsls	r2, r3, #22
 801d3b4:	d49e      	bmi.n	801d2f4 <_fseeko_r+0x58>
 801d3b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d3b8:	f000 f9db 	bl	801d772 <__retarget_lock_release_recursive>
 801d3bc:	e79a      	b.n	801d2f4 <_fseeko_r+0x58>
 801d3be:	462e      	mov	r6, r5
 801d3c0:	e79a      	b.n	801d2f8 <_fseeko_r+0x5c>
 801d3c2:	bf00      	nop
 801d3c4:	08025348 	.word	0x08025348
 801d3c8:	08025368 	.word	0x08025368
 801d3cc:	08025328 	.word	0x08025328

0801d3d0 <_ftello_r>:
 801d3d0:	b570      	push	{r4, r5, r6, lr}
 801d3d2:	460c      	mov	r4, r1
 801d3d4:	4605      	mov	r5, r0
 801d3d6:	b118      	cbz	r0, 801d3e0 <_ftello_r+0x10>
 801d3d8:	6983      	ldr	r3, [r0, #24]
 801d3da:	b90b      	cbnz	r3, 801d3e0 <_ftello_r+0x10>
 801d3dc:	f7ff fe14 	bl	801d008 <__sinit>
 801d3e0:	4b32      	ldr	r3, [pc, #200]	; (801d4ac <_ftello_r+0xdc>)
 801d3e2:	429c      	cmp	r4, r3
 801d3e4:	d114      	bne.n	801d410 <_ftello_r+0x40>
 801d3e6:	686c      	ldr	r4, [r5, #4]
 801d3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d3ea:	07da      	lsls	r2, r3, #31
 801d3ec:	d405      	bmi.n	801d3fa <_ftello_r+0x2a>
 801d3ee:	89a3      	ldrh	r3, [r4, #12]
 801d3f0:	059b      	lsls	r3, r3, #22
 801d3f2:	d402      	bmi.n	801d3fa <_ftello_r+0x2a>
 801d3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d3f6:	f000 f9ba 	bl	801d76e <__retarget_lock_acquire_recursive>
 801d3fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d3fc:	b9ce      	cbnz	r6, 801d432 <_ftello_r+0x62>
 801d3fe:	231d      	movs	r3, #29
 801d400:	602b      	str	r3, [r5, #0]
 801d402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d404:	07de      	lsls	r6, r3, #31
 801d406:	d50d      	bpl.n	801d424 <_ftello_r+0x54>
 801d408:	f04f 35ff 	mov.w	r5, #4294967295
 801d40c:	4628      	mov	r0, r5
 801d40e:	bd70      	pop	{r4, r5, r6, pc}
 801d410:	4b27      	ldr	r3, [pc, #156]	; (801d4b0 <_ftello_r+0xe0>)
 801d412:	429c      	cmp	r4, r3
 801d414:	d101      	bne.n	801d41a <_ftello_r+0x4a>
 801d416:	68ac      	ldr	r4, [r5, #8]
 801d418:	e7e6      	b.n	801d3e8 <_ftello_r+0x18>
 801d41a:	4b26      	ldr	r3, [pc, #152]	; (801d4b4 <_ftello_r+0xe4>)
 801d41c:	429c      	cmp	r4, r3
 801d41e:	bf08      	it	eq
 801d420:	68ec      	ldreq	r4, [r5, #12]
 801d422:	e7e1      	b.n	801d3e8 <_ftello_r+0x18>
 801d424:	89a3      	ldrh	r3, [r4, #12]
 801d426:	059d      	lsls	r5, r3, #22
 801d428:	d4ee      	bmi.n	801d408 <_ftello_r+0x38>
 801d42a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d42c:	f000 f9a1 	bl	801d772 <__retarget_lock_release_recursive>
 801d430:	e7ea      	b.n	801d408 <_ftello_r+0x38>
 801d432:	89a2      	ldrh	r2, [r4, #12]
 801d434:	f002 030c 	and.w	r3, r2, #12
 801d438:	2b08      	cmp	r3, #8
 801d43a:	d119      	bne.n	801d470 <_ftello_r+0xa0>
 801d43c:	6823      	ldr	r3, [r4, #0]
 801d43e:	b1bb      	cbz	r3, 801d470 <_ftello_r+0xa0>
 801d440:	6921      	ldr	r1, [r4, #16]
 801d442:	1a5b      	subs	r3, r3, r1
 801d444:	2b00      	cmp	r3, #0
 801d446:	dd13      	ble.n	801d470 <_ftello_r+0xa0>
 801d448:	05d0      	lsls	r0, r2, #23
 801d44a:	d511      	bpl.n	801d470 <_ftello_r+0xa0>
 801d44c:	2302      	movs	r3, #2
 801d44e:	2200      	movs	r2, #0
 801d450:	6a21      	ldr	r1, [r4, #32]
 801d452:	4628      	mov	r0, r5
 801d454:	47b0      	blx	r6
 801d456:	1c41      	adds	r1, r0, #1
 801d458:	4605      	mov	r5, r0
 801d45a:	d10d      	bne.n	801d478 <_ftello_r+0xa8>
 801d45c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d45e:	07da      	lsls	r2, r3, #31
 801d460:	d4d2      	bmi.n	801d408 <_ftello_r+0x38>
 801d462:	89a3      	ldrh	r3, [r4, #12]
 801d464:	059b      	lsls	r3, r3, #22
 801d466:	d4cf      	bmi.n	801d408 <_ftello_r+0x38>
 801d468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d46a:	f000 f982 	bl	801d772 <__retarget_lock_release_recursive>
 801d46e:	e7cd      	b.n	801d40c <_ftello_r+0x3c>
 801d470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d474:	d00f      	beq.n	801d496 <_ftello_r+0xc6>
 801d476:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801d478:	89a2      	ldrh	r2, [r4, #12]
 801d47a:	0756      	lsls	r6, r2, #29
 801d47c:	d50d      	bpl.n	801d49a <_ftello_r+0xca>
 801d47e:	6863      	ldr	r3, [r4, #4]
 801d480:	1aed      	subs	r5, r5, r3
 801d482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d484:	b10b      	cbz	r3, 801d48a <_ftello_r+0xba>
 801d486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d488:	1aed      	subs	r5, r5, r3
 801d48a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d48c:	07d9      	lsls	r1, r3, #31
 801d48e:	d4bd      	bmi.n	801d40c <_ftello_r+0x3c>
 801d490:	0593      	lsls	r3, r2, #22
 801d492:	d4bb      	bmi.n	801d40c <_ftello_r+0x3c>
 801d494:	e7e8      	b.n	801d468 <_ftello_r+0x98>
 801d496:	2301      	movs	r3, #1
 801d498:	e7da      	b.n	801d450 <_ftello_r+0x80>
 801d49a:	0710      	lsls	r0, r2, #28
 801d49c:	d5f5      	bpl.n	801d48a <_ftello_r+0xba>
 801d49e:	6823      	ldr	r3, [r4, #0]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d0f2      	beq.n	801d48a <_ftello_r+0xba>
 801d4a4:	6921      	ldr	r1, [r4, #16]
 801d4a6:	1a5b      	subs	r3, r3, r1
 801d4a8:	441d      	add	r5, r3
 801d4aa:	e7ee      	b.n	801d48a <_ftello_r+0xba>
 801d4ac:	08025348 	.word	0x08025348
 801d4b0:	08025368 	.word	0x08025368
 801d4b4:	08025328 	.word	0x08025328

0801d4b8 <_fwalk_reent>:
 801d4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4bc:	4606      	mov	r6, r0
 801d4be:	4688      	mov	r8, r1
 801d4c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d4c4:	2700      	movs	r7, #0
 801d4c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d4ca:	f1b9 0901 	subs.w	r9, r9, #1
 801d4ce:	d505      	bpl.n	801d4dc <_fwalk_reent+0x24>
 801d4d0:	6824      	ldr	r4, [r4, #0]
 801d4d2:	2c00      	cmp	r4, #0
 801d4d4:	d1f7      	bne.n	801d4c6 <_fwalk_reent+0xe>
 801d4d6:	4638      	mov	r0, r7
 801d4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4dc:	89ab      	ldrh	r3, [r5, #12]
 801d4de:	2b01      	cmp	r3, #1
 801d4e0:	d907      	bls.n	801d4f2 <_fwalk_reent+0x3a>
 801d4e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d4e6:	3301      	adds	r3, #1
 801d4e8:	d003      	beq.n	801d4f2 <_fwalk_reent+0x3a>
 801d4ea:	4629      	mov	r1, r5
 801d4ec:	4630      	mov	r0, r6
 801d4ee:	47c0      	blx	r8
 801d4f0:	4307      	orrs	r7, r0
 801d4f2:	3568      	adds	r5, #104	; 0x68
 801d4f4:	e7e9      	b.n	801d4ca <_fwalk_reent+0x12>
	...

0801d4f8 <__libc_init_array>:
 801d4f8:	b570      	push	{r4, r5, r6, lr}
 801d4fa:	4d0d      	ldr	r5, [pc, #52]	; (801d530 <__libc_init_array+0x38>)
 801d4fc:	4c0d      	ldr	r4, [pc, #52]	; (801d534 <__libc_init_array+0x3c>)
 801d4fe:	1b64      	subs	r4, r4, r5
 801d500:	10a4      	asrs	r4, r4, #2
 801d502:	2600      	movs	r6, #0
 801d504:	42a6      	cmp	r6, r4
 801d506:	d109      	bne.n	801d51c <__libc_init_array+0x24>
 801d508:	4d0b      	ldr	r5, [pc, #44]	; (801d538 <__libc_init_array+0x40>)
 801d50a:	4c0c      	ldr	r4, [pc, #48]	; (801d53c <__libc_init_array+0x44>)
 801d50c:	f003 f8e0 	bl	80206d0 <_init>
 801d510:	1b64      	subs	r4, r4, r5
 801d512:	10a4      	asrs	r4, r4, #2
 801d514:	2600      	movs	r6, #0
 801d516:	42a6      	cmp	r6, r4
 801d518:	d105      	bne.n	801d526 <__libc_init_array+0x2e>
 801d51a:	bd70      	pop	{r4, r5, r6, pc}
 801d51c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d520:	4798      	blx	r3
 801d522:	3601      	adds	r6, #1
 801d524:	e7ee      	b.n	801d504 <__libc_init_array+0xc>
 801d526:	f855 3b04 	ldr.w	r3, [r5], #4
 801d52a:	4798      	blx	r3
 801d52c:	3601      	adds	r6, #1
 801d52e:	e7f2      	b.n	801d516 <__libc_init_array+0x1e>
 801d530:	08025920 	.word	0x08025920
 801d534:	08025920 	.word	0x08025920
 801d538:	08025920 	.word	0x08025920
 801d53c:	08025930 	.word	0x08025930

0801d540 <localtime>:
 801d540:	b538      	push	{r3, r4, r5, lr}
 801d542:	4b0b      	ldr	r3, [pc, #44]	; (801d570 <localtime+0x30>)
 801d544:	681d      	ldr	r5, [r3, #0]
 801d546:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801d548:	4604      	mov	r4, r0
 801d54a:	b953      	cbnz	r3, 801d562 <localtime+0x22>
 801d54c:	2024      	movs	r0, #36	; 0x24
 801d54e:	f000 f975 	bl	801d83c <malloc>
 801d552:	4602      	mov	r2, r0
 801d554:	63e8      	str	r0, [r5, #60]	; 0x3c
 801d556:	b920      	cbnz	r0, 801d562 <localtime+0x22>
 801d558:	4b06      	ldr	r3, [pc, #24]	; (801d574 <localtime+0x34>)
 801d55a:	4807      	ldr	r0, [pc, #28]	; (801d578 <localtime+0x38>)
 801d55c:	2132      	movs	r1, #50	; 0x32
 801d55e:	f001 fd43 	bl	801efe8 <__assert_func>
 801d562:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801d564:	4620      	mov	r0, r4
 801d566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d56a:	f000 b807 	b.w	801d57c <localtime_r>
 801d56e:	bf00      	nop
 801d570:	20000104 	.word	0x20000104
 801d574:	0802538c 	.word	0x0802538c
 801d578:	080253a3 	.word	0x080253a3

0801d57c <localtime_r>:
 801d57c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d580:	4607      	mov	r7, r0
 801d582:	9101      	str	r1, [sp, #4]
 801d584:	f001 fe0c 	bl	801f1a0 <__gettzinfo>
 801d588:	9901      	ldr	r1, [sp, #4]
 801d58a:	4680      	mov	r8, r0
 801d58c:	4638      	mov	r0, r7
 801d58e:	f001 fe0b 	bl	801f1a8 <gmtime_r>
 801d592:	6943      	ldr	r3, [r0, #20]
 801d594:	079a      	lsls	r2, r3, #30
 801d596:	4604      	mov	r4, r0
 801d598:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801d59c:	d105      	bne.n	801d5aa <localtime_r+0x2e>
 801d59e:	2264      	movs	r2, #100	; 0x64
 801d5a0:	fb96 f3f2 	sdiv	r3, r6, r2
 801d5a4:	fb02 6313 	mls	r3, r2, r3, r6
 801d5a8:	bb7b      	cbnz	r3, 801d60a <localtime_r+0x8e>
 801d5aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d5ae:	fb96 f5f3 	sdiv	r5, r6, r3
 801d5b2:	fb03 6515 	mls	r5, r3, r5, r6
 801d5b6:	fab5 f585 	clz	r5, r5
 801d5ba:	096d      	lsrs	r5, r5, #5
 801d5bc:	4b68      	ldr	r3, [pc, #416]	; (801d760 <localtime_r+0x1e4>)
 801d5be:	2230      	movs	r2, #48	; 0x30
 801d5c0:	fb02 3505 	mla	r5, r2, r5, r3
 801d5c4:	f001 fa10 	bl	801e9e8 <__tz_lock>
 801d5c8:	f001 fa1a 	bl	801ea00 <_tzset_unlocked>
 801d5cc:	4b65      	ldr	r3, [pc, #404]	; (801d764 <localtime_r+0x1e8>)
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	b353      	cbz	r3, 801d628 <localtime_r+0xac>
 801d5d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d5d6:	42b3      	cmp	r3, r6
 801d5d8:	d119      	bne.n	801d60e <localtime_r+0x92>
 801d5da:	f8d8 1000 	ldr.w	r1, [r8]
 801d5de:	e9d7 6700 	ldrd	r6, r7, [r7]
 801d5e2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801d5e6:	b9d1      	cbnz	r1, 801d61e <localtime_r+0xa2>
 801d5e8:	4296      	cmp	r6, r2
 801d5ea:	eb77 0303 	sbcs.w	r3, r7, r3
 801d5ee:	da23      	bge.n	801d638 <localtime_r+0xbc>
 801d5f0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d5f4:	4296      	cmp	r6, r2
 801d5f6:	eb77 0303 	sbcs.w	r3, r7, r3
 801d5fa:	bfb4      	ite	lt
 801d5fc:	2301      	movlt	r3, #1
 801d5fe:	2300      	movge	r3, #0
 801d600:	6223      	str	r3, [r4, #32]
 801d602:	db1b      	blt.n	801d63c <localtime_r+0xc0>
 801d604:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801d608:	e01a      	b.n	801d640 <localtime_r+0xc4>
 801d60a:	2501      	movs	r5, #1
 801d60c:	e7d6      	b.n	801d5bc <localtime_r+0x40>
 801d60e:	4630      	mov	r0, r6
 801d610:	f001 f942 	bl	801e898 <__tzcalc_limits>
 801d614:	2800      	cmp	r0, #0
 801d616:	d1e0      	bne.n	801d5da <localtime_r+0x5e>
 801d618:	f04f 33ff 	mov.w	r3, #4294967295
 801d61c:	e004      	b.n	801d628 <localtime_r+0xac>
 801d61e:	4296      	cmp	r6, r2
 801d620:	eb77 0303 	sbcs.w	r3, r7, r3
 801d624:	da02      	bge.n	801d62c <localtime_r+0xb0>
 801d626:	2300      	movs	r3, #0
 801d628:	6223      	str	r3, [r4, #32]
 801d62a:	e7eb      	b.n	801d604 <localtime_r+0x88>
 801d62c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d630:	4296      	cmp	r6, r2
 801d632:	eb77 0303 	sbcs.w	r3, r7, r3
 801d636:	daf6      	bge.n	801d626 <localtime_r+0xaa>
 801d638:	2301      	movs	r3, #1
 801d63a:	6223      	str	r3, [r4, #32]
 801d63c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801d640:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d644:	203c      	movs	r0, #60	; 0x3c
 801d646:	fb91 f6f3 	sdiv	r6, r1, r3
 801d64a:	fb03 1316 	mls	r3, r3, r6, r1
 801d64e:	6861      	ldr	r1, [r4, #4]
 801d650:	fb93 f2f0 	sdiv	r2, r3, r0
 801d654:	fb00 3012 	mls	r0, r0, r2, r3
 801d658:	6823      	ldr	r3, [r4, #0]
 801d65a:	1a89      	subs	r1, r1, r2
 801d65c:	68a2      	ldr	r2, [r4, #8]
 801d65e:	6061      	str	r1, [r4, #4]
 801d660:	1a1b      	subs	r3, r3, r0
 801d662:	1b92      	subs	r2, r2, r6
 801d664:	2b3b      	cmp	r3, #59	; 0x3b
 801d666:	6023      	str	r3, [r4, #0]
 801d668:	60a2      	str	r2, [r4, #8]
 801d66a:	dd35      	ble.n	801d6d8 <localtime_r+0x15c>
 801d66c:	3101      	adds	r1, #1
 801d66e:	6061      	str	r1, [r4, #4]
 801d670:	3b3c      	subs	r3, #60	; 0x3c
 801d672:	6023      	str	r3, [r4, #0]
 801d674:	6863      	ldr	r3, [r4, #4]
 801d676:	2b3b      	cmp	r3, #59	; 0x3b
 801d678:	dd34      	ble.n	801d6e4 <localtime_r+0x168>
 801d67a:	3201      	adds	r2, #1
 801d67c:	60a2      	str	r2, [r4, #8]
 801d67e:	3b3c      	subs	r3, #60	; 0x3c
 801d680:	6063      	str	r3, [r4, #4]
 801d682:	68a3      	ldr	r3, [r4, #8]
 801d684:	2b17      	cmp	r3, #23
 801d686:	dd33      	ble.n	801d6f0 <localtime_r+0x174>
 801d688:	69e2      	ldr	r2, [r4, #28]
 801d68a:	3201      	adds	r2, #1
 801d68c:	61e2      	str	r2, [r4, #28]
 801d68e:	69a2      	ldr	r2, [r4, #24]
 801d690:	3201      	adds	r2, #1
 801d692:	2a06      	cmp	r2, #6
 801d694:	bfc8      	it	gt
 801d696:	2200      	movgt	r2, #0
 801d698:	61a2      	str	r2, [r4, #24]
 801d69a:	68e2      	ldr	r2, [r4, #12]
 801d69c:	3b18      	subs	r3, #24
 801d69e:	3201      	adds	r2, #1
 801d6a0:	60a3      	str	r3, [r4, #8]
 801d6a2:	6923      	ldr	r3, [r4, #16]
 801d6a4:	60e2      	str	r2, [r4, #12]
 801d6a6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801d6aa:	428a      	cmp	r2, r1
 801d6ac:	dd0e      	ble.n	801d6cc <localtime_r+0x150>
 801d6ae:	2b0b      	cmp	r3, #11
 801d6b0:	eba2 0201 	sub.w	r2, r2, r1
 801d6b4:	60e2      	str	r2, [r4, #12]
 801d6b6:	f103 0201 	add.w	r2, r3, #1
 801d6ba:	bf09      	itett	eq
 801d6bc:	6963      	ldreq	r3, [r4, #20]
 801d6be:	6122      	strne	r2, [r4, #16]
 801d6c0:	2200      	moveq	r2, #0
 801d6c2:	3301      	addeq	r3, #1
 801d6c4:	bf02      	ittt	eq
 801d6c6:	6122      	streq	r2, [r4, #16]
 801d6c8:	6163      	streq	r3, [r4, #20]
 801d6ca:	61e2      	streq	r2, [r4, #28]
 801d6cc:	f001 f992 	bl	801e9f4 <__tz_unlock>
 801d6d0:	4620      	mov	r0, r4
 801d6d2:	b002      	add	sp, #8
 801d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	dacb      	bge.n	801d674 <localtime_r+0xf8>
 801d6dc:	3901      	subs	r1, #1
 801d6de:	6061      	str	r1, [r4, #4]
 801d6e0:	333c      	adds	r3, #60	; 0x3c
 801d6e2:	e7c6      	b.n	801d672 <localtime_r+0xf6>
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	dacc      	bge.n	801d682 <localtime_r+0x106>
 801d6e8:	3a01      	subs	r2, #1
 801d6ea:	60a2      	str	r2, [r4, #8]
 801d6ec:	333c      	adds	r3, #60	; 0x3c
 801d6ee:	e7c7      	b.n	801d680 <localtime_r+0x104>
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	daeb      	bge.n	801d6cc <localtime_r+0x150>
 801d6f4:	69e2      	ldr	r2, [r4, #28]
 801d6f6:	3a01      	subs	r2, #1
 801d6f8:	61e2      	str	r2, [r4, #28]
 801d6fa:	69a2      	ldr	r2, [r4, #24]
 801d6fc:	3a01      	subs	r2, #1
 801d6fe:	bf48      	it	mi
 801d700:	2206      	movmi	r2, #6
 801d702:	61a2      	str	r2, [r4, #24]
 801d704:	68e2      	ldr	r2, [r4, #12]
 801d706:	3318      	adds	r3, #24
 801d708:	3a01      	subs	r2, #1
 801d70a:	60e2      	str	r2, [r4, #12]
 801d70c:	60a3      	str	r3, [r4, #8]
 801d70e:	2a00      	cmp	r2, #0
 801d710:	d1dc      	bne.n	801d6cc <localtime_r+0x150>
 801d712:	6923      	ldr	r3, [r4, #16]
 801d714:	3b01      	subs	r3, #1
 801d716:	d405      	bmi.n	801d724 <localtime_r+0x1a8>
 801d718:	6123      	str	r3, [r4, #16]
 801d71a:	6923      	ldr	r3, [r4, #16]
 801d71c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d720:	60e3      	str	r3, [r4, #12]
 801d722:	e7d3      	b.n	801d6cc <localtime_r+0x150>
 801d724:	230b      	movs	r3, #11
 801d726:	6123      	str	r3, [r4, #16]
 801d728:	6963      	ldr	r3, [r4, #20]
 801d72a:	1e5a      	subs	r2, r3, #1
 801d72c:	6162      	str	r2, [r4, #20]
 801d72e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801d732:	0793      	lsls	r3, r2, #30
 801d734:	d105      	bne.n	801d742 <localtime_r+0x1c6>
 801d736:	2164      	movs	r1, #100	; 0x64
 801d738:	fb92 f3f1 	sdiv	r3, r2, r1
 801d73c:	fb01 2313 	mls	r3, r1, r3, r2
 801d740:	b963      	cbnz	r3, 801d75c <localtime_r+0x1e0>
 801d742:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d746:	fb92 f3f1 	sdiv	r3, r2, r1
 801d74a:	fb01 2313 	mls	r3, r1, r3, r2
 801d74e:	fab3 f383 	clz	r3, r3
 801d752:	095b      	lsrs	r3, r3, #5
 801d754:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801d758:	61e3      	str	r3, [r4, #28]
 801d75a:	e7de      	b.n	801d71a <localtime_r+0x19e>
 801d75c:	2301      	movs	r3, #1
 801d75e:	e7f9      	b.n	801d754 <localtime_r+0x1d8>
 801d760:	08025404 	.word	0x08025404
 801d764:	20000cd8 	.word	0x20000cd8

0801d768 <__retarget_lock_init_recursive>:
 801d768:	4770      	bx	lr

0801d76a <__retarget_lock_close_recursive>:
 801d76a:	4770      	bx	lr

0801d76c <__retarget_lock_acquire>:
 801d76c:	4770      	bx	lr

0801d76e <__retarget_lock_acquire_recursive>:
 801d76e:	4770      	bx	lr

0801d770 <__retarget_lock_release>:
 801d770:	4770      	bx	lr

0801d772 <__retarget_lock_release_recursive>:
 801d772:	4770      	bx	lr

0801d774 <__swhatbuf_r>:
 801d774:	b570      	push	{r4, r5, r6, lr}
 801d776:	460e      	mov	r6, r1
 801d778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d77c:	2900      	cmp	r1, #0
 801d77e:	b096      	sub	sp, #88	; 0x58
 801d780:	4614      	mov	r4, r2
 801d782:	461d      	mov	r5, r3
 801d784:	da07      	bge.n	801d796 <__swhatbuf_r+0x22>
 801d786:	2300      	movs	r3, #0
 801d788:	602b      	str	r3, [r5, #0]
 801d78a:	89b3      	ldrh	r3, [r6, #12]
 801d78c:	061a      	lsls	r2, r3, #24
 801d78e:	d410      	bmi.n	801d7b2 <__swhatbuf_r+0x3e>
 801d790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d794:	e00e      	b.n	801d7b4 <__swhatbuf_r+0x40>
 801d796:	466a      	mov	r2, sp
 801d798:	f001 fc9c 	bl	801f0d4 <_fstat_r>
 801d79c:	2800      	cmp	r0, #0
 801d79e:	dbf2      	blt.n	801d786 <__swhatbuf_r+0x12>
 801d7a0:	9a01      	ldr	r2, [sp, #4]
 801d7a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d7a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d7aa:	425a      	negs	r2, r3
 801d7ac:	415a      	adcs	r2, r3
 801d7ae:	602a      	str	r2, [r5, #0]
 801d7b0:	e7ee      	b.n	801d790 <__swhatbuf_r+0x1c>
 801d7b2:	2340      	movs	r3, #64	; 0x40
 801d7b4:	2000      	movs	r0, #0
 801d7b6:	6023      	str	r3, [r4, #0]
 801d7b8:	b016      	add	sp, #88	; 0x58
 801d7ba:	bd70      	pop	{r4, r5, r6, pc}

0801d7bc <__smakebuf_r>:
 801d7bc:	898b      	ldrh	r3, [r1, #12]
 801d7be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d7c0:	079d      	lsls	r5, r3, #30
 801d7c2:	4606      	mov	r6, r0
 801d7c4:	460c      	mov	r4, r1
 801d7c6:	d507      	bpl.n	801d7d8 <__smakebuf_r+0x1c>
 801d7c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d7cc:	6023      	str	r3, [r4, #0]
 801d7ce:	6123      	str	r3, [r4, #16]
 801d7d0:	2301      	movs	r3, #1
 801d7d2:	6163      	str	r3, [r4, #20]
 801d7d4:	b002      	add	sp, #8
 801d7d6:	bd70      	pop	{r4, r5, r6, pc}
 801d7d8:	ab01      	add	r3, sp, #4
 801d7da:	466a      	mov	r2, sp
 801d7dc:	f7ff ffca 	bl	801d774 <__swhatbuf_r>
 801d7e0:	9900      	ldr	r1, [sp, #0]
 801d7e2:	4605      	mov	r5, r0
 801d7e4:	4630      	mov	r0, r6
 801d7e6:	f000 f8af 	bl	801d948 <_malloc_r>
 801d7ea:	b948      	cbnz	r0, 801d800 <__smakebuf_r+0x44>
 801d7ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d7f0:	059a      	lsls	r2, r3, #22
 801d7f2:	d4ef      	bmi.n	801d7d4 <__smakebuf_r+0x18>
 801d7f4:	f023 0303 	bic.w	r3, r3, #3
 801d7f8:	f043 0302 	orr.w	r3, r3, #2
 801d7fc:	81a3      	strh	r3, [r4, #12]
 801d7fe:	e7e3      	b.n	801d7c8 <__smakebuf_r+0xc>
 801d800:	4b0d      	ldr	r3, [pc, #52]	; (801d838 <__smakebuf_r+0x7c>)
 801d802:	62b3      	str	r3, [r6, #40]	; 0x28
 801d804:	89a3      	ldrh	r3, [r4, #12]
 801d806:	6020      	str	r0, [r4, #0]
 801d808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d80c:	81a3      	strh	r3, [r4, #12]
 801d80e:	9b00      	ldr	r3, [sp, #0]
 801d810:	6163      	str	r3, [r4, #20]
 801d812:	9b01      	ldr	r3, [sp, #4]
 801d814:	6120      	str	r0, [r4, #16]
 801d816:	b15b      	cbz	r3, 801d830 <__smakebuf_r+0x74>
 801d818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d81c:	4630      	mov	r0, r6
 801d81e:	f001 fd73 	bl	801f308 <_isatty_r>
 801d822:	b128      	cbz	r0, 801d830 <__smakebuf_r+0x74>
 801d824:	89a3      	ldrh	r3, [r4, #12]
 801d826:	f023 0303 	bic.w	r3, r3, #3
 801d82a:	f043 0301 	orr.w	r3, r3, #1
 801d82e:	81a3      	strh	r3, [r4, #12]
 801d830:	89a0      	ldrh	r0, [r4, #12]
 801d832:	4305      	orrs	r5, r0
 801d834:	81a5      	strh	r5, [r4, #12]
 801d836:	e7cd      	b.n	801d7d4 <__smakebuf_r+0x18>
 801d838:	0801cfa1 	.word	0x0801cfa1

0801d83c <malloc>:
 801d83c:	4b02      	ldr	r3, [pc, #8]	; (801d848 <malloc+0xc>)
 801d83e:	4601      	mov	r1, r0
 801d840:	6818      	ldr	r0, [r3, #0]
 801d842:	f000 b881 	b.w	801d948 <_malloc_r>
 801d846:	bf00      	nop
 801d848:	20000104 	.word	0x20000104

0801d84c <free>:
 801d84c:	4b02      	ldr	r3, [pc, #8]	; (801d858 <free+0xc>)
 801d84e:	4601      	mov	r1, r0
 801d850:	6818      	ldr	r0, [r3, #0]
 801d852:	f000 b829 	b.w	801d8a8 <_free_r>
 801d856:	bf00      	nop
 801d858:	20000104 	.word	0x20000104

0801d85c <memcpy>:
 801d85c:	440a      	add	r2, r1
 801d85e:	4291      	cmp	r1, r2
 801d860:	f100 33ff 	add.w	r3, r0, #4294967295
 801d864:	d100      	bne.n	801d868 <memcpy+0xc>
 801d866:	4770      	bx	lr
 801d868:	b510      	push	{r4, lr}
 801d86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d872:	4291      	cmp	r1, r2
 801d874:	d1f9      	bne.n	801d86a <memcpy+0xe>
 801d876:	bd10      	pop	{r4, pc}

0801d878 <memset>:
 801d878:	4402      	add	r2, r0
 801d87a:	4603      	mov	r3, r0
 801d87c:	4293      	cmp	r3, r2
 801d87e:	d100      	bne.n	801d882 <memset+0xa>
 801d880:	4770      	bx	lr
 801d882:	f803 1b01 	strb.w	r1, [r3], #1
 801d886:	e7f9      	b.n	801d87c <memset+0x4>

0801d888 <_calloc_r>:
 801d888:	b513      	push	{r0, r1, r4, lr}
 801d88a:	434a      	muls	r2, r1
 801d88c:	4611      	mov	r1, r2
 801d88e:	9201      	str	r2, [sp, #4]
 801d890:	f000 f85a 	bl	801d948 <_malloc_r>
 801d894:	4604      	mov	r4, r0
 801d896:	b118      	cbz	r0, 801d8a0 <_calloc_r+0x18>
 801d898:	9a01      	ldr	r2, [sp, #4]
 801d89a:	2100      	movs	r1, #0
 801d89c:	f7ff ffec 	bl	801d878 <memset>
 801d8a0:	4620      	mov	r0, r4
 801d8a2:	b002      	add	sp, #8
 801d8a4:	bd10      	pop	{r4, pc}
	...

0801d8a8 <_free_r>:
 801d8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d8aa:	2900      	cmp	r1, #0
 801d8ac:	d048      	beq.n	801d940 <_free_r+0x98>
 801d8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d8b2:	9001      	str	r0, [sp, #4]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	f1a1 0404 	sub.w	r4, r1, #4
 801d8ba:	bfb8      	it	lt
 801d8bc:	18e4      	addlt	r4, r4, r3
 801d8be:	f001 fd5b 	bl	801f378 <__malloc_lock>
 801d8c2:	4a20      	ldr	r2, [pc, #128]	; (801d944 <_free_r+0x9c>)
 801d8c4:	9801      	ldr	r0, [sp, #4]
 801d8c6:	6813      	ldr	r3, [r2, #0]
 801d8c8:	4615      	mov	r5, r2
 801d8ca:	b933      	cbnz	r3, 801d8da <_free_r+0x32>
 801d8cc:	6063      	str	r3, [r4, #4]
 801d8ce:	6014      	str	r4, [r2, #0]
 801d8d0:	b003      	add	sp, #12
 801d8d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8d6:	f001 bd55 	b.w	801f384 <__malloc_unlock>
 801d8da:	42a3      	cmp	r3, r4
 801d8dc:	d90b      	bls.n	801d8f6 <_free_r+0x4e>
 801d8de:	6821      	ldr	r1, [r4, #0]
 801d8e0:	1862      	adds	r2, r4, r1
 801d8e2:	4293      	cmp	r3, r2
 801d8e4:	bf04      	itt	eq
 801d8e6:	681a      	ldreq	r2, [r3, #0]
 801d8e8:	685b      	ldreq	r3, [r3, #4]
 801d8ea:	6063      	str	r3, [r4, #4]
 801d8ec:	bf04      	itt	eq
 801d8ee:	1852      	addeq	r2, r2, r1
 801d8f0:	6022      	streq	r2, [r4, #0]
 801d8f2:	602c      	str	r4, [r5, #0]
 801d8f4:	e7ec      	b.n	801d8d0 <_free_r+0x28>
 801d8f6:	461a      	mov	r2, r3
 801d8f8:	685b      	ldr	r3, [r3, #4]
 801d8fa:	b10b      	cbz	r3, 801d900 <_free_r+0x58>
 801d8fc:	42a3      	cmp	r3, r4
 801d8fe:	d9fa      	bls.n	801d8f6 <_free_r+0x4e>
 801d900:	6811      	ldr	r1, [r2, #0]
 801d902:	1855      	adds	r5, r2, r1
 801d904:	42a5      	cmp	r5, r4
 801d906:	d10b      	bne.n	801d920 <_free_r+0x78>
 801d908:	6824      	ldr	r4, [r4, #0]
 801d90a:	4421      	add	r1, r4
 801d90c:	1854      	adds	r4, r2, r1
 801d90e:	42a3      	cmp	r3, r4
 801d910:	6011      	str	r1, [r2, #0]
 801d912:	d1dd      	bne.n	801d8d0 <_free_r+0x28>
 801d914:	681c      	ldr	r4, [r3, #0]
 801d916:	685b      	ldr	r3, [r3, #4]
 801d918:	6053      	str	r3, [r2, #4]
 801d91a:	4421      	add	r1, r4
 801d91c:	6011      	str	r1, [r2, #0]
 801d91e:	e7d7      	b.n	801d8d0 <_free_r+0x28>
 801d920:	d902      	bls.n	801d928 <_free_r+0x80>
 801d922:	230c      	movs	r3, #12
 801d924:	6003      	str	r3, [r0, #0]
 801d926:	e7d3      	b.n	801d8d0 <_free_r+0x28>
 801d928:	6825      	ldr	r5, [r4, #0]
 801d92a:	1961      	adds	r1, r4, r5
 801d92c:	428b      	cmp	r3, r1
 801d92e:	bf04      	itt	eq
 801d930:	6819      	ldreq	r1, [r3, #0]
 801d932:	685b      	ldreq	r3, [r3, #4]
 801d934:	6063      	str	r3, [r4, #4]
 801d936:	bf04      	itt	eq
 801d938:	1949      	addeq	r1, r1, r5
 801d93a:	6021      	streq	r1, [r4, #0]
 801d93c:	6054      	str	r4, [r2, #4]
 801d93e:	e7c7      	b.n	801d8d0 <_free_r+0x28>
 801d940:	b003      	add	sp, #12
 801d942:	bd30      	pop	{r4, r5, pc}
 801d944:	20000cb4 	.word	0x20000cb4

0801d948 <_malloc_r>:
 801d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d94a:	1ccd      	adds	r5, r1, #3
 801d94c:	f025 0503 	bic.w	r5, r5, #3
 801d950:	3508      	adds	r5, #8
 801d952:	2d0c      	cmp	r5, #12
 801d954:	bf38      	it	cc
 801d956:	250c      	movcc	r5, #12
 801d958:	2d00      	cmp	r5, #0
 801d95a:	4606      	mov	r6, r0
 801d95c:	db01      	blt.n	801d962 <_malloc_r+0x1a>
 801d95e:	42a9      	cmp	r1, r5
 801d960:	d903      	bls.n	801d96a <_malloc_r+0x22>
 801d962:	230c      	movs	r3, #12
 801d964:	6033      	str	r3, [r6, #0]
 801d966:	2000      	movs	r0, #0
 801d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d96a:	f001 fd05 	bl	801f378 <__malloc_lock>
 801d96e:	4921      	ldr	r1, [pc, #132]	; (801d9f4 <_malloc_r+0xac>)
 801d970:	680a      	ldr	r2, [r1, #0]
 801d972:	4614      	mov	r4, r2
 801d974:	b99c      	cbnz	r4, 801d99e <_malloc_r+0x56>
 801d976:	4f20      	ldr	r7, [pc, #128]	; (801d9f8 <_malloc_r+0xb0>)
 801d978:	683b      	ldr	r3, [r7, #0]
 801d97a:	b923      	cbnz	r3, 801d986 <_malloc_r+0x3e>
 801d97c:	4621      	mov	r1, r4
 801d97e:	4630      	mov	r0, r6
 801d980:	f000 f8da 	bl	801db38 <_sbrk_r>
 801d984:	6038      	str	r0, [r7, #0]
 801d986:	4629      	mov	r1, r5
 801d988:	4630      	mov	r0, r6
 801d98a:	f000 f8d5 	bl	801db38 <_sbrk_r>
 801d98e:	1c43      	adds	r3, r0, #1
 801d990:	d123      	bne.n	801d9da <_malloc_r+0x92>
 801d992:	230c      	movs	r3, #12
 801d994:	6033      	str	r3, [r6, #0]
 801d996:	4630      	mov	r0, r6
 801d998:	f001 fcf4 	bl	801f384 <__malloc_unlock>
 801d99c:	e7e3      	b.n	801d966 <_malloc_r+0x1e>
 801d99e:	6823      	ldr	r3, [r4, #0]
 801d9a0:	1b5b      	subs	r3, r3, r5
 801d9a2:	d417      	bmi.n	801d9d4 <_malloc_r+0x8c>
 801d9a4:	2b0b      	cmp	r3, #11
 801d9a6:	d903      	bls.n	801d9b0 <_malloc_r+0x68>
 801d9a8:	6023      	str	r3, [r4, #0]
 801d9aa:	441c      	add	r4, r3
 801d9ac:	6025      	str	r5, [r4, #0]
 801d9ae:	e004      	b.n	801d9ba <_malloc_r+0x72>
 801d9b0:	6863      	ldr	r3, [r4, #4]
 801d9b2:	42a2      	cmp	r2, r4
 801d9b4:	bf0c      	ite	eq
 801d9b6:	600b      	streq	r3, [r1, #0]
 801d9b8:	6053      	strne	r3, [r2, #4]
 801d9ba:	4630      	mov	r0, r6
 801d9bc:	f001 fce2 	bl	801f384 <__malloc_unlock>
 801d9c0:	f104 000b 	add.w	r0, r4, #11
 801d9c4:	1d23      	adds	r3, r4, #4
 801d9c6:	f020 0007 	bic.w	r0, r0, #7
 801d9ca:	1ac2      	subs	r2, r0, r3
 801d9cc:	d0cc      	beq.n	801d968 <_malloc_r+0x20>
 801d9ce:	1a1b      	subs	r3, r3, r0
 801d9d0:	50a3      	str	r3, [r4, r2]
 801d9d2:	e7c9      	b.n	801d968 <_malloc_r+0x20>
 801d9d4:	4622      	mov	r2, r4
 801d9d6:	6864      	ldr	r4, [r4, #4]
 801d9d8:	e7cc      	b.n	801d974 <_malloc_r+0x2c>
 801d9da:	1cc4      	adds	r4, r0, #3
 801d9dc:	f024 0403 	bic.w	r4, r4, #3
 801d9e0:	42a0      	cmp	r0, r4
 801d9e2:	d0e3      	beq.n	801d9ac <_malloc_r+0x64>
 801d9e4:	1a21      	subs	r1, r4, r0
 801d9e6:	4630      	mov	r0, r6
 801d9e8:	f000 f8a6 	bl	801db38 <_sbrk_r>
 801d9ec:	3001      	adds	r0, #1
 801d9ee:	d1dd      	bne.n	801d9ac <_malloc_r+0x64>
 801d9f0:	e7cf      	b.n	801d992 <_malloc_r+0x4a>
 801d9f2:	bf00      	nop
 801d9f4:	20000cb4 	.word	0x20000cb4
 801d9f8:	20000cb8 	.word	0x20000cb8

0801d9fc <_open_r>:
 801d9fc:	b538      	push	{r3, r4, r5, lr}
 801d9fe:	4d07      	ldr	r5, [pc, #28]	; (801da1c <_open_r+0x20>)
 801da00:	4604      	mov	r4, r0
 801da02:	4608      	mov	r0, r1
 801da04:	4611      	mov	r1, r2
 801da06:	2200      	movs	r2, #0
 801da08:	602a      	str	r2, [r5, #0]
 801da0a:	461a      	mov	r2, r3
 801da0c:	f7e3 fa30 	bl	8000e70 <_open>
 801da10:	1c43      	adds	r3, r0, #1
 801da12:	d102      	bne.n	801da1a <_open_r+0x1e>
 801da14:	682b      	ldr	r3, [r5, #0]
 801da16:	b103      	cbz	r3, 801da1a <_open_r+0x1e>
 801da18:	6023      	str	r3, [r4, #0]
 801da1a:	bd38      	pop	{r3, r4, r5, pc}
 801da1c:	20000d80 	.word	0x20000d80

0801da20 <putchar>:
 801da20:	4b09      	ldr	r3, [pc, #36]	; (801da48 <putchar+0x28>)
 801da22:	b513      	push	{r0, r1, r4, lr}
 801da24:	681c      	ldr	r4, [r3, #0]
 801da26:	4601      	mov	r1, r0
 801da28:	b134      	cbz	r4, 801da38 <putchar+0x18>
 801da2a:	69a3      	ldr	r3, [r4, #24]
 801da2c:	b923      	cbnz	r3, 801da38 <putchar+0x18>
 801da2e:	9001      	str	r0, [sp, #4]
 801da30:	4620      	mov	r0, r4
 801da32:	f7ff fae9 	bl	801d008 <__sinit>
 801da36:	9901      	ldr	r1, [sp, #4]
 801da38:	68a2      	ldr	r2, [r4, #8]
 801da3a:	4620      	mov	r0, r4
 801da3c:	b002      	add	sp, #8
 801da3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da42:	f002 b915 	b.w	801fc70 <_putc_r>
 801da46:	bf00      	nop
 801da48:	20000104 	.word	0x20000104

0801da4c <srand>:
 801da4c:	b538      	push	{r3, r4, r5, lr}
 801da4e:	4b10      	ldr	r3, [pc, #64]	; (801da90 <srand+0x44>)
 801da50:	681d      	ldr	r5, [r3, #0]
 801da52:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801da54:	4604      	mov	r4, r0
 801da56:	b9b3      	cbnz	r3, 801da86 <srand+0x3a>
 801da58:	2018      	movs	r0, #24
 801da5a:	f7ff feef 	bl	801d83c <malloc>
 801da5e:	4602      	mov	r2, r0
 801da60:	63a8      	str	r0, [r5, #56]	; 0x38
 801da62:	b920      	cbnz	r0, 801da6e <srand+0x22>
 801da64:	4b0b      	ldr	r3, [pc, #44]	; (801da94 <srand+0x48>)
 801da66:	480c      	ldr	r0, [pc, #48]	; (801da98 <srand+0x4c>)
 801da68:	2142      	movs	r1, #66	; 0x42
 801da6a:	f001 fabd 	bl	801efe8 <__assert_func>
 801da6e:	490b      	ldr	r1, [pc, #44]	; (801da9c <srand+0x50>)
 801da70:	4b0b      	ldr	r3, [pc, #44]	; (801daa0 <srand+0x54>)
 801da72:	e9c0 1300 	strd	r1, r3, [r0]
 801da76:	4b0b      	ldr	r3, [pc, #44]	; (801daa4 <srand+0x58>)
 801da78:	6083      	str	r3, [r0, #8]
 801da7a:	230b      	movs	r3, #11
 801da7c:	8183      	strh	r3, [r0, #12]
 801da7e:	2100      	movs	r1, #0
 801da80:	2001      	movs	r0, #1
 801da82:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801da86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801da88:	2200      	movs	r2, #0
 801da8a:	611c      	str	r4, [r3, #16]
 801da8c:	615a      	str	r2, [r3, #20]
 801da8e:	bd38      	pop	{r3, r4, r5, pc}
 801da90:	20000104 	.word	0x20000104
 801da94:	0802538c 	.word	0x0802538c
 801da98:	08025464 	.word	0x08025464
 801da9c:	abcd330e 	.word	0xabcd330e
 801daa0:	e66d1234 	.word	0xe66d1234
 801daa4:	0005deec 	.word	0x0005deec

0801daa8 <rand>:
 801daa8:	4b17      	ldr	r3, [pc, #92]	; (801db08 <rand+0x60>)
 801daaa:	b510      	push	{r4, lr}
 801daac:	681c      	ldr	r4, [r3, #0]
 801daae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dab0:	b9b3      	cbnz	r3, 801dae0 <rand+0x38>
 801dab2:	2018      	movs	r0, #24
 801dab4:	f7ff fec2 	bl	801d83c <malloc>
 801dab8:	63a0      	str	r0, [r4, #56]	; 0x38
 801daba:	b928      	cbnz	r0, 801dac8 <rand+0x20>
 801dabc:	4602      	mov	r2, r0
 801dabe:	4b13      	ldr	r3, [pc, #76]	; (801db0c <rand+0x64>)
 801dac0:	4813      	ldr	r0, [pc, #76]	; (801db10 <rand+0x68>)
 801dac2:	214e      	movs	r1, #78	; 0x4e
 801dac4:	f001 fa90 	bl	801efe8 <__assert_func>
 801dac8:	4a12      	ldr	r2, [pc, #72]	; (801db14 <rand+0x6c>)
 801daca:	4b13      	ldr	r3, [pc, #76]	; (801db18 <rand+0x70>)
 801dacc:	e9c0 2300 	strd	r2, r3, [r0]
 801dad0:	4b12      	ldr	r3, [pc, #72]	; (801db1c <rand+0x74>)
 801dad2:	6083      	str	r3, [r0, #8]
 801dad4:	230b      	movs	r3, #11
 801dad6:	8183      	strh	r3, [r0, #12]
 801dad8:	2201      	movs	r2, #1
 801dada:	2300      	movs	r3, #0
 801dadc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801dae0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801dae2:	480f      	ldr	r0, [pc, #60]	; (801db20 <rand+0x78>)
 801dae4:	690a      	ldr	r2, [r1, #16]
 801dae6:	694b      	ldr	r3, [r1, #20]
 801dae8:	4c0e      	ldr	r4, [pc, #56]	; (801db24 <rand+0x7c>)
 801daea:	4350      	muls	r0, r2
 801daec:	fb04 0003 	mla	r0, r4, r3, r0
 801daf0:	fba2 3404 	umull	r3, r4, r2, r4
 801daf4:	1c5a      	adds	r2, r3, #1
 801daf6:	4404      	add	r4, r0
 801daf8:	f144 0000 	adc.w	r0, r4, #0
 801dafc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801db00:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801db04:	bd10      	pop	{r4, pc}
 801db06:	bf00      	nop
 801db08:	20000104 	.word	0x20000104
 801db0c:	0802538c 	.word	0x0802538c
 801db10:	08025464 	.word	0x08025464
 801db14:	abcd330e 	.word	0xabcd330e
 801db18:	e66d1234 	.word	0xe66d1234
 801db1c:	0005deec 	.word	0x0005deec
 801db20:	5851f42d 	.word	0x5851f42d
 801db24:	4c957f2d 	.word	0x4c957f2d

0801db28 <realloc>:
 801db28:	4b02      	ldr	r3, [pc, #8]	; (801db34 <realloc+0xc>)
 801db2a:	460a      	mov	r2, r1
 801db2c:	4601      	mov	r1, r0
 801db2e:	6818      	ldr	r0, [r3, #0]
 801db30:	f001 bc2e 	b.w	801f390 <_realloc_r>
 801db34:	20000104 	.word	0x20000104

0801db38 <_sbrk_r>:
 801db38:	b538      	push	{r3, r4, r5, lr}
 801db3a:	4d06      	ldr	r5, [pc, #24]	; (801db54 <_sbrk_r+0x1c>)
 801db3c:	2300      	movs	r3, #0
 801db3e:	4604      	mov	r4, r0
 801db40:	4608      	mov	r0, r1
 801db42:	602b      	str	r3, [r5, #0]
 801db44:	f7e3 f9a2 	bl	8000e8c <_sbrk>
 801db48:	1c43      	adds	r3, r0, #1
 801db4a:	d102      	bne.n	801db52 <_sbrk_r+0x1a>
 801db4c:	682b      	ldr	r3, [r5, #0]
 801db4e:	b103      	cbz	r3, 801db52 <_sbrk_r+0x1a>
 801db50:	6023      	str	r3, [r4, #0]
 801db52:	bd38      	pop	{r3, r4, r5, pc}
 801db54:	20000d80 	.word	0x20000d80

0801db58 <_raise_r>:
 801db58:	291f      	cmp	r1, #31
 801db5a:	b538      	push	{r3, r4, r5, lr}
 801db5c:	4604      	mov	r4, r0
 801db5e:	460d      	mov	r5, r1
 801db60:	d904      	bls.n	801db6c <_raise_r+0x14>
 801db62:	2316      	movs	r3, #22
 801db64:	6003      	str	r3, [r0, #0]
 801db66:	f04f 30ff 	mov.w	r0, #4294967295
 801db6a:	bd38      	pop	{r3, r4, r5, pc}
 801db6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801db6e:	b112      	cbz	r2, 801db76 <_raise_r+0x1e>
 801db70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801db74:	b94b      	cbnz	r3, 801db8a <_raise_r+0x32>
 801db76:	4620      	mov	r0, r4
 801db78:	f000 f830 	bl	801dbdc <_getpid_r>
 801db7c:	462a      	mov	r2, r5
 801db7e:	4601      	mov	r1, r0
 801db80:	4620      	mov	r0, r4
 801db82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db86:	f000 b817 	b.w	801dbb8 <_kill_r>
 801db8a:	2b01      	cmp	r3, #1
 801db8c:	d00a      	beq.n	801dba4 <_raise_r+0x4c>
 801db8e:	1c59      	adds	r1, r3, #1
 801db90:	d103      	bne.n	801db9a <_raise_r+0x42>
 801db92:	2316      	movs	r3, #22
 801db94:	6003      	str	r3, [r0, #0]
 801db96:	2001      	movs	r0, #1
 801db98:	e7e7      	b.n	801db6a <_raise_r+0x12>
 801db9a:	2400      	movs	r4, #0
 801db9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dba0:	4628      	mov	r0, r5
 801dba2:	4798      	blx	r3
 801dba4:	2000      	movs	r0, #0
 801dba6:	e7e0      	b.n	801db6a <_raise_r+0x12>

0801dba8 <raise>:
 801dba8:	4b02      	ldr	r3, [pc, #8]	; (801dbb4 <raise+0xc>)
 801dbaa:	4601      	mov	r1, r0
 801dbac:	6818      	ldr	r0, [r3, #0]
 801dbae:	f7ff bfd3 	b.w	801db58 <_raise_r>
 801dbb2:	bf00      	nop
 801dbb4:	20000104 	.word	0x20000104

0801dbb8 <_kill_r>:
 801dbb8:	b538      	push	{r3, r4, r5, lr}
 801dbba:	4d07      	ldr	r5, [pc, #28]	; (801dbd8 <_kill_r+0x20>)
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	4604      	mov	r4, r0
 801dbc0:	4608      	mov	r0, r1
 801dbc2:	4611      	mov	r1, r2
 801dbc4:	602b      	str	r3, [r5, #0]
 801dbc6:	f7e3 f8cc 	bl	8000d62 <_kill>
 801dbca:	1c43      	adds	r3, r0, #1
 801dbcc:	d102      	bne.n	801dbd4 <_kill_r+0x1c>
 801dbce:	682b      	ldr	r3, [r5, #0]
 801dbd0:	b103      	cbz	r3, 801dbd4 <_kill_r+0x1c>
 801dbd2:	6023      	str	r3, [r4, #0]
 801dbd4:	bd38      	pop	{r3, r4, r5, pc}
 801dbd6:	bf00      	nop
 801dbd8:	20000d80 	.word	0x20000d80

0801dbdc <_getpid_r>:
 801dbdc:	f7e3 b8b9 	b.w	8000d52 <_getpid>

0801dbe0 <__sread>:
 801dbe0:	b510      	push	{r4, lr}
 801dbe2:	460c      	mov	r4, r1
 801dbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbe8:	f002 f88a 	bl	801fd00 <_read_r>
 801dbec:	2800      	cmp	r0, #0
 801dbee:	bfab      	itete	ge
 801dbf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dbf2:	89a3      	ldrhlt	r3, [r4, #12]
 801dbf4:	181b      	addge	r3, r3, r0
 801dbf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dbfa:	bfac      	ite	ge
 801dbfc:	6563      	strge	r3, [r4, #84]	; 0x54
 801dbfe:	81a3      	strhlt	r3, [r4, #12]
 801dc00:	bd10      	pop	{r4, pc}

0801dc02 <__seofread>:
 801dc02:	2000      	movs	r0, #0
 801dc04:	4770      	bx	lr

0801dc06 <__swrite>:
 801dc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc0a:	461f      	mov	r7, r3
 801dc0c:	898b      	ldrh	r3, [r1, #12]
 801dc0e:	05db      	lsls	r3, r3, #23
 801dc10:	4605      	mov	r5, r0
 801dc12:	460c      	mov	r4, r1
 801dc14:	4616      	mov	r6, r2
 801dc16:	d505      	bpl.n	801dc24 <__swrite+0x1e>
 801dc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc1c:	2302      	movs	r3, #2
 801dc1e:	2200      	movs	r2, #0
 801dc20:	f001 fb86 	bl	801f330 <_lseek_r>
 801dc24:	89a3      	ldrh	r3, [r4, #12]
 801dc26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dc2e:	81a3      	strh	r3, [r4, #12]
 801dc30:	4632      	mov	r2, r6
 801dc32:	463b      	mov	r3, r7
 801dc34:	4628      	mov	r0, r5
 801dc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc3a:	f001 b8ef 	b.w	801ee1c <_write_r>

0801dc3e <__sseek>:
 801dc3e:	b510      	push	{r4, lr}
 801dc40:	460c      	mov	r4, r1
 801dc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc46:	f001 fb73 	bl	801f330 <_lseek_r>
 801dc4a:	1c43      	adds	r3, r0, #1
 801dc4c:	89a3      	ldrh	r3, [r4, #12]
 801dc4e:	bf15      	itete	ne
 801dc50:	6560      	strne	r0, [r4, #84]	; 0x54
 801dc52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dc56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dc5a:	81a3      	strheq	r3, [r4, #12]
 801dc5c:	bf18      	it	ne
 801dc5e:	81a3      	strhne	r3, [r4, #12]
 801dc60:	bd10      	pop	{r4, pc}

0801dc62 <__sclose>:
 801dc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc66:	f001 b9dd 	b.w	801f024 <_close_r>
	...

0801dc6c <iso_year_adjust>:
 801dc6c:	6941      	ldr	r1, [r0, #20]
 801dc6e:	2900      	cmp	r1, #0
 801dc70:	f240 736c 	movw	r3, #1900	; 0x76c
 801dc74:	bfa8      	it	ge
 801dc76:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801dc7a:	18ca      	adds	r2, r1, r3
 801dc7c:	078b      	lsls	r3, r1, #30
 801dc7e:	d105      	bne.n	801dc8c <iso_year_adjust+0x20>
 801dc80:	2164      	movs	r1, #100	; 0x64
 801dc82:	fb92 f3f1 	sdiv	r3, r2, r1
 801dc86:	fb01 2313 	mls	r3, r1, r3, r2
 801dc8a:	b9db      	cbnz	r3, 801dcc4 <iso_year_adjust+0x58>
 801dc8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801dc90:	fb92 f3f1 	sdiv	r3, r2, r1
 801dc94:	fb01 2313 	mls	r3, r1, r3, r2
 801dc98:	fab3 f383 	clz	r3, r3
 801dc9c:	095b      	lsrs	r3, r3, #5
 801dc9e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801dca2:	0040      	lsls	r0, r0, #1
 801dca4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801dca8:	4418      	add	r0, r3
 801dcaa:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801dcae:	4298      	cmp	r0, r3
 801dcb0:	d03a      	beq.n	801dd28 <iso_year_adjust+0xbc>
 801dcb2:	dc21      	bgt.n	801dcf8 <iso_year_adjust+0x8c>
 801dcb4:	2801      	cmp	r0, #1
 801dcb6:	dc1a      	bgt.n	801dcee <iso_year_adjust+0x82>
 801dcb8:	2800      	cmp	r0, #0
 801dcba:	bfb4      	ite	lt
 801dcbc:	2000      	movlt	r0, #0
 801dcbe:	f04f 30ff 	movge.w	r0, #4294967295
 801dcc2:	4770      	bx	lr
 801dcc4:	2301      	movs	r3, #1
 801dcc6:	e7ea      	b.n	801dc9e <iso_year_adjust+0x32>
 801dcc8:	2817      	cmp	r0, #23
 801dcca:	d813      	bhi.n	801dcf4 <iso_year_adjust+0x88>
 801dccc:	e8df f000 	tbb	[pc, r0]
 801dcd0:	0c0c0c0c 	.word	0x0c0c0c0c
 801dcd4:	0c0c1212 	.word	0x0c0c1212
 801dcd8:	12121212 	.word	0x12121212
 801dcdc:	12121212 	.word	0x12121212
 801dce0:	0c0c1212 	.word	0x0c0c1212
 801dce4:	0c0c1212 	.word	0x0c0c1212
 801dce8:	f04f 30ff 	mov.w	r0, #4294967295
 801dcec:	4770      	bx	lr
 801dcee:	380a      	subs	r0, #10
 801dcf0:	2817      	cmp	r0, #23
 801dcf2:	d9e9      	bls.n	801dcc8 <iso_year_adjust+0x5c>
 801dcf4:	2000      	movs	r0, #0
 801dcf6:	4770      	bx	lr
 801dcf8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801dcfc:	4298      	cmp	r0, r3
 801dcfe:	dc06      	bgt.n	801dd0e <iso_year_adjust+0xa2>
 801dd00:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801dd04:	4298      	cmp	r0, r3
 801dd06:	bfd4      	ite	le
 801dd08:	2000      	movle	r0, #0
 801dd0a:	2001      	movgt	r0, #1
 801dd0c:	4770      	bx	lr
 801dd0e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801dd12:	3802      	subs	r0, #2
 801dd14:	2815      	cmp	r0, #21
 801dd16:	d8ed      	bhi.n	801dcf4 <iso_year_adjust+0x88>
 801dd18:	2301      	movs	r3, #1
 801dd1a:	4083      	lsls	r3, r0
 801dd1c:	4803      	ldr	r0, [pc, #12]	; (801dd2c <iso_year_adjust+0xc0>)
 801dd1e:	4018      	ands	r0, r3
 801dd20:	3800      	subs	r0, #0
 801dd22:	bf18      	it	ne
 801dd24:	2001      	movne	r0, #1
 801dd26:	4770      	bx	lr
 801dd28:	2001      	movs	r0, #1
 801dd2a:	4770      	bx	lr
 801dd2c:	002a001f 	.word	0x002a001f

0801dd30 <__strftime>:
 801dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd34:	b091      	sub	sp, #68	; 0x44
 801dd36:	461d      	mov	r5, r3
 801dd38:	2300      	movs	r3, #0
 801dd3a:	4681      	mov	r9, r0
 801dd3c:	4688      	mov	r8, r1
 801dd3e:	9304      	str	r3, [sp, #16]
 801dd40:	461c      	mov	r4, r3
 801dd42:	7813      	ldrb	r3, [r2, #0]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	f000 84d1 	beq.w	801e6ec <__strftime+0x9bc>
 801dd4a:	2b25      	cmp	r3, #37	; 0x25
 801dd4c:	d11b      	bne.n	801dd86 <__strftime+0x56>
 801dd4e:	7857      	ldrb	r7, [r2, #1]
 801dd50:	2f30      	cmp	r7, #48	; 0x30
 801dd52:	d024      	beq.n	801dd9e <__strftime+0x6e>
 801dd54:	2f2b      	cmp	r7, #43	; 0x2b
 801dd56:	d022      	beq.n	801dd9e <__strftime+0x6e>
 801dd58:	f102 0b01 	add.w	fp, r2, #1
 801dd5c:	2700      	movs	r7, #0
 801dd5e:	f89b 3000 	ldrb.w	r3, [fp]
 801dd62:	3b31      	subs	r3, #49	; 0x31
 801dd64:	2b08      	cmp	r3, #8
 801dd66:	d81d      	bhi.n	801dda4 <__strftime+0x74>
 801dd68:	4658      	mov	r0, fp
 801dd6a:	220a      	movs	r2, #10
 801dd6c:	a908      	add	r1, sp, #32
 801dd6e:	f000 fd6f 	bl	801e850 <strtoul>
 801dd72:	f8dd b020 	ldr.w	fp, [sp, #32]
 801dd76:	4606      	mov	r6, r0
 801dd78:	f89b 3000 	ldrb.w	r3, [fp]
 801dd7c:	2b45      	cmp	r3, #69	; 0x45
 801dd7e:	d113      	bne.n	801dda8 <__strftime+0x78>
 801dd80:	f10b 0b01 	add.w	fp, fp, #1
 801dd84:	e012      	b.n	801ddac <__strftime+0x7c>
 801dd86:	f108 31ff 	add.w	r1, r8, #4294967295
 801dd8a:	42a1      	cmp	r1, r4
 801dd8c:	d802      	bhi.n	801dd94 <__strftime+0x64>
 801dd8e:	2400      	movs	r4, #0
 801dd90:	f000 bcb2 	b.w	801e6f8 <__strftime+0x9c8>
 801dd94:	f809 3004 	strb.w	r3, [r9, r4]
 801dd98:	3201      	adds	r2, #1
 801dd9a:	3401      	adds	r4, #1
 801dd9c:	e7d1      	b.n	801dd42 <__strftime+0x12>
 801dd9e:	f102 0b02 	add.w	fp, r2, #2
 801dda2:	e7dc      	b.n	801dd5e <__strftime+0x2e>
 801dda4:	2600      	movs	r6, #0
 801dda6:	e7e7      	b.n	801dd78 <__strftime+0x48>
 801dda8:	2b4f      	cmp	r3, #79	; 0x4f
 801ddaa:	d0e9      	beq.n	801dd80 <__strftime+0x50>
 801ddac:	f89b 0000 	ldrb.w	r0, [fp]
 801ddb0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801ddb4:	2b55      	cmp	r3, #85	; 0x55
 801ddb6:	d8ea      	bhi.n	801dd8e <__strftime+0x5e>
 801ddb8:	a201      	add	r2, pc, #4	; (adr r2, 801ddc0 <__strftime+0x90>)
 801ddba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ddbe:	bf00      	nop
 801ddc0:	0801e6df 	.word	0x0801e6df
 801ddc4:	0801dd8f 	.word	0x0801dd8f
 801ddc8:	0801dd8f 	.word	0x0801dd8f
 801ddcc:	0801dd8f 	.word	0x0801dd8f
 801ddd0:	0801dd8f 	.word	0x0801dd8f
 801ddd4:	0801dd8f 	.word	0x0801dd8f
 801ddd8:	0801dd8f 	.word	0x0801dd8f
 801dddc:	0801dd8f 	.word	0x0801dd8f
 801dde0:	0801dd8f 	.word	0x0801dd8f
 801dde4:	0801dd8f 	.word	0x0801dd8f
 801dde8:	0801dd8f 	.word	0x0801dd8f
 801ddec:	0801dd8f 	.word	0x0801dd8f
 801ddf0:	0801dd8f 	.word	0x0801dd8f
 801ddf4:	0801dd8f 	.word	0x0801dd8f
 801ddf8:	0801dd8f 	.word	0x0801dd8f
 801ddfc:	0801dd8f 	.word	0x0801dd8f
 801de00:	0801dd8f 	.word	0x0801dd8f
 801de04:	0801dd8f 	.word	0x0801dd8f
 801de08:	0801dd8f 	.word	0x0801dd8f
 801de0c:	0801dd8f 	.word	0x0801dd8f
 801de10:	0801dd8f 	.word	0x0801dd8f
 801de14:	0801dd8f 	.word	0x0801dd8f
 801de18:	0801dd8f 	.word	0x0801dd8f
 801de1c:	0801dd8f 	.word	0x0801dd8f
 801de20:	0801dd8f 	.word	0x0801dd8f
 801de24:	0801dd8f 	.word	0x0801dd8f
 801de28:	0801dd8f 	.word	0x0801dd8f
 801de2c:	0801dd8f 	.word	0x0801dd8f
 801de30:	0801df57 	.word	0x0801df57
 801de34:	0801dfb1 	.word	0x0801dfb1
 801de38:	0801e027 	.word	0x0801e027
 801de3c:	0801e0c1 	.word	0x0801e0c1
 801de40:	0801dd8f 	.word	0x0801dd8f
 801de44:	0801e10d 	.word	0x0801e10d
 801de48:	0801e1ed 	.word	0x0801e1ed
 801de4c:	0801e2ef 	.word	0x0801e2ef
 801de50:	0801e2fd 	.word	0x0801e2fd
 801de54:	0801dd8f 	.word	0x0801dd8f
 801de58:	0801dd8f 	.word	0x0801dd8f
 801de5c:	0801dd8f 	.word	0x0801dd8f
 801de60:	0801e32d 	.word	0x0801e32d
 801de64:	0801dd8f 	.word	0x0801dd8f
 801de68:	0801dd8f 	.word	0x0801dd8f
 801de6c:	0801e345 	.word	0x0801e345
 801de70:	0801dd8f 	.word	0x0801dd8f
 801de74:	0801e393 	.word	0x0801e393
 801de78:	0801e4a9 	.word	0x0801e4a9
 801de7c:	0801e4bb 	.word	0x0801e4bb
 801de80:	0801e513 	.word	0x0801e513
 801de84:	0801e523 	.word	0x0801e523
 801de88:	0801e599 	.word	0x0801e599
 801de8c:	0801e01f 	.word	0x0801e01f
 801de90:	0801e5cd 	.word	0x0801e5cd
 801de94:	0801e68b 	.word	0x0801e68b
 801de98:	0801dd8f 	.word	0x0801dd8f
 801de9c:	0801dd8f 	.word	0x0801dd8f
 801dea0:	0801dd8f 	.word	0x0801dd8f
 801dea4:	0801dd8f 	.word	0x0801dd8f
 801dea8:	0801dd8f 	.word	0x0801dd8f
 801deac:	0801dd8f 	.word	0x0801dd8f
 801deb0:	0801df19 	.word	0x0801df19
 801deb4:	0801df85 	.word	0x0801df85
 801deb8:	0801dfdf 	.word	0x0801dfdf
 801debc:	0801e099 	.word	0x0801e099
 801dec0:	0801e099 	.word	0x0801e099
 801dec4:	0801dd8f 	.word	0x0801dd8f
 801dec8:	0801e155 	.word	0x0801e155
 801decc:	0801df85 	.word	0x0801df85
 801ded0:	0801dd8f 	.word	0x0801dd8f
 801ded4:	0801e31f 	.word	0x0801e31f
 801ded8:	0801e2ef 	.word	0x0801e2ef
 801dedc:	0801e2fd 	.word	0x0801e2fd
 801dee0:	0801e327 	.word	0x0801e327
 801dee4:	0801e331 	.word	0x0801e331
 801dee8:	0801dd8f 	.word	0x0801dd8f
 801deec:	0801e345 	.word	0x0801e345
 801def0:	0801dd8f 	.word	0x0801dd8f
 801def4:	0801e00f 	.word	0x0801e00f
 801def8:	0801e3a9 	.word	0x0801e3a9
 801defc:	0801e4ad 	.word	0x0801e4ad
 801df00:	0801e4f5 	.word	0x0801e4f5
 801df04:	0801dd8f 	.word	0x0801dd8f
 801df08:	0801e589 	.word	0x0801e589
 801df0c:	0801e017 	.word	0x0801e017
 801df10:	0801e5b1 	.word	0x0801e5b1
 801df14:	0801e61d 	.word	0x0801e61d
 801df18:	69ab      	ldr	r3, [r5, #24]
 801df1a:	4aa7      	ldr	r2, [pc, #668]	; (801e1b8 <__strftime+0x488>)
 801df1c:	3318      	adds	r3, #24
 801df1e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801df22:	4630      	mov	r0, r6
 801df24:	f7e2 f98a 	bl	800023c <strlen>
 801df28:	3e01      	subs	r6, #1
 801df2a:	4420      	add	r0, r4
 801df2c:	f108 33ff 	add.w	r3, r8, #4294967295
 801df30:	42a0      	cmp	r0, r4
 801df32:	d107      	bne.n	801df44 <__strftime+0x214>
 801df34:	f89b 3000 	ldrb.w	r3, [fp]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	f000 83d7 	beq.w	801e6ec <__strftime+0x9bc>
 801df3e:	f10b 0201 	add.w	r2, fp, #1
 801df42:	e6fe      	b.n	801dd42 <__strftime+0x12>
 801df44:	42a3      	cmp	r3, r4
 801df46:	f67f af22 	bls.w	801dd8e <__strftime+0x5e>
 801df4a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801df4e:	f809 2004 	strb.w	r2, [r9, r4]
 801df52:	3401      	adds	r4, #1
 801df54:	e7ec      	b.n	801df30 <__strftime+0x200>
 801df56:	69aa      	ldr	r2, [r5, #24]
 801df58:	4b97      	ldr	r3, [pc, #604]	; (801e1b8 <__strftime+0x488>)
 801df5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801df5e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801df60:	4630      	mov	r0, r6
 801df62:	f7e2 f96b 	bl	800023c <strlen>
 801df66:	3e01      	subs	r6, #1
 801df68:	4420      	add	r0, r4
 801df6a:	f108 33ff 	add.w	r3, r8, #4294967295
 801df6e:	42a0      	cmp	r0, r4
 801df70:	d0e0      	beq.n	801df34 <__strftime+0x204>
 801df72:	42a3      	cmp	r3, r4
 801df74:	f67f af0b 	bls.w	801dd8e <__strftime+0x5e>
 801df78:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801df7c:	f809 2004 	strb.w	r2, [r9, r4]
 801df80:	3401      	adds	r4, #1
 801df82:	e7f4      	b.n	801df6e <__strftime+0x23e>
 801df84:	4b8c      	ldr	r3, [pc, #560]	; (801e1b8 <__strftime+0x488>)
 801df86:	692a      	ldr	r2, [r5, #16]
 801df88:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801df8c:	4630      	mov	r0, r6
 801df8e:	f7e2 f955 	bl	800023c <strlen>
 801df92:	3e01      	subs	r6, #1
 801df94:	4420      	add	r0, r4
 801df96:	f108 33ff 	add.w	r3, r8, #4294967295
 801df9a:	42a0      	cmp	r0, r4
 801df9c:	d0ca      	beq.n	801df34 <__strftime+0x204>
 801df9e:	42a3      	cmp	r3, r4
 801dfa0:	f67f aef5 	bls.w	801dd8e <__strftime+0x5e>
 801dfa4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dfa8:	f809 2004 	strb.w	r2, [r9, r4]
 801dfac:	3401      	adds	r4, #1
 801dfae:	e7f4      	b.n	801df9a <__strftime+0x26a>
 801dfb0:	692b      	ldr	r3, [r5, #16]
 801dfb2:	4a81      	ldr	r2, [pc, #516]	; (801e1b8 <__strftime+0x488>)
 801dfb4:	330c      	adds	r3, #12
 801dfb6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801dfba:	4630      	mov	r0, r6
 801dfbc:	f7e2 f93e 	bl	800023c <strlen>
 801dfc0:	3e01      	subs	r6, #1
 801dfc2:	4420      	add	r0, r4
 801dfc4:	f108 33ff 	add.w	r3, r8, #4294967295
 801dfc8:	42a0      	cmp	r0, r4
 801dfca:	d0b3      	beq.n	801df34 <__strftime+0x204>
 801dfcc:	42a3      	cmp	r3, r4
 801dfce:	f67f aede 	bls.w	801dd8e <__strftime+0x5e>
 801dfd2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801dfd6:	f809 2004 	strb.w	r2, [r9, r4]
 801dfda:	3401      	adds	r4, #1
 801dfdc:	e7f4      	b.n	801dfc8 <__strftime+0x298>
 801dfde:	4b76      	ldr	r3, [pc, #472]	; (801e1b8 <__strftime+0x488>)
 801dfe0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801dfe4:	4630      	mov	r0, r6
 801dfe6:	f7e2 f929 	bl	800023c <strlen>
 801dfea:	7833      	ldrb	r3, [r6, #0]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d0a1      	beq.n	801df34 <__strftime+0x204>
 801dff0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dff2:	9300      	str	r3, [sp, #0]
 801dff4:	4632      	mov	r2, r6
 801dff6:	462b      	mov	r3, r5
 801dff8:	eba8 0104 	sub.w	r1, r8, r4
 801dffc:	eb09 0004 	add.w	r0, r9, r4
 801e000:	f7ff fe96 	bl	801dd30 <__strftime>
 801e004:	2800      	cmp	r0, #0
 801e006:	f77f aec2 	ble.w	801dd8e <__strftime+0x5e>
 801e00a:	4404      	add	r4, r0
 801e00c:	e792      	b.n	801df34 <__strftime+0x204>
 801e00e:	4b6a      	ldr	r3, [pc, #424]	; (801e1b8 <__strftime+0x488>)
 801e010:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801e014:	e7e6      	b.n	801dfe4 <__strftime+0x2b4>
 801e016:	4b68      	ldr	r3, [pc, #416]	; (801e1b8 <__strftime+0x488>)
 801e018:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801e01c:	e7e2      	b.n	801dfe4 <__strftime+0x2b4>
 801e01e:	4b66      	ldr	r3, [pc, #408]	; (801e1b8 <__strftime+0x488>)
 801e020:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801e024:	e7de      	b.n	801dfe4 <__strftime+0x2b4>
 801e026:	4965      	ldr	r1, [pc, #404]	; (801e1bc <__strftime+0x48c>)
 801e028:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801e02c:	458a      	cmp	sl, r1
 801e02e:	bfac      	ite	ge
 801e030:	2100      	movge	r1, #0
 801e032:	2101      	movlt	r1, #1
 801e034:	f1ba 0f00 	cmp.w	sl, #0
 801e038:	db0e      	blt.n	801e058 <__strftime+0x328>
 801e03a:	2064      	movs	r0, #100	; 0x64
 801e03c:	fb9a f0f0 	sdiv	r0, sl, r0
 801e040:	3013      	adds	r0, #19
 801e042:	b19f      	cbz	r7, 801e06c <__strftime+0x33c>
 801e044:	2863      	cmp	r0, #99	; 0x63
 801e046:	dd25      	ble.n	801e094 <__strftime+0x364>
 801e048:	4a5d      	ldr	r2, [pc, #372]	; (801e1c0 <__strftime+0x490>)
 801e04a:	4b5e      	ldr	r3, [pc, #376]	; (801e1c4 <__strftime+0x494>)
 801e04c:	2f2b      	cmp	r7, #43	; 0x2b
 801e04e:	bf14      	ite	ne
 801e050:	4617      	movne	r7, r2
 801e052:	461f      	moveq	r7, r3
 801e054:	4a5c      	ldr	r2, [pc, #368]	; (801e1c8 <__strftime+0x498>)
 801e056:	e00b      	b.n	801e070 <__strftime+0x340>
 801e058:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801e05c:	9105      	str	r1, [sp, #20]
 801e05e:	f000 ffbf 	bl	801efe0 <abs>
 801e062:	2364      	movs	r3, #100	; 0x64
 801e064:	9905      	ldr	r1, [sp, #20]
 801e066:	fb90 f0f3 	sdiv	r0, r0, r3
 801e06a:	e7ea      	b.n	801e042 <__strftime+0x312>
 801e06c:	4f54      	ldr	r7, [pc, #336]	; (801e1c0 <__strftime+0x490>)
 801e06e:	4a57      	ldr	r2, [pc, #348]	; (801e1cc <__strftime+0x49c>)
 801e070:	4b57      	ldr	r3, [pc, #348]	; (801e1d0 <__strftime+0x4a0>)
 801e072:	9001      	str	r0, [sp, #4]
 801e074:	2e02      	cmp	r6, #2
 801e076:	bf2c      	ite	cs
 801e078:	ebc1 0606 	rsbcs	r6, r1, r6
 801e07c:	f1c1 0602 	rsbcc	r6, r1, #2
 801e080:	494e      	ldr	r1, [pc, #312]	; (801e1bc <__strftime+0x48c>)
 801e082:	9600      	str	r6, [sp, #0]
 801e084:	458a      	cmp	sl, r1
 801e086:	bfa8      	it	ge
 801e088:	463b      	movge	r3, r7
 801e08a:	eba8 0104 	sub.w	r1, r8, r4
 801e08e:	eb09 0004 	add.w	r0, r9, r4
 801e092:	e02a      	b.n	801e0ea <__strftime+0x3ba>
 801e094:	4f4a      	ldr	r7, [pc, #296]	; (801e1c0 <__strftime+0x490>)
 801e096:	e7dd      	b.n	801e054 <__strftime+0x324>
 801e098:	494e      	ldr	r1, [pc, #312]	; (801e1d4 <__strftime+0x4a4>)
 801e09a:	4a4f      	ldr	r2, [pc, #316]	; (801e1d8 <__strftime+0x4a8>)
 801e09c:	68eb      	ldr	r3, [r5, #12]
 801e09e:	2864      	cmp	r0, #100	; 0x64
 801e0a0:	bf08      	it	eq
 801e0a2:	460a      	moveq	r2, r1
 801e0a4:	eba8 0104 	sub.w	r1, r8, r4
 801e0a8:	eb09 0004 	add.w	r0, r9, r4
 801e0ac:	f001 fe3a 	bl	801fd24 <sniprintf>
 801e0b0:	2800      	cmp	r0, #0
 801e0b2:	f6ff ae6c 	blt.w	801dd8e <__strftime+0x5e>
 801e0b6:	4404      	add	r4, r0
 801e0b8:	45a0      	cmp	r8, r4
 801e0ba:	f63f af3b 	bhi.w	801df34 <__strftime+0x204>
 801e0be:	e666      	b.n	801dd8e <__strftime+0x5e>
 801e0c0:	6968      	ldr	r0, [r5, #20]
 801e0c2:	692b      	ldr	r3, [r5, #16]
 801e0c4:	68ef      	ldr	r7, [r5, #12]
 801e0c6:	2800      	cmp	r0, #0
 801e0c8:	eb09 0604 	add.w	r6, r9, r4
 801e0cc:	eba8 0104 	sub.w	r1, r8, r4
 801e0d0:	f103 0301 	add.w	r3, r3, #1
 801e0d4:	db0c      	blt.n	801e0f0 <__strftime+0x3c0>
 801e0d6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e0da:	fb90 f2fc 	sdiv	r2, r0, ip
 801e0de:	fb0c 0212 	mls	r2, ip, r2, r0
 801e0e2:	e9cd 7200 	strd	r7, r2, [sp]
 801e0e6:	4a3d      	ldr	r2, [pc, #244]	; (801e1dc <__strftime+0x4ac>)
 801e0e8:	4630      	mov	r0, r6
 801e0ea:	f001 fe1b 	bl	801fd24 <sniprintf>
 801e0ee:	e7df      	b.n	801e0b0 <__strftime+0x380>
 801e0f0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e0f4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801e0f8:	f000 ff72 	bl	801efe0 <abs>
 801e0fc:	2264      	movs	r2, #100	; 0x64
 801e0fe:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801e102:	fb90 fcf2 	sdiv	ip, r0, r2
 801e106:	fb0c 0212 	mls	r2, ip, r2, r0
 801e10a:	e7ea      	b.n	801e0e2 <__strftime+0x3b2>
 801e10c:	2325      	movs	r3, #37	; 0x25
 801e10e:	f88d 3020 	strb.w	r3, [sp, #32]
 801e112:	b187      	cbz	r7, 801e136 <__strftime+0x406>
 801e114:	2e06      	cmp	r6, #6
 801e116:	bf38      	it	cc
 801e118:	2606      	movcc	r6, #6
 801e11a:	1fb3      	subs	r3, r6, #6
 801e11c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801e120:	d10c      	bne.n	801e13c <__strftime+0x40c>
 801e122:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801e126:	492e      	ldr	r1, [pc, #184]	; (801e1e0 <__strftime+0x4b0>)
 801e128:	f001 fe5c 	bl	801fde4 <strcpy>
 801e12c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e12e:	9300      	str	r3, [sp, #0]
 801e130:	aa08      	add	r2, sp, #32
 801e132:	462b      	mov	r3, r5
 801e134:	e760      	b.n	801dff8 <__strftime+0x2c8>
 801e136:	272b      	movs	r7, #43	; 0x2b
 801e138:	260a      	movs	r6, #10
 801e13a:	e7ee      	b.n	801e11a <__strftime+0x3ea>
 801e13c:	4a29      	ldr	r2, [pc, #164]	; (801e1e4 <__strftime+0x4b4>)
 801e13e:	211e      	movs	r1, #30
 801e140:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801e144:	f001 fdee 	bl	801fd24 <sniprintf>
 801e148:	2800      	cmp	r0, #0
 801e14a:	ddea      	ble.n	801e122 <__strftime+0x3f2>
 801e14c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801e150:	4418      	add	r0, r3
 801e152:	e7e8      	b.n	801e126 <__strftime+0x3f6>
 801e154:	4628      	mov	r0, r5
 801e156:	f7ff fd89 	bl	801dc6c <iso_year_adjust>
 801e15a:	4606      	mov	r6, r0
 801e15c:	6968      	ldr	r0, [r5, #20]
 801e15e:	2800      	cmp	r0, #0
 801e160:	db11      	blt.n	801e186 <__strftime+0x456>
 801e162:	2264      	movs	r2, #100	; 0x64
 801e164:	fb90 f3f2 	sdiv	r3, r0, r2
 801e168:	fb02 0313 	mls	r3, r2, r3, r0
 801e16c:	441e      	add	r6, r3
 801e16e:	2364      	movs	r3, #100	; 0x64
 801e170:	fb96 f0f3 	sdiv	r0, r6, r3
 801e174:	fb03 6610 	mls	r6, r3, r0, r6
 801e178:	441e      	add	r6, r3
 801e17a:	fbb6 f2f3 	udiv	r2, r6, r3
 801e17e:	fb03 6312 	mls	r3, r3, r2, r6
 801e182:	4a14      	ldr	r2, [pc, #80]	; (801e1d4 <__strftime+0x4a4>)
 801e184:	e78e      	b.n	801e0a4 <__strftime+0x374>
 801e186:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e18a:	f000 ff29 	bl	801efe0 <abs>
 801e18e:	2364      	movs	r3, #100	; 0x64
 801e190:	2e00      	cmp	r6, #0
 801e192:	fb90 f2f3 	sdiv	r2, r0, r3
 801e196:	fb02 0313 	mls	r3, r2, r3, r0
 801e19a:	da05      	bge.n	801e1a8 <__strftime+0x478>
 801e19c:	6969      	ldr	r1, [r5, #20]
 801e19e:	4a12      	ldr	r2, [pc, #72]	; (801e1e8 <__strftime+0x4b8>)
 801e1a0:	4291      	cmp	r1, r2
 801e1a2:	bfb8      	it	lt
 801e1a4:	2601      	movlt	r6, #1
 801e1a6:	e7e1      	b.n	801e16c <__strftime+0x43c>
 801e1a8:	d0e0      	beq.n	801e16c <__strftime+0x43c>
 801e1aa:	6969      	ldr	r1, [r5, #20]
 801e1ac:	4a03      	ldr	r2, [pc, #12]	; (801e1bc <__strftime+0x48c>)
 801e1ae:	4291      	cmp	r1, r2
 801e1b0:	bfb8      	it	lt
 801e1b2:	f04f 36ff 	movlt.w	r6, #4294967295
 801e1b6:	e7d9      	b.n	801e16c <__strftime+0x43c>
 801e1b8:	08025648 	.word	0x08025648
 801e1bc:	fffff894 	.word	0xfffff894
 801e1c0:	080257bb 	.word	0x080257bb
 801e1c4:	080254d2 	.word	0x080254d2
 801e1c8:	080254ca 	.word	0x080254ca
 801e1cc:	080254c3 	.word	0x080254c3
 801e1d0:	080258fb 	.word	0x080258fb
 801e1d4:	080254e2 	.word	0x080254e2
 801e1d8:	080254d4 	.word	0x080254d4
 801e1dc:	080254d8 	.word	0x080254d8
 801e1e0:	080254eb 	.word	0x080254eb
 801e1e4:	080254e7 	.word	0x080254e7
 801e1e8:	fffff895 	.word	0xfffff895
 801e1ec:	4bb6      	ldr	r3, [pc, #728]	; (801e4c8 <__strftime+0x798>)
 801e1ee:	6969      	ldr	r1, [r5, #20]
 801e1f0:	4299      	cmp	r1, r3
 801e1f2:	bfac      	ite	ge
 801e1f4:	2300      	movge	r3, #0
 801e1f6:	2301      	movlt	r3, #1
 801e1f8:	4628      	mov	r0, r5
 801e1fa:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801e1fe:	f7ff fd35 	bl	801dc6c <iso_year_adjust>
 801e202:	9906      	ldr	r1, [sp, #24]
 801e204:	2900      	cmp	r1, #0
 801e206:	4682      	mov	sl, r0
 801e208:	db27      	blt.n	801e25a <__strftime+0x52a>
 801e20a:	2264      	movs	r2, #100	; 0x64
 801e20c:	fb91 f2f2 	sdiv	r2, r1, r2
 801e210:	3213      	adds	r2, #19
 801e212:	6968      	ldr	r0, [r5, #20]
 801e214:	2800      	cmp	r0, #0
 801e216:	db2b      	blt.n	801e270 <__strftime+0x540>
 801e218:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e21c:	fb90 fefc 	sdiv	lr, r0, ip
 801e220:	fb0c 001e 	mls	r0, ip, lr, r0
 801e224:	f1ba 0f00 	cmp.w	sl, #0
 801e228:	da31      	bge.n	801e28e <__strftime+0x55e>
 801e22a:	6969      	ldr	r1, [r5, #20]
 801e22c:	4ba7      	ldr	r3, [pc, #668]	; (801e4cc <__strftime+0x79c>)
 801e22e:	4299      	cmp	r1, r3
 801e230:	db38      	blt.n	801e2a4 <__strftime+0x574>
 801e232:	eb0a 0300 	add.w	r3, sl, r0
 801e236:	1c59      	adds	r1, r3, #1
 801e238:	d139      	bne.n	801e2ae <__strftime+0x57e>
 801e23a:	3a01      	subs	r2, #1
 801e23c:	2363      	movs	r3, #99	; 0x63
 801e23e:	2064      	movs	r0, #100	; 0x64
 801e240:	fb00 3202 	mla	r2, r0, r2, r3
 801e244:	9b05      	ldr	r3, [sp, #20]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d036      	beq.n	801e2b8 <__strftime+0x588>
 801e24a:	232d      	movs	r3, #45	; 0x2d
 801e24c:	f88d 3020 	strb.w	r3, [sp, #32]
 801e250:	b106      	cbz	r6, 801e254 <__strftime+0x524>
 801e252:	3e01      	subs	r6, #1
 801e254:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801e258:	e038      	b.n	801e2cc <__strftime+0x59c>
 801e25a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801e25e:	9106      	str	r1, [sp, #24]
 801e260:	f000 febe 	bl	801efe0 <abs>
 801e264:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e268:	9906      	ldr	r1, [sp, #24]
 801e26a:	fb90 f2fc 	sdiv	r2, r0, ip
 801e26e:	e7d0      	b.n	801e212 <__strftime+0x4e2>
 801e270:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e274:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801e278:	f000 feb2 	bl	801efe0 <abs>
 801e27c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e280:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e284:	fb90 fefc 	sdiv	lr, r0, ip
 801e288:	fb0e 001c 	mls	r0, lr, ip, r0
 801e28c:	e7ca      	b.n	801e224 <__strftime+0x4f4>
 801e28e:	d0d0      	beq.n	801e232 <__strftime+0x502>
 801e290:	4b8d      	ldr	r3, [pc, #564]	; (801e4c8 <__strftime+0x798>)
 801e292:	4299      	cmp	r1, r3
 801e294:	bfb4      	ite	lt
 801e296:	2301      	movlt	r3, #1
 801e298:	2300      	movge	r3, #0
 801e29a:	9305      	str	r3, [sp, #20]
 801e29c:	bfb8      	it	lt
 801e29e:	f04f 3aff 	movlt.w	sl, #4294967295
 801e2a2:	e7c6      	b.n	801e232 <__strftime+0x502>
 801e2a4:	f04f 0a01 	mov.w	sl, #1
 801e2a8:	f8cd a014 	str.w	sl, [sp, #20]
 801e2ac:	e7c1      	b.n	801e232 <__strftime+0x502>
 801e2ae:	2b64      	cmp	r3, #100	; 0x64
 801e2b0:	bf04      	itt	eq
 801e2b2:	3201      	addeq	r2, #1
 801e2b4:	2300      	moveq	r3, #0
 801e2b6:	e7c2      	b.n	801e23e <__strftime+0x50e>
 801e2b8:	2f2b      	cmp	r7, #43	; 0x2b
 801e2ba:	d106      	bne.n	801e2ca <__strftime+0x59a>
 801e2bc:	f242 730f 	movw	r3, #9999	; 0x270f
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	d902      	bls.n	801e2ca <__strftime+0x59a>
 801e2c4:	f88d 7020 	strb.w	r7, [sp, #32]
 801e2c8:	e7c2      	b.n	801e250 <__strftime+0x520>
 801e2ca:	ab08      	add	r3, sp, #32
 801e2cc:	2125      	movs	r1, #37	; 0x25
 801e2ce:	7019      	strb	r1, [r3, #0]
 801e2d0:	b94f      	cbnz	r7, 801e2e6 <__strftime+0x5b6>
 801e2d2:	1c58      	adds	r0, r3, #1
 801e2d4:	497e      	ldr	r1, [pc, #504]	; (801e4d0 <__strftime+0x7a0>)
 801e2d6:	9205      	str	r2, [sp, #20]
 801e2d8:	f001 fd84 	bl	801fde4 <strcpy>
 801e2dc:	9a05      	ldr	r2, [sp, #20]
 801e2de:	9200      	str	r2, [sp, #0]
 801e2e0:	4633      	mov	r3, r6
 801e2e2:	aa08      	add	r2, sp, #32
 801e2e4:	e059      	b.n	801e39a <__strftime+0x66a>
 801e2e6:	2130      	movs	r1, #48	; 0x30
 801e2e8:	1c98      	adds	r0, r3, #2
 801e2ea:	7059      	strb	r1, [r3, #1]
 801e2ec:	e7f2      	b.n	801e2d4 <__strftime+0x5a4>
 801e2ee:	4979      	ldr	r1, [pc, #484]	; (801e4d4 <__strftime+0x7a4>)
 801e2f0:	4a79      	ldr	r2, [pc, #484]	; (801e4d8 <__strftime+0x7a8>)
 801e2f2:	68ab      	ldr	r3, [r5, #8]
 801e2f4:	286b      	cmp	r0, #107	; 0x6b
 801e2f6:	bf08      	it	eq
 801e2f8:	460a      	moveq	r2, r1
 801e2fa:	e6d3      	b.n	801e0a4 <__strftime+0x374>
 801e2fc:	68ab      	ldr	r3, [r5, #8]
 801e2fe:	b163      	cbz	r3, 801e31a <__strftime+0x5ea>
 801e300:	2b0c      	cmp	r3, #12
 801e302:	d004      	beq.n	801e30e <__strftime+0x5de>
 801e304:	210c      	movs	r1, #12
 801e306:	fb93 f2f1 	sdiv	r2, r3, r1
 801e30a:	fb01 3312 	mls	r3, r1, r2, r3
 801e30e:	4972      	ldr	r1, [pc, #456]	; (801e4d8 <__strftime+0x7a8>)
 801e310:	4a70      	ldr	r2, [pc, #448]	; (801e4d4 <__strftime+0x7a4>)
 801e312:	2849      	cmp	r0, #73	; 0x49
 801e314:	bf08      	it	eq
 801e316:	460a      	moveq	r2, r1
 801e318:	e6c4      	b.n	801e0a4 <__strftime+0x374>
 801e31a:	230c      	movs	r3, #12
 801e31c:	e7f7      	b.n	801e30e <__strftime+0x5de>
 801e31e:	69eb      	ldr	r3, [r5, #28]
 801e320:	4a6e      	ldr	r2, [pc, #440]	; (801e4dc <__strftime+0x7ac>)
 801e322:	3301      	adds	r3, #1
 801e324:	e6be      	b.n	801e0a4 <__strftime+0x374>
 801e326:	692b      	ldr	r3, [r5, #16]
 801e328:	3301      	adds	r3, #1
 801e32a:	e72a      	b.n	801e182 <__strftime+0x452>
 801e32c:	686b      	ldr	r3, [r5, #4]
 801e32e:	e728      	b.n	801e182 <__strftime+0x452>
 801e330:	f108 33ff 	add.w	r3, r8, #4294967295
 801e334:	42a3      	cmp	r3, r4
 801e336:	f67f ad2a 	bls.w	801dd8e <__strftime+0x5e>
 801e33a:	230a      	movs	r3, #10
 801e33c:	f809 3004 	strb.w	r3, [r9, r4]
 801e340:	3401      	adds	r4, #1
 801e342:	e5f7      	b.n	801df34 <__strftime+0x204>
 801e344:	68ab      	ldr	r3, [r5, #8]
 801e346:	2b0b      	cmp	r3, #11
 801e348:	bfcc      	ite	gt
 801e34a:	22a4      	movgt	r2, #164	; 0xa4
 801e34c:	22a0      	movle	r2, #160	; 0xa0
 801e34e:	4b64      	ldr	r3, [pc, #400]	; (801e4e0 <__strftime+0x7b0>)
 801e350:	4413      	add	r3, r2
 801e352:	685e      	ldr	r6, [r3, #4]
 801e354:	4630      	mov	r0, r6
 801e356:	f7e1 ff71 	bl	800023c <strlen>
 801e35a:	1e72      	subs	r2, r6, #1
 801e35c:	4420      	add	r0, r4
 801e35e:	f108 36ff 	add.w	r6, r8, #4294967295
 801e362:	42a0      	cmp	r0, r4
 801e364:	f43f ade6 	beq.w	801df34 <__strftime+0x204>
 801e368:	42a6      	cmp	r6, r4
 801e36a:	f67f ad10 	bls.w	801dd8e <__strftime+0x5e>
 801e36e:	f89b 1000 	ldrb.w	r1, [fp]
 801e372:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e376:	2950      	cmp	r1, #80	; 0x50
 801e378:	d107      	bne.n	801e38a <__strftime+0x65a>
 801e37a:	495a      	ldr	r1, [pc, #360]	; (801e4e4 <__strftime+0x7b4>)
 801e37c:	5cc9      	ldrb	r1, [r1, r3]
 801e37e:	f001 0103 	and.w	r1, r1, #3
 801e382:	2901      	cmp	r1, #1
 801e384:	bf08      	it	eq
 801e386:	3320      	addeq	r3, #32
 801e388:	b2db      	uxtb	r3, r3
 801e38a:	f809 3004 	strb.w	r3, [r9, r4]
 801e38e:	3401      	adds	r4, #1
 801e390:	e7e7      	b.n	801e362 <__strftime+0x632>
 801e392:	686b      	ldr	r3, [r5, #4]
 801e394:	9300      	str	r3, [sp, #0]
 801e396:	4a54      	ldr	r2, [pc, #336]	; (801e4e8 <__strftime+0x7b8>)
 801e398:	68ab      	ldr	r3, [r5, #8]
 801e39a:	eba8 0104 	sub.w	r1, r8, r4
 801e39e:	eb09 0004 	add.w	r0, r9, r4
 801e3a2:	f001 fcbf 	bl	801fd24 <sniprintf>
 801e3a6:	e683      	b.n	801e0b0 <__strftime+0x380>
 801e3a8:	6a2b      	ldr	r3, [r5, #32]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	db79      	blt.n	801e4a2 <__strftime+0x772>
 801e3ae:	f000 fb1b 	bl	801e9e8 <__tz_lock>
 801e3b2:	9b04      	ldr	r3, [sp, #16]
 801e3b4:	b90b      	cbnz	r3, 801e3ba <__strftime+0x68a>
 801e3b6:	f000 fb23 	bl	801ea00 <_tzset_unlocked>
 801e3ba:	f000 fef1 	bl	801f1a0 <__gettzinfo>
 801e3be:	6a2b      	ldr	r3, [r5, #32]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	bfcc      	ite	gt
 801e3c4:	2350      	movgt	r3, #80	; 0x50
 801e3c6:	2328      	movle	r3, #40	; 0x28
 801e3c8:	58c3      	ldr	r3, [r0, r3]
 801e3ca:	f1c3 0a00 	rsb	sl, r3, #0
 801e3ce:	f000 fb11 	bl	801e9f4 <__tz_unlock>
 801e3d2:	2301      	movs	r3, #1
 801e3d4:	9304      	str	r3, [sp, #16]
 801e3d6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801e3da:	4662      	mov	r2, ip
 801e3dc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801e3e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e3e4:	9602      	str	r6, [sp, #8]
 801e3e6:	f143 36ff 	adc.w	r6, r3, #4294967295
 801e3ea:	9603      	str	r6, [sp, #12]
 801e3ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e3f0:	2e00      	cmp	r6, #0
 801e3f2:	f177 0600 	sbcs.w	r6, r7, #0
 801e3f6:	eba8 0104 	sub.w	r1, r8, r4
 801e3fa:	eb09 0004 	add.w	r0, r9, r4
 801e3fe:	da05      	bge.n	801e40c <__strftime+0x6dc>
 801e400:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801e404:	f143 33ff 	adc.w	r3, r3, #4294967295
 801e408:	9602      	str	r6, [sp, #8]
 801e40a:	9303      	str	r3, [sp, #12]
 801e40c:	9b02      	ldr	r3, [sp, #8]
 801e40e:	089e      	lsrs	r6, r3, #2
 801e410:	9b03      	ldr	r3, [sp, #12]
 801e412:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801e416:	f10c 32ff 	add.w	r2, ip, #4294967295
 801e41a:	109f      	asrs	r7, r3, #2
 801e41c:	2364      	movs	r3, #100	; 0x64
 801e41e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e422:	1af6      	subs	r6, r6, r3
 801e424:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801e428:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801e42c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e430:	fb92 f3f3 	sdiv	r3, r2, r3
 801e434:	18f6      	adds	r6, r6, r3
 801e436:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e43a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801e43e:	f240 136d 	movw	r3, #365	; 0x16d
 801e442:	fb03 fc0c 	mul.w	ip, r3, ip
 801e446:	69eb      	ldr	r3, [r5, #28]
 801e448:	eb16 060c 	adds.w	r6, r6, ip
 801e44c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801e450:	18f6      	adds	r6, r6, r3
 801e452:	f04f 0c18 	mov.w	ip, #24
 801e456:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e45a:	fba6 230c 	umull	r2, r3, r6, ip
 801e45e:	68ae      	ldr	r6, [r5, #8]
 801e460:	fb0c 3307 	mla	r3, ip, r7, r3
 801e464:	1992      	adds	r2, r2, r6
 801e466:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801e46a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801e46e:	fba2 670c 	umull	r6, r7, r2, ip
 801e472:	fb0c 7703 	mla	r7, ip, r3, r7
 801e476:	686b      	ldr	r3, [r5, #4]
 801e478:	18f6      	adds	r6, r6, r3
 801e47a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e47e:	fba6 230c 	umull	r2, r3, r6, ip
 801e482:	682e      	ldr	r6, [r5, #0]
 801e484:	fb0c 3307 	mla	r3, ip, r7, r3
 801e488:	1992      	adds	r2, r2, r6
 801e48a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801e48e:	ebb2 020a 	subs.w	r2, r2, sl
 801e492:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801e496:	e9cd 2300 	strd	r2, r3, [sp]
 801e49a:	4a14      	ldr	r2, [pc, #80]	; (801e4ec <__strftime+0x7bc>)
 801e49c:	f001 fc42 	bl	801fd24 <sniprintf>
 801e4a0:	e606      	b.n	801e0b0 <__strftime+0x380>
 801e4a2:	f04f 0a00 	mov.w	sl, #0
 801e4a6:	e796      	b.n	801e3d6 <__strftime+0x6a6>
 801e4a8:	682b      	ldr	r3, [r5, #0]
 801e4aa:	e66a      	b.n	801e182 <__strftime+0x452>
 801e4ac:	f108 33ff 	add.w	r3, r8, #4294967295
 801e4b0:	42a3      	cmp	r3, r4
 801e4b2:	f67f ac6c 	bls.w	801dd8e <__strftime+0x5e>
 801e4b6:	2309      	movs	r3, #9
 801e4b8:	e740      	b.n	801e33c <__strftime+0x60c>
 801e4ba:	682b      	ldr	r3, [r5, #0]
 801e4bc:	9301      	str	r3, [sp, #4]
 801e4be:	686b      	ldr	r3, [r5, #4]
 801e4c0:	9300      	str	r3, [sp, #0]
 801e4c2:	4a0b      	ldr	r2, [pc, #44]	; (801e4f0 <__strftime+0x7c0>)
 801e4c4:	68ab      	ldr	r3, [r5, #8]
 801e4c6:	e5e0      	b.n	801e08a <__strftime+0x35a>
 801e4c8:	fffff894 	.word	0xfffff894
 801e4cc:	fffff895 	.word	0xfffff895
 801e4d0:	080254f3 	.word	0x080254f3
 801e4d4:	080254d4 	.word	0x080254d4
 801e4d8:	080254e2 	.word	0x080254e2
 801e4dc:	080254f7 	.word	0x080254f7
 801e4e0:	08025648 	.word	0x08025648
 801e4e4:	080257bd 	.word	0x080257bd
 801e4e8:	08025506 	.word	0x08025506
 801e4ec:	080254fc 	.word	0x080254fc
 801e4f0:	08025501 	.word	0x08025501
 801e4f4:	f108 33ff 	add.w	r3, r8, #4294967295
 801e4f8:	42a3      	cmp	r3, r4
 801e4fa:	f67f ac48 	bls.w	801dd8e <__strftime+0x5e>
 801e4fe:	69ab      	ldr	r3, [r5, #24]
 801e500:	eb09 0204 	add.w	r2, r9, r4
 801e504:	3401      	adds	r4, #1
 801e506:	b913      	cbnz	r3, 801e50e <__strftime+0x7de>
 801e508:	2337      	movs	r3, #55	; 0x37
 801e50a:	7013      	strb	r3, [r2, #0]
 801e50c:	e512      	b.n	801df34 <__strftime+0x204>
 801e50e:	3330      	adds	r3, #48	; 0x30
 801e510:	e7fb      	b.n	801e50a <__strftime+0x7da>
 801e512:	69eb      	ldr	r3, [r5, #28]
 801e514:	69aa      	ldr	r2, [r5, #24]
 801e516:	3307      	adds	r3, #7
 801e518:	1a9b      	subs	r3, r3, r2
 801e51a:	2207      	movs	r2, #7
 801e51c:	fb93 f3f2 	sdiv	r3, r3, r2
 801e520:	e62f      	b.n	801e182 <__strftime+0x452>
 801e522:	4628      	mov	r0, r5
 801e524:	f7ff fba2 	bl	801dc6c <iso_year_adjust>
 801e528:	69aa      	ldr	r2, [r5, #24]
 801e52a:	b132      	cbz	r2, 801e53a <__strftime+0x80a>
 801e52c:	3a01      	subs	r2, #1
 801e52e:	2800      	cmp	r0, #0
 801e530:	dc28      	bgt.n	801e584 <__strftime+0x854>
 801e532:	69eb      	ldr	r3, [r5, #28]
 801e534:	d103      	bne.n	801e53e <__strftime+0x80e>
 801e536:	330a      	adds	r3, #10
 801e538:	e7ee      	b.n	801e518 <__strftime+0x7e8>
 801e53a:	2206      	movs	r2, #6
 801e53c:	e7f7      	b.n	801e52e <__strftime+0x7fe>
 801e53e:	6968      	ldr	r0, [r5, #20]
 801e540:	2800      	cmp	r0, #0
 801e542:	eba2 0303 	sub.w	r3, r2, r3
 801e546:	f240 726b 	movw	r2, #1899	; 0x76b
 801e54a:	bfa8      	it	ge
 801e54c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801e550:	4410      	add	r0, r2
 801e552:	0782      	lsls	r2, r0, #30
 801e554:	d105      	bne.n	801e562 <__strftime+0x832>
 801e556:	2264      	movs	r2, #100	; 0x64
 801e558:	fb90 f1f2 	sdiv	r1, r0, r2
 801e55c:	fb02 0111 	mls	r1, r2, r1, r0
 801e560:	b971      	cbnz	r1, 801e580 <__strftime+0x850>
 801e562:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e566:	fb90 f2f1 	sdiv	r2, r0, r1
 801e56a:	fb01 0212 	mls	r2, r1, r2, r0
 801e56e:	fab2 f282 	clz	r2, r2
 801e572:	0952      	lsrs	r2, r2, #5
 801e574:	1a9a      	subs	r2, r3, r2
 801e576:	2a05      	cmp	r2, #5
 801e578:	bfb4      	ite	lt
 801e57a:	2335      	movlt	r3, #53	; 0x35
 801e57c:	2334      	movge	r3, #52	; 0x34
 801e57e:	e600      	b.n	801e182 <__strftime+0x452>
 801e580:	2201      	movs	r2, #1
 801e582:	e7f7      	b.n	801e574 <__strftime+0x844>
 801e584:	2301      	movs	r3, #1
 801e586:	e5fc      	b.n	801e182 <__strftime+0x452>
 801e588:	f108 33ff 	add.w	r3, r8, #4294967295
 801e58c:	42a3      	cmp	r3, r4
 801e58e:	f67f abfe 	bls.w	801dd8e <__strftime+0x5e>
 801e592:	69ab      	ldr	r3, [r5, #24]
 801e594:	3330      	adds	r3, #48	; 0x30
 801e596:	e6d1      	b.n	801e33c <__strftime+0x60c>
 801e598:	69ab      	ldr	r3, [r5, #24]
 801e59a:	b13b      	cbz	r3, 801e5ac <__strftime+0x87c>
 801e59c:	3b01      	subs	r3, #1
 801e59e:	69ea      	ldr	r2, [r5, #28]
 801e5a0:	3207      	adds	r2, #7
 801e5a2:	1ad2      	subs	r2, r2, r3
 801e5a4:	2307      	movs	r3, #7
 801e5a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5aa:	e5ea      	b.n	801e182 <__strftime+0x452>
 801e5ac:	2306      	movs	r3, #6
 801e5ae:	e7f6      	b.n	801e59e <__strftime+0x86e>
 801e5b0:	6968      	ldr	r0, [r5, #20]
 801e5b2:	2800      	cmp	r0, #0
 801e5b4:	db05      	blt.n	801e5c2 <__strftime+0x892>
 801e5b6:	2264      	movs	r2, #100	; 0x64
 801e5b8:	fb90 f3f2 	sdiv	r3, r0, r2
 801e5bc:	fb03 0312 	mls	r3, r3, r2, r0
 801e5c0:	e5df      	b.n	801e182 <__strftime+0x452>
 801e5c2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e5c6:	f000 fd0b 	bl	801efe0 <abs>
 801e5ca:	e7f4      	b.n	801e5b6 <__strftime+0x886>
 801e5cc:	696b      	ldr	r3, [r5, #20]
 801e5ce:	4a4c      	ldr	r2, [pc, #304]	; (801e700 <__strftime+0x9d0>)
 801e5d0:	4293      	cmp	r3, r2
 801e5d2:	da09      	bge.n	801e5e8 <__strftime+0x8b8>
 801e5d4:	212d      	movs	r1, #45	; 0x2d
 801e5d6:	f88d 1020 	strb.w	r1, [sp, #32]
 801e5da:	eba2 0a03 	sub.w	sl, r2, r3
 801e5de:	b106      	cbz	r6, 801e5e2 <__strftime+0x8b2>
 801e5e0:	3e01      	subs	r6, #1
 801e5e2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801e5e6:	e00b      	b.n	801e600 <__strftime+0x8d0>
 801e5e8:	2f2b      	cmp	r7, #43	; 0x2b
 801e5ea:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801e5ee:	d106      	bne.n	801e5fe <__strftime+0x8ce>
 801e5f0:	f242 730f 	movw	r3, #9999	; 0x270f
 801e5f4:	459a      	cmp	sl, r3
 801e5f6:	d902      	bls.n	801e5fe <__strftime+0x8ce>
 801e5f8:	f88d 7020 	strb.w	r7, [sp, #32]
 801e5fc:	e7ef      	b.n	801e5de <__strftime+0x8ae>
 801e5fe:	ab08      	add	r3, sp, #32
 801e600:	2225      	movs	r2, #37	; 0x25
 801e602:	701a      	strb	r2, [r3, #0]
 801e604:	b937      	cbnz	r7, 801e614 <__strftime+0x8e4>
 801e606:	1c58      	adds	r0, r3, #1
 801e608:	493e      	ldr	r1, [pc, #248]	; (801e704 <__strftime+0x9d4>)
 801e60a:	f001 fbeb 	bl	801fde4 <strcpy>
 801e60e:	f8cd a000 	str.w	sl, [sp]
 801e612:	e665      	b.n	801e2e0 <__strftime+0x5b0>
 801e614:	2230      	movs	r2, #48	; 0x30
 801e616:	1c98      	adds	r0, r3, #2
 801e618:	705a      	strb	r2, [r3, #1]
 801e61a:	e7f5      	b.n	801e608 <__strftime+0x8d8>
 801e61c:	6a2b      	ldr	r3, [r5, #32]
 801e61e:	2b00      	cmp	r3, #0
 801e620:	f6ff ac88 	blt.w	801df34 <__strftime+0x204>
 801e624:	f000 f9e0 	bl	801e9e8 <__tz_lock>
 801e628:	9b04      	ldr	r3, [sp, #16]
 801e62a:	b90b      	cbnz	r3, 801e630 <__strftime+0x900>
 801e62c:	f000 f9e8 	bl	801ea00 <_tzset_unlocked>
 801e630:	f000 fdb6 	bl	801f1a0 <__gettzinfo>
 801e634:	6a2b      	ldr	r3, [r5, #32]
 801e636:	2b00      	cmp	r3, #0
 801e638:	bfcc      	ite	gt
 801e63a:	2350      	movgt	r3, #80	; 0x50
 801e63c:	2328      	movle	r3, #40	; 0x28
 801e63e:	eb09 0704 	add.w	r7, r9, r4
 801e642:	58c6      	ldr	r6, [r0, r3]
 801e644:	f000 f9d6 	bl	801e9f4 <__tz_unlock>
 801e648:	4276      	negs	r6, r6
 801e64a:	233c      	movs	r3, #60	; 0x3c
 801e64c:	fb96 f0f3 	sdiv	r0, r6, r3
 801e650:	f000 fe6a 	bl	801f328 <labs>
 801e654:	233c      	movs	r3, #60	; 0x3c
 801e656:	eba8 0a04 	sub.w	sl, r8, r4
 801e65a:	fb90 f2f3 	sdiv	r2, r0, r3
 801e65e:	fb02 0013 	mls	r0, r2, r3, r0
 801e662:	9000      	str	r0, [sp, #0]
 801e664:	4a28      	ldr	r2, [pc, #160]	; (801e708 <__strftime+0x9d8>)
 801e666:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e66a:	4651      	mov	r1, sl
 801e66c:	4638      	mov	r0, r7
 801e66e:	fb96 f3f3 	sdiv	r3, r6, r3
 801e672:	f001 fb57 	bl	801fd24 <sniprintf>
 801e676:	2800      	cmp	r0, #0
 801e678:	f6ff ab89 	blt.w	801dd8e <__strftime+0x5e>
 801e67c:	4404      	add	r4, r0
 801e67e:	45a0      	cmp	r8, r4
 801e680:	f67f ab85 	bls.w	801dd8e <__strftime+0x5e>
 801e684:	2301      	movs	r3, #1
 801e686:	9304      	str	r3, [sp, #16]
 801e688:	e454      	b.n	801df34 <__strftime+0x204>
 801e68a:	6a2b      	ldr	r3, [r5, #32]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	f6ff ac51 	blt.w	801df34 <__strftime+0x204>
 801e692:	f000 f9a9 	bl	801e9e8 <__tz_lock>
 801e696:	9b04      	ldr	r3, [sp, #16]
 801e698:	b90b      	cbnz	r3, 801e69e <__strftime+0x96e>
 801e69a:	f000 f9b1 	bl	801ea00 <_tzset_unlocked>
 801e69e:	6a2b      	ldr	r3, [r5, #32]
 801e6a0:	4a1a      	ldr	r2, [pc, #104]	; (801e70c <__strftime+0x9dc>)
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	bfd4      	ite	le
 801e6a6:	2300      	movle	r3, #0
 801e6a8:	2301      	movgt	r3, #1
 801e6aa:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e6ae:	4630      	mov	r0, r6
 801e6b0:	f7e1 fdc4 	bl	800023c <strlen>
 801e6b4:	3e01      	subs	r6, #1
 801e6b6:	4420      	add	r0, r4
 801e6b8:	f108 33ff 	add.w	r3, r8, #4294967295
 801e6bc:	42a0      	cmp	r0, r4
 801e6be:	d102      	bne.n	801e6c6 <__strftime+0x996>
 801e6c0:	f000 f998 	bl	801e9f4 <__tz_unlock>
 801e6c4:	e7de      	b.n	801e684 <__strftime+0x954>
 801e6c6:	42a3      	cmp	r3, r4
 801e6c8:	d905      	bls.n	801e6d6 <__strftime+0x9a6>
 801e6ca:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e6ce:	f809 2004 	strb.w	r2, [r9, r4]
 801e6d2:	3401      	adds	r4, #1
 801e6d4:	e7f2      	b.n	801e6bc <__strftime+0x98c>
 801e6d6:	f000 f98d 	bl	801e9f4 <__tz_unlock>
 801e6da:	f7ff bb58 	b.w	801dd8e <__strftime+0x5e>
 801e6de:	f108 33ff 	add.w	r3, r8, #4294967295
 801e6e2:	42a3      	cmp	r3, r4
 801e6e4:	f67f ab53 	bls.w	801dd8e <__strftime+0x5e>
 801e6e8:	2325      	movs	r3, #37	; 0x25
 801e6ea:	e627      	b.n	801e33c <__strftime+0x60c>
 801e6ec:	f1b8 0f00 	cmp.w	r8, #0
 801e6f0:	d002      	beq.n	801e6f8 <__strftime+0x9c8>
 801e6f2:	2300      	movs	r3, #0
 801e6f4:	f809 3004 	strb.w	r3, [r9, r4]
 801e6f8:	4620      	mov	r0, r4
 801e6fa:	b011      	add	sp, #68	; 0x44
 801e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e700:	fffff894 	.word	0xfffff894
 801e704:	080254f3 	.word	0x080254f3
 801e708:	08025510 	.word	0x08025510
 801e70c:	20000168 	.word	0x20000168

0801e710 <strftime>:
 801e710:	b513      	push	{r0, r1, r4, lr}
 801e712:	4c03      	ldr	r4, [pc, #12]	; (801e720 <strftime+0x10>)
 801e714:	9400      	str	r4, [sp, #0]
 801e716:	f7ff fb0b 	bl	801dd30 <__strftime>
 801e71a:	b002      	add	sp, #8
 801e71c:	bd10      	pop	{r4, pc}
 801e71e:	bf00      	nop
 801e720:	200001d0 	.word	0x200001d0

0801e724 <strstr>:
 801e724:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e726:	780c      	ldrb	r4, [r1, #0]
 801e728:	b164      	cbz	r4, 801e744 <strstr+0x20>
 801e72a:	4603      	mov	r3, r0
 801e72c:	781a      	ldrb	r2, [r3, #0]
 801e72e:	4618      	mov	r0, r3
 801e730:	1c5e      	adds	r6, r3, #1
 801e732:	b90a      	cbnz	r2, 801e738 <strstr+0x14>
 801e734:	4610      	mov	r0, r2
 801e736:	e005      	b.n	801e744 <strstr+0x20>
 801e738:	4294      	cmp	r4, r2
 801e73a:	d108      	bne.n	801e74e <strstr+0x2a>
 801e73c:	460d      	mov	r5, r1
 801e73e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801e742:	b902      	cbnz	r2, 801e746 <strstr+0x22>
 801e744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e746:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801e74a:	4297      	cmp	r7, r2
 801e74c:	d0f7      	beq.n	801e73e <strstr+0x1a>
 801e74e:	4633      	mov	r3, r6
 801e750:	e7ec      	b.n	801e72c <strstr+0x8>
	...

0801e754 <_strtoul_l.isra.0>:
 801e754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e758:	4e3b      	ldr	r6, [pc, #236]	; (801e848 <_strtoul_l.isra.0+0xf4>)
 801e75a:	4686      	mov	lr, r0
 801e75c:	468c      	mov	ip, r1
 801e75e:	4660      	mov	r0, ip
 801e760:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e764:	5da5      	ldrb	r5, [r4, r6]
 801e766:	f015 0508 	ands.w	r5, r5, #8
 801e76a:	d1f8      	bne.n	801e75e <_strtoul_l.isra.0+0xa>
 801e76c:	2c2d      	cmp	r4, #45	; 0x2d
 801e76e:	d134      	bne.n	801e7da <_strtoul_l.isra.0+0x86>
 801e770:	f89c 4000 	ldrb.w	r4, [ip]
 801e774:	f04f 0801 	mov.w	r8, #1
 801e778:	f100 0c02 	add.w	ip, r0, #2
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d05e      	beq.n	801e83e <_strtoul_l.isra.0+0xea>
 801e780:	2b10      	cmp	r3, #16
 801e782:	d10c      	bne.n	801e79e <_strtoul_l.isra.0+0x4a>
 801e784:	2c30      	cmp	r4, #48	; 0x30
 801e786:	d10a      	bne.n	801e79e <_strtoul_l.isra.0+0x4a>
 801e788:	f89c 0000 	ldrb.w	r0, [ip]
 801e78c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e790:	2858      	cmp	r0, #88	; 0x58
 801e792:	d14f      	bne.n	801e834 <_strtoul_l.isra.0+0xe0>
 801e794:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801e798:	2310      	movs	r3, #16
 801e79a:	f10c 0c02 	add.w	ip, ip, #2
 801e79e:	f04f 37ff 	mov.w	r7, #4294967295
 801e7a2:	2500      	movs	r5, #0
 801e7a4:	fbb7 f7f3 	udiv	r7, r7, r3
 801e7a8:	fb03 f907 	mul.w	r9, r3, r7
 801e7ac:	ea6f 0909 	mvn.w	r9, r9
 801e7b0:	4628      	mov	r0, r5
 801e7b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801e7b6:	2e09      	cmp	r6, #9
 801e7b8:	d818      	bhi.n	801e7ec <_strtoul_l.isra.0+0x98>
 801e7ba:	4634      	mov	r4, r6
 801e7bc:	42a3      	cmp	r3, r4
 801e7be:	dd24      	ble.n	801e80a <_strtoul_l.isra.0+0xb6>
 801e7c0:	2d00      	cmp	r5, #0
 801e7c2:	db1f      	blt.n	801e804 <_strtoul_l.isra.0+0xb0>
 801e7c4:	4287      	cmp	r7, r0
 801e7c6:	d31d      	bcc.n	801e804 <_strtoul_l.isra.0+0xb0>
 801e7c8:	d101      	bne.n	801e7ce <_strtoul_l.isra.0+0x7a>
 801e7ca:	45a1      	cmp	r9, r4
 801e7cc:	db1a      	blt.n	801e804 <_strtoul_l.isra.0+0xb0>
 801e7ce:	fb00 4003 	mla	r0, r0, r3, r4
 801e7d2:	2501      	movs	r5, #1
 801e7d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e7d8:	e7eb      	b.n	801e7b2 <_strtoul_l.isra.0+0x5e>
 801e7da:	2c2b      	cmp	r4, #43	; 0x2b
 801e7dc:	bf08      	it	eq
 801e7de:	f89c 4000 	ldrbeq.w	r4, [ip]
 801e7e2:	46a8      	mov	r8, r5
 801e7e4:	bf08      	it	eq
 801e7e6:	f100 0c02 	addeq.w	ip, r0, #2
 801e7ea:	e7c7      	b.n	801e77c <_strtoul_l.isra.0+0x28>
 801e7ec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801e7f0:	2e19      	cmp	r6, #25
 801e7f2:	d801      	bhi.n	801e7f8 <_strtoul_l.isra.0+0xa4>
 801e7f4:	3c37      	subs	r4, #55	; 0x37
 801e7f6:	e7e1      	b.n	801e7bc <_strtoul_l.isra.0+0x68>
 801e7f8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801e7fc:	2e19      	cmp	r6, #25
 801e7fe:	d804      	bhi.n	801e80a <_strtoul_l.isra.0+0xb6>
 801e800:	3c57      	subs	r4, #87	; 0x57
 801e802:	e7db      	b.n	801e7bc <_strtoul_l.isra.0+0x68>
 801e804:	f04f 35ff 	mov.w	r5, #4294967295
 801e808:	e7e4      	b.n	801e7d4 <_strtoul_l.isra.0+0x80>
 801e80a:	2d00      	cmp	r5, #0
 801e80c:	da07      	bge.n	801e81e <_strtoul_l.isra.0+0xca>
 801e80e:	2322      	movs	r3, #34	; 0x22
 801e810:	f8ce 3000 	str.w	r3, [lr]
 801e814:	f04f 30ff 	mov.w	r0, #4294967295
 801e818:	b942      	cbnz	r2, 801e82c <_strtoul_l.isra.0+0xd8>
 801e81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e81e:	f1b8 0f00 	cmp.w	r8, #0
 801e822:	d000      	beq.n	801e826 <_strtoul_l.isra.0+0xd2>
 801e824:	4240      	negs	r0, r0
 801e826:	2a00      	cmp	r2, #0
 801e828:	d0f7      	beq.n	801e81a <_strtoul_l.isra.0+0xc6>
 801e82a:	b10d      	cbz	r5, 801e830 <_strtoul_l.isra.0+0xdc>
 801e82c:	f10c 31ff 	add.w	r1, ip, #4294967295
 801e830:	6011      	str	r1, [r2, #0]
 801e832:	e7f2      	b.n	801e81a <_strtoul_l.isra.0+0xc6>
 801e834:	2430      	movs	r4, #48	; 0x30
 801e836:	2b00      	cmp	r3, #0
 801e838:	d1b1      	bne.n	801e79e <_strtoul_l.isra.0+0x4a>
 801e83a:	2308      	movs	r3, #8
 801e83c:	e7af      	b.n	801e79e <_strtoul_l.isra.0+0x4a>
 801e83e:	2c30      	cmp	r4, #48	; 0x30
 801e840:	d0a2      	beq.n	801e788 <_strtoul_l.isra.0+0x34>
 801e842:	230a      	movs	r3, #10
 801e844:	e7ab      	b.n	801e79e <_strtoul_l.isra.0+0x4a>
 801e846:	bf00      	nop
 801e848:	080257bd 	.word	0x080257bd

0801e84c <_strtoul_r>:
 801e84c:	f7ff bf82 	b.w	801e754 <_strtoul_l.isra.0>

0801e850 <strtoul>:
 801e850:	4613      	mov	r3, r2
 801e852:	460a      	mov	r2, r1
 801e854:	4601      	mov	r1, r0
 801e856:	4802      	ldr	r0, [pc, #8]	; (801e860 <strtoul+0x10>)
 801e858:	6800      	ldr	r0, [r0, #0]
 801e85a:	f7ff bf7b 	b.w	801e754 <_strtoul_l.isra.0>
 801e85e:	bf00      	nop
 801e860:	20000104 	.word	0x20000104

0801e864 <time>:
 801e864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e866:	4b0b      	ldr	r3, [pc, #44]	; (801e894 <time+0x30>)
 801e868:	2200      	movs	r2, #0
 801e86a:	4669      	mov	r1, sp
 801e86c:	4604      	mov	r4, r0
 801e86e:	6818      	ldr	r0, [r3, #0]
 801e870:	f000 fc84 	bl	801f17c <_gettimeofday_r>
 801e874:	2800      	cmp	r0, #0
 801e876:	bfbe      	ittt	lt
 801e878:	f04f 32ff 	movlt.w	r2, #4294967295
 801e87c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e880:	e9cd 2300 	strdlt	r2, r3, [sp]
 801e884:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e888:	b10c      	cbz	r4, 801e88e <time+0x2a>
 801e88a:	e9c4 0100 	strd	r0, r1, [r4]
 801e88e:	b004      	add	sp, #16
 801e890:	bd10      	pop	{r4, pc}
 801e892:	bf00      	nop
 801e894:	20000104 	.word	0x20000104

0801e898 <__tzcalc_limits>:
 801e898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e89c:	4680      	mov	r8, r0
 801e89e:	f000 fc7f 	bl	801f1a0 <__gettzinfo>
 801e8a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801e8a6:	4598      	cmp	r8, r3
 801e8a8:	f340 8098 	ble.w	801e9dc <__tzcalc_limits+0x144>
 801e8ac:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801e8b0:	4443      	add	r3, r8
 801e8b2:	109b      	asrs	r3, r3, #2
 801e8b4:	f240 126d 	movw	r2, #365	; 0x16d
 801e8b8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801e8bc:	fb02 3505 	mla	r5, r2, r5, r3
 801e8c0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801e8c4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801e8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 801e8cc:	441d      	add	r5, r3
 801e8ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e8d2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801e8d6:	fb98 f7f3 	sdiv	r7, r8, r3
 801e8da:	fb03 8717 	mls	r7, r3, r7, r8
 801e8de:	4442      	add	r2, r8
 801e8e0:	fab7 fc87 	clz	ip, r7
 801e8e4:	fbb2 f2f3 	udiv	r2, r2, r3
 801e8e8:	f008 0303 	and.w	r3, r8, #3
 801e8ec:	4415      	add	r5, r2
 801e8ee:	2264      	movs	r2, #100	; 0x64
 801e8f0:	f8c0 8004 	str.w	r8, [r0, #4]
 801e8f4:	fb98 f6f2 	sdiv	r6, r8, r2
 801e8f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e8fc:	fb02 8616 	mls	r6, r2, r6, r8
 801e900:	4604      	mov	r4, r0
 801e902:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801e906:	9300      	str	r3, [sp, #0]
 801e908:	f04f 0e07 	mov.w	lr, #7
 801e90c:	7a22      	ldrb	r2, [r4, #8]
 801e90e:	6963      	ldr	r3, [r4, #20]
 801e910:	2a4a      	cmp	r2, #74	; 0x4a
 801e912:	d128      	bne.n	801e966 <__tzcalc_limits+0xce>
 801e914:	9900      	ldr	r1, [sp, #0]
 801e916:	18ea      	adds	r2, r5, r3
 801e918:	b901      	cbnz	r1, 801e91c <__tzcalc_limits+0x84>
 801e91a:	b906      	cbnz	r6, 801e91e <__tzcalc_limits+0x86>
 801e91c:	bb0f      	cbnz	r7, 801e962 <__tzcalc_limits+0xca>
 801e91e:	2b3b      	cmp	r3, #59	; 0x3b
 801e920:	bfd4      	ite	le
 801e922:	2300      	movle	r3, #0
 801e924:	2301      	movgt	r3, #1
 801e926:	4413      	add	r3, r2
 801e928:	1e5a      	subs	r2, r3, #1
 801e92a:	69a3      	ldr	r3, [r4, #24]
 801e92c:	492c      	ldr	r1, [pc, #176]	; (801e9e0 <__tzcalc_limits+0x148>)
 801e92e:	fb01 3202 	mla	r2, r1, r2, r3
 801e932:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e934:	4413      	add	r3, r2
 801e936:	461a      	mov	r2, r3
 801e938:	17db      	asrs	r3, r3, #31
 801e93a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801e93e:	3428      	adds	r4, #40	; 0x28
 801e940:	45a3      	cmp	fp, r4
 801e942:	d1e3      	bne.n	801e90c <__tzcalc_limits+0x74>
 801e944:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801e948:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801e94c:	4294      	cmp	r4, r2
 801e94e:	eb75 0303 	sbcs.w	r3, r5, r3
 801e952:	bfb4      	ite	lt
 801e954:	2301      	movlt	r3, #1
 801e956:	2300      	movge	r3, #0
 801e958:	6003      	str	r3, [r0, #0]
 801e95a:	2001      	movs	r0, #1
 801e95c:	b003      	add	sp, #12
 801e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e962:	2300      	movs	r3, #0
 801e964:	e7df      	b.n	801e926 <__tzcalc_limits+0x8e>
 801e966:	2a44      	cmp	r2, #68	; 0x44
 801e968:	d101      	bne.n	801e96e <__tzcalc_limits+0xd6>
 801e96a:	18ea      	adds	r2, r5, r3
 801e96c:	e7dd      	b.n	801e92a <__tzcalc_limits+0x92>
 801e96e:	9a00      	ldr	r2, [sp, #0]
 801e970:	bb72      	cbnz	r2, 801e9d0 <__tzcalc_limits+0x138>
 801e972:	2e00      	cmp	r6, #0
 801e974:	bf0c      	ite	eq
 801e976:	46e0      	moveq	r8, ip
 801e978:	f04f 0801 	movne.w	r8, #1
 801e97c:	4919      	ldr	r1, [pc, #100]	; (801e9e4 <__tzcalc_limits+0x14c>)
 801e97e:	68e2      	ldr	r2, [r4, #12]
 801e980:	9201      	str	r2, [sp, #4]
 801e982:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801e986:	fb0a 1808 	mla	r8, sl, r8, r1
 801e98a:	462a      	mov	r2, r5
 801e98c:	f04f 0900 	mov.w	r9, #0
 801e990:	f1a8 0804 	sub.w	r8, r8, #4
 801e994:	9901      	ldr	r1, [sp, #4]
 801e996:	f109 0901 	add.w	r9, r9, #1
 801e99a:	4549      	cmp	r1, r9
 801e99c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801e9a0:	dc18      	bgt.n	801e9d4 <__tzcalc_limits+0x13c>
 801e9a2:	f102 0804 	add.w	r8, r2, #4
 801e9a6:	fb98 f9fe 	sdiv	r9, r8, lr
 801e9aa:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801e9ae:	eba8 0909 	sub.w	r9, r8, r9
 801e9b2:	ebb3 0909 	subs.w	r9, r3, r9
 801e9b6:	6923      	ldr	r3, [r4, #16]
 801e9b8:	f103 33ff 	add.w	r3, r3, #4294967295
 801e9bc:	bf48      	it	mi
 801e9be:	f109 0907 	addmi.w	r9, r9, #7
 801e9c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801e9c6:	444b      	add	r3, r9
 801e9c8:	4553      	cmp	r3, sl
 801e9ca:	da05      	bge.n	801e9d8 <__tzcalc_limits+0x140>
 801e9cc:	441a      	add	r2, r3
 801e9ce:	e7ac      	b.n	801e92a <__tzcalc_limits+0x92>
 801e9d0:	46e0      	mov	r8, ip
 801e9d2:	e7d3      	b.n	801e97c <__tzcalc_limits+0xe4>
 801e9d4:	4452      	add	r2, sl
 801e9d6:	e7dd      	b.n	801e994 <__tzcalc_limits+0xfc>
 801e9d8:	3b07      	subs	r3, #7
 801e9da:	e7f5      	b.n	801e9c8 <__tzcalc_limits+0x130>
 801e9dc:	2000      	movs	r0, #0
 801e9de:	e7bd      	b.n	801e95c <__tzcalc_limits+0xc4>
 801e9e0:	00015180 	.word	0x00015180
 801e9e4:	08025404 	.word	0x08025404

0801e9e8 <__tz_lock>:
 801e9e8:	4801      	ldr	r0, [pc, #4]	; (801e9f0 <__tz_lock+0x8>)
 801e9ea:	f7fe bebf 	b.w	801d76c <__retarget_lock_acquire>
 801e9ee:	bf00      	nop
 801e9f0:	20000d7b 	.word	0x20000d7b

0801e9f4 <__tz_unlock>:
 801e9f4:	4801      	ldr	r0, [pc, #4]	; (801e9fc <__tz_unlock+0x8>)
 801e9f6:	f7fe bebb 	b.w	801d770 <__retarget_lock_release>
 801e9fa:	bf00      	nop
 801e9fc:	20000d7b 	.word	0x20000d7b

0801ea00 <_tzset_unlocked>:
 801ea00:	4b01      	ldr	r3, [pc, #4]	; (801ea08 <_tzset_unlocked+0x8>)
 801ea02:	6818      	ldr	r0, [r3, #0]
 801ea04:	f000 b802 	b.w	801ea0c <_tzset_unlocked_r>
 801ea08:	20000104 	.word	0x20000104

0801ea0c <_tzset_unlocked_r>:
 801ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea10:	b08d      	sub	sp, #52	; 0x34
 801ea12:	4607      	mov	r7, r0
 801ea14:	f000 fbc4 	bl	801f1a0 <__gettzinfo>
 801ea18:	49ae      	ldr	r1, [pc, #696]	; (801ecd4 <_tzset_unlocked_r+0x2c8>)
 801ea1a:	4eaf      	ldr	r6, [pc, #700]	; (801ecd8 <_tzset_unlocked_r+0x2cc>)
 801ea1c:	4605      	mov	r5, r0
 801ea1e:	4638      	mov	r0, r7
 801ea20:	f000 fba4 	bl	801f16c <_getenv_r>
 801ea24:	4604      	mov	r4, r0
 801ea26:	b970      	cbnz	r0, 801ea46 <_tzset_unlocked_r+0x3a>
 801ea28:	4bac      	ldr	r3, [pc, #688]	; (801ecdc <_tzset_unlocked_r+0x2d0>)
 801ea2a:	4aad      	ldr	r2, [pc, #692]	; (801ece0 <_tzset_unlocked_r+0x2d4>)
 801ea2c:	6018      	str	r0, [r3, #0]
 801ea2e:	4bad      	ldr	r3, [pc, #692]	; (801ece4 <_tzset_unlocked_r+0x2d8>)
 801ea30:	6018      	str	r0, [r3, #0]
 801ea32:	4bad      	ldr	r3, [pc, #692]	; (801ece8 <_tzset_unlocked_r+0x2dc>)
 801ea34:	6830      	ldr	r0, [r6, #0]
 801ea36:	e9c3 2200 	strd	r2, r2, [r3]
 801ea3a:	f7fe ff07 	bl	801d84c <free>
 801ea3e:	6034      	str	r4, [r6, #0]
 801ea40:	b00d      	add	sp, #52	; 0x34
 801ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea46:	6831      	ldr	r1, [r6, #0]
 801ea48:	2900      	cmp	r1, #0
 801ea4a:	d15f      	bne.n	801eb0c <_tzset_unlocked_r+0x100>
 801ea4c:	6830      	ldr	r0, [r6, #0]
 801ea4e:	f7fe fefd 	bl	801d84c <free>
 801ea52:	4620      	mov	r0, r4
 801ea54:	f7e1 fbf2 	bl	800023c <strlen>
 801ea58:	1c41      	adds	r1, r0, #1
 801ea5a:	4638      	mov	r0, r7
 801ea5c:	f7fe ff74 	bl	801d948 <_malloc_r>
 801ea60:	6030      	str	r0, [r6, #0]
 801ea62:	2800      	cmp	r0, #0
 801ea64:	d157      	bne.n	801eb16 <_tzset_unlocked_r+0x10a>
 801ea66:	7823      	ldrb	r3, [r4, #0]
 801ea68:	4aa0      	ldr	r2, [pc, #640]	; (801ecec <_tzset_unlocked_r+0x2e0>)
 801ea6a:	49a1      	ldr	r1, [pc, #644]	; (801ecf0 <_tzset_unlocked_r+0x2e4>)
 801ea6c:	2b3a      	cmp	r3, #58	; 0x3a
 801ea6e:	bf08      	it	eq
 801ea70:	3401      	addeq	r4, #1
 801ea72:	ae0a      	add	r6, sp, #40	; 0x28
 801ea74:	4633      	mov	r3, r6
 801ea76:	4620      	mov	r0, r4
 801ea78:	f001 f988 	bl	801fd8c <siscanf>
 801ea7c:	2800      	cmp	r0, #0
 801ea7e:	dddf      	ble.n	801ea40 <_tzset_unlocked_r+0x34>
 801ea80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea82:	18e7      	adds	r7, r4, r3
 801ea84:	5ce3      	ldrb	r3, [r4, r3]
 801ea86:	2b2d      	cmp	r3, #45	; 0x2d
 801ea88:	d149      	bne.n	801eb1e <_tzset_unlocked_r+0x112>
 801ea8a:	3701      	adds	r7, #1
 801ea8c:	f04f 34ff 	mov.w	r4, #4294967295
 801ea90:	f10d 0a20 	add.w	sl, sp, #32
 801ea94:	f10d 0b1e 	add.w	fp, sp, #30
 801ea98:	f04f 0800 	mov.w	r8, #0
 801ea9c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801eaa0:	4994      	ldr	r1, [pc, #592]	; (801ecf4 <_tzset_unlocked_r+0x2e8>)
 801eaa2:	9603      	str	r6, [sp, #12]
 801eaa4:	f8cd b000 	str.w	fp, [sp]
 801eaa8:	4633      	mov	r3, r6
 801eaaa:	aa07      	add	r2, sp, #28
 801eaac:	4638      	mov	r0, r7
 801eaae:	f8ad 801e 	strh.w	r8, [sp, #30]
 801eab2:	f8ad 8020 	strh.w	r8, [sp, #32]
 801eab6:	f001 f969 	bl	801fd8c <siscanf>
 801eaba:	4540      	cmp	r0, r8
 801eabc:	ddc0      	ble.n	801ea40 <_tzset_unlocked_r+0x34>
 801eabe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801eac2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801eac6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801ed00 <_tzset_unlocked_r+0x2f4>
 801eaca:	213c      	movs	r1, #60	; 0x3c
 801eacc:	fb01 2203 	mla	r2, r1, r3, r2
 801ead0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ead4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ead8:	fb01 2303 	mla	r3, r1, r3, r2
 801eadc:	435c      	muls	r4, r3
 801eade:	62ac      	str	r4, [r5, #40]	; 0x28
 801eae0:	4c81      	ldr	r4, [pc, #516]	; (801ece8 <_tzset_unlocked_r+0x2dc>)
 801eae2:	4b82      	ldr	r3, [pc, #520]	; (801ecec <_tzset_unlocked_r+0x2e0>)
 801eae4:	6023      	str	r3, [r4, #0]
 801eae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eae8:	4981      	ldr	r1, [pc, #516]	; (801ecf0 <_tzset_unlocked_r+0x2e4>)
 801eaea:	441f      	add	r7, r3
 801eaec:	464a      	mov	r2, r9
 801eaee:	4633      	mov	r3, r6
 801eaf0:	4638      	mov	r0, r7
 801eaf2:	f001 f94b 	bl	801fd8c <siscanf>
 801eaf6:	4540      	cmp	r0, r8
 801eaf8:	dc16      	bgt.n	801eb28 <_tzset_unlocked_r+0x11c>
 801eafa:	6823      	ldr	r3, [r4, #0]
 801eafc:	6063      	str	r3, [r4, #4]
 801eafe:	4b77      	ldr	r3, [pc, #476]	; (801ecdc <_tzset_unlocked_r+0x2d0>)
 801eb00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801eb02:	601a      	str	r2, [r3, #0]
 801eb04:	4b77      	ldr	r3, [pc, #476]	; (801ece4 <_tzset_unlocked_r+0x2d8>)
 801eb06:	f8c3 8000 	str.w	r8, [r3]
 801eb0a:	e799      	b.n	801ea40 <_tzset_unlocked_r+0x34>
 801eb0c:	f7e1 fb9e 	bl	800024c <strcmp>
 801eb10:	2800      	cmp	r0, #0
 801eb12:	d19b      	bne.n	801ea4c <_tzset_unlocked_r+0x40>
 801eb14:	e794      	b.n	801ea40 <_tzset_unlocked_r+0x34>
 801eb16:	4621      	mov	r1, r4
 801eb18:	f001 f964 	bl	801fde4 <strcpy>
 801eb1c:	e7a3      	b.n	801ea66 <_tzset_unlocked_r+0x5a>
 801eb1e:	2b2b      	cmp	r3, #43	; 0x2b
 801eb20:	bf08      	it	eq
 801eb22:	3701      	addeq	r7, #1
 801eb24:	2401      	movs	r4, #1
 801eb26:	e7b3      	b.n	801ea90 <_tzset_unlocked_r+0x84>
 801eb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb2a:	f8c4 9004 	str.w	r9, [r4, #4]
 801eb2e:	18fc      	adds	r4, r7, r3
 801eb30:	5cfb      	ldrb	r3, [r7, r3]
 801eb32:	2b2d      	cmp	r3, #45	; 0x2d
 801eb34:	f040 808b 	bne.w	801ec4e <_tzset_unlocked_r+0x242>
 801eb38:	3401      	adds	r4, #1
 801eb3a:	f04f 37ff 	mov.w	r7, #4294967295
 801eb3e:	2300      	movs	r3, #0
 801eb40:	f8ad 301c 	strh.w	r3, [sp, #28]
 801eb44:	f8ad 301e 	strh.w	r3, [sp, #30]
 801eb48:	f8ad 3020 	strh.w	r3, [sp, #32]
 801eb4c:	930a      	str	r3, [sp, #40]	; 0x28
 801eb4e:	e9cd a602 	strd	sl, r6, [sp, #8]
 801eb52:	e9cd b600 	strd	fp, r6, [sp]
 801eb56:	4967      	ldr	r1, [pc, #412]	; (801ecf4 <_tzset_unlocked_r+0x2e8>)
 801eb58:	4633      	mov	r3, r6
 801eb5a:	aa07      	add	r2, sp, #28
 801eb5c:	4620      	mov	r0, r4
 801eb5e:	f001 f915 	bl	801fd8c <siscanf>
 801eb62:	2800      	cmp	r0, #0
 801eb64:	dc78      	bgt.n	801ec58 <_tzset_unlocked_r+0x24c>
 801eb66:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801eb68:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801eb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb6e:	652f      	str	r7, [r5, #80]	; 0x50
 801eb70:	441c      	add	r4, r3
 801eb72:	462f      	mov	r7, r5
 801eb74:	f04f 0900 	mov.w	r9, #0
 801eb78:	7823      	ldrb	r3, [r4, #0]
 801eb7a:	2b2c      	cmp	r3, #44	; 0x2c
 801eb7c:	bf08      	it	eq
 801eb7e:	3401      	addeq	r4, #1
 801eb80:	f894 8000 	ldrb.w	r8, [r4]
 801eb84:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801eb88:	d178      	bne.n	801ec7c <_tzset_unlocked_r+0x270>
 801eb8a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801eb8e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801eb92:	ab09      	add	r3, sp, #36	; 0x24
 801eb94:	9300      	str	r3, [sp, #0]
 801eb96:	4958      	ldr	r1, [pc, #352]	; (801ecf8 <_tzset_unlocked_r+0x2ec>)
 801eb98:	9603      	str	r6, [sp, #12]
 801eb9a:	4633      	mov	r3, r6
 801eb9c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801eba0:	4620      	mov	r0, r4
 801eba2:	f001 f8f3 	bl	801fd8c <siscanf>
 801eba6:	2803      	cmp	r0, #3
 801eba8:	f47f af4a 	bne.w	801ea40 <_tzset_unlocked_r+0x34>
 801ebac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ebb0:	1e4b      	subs	r3, r1, #1
 801ebb2:	2b0b      	cmp	r3, #11
 801ebb4:	f63f af44 	bhi.w	801ea40 <_tzset_unlocked_r+0x34>
 801ebb8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ebbc:	1e53      	subs	r3, r2, #1
 801ebbe:	2b04      	cmp	r3, #4
 801ebc0:	f63f af3e 	bhi.w	801ea40 <_tzset_unlocked_r+0x34>
 801ebc4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ebc8:	2b06      	cmp	r3, #6
 801ebca:	f63f af39 	bhi.w	801ea40 <_tzset_unlocked_r+0x34>
 801ebce:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801ebd2:	f887 8008 	strb.w	r8, [r7, #8]
 801ebd6:	617b      	str	r3, [r7, #20]
 801ebd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebda:	eb04 0803 	add.w	r8, r4, r3
 801ebde:	2302      	movs	r3, #2
 801ebe0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ebe4:	2300      	movs	r3, #0
 801ebe6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ebea:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ebee:	930a      	str	r3, [sp, #40]	; 0x28
 801ebf0:	f898 3000 	ldrb.w	r3, [r8]
 801ebf4:	2b2f      	cmp	r3, #47	; 0x2f
 801ebf6:	d109      	bne.n	801ec0c <_tzset_unlocked_r+0x200>
 801ebf8:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ebfc:	e9cd b600 	strd	fp, r6, [sp]
 801ec00:	493e      	ldr	r1, [pc, #248]	; (801ecfc <_tzset_unlocked_r+0x2f0>)
 801ec02:	4633      	mov	r3, r6
 801ec04:	aa07      	add	r2, sp, #28
 801ec06:	4640      	mov	r0, r8
 801ec08:	f001 f8c0 	bl	801fd8c <siscanf>
 801ec0c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ec10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ec14:	213c      	movs	r1, #60	; 0x3c
 801ec16:	fb01 2203 	mla	r2, r1, r3, r2
 801ec1a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ec1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ec22:	fb01 2303 	mla	r3, r1, r3, r2
 801ec26:	61bb      	str	r3, [r7, #24]
 801ec28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ec2a:	3728      	adds	r7, #40	; 0x28
 801ec2c:	4444      	add	r4, r8
 801ec2e:	f1b9 0f00 	cmp.w	r9, #0
 801ec32:	d020      	beq.n	801ec76 <_tzset_unlocked_r+0x26a>
 801ec34:	6868      	ldr	r0, [r5, #4]
 801ec36:	f7ff fe2f 	bl	801e898 <__tzcalc_limits>
 801ec3a:	4b28      	ldr	r3, [pc, #160]	; (801ecdc <_tzset_unlocked_r+0x2d0>)
 801ec3c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ec3e:	601a      	str	r2, [r3, #0]
 801ec40:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801ec42:	1a9b      	subs	r3, r3, r2
 801ec44:	4a27      	ldr	r2, [pc, #156]	; (801ece4 <_tzset_unlocked_r+0x2d8>)
 801ec46:	bf18      	it	ne
 801ec48:	2301      	movne	r3, #1
 801ec4a:	6013      	str	r3, [r2, #0]
 801ec4c:	e6f8      	b.n	801ea40 <_tzset_unlocked_r+0x34>
 801ec4e:	2b2b      	cmp	r3, #43	; 0x2b
 801ec50:	bf08      	it	eq
 801ec52:	3401      	addeq	r4, #1
 801ec54:	2701      	movs	r7, #1
 801ec56:	e772      	b.n	801eb3e <_tzset_unlocked_r+0x132>
 801ec58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ec5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ec60:	213c      	movs	r1, #60	; 0x3c
 801ec62:	fb01 2203 	mla	r2, r1, r3, r2
 801ec66:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ec6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ec6e:	fb01 2303 	mla	r3, r1, r3, r2
 801ec72:	435f      	muls	r7, r3
 801ec74:	e77a      	b.n	801eb6c <_tzset_unlocked_r+0x160>
 801ec76:	f04f 0901 	mov.w	r9, #1
 801ec7a:	e77d      	b.n	801eb78 <_tzset_unlocked_r+0x16c>
 801ec7c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801ec80:	bf06      	itte	eq
 801ec82:	3401      	addeq	r4, #1
 801ec84:	4643      	moveq	r3, r8
 801ec86:	2344      	movne	r3, #68	; 0x44
 801ec88:	220a      	movs	r2, #10
 801ec8a:	a90b      	add	r1, sp, #44	; 0x2c
 801ec8c:	4620      	mov	r0, r4
 801ec8e:	9305      	str	r3, [sp, #20]
 801ec90:	f7ff fdde 	bl	801e850 <strtoul>
 801ec94:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ec98:	9b05      	ldr	r3, [sp, #20]
 801ec9a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801ec9e:	45a0      	cmp	r8, r4
 801eca0:	d114      	bne.n	801eccc <_tzset_unlocked_r+0x2c0>
 801eca2:	234d      	movs	r3, #77	; 0x4d
 801eca4:	f1b9 0f00 	cmp.w	r9, #0
 801eca8:	d107      	bne.n	801ecba <_tzset_unlocked_r+0x2ae>
 801ecaa:	722b      	strb	r3, [r5, #8]
 801ecac:	2103      	movs	r1, #3
 801ecae:	2302      	movs	r3, #2
 801ecb0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801ecb4:	f8c5 9014 	str.w	r9, [r5, #20]
 801ecb8:	e791      	b.n	801ebde <_tzset_unlocked_r+0x1d2>
 801ecba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801ecbe:	220b      	movs	r2, #11
 801ecc0:	2301      	movs	r3, #1
 801ecc2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ecca:	e788      	b.n	801ebde <_tzset_unlocked_r+0x1d2>
 801eccc:	b280      	uxth	r0, r0
 801ecce:	723b      	strb	r3, [r7, #8]
 801ecd0:	6178      	str	r0, [r7, #20]
 801ecd2:	e784      	b.n	801ebde <_tzset_unlocked_r+0x1d2>
 801ecd4:	08025744 	.word	0x08025744
 801ecd8:	20000cd4 	.word	0x20000cd4
 801ecdc:	20000cdc 	.word	0x20000cdc
 801ece0:	08025747 	.word	0x08025747
 801ece4:	20000cd8 	.word	0x20000cd8
 801ece8:	20000168 	.word	0x20000168
 801ecec:	20000cc7 	.word	0x20000cc7
 801ecf0:	0802574b 	.word	0x0802574b
 801ecf4:	0802576e 	.word	0x0802576e
 801ecf8:	0802575a 	.word	0x0802575a
 801ecfc:	0802576d 	.word	0x0802576d
 801ed00:	20000cbc 	.word	0x20000cbc

0801ed04 <_vsniprintf_r>:
 801ed04:	b530      	push	{r4, r5, lr}
 801ed06:	1e14      	subs	r4, r2, #0
 801ed08:	4605      	mov	r5, r0
 801ed0a:	b09b      	sub	sp, #108	; 0x6c
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	da05      	bge.n	801ed1c <_vsniprintf_r+0x18>
 801ed10:	238b      	movs	r3, #139	; 0x8b
 801ed12:	602b      	str	r3, [r5, #0]
 801ed14:	f04f 30ff 	mov.w	r0, #4294967295
 801ed18:	b01b      	add	sp, #108	; 0x6c
 801ed1a:	bd30      	pop	{r4, r5, pc}
 801ed1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ed20:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ed24:	bf14      	ite	ne
 801ed26:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ed2a:	4623      	moveq	r3, r4
 801ed2c:	9302      	str	r3, [sp, #8]
 801ed2e:	9305      	str	r3, [sp, #20]
 801ed30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ed34:	9100      	str	r1, [sp, #0]
 801ed36:	9104      	str	r1, [sp, #16]
 801ed38:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ed3c:	4602      	mov	r2, r0
 801ed3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ed40:	4669      	mov	r1, sp
 801ed42:	4628      	mov	r0, r5
 801ed44:	f000 fba6 	bl	801f494 <_svfiprintf_r>
 801ed48:	1c43      	adds	r3, r0, #1
 801ed4a:	bfbc      	itt	lt
 801ed4c:	238b      	movlt	r3, #139	; 0x8b
 801ed4e:	602b      	strlt	r3, [r5, #0]
 801ed50:	2c00      	cmp	r4, #0
 801ed52:	d0e1      	beq.n	801ed18 <_vsniprintf_r+0x14>
 801ed54:	9b00      	ldr	r3, [sp, #0]
 801ed56:	2200      	movs	r2, #0
 801ed58:	701a      	strb	r2, [r3, #0]
 801ed5a:	e7dd      	b.n	801ed18 <_vsniprintf_r+0x14>

0801ed5c <vsniprintf>:
 801ed5c:	b507      	push	{r0, r1, r2, lr}
 801ed5e:	9300      	str	r3, [sp, #0]
 801ed60:	4613      	mov	r3, r2
 801ed62:	460a      	mov	r2, r1
 801ed64:	4601      	mov	r1, r0
 801ed66:	4803      	ldr	r0, [pc, #12]	; (801ed74 <vsniprintf+0x18>)
 801ed68:	6800      	ldr	r0, [r0, #0]
 801ed6a:	f7ff ffcb 	bl	801ed04 <_vsniprintf_r>
 801ed6e:	b003      	add	sp, #12
 801ed70:	f85d fb04 	ldr.w	pc, [sp], #4
 801ed74:	20000104 	.word	0x20000104

0801ed78 <__swbuf_r>:
 801ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed7a:	460e      	mov	r6, r1
 801ed7c:	4614      	mov	r4, r2
 801ed7e:	4605      	mov	r5, r0
 801ed80:	b118      	cbz	r0, 801ed8a <__swbuf_r+0x12>
 801ed82:	6983      	ldr	r3, [r0, #24]
 801ed84:	b90b      	cbnz	r3, 801ed8a <__swbuf_r+0x12>
 801ed86:	f7fe f93f 	bl	801d008 <__sinit>
 801ed8a:	4b21      	ldr	r3, [pc, #132]	; (801ee10 <__swbuf_r+0x98>)
 801ed8c:	429c      	cmp	r4, r3
 801ed8e:	d12b      	bne.n	801ede8 <__swbuf_r+0x70>
 801ed90:	686c      	ldr	r4, [r5, #4]
 801ed92:	69a3      	ldr	r3, [r4, #24]
 801ed94:	60a3      	str	r3, [r4, #8]
 801ed96:	89a3      	ldrh	r3, [r4, #12]
 801ed98:	071a      	lsls	r2, r3, #28
 801ed9a:	d52f      	bpl.n	801edfc <__swbuf_r+0x84>
 801ed9c:	6923      	ldr	r3, [r4, #16]
 801ed9e:	b36b      	cbz	r3, 801edfc <__swbuf_r+0x84>
 801eda0:	6923      	ldr	r3, [r4, #16]
 801eda2:	6820      	ldr	r0, [r4, #0]
 801eda4:	1ac0      	subs	r0, r0, r3
 801eda6:	6963      	ldr	r3, [r4, #20]
 801eda8:	b2f6      	uxtb	r6, r6
 801edaa:	4283      	cmp	r3, r0
 801edac:	4637      	mov	r7, r6
 801edae:	dc04      	bgt.n	801edba <__swbuf_r+0x42>
 801edb0:	4621      	mov	r1, r4
 801edb2:	4628      	mov	r0, r5
 801edb4:	f7fe f882 	bl	801cebc <_fflush_r>
 801edb8:	bb30      	cbnz	r0, 801ee08 <__swbuf_r+0x90>
 801edba:	68a3      	ldr	r3, [r4, #8]
 801edbc:	3b01      	subs	r3, #1
 801edbe:	60a3      	str	r3, [r4, #8]
 801edc0:	6823      	ldr	r3, [r4, #0]
 801edc2:	1c5a      	adds	r2, r3, #1
 801edc4:	6022      	str	r2, [r4, #0]
 801edc6:	701e      	strb	r6, [r3, #0]
 801edc8:	6963      	ldr	r3, [r4, #20]
 801edca:	3001      	adds	r0, #1
 801edcc:	4283      	cmp	r3, r0
 801edce:	d004      	beq.n	801edda <__swbuf_r+0x62>
 801edd0:	89a3      	ldrh	r3, [r4, #12]
 801edd2:	07db      	lsls	r3, r3, #31
 801edd4:	d506      	bpl.n	801ede4 <__swbuf_r+0x6c>
 801edd6:	2e0a      	cmp	r6, #10
 801edd8:	d104      	bne.n	801ede4 <__swbuf_r+0x6c>
 801edda:	4621      	mov	r1, r4
 801eddc:	4628      	mov	r0, r5
 801edde:	f7fe f86d 	bl	801cebc <_fflush_r>
 801ede2:	b988      	cbnz	r0, 801ee08 <__swbuf_r+0x90>
 801ede4:	4638      	mov	r0, r7
 801ede6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ede8:	4b0a      	ldr	r3, [pc, #40]	; (801ee14 <__swbuf_r+0x9c>)
 801edea:	429c      	cmp	r4, r3
 801edec:	d101      	bne.n	801edf2 <__swbuf_r+0x7a>
 801edee:	68ac      	ldr	r4, [r5, #8]
 801edf0:	e7cf      	b.n	801ed92 <__swbuf_r+0x1a>
 801edf2:	4b09      	ldr	r3, [pc, #36]	; (801ee18 <__swbuf_r+0xa0>)
 801edf4:	429c      	cmp	r4, r3
 801edf6:	bf08      	it	eq
 801edf8:	68ec      	ldreq	r4, [r5, #12]
 801edfa:	e7ca      	b.n	801ed92 <__swbuf_r+0x1a>
 801edfc:	4621      	mov	r1, r4
 801edfe:	4628      	mov	r0, r5
 801ee00:	f000 f81e 	bl	801ee40 <__swsetup_r>
 801ee04:	2800      	cmp	r0, #0
 801ee06:	d0cb      	beq.n	801eda0 <__swbuf_r+0x28>
 801ee08:	f04f 37ff 	mov.w	r7, #4294967295
 801ee0c:	e7ea      	b.n	801ede4 <__swbuf_r+0x6c>
 801ee0e:	bf00      	nop
 801ee10:	08025348 	.word	0x08025348
 801ee14:	08025368 	.word	0x08025368
 801ee18:	08025328 	.word	0x08025328

0801ee1c <_write_r>:
 801ee1c:	b538      	push	{r3, r4, r5, lr}
 801ee1e:	4d07      	ldr	r5, [pc, #28]	; (801ee3c <_write_r+0x20>)
 801ee20:	4604      	mov	r4, r0
 801ee22:	4608      	mov	r0, r1
 801ee24:	4611      	mov	r1, r2
 801ee26:	2200      	movs	r2, #0
 801ee28:	602a      	str	r2, [r5, #0]
 801ee2a:	461a      	mov	r2, r3
 801ee2c:	f7e1 ffd0 	bl	8000dd0 <_write>
 801ee30:	1c43      	adds	r3, r0, #1
 801ee32:	d102      	bne.n	801ee3a <_write_r+0x1e>
 801ee34:	682b      	ldr	r3, [r5, #0]
 801ee36:	b103      	cbz	r3, 801ee3a <_write_r+0x1e>
 801ee38:	6023      	str	r3, [r4, #0]
 801ee3a:	bd38      	pop	{r3, r4, r5, pc}
 801ee3c:	20000d80 	.word	0x20000d80

0801ee40 <__swsetup_r>:
 801ee40:	4b32      	ldr	r3, [pc, #200]	; (801ef0c <__swsetup_r+0xcc>)
 801ee42:	b570      	push	{r4, r5, r6, lr}
 801ee44:	681d      	ldr	r5, [r3, #0]
 801ee46:	4606      	mov	r6, r0
 801ee48:	460c      	mov	r4, r1
 801ee4a:	b125      	cbz	r5, 801ee56 <__swsetup_r+0x16>
 801ee4c:	69ab      	ldr	r3, [r5, #24]
 801ee4e:	b913      	cbnz	r3, 801ee56 <__swsetup_r+0x16>
 801ee50:	4628      	mov	r0, r5
 801ee52:	f7fe f8d9 	bl	801d008 <__sinit>
 801ee56:	4b2e      	ldr	r3, [pc, #184]	; (801ef10 <__swsetup_r+0xd0>)
 801ee58:	429c      	cmp	r4, r3
 801ee5a:	d10f      	bne.n	801ee7c <__swsetup_r+0x3c>
 801ee5c:	686c      	ldr	r4, [r5, #4]
 801ee5e:	89a3      	ldrh	r3, [r4, #12]
 801ee60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ee64:	0719      	lsls	r1, r3, #28
 801ee66:	d42c      	bmi.n	801eec2 <__swsetup_r+0x82>
 801ee68:	06dd      	lsls	r5, r3, #27
 801ee6a:	d411      	bmi.n	801ee90 <__swsetup_r+0x50>
 801ee6c:	2309      	movs	r3, #9
 801ee6e:	6033      	str	r3, [r6, #0]
 801ee70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ee74:	81a3      	strh	r3, [r4, #12]
 801ee76:	f04f 30ff 	mov.w	r0, #4294967295
 801ee7a:	e03e      	b.n	801eefa <__swsetup_r+0xba>
 801ee7c:	4b25      	ldr	r3, [pc, #148]	; (801ef14 <__swsetup_r+0xd4>)
 801ee7e:	429c      	cmp	r4, r3
 801ee80:	d101      	bne.n	801ee86 <__swsetup_r+0x46>
 801ee82:	68ac      	ldr	r4, [r5, #8]
 801ee84:	e7eb      	b.n	801ee5e <__swsetup_r+0x1e>
 801ee86:	4b24      	ldr	r3, [pc, #144]	; (801ef18 <__swsetup_r+0xd8>)
 801ee88:	429c      	cmp	r4, r3
 801ee8a:	bf08      	it	eq
 801ee8c:	68ec      	ldreq	r4, [r5, #12]
 801ee8e:	e7e6      	b.n	801ee5e <__swsetup_r+0x1e>
 801ee90:	0758      	lsls	r0, r3, #29
 801ee92:	d512      	bpl.n	801eeba <__swsetup_r+0x7a>
 801ee94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ee96:	b141      	cbz	r1, 801eeaa <__swsetup_r+0x6a>
 801ee98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ee9c:	4299      	cmp	r1, r3
 801ee9e:	d002      	beq.n	801eea6 <__swsetup_r+0x66>
 801eea0:	4630      	mov	r0, r6
 801eea2:	f7fe fd01 	bl	801d8a8 <_free_r>
 801eea6:	2300      	movs	r3, #0
 801eea8:	6363      	str	r3, [r4, #52]	; 0x34
 801eeaa:	89a3      	ldrh	r3, [r4, #12]
 801eeac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801eeb0:	81a3      	strh	r3, [r4, #12]
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	6063      	str	r3, [r4, #4]
 801eeb6:	6923      	ldr	r3, [r4, #16]
 801eeb8:	6023      	str	r3, [r4, #0]
 801eeba:	89a3      	ldrh	r3, [r4, #12]
 801eebc:	f043 0308 	orr.w	r3, r3, #8
 801eec0:	81a3      	strh	r3, [r4, #12]
 801eec2:	6923      	ldr	r3, [r4, #16]
 801eec4:	b94b      	cbnz	r3, 801eeda <__swsetup_r+0x9a>
 801eec6:	89a3      	ldrh	r3, [r4, #12]
 801eec8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801eecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eed0:	d003      	beq.n	801eeda <__swsetup_r+0x9a>
 801eed2:	4621      	mov	r1, r4
 801eed4:	4630      	mov	r0, r6
 801eed6:	f7fe fc71 	bl	801d7bc <__smakebuf_r>
 801eeda:	89a0      	ldrh	r0, [r4, #12]
 801eedc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801eee0:	f010 0301 	ands.w	r3, r0, #1
 801eee4:	d00a      	beq.n	801eefc <__swsetup_r+0xbc>
 801eee6:	2300      	movs	r3, #0
 801eee8:	60a3      	str	r3, [r4, #8]
 801eeea:	6963      	ldr	r3, [r4, #20]
 801eeec:	425b      	negs	r3, r3
 801eeee:	61a3      	str	r3, [r4, #24]
 801eef0:	6923      	ldr	r3, [r4, #16]
 801eef2:	b943      	cbnz	r3, 801ef06 <__swsetup_r+0xc6>
 801eef4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801eef8:	d1ba      	bne.n	801ee70 <__swsetup_r+0x30>
 801eefa:	bd70      	pop	{r4, r5, r6, pc}
 801eefc:	0781      	lsls	r1, r0, #30
 801eefe:	bf58      	it	pl
 801ef00:	6963      	ldrpl	r3, [r4, #20]
 801ef02:	60a3      	str	r3, [r4, #8]
 801ef04:	e7f4      	b.n	801eef0 <__swsetup_r+0xb0>
 801ef06:	2000      	movs	r0, #0
 801ef08:	e7f7      	b.n	801eefa <__swsetup_r+0xba>
 801ef0a:	bf00      	nop
 801ef0c:	20000104 	.word	0x20000104
 801ef10:	08025348 	.word	0x08025348
 801ef14:	08025368 	.word	0x08025368
 801ef18:	08025328 	.word	0x08025328

0801ef1c <__register_exitproc>:
 801ef1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ef20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801efdc <__register_exitproc+0xc0>
 801ef24:	4606      	mov	r6, r0
 801ef26:	f8d8 0000 	ldr.w	r0, [r8]
 801ef2a:	461f      	mov	r7, r3
 801ef2c:	460d      	mov	r5, r1
 801ef2e:	4691      	mov	r9, r2
 801ef30:	f7fe fc1d 	bl	801d76e <__retarget_lock_acquire_recursive>
 801ef34:	4b25      	ldr	r3, [pc, #148]	; (801efcc <__register_exitproc+0xb0>)
 801ef36:	681c      	ldr	r4, [r3, #0]
 801ef38:	b934      	cbnz	r4, 801ef48 <__register_exitproc+0x2c>
 801ef3a:	4c25      	ldr	r4, [pc, #148]	; (801efd0 <__register_exitproc+0xb4>)
 801ef3c:	601c      	str	r4, [r3, #0]
 801ef3e:	4b25      	ldr	r3, [pc, #148]	; (801efd4 <__register_exitproc+0xb8>)
 801ef40:	b113      	cbz	r3, 801ef48 <__register_exitproc+0x2c>
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801ef48:	6863      	ldr	r3, [r4, #4]
 801ef4a:	2b1f      	cmp	r3, #31
 801ef4c:	dd07      	ble.n	801ef5e <__register_exitproc+0x42>
 801ef4e:	f8d8 0000 	ldr.w	r0, [r8]
 801ef52:	f7fe fc0e 	bl	801d772 <__retarget_lock_release_recursive>
 801ef56:	f04f 30ff 	mov.w	r0, #4294967295
 801ef5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef5e:	b34e      	cbz	r6, 801efb4 <__register_exitproc+0x98>
 801ef60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ef64:	b988      	cbnz	r0, 801ef8a <__register_exitproc+0x6e>
 801ef66:	4b1c      	ldr	r3, [pc, #112]	; (801efd8 <__register_exitproc+0xbc>)
 801ef68:	b923      	cbnz	r3, 801ef74 <__register_exitproc+0x58>
 801ef6a:	f8d8 0000 	ldr.w	r0, [r8]
 801ef6e:	f7fe fbff 	bl	801d770 <__retarget_lock_release>
 801ef72:	e7f0      	b.n	801ef56 <__register_exitproc+0x3a>
 801ef74:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ef78:	f7fe fc60 	bl	801d83c <malloc>
 801ef7c:	2800      	cmp	r0, #0
 801ef7e:	d0f4      	beq.n	801ef6a <__register_exitproc+0x4e>
 801ef80:	2300      	movs	r3, #0
 801ef82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801ef86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ef8a:	6863      	ldr	r3, [r4, #4]
 801ef8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ef90:	2201      	movs	r2, #1
 801ef92:	409a      	lsls	r2, r3
 801ef94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ef98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ef9c:	4313      	orrs	r3, r2
 801ef9e:	2e02      	cmp	r6, #2
 801efa0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801efa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801efa8:	bf02      	ittt	eq
 801efaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801efae:	431a      	orreq	r2, r3
 801efb0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801efb4:	6863      	ldr	r3, [r4, #4]
 801efb6:	f8d8 0000 	ldr.w	r0, [r8]
 801efba:	1c5a      	adds	r2, r3, #1
 801efbc:	3302      	adds	r3, #2
 801efbe:	6062      	str	r2, [r4, #4]
 801efc0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801efc4:	f7fe fbd5 	bl	801d772 <__retarget_lock_release_recursive>
 801efc8:	2000      	movs	r0, #0
 801efca:	e7c6      	b.n	801ef5a <__register_exitproc+0x3e>
 801efcc:	20000d6c 	.word	0x20000d6c
 801efd0:	20000ce0 	.word	0x20000ce0
 801efd4:	00000000 	.word	0x00000000
 801efd8:	0801d83d 	.word	0x0801d83d
 801efdc:	20000170 	.word	0x20000170

0801efe0 <abs>:
 801efe0:	2800      	cmp	r0, #0
 801efe2:	bfb8      	it	lt
 801efe4:	4240      	neglt	r0, r0
 801efe6:	4770      	bx	lr

0801efe8 <__assert_func>:
 801efe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801efea:	4614      	mov	r4, r2
 801efec:	461a      	mov	r2, r3
 801efee:	4b09      	ldr	r3, [pc, #36]	; (801f014 <__assert_func+0x2c>)
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	4605      	mov	r5, r0
 801eff4:	68d8      	ldr	r0, [r3, #12]
 801eff6:	b14c      	cbz	r4, 801f00c <__assert_func+0x24>
 801eff8:	4b07      	ldr	r3, [pc, #28]	; (801f018 <__assert_func+0x30>)
 801effa:	9100      	str	r1, [sp, #0]
 801effc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f000:	4906      	ldr	r1, [pc, #24]	; (801f01c <__assert_func+0x34>)
 801f002:	462b      	mov	r3, r5
 801f004:	f000 f854 	bl	801f0b0 <fiprintf>
 801f008:	f7fd fe42 	bl	801cc90 <abort>
 801f00c:	4b04      	ldr	r3, [pc, #16]	; (801f020 <__assert_func+0x38>)
 801f00e:	461c      	mov	r4, r3
 801f010:	e7f3      	b.n	801effa <__assert_func+0x12>
 801f012:	bf00      	nop
 801f014:	20000104 	.word	0x20000104
 801f018:	08025780 	.word	0x08025780
 801f01c:	0802578d 	.word	0x0802578d
 801f020:	080257bb 	.word	0x080257bb

0801f024 <_close_r>:
 801f024:	b538      	push	{r3, r4, r5, lr}
 801f026:	4d06      	ldr	r5, [pc, #24]	; (801f040 <_close_r+0x1c>)
 801f028:	2300      	movs	r3, #0
 801f02a:	4604      	mov	r4, r0
 801f02c:	4608      	mov	r0, r1
 801f02e:	602b      	str	r3, [r5, #0]
 801f030:	f7e1 feea 	bl	8000e08 <_close>
 801f034:	1c43      	adds	r3, r0, #1
 801f036:	d102      	bne.n	801f03e <_close_r+0x1a>
 801f038:	682b      	ldr	r3, [r5, #0]
 801f03a:	b103      	cbz	r3, 801f03e <_close_r+0x1a>
 801f03c:	6023      	str	r3, [r4, #0]
 801f03e:	bd38      	pop	{r3, r4, r5, pc}
 801f040:	20000d80 	.word	0x20000d80

0801f044 <__sflags>:
 801f044:	780b      	ldrb	r3, [r1, #0]
 801f046:	2b72      	cmp	r3, #114	; 0x72
 801f048:	b530      	push	{r4, r5, lr}
 801f04a:	d022      	beq.n	801f092 <__sflags+0x4e>
 801f04c:	2b77      	cmp	r3, #119	; 0x77
 801f04e:	d024      	beq.n	801f09a <__sflags+0x56>
 801f050:	2b61      	cmp	r3, #97	; 0x61
 801f052:	d027      	beq.n	801f0a4 <__sflags+0x60>
 801f054:	2316      	movs	r3, #22
 801f056:	6003      	str	r3, [r0, #0]
 801f058:	2000      	movs	r0, #0
 801f05a:	bd30      	pop	{r4, r5, pc}
 801f05c:	2d62      	cmp	r5, #98	; 0x62
 801f05e:	d012      	beq.n	801f086 <__sflags+0x42>
 801f060:	2d78      	cmp	r5, #120	; 0x78
 801f062:	d013      	beq.n	801f08c <__sflags+0x48>
 801f064:	2d2b      	cmp	r5, #43	; 0x2b
 801f066:	d107      	bne.n	801f078 <__sflags+0x34>
 801f068:	f020 001c 	bic.w	r0, r0, #28
 801f06c:	f023 0303 	bic.w	r3, r3, #3
 801f070:	f040 0010 	orr.w	r0, r0, #16
 801f074:	f043 0302 	orr.w	r3, r3, #2
 801f078:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801f07c:	2d00      	cmp	r5, #0
 801f07e:	d1ed      	bne.n	801f05c <__sflags+0x18>
 801f080:	4323      	orrs	r3, r4
 801f082:	6013      	str	r3, [r2, #0]
 801f084:	e7e9      	b.n	801f05a <__sflags+0x16>
 801f086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f08a:	e7f5      	b.n	801f078 <__sflags+0x34>
 801f08c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f090:	e7f2      	b.n	801f078 <__sflags+0x34>
 801f092:	2400      	movs	r4, #0
 801f094:	4623      	mov	r3, r4
 801f096:	2004      	movs	r0, #4
 801f098:	e7ee      	b.n	801f078 <__sflags+0x34>
 801f09a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801f09e:	2301      	movs	r3, #1
 801f0a0:	2008      	movs	r0, #8
 801f0a2:	e7e9      	b.n	801f078 <__sflags+0x34>
 801f0a4:	f44f 7402 	mov.w	r4, #520	; 0x208
 801f0a8:	2301      	movs	r3, #1
 801f0aa:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f0ae:	e7e3      	b.n	801f078 <__sflags+0x34>

0801f0b0 <fiprintf>:
 801f0b0:	b40e      	push	{r1, r2, r3}
 801f0b2:	b503      	push	{r0, r1, lr}
 801f0b4:	4601      	mov	r1, r0
 801f0b6:	ab03      	add	r3, sp, #12
 801f0b8:	4805      	ldr	r0, [pc, #20]	; (801f0d0 <fiprintf+0x20>)
 801f0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801f0be:	6800      	ldr	r0, [r0, #0]
 801f0c0:	9301      	str	r3, [sp, #4]
 801f0c2:	f000 fb11 	bl	801f6e8 <_vfiprintf_r>
 801f0c6:	b002      	add	sp, #8
 801f0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801f0cc:	b003      	add	sp, #12
 801f0ce:	4770      	bx	lr
 801f0d0:	20000104 	.word	0x20000104

0801f0d4 <_fstat_r>:
 801f0d4:	b538      	push	{r3, r4, r5, lr}
 801f0d6:	4d07      	ldr	r5, [pc, #28]	; (801f0f4 <_fstat_r+0x20>)
 801f0d8:	2300      	movs	r3, #0
 801f0da:	4604      	mov	r4, r0
 801f0dc:	4608      	mov	r0, r1
 801f0de:	4611      	mov	r1, r2
 801f0e0:	602b      	str	r3, [r5, #0]
 801f0e2:	f7e1 fe9d 	bl	8000e20 <_fstat>
 801f0e6:	1c43      	adds	r3, r0, #1
 801f0e8:	d102      	bne.n	801f0f0 <_fstat_r+0x1c>
 801f0ea:	682b      	ldr	r3, [r5, #0]
 801f0ec:	b103      	cbz	r3, 801f0f0 <_fstat_r+0x1c>
 801f0ee:	6023      	str	r3, [r4, #0]
 801f0f0:	bd38      	pop	{r3, r4, r5, pc}
 801f0f2:	bf00      	nop
 801f0f4:	20000d80 	.word	0x20000d80

0801f0f8 <_findenv_r>:
 801f0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	4607      	mov	r7, r0
 801f0fe:	4689      	mov	r9, r1
 801f100:	4616      	mov	r6, r2
 801f102:	f000 fe97 	bl	801fe34 <__env_lock>
 801f106:	4b18      	ldr	r3, [pc, #96]	; (801f168 <_findenv_r+0x70>)
 801f108:	681c      	ldr	r4, [r3, #0]
 801f10a:	469a      	mov	sl, r3
 801f10c:	b134      	cbz	r4, 801f11c <_findenv_r+0x24>
 801f10e:	464b      	mov	r3, r9
 801f110:	4698      	mov	r8, r3
 801f112:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f116:	b139      	cbz	r1, 801f128 <_findenv_r+0x30>
 801f118:	293d      	cmp	r1, #61	; 0x3d
 801f11a:	d1f9      	bne.n	801f110 <_findenv_r+0x18>
 801f11c:	4638      	mov	r0, r7
 801f11e:	f000 fe8f 	bl	801fe40 <__env_unlock>
 801f122:	2000      	movs	r0, #0
 801f124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f128:	eba8 0809 	sub.w	r8, r8, r9
 801f12c:	46a3      	mov	fp, r4
 801f12e:	f854 0b04 	ldr.w	r0, [r4], #4
 801f132:	2800      	cmp	r0, #0
 801f134:	d0f2      	beq.n	801f11c <_findenv_r+0x24>
 801f136:	4642      	mov	r2, r8
 801f138:	4649      	mov	r1, r9
 801f13a:	f000 fe5b 	bl	801fdf4 <strncmp>
 801f13e:	2800      	cmp	r0, #0
 801f140:	d1f4      	bne.n	801f12c <_findenv_r+0x34>
 801f142:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f146:	eb03 0508 	add.w	r5, r3, r8
 801f14a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f14e:	2b3d      	cmp	r3, #61	; 0x3d
 801f150:	d1ec      	bne.n	801f12c <_findenv_r+0x34>
 801f152:	f8da 3000 	ldr.w	r3, [sl]
 801f156:	ebab 0303 	sub.w	r3, fp, r3
 801f15a:	109b      	asrs	r3, r3, #2
 801f15c:	4638      	mov	r0, r7
 801f15e:	6033      	str	r3, [r6, #0]
 801f160:	f000 fe6e 	bl	801fe40 <__env_unlock>
 801f164:	1c68      	adds	r0, r5, #1
 801f166:	e7dd      	b.n	801f124 <_findenv_r+0x2c>
 801f168:	20000000 	.word	0x20000000

0801f16c <_getenv_r>:
 801f16c:	b507      	push	{r0, r1, r2, lr}
 801f16e:	aa01      	add	r2, sp, #4
 801f170:	f7ff ffc2 	bl	801f0f8 <_findenv_r>
 801f174:	b003      	add	sp, #12
 801f176:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f17c <_gettimeofday_r>:
 801f17c:	b538      	push	{r3, r4, r5, lr}
 801f17e:	4d07      	ldr	r5, [pc, #28]	; (801f19c <_gettimeofday_r+0x20>)
 801f180:	2300      	movs	r3, #0
 801f182:	4604      	mov	r4, r0
 801f184:	4608      	mov	r0, r1
 801f186:	4611      	mov	r1, r2
 801f188:	602b      	str	r3, [r5, #0]
 801f18a:	f001 fa99 	bl	80206c0 <_gettimeofday>
 801f18e:	1c43      	adds	r3, r0, #1
 801f190:	d102      	bne.n	801f198 <_gettimeofday_r+0x1c>
 801f192:	682b      	ldr	r3, [r5, #0]
 801f194:	b103      	cbz	r3, 801f198 <_gettimeofday_r+0x1c>
 801f196:	6023      	str	r3, [r4, #0]
 801f198:	bd38      	pop	{r3, r4, r5, pc}
 801f19a:	bf00      	nop
 801f19c:	20000d80 	.word	0x20000d80

0801f1a0 <__gettzinfo>:
 801f1a0:	4800      	ldr	r0, [pc, #0]	; (801f1a4 <__gettzinfo+0x4>)
 801f1a2:	4770      	bx	lr
 801f1a4:	20000178 	.word	0x20000178

0801f1a8 <gmtime_r>:
 801f1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1ac:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f1b0:	460c      	mov	r4, r1
 801f1b2:	4a51      	ldr	r2, [pc, #324]	; (801f2f8 <gmtime_r+0x150>)
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	4630      	mov	r0, r6
 801f1b8:	4639      	mov	r1, r7
 801f1ba:	f7e1 fafb 	bl	80007b4 <__aeabi_ldivmod>
 801f1be:	4639      	mov	r1, r7
 801f1c0:	4605      	mov	r5, r0
 801f1c2:	4a4d      	ldr	r2, [pc, #308]	; (801f2f8 <gmtime_r+0x150>)
 801f1c4:	4630      	mov	r0, r6
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	f7e1 faf4 	bl	80007b4 <__aeabi_ldivmod>
 801f1cc:	2a00      	cmp	r2, #0
 801f1ce:	bfbc      	itt	lt
 801f1d0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f1d4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f1d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f1dc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f1e0:	fbb2 f3f1 	udiv	r3, r2, r1
 801f1e4:	fb01 2213 	mls	r2, r1, r3, r2
 801f1e8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f1ec:	bfac      	ite	ge
 801f1ee:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f1f2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f1f6:	60a3      	str	r3, [r4, #8]
 801f1f8:	fbb2 f3f1 	udiv	r3, r2, r1
 801f1fc:	fb01 2213 	mls	r2, r1, r3, r2
 801f200:	6063      	str	r3, [r4, #4]
 801f202:	6022      	str	r2, [r4, #0]
 801f204:	1cc3      	adds	r3, r0, #3
 801f206:	2207      	movs	r2, #7
 801f208:	fb93 f2f2 	sdiv	r2, r3, r2
 801f20c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f210:	1a9b      	subs	r3, r3, r2
 801f212:	bf48      	it	mi
 801f214:	3307      	addmi	r3, #7
 801f216:	2800      	cmp	r0, #0
 801f218:	61a3      	str	r3, [r4, #24]
 801f21a:	bfb8      	it	lt
 801f21c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801f220:	4936      	ldr	r1, [pc, #216]	; (801f2fc <gmtime_r+0x154>)
 801f222:	bfae      	itee	ge
 801f224:	fb90 f1f1 	sdivge	r1, r0, r1
 801f228:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801f22c:	fb93 f1f1 	sdivlt	r1, r3, r1
 801f230:	4b33      	ldr	r3, [pc, #204]	; (801f300 <gmtime_r+0x158>)
 801f232:	fb03 0001 	mla	r0, r3, r1, r0
 801f236:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f23a:	fbb0 f2f2 	udiv	r2, r0, r2
 801f23e:	4402      	add	r2, r0
 801f240:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801f244:	fbb0 f3fc 	udiv	r3, r0, ip
 801f248:	1ad2      	subs	r2, r2, r3
 801f24a:	f240 176d 	movw	r7, #365	; 0x16d
 801f24e:	4b2d      	ldr	r3, [pc, #180]	; (801f304 <gmtime_r+0x15c>)
 801f250:	fbb0 f3f3 	udiv	r3, r0, r3
 801f254:	2664      	movs	r6, #100	; 0x64
 801f256:	1ad3      	subs	r3, r2, r3
 801f258:	fbb3 f5f7 	udiv	r5, r3, r7
 801f25c:	fbb3 f3fc 	udiv	r3, r3, ip
 801f260:	fbb5 f2f6 	udiv	r2, r5, r6
 801f264:	1ad3      	subs	r3, r2, r3
 801f266:	4403      	add	r3, r0
 801f268:	fb07 3315 	mls	r3, r7, r5, r3
 801f26c:	2099      	movs	r0, #153	; 0x99
 801f26e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f272:	f10c 0c02 	add.w	ip, ip, #2
 801f276:	f103 0e01 	add.w	lr, r3, #1
 801f27a:	fbbc f7f0 	udiv	r7, ip, r0
 801f27e:	4378      	muls	r0, r7
 801f280:	3002      	adds	r0, #2
 801f282:	f04f 0805 	mov.w	r8, #5
 801f286:	fbb0 f0f8 	udiv	r0, r0, r8
 801f28a:	ebae 0000 	sub.w	r0, lr, r0
 801f28e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f292:	45f4      	cmp	ip, lr
 801f294:	bf94      	ite	ls
 801f296:	f04f 0c02 	movls.w	ip, #2
 801f29a:	f06f 0c09 	mvnhi.w	ip, #9
 801f29e:	4467      	add	r7, ip
 801f2a0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f2a4:	fb0c 5101 	mla	r1, ip, r1, r5
 801f2a8:	2f01      	cmp	r7, #1
 801f2aa:	bf98      	it	ls
 801f2ac:	3101      	addls	r1, #1
 801f2ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f2b2:	d30c      	bcc.n	801f2ce <gmtime_r+0x126>
 801f2b4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f2b8:	61e3      	str	r3, [r4, #28]
 801f2ba:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f2be:	2300      	movs	r3, #0
 801f2c0:	60e0      	str	r0, [r4, #12]
 801f2c2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f2c6:	6223      	str	r3, [r4, #32]
 801f2c8:	4620      	mov	r0, r4
 801f2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2ce:	f015 0f03 	tst.w	r5, #3
 801f2d2:	d102      	bne.n	801f2da <gmtime_r+0x132>
 801f2d4:	fb06 5212 	mls	r2, r6, r2, r5
 801f2d8:	b95a      	cbnz	r2, 801f2f2 <gmtime_r+0x14a>
 801f2da:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f2de:	fbb5 f2f6 	udiv	r2, r5, r6
 801f2e2:	fb06 5212 	mls	r2, r6, r2, r5
 801f2e6:	fab2 f282 	clz	r2, r2
 801f2ea:	0952      	lsrs	r2, r2, #5
 801f2ec:	333b      	adds	r3, #59	; 0x3b
 801f2ee:	4413      	add	r3, r2
 801f2f0:	e7e2      	b.n	801f2b8 <gmtime_r+0x110>
 801f2f2:	2201      	movs	r2, #1
 801f2f4:	e7fa      	b.n	801f2ec <gmtime_r+0x144>
 801f2f6:	bf00      	nop
 801f2f8:	00015180 	.word	0x00015180
 801f2fc:	00023ab1 	.word	0x00023ab1
 801f300:	fffdc54f 	.word	0xfffdc54f
 801f304:	00023ab0 	.word	0x00023ab0

0801f308 <_isatty_r>:
 801f308:	b538      	push	{r3, r4, r5, lr}
 801f30a:	4d06      	ldr	r5, [pc, #24]	; (801f324 <_isatty_r+0x1c>)
 801f30c:	2300      	movs	r3, #0
 801f30e:	4604      	mov	r4, r0
 801f310:	4608      	mov	r0, r1
 801f312:	602b      	str	r3, [r5, #0]
 801f314:	f7e1 fd94 	bl	8000e40 <_isatty>
 801f318:	1c43      	adds	r3, r0, #1
 801f31a:	d102      	bne.n	801f322 <_isatty_r+0x1a>
 801f31c:	682b      	ldr	r3, [r5, #0]
 801f31e:	b103      	cbz	r3, 801f322 <_isatty_r+0x1a>
 801f320:	6023      	str	r3, [r4, #0]
 801f322:	bd38      	pop	{r3, r4, r5, pc}
 801f324:	20000d80 	.word	0x20000d80

0801f328 <labs>:
 801f328:	2800      	cmp	r0, #0
 801f32a:	bfb8      	it	lt
 801f32c:	4240      	neglt	r0, r0
 801f32e:	4770      	bx	lr

0801f330 <_lseek_r>:
 801f330:	b538      	push	{r3, r4, r5, lr}
 801f332:	4d07      	ldr	r5, [pc, #28]	; (801f350 <_lseek_r+0x20>)
 801f334:	4604      	mov	r4, r0
 801f336:	4608      	mov	r0, r1
 801f338:	4611      	mov	r1, r2
 801f33a:	2200      	movs	r2, #0
 801f33c:	602a      	str	r2, [r5, #0]
 801f33e:	461a      	mov	r2, r3
 801f340:	f7e1 fd89 	bl	8000e56 <_lseek>
 801f344:	1c43      	adds	r3, r0, #1
 801f346:	d102      	bne.n	801f34e <_lseek_r+0x1e>
 801f348:	682b      	ldr	r3, [r5, #0]
 801f34a:	b103      	cbz	r3, 801f34e <_lseek_r+0x1e>
 801f34c:	6023      	str	r3, [r4, #0]
 801f34e:	bd38      	pop	{r3, r4, r5, pc}
 801f350:	20000d80 	.word	0x20000d80

0801f354 <__ascii_mbtowc>:
 801f354:	b082      	sub	sp, #8
 801f356:	b901      	cbnz	r1, 801f35a <__ascii_mbtowc+0x6>
 801f358:	a901      	add	r1, sp, #4
 801f35a:	b142      	cbz	r2, 801f36e <__ascii_mbtowc+0x1a>
 801f35c:	b14b      	cbz	r3, 801f372 <__ascii_mbtowc+0x1e>
 801f35e:	7813      	ldrb	r3, [r2, #0]
 801f360:	600b      	str	r3, [r1, #0]
 801f362:	7812      	ldrb	r2, [r2, #0]
 801f364:	1e10      	subs	r0, r2, #0
 801f366:	bf18      	it	ne
 801f368:	2001      	movne	r0, #1
 801f36a:	b002      	add	sp, #8
 801f36c:	4770      	bx	lr
 801f36e:	4610      	mov	r0, r2
 801f370:	e7fb      	b.n	801f36a <__ascii_mbtowc+0x16>
 801f372:	f06f 0001 	mvn.w	r0, #1
 801f376:	e7f8      	b.n	801f36a <__ascii_mbtowc+0x16>

0801f378 <__malloc_lock>:
 801f378:	4801      	ldr	r0, [pc, #4]	; (801f380 <__malloc_lock+0x8>)
 801f37a:	f7fe b9f8 	b.w	801d76e <__retarget_lock_acquire_recursive>
 801f37e:	bf00      	nop
 801f380:	20000d78 	.word	0x20000d78

0801f384 <__malloc_unlock>:
 801f384:	4801      	ldr	r0, [pc, #4]	; (801f38c <__malloc_unlock+0x8>)
 801f386:	f7fe b9f4 	b.w	801d772 <__retarget_lock_release_recursive>
 801f38a:	bf00      	nop
 801f38c:	20000d78 	.word	0x20000d78

0801f390 <_realloc_r>:
 801f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f392:	4607      	mov	r7, r0
 801f394:	4614      	mov	r4, r2
 801f396:	460e      	mov	r6, r1
 801f398:	b921      	cbnz	r1, 801f3a4 <_realloc_r+0x14>
 801f39a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f39e:	4611      	mov	r1, r2
 801f3a0:	f7fe bad2 	b.w	801d948 <_malloc_r>
 801f3a4:	b922      	cbnz	r2, 801f3b0 <_realloc_r+0x20>
 801f3a6:	f7fe fa7f 	bl	801d8a8 <_free_r>
 801f3aa:	4625      	mov	r5, r4
 801f3ac:	4628      	mov	r0, r5
 801f3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3b0:	f000 fd66 	bl	801fe80 <_malloc_usable_size_r>
 801f3b4:	42a0      	cmp	r0, r4
 801f3b6:	d20f      	bcs.n	801f3d8 <_realloc_r+0x48>
 801f3b8:	4621      	mov	r1, r4
 801f3ba:	4638      	mov	r0, r7
 801f3bc:	f7fe fac4 	bl	801d948 <_malloc_r>
 801f3c0:	4605      	mov	r5, r0
 801f3c2:	2800      	cmp	r0, #0
 801f3c4:	d0f2      	beq.n	801f3ac <_realloc_r+0x1c>
 801f3c6:	4631      	mov	r1, r6
 801f3c8:	4622      	mov	r2, r4
 801f3ca:	f7fe fa47 	bl	801d85c <memcpy>
 801f3ce:	4631      	mov	r1, r6
 801f3d0:	4638      	mov	r0, r7
 801f3d2:	f7fe fa69 	bl	801d8a8 <_free_r>
 801f3d6:	e7e9      	b.n	801f3ac <_realloc_r+0x1c>
 801f3d8:	4635      	mov	r5, r6
 801f3da:	e7e7      	b.n	801f3ac <_realloc_r+0x1c>

0801f3dc <__ssputs_r>:
 801f3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3e0:	688e      	ldr	r6, [r1, #8]
 801f3e2:	429e      	cmp	r6, r3
 801f3e4:	4682      	mov	sl, r0
 801f3e6:	460c      	mov	r4, r1
 801f3e8:	4690      	mov	r8, r2
 801f3ea:	461f      	mov	r7, r3
 801f3ec:	d838      	bhi.n	801f460 <__ssputs_r+0x84>
 801f3ee:	898a      	ldrh	r2, [r1, #12]
 801f3f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f3f4:	d032      	beq.n	801f45c <__ssputs_r+0x80>
 801f3f6:	6825      	ldr	r5, [r4, #0]
 801f3f8:	6909      	ldr	r1, [r1, #16]
 801f3fa:	eba5 0901 	sub.w	r9, r5, r1
 801f3fe:	6965      	ldr	r5, [r4, #20]
 801f400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f408:	3301      	adds	r3, #1
 801f40a:	444b      	add	r3, r9
 801f40c:	106d      	asrs	r5, r5, #1
 801f40e:	429d      	cmp	r5, r3
 801f410:	bf38      	it	cc
 801f412:	461d      	movcc	r5, r3
 801f414:	0553      	lsls	r3, r2, #21
 801f416:	d531      	bpl.n	801f47c <__ssputs_r+0xa0>
 801f418:	4629      	mov	r1, r5
 801f41a:	f7fe fa95 	bl	801d948 <_malloc_r>
 801f41e:	4606      	mov	r6, r0
 801f420:	b950      	cbnz	r0, 801f438 <__ssputs_r+0x5c>
 801f422:	230c      	movs	r3, #12
 801f424:	f8ca 3000 	str.w	r3, [sl]
 801f428:	89a3      	ldrh	r3, [r4, #12]
 801f42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f42e:	81a3      	strh	r3, [r4, #12]
 801f430:	f04f 30ff 	mov.w	r0, #4294967295
 801f434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f438:	6921      	ldr	r1, [r4, #16]
 801f43a:	464a      	mov	r2, r9
 801f43c:	f7fe fa0e 	bl	801d85c <memcpy>
 801f440:	89a3      	ldrh	r3, [r4, #12]
 801f442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f44a:	81a3      	strh	r3, [r4, #12]
 801f44c:	6126      	str	r6, [r4, #16]
 801f44e:	6165      	str	r5, [r4, #20]
 801f450:	444e      	add	r6, r9
 801f452:	eba5 0509 	sub.w	r5, r5, r9
 801f456:	6026      	str	r6, [r4, #0]
 801f458:	60a5      	str	r5, [r4, #8]
 801f45a:	463e      	mov	r6, r7
 801f45c:	42be      	cmp	r6, r7
 801f45e:	d900      	bls.n	801f462 <__ssputs_r+0x86>
 801f460:	463e      	mov	r6, r7
 801f462:	4632      	mov	r2, r6
 801f464:	6820      	ldr	r0, [r4, #0]
 801f466:	4641      	mov	r1, r8
 801f468:	f000 fcf0 	bl	801fe4c <memmove>
 801f46c:	68a3      	ldr	r3, [r4, #8]
 801f46e:	6822      	ldr	r2, [r4, #0]
 801f470:	1b9b      	subs	r3, r3, r6
 801f472:	4432      	add	r2, r6
 801f474:	60a3      	str	r3, [r4, #8]
 801f476:	6022      	str	r2, [r4, #0]
 801f478:	2000      	movs	r0, #0
 801f47a:	e7db      	b.n	801f434 <__ssputs_r+0x58>
 801f47c:	462a      	mov	r2, r5
 801f47e:	f7ff ff87 	bl	801f390 <_realloc_r>
 801f482:	4606      	mov	r6, r0
 801f484:	2800      	cmp	r0, #0
 801f486:	d1e1      	bne.n	801f44c <__ssputs_r+0x70>
 801f488:	6921      	ldr	r1, [r4, #16]
 801f48a:	4650      	mov	r0, sl
 801f48c:	f7fe fa0c 	bl	801d8a8 <_free_r>
 801f490:	e7c7      	b.n	801f422 <__ssputs_r+0x46>
	...

0801f494 <_svfiprintf_r>:
 801f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f498:	4698      	mov	r8, r3
 801f49a:	898b      	ldrh	r3, [r1, #12]
 801f49c:	061b      	lsls	r3, r3, #24
 801f49e:	b09d      	sub	sp, #116	; 0x74
 801f4a0:	4607      	mov	r7, r0
 801f4a2:	460d      	mov	r5, r1
 801f4a4:	4614      	mov	r4, r2
 801f4a6:	d50e      	bpl.n	801f4c6 <_svfiprintf_r+0x32>
 801f4a8:	690b      	ldr	r3, [r1, #16]
 801f4aa:	b963      	cbnz	r3, 801f4c6 <_svfiprintf_r+0x32>
 801f4ac:	2140      	movs	r1, #64	; 0x40
 801f4ae:	f7fe fa4b 	bl	801d948 <_malloc_r>
 801f4b2:	6028      	str	r0, [r5, #0]
 801f4b4:	6128      	str	r0, [r5, #16]
 801f4b6:	b920      	cbnz	r0, 801f4c2 <_svfiprintf_r+0x2e>
 801f4b8:	230c      	movs	r3, #12
 801f4ba:	603b      	str	r3, [r7, #0]
 801f4bc:	f04f 30ff 	mov.w	r0, #4294967295
 801f4c0:	e0d1      	b.n	801f666 <_svfiprintf_r+0x1d2>
 801f4c2:	2340      	movs	r3, #64	; 0x40
 801f4c4:	616b      	str	r3, [r5, #20]
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	9309      	str	r3, [sp, #36]	; 0x24
 801f4ca:	2320      	movs	r3, #32
 801f4cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f4d0:	f8cd 800c 	str.w	r8, [sp, #12]
 801f4d4:	2330      	movs	r3, #48	; 0x30
 801f4d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f680 <_svfiprintf_r+0x1ec>
 801f4da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f4de:	f04f 0901 	mov.w	r9, #1
 801f4e2:	4623      	mov	r3, r4
 801f4e4:	469a      	mov	sl, r3
 801f4e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f4ea:	b10a      	cbz	r2, 801f4f0 <_svfiprintf_r+0x5c>
 801f4ec:	2a25      	cmp	r2, #37	; 0x25
 801f4ee:	d1f9      	bne.n	801f4e4 <_svfiprintf_r+0x50>
 801f4f0:	ebba 0b04 	subs.w	fp, sl, r4
 801f4f4:	d00b      	beq.n	801f50e <_svfiprintf_r+0x7a>
 801f4f6:	465b      	mov	r3, fp
 801f4f8:	4622      	mov	r2, r4
 801f4fa:	4629      	mov	r1, r5
 801f4fc:	4638      	mov	r0, r7
 801f4fe:	f7ff ff6d 	bl	801f3dc <__ssputs_r>
 801f502:	3001      	adds	r0, #1
 801f504:	f000 80aa 	beq.w	801f65c <_svfiprintf_r+0x1c8>
 801f508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f50a:	445a      	add	r2, fp
 801f50c:	9209      	str	r2, [sp, #36]	; 0x24
 801f50e:	f89a 3000 	ldrb.w	r3, [sl]
 801f512:	2b00      	cmp	r3, #0
 801f514:	f000 80a2 	beq.w	801f65c <_svfiprintf_r+0x1c8>
 801f518:	2300      	movs	r3, #0
 801f51a:	f04f 32ff 	mov.w	r2, #4294967295
 801f51e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f522:	f10a 0a01 	add.w	sl, sl, #1
 801f526:	9304      	str	r3, [sp, #16]
 801f528:	9307      	str	r3, [sp, #28]
 801f52a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f52e:	931a      	str	r3, [sp, #104]	; 0x68
 801f530:	4654      	mov	r4, sl
 801f532:	2205      	movs	r2, #5
 801f534:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f538:	4851      	ldr	r0, [pc, #324]	; (801f680 <_svfiprintf_r+0x1ec>)
 801f53a:	f7e0 fe91 	bl	8000260 <memchr>
 801f53e:	9a04      	ldr	r2, [sp, #16]
 801f540:	b9d8      	cbnz	r0, 801f57a <_svfiprintf_r+0xe6>
 801f542:	06d0      	lsls	r0, r2, #27
 801f544:	bf44      	itt	mi
 801f546:	2320      	movmi	r3, #32
 801f548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f54c:	0711      	lsls	r1, r2, #28
 801f54e:	bf44      	itt	mi
 801f550:	232b      	movmi	r3, #43	; 0x2b
 801f552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f556:	f89a 3000 	ldrb.w	r3, [sl]
 801f55a:	2b2a      	cmp	r3, #42	; 0x2a
 801f55c:	d015      	beq.n	801f58a <_svfiprintf_r+0xf6>
 801f55e:	9a07      	ldr	r2, [sp, #28]
 801f560:	4654      	mov	r4, sl
 801f562:	2000      	movs	r0, #0
 801f564:	f04f 0c0a 	mov.w	ip, #10
 801f568:	4621      	mov	r1, r4
 801f56a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f56e:	3b30      	subs	r3, #48	; 0x30
 801f570:	2b09      	cmp	r3, #9
 801f572:	d94e      	bls.n	801f612 <_svfiprintf_r+0x17e>
 801f574:	b1b0      	cbz	r0, 801f5a4 <_svfiprintf_r+0x110>
 801f576:	9207      	str	r2, [sp, #28]
 801f578:	e014      	b.n	801f5a4 <_svfiprintf_r+0x110>
 801f57a:	eba0 0308 	sub.w	r3, r0, r8
 801f57e:	fa09 f303 	lsl.w	r3, r9, r3
 801f582:	4313      	orrs	r3, r2
 801f584:	9304      	str	r3, [sp, #16]
 801f586:	46a2      	mov	sl, r4
 801f588:	e7d2      	b.n	801f530 <_svfiprintf_r+0x9c>
 801f58a:	9b03      	ldr	r3, [sp, #12]
 801f58c:	1d19      	adds	r1, r3, #4
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	9103      	str	r1, [sp, #12]
 801f592:	2b00      	cmp	r3, #0
 801f594:	bfbb      	ittet	lt
 801f596:	425b      	neglt	r3, r3
 801f598:	f042 0202 	orrlt.w	r2, r2, #2
 801f59c:	9307      	strge	r3, [sp, #28]
 801f59e:	9307      	strlt	r3, [sp, #28]
 801f5a0:	bfb8      	it	lt
 801f5a2:	9204      	strlt	r2, [sp, #16]
 801f5a4:	7823      	ldrb	r3, [r4, #0]
 801f5a6:	2b2e      	cmp	r3, #46	; 0x2e
 801f5a8:	d10c      	bne.n	801f5c4 <_svfiprintf_r+0x130>
 801f5aa:	7863      	ldrb	r3, [r4, #1]
 801f5ac:	2b2a      	cmp	r3, #42	; 0x2a
 801f5ae:	d135      	bne.n	801f61c <_svfiprintf_r+0x188>
 801f5b0:	9b03      	ldr	r3, [sp, #12]
 801f5b2:	1d1a      	adds	r2, r3, #4
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	9203      	str	r2, [sp, #12]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	bfb8      	it	lt
 801f5bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801f5c0:	3402      	adds	r4, #2
 801f5c2:	9305      	str	r3, [sp, #20]
 801f5c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f690 <_svfiprintf_r+0x1fc>
 801f5c8:	7821      	ldrb	r1, [r4, #0]
 801f5ca:	2203      	movs	r2, #3
 801f5cc:	4650      	mov	r0, sl
 801f5ce:	f7e0 fe47 	bl	8000260 <memchr>
 801f5d2:	b140      	cbz	r0, 801f5e6 <_svfiprintf_r+0x152>
 801f5d4:	2340      	movs	r3, #64	; 0x40
 801f5d6:	eba0 000a 	sub.w	r0, r0, sl
 801f5da:	fa03 f000 	lsl.w	r0, r3, r0
 801f5de:	9b04      	ldr	r3, [sp, #16]
 801f5e0:	4303      	orrs	r3, r0
 801f5e2:	3401      	adds	r4, #1
 801f5e4:	9304      	str	r3, [sp, #16]
 801f5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5ea:	4826      	ldr	r0, [pc, #152]	; (801f684 <_svfiprintf_r+0x1f0>)
 801f5ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f5f0:	2206      	movs	r2, #6
 801f5f2:	f7e0 fe35 	bl	8000260 <memchr>
 801f5f6:	2800      	cmp	r0, #0
 801f5f8:	d038      	beq.n	801f66c <_svfiprintf_r+0x1d8>
 801f5fa:	4b23      	ldr	r3, [pc, #140]	; (801f688 <_svfiprintf_r+0x1f4>)
 801f5fc:	bb1b      	cbnz	r3, 801f646 <_svfiprintf_r+0x1b2>
 801f5fe:	9b03      	ldr	r3, [sp, #12]
 801f600:	3307      	adds	r3, #7
 801f602:	f023 0307 	bic.w	r3, r3, #7
 801f606:	3308      	adds	r3, #8
 801f608:	9303      	str	r3, [sp, #12]
 801f60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f60c:	4433      	add	r3, r6
 801f60e:	9309      	str	r3, [sp, #36]	; 0x24
 801f610:	e767      	b.n	801f4e2 <_svfiprintf_r+0x4e>
 801f612:	fb0c 3202 	mla	r2, ip, r2, r3
 801f616:	460c      	mov	r4, r1
 801f618:	2001      	movs	r0, #1
 801f61a:	e7a5      	b.n	801f568 <_svfiprintf_r+0xd4>
 801f61c:	2300      	movs	r3, #0
 801f61e:	3401      	adds	r4, #1
 801f620:	9305      	str	r3, [sp, #20]
 801f622:	4619      	mov	r1, r3
 801f624:	f04f 0c0a 	mov.w	ip, #10
 801f628:	4620      	mov	r0, r4
 801f62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f62e:	3a30      	subs	r2, #48	; 0x30
 801f630:	2a09      	cmp	r2, #9
 801f632:	d903      	bls.n	801f63c <_svfiprintf_r+0x1a8>
 801f634:	2b00      	cmp	r3, #0
 801f636:	d0c5      	beq.n	801f5c4 <_svfiprintf_r+0x130>
 801f638:	9105      	str	r1, [sp, #20]
 801f63a:	e7c3      	b.n	801f5c4 <_svfiprintf_r+0x130>
 801f63c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f640:	4604      	mov	r4, r0
 801f642:	2301      	movs	r3, #1
 801f644:	e7f0      	b.n	801f628 <_svfiprintf_r+0x194>
 801f646:	ab03      	add	r3, sp, #12
 801f648:	9300      	str	r3, [sp, #0]
 801f64a:	462a      	mov	r2, r5
 801f64c:	4b0f      	ldr	r3, [pc, #60]	; (801f68c <_svfiprintf_r+0x1f8>)
 801f64e:	a904      	add	r1, sp, #16
 801f650:	4638      	mov	r0, r7
 801f652:	f3af 8000 	nop.w
 801f656:	1c42      	adds	r2, r0, #1
 801f658:	4606      	mov	r6, r0
 801f65a:	d1d6      	bne.n	801f60a <_svfiprintf_r+0x176>
 801f65c:	89ab      	ldrh	r3, [r5, #12]
 801f65e:	065b      	lsls	r3, r3, #25
 801f660:	f53f af2c 	bmi.w	801f4bc <_svfiprintf_r+0x28>
 801f664:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f666:	b01d      	add	sp, #116	; 0x74
 801f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f66c:	ab03      	add	r3, sp, #12
 801f66e:	9300      	str	r3, [sp, #0]
 801f670:	462a      	mov	r2, r5
 801f672:	4b06      	ldr	r3, [pc, #24]	; (801f68c <_svfiprintf_r+0x1f8>)
 801f674:	a904      	add	r1, sp, #16
 801f676:	4638      	mov	r0, r7
 801f678:	f000 f9d4 	bl	801fa24 <_printf_i>
 801f67c:	e7eb      	b.n	801f656 <_svfiprintf_r+0x1c2>
 801f67e:	bf00      	nop
 801f680:	080258c7 	.word	0x080258c7
 801f684:	080258d1 	.word	0x080258d1
 801f688:	00000000 	.word	0x00000000
 801f68c:	0801f3dd 	.word	0x0801f3dd
 801f690:	080258cd 	.word	0x080258cd

0801f694 <__sfputc_r>:
 801f694:	6893      	ldr	r3, [r2, #8]
 801f696:	3b01      	subs	r3, #1
 801f698:	2b00      	cmp	r3, #0
 801f69a:	b410      	push	{r4}
 801f69c:	6093      	str	r3, [r2, #8]
 801f69e:	da08      	bge.n	801f6b2 <__sfputc_r+0x1e>
 801f6a0:	6994      	ldr	r4, [r2, #24]
 801f6a2:	42a3      	cmp	r3, r4
 801f6a4:	db01      	blt.n	801f6aa <__sfputc_r+0x16>
 801f6a6:	290a      	cmp	r1, #10
 801f6a8:	d103      	bne.n	801f6b2 <__sfputc_r+0x1e>
 801f6aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f6ae:	f7ff bb63 	b.w	801ed78 <__swbuf_r>
 801f6b2:	6813      	ldr	r3, [r2, #0]
 801f6b4:	1c58      	adds	r0, r3, #1
 801f6b6:	6010      	str	r0, [r2, #0]
 801f6b8:	7019      	strb	r1, [r3, #0]
 801f6ba:	4608      	mov	r0, r1
 801f6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f6c0:	4770      	bx	lr

0801f6c2 <__sfputs_r>:
 801f6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6c4:	4606      	mov	r6, r0
 801f6c6:	460f      	mov	r7, r1
 801f6c8:	4614      	mov	r4, r2
 801f6ca:	18d5      	adds	r5, r2, r3
 801f6cc:	42ac      	cmp	r4, r5
 801f6ce:	d101      	bne.n	801f6d4 <__sfputs_r+0x12>
 801f6d0:	2000      	movs	r0, #0
 801f6d2:	e007      	b.n	801f6e4 <__sfputs_r+0x22>
 801f6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f6d8:	463a      	mov	r2, r7
 801f6da:	4630      	mov	r0, r6
 801f6dc:	f7ff ffda 	bl	801f694 <__sfputc_r>
 801f6e0:	1c43      	adds	r3, r0, #1
 801f6e2:	d1f3      	bne.n	801f6cc <__sfputs_r+0xa>
 801f6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f6e8 <_vfiprintf_r>:
 801f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6ec:	460d      	mov	r5, r1
 801f6ee:	b09d      	sub	sp, #116	; 0x74
 801f6f0:	4614      	mov	r4, r2
 801f6f2:	4698      	mov	r8, r3
 801f6f4:	4606      	mov	r6, r0
 801f6f6:	b118      	cbz	r0, 801f700 <_vfiprintf_r+0x18>
 801f6f8:	6983      	ldr	r3, [r0, #24]
 801f6fa:	b90b      	cbnz	r3, 801f700 <_vfiprintf_r+0x18>
 801f6fc:	f7fd fc84 	bl	801d008 <__sinit>
 801f700:	4b89      	ldr	r3, [pc, #548]	; (801f928 <_vfiprintf_r+0x240>)
 801f702:	429d      	cmp	r5, r3
 801f704:	d11b      	bne.n	801f73e <_vfiprintf_r+0x56>
 801f706:	6875      	ldr	r5, [r6, #4]
 801f708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f70a:	07d9      	lsls	r1, r3, #31
 801f70c:	d405      	bmi.n	801f71a <_vfiprintf_r+0x32>
 801f70e:	89ab      	ldrh	r3, [r5, #12]
 801f710:	059a      	lsls	r2, r3, #22
 801f712:	d402      	bmi.n	801f71a <_vfiprintf_r+0x32>
 801f714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f716:	f7fe f82a 	bl	801d76e <__retarget_lock_acquire_recursive>
 801f71a:	89ab      	ldrh	r3, [r5, #12]
 801f71c:	071b      	lsls	r3, r3, #28
 801f71e:	d501      	bpl.n	801f724 <_vfiprintf_r+0x3c>
 801f720:	692b      	ldr	r3, [r5, #16]
 801f722:	b9eb      	cbnz	r3, 801f760 <_vfiprintf_r+0x78>
 801f724:	4629      	mov	r1, r5
 801f726:	4630      	mov	r0, r6
 801f728:	f7ff fb8a 	bl	801ee40 <__swsetup_r>
 801f72c:	b1c0      	cbz	r0, 801f760 <_vfiprintf_r+0x78>
 801f72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f730:	07dc      	lsls	r4, r3, #31
 801f732:	d50e      	bpl.n	801f752 <_vfiprintf_r+0x6a>
 801f734:	f04f 30ff 	mov.w	r0, #4294967295
 801f738:	b01d      	add	sp, #116	; 0x74
 801f73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f73e:	4b7b      	ldr	r3, [pc, #492]	; (801f92c <_vfiprintf_r+0x244>)
 801f740:	429d      	cmp	r5, r3
 801f742:	d101      	bne.n	801f748 <_vfiprintf_r+0x60>
 801f744:	68b5      	ldr	r5, [r6, #8]
 801f746:	e7df      	b.n	801f708 <_vfiprintf_r+0x20>
 801f748:	4b79      	ldr	r3, [pc, #484]	; (801f930 <_vfiprintf_r+0x248>)
 801f74a:	429d      	cmp	r5, r3
 801f74c:	bf08      	it	eq
 801f74e:	68f5      	ldreq	r5, [r6, #12]
 801f750:	e7da      	b.n	801f708 <_vfiprintf_r+0x20>
 801f752:	89ab      	ldrh	r3, [r5, #12]
 801f754:	0598      	lsls	r0, r3, #22
 801f756:	d4ed      	bmi.n	801f734 <_vfiprintf_r+0x4c>
 801f758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f75a:	f7fe f80a 	bl	801d772 <__retarget_lock_release_recursive>
 801f75e:	e7e9      	b.n	801f734 <_vfiprintf_r+0x4c>
 801f760:	2300      	movs	r3, #0
 801f762:	9309      	str	r3, [sp, #36]	; 0x24
 801f764:	2320      	movs	r3, #32
 801f766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f76a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f76e:	2330      	movs	r3, #48	; 0x30
 801f770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f934 <_vfiprintf_r+0x24c>
 801f774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f778:	f04f 0901 	mov.w	r9, #1
 801f77c:	4623      	mov	r3, r4
 801f77e:	469a      	mov	sl, r3
 801f780:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f784:	b10a      	cbz	r2, 801f78a <_vfiprintf_r+0xa2>
 801f786:	2a25      	cmp	r2, #37	; 0x25
 801f788:	d1f9      	bne.n	801f77e <_vfiprintf_r+0x96>
 801f78a:	ebba 0b04 	subs.w	fp, sl, r4
 801f78e:	d00b      	beq.n	801f7a8 <_vfiprintf_r+0xc0>
 801f790:	465b      	mov	r3, fp
 801f792:	4622      	mov	r2, r4
 801f794:	4629      	mov	r1, r5
 801f796:	4630      	mov	r0, r6
 801f798:	f7ff ff93 	bl	801f6c2 <__sfputs_r>
 801f79c:	3001      	adds	r0, #1
 801f79e:	f000 80aa 	beq.w	801f8f6 <_vfiprintf_r+0x20e>
 801f7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f7a4:	445a      	add	r2, fp
 801f7a6:	9209      	str	r2, [sp, #36]	; 0x24
 801f7a8:	f89a 3000 	ldrb.w	r3, [sl]
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	f000 80a2 	beq.w	801f8f6 <_vfiprintf_r+0x20e>
 801f7b2:	2300      	movs	r3, #0
 801f7b4:	f04f 32ff 	mov.w	r2, #4294967295
 801f7b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f7bc:	f10a 0a01 	add.w	sl, sl, #1
 801f7c0:	9304      	str	r3, [sp, #16]
 801f7c2:	9307      	str	r3, [sp, #28]
 801f7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f7c8:	931a      	str	r3, [sp, #104]	; 0x68
 801f7ca:	4654      	mov	r4, sl
 801f7cc:	2205      	movs	r2, #5
 801f7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7d2:	4858      	ldr	r0, [pc, #352]	; (801f934 <_vfiprintf_r+0x24c>)
 801f7d4:	f7e0 fd44 	bl	8000260 <memchr>
 801f7d8:	9a04      	ldr	r2, [sp, #16]
 801f7da:	b9d8      	cbnz	r0, 801f814 <_vfiprintf_r+0x12c>
 801f7dc:	06d1      	lsls	r1, r2, #27
 801f7de:	bf44      	itt	mi
 801f7e0:	2320      	movmi	r3, #32
 801f7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f7e6:	0713      	lsls	r3, r2, #28
 801f7e8:	bf44      	itt	mi
 801f7ea:	232b      	movmi	r3, #43	; 0x2b
 801f7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f7f0:	f89a 3000 	ldrb.w	r3, [sl]
 801f7f4:	2b2a      	cmp	r3, #42	; 0x2a
 801f7f6:	d015      	beq.n	801f824 <_vfiprintf_r+0x13c>
 801f7f8:	9a07      	ldr	r2, [sp, #28]
 801f7fa:	4654      	mov	r4, sl
 801f7fc:	2000      	movs	r0, #0
 801f7fe:	f04f 0c0a 	mov.w	ip, #10
 801f802:	4621      	mov	r1, r4
 801f804:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f808:	3b30      	subs	r3, #48	; 0x30
 801f80a:	2b09      	cmp	r3, #9
 801f80c:	d94e      	bls.n	801f8ac <_vfiprintf_r+0x1c4>
 801f80e:	b1b0      	cbz	r0, 801f83e <_vfiprintf_r+0x156>
 801f810:	9207      	str	r2, [sp, #28]
 801f812:	e014      	b.n	801f83e <_vfiprintf_r+0x156>
 801f814:	eba0 0308 	sub.w	r3, r0, r8
 801f818:	fa09 f303 	lsl.w	r3, r9, r3
 801f81c:	4313      	orrs	r3, r2
 801f81e:	9304      	str	r3, [sp, #16]
 801f820:	46a2      	mov	sl, r4
 801f822:	e7d2      	b.n	801f7ca <_vfiprintf_r+0xe2>
 801f824:	9b03      	ldr	r3, [sp, #12]
 801f826:	1d19      	adds	r1, r3, #4
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	9103      	str	r1, [sp, #12]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	bfbb      	ittet	lt
 801f830:	425b      	neglt	r3, r3
 801f832:	f042 0202 	orrlt.w	r2, r2, #2
 801f836:	9307      	strge	r3, [sp, #28]
 801f838:	9307      	strlt	r3, [sp, #28]
 801f83a:	bfb8      	it	lt
 801f83c:	9204      	strlt	r2, [sp, #16]
 801f83e:	7823      	ldrb	r3, [r4, #0]
 801f840:	2b2e      	cmp	r3, #46	; 0x2e
 801f842:	d10c      	bne.n	801f85e <_vfiprintf_r+0x176>
 801f844:	7863      	ldrb	r3, [r4, #1]
 801f846:	2b2a      	cmp	r3, #42	; 0x2a
 801f848:	d135      	bne.n	801f8b6 <_vfiprintf_r+0x1ce>
 801f84a:	9b03      	ldr	r3, [sp, #12]
 801f84c:	1d1a      	adds	r2, r3, #4
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	9203      	str	r2, [sp, #12]
 801f852:	2b00      	cmp	r3, #0
 801f854:	bfb8      	it	lt
 801f856:	f04f 33ff 	movlt.w	r3, #4294967295
 801f85a:	3402      	adds	r4, #2
 801f85c:	9305      	str	r3, [sp, #20]
 801f85e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f944 <_vfiprintf_r+0x25c>
 801f862:	7821      	ldrb	r1, [r4, #0]
 801f864:	2203      	movs	r2, #3
 801f866:	4650      	mov	r0, sl
 801f868:	f7e0 fcfa 	bl	8000260 <memchr>
 801f86c:	b140      	cbz	r0, 801f880 <_vfiprintf_r+0x198>
 801f86e:	2340      	movs	r3, #64	; 0x40
 801f870:	eba0 000a 	sub.w	r0, r0, sl
 801f874:	fa03 f000 	lsl.w	r0, r3, r0
 801f878:	9b04      	ldr	r3, [sp, #16]
 801f87a:	4303      	orrs	r3, r0
 801f87c:	3401      	adds	r4, #1
 801f87e:	9304      	str	r3, [sp, #16]
 801f880:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f884:	482c      	ldr	r0, [pc, #176]	; (801f938 <_vfiprintf_r+0x250>)
 801f886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f88a:	2206      	movs	r2, #6
 801f88c:	f7e0 fce8 	bl	8000260 <memchr>
 801f890:	2800      	cmp	r0, #0
 801f892:	d03f      	beq.n	801f914 <_vfiprintf_r+0x22c>
 801f894:	4b29      	ldr	r3, [pc, #164]	; (801f93c <_vfiprintf_r+0x254>)
 801f896:	bb1b      	cbnz	r3, 801f8e0 <_vfiprintf_r+0x1f8>
 801f898:	9b03      	ldr	r3, [sp, #12]
 801f89a:	3307      	adds	r3, #7
 801f89c:	f023 0307 	bic.w	r3, r3, #7
 801f8a0:	3308      	adds	r3, #8
 801f8a2:	9303      	str	r3, [sp, #12]
 801f8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8a6:	443b      	add	r3, r7
 801f8a8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8aa:	e767      	b.n	801f77c <_vfiprintf_r+0x94>
 801f8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801f8b0:	460c      	mov	r4, r1
 801f8b2:	2001      	movs	r0, #1
 801f8b4:	e7a5      	b.n	801f802 <_vfiprintf_r+0x11a>
 801f8b6:	2300      	movs	r3, #0
 801f8b8:	3401      	adds	r4, #1
 801f8ba:	9305      	str	r3, [sp, #20]
 801f8bc:	4619      	mov	r1, r3
 801f8be:	f04f 0c0a 	mov.w	ip, #10
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f8c8:	3a30      	subs	r2, #48	; 0x30
 801f8ca:	2a09      	cmp	r2, #9
 801f8cc:	d903      	bls.n	801f8d6 <_vfiprintf_r+0x1ee>
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d0c5      	beq.n	801f85e <_vfiprintf_r+0x176>
 801f8d2:	9105      	str	r1, [sp, #20]
 801f8d4:	e7c3      	b.n	801f85e <_vfiprintf_r+0x176>
 801f8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f8da:	4604      	mov	r4, r0
 801f8dc:	2301      	movs	r3, #1
 801f8de:	e7f0      	b.n	801f8c2 <_vfiprintf_r+0x1da>
 801f8e0:	ab03      	add	r3, sp, #12
 801f8e2:	9300      	str	r3, [sp, #0]
 801f8e4:	462a      	mov	r2, r5
 801f8e6:	4b16      	ldr	r3, [pc, #88]	; (801f940 <_vfiprintf_r+0x258>)
 801f8e8:	a904      	add	r1, sp, #16
 801f8ea:	4630      	mov	r0, r6
 801f8ec:	f3af 8000 	nop.w
 801f8f0:	4607      	mov	r7, r0
 801f8f2:	1c78      	adds	r0, r7, #1
 801f8f4:	d1d6      	bne.n	801f8a4 <_vfiprintf_r+0x1bc>
 801f8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f8f8:	07d9      	lsls	r1, r3, #31
 801f8fa:	d405      	bmi.n	801f908 <_vfiprintf_r+0x220>
 801f8fc:	89ab      	ldrh	r3, [r5, #12]
 801f8fe:	059a      	lsls	r2, r3, #22
 801f900:	d402      	bmi.n	801f908 <_vfiprintf_r+0x220>
 801f902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f904:	f7fd ff35 	bl	801d772 <__retarget_lock_release_recursive>
 801f908:	89ab      	ldrh	r3, [r5, #12]
 801f90a:	065b      	lsls	r3, r3, #25
 801f90c:	f53f af12 	bmi.w	801f734 <_vfiprintf_r+0x4c>
 801f910:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f912:	e711      	b.n	801f738 <_vfiprintf_r+0x50>
 801f914:	ab03      	add	r3, sp, #12
 801f916:	9300      	str	r3, [sp, #0]
 801f918:	462a      	mov	r2, r5
 801f91a:	4b09      	ldr	r3, [pc, #36]	; (801f940 <_vfiprintf_r+0x258>)
 801f91c:	a904      	add	r1, sp, #16
 801f91e:	4630      	mov	r0, r6
 801f920:	f000 f880 	bl	801fa24 <_printf_i>
 801f924:	e7e4      	b.n	801f8f0 <_vfiprintf_r+0x208>
 801f926:	bf00      	nop
 801f928:	08025348 	.word	0x08025348
 801f92c:	08025368 	.word	0x08025368
 801f930:	08025328 	.word	0x08025328
 801f934:	080258c7 	.word	0x080258c7
 801f938:	080258d1 	.word	0x080258d1
 801f93c:	00000000 	.word	0x00000000
 801f940:	0801f6c3 	.word	0x0801f6c3
 801f944:	080258cd 	.word	0x080258cd

0801f948 <_printf_common>:
 801f948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f94c:	4616      	mov	r6, r2
 801f94e:	4699      	mov	r9, r3
 801f950:	688a      	ldr	r2, [r1, #8]
 801f952:	690b      	ldr	r3, [r1, #16]
 801f954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f958:	4293      	cmp	r3, r2
 801f95a:	bfb8      	it	lt
 801f95c:	4613      	movlt	r3, r2
 801f95e:	6033      	str	r3, [r6, #0]
 801f960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f964:	4607      	mov	r7, r0
 801f966:	460c      	mov	r4, r1
 801f968:	b10a      	cbz	r2, 801f96e <_printf_common+0x26>
 801f96a:	3301      	adds	r3, #1
 801f96c:	6033      	str	r3, [r6, #0]
 801f96e:	6823      	ldr	r3, [r4, #0]
 801f970:	0699      	lsls	r1, r3, #26
 801f972:	bf42      	ittt	mi
 801f974:	6833      	ldrmi	r3, [r6, #0]
 801f976:	3302      	addmi	r3, #2
 801f978:	6033      	strmi	r3, [r6, #0]
 801f97a:	6825      	ldr	r5, [r4, #0]
 801f97c:	f015 0506 	ands.w	r5, r5, #6
 801f980:	d106      	bne.n	801f990 <_printf_common+0x48>
 801f982:	f104 0a19 	add.w	sl, r4, #25
 801f986:	68e3      	ldr	r3, [r4, #12]
 801f988:	6832      	ldr	r2, [r6, #0]
 801f98a:	1a9b      	subs	r3, r3, r2
 801f98c:	42ab      	cmp	r3, r5
 801f98e:	dc26      	bgt.n	801f9de <_printf_common+0x96>
 801f990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f994:	1e13      	subs	r3, r2, #0
 801f996:	6822      	ldr	r2, [r4, #0]
 801f998:	bf18      	it	ne
 801f99a:	2301      	movne	r3, #1
 801f99c:	0692      	lsls	r2, r2, #26
 801f99e:	d42b      	bmi.n	801f9f8 <_printf_common+0xb0>
 801f9a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f9a4:	4649      	mov	r1, r9
 801f9a6:	4638      	mov	r0, r7
 801f9a8:	47c0      	blx	r8
 801f9aa:	3001      	adds	r0, #1
 801f9ac:	d01e      	beq.n	801f9ec <_printf_common+0xa4>
 801f9ae:	6823      	ldr	r3, [r4, #0]
 801f9b0:	68e5      	ldr	r5, [r4, #12]
 801f9b2:	6832      	ldr	r2, [r6, #0]
 801f9b4:	f003 0306 	and.w	r3, r3, #6
 801f9b8:	2b04      	cmp	r3, #4
 801f9ba:	bf08      	it	eq
 801f9bc:	1aad      	subeq	r5, r5, r2
 801f9be:	68a3      	ldr	r3, [r4, #8]
 801f9c0:	6922      	ldr	r2, [r4, #16]
 801f9c2:	bf0c      	ite	eq
 801f9c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f9c8:	2500      	movne	r5, #0
 801f9ca:	4293      	cmp	r3, r2
 801f9cc:	bfc4      	itt	gt
 801f9ce:	1a9b      	subgt	r3, r3, r2
 801f9d0:	18ed      	addgt	r5, r5, r3
 801f9d2:	2600      	movs	r6, #0
 801f9d4:	341a      	adds	r4, #26
 801f9d6:	42b5      	cmp	r5, r6
 801f9d8:	d11a      	bne.n	801fa10 <_printf_common+0xc8>
 801f9da:	2000      	movs	r0, #0
 801f9dc:	e008      	b.n	801f9f0 <_printf_common+0xa8>
 801f9de:	2301      	movs	r3, #1
 801f9e0:	4652      	mov	r2, sl
 801f9e2:	4649      	mov	r1, r9
 801f9e4:	4638      	mov	r0, r7
 801f9e6:	47c0      	blx	r8
 801f9e8:	3001      	adds	r0, #1
 801f9ea:	d103      	bne.n	801f9f4 <_printf_common+0xac>
 801f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f9f4:	3501      	adds	r5, #1
 801f9f6:	e7c6      	b.n	801f986 <_printf_common+0x3e>
 801f9f8:	18e1      	adds	r1, r4, r3
 801f9fa:	1c5a      	adds	r2, r3, #1
 801f9fc:	2030      	movs	r0, #48	; 0x30
 801f9fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fa02:	4422      	add	r2, r4
 801fa04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fa08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fa0c:	3302      	adds	r3, #2
 801fa0e:	e7c7      	b.n	801f9a0 <_printf_common+0x58>
 801fa10:	2301      	movs	r3, #1
 801fa12:	4622      	mov	r2, r4
 801fa14:	4649      	mov	r1, r9
 801fa16:	4638      	mov	r0, r7
 801fa18:	47c0      	blx	r8
 801fa1a:	3001      	adds	r0, #1
 801fa1c:	d0e6      	beq.n	801f9ec <_printf_common+0xa4>
 801fa1e:	3601      	adds	r6, #1
 801fa20:	e7d9      	b.n	801f9d6 <_printf_common+0x8e>
	...

0801fa24 <_printf_i>:
 801fa24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fa28:	460c      	mov	r4, r1
 801fa2a:	4691      	mov	r9, r2
 801fa2c:	7e27      	ldrb	r7, [r4, #24]
 801fa2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fa30:	2f78      	cmp	r7, #120	; 0x78
 801fa32:	4680      	mov	r8, r0
 801fa34:	469a      	mov	sl, r3
 801fa36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fa3a:	d807      	bhi.n	801fa4c <_printf_i+0x28>
 801fa3c:	2f62      	cmp	r7, #98	; 0x62
 801fa3e:	d80a      	bhi.n	801fa56 <_printf_i+0x32>
 801fa40:	2f00      	cmp	r7, #0
 801fa42:	f000 80d8 	beq.w	801fbf6 <_printf_i+0x1d2>
 801fa46:	2f58      	cmp	r7, #88	; 0x58
 801fa48:	f000 80a3 	beq.w	801fb92 <_printf_i+0x16e>
 801fa4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fa50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fa54:	e03a      	b.n	801facc <_printf_i+0xa8>
 801fa56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fa5a:	2b15      	cmp	r3, #21
 801fa5c:	d8f6      	bhi.n	801fa4c <_printf_i+0x28>
 801fa5e:	a001      	add	r0, pc, #4	; (adr r0, 801fa64 <_printf_i+0x40>)
 801fa60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fa64:	0801fabd 	.word	0x0801fabd
 801fa68:	0801fad1 	.word	0x0801fad1
 801fa6c:	0801fa4d 	.word	0x0801fa4d
 801fa70:	0801fa4d 	.word	0x0801fa4d
 801fa74:	0801fa4d 	.word	0x0801fa4d
 801fa78:	0801fa4d 	.word	0x0801fa4d
 801fa7c:	0801fad1 	.word	0x0801fad1
 801fa80:	0801fa4d 	.word	0x0801fa4d
 801fa84:	0801fa4d 	.word	0x0801fa4d
 801fa88:	0801fa4d 	.word	0x0801fa4d
 801fa8c:	0801fa4d 	.word	0x0801fa4d
 801fa90:	0801fbdd 	.word	0x0801fbdd
 801fa94:	0801fb01 	.word	0x0801fb01
 801fa98:	0801fbbf 	.word	0x0801fbbf
 801fa9c:	0801fa4d 	.word	0x0801fa4d
 801faa0:	0801fa4d 	.word	0x0801fa4d
 801faa4:	0801fbff 	.word	0x0801fbff
 801faa8:	0801fa4d 	.word	0x0801fa4d
 801faac:	0801fb01 	.word	0x0801fb01
 801fab0:	0801fa4d 	.word	0x0801fa4d
 801fab4:	0801fa4d 	.word	0x0801fa4d
 801fab8:	0801fbc7 	.word	0x0801fbc7
 801fabc:	680b      	ldr	r3, [r1, #0]
 801fabe:	1d1a      	adds	r2, r3, #4
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	600a      	str	r2, [r1, #0]
 801fac4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801facc:	2301      	movs	r3, #1
 801face:	e0a3      	b.n	801fc18 <_printf_i+0x1f4>
 801fad0:	6825      	ldr	r5, [r4, #0]
 801fad2:	6808      	ldr	r0, [r1, #0]
 801fad4:	062e      	lsls	r6, r5, #24
 801fad6:	f100 0304 	add.w	r3, r0, #4
 801fada:	d50a      	bpl.n	801faf2 <_printf_i+0xce>
 801fadc:	6805      	ldr	r5, [r0, #0]
 801fade:	600b      	str	r3, [r1, #0]
 801fae0:	2d00      	cmp	r5, #0
 801fae2:	da03      	bge.n	801faec <_printf_i+0xc8>
 801fae4:	232d      	movs	r3, #45	; 0x2d
 801fae6:	426d      	negs	r5, r5
 801fae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801faec:	485e      	ldr	r0, [pc, #376]	; (801fc68 <_printf_i+0x244>)
 801faee:	230a      	movs	r3, #10
 801faf0:	e019      	b.n	801fb26 <_printf_i+0x102>
 801faf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801faf6:	6805      	ldr	r5, [r0, #0]
 801faf8:	600b      	str	r3, [r1, #0]
 801fafa:	bf18      	it	ne
 801fafc:	b22d      	sxthne	r5, r5
 801fafe:	e7ef      	b.n	801fae0 <_printf_i+0xbc>
 801fb00:	680b      	ldr	r3, [r1, #0]
 801fb02:	6825      	ldr	r5, [r4, #0]
 801fb04:	1d18      	adds	r0, r3, #4
 801fb06:	6008      	str	r0, [r1, #0]
 801fb08:	0628      	lsls	r0, r5, #24
 801fb0a:	d501      	bpl.n	801fb10 <_printf_i+0xec>
 801fb0c:	681d      	ldr	r5, [r3, #0]
 801fb0e:	e002      	b.n	801fb16 <_printf_i+0xf2>
 801fb10:	0669      	lsls	r1, r5, #25
 801fb12:	d5fb      	bpl.n	801fb0c <_printf_i+0xe8>
 801fb14:	881d      	ldrh	r5, [r3, #0]
 801fb16:	4854      	ldr	r0, [pc, #336]	; (801fc68 <_printf_i+0x244>)
 801fb18:	2f6f      	cmp	r7, #111	; 0x6f
 801fb1a:	bf0c      	ite	eq
 801fb1c:	2308      	moveq	r3, #8
 801fb1e:	230a      	movne	r3, #10
 801fb20:	2100      	movs	r1, #0
 801fb22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fb26:	6866      	ldr	r6, [r4, #4]
 801fb28:	60a6      	str	r6, [r4, #8]
 801fb2a:	2e00      	cmp	r6, #0
 801fb2c:	bfa2      	ittt	ge
 801fb2e:	6821      	ldrge	r1, [r4, #0]
 801fb30:	f021 0104 	bicge.w	r1, r1, #4
 801fb34:	6021      	strge	r1, [r4, #0]
 801fb36:	b90d      	cbnz	r5, 801fb3c <_printf_i+0x118>
 801fb38:	2e00      	cmp	r6, #0
 801fb3a:	d04d      	beq.n	801fbd8 <_printf_i+0x1b4>
 801fb3c:	4616      	mov	r6, r2
 801fb3e:	fbb5 f1f3 	udiv	r1, r5, r3
 801fb42:	fb03 5711 	mls	r7, r3, r1, r5
 801fb46:	5dc7      	ldrb	r7, [r0, r7]
 801fb48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fb4c:	462f      	mov	r7, r5
 801fb4e:	42bb      	cmp	r3, r7
 801fb50:	460d      	mov	r5, r1
 801fb52:	d9f4      	bls.n	801fb3e <_printf_i+0x11a>
 801fb54:	2b08      	cmp	r3, #8
 801fb56:	d10b      	bne.n	801fb70 <_printf_i+0x14c>
 801fb58:	6823      	ldr	r3, [r4, #0]
 801fb5a:	07df      	lsls	r7, r3, #31
 801fb5c:	d508      	bpl.n	801fb70 <_printf_i+0x14c>
 801fb5e:	6923      	ldr	r3, [r4, #16]
 801fb60:	6861      	ldr	r1, [r4, #4]
 801fb62:	4299      	cmp	r1, r3
 801fb64:	bfde      	ittt	le
 801fb66:	2330      	movle	r3, #48	; 0x30
 801fb68:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fb6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801fb70:	1b92      	subs	r2, r2, r6
 801fb72:	6122      	str	r2, [r4, #16]
 801fb74:	f8cd a000 	str.w	sl, [sp]
 801fb78:	464b      	mov	r3, r9
 801fb7a:	aa03      	add	r2, sp, #12
 801fb7c:	4621      	mov	r1, r4
 801fb7e:	4640      	mov	r0, r8
 801fb80:	f7ff fee2 	bl	801f948 <_printf_common>
 801fb84:	3001      	adds	r0, #1
 801fb86:	d14c      	bne.n	801fc22 <_printf_i+0x1fe>
 801fb88:	f04f 30ff 	mov.w	r0, #4294967295
 801fb8c:	b004      	add	sp, #16
 801fb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb92:	4835      	ldr	r0, [pc, #212]	; (801fc68 <_printf_i+0x244>)
 801fb94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fb98:	6823      	ldr	r3, [r4, #0]
 801fb9a:	680e      	ldr	r6, [r1, #0]
 801fb9c:	061f      	lsls	r7, r3, #24
 801fb9e:	f856 5b04 	ldr.w	r5, [r6], #4
 801fba2:	600e      	str	r6, [r1, #0]
 801fba4:	d514      	bpl.n	801fbd0 <_printf_i+0x1ac>
 801fba6:	07d9      	lsls	r1, r3, #31
 801fba8:	bf44      	itt	mi
 801fbaa:	f043 0320 	orrmi.w	r3, r3, #32
 801fbae:	6023      	strmi	r3, [r4, #0]
 801fbb0:	b91d      	cbnz	r5, 801fbba <_printf_i+0x196>
 801fbb2:	6823      	ldr	r3, [r4, #0]
 801fbb4:	f023 0320 	bic.w	r3, r3, #32
 801fbb8:	6023      	str	r3, [r4, #0]
 801fbba:	2310      	movs	r3, #16
 801fbbc:	e7b0      	b.n	801fb20 <_printf_i+0xfc>
 801fbbe:	6823      	ldr	r3, [r4, #0]
 801fbc0:	f043 0320 	orr.w	r3, r3, #32
 801fbc4:	6023      	str	r3, [r4, #0]
 801fbc6:	2378      	movs	r3, #120	; 0x78
 801fbc8:	4828      	ldr	r0, [pc, #160]	; (801fc6c <_printf_i+0x248>)
 801fbca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fbce:	e7e3      	b.n	801fb98 <_printf_i+0x174>
 801fbd0:	065e      	lsls	r6, r3, #25
 801fbd2:	bf48      	it	mi
 801fbd4:	b2ad      	uxthmi	r5, r5
 801fbd6:	e7e6      	b.n	801fba6 <_printf_i+0x182>
 801fbd8:	4616      	mov	r6, r2
 801fbda:	e7bb      	b.n	801fb54 <_printf_i+0x130>
 801fbdc:	680b      	ldr	r3, [r1, #0]
 801fbde:	6826      	ldr	r6, [r4, #0]
 801fbe0:	6960      	ldr	r0, [r4, #20]
 801fbe2:	1d1d      	adds	r5, r3, #4
 801fbe4:	600d      	str	r5, [r1, #0]
 801fbe6:	0635      	lsls	r5, r6, #24
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	d501      	bpl.n	801fbf0 <_printf_i+0x1cc>
 801fbec:	6018      	str	r0, [r3, #0]
 801fbee:	e002      	b.n	801fbf6 <_printf_i+0x1d2>
 801fbf0:	0671      	lsls	r1, r6, #25
 801fbf2:	d5fb      	bpl.n	801fbec <_printf_i+0x1c8>
 801fbf4:	8018      	strh	r0, [r3, #0]
 801fbf6:	2300      	movs	r3, #0
 801fbf8:	6123      	str	r3, [r4, #16]
 801fbfa:	4616      	mov	r6, r2
 801fbfc:	e7ba      	b.n	801fb74 <_printf_i+0x150>
 801fbfe:	680b      	ldr	r3, [r1, #0]
 801fc00:	1d1a      	adds	r2, r3, #4
 801fc02:	600a      	str	r2, [r1, #0]
 801fc04:	681e      	ldr	r6, [r3, #0]
 801fc06:	6862      	ldr	r2, [r4, #4]
 801fc08:	2100      	movs	r1, #0
 801fc0a:	4630      	mov	r0, r6
 801fc0c:	f7e0 fb28 	bl	8000260 <memchr>
 801fc10:	b108      	cbz	r0, 801fc16 <_printf_i+0x1f2>
 801fc12:	1b80      	subs	r0, r0, r6
 801fc14:	6060      	str	r0, [r4, #4]
 801fc16:	6863      	ldr	r3, [r4, #4]
 801fc18:	6123      	str	r3, [r4, #16]
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fc20:	e7a8      	b.n	801fb74 <_printf_i+0x150>
 801fc22:	6923      	ldr	r3, [r4, #16]
 801fc24:	4632      	mov	r2, r6
 801fc26:	4649      	mov	r1, r9
 801fc28:	4640      	mov	r0, r8
 801fc2a:	47d0      	blx	sl
 801fc2c:	3001      	adds	r0, #1
 801fc2e:	d0ab      	beq.n	801fb88 <_printf_i+0x164>
 801fc30:	6823      	ldr	r3, [r4, #0]
 801fc32:	079b      	lsls	r3, r3, #30
 801fc34:	d413      	bmi.n	801fc5e <_printf_i+0x23a>
 801fc36:	68e0      	ldr	r0, [r4, #12]
 801fc38:	9b03      	ldr	r3, [sp, #12]
 801fc3a:	4298      	cmp	r0, r3
 801fc3c:	bfb8      	it	lt
 801fc3e:	4618      	movlt	r0, r3
 801fc40:	e7a4      	b.n	801fb8c <_printf_i+0x168>
 801fc42:	2301      	movs	r3, #1
 801fc44:	4632      	mov	r2, r6
 801fc46:	4649      	mov	r1, r9
 801fc48:	4640      	mov	r0, r8
 801fc4a:	47d0      	blx	sl
 801fc4c:	3001      	adds	r0, #1
 801fc4e:	d09b      	beq.n	801fb88 <_printf_i+0x164>
 801fc50:	3501      	adds	r5, #1
 801fc52:	68e3      	ldr	r3, [r4, #12]
 801fc54:	9903      	ldr	r1, [sp, #12]
 801fc56:	1a5b      	subs	r3, r3, r1
 801fc58:	42ab      	cmp	r3, r5
 801fc5a:	dcf2      	bgt.n	801fc42 <_printf_i+0x21e>
 801fc5c:	e7eb      	b.n	801fc36 <_printf_i+0x212>
 801fc5e:	2500      	movs	r5, #0
 801fc60:	f104 0619 	add.w	r6, r4, #25
 801fc64:	e7f5      	b.n	801fc52 <_printf_i+0x22e>
 801fc66:	bf00      	nop
 801fc68:	080258d8 	.word	0x080258d8
 801fc6c:	080258e9 	.word	0x080258e9

0801fc70 <_putc_r>:
 801fc70:	b570      	push	{r4, r5, r6, lr}
 801fc72:	460d      	mov	r5, r1
 801fc74:	4614      	mov	r4, r2
 801fc76:	4606      	mov	r6, r0
 801fc78:	b118      	cbz	r0, 801fc82 <_putc_r+0x12>
 801fc7a:	6983      	ldr	r3, [r0, #24]
 801fc7c:	b90b      	cbnz	r3, 801fc82 <_putc_r+0x12>
 801fc7e:	f7fd f9c3 	bl	801d008 <__sinit>
 801fc82:	4b1c      	ldr	r3, [pc, #112]	; (801fcf4 <_putc_r+0x84>)
 801fc84:	429c      	cmp	r4, r3
 801fc86:	d124      	bne.n	801fcd2 <_putc_r+0x62>
 801fc88:	6874      	ldr	r4, [r6, #4]
 801fc8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fc8c:	07d8      	lsls	r0, r3, #31
 801fc8e:	d405      	bmi.n	801fc9c <_putc_r+0x2c>
 801fc90:	89a3      	ldrh	r3, [r4, #12]
 801fc92:	0599      	lsls	r1, r3, #22
 801fc94:	d402      	bmi.n	801fc9c <_putc_r+0x2c>
 801fc96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fc98:	f7fd fd69 	bl	801d76e <__retarget_lock_acquire_recursive>
 801fc9c:	68a3      	ldr	r3, [r4, #8]
 801fc9e:	3b01      	subs	r3, #1
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	60a3      	str	r3, [r4, #8]
 801fca4:	da05      	bge.n	801fcb2 <_putc_r+0x42>
 801fca6:	69a2      	ldr	r2, [r4, #24]
 801fca8:	4293      	cmp	r3, r2
 801fcaa:	db1c      	blt.n	801fce6 <_putc_r+0x76>
 801fcac:	b2eb      	uxtb	r3, r5
 801fcae:	2b0a      	cmp	r3, #10
 801fcb0:	d019      	beq.n	801fce6 <_putc_r+0x76>
 801fcb2:	6823      	ldr	r3, [r4, #0]
 801fcb4:	1c5a      	adds	r2, r3, #1
 801fcb6:	6022      	str	r2, [r4, #0]
 801fcb8:	701d      	strb	r5, [r3, #0]
 801fcba:	b2ed      	uxtb	r5, r5
 801fcbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fcbe:	07da      	lsls	r2, r3, #31
 801fcc0:	d405      	bmi.n	801fcce <_putc_r+0x5e>
 801fcc2:	89a3      	ldrh	r3, [r4, #12]
 801fcc4:	059b      	lsls	r3, r3, #22
 801fcc6:	d402      	bmi.n	801fcce <_putc_r+0x5e>
 801fcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fcca:	f7fd fd52 	bl	801d772 <__retarget_lock_release_recursive>
 801fcce:	4628      	mov	r0, r5
 801fcd0:	bd70      	pop	{r4, r5, r6, pc}
 801fcd2:	4b09      	ldr	r3, [pc, #36]	; (801fcf8 <_putc_r+0x88>)
 801fcd4:	429c      	cmp	r4, r3
 801fcd6:	d101      	bne.n	801fcdc <_putc_r+0x6c>
 801fcd8:	68b4      	ldr	r4, [r6, #8]
 801fcda:	e7d6      	b.n	801fc8a <_putc_r+0x1a>
 801fcdc:	4b07      	ldr	r3, [pc, #28]	; (801fcfc <_putc_r+0x8c>)
 801fcde:	429c      	cmp	r4, r3
 801fce0:	bf08      	it	eq
 801fce2:	68f4      	ldreq	r4, [r6, #12]
 801fce4:	e7d1      	b.n	801fc8a <_putc_r+0x1a>
 801fce6:	4629      	mov	r1, r5
 801fce8:	4622      	mov	r2, r4
 801fcea:	4630      	mov	r0, r6
 801fcec:	f7ff f844 	bl	801ed78 <__swbuf_r>
 801fcf0:	4605      	mov	r5, r0
 801fcf2:	e7e3      	b.n	801fcbc <_putc_r+0x4c>
 801fcf4:	08025348 	.word	0x08025348
 801fcf8:	08025368 	.word	0x08025368
 801fcfc:	08025328 	.word	0x08025328

0801fd00 <_read_r>:
 801fd00:	b538      	push	{r3, r4, r5, lr}
 801fd02:	4d07      	ldr	r5, [pc, #28]	; (801fd20 <_read_r+0x20>)
 801fd04:	4604      	mov	r4, r0
 801fd06:	4608      	mov	r0, r1
 801fd08:	4611      	mov	r1, r2
 801fd0a:	2200      	movs	r2, #0
 801fd0c:	602a      	str	r2, [r5, #0]
 801fd0e:	461a      	mov	r2, r3
 801fd10:	f7e1 f841 	bl	8000d96 <_read>
 801fd14:	1c43      	adds	r3, r0, #1
 801fd16:	d102      	bne.n	801fd1e <_read_r+0x1e>
 801fd18:	682b      	ldr	r3, [r5, #0]
 801fd1a:	b103      	cbz	r3, 801fd1e <_read_r+0x1e>
 801fd1c:	6023      	str	r3, [r4, #0]
 801fd1e:	bd38      	pop	{r3, r4, r5, pc}
 801fd20:	20000d80 	.word	0x20000d80

0801fd24 <sniprintf>:
 801fd24:	b40c      	push	{r2, r3}
 801fd26:	b530      	push	{r4, r5, lr}
 801fd28:	4b17      	ldr	r3, [pc, #92]	; (801fd88 <sniprintf+0x64>)
 801fd2a:	1e0c      	subs	r4, r1, #0
 801fd2c:	681d      	ldr	r5, [r3, #0]
 801fd2e:	b09d      	sub	sp, #116	; 0x74
 801fd30:	da08      	bge.n	801fd44 <sniprintf+0x20>
 801fd32:	238b      	movs	r3, #139	; 0x8b
 801fd34:	602b      	str	r3, [r5, #0]
 801fd36:	f04f 30ff 	mov.w	r0, #4294967295
 801fd3a:	b01d      	add	sp, #116	; 0x74
 801fd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fd40:	b002      	add	sp, #8
 801fd42:	4770      	bx	lr
 801fd44:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fd48:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fd4c:	bf14      	ite	ne
 801fd4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801fd52:	4623      	moveq	r3, r4
 801fd54:	9304      	str	r3, [sp, #16]
 801fd56:	9307      	str	r3, [sp, #28]
 801fd58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fd5c:	9002      	str	r0, [sp, #8]
 801fd5e:	9006      	str	r0, [sp, #24]
 801fd60:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fd64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fd66:	ab21      	add	r3, sp, #132	; 0x84
 801fd68:	a902      	add	r1, sp, #8
 801fd6a:	4628      	mov	r0, r5
 801fd6c:	9301      	str	r3, [sp, #4]
 801fd6e:	f7ff fb91 	bl	801f494 <_svfiprintf_r>
 801fd72:	1c43      	adds	r3, r0, #1
 801fd74:	bfbc      	itt	lt
 801fd76:	238b      	movlt	r3, #139	; 0x8b
 801fd78:	602b      	strlt	r3, [r5, #0]
 801fd7a:	2c00      	cmp	r4, #0
 801fd7c:	d0dd      	beq.n	801fd3a <sniprintf+0x16>
 801fd7e:	9b02      	ldr	r3, [sp, #8]
 801fd80:	2200      	movs	r2, #0
 801fd82:	701a      	strb	r2, [r3, #0]
 801fd84:	e7d9      	b.n	801fd3a <sniprintf+0x16>
 801fd86:	bf00      	nop
 801fd88:	20000104 	.word	0x20000104

0801fd8c <siscanf>:
 801fd8c:	b40e      	push	{r1, r2, r3}
 801fd8e:	b510      	push	{r4, lr}
 801fd90:	b09f      	sub	sp, #124	; 0x7c
 801fd92:	ac21      	add	r4, sp, #132	; 0x84
 801fd94:	f44f 7101 	mov.w	r1, #516	; 0x204
 801fd98:	f854 2b04 	ldr.w	r2, [r4], #4
 801fd9c:	9201      	str	r2, [sp, #4]
 801fd9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801fda2:	9004      	str	r0, [sp, #16]
 801fda4:	9008      	str	r0, [sp, #32]
 801fda6:	f7e0 fa49 	bl	800023c <strlen>
 801fdaa:	4b0c      	ldr	r3, [pc, #48]	; (801fddc <siscanf+0x50>)
 801fdac:	9005      	str	r0, [sp, #20]
 801fdae:	9009      	str	r0, [sp, #36]	; 0x24
 801fdb0:	930d      	str	r3, [sp, #52]	; 0x34
 801fdb2:	480b      	ldr	r0, [pc, #44]	; (801fde0 <siscanf+0x54>)
 801fdb4:	9a01      	ldr	r2, [sp, #4]
 801fdb6:	6800      	ldr	r0, [r0, #0]
 801fdb8:	9403      	str	r4, [sp, #12]
 801fdba:	2300      	movs	r3, #0
 801fdbc:	9311      	str	r3, [sp, #68]	; 0x44
 801fdbe:	9316      	str	r3, [sp, #88]	; 0x58
 801fdc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fdc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fdc8:	a904      	add	r1, sp, #16
 801fdca:	4623      	mov	r3, r4
 801fdcc:	f000 f8ba 	bl	801ff44 <__ssvfiscanf_r>
 801fdd0:	b01f      	add	sp, #124	; 0x7c
 801fdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdd6:	b003      	add	sp, #12
 801fdd8:	4770      	bx	lr
 801fdda:	bf00      	nop
 801fddc:	0801dc03 	.word	0x0801dc03
 801fde0:	20000104 	.word	0x20000104

0801fde4 <strcpy>:
 801fde4:	4603      	mov	r3, r0
 801fde6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fdea:	f803 2b01 	strb.w	r2, [r3], #1
 801fdee:	2a00      	cmp	r2, #0
 801fdf0:	d1f9      	bne.n	801fde6 <strcpy+0x2>
 801fdf2:	4770      	bx	lr

0801fdf4 <strncmp>:
 801fdf4:	b510      	push	{r4, lr}
 801fdf6:	b16a      	cbz	r2, 801fe14 <strncmp+0x20>
 801fdf8:	3901      	subs	r1, #1
 801fdfa:	1884      	adds	r4, r0, r2
 801fdfc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801fe00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801fe04:	4293      	cmp	r3, r2
 801fe06:	d103      	bne.n	801fe10 <strncmp+0x1c>
 801fe08:	42a0      	cmp	r0, r4
 801fe0a:	d001      	beq.n	801fe10 <strncmp+0x1c>
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d1f5      	bne.n	801fdfc <strncmp+0x8>
 801fe10:	1a98      	subs	r0, r3, r2
 801fe12:	bd10      	pop	{r4, pc}
 801fe14:	4610      	mov	r0, r2
 801fe16:	e7fc      	b.n	801fe12 <strncmp+0x1e>

0801fe18 <__ascii_wctomb>:
 801fe18:	b149      	cbz	r1, 801fe2e <__ascii_wctomb+0x16>
 801fe1a:	2aff      	cmp	r2, #255	; 0xff
 801fe1c:	bf85      	ittet	hi
 801fe1e:	238a      	movhi	r3, #138	; 0x8a
 801fe20:	6003      	strhi	r3, [r0, #0]
 801fe22:	700a      	strbls	r2, [r1, #0]
 801fe24:	f04f 30ff 	movhi.w	r0, #4294967295
 801fe28:	bf98      	it	ls
 801fe2a:	2001      	movls	r0, #1
 801fe2c:	4770      	bx	lr
 801fe2e:	4608      	mov	r0, r1
 801fe30:	4770      	bx	lr
	...

0801fe34 <__env_lock>:
 801fe34:	4801      	ldr	r0, [pc, #4]	; (801fe3c <__env_lock+0x8>)
 801fe36:	f7fd bc9a 	b.w	801d76e <__retarget_lock_acquire_recursive>
 801fe3a:	bf00      	nop
 801fe3c:	20000d76 	.word	0x20000d76

0801fe40 <__env_unlock>:
 801fe40:	4801      	ldr	r0, [pc, #4]	; (801fe48 <__env_unlock+0x8>)
 801fe42:	f7fd bc96 	b.w	801d772 <__retarget_lock_release_recursive>
 801fe46:	bf00      	nop
 801fe48:	20000d76 	.word	0x20000d76

0801fe4c <memmove>:
 801fe4c:	4288      	cmp	r0, r1
 801fe4e:	b510      	push	{r4, lr}
 801fe50:	eb01 0402 	add.w	r4, r1, r2
 801fe54:	d902      	bls.n	801fe5c <memmove+0x10>
 801fe56:	4284      	cmp	r4, r0
 801fe58:	4623      	mov	r3, r4
 801fe5a:	d807      	bhi.n	801fe6c <memmove+0x20>
 801fe5c:	1e43      	subs	r3, r0, #1
 801fe5e:	42a1      	cmp	r1, r4
 801fe60:	d008      	beq.n	801fe74 <memmove+0x28>
 801fe62:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fe66:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fe6a:	e7f8      	b.n	801fe5e <memmove+0x12>
 801fe6c:	4402      	add	r2, r0
 801fe6e:	4601      	mov	r1, r0
 801fe70:	428a      	cmp	r2, r1
 801fe72:	d100      	bne.n	801fe76 <memmove+0x2a>
 801fe74:	bd10      	pop	{r4, pc}
 801fe76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fe7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fe7e:	e7f7      	b.n	801fe70 <memmove+0x24>

0801fe80 <_malloc_usable_size_r>:
 801fe80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe84:	1f18      	subs	r0, r3, #4
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	bfbc      	itt	lt
 801fe8a:	580b      	ldrlt	r3, [r1, r0]
 801fe8c:	18c0      	addlt	r0, r0, r3
 801fe8e:	4770      	bx	lr

0801fe90 <_sungetc_r>:
 801fe90:	b538      	push	{r3, r4, r5, lr}
 801fe92:	1c4b      	adds	r3, r1, #1
 801fe94:	4614      	mov	r4, r2
 801fe96:	d103      	bne.n	801fea0 <_sungetc_r+0x10>
 801fe98:	f04f 35ff 	mov.w	r5, #4294967295
 801fe9c:	4628      	mov	r0, r5
 801fe9e:	bd38      	pop	{r3, r4, r5, pc}
 801fea0:	8993      	ldrh	r3, [r2, #12]
 801fea2:	f023 0320 	bic.w	r3, r3, #32
 801fea6:	8193      	strh	r3, [r2, #12]
 801fea8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801feaa:	6852      	ldr	r2, [r2, #4]
 801feac:	b2cd      	uxtb	r5, r1
 801feae:	b18b      	cbz	r3, 801fed4 <_sungetc_r+0x44>
 801feb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801feb2:	4293      	cmp	r3, r2
 801feb4:	dd08      	ble.n	801fec8 <_sungetc_r+0x38>
 801feb6:	6823      	ldr	r3, [r4, #0]
 801feb8:	1e5a      	subs	r2, r3, #1
 801feba:	6022      	str	r2, [r4, #0]
 801febc:	f803 5c01 	strb.w	r5, [r3, #-1]
 801fec0:	6863      	ldr	r3, [r4, #4]
 801fec2:	3301      	adds	r3, #1
 801fec4:	6063      	str	r3, [r4, #4]
 801fec6:	e7e9      	b.n	801fe9c <_sungetc_r+0xc>
 801fec8:	4621      	mov	r1, r4
 801feca:	f000 fbbf 	bl	802064c <__submore>
 801fece:	2800      	cmp	r0, #0
 801fed0:	d0f1      	beq.n	801feb6 <_sungetc_r+0x26>
 801fed2:	e7e1      	b.n	801fe98 <_sungetc_r+0x8>
 801fed4:	6921      	ldr	r1, [r4, #16]
 801fed6:	6823      	ldr	r3, [r4, #0]
 801fed8:	b151      	cbz	r1, 801fef0 <_sungetc_r+0x60>
 801feda:	4299      	cmp	r1, r3
 801fedc:	d208      	bcs.n	801fef0 <_sungetc_r+0x60>
 801fede:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801fee2:	42a9      	cmp	r1, r5
 801fee4:	d104      	bne.n	801fef0 <_sungetc_r+0x60>
 801fee6:	3b01      	subs	r3, #1
 801fee8:	3201      	adds	r2, #1
 801feea:	6023      	str	r3, [r4, #0]
 801feec:	6062      	str	r2, [r4, #4]
 801feee:	e7d5      	b.n	801fe9c <_sungetc_r+0xc>
 801fef0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801fef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fef8:	6363      	str	r3, [r4, #52]	; 0x34
 801fefa:	2303      	movs	r3, #3
 801fefc:	63a3      	str	r3, [r4, #56]	; 0x38
 801fefe:	4623      	mov	r3, r4
 801ff00:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ff04:	6023      	str	r3, [r4, #0]
 801ff06:	2301      	movs	r3, #1
 801ff08:	e7dc      	b.n	801fec4 <_sungetc_r+0x34>

0801ff0a <__ssrefill_r>:
 801ff0a:	b510      	push	{r4, lr}
 801ff0c:	460c      	mov	r4, r1
 801ff0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ff10:	b169      	cbz	r1, 801ff2e <__ssrefill_r+0x24>
 801ff12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff16:	4299      	cmp	r1, r3
 801ff18:	d001      	beq.n	801ff1e <__ssrefill_r+0x14>
 801ff1a:	f7fd fcc5 	bl	801d8a8 <_free_r>
 801ff1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ff20:	6063      	str	r3, [r4, #4]
 801ff22:	2000      	movs	r0, #0
 801ff24:	6360      	str	r0, [r4, #52]	; 0x34
 801ff26:	b113      	cbz	r3, 801ff2e <__ssrefill_r+0x24>
 801ff28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ff2a:	6023      	str	r3, [r4, #0]
 801ff2c:	bd10      	pop	{r4, pc}
 801ff2e:	6923      	ldr	r3, [r4, #16]
 801ff30:	6023      	str	r3, [r4, #0]
 801ff32:	2300      	movs	r3, #0
 801ff34:	6063      	str	r3, [r4, #4]
 801ff36:	89a3      	ldrh	r3, [r4, #12]
 801ff38:	f043 0320 	orr.w	r3, r3, #32
 801ff3c:	81a3      	strh	r3, [r4, #12]
 801ff3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff42:	e7f3      	b.n	801ff2c <__ssrefill_r+0x22>

0801ff44 <__ssvfiscanf_r>:
 801ff44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff48:	460c      	mov	r4, r1
 801ff4a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801ff4e:	2100      	movs	r1, #0
 801ff50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ff54:	49b2      	ldr	r1, [pc, #712]	; (8020220 <__ssvfiscanf_r+0x2dc>)
 801ff56:	91a0      	str	r1, [sp, #640]	; 0x280
 801ff58:	f10d 0804 	add.w	r8, sp, #4
 801ff5c:	49b1      	ldr	r1, [pc, #708]	; (8020224 <__ssvfiscanf_r+0x2e0>)
 801ff5e:	4fb2      	ldr	r7, [pc, #712]	; (8020228 <__ssvfiscanf_r+0x2e4>)
 801ff60:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802022c <__ssvfiscanf_r+0x2e8>
 801ff64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ff68:	4606      	mov	r6, r0
 801ff6a:	91a1      	str	r1, [sp, #644]	; 0x284
 801ff6c:	9300      	str	r3, [sp, #0]
 801ff6e:	f892 a000 	ldrb.w	sl, [r2]
 801ff72:	f1ba 0f00 	cmp.w	sl, #0
 801ff76:	f000 8151 	beq.w	802021c <__ssvfiscanf_r+0x2d8>
 801ff7a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801ff7e:	f013 0308 	ands.w	r3, r3, #8
 801ff82:	f102 0501 	add.w	r5, r2, #1
 801ff86:	d019      	beq.n	801ffbc <__ssvfiscanf_r+0x78>
 801ff88:	6863      	ldr	r3, [r4, #4]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	dd0f      	ble.n	801ffae <__ssvfiscanf_r+0x6a>
 801ff8e:	6823      	ldr	r3, [r4, #0]
 801ff90:	781a      	ldrb	r2, [r3, #0]
 801ff92:	5cba      	ldrb	r2, [r7, r2]
 801ff94:	0712      	lsls	r2, r2, #28
 801ff96:	d401      	bmi.n	801ff9c <__ssvfiscanf_r+0x58>
 801ff98:	462a      	mov	r2, r5
 801ff9a:	e7e8      	b.n	801ff6e <__ssvfiscanf_r+0x2a>
 801ff9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ff9e:	3201      	adds	r2, #1
 801ffa0:	9245      	str	r2, [sp, #276]	; 0x114
 801ffa2:	6862      	ldr	r2, [r4, #4]
 801ffa4:	3301      	adds	r3, #1
 801ffa6:	3a01      	subs	r2, #1
 801ffa8:	6062      	str	r2, [r4, #4]
 801ffaa:	6023      	str	r3, [r4, #0]
 801ffac:	e7ec      	b.n	801ff88 <__ssvfiscanf_r+0x44>
 801ffae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ffb0:	4621      	mov	r1, r4
 801ffb2:	4630      	mov	r0, r6
 801ffb4:	4798      	blx	r3
 801ffb6:	2800      	cmp	r0, #0
 801ffb8:	d0e9      	beq.n	801ff8e <__ssvfiscanf_r+0x4a>
 801ffba:	e7ed      	b.n	801ff98 <__ssvfiscanf_r+0x54>
 801ffbc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801ffc0:	f040 8083 	bne.w	80200ca <__ssvfiscanf_r+0x186>
 801ffc4:	9341      	str	r3, [sp, #260]	; 0x104
 801ffc6:	9343      	str	r3, [sp, #268]	; 0x10c
 801ffc8:	7853      	ldrb	r3, [r2, #1]
 801ffca:	2b2a      	cmp	r3, #42	; 0x2a
 801ffcc:	bf02      	ittt	eq
 801ffce:	2310      	moveq	r3, #16
 801ffd0:	1c95      	addeq	r5, r2, #2
 801ffd2:	9341      	streq	r3, [sp, #260]	; 0x104
 801ffd4:	220a      	movs	r2, #10
 801ffd6:	46ab      	mov	fp, r5
 801ffd8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801ffdc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ffe0:	2b09      	cmp	r3, #9
 801ffe2:	d91d      	bls.n	8020020 <__ssvfiscanf_r+0xdc>
 801ffe4:	4891      	ldr	r0, [pc, #580]	; (802022c <__ssvfiscanf_r+0x2e8>)
 801ffe6:	2203      	movs	r2, #3
 801ffe8:	f7e0 f93a 	bl	8000260 <memchr>
 801ffec:	b140      	cbz	r0, 8020000 <__ssvfiscanf_r+0xbc>
 801ffee:	2301      	movs	r3, #1
 801fff0:	eba0 0009 	sub.w	r0, r0, r9
 801fff4:	fa03 f000 	lsl.w	r0, r3, r0
 801fff8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fffa:	4318      	orrs	r0, r3
 801fffc:	9041      	str	r0, [sp, #260]	; 0x104
 801fffe:	465d      	mov	r5, fp
 8020000:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020004:	2b78      	cmp	r3, #120	; 0x78
 8020006:	d806      	bhi.n	8020016 <__ssvfiscanf_r+0xd2>
 8020008:	2b57      	cmp	r3, #87	; 0x57
 802000a:	d810      	bhi.n	802002e <__ssvfiscanf_r+0xea>
 802000c:	2b25      	cmp	r3, #37	; 0x25
 802000e:	d05c      	beq.n	80200ca <__ssvfiscanf_r+0x186>
 8020010:	d856      	bhi.n	80200c0 <__ssvfiscanf_r+0x17c>
 8020012:	2b00      	cmp	r3, #0
 8020014:	d074      	beq.n	8020100 <__ssvfiscanf_r+0x1bc>
 8020016:	2303      	movs	r3, #3
 8020018:	9347      	str	r3, [sp, #284]	; 0x11c
 802001a:	230a      	movs	r3, #10
 802001c:	9342      	str	r3, [sp, #264]	; 0x108
 802001e:	e081      	b.n	8020124 <__ssvfiscanf_r+0x1e0>
 8020020:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020022:	fb02 1303 	mla	r3, r2, r3, r1
 8020026:	3b30      	subs	r3, #48	; 0x30
 8020028:	9343      	str	r3, [sp, #268]	; 0x10c
 802002a:	465d      	mov	r5, fp
 802002c:	e7d3      	b.n	801ffd6 <__ssvfiscanf_r+0x92>
 802002e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020032:	2a20      	cmp	r2, #32
 8020034:	d8ef      	bhi.n	8020016 <__ssvfiscanf_r+0xd2>
 8020036:	a101      	add	r1, pc, #4	; (adr r1, 802003c <__ssvfiscanf_r+0xf8>)
 8020038:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802003c:	0802010f 	.word	0x0802010f
 8020040:	08020017 	.word	0x08020017
 8020044:	08020017 	.word	0x08020017
 8020048:	0802016d 	.word	0x0802016d
 802004c:	08020017 	.word	0x08020017
 8020050:	08020017 	.word	0x08020017
 8020054:	08020017 	.word	0x08020017
 8020058:	08020017 	.word	0x08020017
 802005c:	08020017 	.word	0x08020017
 8020060:	08020017 	.word	0x08020017
 8020064:	08020017 	.word	0x08020017
 8020068:	08020183 	.word	0x08020183
 802006c:	08020159 	.word	0x08020159
 8020070:	080200c7 	.word	0x080200c7
 8020074:	080200c7 	.word	0x080200c7
 8020078:	080200c7 	.word	0x080200c7
 802007c:	08020017 	.word	0x08020017
 8020080:	0802015d 	.word	0x0802015d
 8020084:	08020017 	.word	0x08020017
 8020088:	08020017 	.word	0x08020017
 802008c:	08020017 	.word	0x08020017
 8020090:	08020017 	.word	0x08020017
 8020094:	08020193 	.word	0x08020193
 8020098:	08020165 	.word	0x08020165
 802009c:	08020107 	.word	0x08020107
 80200a0:	08020017 	.word	0x08020017
 80200a4:	08020017 	.word	0x08020017
 80200a8:	0802018f 	.word	0x0802018f
 80200ac:	08020017 	.word	0x08020017
 80200b0:	08020159 	.word	0x08020159
 80200b4:	08020017 	.word	0x08020017
 80200b8:	08020017 	.word	0x08020017
 80200bc:	0802010f 	.word	0x0802010f
 80200c0:	3b45      	subs	r3, #69	; 0x45
 80200c2:	2b02      	cmp	r3, #2
 80200c4:	d8a7      	bhi.n	8020016 <__ssvfiscanf_r+0xd2>
 80200c6:	2305      	movs	r3, #5
 80200c8:	e02b      	b.n	8020122 <__ssvfiscanf_r+0x1de>
 80200ca:	6863      	ldr	r3, [r4, #4]
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	dd0d      	ble.n	80200ec <__ssvfiscanf_r+0x1a8>
 80200d0:	6823      	ldr	r3, [r4, #0]
 80200d2:	781a      	ldrb	r2, [r3, #0]
 80200d4:	4552      	cmp	r2, sl
 80200d6:	f040 80a1 	bne.w	802021c <__ssvfiscanf_r+0x2d8>
 80200da:	3301      	adds	r3, #1
 80200dc:	6862      	ldr	r2, [r4, #4]
 80200de:	6023      	str	r3, [r4, #0]
 80200e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80200e2:	3a01      	subs	r2, #1
 80200e4:	3301      	adds	r3, #1
 80200e6:	6062      	str	r2, [r4, #4]
 80200e8:	9345      	str	r3, [sp, #276]	; 0x114
 80200ea:	e755      	b.n	801ff98 <__ssvfiscanf_r+0x54>
 80200ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80200ee:	4621      	mov	r1, r4
 80200f0:	4630      	mov	r0, r6
 80200f2:	4798      	blx	r3
 80200f4:	2800      	cmp	r0, #0
 80200f6:	d0eb      	beq.n	80200d0 <__ssvfiscanf_r+0x18c>
 80200f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80200fa:	2800      	cmp	r0, #0
 80200fc:	f040 8084 	bne.w	8020208 <__ssvfiscanf_r+0x2c4>
 8020100:	f04f 30ff 	mov.w	r0, #4294967295
 8020104:	e086      	b.n	8020214 <__ssvfiscanf_r+0x2d0>
 8020106:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020108:	f042 0220 	orr.w	r2, r2, #32
 802010c:	9241      	str	r2, [sp, #260]	; 0x104
 802010e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020114:	9241      	str	r2, [sp, #260]	; 0x104
 8020116:	2210      	movs	r2, #16
 8020118:	2b6f      	cmp	r3, #111	; 0x6f
 802011a:	9242      	str	r2, [sp, #264]	; 0x108
 802011c:	bf34      	ite	cc
 802011e:	2303      	movcc	r3, #3
 8020120:	2304      	movcs	r3, #4
 8020122:	9347      	str	r3, [sp, #284]	; 0x11c
 8020124:	6863      	ldr	r3, [r4, #4]
 8020126:	2b00      	cmp	r3, #0
 8020128:	dd41      	ble.n	80201ae <__ssvfiscanf_r+0x26a>
 802012a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802012c:	0659      	lsls	r1, r3, #25
 802012e:	d404      	bmi.n	802013a <__ssvfiscanf_r+0x1f6>
 8020130:	6823      	ldr	r3, [r4, #0]
 8020132:	781a      	ldrb	r2, [r3, #0]
 8020134:	5cba      	ldrb	r2, [r7, r2]
 8020136:	0712      	lsls	r2, r2, #28
 8020138:	d440      	bmi.n	80201bc <__ssvfiscanf_r+0x278>
 802013a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802013c:	2b02      	cmp	r3, #2
 802013e:	dc4f      	bgt.n	80201e0 <__ssvfiscanf_r+0x29c>
 8020140:	466b      	mov	r3, sp
 8020142:	4622      	mov	r2, r4
 8020144:	a941      	add	r1, sp, #260	; 0x104
 8020146:	4630      	mov	r0, r6
 8020148:	f000 f874 	bl	8020234 <_scanf_chars>
 802014c:	2801      	cmp	r0, #1
 802014e:	d065      	beq.n	802021c <__ssvfiscanf_r+0x2d8>
 8020150:	2802      	cmp	r0, #2
 8020152:	f47f af21 	bne.w	801ff98 <__ssvfiscanf_r+0x54>
 8020156:	e7cf      	b.n	80200f8 <__ssvfiscanf_r+0x1b4>
 8020158:	220a      	movs	r2, #10
 802015a:	e7dd      	b.n	8020118 <__ssvfiscanf_r+0x1d4>
 802015c:	2300      	movs	r3, #0
 802015e:	9342      	str	r3, [sp, #264]	; 0x108
 8020160:	2303      	movs	r3, #3
 8020162:	e7de      	b.n	8020122 <__ssvfiscanf_r+0x1de>
 8020164:	2308      	movs	r3, #8
 8020166:	9342      	str	r3, [sp, #264]	; 0x108
 8020168:	2304      	movs	r3, #4
 802016a:	e7da      	b.n	8020122 <__ssvfiscanf_r+0x1de>
 802016c:	4629      	mov	r1, r5
 802016e:	4640      	mov	r0, r8
 8020170:	f000 f9ac 	bl	80204cc <__sccl>
 8020174:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802017a:	9341      	str	r3, [sp, #260]	; 0x104
 802017c:	4605      	mov	r5, r0
 802017e:	2301      	movs	r3, #1
 8020180:	e7cf      	b.n	8020122 <__ssvfiscanf_r+0x1de>
 8020182:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020188:	9341      	str	r3, [sp, #260]	; 0x104
 802018a:	2300      	movs	r3, #0
 802018c:	e7c9      	b.n	8020122 <__ssvfiscanf_r+0x1de>
 802018e:	2302      	movs	r3, #2
 8020190:	e7c7      	b.n	8020122 <__ssvfiscanf_r+0x1de>
 8020192:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020194:	06c3      	lsls	r3, r0, #27
 8020196:	f53f aeff 	bmi.w	801ff98 <__ssvfiscanf_r+0x54>
 802019a:	9b00      	ldr	r3, [sp, #0]
 802019c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802019e:	1d19      	adds	r1, r3, #4
 80201a0:	9100      	str	r1, [sp, #0]
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	07c0      	lsls	r0, r0, #31
 80201a6:	bf4c      	ite	mi
 80201a8:	801a      	strhmi	r2, [r3, #0]
 80201aa:	601a      	strpl	r2, [r3, #0]
 80201ac:	e6f4      	b.n	801ff98 <__ssvfiscanf_r+0x54>
 80201ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80201b0:	4621      	mov	r1, r4
 80201b2:	4630      	mov	r0, r6
 80201b4:	4798      	blx	r3
 80201b6:	2800      	cmp	r0, #0
 80201b8:	d0b7      	beq.n	802012a <__ssvfiscanf_r+0x1e6>
 80201ba:	e79d      	b.n	80200f8 <__ssvfiscanf_r+0x1b4>
 80201bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80201be:	3201      	adds	r2, #1
 80201c0:	9245      	str	r2, [sp, #276]	; 0x114
 80201c2:	6862      	ldr	r2, [r4, #4]
 80201c4:	3a01      	subs	r2, #1
 80201c6:	2a00      	cmp	r2, #0
 80201c8:	6062      	str	r2, [r4, #4]
 80201ca:	dd02      	ble.n	80201d2 <__ssvfiscanf_r+0x28e>
 80201cc:	3301      	adds	r3, #1
 80201ce:	6023      	str	r3, [r4, #0]
 80201d0:	e7ae      	b.n	8020130 <__ssvfiscanf_r+0x1ec>
 80201d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80201d4:	4621      	mov	r1, r4
 80201d6:	4630      	mov	r0, r6
 80201d8:	4798      	blx	r3
 80201da:	2800      	cmp	r0, #0
 80201dc:	d0a8      	beq.n	8020130 <__ssvfiscanf_r+0x1ec>
 80201de:	e78b      	b.n	80200f8 <__ssvfiscanf_r+0x1b4>
 80201e0:	2b04      	cmp	r3, #4
 80201e2:	dc06      	bgt.n	80201f2 <__ssvfiscanf_r+0x2ae>
 80201e4:	466b      	mov	r3, sp
 80201e6:	4622      	mov	r2, r4
 80201e8:	a941      	add	r1, sp, #260	; 0x104
 80201ea:	4630      	mov	r0, r6
 80201ec:	f000 f87a 	bl	80202e4 <_scanf_i>
 80201f0:	e7ac      	b.n	802014c <__ssvfiscanf_r+0x208>
 80201f2:	4b0f      	ldr	r3, [pc, #60]	; (8020230 <__ssvfiscanf_r+0x2ec>)
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	f43f aecf 	beq.w	801ff98 <__ssvfiscanf_r+0x54>
 80201fa:	466b      	mov	r3, sp
 80201fc:	4622      	mov	r2, r4
 80201fe:	a941      	add	r1, sp, #260	; 0x104
 8020200:	4630      	mov	r0, r6
 8020202:	f3af 8000 	nop.w
 8020206:	e7a1      	b.n	802014c <__ssvfiscanf_r+0x208>
 8020208:	89a3      	ldrh	r3, [r4, #12]
 802020a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802020e:	bf18      	it	ne
 8020210:	f04f 30ff 	movne.w	r0, #4294967295
 8020214:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8020218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802021c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802021e:	e7f9      	b.n	8020214 <__ssvfiscanf_r+0x2d0>
 8020220:	0801fe91 	.word	0x0801fe91
 8020224:	0801ff0b 	.word	0x0801ff0b
 8020228:	080257bd 	.word	0x080257bd
 802022c:	080258cd 	.word	0x080258cd
 8020230:	00000000 	.word	0x00000000

08020234 <_scanf_chars>:
 8020234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020238:	4615      	mov	r5, r2
 802023a:	688a      	ldr	r2, [r1, #8]
 802023c:	4680      	mov	r8, r0
 802023e:	460c      	mov	r4, r1
 8020240:	b932      	cbnz	r2, 8020250 <_scanf_chars+0x1c>
 8020242:	698a      	ldr	r2, [r1, #24]
 8020244:	2a00      	cmp	r2, #0
 8020246:	bf0c      	ite	eq
 8020248:	2201      	moveq	r2, #1
 802024a:	f04f 32ff 	movne.w	r2, #4294967295
 802024e:	608a      	str	r2, [r1, #8]
 8020250:	6822      	ldr	r2, [r4, #0]
 8020252:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80202e0 <_scanf_chars+0xac>
 8020256:	06d1      	lsls	r1, r2, #27
 8020258:	bf5f      	itttt	pl
 802025a:	681a      	ldrpl	r2, [r3, #0]
 802025c:	1d11      	addpl	r1, r2, #4
 802025e:	6019      	strpl	r1, [r3, #0]
 8020260:	6816      	ldrpl	r6, [r2, #0]
 8020262:	2700      	movs	r7, #0
 8020264:	69a0      	ldr	r0, [r4, #24]
 8020266:	b188      	cbz	r0, 802028c <_scanf_chars+0x58>
 8020268:	2801      	cmp	r0, #1
 802026a:	d107      	bne.n	802027c <_scanf_chars+0x48>
 802026c:	682b      	ldr	r3, [r5, #0]
 802026e:	781a      	ldrb	r2, [r3, #0]
 8020270:	6963      	ldr	r3, [r4, #20]
 8020272:	5c9b      	ldrb	r3, [r3, r2]
 8020274:	b953      	cbnz	r3, 802028c <_scanf_chars+0x58>
 8020276:	bb27      	cbnz	r7, 80202c2 <_scanf_chars+0x8e>
 8020278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802027c:	2802      	cmp	r0, #2
 802027e:	d120      	bne.n	80202c2 <_scanf_chars+0x8e>
 8020280:	682b      	ldr	r3, [r5, #0]
 8020282:	781b      	ldrb	r3, [r3, #0]
 8020284:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020288:	071b      	lsls	r3, r3, #28
 802028a:	d41a      	bmi.n	80202c2 <_scanf_chars+0x8e>
 802028c:	6823      	ldr	r3, [r4, #0]
 802028e:	06da      	lsls	r2, r3, #27
 8020290:	bf5e      	ittt	pl
 8020292:	682b      	ldrpl	r3, [r5, #0]
 8020294:	781b      	ldrbpl	r3, [r3, #0]
 8020296:	f806 3b01 	strbpl.w	r3, [r6], #1
 802029a:	682a      	ldr	r2, [r5, #0]
 802029c:	686b      	ldr	r3, [r5, #4]
 802029e:	3201      	adds	r2, #1
 80202a0:	602a      	str	r2, [r5, #0]
 80202a2:	68a2      	ldr	r2, [r4, #8]
 80202a4:	3b01      	subs	r3, #1
 80202a6:	3a01      	subs	r2, #1
 80202a8:	606b      	str	r3, [r5, #4]
 80202aa:	3701      	adds	r7, #1
 80202ac:	60a2      	str	r2, [r4, #8]
 80202ae:	b142      	cbz	r2, 80202c2 <_scanf_chars+0x8e>
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	dcd7      	bgt.n	8020264 <_scanf_chars+0x30>
 80202b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80202b8:	4629      	mov	r1, r5
 80202ba:	4640      	mov	r0, r8
 80202bc:	4798      	blx	r3
 80202be:	2800      	cmp	r0, #0
 80202c0:	d0d0      	beq.n	8020264 <_scanf_chars+0x30>
 80202c2:	6823      	ldr	r3, [r4, #0]
 80202c4:	f013 0310 	ands.w	r3, r3, #16
 80202c8:	d105      	bne.n	80202d6 <_scanf_chars+0xa2>
 80202ca:	68e2      	ldr	r2, [r4, #12]
 80202cc:	3201      	adds	r2, #1
 80202ce:	60e2      	str	r2, [r4, #12]
 80202d0:	69a2      	ldr	r2, [r4, #24]
 80202d2:	b102      	cbz	r2, 80202d6 <_scanf_chars+0xa2>
 80202d4:	7033      	strb	r3, [r6, #0]
 80202d6:	6923      	ldr	r3, [r4, #16]
 80202d8:	441f      	add	r7, r3
 80202da:	6127      	str	r7, [r4, #16]
 80202dc:	2000      	movs	r0, #0
 80202de:	e7cb      	b.n	8020278 <_scanf_chars+0x44>
 80202e0:	080257bd 	.word	0x080257bd

080202e4 <_scanf_i>:
 80202e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202e8:	4698      	mov	r8, r3
 80202ea:	4b74      	ldr	r3, [pc, #464]	; (80204bc <_scanf_i+0x1d8>)
 80202ec:	460c      	mov	r4, r1
 80202ee:	4682      	mov	sl, r0
 80202f0:	4616      	mov	r6, r2
 80202f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80202f6:	b087      	sub	sp, #28
 80202f8:	ab03      	add	r3, sp, #12
 80202fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80202fe:	4b70      	ldr	r3, [pc, #448]	; (80204c0 <_scanf_i+0x1dc>)
 8020300:	69a1      	ldr	r1, [r4, #24]
 8020302:	4a70      	ldr	r2, [pc, #448]	; (80204c4 <_scanf_i+0x1e0>)
 8020304:	2903      	cmp	r1, #3
 8020306:	bf18      	it	ne
 8020308:	461a      	movne	r2, r3
 802030a:	68a3      	ldr	r3, [r4, #8]
 802030c:	9201      	str	r2, [sp, #4]
 802030e:	1e5a      	subs	r2, r3, #1
 8020310:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020314:	bf88      	it	hi
 8020316:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802031a:	4627      	mov	r7, r4
 802031c:	bf82      	ittt	hi
 802031e:	eb03 0905 	addhi.w	r9, r3, r5
 8020322:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020326:	60a3      	strhi	r3, [r4, #8]
 8020328:	f857 3b1c 	ldr.w	r3, [r7], #28
 802032c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020330:	bf98      	it	ls
 8020332:	f04f 0900 	movls.w	r9, #0
 8020336:	6023      	str	r3, [r4, #0]
 8020338:	463d      	mov	r5, r7
 802033a:	f04f 0b00 	mov.w	fp, #0
 802033e:	6831      	ldr	r1, [r6, #0]
 8020340:	ab03      	add	r3, sp, #12
 8020342:	7809      	ldrb	r1, [r1, #0]
 8020344:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020348:	2202      	movs	r2, #2
 802034a:	f7df ff89 	bl	8000260 <memchr>
 802034e:	b328      	cbz	r0, 802039c <_scanf_i+0xb8>
 8020350:	f1bb 0f01 	cmp.w	fp, #1
 8020354:	d159      	bne.n	802040a <_scanf_i+0x126>
 8020356:	6862      	ldr	r2, [r4, #4]
 8020358:	b92a      	cbnz	r2, 8020366 <_scanf_i+0x82>
 802035a:	6822      	ldr	r2, [r4, #0]
 802035c:	2308      	movs	r3, #8
 802035e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020362:	6063      	str	r3, [r4, #4]
 8020364:	6022      	str	r2, [r4, #0]
 8020366:	6822      	ldr	r2, [r4, #0]
 8020368:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802036c:	6022      	str	r2, [r4, #0]
 802036e:	68a2      	ldr	r2, [r4, #8]
 8020370:	1e51      	subs	r1, r2, #1
 8020372:	60a1      	str	r1, [r4, #8]
 8020374:	b192      	cbz	r2, 802039c <_scanf_i+0xb8>
 8020376:	6832      	ldr	r2, [r6, #0]
 8020378:	1c51      	adds	r1, r2, #1
 802037a:	6031      	str	r1, [r6, #0]
 802037c:	7812      	ldrb	r2, [r2, #0]
 802037e:	f805 2b01 	strb.w	r2, [r5], #1
 8020382:	6872      	ldr	r2, [r6, #4]
 8020384:	3a01      	subs	r2, #1
 8020386:	2a00      	cmp	r2, #0
 8020388:	6072      	str	r2, [r6, #4]
 802038a:	dc07      	bgt.n	802039c <_scanf_i+0xb8>
 802038c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020390:	4631      	mov	r1, r6
 8020392:	4650      	mov	r0, sl
 8020394:	4790      	blx	r2
 8020396:	2800      	cmp	r0, #0
 8020398:	f040 8085 	bne.w	80204a6 <_scanf_i+0x1c2>
 802039c:	f10b 0b01 	add.w	fp, fp, #1
 80203a0:	f1bb 0f03 	cmp.w	fp, #3
 80203a4:	d1cb      	bne.n	802033e <_scanf_i+0x5a>
 80203a6:	6863      	ldr	r3, [r4, #4]
 80203a8:	b90b      	cbnz	r3, 80203ae <_scanf_i+0xca>
 80203aa:	230a      	movs	r3, #10
 80203ac:	6063      	str	r3, [r4, #4]
 80203ae:	6863      	ldr	r3, [r4, #4]
 80203b0:	4945      	ldr	r1, [pc, #276]	; (80204c8 <_scanf_i+0x1e4>)
 80203b2:	6960      	ldr	r0, [r4, #20]
 80203b4:	1ac9      	subs	r1, r1, r3
 80203b6:	f000 f889 	bl	80204cc <__sccl>
 80203ba:	f04f 0b00 	mov.w	fp, #0
 80203be:	68a3      	ldr	r3, [r4, #8]
 80203c0:	6822      	ldr	r2, [r4, #0]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d03d      	beq.n	8020442 <_scanf_i+0x15e>
 80203c6:	6831      	ldr	r1, [r6, #0]
 80203c8:	6960      	ldr	r0, [r4, #20]
 80203ca:	f891 c000 	ldrb.w	ip, [r1]
 80203ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80203d2:	2800      	cmp	r0, #0
 80203d4:	d035      	beq.n	8020442 <_scanf_i+0x15e>
 80203d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80203da:	d124      	bne.n	8020426 <_scanf_i+0x142>
 80203dc:	0510      	lsls	r0, r2, #20
 80203de:	d522      	bpl.n	8020426 <_scanf_i+0x142>
 80203e0:	f10b 0b01 	add.w	fp, fp, #1
 80203e4:	f1b9 0f00 	cmp.w	r9, #0
 80203e8:	d003      	beq.n	80203f2 <_scanf_i+0x10e>
 80203ea:	3301      	adds	r3, #1
 80203ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80203f0:	60a3      	str	r3, [r4, #8]
 80203f2:	6873      	ldr	r3, [r6, #4]
 80203f4:	3b01      	subs	r3, #1
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	6073      	str	r3, [r6, #4]
 80203fa:	dd1b      	ble.n	8020434 <_scanf_i+0x150>
 80203fc:	6833      	ldr	r3, [r6, #0]
 80203fe:	3301      	adds	r3, #1
 8020400:	6033      	str	r3, [r6, #0]
 8020402:	68a3      	ldr	r3, [r4, #8]
 8020404:	3b01      	subs	r3, #1
 8020406:	60a3      	str	r3, [r4, #8]
 8020408:	e7d9      	b.n	80203be <_scanf_i+0xda>
 802040a:	f1bb 0f02 	cmp.w	fp, #2
 802040e:	d1ae      	bne.n	802036e <_scanf_i+0x8a>
 8020410:	6822      	ldr	r2, [r4, #0]
 8020412:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020416:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802041a:	d1bf      	bne.n	802039c <_scanf_i+0xb8>
 802041c:	2310      	movs	r3, #16
 802041e:	6063      	str	r3, [r4, #4]
 8020420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020424:	e7a2      	b.n	802036c <_scanf_i+0x88>
 8020426:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802042a:	6022      	str	r2, [r4, #0]
 802042c:	780b      	ldrb	r3, [r1, #0]
 802042e:	f805 3b01 	strb.w	r3, [r5], #1
 8020432:	e7de      	b.n	80203f2 <_scanf_i+0x10e>
 8020434:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020438:	4631      	mov	r1, r6
 802043a:	4650      	mov	r0, sl
 802043c:	4798      	blx	r3
 802043e:	2800      	cmp	r0, #0
 8020440:	d0df      	beq.n	8020402 <_scanf_i+0x11e>
 8020442:	6823      	ldr	r3, [r4, #0]
 8020444:	05d9      	lsls	r1, r3, #23
 8020446:	d50d      	bpl.n	8020464 <_scanf_i+0x180>
 8020448:	42bd      	cmp	r5, r7
 802044a:	d909      	bls.n	8020460 <_scanf_i+0x17c>
 802044c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020454:	4632      	mov	r2, r6
 8020456:	4650      	mov	r0, sl
 8020458:	4798      	blx	r3
 802045a:	f105 39ff 	add.w	r9, r5, #4294967295
 802045e:	464d      	mov	r5, r9
 8020460:	42bd      	cmp	r5, r7
 8020462:	d028      	beq.n	80204b6 <_scanf_i+0x1d2>
 8020464:	6822      	ldr	r2, [r4, #0]
 8020466:	f012 0210 	ands.w	r2, r2, #16
 802046a:	d113      	bne.n	8020494 <_scanf_i+0x1b0>
 802046c:	702a      	strb	r2, [r5, #0]
 802046e:	6863      	ldr	r3, [r4, #4]
 8020470:	9e01      	ldr	r6, [sp, #4]
 8020472:	4639      	mov	r1, r7
 8020474:	4650      	mov	r0, sl
 8020476:	47b0      	blx	r6
 8020478:	f8d8 3000 	ldr.w	r3, [r8]
 802047c:	6821      	ldr	r1, [r4, #0]
 802047e:	1d1a      	adds	r2, r3, #4
 8020480:	f8c8 2000 	str.w	r2, [r8]
 8020484:	f011 0f20 	tst.w	r1, #32
 8020488:	681b      	ldr	r3, [r3, #0]
 802048a:	d00f      	beq.n	80204ac <_scanf_i+0x1c8>
 802048c:	6018      	str	r0, [r3, #0]
 802048e:	68e3      	ldr	r3, [r4, #12]
 8020490:	3301      	adds	r3, #1
 8020492:	60e3      	str	r3, [r4, #12]
 8020494:	1bed      	subs	r5, r5, r7
 8020496:	44ab      	add	fp, r5
 8020498:	6925      	ldr	r5, [r4, #16]
 802049a:	445d      	add	r5, fp
 802049c:	6125      	str	r5, [r4, #16]
 802049e:	2000      	movs	r0, #0
 80204a0:	b007      	add	sp, #28
 80204a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204a6:	f04f 0b00 	mov.w	fp, #0
 80204aa:	e7ca      	b.n	8020442 <_scanf_i+0x15e>
 80204ac:	07ca      	lsls	r2, r1, #31
 80204ae:	bf4c      	ite	mi
 80204b0:	8018      	strhmi	r0, [r3, #0]
 80204b2:	6018      	strpl	r0, [r3, #0]
 80204b4:	e7eb      	b.n	802048e <_scanf_i+0x1aa>
 80204b6:	2001      	movs	r0, #1
 80204b8:	e7f2      	b.n	80204a0 <_scanf_i+0x1bc>
 80204ba:	bf00      	nop
 80204bc:	08023444 	.word	0x08023444
 80204c0:	0801e84d 	.word	0x0801e84d
 80204c4:	08020649 	.word	0x08020649
 80204c8:	08025913 	.word	0x08025913

080204cc <__sccl>:
 80204cc:	b570      	push	{r4, r5, r6, lr}
 80204ce:	780b      	ldrb	r3, [r1, #0]
 80204d0:	4604      	mov	r4, r0
 80204d2:	2b5e      	cmp	r3, #94	; 0x5e
 80204d4:	bf0b      	itete	eq
 80204d6:	784b      	ldrbeq	r3, [r1, #1]
 80204d8:	1c48      	addne	r0, r1, #1
 80204da:	1c88      	addeq	r0, r1, #2
 80204dc:	2200      	movne	r2, #0
 80204de:	bf08      	it	eq
 80204e0:	2201      	moveq	r2, #1
 80204e2:	1e61      	subs	r1, r4, #1
 80204e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80204e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80204ec:	42a9      	cmp	r1, r5
 80204ee:	d1fb      	bne.n	80204e8 <__sccl+0x1c>
 80204f0:	b90b      	cbnz	r3, 80204f6 <__sccl+0x2a>
 80204f2:	3801      	subs	r0, #1
 80204f4:	bd70      	pop	{r4, r5, r6, pc}
 80204f6:	f082 0101 	eor.w	r1, r2, #1
 80204fa:	54e1      	strb	r1, [r4, r3]
 80204fc:	1c42      	adds	r2, r0, #1
 80204fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8020502:	2d2d      	cmp	r5, #45	; 0x2d
 8020504:	f102 36ff 	add.w	r6, r2, #4294967295
 8020508:	4610      	mov	r0, r2
 802050a:	d006      	beq.n	802051a <__sccl+0x4e>
 802050c:	2d5d      	cmp	r5, #93	; 0x5d
 802050e:	d0f1      	beq.n	80204f4 <__sccl+0x28>
 8020510:	b90d      	cbnz	r5, 8020516 <__sccl+0x4a>
 8020512:	4630      	mov	r0, r6
 8020514:	e7ee      	b.n	80204f4 <__sccl+0x28>
 8020516:	462b      	mov	r3, r5
 8020518:	e7ef      	b.n	80204fa <__sccl+0x2e>
 802051a:	7816      	ldrb	r6, [r2, #0]
 802051c:	2e5d      	cmp	r6, #93	; 0x5d
 802051e:	d0fa      	beq.n	8020516 <__sccl+0x4a>
 8020520:	42b3      	cmp	r3, r6
 8020522:	dcf8      	bgt.n	8020516 <__sccl+0x4a>
 8020524:	4618      	mov	r0, r3
 8020526:	3001      	adds	r0, #1
 8020528:	4286      	cmp	r6, r0
 802052a:	5421      	strb	r1, [r4, r0]
 802052c:	dcfb      	bgt.n	8020526 <__sccl+0x5a>
 802052e:	43d8      	mvns	r0, r3
 8020530:	4430      	add	r0, r6
 8020532:	1c5d      	adds	r5, r3, #1
 8020534:	42b3      	cmp	r3, r6
 8020536:	bfa8      	it	ge
 8020538:	2000      	movge	r0, #0
 802053a:	182b      	adds	r3, r5, r0
 802053c:	3202      	adds	r2, #2
 802053e:	e7de      	b.n	80204fe <__sccl+0x32>

08020540 <_strtol_l.isra.0>:
 8020540:	2b01      	cmp	r3, #1
 8020542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020546:	d001      	beq.n	802054c <_strtol_l.isra.0+0xc>
 8020548:	2b24      	cmp	r3, #36	; 0x24
 802054a:	d906      	bls.n	802055a <_strtol_l.isra.0+0x1a>
 802054c:	f7fc fbb6 	bl	801ccbc <__errno>
 8020550:	2316      	movs	r3, #22
 8020552:	6003      	str	r3, [r0, #0]
 8020554:	2000      	movs	r0, #0
 8020556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802055a:	4f3a      	ldr	r7, [pc, #232]	; (8020644 <_strtol_l.isra.0+0x104>)
 802055c:	468e      	mov	lr, r1
 802055e:	4676      	mov	r6, lr
 8020560:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020564:	5de5      	ldrb	r5, [r4, r7]
 8020566:	f015 0508 	ands.w	r5, r5, #8
 802056a:	d1f8      	bne.n	802055e <_strtol_l.isra.0+0x1e>
 802056c:	2c2d      	cmp	r4, #45	; 0x2d
 802056e:	d134      	bne.n	80205da <_strtol_l.isra.0+0x9a>
 8020570:	f89e 4000 	ldrb.w	r4, [lr]
 8020574:	f04f 0801 	mov.w	r8, #1
 8020578:	f106 0e02 	add.w	lr, r6, #2
 802057c:	2b00      	cmp	r3, #0
 802057e:	d05c      	beq.n	802063a <_strtol_l.isra.0+0xfa>
 8020580:	2b10      	cmp	r3, #16
 8020582:	d10c      	bne.n	802059e <_strtol_l.isra.0+0x5e>
 8020584:	2c30      	cmp	r4, #48	; 0x30
 8020586:	d10a      	bne.n	802059e <_strtol_l.isra.0+0x5e>
 8020588:	f89e 4000 	ldrb.w	r4, [lr]
 802058c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020590:	2c58      	cmp	r4, #88	; 0x58
 8020592:	d14d      	bne.n	8020630 <_strtol_l.isra.0+0xf0>
 8020594:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020598:	2310      	movs	r3, #16
 802059a:	f10e 0e02 	add.w	lr, lr, #2
 802059e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80205a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80205a6:	2600      	movs	r6, #0
 80205a8:	fbbc f9f3 	udiv	r9, ip, r3
 80205ac:	4635      	mov	r5, r6
 80205ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80205b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80205b6:	2f09      	cmp	r7, #9
 80205b8:	d818      	bhi.n	80205ec <_strtol_l.isra.0+0xac>
 80205ba:	463c      	mov	r4, r7
 80205bc:	42a3      	cmp	r3, r4
 80205be:	dd24      	ble.n	802060a <_strtol_l.isra.0+0xca>
 80205c0:	2e00      	cmp	r6, #0
 80205c2:	db1f      	blt.n	8020604 <_strtol_l.isra.0+0xc4>
 80205c4:	45a9      	cmp	r9, r5
 80205c6:	d31d      	bcc.n	8020604 <_strtol_l.isra.0+0xc4>
 80205c8:	d101      	bne.n	80205ce <_strtol_l.isra.0+0x8e>
 80205ca:	45a2      	cmp	sl, r4
 80205cc:	db1a      	blt.n	8020604 <_strtol_l.isra.0+0xc4>
 80205ce:	fb05 4503 	mla	r5, r5, r3, r4
 80205d2:	2601      	movs	r6, #1
 80205d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80205d8:	e7eb      	b.n	80205b2 <_strtol_l.isra.0+0x72>
 80205da:	2c2b      	cmp	r4, #43	; 0x2b
 80205dc:	bf08      	it	eq
 80205de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80205e2:	46a8      	mov	r8, r5
 80205e4:	bf08      	it	eq
 80205e6:	f106 0e02 	addeq.w	lr, r6, #2
 80205ea:	e7c7      	b.n	802057c <_strtol_l.isra.0+0x3c>
 80205ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80205f0:	2f19      	cmp	r7, #25
 80205f2:	d801      	bhi.n	80205f8 <_strtol_l.isra.0+0xb8>
 80205f4:	3c37      	subs	r4, #55	; 0x37
 80205f6:	e7e1      	b.n	80205bc <_strtol_l.isra.0+0x7c>
 80205f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80205fc:	2f19      	cmp	r7, #25
 80205fe:	d804      	bhi.n	802060a <_strtol_l.isra.0+0xca>
 8020600:	3c57      	subs	r4, #87	; 0x57
 8020602:	e7db      	b.n	80205bc <_strtol_l.isra.0+0x7c>
 8020604:	f04f 36ff 	mov.w	r6, #4294967295
 8020608:	e7e4      	b.n	80205d4 <_strtol_l.isra.0+0x94>
 802060a:	2e00      	cmp	r6, #0
 802060c:	da05      	bge.n	802061a <_strtol_l.isra.0+0xda>
 802060e:	2322      	movs	r3, #34	; 0x22
 8020610:	6003      	str	r3, [r0, #0]
 8020612:	4665      	mov	r5, ip
 8020614:	b942      	cbnz	r2, 8020628 <_strtol_l.isra.0+0xe8>
 8020616:	4628      	mov	r0, r5
 8020618:	e79d      	b.n	8020556 <_strtol_l.isra.0+0x16>
 802061a:	f1b8 0f00 	cmp.w	r8, #0
 802061e:	d000      	beq.n	8020622 <_strtol_l.isra.0+0xe2>
 8020620:	426d      	negs	r5, r5
 8020622:	2a00      	cmp	r2, #0
 8020624:	d0f7      	beq.n	8020616 <_strtol_l.isra.0+0xd6>
 8020626:	b10e      	cbz	r6, 802062c <_strtol_l.isra.0+0xec>
 8020628:	f10e 31ff 	add.w	r1, lr, #4294967295
 802062c:	6011      	str	r1, [r2, #0]
 802062e:	e7f2      	b.n	8020616 <_strtol_l.isra.0+0xd6>
 8020630:	2430      	movs	r4, #48	; 0x30
 8020632:	2b00      	cmp	r3, #0
 8020634:	d1b3      	bne.n	802059e <_strtol_l.isra.0+0x5e>
 8020636:	2308      	movs	r3, #8
 8020638:	e7b1      	b.n	802059e <_strtol_l.isra.0+0x5e>
 802063a:	2c30      	cmp	r4, #48	; 0x30
 802063c:	d0a4      	beq.n	8020588 <_strtol_l.isra.0+0x48>
 802063e:	230a      	movs	r3, #10
 8020640:	e7ad      	b.n	802059e <_strtol_l.isra.0+0x5e>
 8020642:	bf00      	nop
 8020644:	080257bd 	.word	0x080257bd

08020648 <_strtol_r>:
 8020648:	f7ff bf7a 	b.w	8020540 <_strtol_l.isra.0>

0802064c <__submore>:
 802064c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020650:	460c      	mov	r4, r1
 8020652:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020658:	4299      	cmp	r1, r3
 802065a:	d11d      	bne.n	8020698 <__submore+0x4c>
 802065c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020660:	f7fd f972 	bl	801d948 <_malloc_r>
 8020664:	b918      	cbnz	r0, 802066e <__submore+0x22>
 8020666:	f04f 30ff 	mov.w	r0, #4294967295
 802066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802066e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020672:	63a3      	str	r3, [r4, #56]	; 0x38
 8020674:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020678:	6360      	str	r0, [r4, #52]	; 0x34
 802067a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802067e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020682:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020686:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802068a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802068e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020692:	6020      	str	r0, [r4, #0]
 8020694:	2000      	movs	r0, #0
 8020696:	e7e8      	b.n	802066a <__submore+0x1e>
 8020698:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802069a:	0077      	lsls	r7, r6, #1
 802069c:	463a      	mov	r2, r7
 802069e:	f7fe fe77 	bl	801f390 <_realloc_r>
 80206a2:	4605      	mov	r5, r0
 80206a4:	2800      	cmp	r0, #0
 80206a6:	d0de      	beq.n	8020666 <__submore+0x1a>
 80206a8:	eb00 0806 	add.w	r8, r0, r6
 80206ac:	4601      	mov	r1, r0
 80206ae:	4632      	mov	r2, r6
 80206b0:	4640      	mov	r0, r8
 80206b2:	f7fd f8d3 	bl	801d85c <memcpy>
 80206b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80206ba:	f8c4 8000 	str.w	r8, [r4]
 80206be:	e7e9      	b.n	8020694 <__submore+0x48>

080206c0 <_gettimeofday>:
 80206c0:	4b02      	ldr	r3, [pc, #8]	; (80206cc <_gettimeofday+0xc>)
 80206c2:	2258      	movs	r2, #88	; 0x58
 80206c4:	601a      	str	r2, [r3, #0]
 80206c6:	f04f 30ff 	mov.w	r0, #4294967295
 80206ca:	4770      	bx	lr
 80206cc:	20000d80 	.word	0x20000d80

080206d0 <_init>:
 80206d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206d2:	bf00      	nop
 80206d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206d6:	bc08      	pop	{r3}
 80206d8:	469e      	mov	lr, r3
 80206da:	4770      	bx	lr

080206dc <_fini>:
 80206dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206de:	bf00      	nop
 80206e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206e2:	bc08      	pop	{r3}
 80206e4:	469e      	mov	lr, r3
 80206e6:	4770      	bx	lr
