
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ff08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000503c  080200e8  080200e8  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025124  08025124  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08025124  08025124  00035124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802512c  0802512c  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802512c  0802512c  0003512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0802513c  0802513c  0003513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802514c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a08  2000033c  08025488  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  08025488  00040d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006622f  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bf93  00000000  00000000  000a659b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004030  00000000  00000000  000b2530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003e10  00000000  00000000  000b6560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d750  00000000  00000000  000ba370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bec3  00000000  00000000  000e7ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e444  00000000  00000000  00113983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00221dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000136ec  00000000  00000000  00221e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00235508  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0023552c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080200d0 	.word	0x080200d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	080200d0 	.word	0x080200d0

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000400 	.word	0x20000400

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01b fca6 	bl	801c6bc <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01b fbfe 	bl	801c6bc <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000d48 	.word	0x20000d48

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01b ffd5 	bl	801cef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fdfb 	bl	8003b48 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	0802514c 	.word	0x0802514c
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000d44 	.word	0x20000d44

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000d30 	.word	0x20000d30
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000d30 	.word	0x20000d30

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08022df4 	.word	0x08022df4
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08022e04 	.word	0x08022e04

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08022e04 	.word	0x08022e04

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08022e0c 	.word	0x08022e0c
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08022e24 	.word	0x08022e24
 8003904:	08022e2c 	.word	0x08022e2c

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 void 		(*UART_ISR)(void),
			 uint32_t 	(*getTick)(void))
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   UART_ISR	!= NULL				&&
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_ISR 			= UART_ISR;
 800392e:	4a0b      	ldr	r2, [pc, #44]	; (800395c <ESP_Init+0x54>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6093      	str	r3, [r2, #8]
		ESP8266.UART_Receive 		= UART_Receive;
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <ESP_Init+0x54>)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <ESP_Init+0x54>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003940:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	60d3      	str	r3, [r2, #12]
		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000360 	.word	0x20000360

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003984:	2010      	movs	r0, #16
 8003986:	f019 fc59 	bl	801d23c <malloc>
 800398a:	4603      	mov	r3, r0
 800398c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003994:	2300      	movs	r3, #0
 8003996:	e017      	b.n	80039c8 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 80039aa:	2101      	movs	r1, #1
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f018 fe7d 	bl	801c6ac <calloc>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <ringBuffer_init+0x4c>
		}

	return rBuf;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f019 fc2e 	bl	801d24c <free>
		}
		free(buffer);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f019 fc2b 	bl	801d24c <free>
	}
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d00c      	beq.n	8003a32 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003a30:	e009      	b.n	8003a46 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d00d      	beq.n	8003a84 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
		return data;
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	e00a      	b.n	8003a9a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	605a      	str	r2, [r3, #4]
		return data;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68d8      	ldr	r0, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f019 fbdd 	bl	801d278 <memset>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e00a      	b.n	8003aec <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff8c 	bl	80039fe <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	f7fc fba5 	bl	800023c <strlen>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d8ed      	bhi.n	8003ad6 <ringBuffer_pushArray+0x10>
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f01a fb05 	bl	801e124 <strstr>
 8003b1a:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <ringBuffer_lookFor+0x22>
		return 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003b26:	2300      	movs	r3, #0

}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b4e:	f7fd fa0e 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b52:	f000 f81d 	bl	8003b90 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b56:	f000 f951 	bl	8003dfc <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003b5a:	f000 f891 	bl	8003c80 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003b5e:	f000 f8ed 	bl	8003d3c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <main+0x44>)
 8003b64:	463b      	mov	r3, r7
 8003b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b6a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4619      	mov	r1, r3
 8003b72:	2002      	movs	r0, #2
 8003b74:	f001 fe0e 	bl	8005794 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b78:	2120      	movs	r1, #32
 8003b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7e:	f7fd fdf3 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003b82:	2064      	movs	r0, #100	; 0x64
 8003b84:	f7fd fa64 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b88:	e7f6      	b.n	8003b78 <main+0x30>
 8003b8a:	bf00      	nop
 8003b8c:	080200f0 	.word	0x080200f0

08003b90 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b0a8      	sub	sp, #160	; 0xa0
 8003b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b9a:	2238      	movs	r2, #56	; 0x38
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f019 fb6a 	bl	801d278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	2254      	movs	r2, #84	; 0x54
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f019 fb5c 	bl	801d278 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fd fe0f 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bd0:	2340      	movs	r3, #64	; 0x40
 8003bd2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003be0:	2304      	movs	r3, #4
 8003be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003be6:	2355      	movs	r3, #85	; 0x55
 8003be8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd fea2 	bl	800194c <HAL_RCC_OscConfig>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003c18:	f000 f960 	bl	8003edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c1c:	230f      	movs	r3, #15
 8003c1e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c20:	2303      	movs	r3, #3
 8003c22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c24:	2300      	movs	r3, #0
 8003c26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c34:	2104      	movs	r1, #4
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe f9a0 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003c4c:	f000 f946 	bl	8003edc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003c50:	2321      	movs	r3, #33	; 0x21
 8003c52:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c54:	2300      	movs	r3, #0
 8003c56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fba8 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003c74:	f000 f932 	bl	8003edc <Error_Handler>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	37a0      	adds	r7, #160	; 0xa0
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003c84:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c86:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003c88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003c8a:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c92:	4b28      	ldr	r3, [pc, #160]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003caa:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003cc2:	481c      	ldr	r0, [pc, #112]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cc4:	f7fe fdc2 	bl	800284c <HAL_UART_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003cd8:	f000 f900 	bl	8003edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4815      	ldr	r0, [pc, #84]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ce0:	f7ff fd48 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003cf4:	f000 f8f2 	bl	8003edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	480e      	ldr	r0, [pc, #56]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cfc:	f7ff fd78 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003d10:	f000 f8e4 	bl	8003edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003d14:	4807      	ldr	r0, [pc, #28]	; (8003d34 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d16:	f7ff fcf4 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003d2a:	f000 f8d7 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000370 	.word	0x20000370
 8003d38:	40008000 	.word	0x40008000

08003d3c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d40:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d42:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d4e:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d62:	220c      	movs	r2, #12
 8003d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d84:	481b      	ldr	r0, [pc, #108]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d86:	f7fe fd61 	bl	800284c <HAL_UART_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003d9a:	f000 f89f 	bl	8003edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4814      	ldr	r0, [pc, #80]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003da2:	f7ff fce7 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003db6:	f000 f891 	bl	8003edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dba:	2100      	movs	r1, #0
 8003dbc:	480d      	ldr	r0, [pc, #52]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dbe:	f7ff fd17 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003dd2:	f000 f883 	bl	8003edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003dd6:	4807      	ldr	r0, [pc, #28]	; (8003df4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dd8:	f7ff fc93 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003dec:	f000 f876 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000400 	.word	0x20000400
 8003df8:	40013800 	.word	0x40013800

08003dfc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e02:	f107 0314 	add.w	r3, r7, #20
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	609a      	str	r2, [r3, #8]
 8003e0e:	60da      	str	r2, [r3, #12]
 8003e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	4a2e      	ldr	r2, [pc, #184]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e2a:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	4a28      	ldr	r2, [pc, #160]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e30:	f043 0320 	orr.w	r3, r3, #32
 8003e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e36:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e66:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2120      	movs	r1, #32
 8003e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e7a:	f7fd fc5d 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <_ZL12MX_GPIO_Initv+0xd8>)
 8003e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	4619      	mov	r1, r3
 8003e92:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <_ZL12MX_GPIO_Initv+0xdc>)
 8003e94:	f7fd face 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	4619      	mov	r1, r3
 8003eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb2:	f7fd fabf 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2028      	movs	r0, #40	; 0x28
 8003ebc:	f7fd f9c5 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ec0:	2028      	movs	r0, #40	; 0x28
 8003ec2:	f7fd f9dc 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003ec6:	bf00      	nop
 8003ec8:	3728      	adds	r7, #40	; 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	10110000 	.word	0x10110000
 8003ed8:	48000800 	.word	0x48000800

08003edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <Error_Handler+0x8>

08003ee6 <_ZN14MockActualCall13withParameterERK12SimpleStringPv>:
    MockActualCall& withParameter(const SimpleString& name, unsigned long int value) { return withUnsignedLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3340      	adds	r3, #64	; 0x40
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	4798      	blx	r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>:
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3350      	adds	r3, #80	; 0x50
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	4798      	blx	r3
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003f3a:	2032      	movs	r0, #50	; 0x32
 8003f3c:	f7ff fd1e 	bl	800397c <ringBuffer_init>
 8003f40:	4602      	mov	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	605a      	str	r2, [r3, #4]

	}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fd38 	bl	80039d0 <ringBuffer_deInit>
	}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f00d f8ac 	bl	80110d0 <_ZN5UtestC1Ev>
 8003f78:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	08023720 	.word	0x08023720

08003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	4a05      	ldr	r2, [pc, #20]	; (8003fac <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f00d f8a7 	bl	80110f0 <_ZN5UtestD1Ev>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	08023720 	.word	0x08023720

08003fb0 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ffe7 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003fbe:	2108      	movs	r1, #8
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f003 f8c9 	bl	8007158 <_ZdlPvj>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ffbe 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003fec:	4a03      	ldr	r2, [pc, #12]	; (8003ffc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	08023700 	.word	0x08023700

08004000 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	2224      	movs	r2, #36	; 0x24
 800400a:	4906      	ldr	r1, [pc, #24]	; (8004024 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 800400c:	2008      	movs	r0, #8
 800400e:	f003 f88f 	bl	8007130 <_ZnwjPKci>
 8004012:	4604      	mov	r4, r0
 8004014:	4620      	mov	r0, r4
 8004016:	f7ff ffdb 	bl	8003fd0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 800401a:	4623      	mov	r3, r4
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	080200f8 	.word	0x080200f8

08004028 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4618      	mov	r0, r3
 8004034:	f00b fc6a 	bl	800f90c <_ZN10UtestShellC1Ev>
 8004038:	4a03      	ldr	r2, [pc, #12]	; (8004048 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	08023654 	.word	0x08023654

0800404c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	b087      	sub	sp, #28
 8004050:	af04      	add	r7, sp, #16
 8004052:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004054:	f00d f812 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004058:	4604      	mov	r4, r0
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	3338      	adds	r3, #56	; 0x38
 800405e:	681d      	ldr	r5, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	461e      	mov	r6, r3
 8004068:	f00d f818 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800406c:	4603      	mov	r3, r0
 800406e:	9302      	str	r3, [sp, #8]
 8004070:	2327      	movs	r3, #39	; 0x27
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800407a:	4632      	mov	r2, r6
 800407c:	2132      	movs	r1, #50	; 0x32
 800407e:	4620      	mov	r0, r4
 8004080:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004082:	f00c fffb 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004086:	4604      	mov	r4, r0
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	3320      	adds	r3, #32
 800408c:	681d      	ldr	r5, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2de      	uxtb	r6, r3
 800409e:	f00c fffd 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	9303      	str	r3, [sp, #12]
 80040a6:	2328      	movs	r3, #40	; 0x28
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 80040b4:	4a1d      	ldr	r2, [pc, #116]	; (800412c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 80040b6:	4631      	mov	r1, r6
 80040b8:	4620      	mov	r0, r4
 80040ba:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80040bc:	f00c ffde 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80040c0:	4604      	mov	r4, r0
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	3338      	adds	r3, #56	; 0x38
 80040c6:	681d      	ldr	r5, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461e      	mov	r6, r3
 80040d0:	f00c ffe4 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040d4:	4603      	mov	r3, r0
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2329      	movs	r3, #41	; 0x29
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80040e2:	4632      	mov	r2, r6
 80040e4:	2100      	movs	r1, #0
 80040e6:	4620      	mov	r0, r4
 80040e8:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80040ea:	f00c ffc7 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80040ee:	4604      	mov	r4, r0
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	3338      	adds	r3, #56	; 0x38
 80040f4:	681d      	ldr	r5, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	461e      	mov	r6, r3
 80040fe:	f00c ffcd 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004102:	4603      	mov	r3, r0
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	232a      	movs	r3, #42	; 0x2a
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004110:	4632      	mov	r2, r6
 8004112:	2100      	movs	r1, #0
 8004114:	4620      	mov	r0, r4
 8004116:	47a8      	blx	r5

}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004120:	080200f8 	.word	0x080200f8
 8004124:	0802010c 	.word	0x0802010c
 8004128:	08020134 	.word	0x08020134
 800412c:	0802014c 	.word	0x0802014c
 8004130:	08020154 	.word	0x08020154
 8004134:	0802017c 	.word	0x0802017c

08004138 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff0a 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004154:	4a03      	ldr	r2, [pc, #12]	; (8004164 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08023634 	.word	0x08023634

08004168 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	222e      	movs	r2, #46	; 0x2e
 8004172:	4906      	ldr	r1, [pc, #24]	; (800418c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004174:	2008      	movs	r0, #8
 8004176:	f002 ffdb 	bl	8007130 <_ZnwjPKci>
 800417a:	4604      	mov	r4, r0
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff ffdb 	bl	8004138 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004182:	4623      	mov	r3, r4
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	080200f8 	.word	0x080200f8

08004190 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4618      	mov	r0, r3
 800419c:	f00b fbb6 	bl	800f90c <_ZN10UtestShellC1Ev>
 80041a0:	4a03      	ldr	r2, [pc, #12]	; (80041b0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	08023588 	.word	0x08023588

080041b4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80041b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2145      	movs	r1, #69	; 0x45
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fc1b 	bl	80039fe <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80041c8:	f00c ff58 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80041cc:	4604      	mov	r4, r0
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	3338      	adds	r3, #56	; 0x38
 80041d2:	681d      	ldr	r5, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461e      	mov	r6, r3
 80041de:	f00c ff5d 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041e2:	4603      	mov	r3, r0
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	2331      	movs	r3, #49	; 0x31
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80041f0:	4632      	mov	r2, r6
 80041f2:	2145      	movs	r1, #69	; 0x45
 80041f4:	4620      	mov	r0, r4
 80041f6:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2110      	movs	r1, #16
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fbfd 	bl	80039fe <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004204:	f00c ff3a 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004208:	4604      	mov	r4, r0
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	3338      	adds	r3, #56	; 0x38
 800420e:	681d      	ldr	r5, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	461e      	mov	r6, r3
 800421c:	f00c ff3e 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004220:	4603      	mov	r3, r0
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	2334      	movs	r3, #52	; 0x34
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800422e:	4632      	mov	r2, r6
 8004230:	2110      	movs	r1, #16
 8004232:	4620      	mov	r0, r4
 8004234:	47a8      	blx	r5

}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423e:	bf00      	nop
 8004240:	080200f8 	.word	0x080200f8
 8004244:	080201a4 	.word	0x080201a4
 8004248:	080201d4 	.word	0x080201d4

0800424c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fe80 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004268:	4a03      	ldr	r2, [pc, #12]	; (8004278 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	08023568 	.word	0x08023568

0800427c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	2238      	movs	r2, #56	; 0x38
 8004286:	4906      	ldr	r1, [pc, #24]	; (80042a0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004288:	2008      	movs	r0, #8
 800428a:	f002 ff51 	bl	8007130 <_ZnwjPKci>
 800428e:	4604      	mov	r4, r0
 8004290:	4620      	mov	r0, r4
 8004292:	f7ff ffdb 	bl	800424c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004296:	4623      	mov	r3, r4
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}
 80042a0:	080200f8 	.word	0x080200f8

080042a4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f00b fb2c 	bl	800f90c <_ZN10UtestShellC1Ev>
 80042b4:	4a03      	ldr	r2, [pc, #12]	; (80042c4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	080234bc 	.word	0x080234bc

080042c8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b089      	sub	sp, #36	; 0x24
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4293      	cmp	r3, r2
 80042f6:	da0b      	bge.n	8004310 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fb7b 	bl	80039fe <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e7e3      	b.n	80042d8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	21ff      	movs	r1, #255	; 0xff
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fb71 	bl	80039fe <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 800431c:	f00c feae 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004320:	4604      	mov	r4, r0
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	3338      	adds	r3, #56	; 0x38
 8004326:	681d      	ldr	r5, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461e      	mov	r6, r3
 8004332:	f00c feb3 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004336:	4603      	mov	r3, r0
 8004338:	9302      	str	r3, [sp, #8]
 800433a:	2340      	movs	r3, #64	; 0x40
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004344:	4632      	mov	r2, r6
 8004346:	21ff      	movs	r1, #255	; 0xff
 8004348:	4620      	mov	r0, r4
 800434a:	47a8      	blx	r5
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004354:	080200f8 	.word	0x080200f8
 8004358:	08020204 	.word	0x08020204

0800435c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fdf8 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004378:	4a03      	ldr	r2, [pc, #12]	; (8004388 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	0802349c 	.word	0x0802349c

0800438c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	2243      	movs	r2, #67	; 0x43
 8004396:	4906      	ldr	r1, [pc, #24]	; (80043b0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004398:	2008      	movs	r0, #8
 800439a:	f002 fec9 	bl	8007130 <_ZnwjPKci>
 800439e:	4604      	mov	r4, r0
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7ff ffdb 	bl	800435c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80043a6:	4623      	mov	r3, r4
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd90      	pop	{r4, r7, pc}
 80043b0:	080200f8 	.word	0x080200f8

080043b4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4618      	mov	r0, r3
 80043c0:	f00b faa4 	bl	800f90c <_ZN10UtestShellC1Ev>
 80043c4:	4a03      	ldr	r2, [pc, #12]	; (80043d4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	080233f0 	.word	0x080233f0

080043d8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af04      	add	r7, sp, #16
 80043de:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	21ff      	movs	r1, #255	; 0xff
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fb09 	bl	80039fe <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fb2e 	bl	8003a52 <ringBuffer_pop>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80043fa:	f00c fe3f 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80043fe:	4604      	mov	r4, r0
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	3338      	adds	r3, #56	; 0x38
 8004404:	681d      	ldr	r5, [r3, #0]
 8004406:	7bfe      	ldrb	r6, [r7, #15]
 8004408:	f00c fe48 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800440c:	4603      	mov	r3, r0
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	2348      	movs	r3, #72	; 0x48
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 800441a:	4632      	mov	r2, r6
 800441c:	21ff      	movs	r1, #255	; 0xff
 800441e:	4620      	mov	r0, r4
 8004420:	47a8      	blx	r5

}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442a:	bf00      	nop
 800442c:	080200f8 	.word	0x080200f8
 8004430:	08020234 	.word	0x08020234

08004434 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fd8c 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004450:	4a03      	ldr	r2, [pc, #12]	; (8004460 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	080233d0 	.word	0x080233d0

08004464 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	224c      	movs	r2, #76	; 0x4c
 800446e:	4906      	ldr	r1, [pc, #24]	; (8004488 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004470:	2008      	movs	r0, #8
 8004472:	f002 fe5d 	bl	8007130 <_ZnwjPKci>
 8004476:	4604      	mov	r4, r0
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff ffdb 	bl	8004434 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 800447e:	4623      	mov	r3, r4
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bd90      	pop	{r4, r7, pc}
 8004488:	080200f8 	.word	0x080200f8

0800448c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4618      	mov	r0, r3
 8004498:	f00b fa38 	bl	800f90c <_ZN10UtestShellC1Ev>
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08023324 	.word	0x08023324

080044b0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80044b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af04      	add	r7, sp, #16
 80044b6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	21aa      	movs	r1, #170	; 0xaa
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fa9b 	bl	80039fe <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	3b01      	subs	r3, #1
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	da0a      	bge.n	8004506 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff faac 	bl	8003a52 <ringBuffer_pop>
 80044fa:	4603      	mov	r3, r0
 80044fc:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e7e4      	b.n	80044d0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff faa1 	bl	8003a52 <ringBuffer_pop>
 8004510:	4603      	mov	r3, r0
 8004512:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004514:	f00c fdb2 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004518:	4604      	mov	r4, r0
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	3338      	adds	r3, #56	; 0x38
 800451e:	681d      	ldr	r5, [r3, #0]
 8004520:	7afe      	ldrb	r6, [r7, #11]
 8004522:	f00c fdbb 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004526:	4603      	mov	r3, r0
 8004528:	9302      	str	r3, [sp, #8]
 800452a:	2359      	movs	r3, #89	; 0x59
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004534:	4632      	mov	r2, r6
 8004536:	21aa      	movs	r1, #170	; 0xaa
 8004538:	4620      	mov	r0, r4
 800453a:	47a8      	blx	r5
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004544:	080200f8 	.word	0x080200f8
 8004548:	08020254 	.word	0x08020254

0800454c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fd00 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004568:	4a03      	ldr	r2, [pc, #12]	; (8004578 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	08023304 	.word	0x08023304

0800457c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	225c      	movs	r2, #92	; 0x5c
 8004586:	4906      	ldr	r1, [pc, #24]	; (80045a0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004588:	2008      	movs	r0, #8
 800458a:	f002 fdd1 	bl	8007130 <_ZnwjPKci>
 800458e:	4604      	mov	r4, r0
 8004590:	4620      	mov	r0, r4
 8004592:	f7ff ffdb 	bl	800454c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004596:	4623      	mov	r3, r4
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bd90      	pop	{r4, r7, pc}
 80045a0:	080200f8 	.word	0x080200f8

080045a4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00b f9ac 	bl	800f90c <_ZN10UtestShellC1Ev>
 80045b4:	4a03      	ldr	r2, [pc, #12]	; (80045c4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08023258 	.word	0x08023258

080045c8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af04      	add	r7, sp, #16
 80045ce:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d20b      	bcs.n	80045f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fa07 	bl	80039fe <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e7ed      	b.n	80045d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 80045f8:	f00c fd40 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80045fc:	4604      	mov	r4, r0
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	3338      	adds	r3, #56	; 0x38
 8004602:	681d      	ldr	r5, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	3b01      	subs	r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	461e      	mov	r6, r3
 8004618:	f00c fd40 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800461c:	4603      	mov	r3, r0
 800461e:	9302      	str	r3, [sp, #8]
 8004620:	2363      	movs	r3, #99	; 0x63
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 800462a:	4632      	mov	r2, r6
 800462c:	2131      	movs	r1, #49	; 0x31
 800462e:	4620      	mov	r0, r4
 8004630:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fa35 	bl	8003aa6 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 800463c:	f00c fd1e 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004640:	4604      	mov	r4, r0
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	3338      	adds	r3, #56	; 0x38
 8004646:	681d      	ldr	r5, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	3b01      	subs	r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	461e      	mov	r6, r3
 800465c:	f00c fd1e 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004660:	4603      	mov	r3, r0
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	2367      	movs	r3, #103	; 0x67
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 800466e:	4632      	mov	r2, r6
 8004670:	2100      	movs	r1, #0
 8004672:	4620      	mov	r0, r4
 8004674:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004676:	f00c fd01 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800467a:	4604      	mov	r4, r0
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	3338      	adds	r3, #56	; 0x38
 8004680:	681d      	ldr	r5, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461e      	mov	r6, r3
 8004696:	f00c fd01 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800469a:	4603      	mov	r3, r0
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	2368      	movs	r3, #104	; 0x68
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80046a8:	4632      	mov	r2, r6
 80046aa:	2100      	movs	r1, #0
 80046ac:	4620      	mov	r0, r4
 80046ae:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b8:	080200f8 	.word	0x080200f8
 80046bc:	08020274 	.word	0x08020274
 80046c0:	080202b0 	.word	0x080202b0
 80046c4:	080202ec 	.word	0x080202ec

080046c8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fc42 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046e4:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	08023238 	.word	0x08023238

080046f8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	2271      	movs	r2, #113	; 0x71
 8004702:	4906      	ldr	r1, [pc, #24]	; (800471c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004704:	2008      	movs	r0, #8
 8004706:	f002 fd13 	bl	8007130 <_ZnwjPKci>
 800470a:	4604      	mov	r4, r0
 800470c:	4620      	mov	r0, r4
 800470e:	f7ff ffdb 	bl	80046c8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004712:	4623      	mov	r3, r4
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	080200f8 	.word	0x080200f8

08004720 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4618      	mov	r0, r3
 800472c:	f00b f8ee 	bl	800f90c <_ZN10UtestShellC1Ev>
 8004730:	4a03      	ldr	r2, [pc, #12]	; (8004740 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	0802318c 	.word	0x0802318c

08004744 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004746:	b087      	sub	sp, #28
 8004748:	af04      	add	r7, sp, #16
 800474a:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	490e      	ldr	r1, [pc, #56]	; (800478c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff f9b7 	bl	8003ac6 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004758:	f00c fc90 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800475c:	4604      	mov	r4, r0
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	3324      	adds	r3, #36	; 0x24
 8004762:	681d      	ldr	r5, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68de      	ldr	r6, [r3, #12]
 800476a:	f00c fc97 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800476e:	4603      	mov	r3, r0
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	2375      	movs	r3, #117	; 0x75
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	4632      	mov	r2, r6
 800477e:	4903      	ldr	r1, [pc, #12]	; (800478c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004780:	4620      	mov	r0, r4
 8004782:	47a8      	blx	r5
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478c:	08020324 	.word	0x08020324
 8004790:	080200f8 	.word	0x080200f8

08004794 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fbdc 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80047b0:	4a03      	ldr	r2, [pc, #12]	; (80047c0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	0802316c 	.word	0x0802316c

080047c4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	2278      	movs	r2, #120	; 0x78
 80047ce:	4906      	ldr	r1, [pc, #24]	; (80047e8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 80047d0:	2008      	movs	r0, #8
 80047d2:	f002 fcad 	bl	8007130 <_ZnwjPKci>
 80047d6:	4604      	mov	r4, r0
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff ffdb 	bl	8004794 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 80047de:	4623      	mov	r3, r4
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}
 80047e8:	080200f8 	.word	0x080200f8

080047ec <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f00b f888 	bl	800f90c <_ZN10UtestShellC1Ev>
 80047fc:	4a03      	ldr	r2, [pc, #12]	; (800480c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	080230c0 	.word	0x080230c0

08004810 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004814:	b08a      	sub	sp, #40	; 0x28
 8004816:	af04      	add	r7, sp, #16
 8004818:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	494e      	ldr	r1, [pc, #312]	; (8004958 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f950 	bl	8003ac6 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004826:	f00c fc29 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800482a:	4604      	mov	r4, r0
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	3324      	adds	r3, #36	; 0x24
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	68de      	ldr	r6, [r3, #12]
 8004838:	f00c fc30 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800483c:	4603      	mov	r3, r0
 800483e:	9302      	str	r3, [sp, #8]
 8004840:	237c      	movs	r3, #124	; 0x7c
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	4b45      	ldr	r3, [pc, #276]	; (800495c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	2300      	movs	r3, #0
 800484a:	4632      	mov	r2, r6
 800484c:	4942      	ldr	r1, [pc, #264]	; (8004958 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 800484e:	4620      	mov	r0, r4
 8004850:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4942      	ldr	r1, [pc, #264]	; (8004960 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff f953 	bl	8003b04 <ringBuffer_lookFor>
 800485e:	4603      	mov	r3, r0
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf14      	ite	ne
 8004864:	2301      	movne	r3, #1
 8004866:	2300      	moveq	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d05c      	beq.n	8004928 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	493b      	ldr	r1, [pc, #236]	; (8004960 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff f945 	bl	8003b04 <ringBuffer_lookFor>
 800487a:	4604      	mov	r4, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4937      	ldr	r1, [pc, #220]	; (8004960 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff f93e 	bl	8003b04 <ringBuffer_lookFor>
 8004888:	4603      	mov	r3, r0
 800488a:	429c      	cmp	r4, r3
 800488c:	bf14      	ite	ne
 800488e:	2301      	movne	r3, #1
 8004890:	2300      	moveq	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004898:	f00c fbf0 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800489c:	6803      	ldr	r3, [r0, #0]
 800489e:	3370      	adds	r3, #112	; 0x70
 80048a0:	681c      	ldr	r4, [r3, #0]
 80048a2:	237d      	movs	r3, #125	; 0x7d
 80048a4:	4a2d      	ldr	r2, [pc, #180]	; (800495c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048a6:	492f      	ldr	r1, [pc, #188]	; (8004964 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 80048a8:	47a0      	blx	r4
 80048aa:	f00c fbe7 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80048ae:	4604      	mov	r4, r0
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	3358      	adds	r3, #88	; 0x58
 80048b4:	681d      	ldr	r5, [r3, #0]
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f005 fe79 	bl	800a5b4 <_Z10StringFromi>
 80048c2:	f107 0308 	add.w	r3, r7, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f005 fb80 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80048cc:	4606      	mov	r6, r0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4923      	ldr	r1, [pc, #140]	; (8004960 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff f915 	bl	8003b04 <ringBuffer_lookFor>
 80048da:	4602      	mov	r2, r0
 80048dc:	f107 0310 	add.w	r3, r7, #16
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f006 f8e0 	bl	800aaa8 <_Z10StringFromm>
 80048e8:	f107 0310 	add.w	r3, r7, #16
 80048ec:	4618      	mov	r0, r3
 80048ee:	f005 fb6d 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80048f2:	4680      	mov	r8, r0
 80048f4:	f00c fbd2 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048f8:	4603      	mov	r3, r0
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	237d      	movs	r3, #125	; 0x7d
 80048fe:	9302      	str	r3, [sp, #8]
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	2300      	movs	r3, #0
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	4643      	mov	r3, r8
 800490a:	4632      	mov	r2, r6
 800490c:	2101      	movs	r1, #1
 800490e:	4620      	mov	r0, r4
 8004910:	47a8      	blx	r5
 8004912:	f107 0310 	add.w	r3, r7, #16
 8004916:	4618      	mov	r0, r3
 8004918:	f005 fb85 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	4618      	mov	r0, r3
 8004922:	f005 fb80 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8004926:	e012      	b.n	800494e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004928:	f00c fba8 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800492c:	4604      	mov	r4, r0
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	3338      	adds	r3, #56	; 0x38
 8004932:	681d      	ldr	r5, [r3, #0]
 8004934:	f00c fbb2 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004938:	4603      	mov	r3, r0
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	237d      	movs	r3, #125	; 0x7d
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	4620      	mov	r0, r4
 800494c:	47a8      	blx	r5
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004958:	0802032c 	.word	0x0802032c
 800495c:	080200f8 	.word	0x080200f8
 8004960:	08020338 	.word	0x08020338
 8004964:	08020340 	.word	0x08020340

08004968 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff faf2 	bl	8003f68 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004984:	4a03      	ldr	r2, [pc, #12]	; (8004994 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	080230a0 	.word	0x080230a0

08004998 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	4906      	ldr	r1, [pc, #24]	; (80049bc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 80049a4:	2008      	movs	r0, #8
 80049a6:	f002 fbc3 	bl	8007130 <_ZnwjPKci>
 80049aa:	4604      	mov	r4, r0
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff ffdb 	bl	8004968 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 80049b2:	4623      	mov	r3, r4
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}
 80049bc:	080200f8 	.word	0x080200f8

080049c0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00a ff9e 	bl	800f90c <_ZN10UtestShellC1Ev>
 80049d0:	4a03      	ldr	r2, [pc, #12]	; (80049e0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	08022ff4 	.word	0x08022ff4

080049e4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af04      	add	r7, sp, #16
 80049ea:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 80049ec:	f00c fb46 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80049f0:	4604      	mov	r4, r0
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	3338      	adds	r3, #56	; 0x38
 80049f6:	681d      	ldr	r5, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff f897 	bl	8003b30 <ringBuffer_capacity>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461e      	mov	r6, r3
 8004a06:	f00c fb49 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	9302      	str	r3, [sp, #8]
 8004a0e:	2383      	movs	r3, #131	; 0x83
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004a18:	4632      	mov	r2, r6
 8004a1a:	2132      	movs	r1, #50	; 0x32
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	47a8      	blx	r5

}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a28:	080200f8 	.word	0x080200f8
 8004a2c:	080203e4 	.word	0x080203e4

08004a30 <_Z18UART_Transmit_FakePh>:

//char TxString[50];

void UART_Transmit_Fake(uint8_t* data)
{
 8004a30:	b5b0      	push	{r4, r5, r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
 8004a38:	f107 0308 	add.w	r3, r7, #8
 8004a3c:	491c      	ldr	r1, [pc, #112]	; (8004ab0 <_Z18UART_Transmit_FakePh+0x80>)
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 ff39 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 f80c 	bl	8007a68 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004a50:	4604      	mov	r4, r0
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	3318      	adds	r3, #24
 8004a56:	681d      	ldr	r5, [r3, #0]
 8004a58:	f107 0310 	add.w	r3, r7, #16
 8004a5c:	4915      	ldr	r1, [pc, #84]	; (8004ab4 <_Z18UART_Transmit_FakePh+0x84>)
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 ff29 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	47a8      	blx	r5
 8004a6e:	4604      	mov	r4, r0
 8004a70:	f107 0318 	add.w	r3, r7, #24
 8004a74:	4910      	ldr	r1, [pc, #64]	; (8004ab8 <_Z18UART_Transmit_FakePh+0x88>)
 8004a76:	4618      	mov	r0, r3
 8004a78:	f004 ff1d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004a7c:	f107 0318 	add.w	r3, r7, #24
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff fa2e 	bl	8003ee6 <_ZN14MockActualCall13withParameterERK12SimpleStringPv>
 8004a8a:	f107 0318 	add.w	r3, r7, #24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 fac9 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8004a94:	f107 0310 	add.w	r3, r7, #16
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f005 fac4 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8004a9e:	f107 0308 	add.w	r3, r7, #8
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f005 fabf 	bl	800a026 <_ZN12SimpleStringD1Ev>
	//memcpy(TxString,data,sizeof(data));
}
 8004aa8:	bf00      	nop
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab0:	0802041c 	.word	0x0802041c
 8004ab4:	08020420 	.word	0x08020420
 8004ab8:	08020434 	.word	0x08020434

08004abc <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0

	return 1;
 8004ac0:	2301      	movs	r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_Z13UART_ISR_Fakev>:
void UART_ISR_Fake(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0

}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <_Z12getTick_Fakev>:


uint32_t getTick_Fake(void)
{
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
	return 1;
 8004ade:	2301      	movs	r3, #1
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004af8:	4905      	ldr	r1, [pc, #20]	; (8004b10 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004afa:	4806      	ldr	r0, [pc, #24]	; (8004b14 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x28>)
 8004afc:	f7fe ff04 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  UART_ISR_Fake,
				  getTick_Fake);

	}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	08004adb 	.word	0x08004adb
 8004b0c:	08004acd 	.word	0x08004acd
 8004b10:	08004abd 	.word	0x08004abd
 8004b14:	08004a31 	.word	0x08004a31

08004b18 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	490c      	ldr	r1, [pc, #48]	; (8004b58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004b26:	4618      	mov	r0, r3
 8004b28:	f004 fec5 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f002 ff98 	bl	8007a68 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	329c      	adds	r2, #156	; 0x9c
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	4790      	blx	r2
 8004b44:	f107 0308 	add.w	r3, r7, #8
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f005 fa6c 	bl	800a026 <_ZN12SimpleStringD1Ev>
	}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	0802041c 	.word	0x0802041c

08004b5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f00c fab2 	bl	80110d0 <_ZN5UtestC1Ev>
 8004b6c:	4a03      	ldr	r2, [pc, #12]	; (8004b7c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08022fd4 	.word	0x08022fd4

08004b80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f00c faad 	bl	80110f0 <_ZN5UtestD1Ev>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	08022fd4 	.word	0x08022fd4

08004ba4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ffe7 	bl	8004b80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f002 facf 	bl	8007158 <_ZdlPvj>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff ffc4 	bl	8004b5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004bd4:	4a03      	ldr	r2, [pc, #12]	; (8004be4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	08022fb4 	.word	0x08022fb4

08004be8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	22b7      	movs	r2, #183	; 0xb7
 8004bf2:	4906      	ldr	r1, [pc, #24]	; (8004c0c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004bf4:	2004      	movs	r0, #4
 8004bf6:	f002 fa9b 	bl	8007130 <_ZnwjPKci>
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7ff ffe1 	bl	8004bc4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004c02:	4623      	mov	r3, r4
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	080200f8 	.word	0x080200f8

08004c10 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f00a fe76 	bl	800f90c <_ZN10UtestShellC1Ev>
 8004c20:	4a03      	ldr	r2, [pc, #12]	; (8004c30 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	08022f08 	.word	0x08022f08

08004c34 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004c3e:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004c40:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004c48:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004c4a:	4911      	ldr	r1, [pc, #68]	; (8004c90 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004c4c:	f7fe fe5c 	bl	8003908 <ESP_Init>
 8004c50:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  UART_ISR_Fake,
//						  getTick_Fake);

	LONGS_EQUAL(1,result);
 8004c52:	f00c fa13 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8004c56:	4604      	mov	r4, r0
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	3338      	adds	r3, #56	; 0x38
 8004c5c:	681d      	ldr	r5, [r3, #0]
 8004c5e:	f00c fa1d 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c62:	4603      	mov	r3, r0
 8004c64:	9302      	str	r3, [sp, #8]
 8004c66:	23c5      	movs	r3, #197	; 0xc5
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x64>)
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	2101      	movs	r1, #1
 8004c74:	4620      	mov	r0, r4
 8004c76:	47a8      	blx	r5

}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c80:	200005b0 	.word	0x200005b0
 8004c84:	08004a31 	.word	0x08004a31
 8004c88:	08004adb 	.word	0x08004adb
 8004c8c:	08004acd 	.word	0x08004acd
 8004c90:	08004abd 	.word	0x08004abd
 8004c94:	080200f8 	.word	0x080200f8
 8004c98:	0802043c 	.word	0x0802043c

08004c9c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff58 	bl	8004b5c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004cac:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08022ee8 	.word	0x08022ee8

08004cc0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	22c9      	movs	r2, #201	; 0xc9
 8004cca:	4906      	ldr	r1, [pc, #24]	; (8004ce4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004ccc:	2004      	movs	r0, #4
 8004cce:	f002 fa2f 	bl	8007130 <_ZnwjPKci>
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7ff ffe1 	bl	8004c9c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004cda:	4623      	mov	r3, r4
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd90      	pop	{r4, r7, pc}
 8004ce4:	080200f8 	.word	0x080200f8

08004ce8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f00a fe0a 	bl	800f90c <_ZN10UtestShellC1Ev>
 8004cf8:	4a03      	ldr	r2, [pc, #12]	; (8004d08 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	08022e3c 	.word	0x08022e3c

08004d0c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004d0c:	b5b0      	push	{r4, r5, r7, lr}
 8004d0e:	b090      	sub	sp, #64	; 0x40
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"Test");
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	4947      	ldr	r1, [pc, #284]	; (8004e38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f004 fdcb 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f002 fe9e 	bl	8007a68 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	681d      	ldr	r5, [r3, #0]
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4940      	ldr	r1, [pc, #256]	; (8004e3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f004 fdbb 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4619      	mov	r1, r3
 8004d46:	4620      	mov	r0, r4
 8004d48:	47a8      	blx	r5
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	f107 0318 	add.w	r3, r7, #24
 8004d50:	493b      	ldr	r1, [pc, #236]	; (8004e40 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004d52:	4618      	mov	r0, r3
 8004d54:	f004 fdaf 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004d58:	f107 0318 	add.w	r3, r7, #24
 8004d5c:	4a39      	ldr	r2, [pc, #228]	; (8004e44 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7ff f8d3 	bl	8003f0c <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004d66:	f107 0318 	add.w	r3, r7, #24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 f95b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8004d70:	f107 0310 	add.w	r3, r7, #16
 8004d74:	4618      	mov	r0, r3
 8004d76:	f005 f956 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f005 f951 	bl	800a026 <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8004d84:	482f      	ldr	r0, [pc, #188]	; (8004e44 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004d86:	f7fe fdeb 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"AT\r\n");
 8004d8a:	f107 0320 	add.w	r3, r7, #32
 8004d8e:	492a      	ldr	r1, [pc, #168]	; (8004e38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fd90 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004d96:	f107 0320 	add.w	r3, r7, #32
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f002 fe63 	bl	8007a68 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004da2:	4604      	mov	r4, r0
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	681d      	ldr	r5, [r3, #0]
 8004daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dae:	4923      	ldr	r1, [pc, #140]	; (8004e3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f004 fd80 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	47a8      	blx	r5
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dc6:	491e      	ldr	r1, [pc, #120]	; (8004e40 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f004 fd74 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7ff f898 	bl	8003f0c <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004de0:	4618      	mov	r0, r3
 8004de2:	f005 f920 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8004de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dea:	4618      	mov	r0, r3
 8004dec:	f005 f91b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8004df0:	f107 0320 	add.w	r3, r7, #32
 8004df4:	4618      	mov	r0, r3
 8004df6:	f005 f916 	bl	800a026 <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 8004dfa:	4813      	ldr	r0, [pc, #76]	; (8004e48 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004dfc:	f7fe fdb0 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 8004e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e04:	490c      	ldr	r1, [pc, #48]	; (8004e38 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fd55 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8004e0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f002 fe28 	bl	8007a68 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	3294      	adds	r2, #148	; 0x94
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	4790      	blx	r2
 8004e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f005 f8fc 	bl	800a026 <_ZN12SimpleStringD1Ev>

}
 8004e2e:	bf00      	nop
 8004e30:	3740      	adds	r7, #64	; 0x40
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bdb0      	pop	{r4, r5, r7, pc}
 8004e36:	bf00      	nop
 8004e38:	0802041c 	.word	0x0802041c
 8004e3c:	08020420 	.word	0x08020420
 8004e40:	08020434 	.word	0x08020434
 8004e44:	08020324 	.word	0x08020324
 8004e48:	0802045c 	.word	0x0802045c

08004e4c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f00a fda9 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08022e3c 	.word	0x08022e3c

08004e70 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ffe7 	bl	8004e4c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8004e7e:	211c      	movs	r1, #28
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f002 f969 	bl	8007158 <_ZdlPvj>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fe6d 	bl	8004b80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	08022ee8 	.word	0x08022ee8

08004eb4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff ffe7 	bl	8004e90 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8004ec2:	2104      	movs	r1, #4
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f002 f947 	bl	8007158 <_ZdlPvj>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	4a05      	ldr	r2, [pc, #20]	; (8004ef4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f00a fd65 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	08022f08 	.word	0x08022f08

08004ef8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ffe7 	bl	8004ed4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8004f06:	211c      	movs	r1, #28
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f002 f925 	bl	8007158 <_ZdlPvj>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fe29 	bl	8004b80 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	08022fb4 	.word	0x08022fb4

08004f3c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ffe7 	bl	8004f18 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f002 f903 	bl	8007158 <_ZdlPvj>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	4a05      	ldr	r2, [pc, #20]	; (8004f7c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f00a fd21 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	08022ff4 	.word	0x08022ff4

08004f80 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ffe7 	bl	8004f5c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8004f8e:	211c      	movs	r1, #28
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f002 f8e1 	bl	8007158 <_ZdlPvj>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fe ffeb 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	080230a0 	.word	0x080230a0

08004fc4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ffe7 	bl	8004fa0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8004fd2:	2108      	movs	r1, #8
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f002 f8bf 	bl	8007158 <_ZdlPvj>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	4a05      	ldr	r2, [pc, #20]	; (8005004 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f00a fcdd 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	080230c0 	.word	0x080230c0

08005008 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ffe7 	bl	8004fe4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8005016:	211c      	movs	r1, #28
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 f89d 	bl	8007158 <_ZdlPvj>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	4a05      	ldr	r2, [pc, #20]	; (8005048 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe ffa7 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	0802316c 	.word	0x0802316c

0800504c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff ffe7 	bl	8005028 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 800505a:	2108      	movs	r1, #8
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f002 f87b 	bl	8007158 <_ZdlPvj>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	4a05      	ldr	r2, [pc, #20]	; (800508c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	f00a fc99 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	0802318c 	.word	0x0802318c

08005090 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ffe7 	bl	800506c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800509e:	211c      	movs	r1, #28
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f002 f859 	bl	8007158 <_ZdlPvj>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe ff63 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	08023238 	.word	0x08023238

080050d4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ffe7 	bl	80050b0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 80050e2:	2108      	movs	r1, #8
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f002 f837 	bl	8007158 <_ZdlPvj>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	f00a fc55 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	08023258 	.word	0x08023258

08005118 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ffe7 	bl	80050f4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8005126:	211c      	movs	r1, #28
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f002 f815 	bl	8007158 <_ZdlPvj>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	4a05      	ldr	r2, [pc, #20]	; (8005158 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe ff1f 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08023304 	.word	0x08023304

0800515c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ffe7 	bl	8005138 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 800516a:	2108      	movs	r1, #8
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fff3 	bl	8007158 <_ZdlPvj>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	4a05      	ldr	r2, [pc, #20]	; (800519c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4618      	mov	r0, r3
 800518e:	f00a fc11 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	08023324 	.word	0x08023324

080051a0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ffe7 	bl	800517c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 80051ae:	211c      	movs	r1, #28
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 ffd1 	bl	8007158 <_ZdlPvj>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	4a05      	ldr	r2, [pc, #20]	; (80051e0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fedb 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	080233d0 	.word	0x080233d0

080051e4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ffe7 	bl	80051c0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80051f2:	2108      	movs	r1, #8
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 ffaf 	bl	8007158 <_ZdlPvj>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	4a05      	ldr	r2, [pc, #20]	; (8005224 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4618      	mov	r0, r3
 8005216:	f00a fbcd 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	080233f0 	.word	0x080233f0

08005228 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ffe7 	bl	8005204 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8005236:	211c      	movs	r1, #28
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 ff8d 	bl	8007158 <_ZdlPvj>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fe97 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	0802349c 	.word	0x0802349c

0800526c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ffe7 	bl	8005248 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 800527a:	2108      	movs	r1, #8
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 ff6b 	bl	8007158 <_ZdlPvj>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	4a05      	ldr	r2, [pc, #20]	; (80052ac <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4618      	mov	r0, r3
 800529e:	f00a fb89 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	080234bc 	.word	0x080234bc

080052b0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ffe7 	bl	800528c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 80052be:	211c      	movs	r1, #28
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 ff49 	bl	8007158 <_ZdlPvj>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fe53 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	08023568 	.word	0x08023568

080052f4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ffe7 	bl	80052d0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8005302:	2108      	movs	r1, #8
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 ff27 	bl	8007158 <_ZdlPvj>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	4a05      	ldr	r2, [pc, #20]	; (8005334 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4618      	mov	r0, r3
 8005326:	f00a fb45 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08023588 	.word	0x08023588

08005338 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ffe7 	bl	8005314 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8005346:	211c      	movs	r1, #28
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 ff05 	bl	8007158 <_ZdlPvj>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	4a05      	ldr	r2, [pc, #20]	; (8005378 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fe0f 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08023634 	.word	0x08023634

0800537c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ffe7 	bl	8005358 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800538a:	2108      	movs	r1, #8
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 fee3 	bl	8007158 <_ZdlPvj>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	4a05      	ldr	r2, [pc, #20]	; (80053bc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f00a fb01 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	08023654 	.word	0x08023654

080053c0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ffe7 	bl	800539c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 80053ce:	211c      	movs	r1, #28
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 fec1 	bl	8007158 <_ZdlPvj>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	4a05      	ldr	r2, [pc, #20]	; (8005400 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fdcb 	bl	8003f8c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08023700 	.word	0x08023700

08005404 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ffe7 	bl	80053e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8005412:	2108      	movs	r1, #8
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fe9f 	bl	8007158 <_ZdlPvj>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af02      	add	r7, sp, #8
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b01      	cmp	r3, #1
 8005432:	f040 8095 	bne.w	8005560 <_Z41__static_initialization_and_destruction_0ii+0x13c>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800543c:	4293      	cmp	r3, r2
 800543e:	f040 808f 	bne.w	8005560 <_Z41__static_initialization_and_destruction_0ii+0x13c>
TEST(RingBuffer_Test_Group, InitTest)
 8005442:	486e      	ldr	r0, [pc, #440]	; (80055fc <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8005444:	f7fe fdf0 	bl	8004028 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8005448:	2324      	movs	r3, #36	; 0x24
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	4b6c      	ldr	r3, [pc, #432]	; (8005604 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8005452:	4a6d      	ldr	r2, [pc, #436]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005454:	4969      	ldr	r1, [pc, #420]	; (80055fc <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8005456:	486d      	ldr	r0, [pc, #436]	; (800560c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005458:	f00c f8a8 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 800545c:	486c      	ldr	r0, [pc, #432]	; (8005610 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800545e:	f7fe fe97 	bl	8004190 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8005462:	232e      	movs	r3, #46	; 0x2e
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	4b66      	ldr	r3, [pc, #408]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	4b6a      	ldr	r3, [pc, #424]	; (8005614 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800546c:	4a66      	ldr	r2, [pc, #408]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800546e:	4968      	ldr	r1, [pc, #416]	; (8005610 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8005470:	4869      	ldr	r0, [pc, #420]	; (8005618 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8005472:	f00c f89b 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005476:	4869      	ldr	r0, [pc, #420]	; (800561c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8005478:	f7fe ff14 	bl	80042a4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 800547c:	2338      	movs	r3, #56	; 0x38
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	4b66      	ldr	r3, [pc, #408]	; (8005620 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8005486:	4a60      	ldr	r2, [pc, #384]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005488:	4964      	ldr	r1, [pc, #400]	; (800561c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800548a:	4866      	ldr	r0, [pc, #408]	; (8005624 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800548c:	f00c f88e 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8005490:	4865      	ldr	r0, [pc, #404]	; (8005628 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8005492:	f7fe ff8f 	bl	80043b4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8005496:	2343      	movs	r3, #67	; 0x43
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	4b59      	ldr	r3, [pc, #356]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	4b63      	ldr	r3, [pc, #396]	; (800562c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80054a0:	4a59      	ldr	r2, [pc, #356]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80054a2:	4961      	ldr	r1, [pc, #388]	; (8005628 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80054a4:	4862      	ldr	r0, [pc, #392]	; (8005630 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80054a6:	f00c f881 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80054aa:	4862      	ldr	r0, [pc, #392]	; (8005634 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80054ac:	f7fe ffee 	bl	800448c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 80054b0:	234c      	movs	r3, #76	; 0x4c
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	4b52      	ldr	r3, [pc, #328]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80054ba:	4a53      	ldr	r2, [pc, #332]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80054bc:	495d      	ldr	r1, [pc, #372]	; (8005634 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80054be:	485f      	ldr	r0, [pc, #380]	; (800563c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80054c0:	f00c f874 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80054c4:	485e      	ldr	r0, [pc, #376]	; (8005640 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80054c6:	f7ff f86d 	bl	80045a4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 80054ca:	235c      	movs	r3, #92	; 0x5c
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	4b4c      	ldr	r3, [pc, #304]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4b5c      	ldr	r3, [pc, #368]	; (8005644 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80054d4:	4a4c      	ldr	r2, [pc, #304]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80054d6:	495a      	ldr	r1, [pc, #360]	; (8005640 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80054d8:	485b      	ldr	r0, [pc, #364]	; (8005648 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80054da:	f00c f867 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80054de:	485b      	ldr	r0, [pc, #364]	; (800564c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80054e0:	f7ff f91e 	bl	8004720 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80054e4:	2371      	movs	r3, #113	; 0x71
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	4b45      	ldr	r3, [pc, #276]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4b58      	ldr	r3, [pc, #352]	; (8005650 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80054ee:	4a46      	ldr	r2, [pc, #280]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80054f0:	4956      	ldr	r1, [pc, #344]	; (800564c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80054f2:	4858      	ldr	r0, [pc, #352]	; (8005654 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80054f4:	f00c f85a 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80054f8:	4857      	ldr	r0, [pc, #348]	; (8005658 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80054fa:	f7ff f977 	bl	80047ec <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80054fe:	2378      	movs	r3, #120	; 0x78
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	4b3f      	ldr	r3, [pc, #252]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	4b55      	ldr	r3, [pc, #340]	; (800565c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005508:	4a3f      	ldr	r2, [pc, #252]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800550a:	4953      	ldr	r1, [pc, #332]	; (8005658 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800550c:	4854      	ldr	r0, [pc, #336]	; (8005660 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800550e:	f00c f84d 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005512:	4854      	ldr	r0, [pc, #336]	; (8005664 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005514:	f7ff fa54 	bl	80049c0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	4b38      	ldr	r3, [pc, #224]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4b51      	ldr	r3, [pc, #324]	; (8005668 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005522:	4a39      	ldr	r2, [pc, #228]	; (8005608 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005524:	494f      	ldr	r1, [pc, #316]	; (8005664 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005526:	4851      	ldr	r0, [pc, #324]	; (800566c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005528:	f00c f840 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800552c:	4850      	ldr	r0, [pc, #320]	; (8005670 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800552e:	f7ff fb6f 	bl	8004c10 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8005532:	23b7      	movs	r3, #183	; 0xb7
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	4b32      	ldr	r3, [pc, #200]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	4b4e      	ldr	r3, [pc, #312]	; (8005674 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800553c:	4a4e      	ldr	r2, [pc, #312]	; (8005678 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 800553e:	494c      	ldr	r1, [pc, #304]	; (8005670 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005540:	484e      	ldr	r0, [pc, #312]	; (800567c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005542:	f00c f833 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005546:	484e      	ldr	r0, [pc, #312]	; (8005680 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005548:	f7ff fbce 	bl	8004ce8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 800554c:	23c9      	movs	r3, #201	; 0xc9
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4b4b      	ldr	r3, [pc, #300]	; (8005684 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005556:	4a48      	ldr	r2, [pc, #288]	; (8005678 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005558:	4949      	ldr	r1, [pc, #292]	; (8005680 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 800555a:	484b      	ldr	r0, [pc, #300]	; (8005688 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 800555c:	f00c f826 	bl	80115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d146      	bne.n	80055f4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800556c:	4293      	cmp	r3, r2
 800556e:	d141      	bne.n	80055f4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8005570:	4845      	ldr	r0, [pc, #276]	; (8005688 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005572:	f00c f845 	bl	8011600 <_ZN13TestInstallerD1Ev>
 8005576:	4842      	ldr	r0, [pc, #264]	; (8005680 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005578:	f7ff fc68 	bl	8004e4c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800557c:	483f      	ldr	r0, [pc, #252]	; (800567c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 800557e:	f00c f83f 	bl	8011600 <_ZN13TestInstallerD1Ev>
 8005582:	483b      	ldr	r0, [pc, #236]	; (8005670 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005584:	f7ff fca6 	bl	8004ed4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005588:	4838      	ldr	r0, [pc, #224]	; (800566c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800558a:	f00c f839 	bl	8011600 <_ZN13TestInstallerD1Ev>
 800558e:	4835      	ldr	r0, [pc, #212]	; (8005664 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005590:	f7ff fce4 	bl	8004f5c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8005594:	4832      	ldr	r0, [pc, #200]	; (8005660 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8005596:	f00c f833 	bl	8011600 <_ZN13TestInstallerD1Ev>
 800559a:	482f      	ldr	r0, [pc, #188]	; (8005658 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800559c:	f7ff fd22 	bl	8004fe4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80055a0:	482c      	ldr	r0, [pc, #176]	; (8005654 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80055a2:	f00c f82d 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055a6:	4829      	ldr	r0, [pc, #164]	; (800564c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80055a8:	f7ff fd60 	bl	800506c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80055ac:	4826      	ldr	r0, [pc, #152]	; (8005648 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80055ae:	f00c f827 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055b2:	4823      	ldr	r0, [pc, #140]	; (8005640 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80055b4:	f7ff fd9e 	bl	80050f4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80055b8:	4820      	ldr	r0, [pc, #128]	; (800563c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80055ba:	f00c f821 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055be:	481d      	ldr	r0, [pc, #116]	; (8005634 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80055c0:	f7ff fddc 	bl	800517c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 80055c4:	481a      	ldr	r0, [pc, #104]	; (8005630 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80055c6:	f00c f81b 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055ca:	4817      	ldr	r0, [pc, #92]	; (8005628 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80055cc:	f7ff fe1a 	bl	8005204 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80055d0:	4814      	ldr	r0, [pc, #80]	; (8005624 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80055d2:	f00c f815 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055d6:	4811      	ldr	r0, [pc, #68]	; (800561c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80055d8:	f7ff fe58 	bl	800528c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80055dc:	480e      	ldr	r0, [pc, #56]	; (8005618 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80055de:	f00c f80f 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055e2:	480b      	ldr	r0, [pc, #44]	; (8005610 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80055e4:	f7ff fe96 	bl	8005314 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80055e8:	4808      	ldr	r0, [pc, #32]	; (800560c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80055ea:	f00c f809 	bl	8011600 <_ZN13TestInstallerD1Ev>
 80055ee:	4803      	ldr	r0, [pc, #12]	; (80055fc <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80055f0:	f7ff fed4 	bl	800539c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000490 	.word	0x20000490
 8005600:	080200f8 	.word	0x080200f8
 8005604:	08020464 	.word	0x08020464
 8005608:	08020470 	.word	0x08020470
 800560c:	200004ac 	.word	0x200004ac
 8005610:	200004b0 	.word	0x200004b0
 8005614:	08020488 	.word	0x08020488
 8005618:	200004cc 	.word	0x200004cc
 800561c:	200004d0 	.word	0x200004d0
 8005620:	08020498 	.word	0x08020498
 8005624:	200004ec 	.word	0x200004ec
 8005628:	200004f0 	.word	0x200004f0
 800562c:	080204ac 	.word	0x080204ac
 8005630:	2000050c 	.word	0x2000050c
 8005634:	20000510 	.word	0x20000510
 8005638:	080204bc 	.word	0x080204bc
 800563c:	2000052c 	.word	0x2000052c
 8005640:	20000530 	.word	0x20000530
 8005644:	080204d4 	.word	0x080204d4
 8005648:	2000054c 	.word	0x2000054c
 800564c:	20000550 	.word	0x20000550
 8005650:	080204e4 	.word	0x080204e4
 8005654:	2000056c 	.word	0x2000056c
 8005658:	20000570 	.word	0x20000570
 800565c:	080204f4 	.word	0x080204f4
 8005660:	2000058c 	.word	0x2000058c
 8005664:	20000590 	.word	0x20000590
 8005668:	08020500 	.word	0x08020500
 800566c:	200005ac 	.word	0x200005ac
 8005670:	200005b4 	.word	0x200005b4
 8005674:	08020510 	.word	0x08020510
 8005678:	08020520 	.word	0x08020520
 800567c:	200005d0 	.word	0x200005d0
 8005680:	200005d4 	.word	0x200005d4
 8005684:	08020538 	.word	0x08020538
 8005688:	200005f0 	.word	0x200005f0

0800568c <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
 8005690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005694:	2001      	movs	r0, #1
 8005696:	f7ff fec5 	bl	8005424 <_Z41__static_initialization_and_destruction_0ii>
 800569a:	bd80      	pop	{r7, pc}

0800569c <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
 80056a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80056a4:	2000      	movs	r0, #0
 80056a6:	f7ff febd 	bl	8005424 <_Z41__static_initialization_and_destruction_0ii>
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
    }
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
    }
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
    }
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ffed 	bl	80056dc <_ZNK10TestResult15getFailureCountEv>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <_ZNK10TestResult9isFailureEv+0x2a>
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ffcf 	bl	80056ac <_ZNK10TestResult11getRunCountEv>
 800570e:	4604      	mov	r4, r0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff ffd7 	bl	80056c4 <_ZNK10TestResult15getIgnoredCountEv>
 8005716:	4603      	mov	r3, r0
 8005718:	4423      	add	r3, r4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <_ZNK10TestResult9isFailureEv+0x2e>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <_ZNK10TestResult9isFailureEv+0x30>
 8005722:	2300      	movs	r3, #0
    }
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bd90      	pop	{r4, r7, pc}

0800572c <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
    {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4618      	mov	r0, r3
 8005738:	f007 fde6 	bl	800d308 <_ZN10TestOutputC1Ev>
 800573c:	4a03      	ldr	r2, [pc, #12]	; (800574c <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
    }
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	08023db4 	.word	0x08023db4

08005750 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
    {
 8005758:	4a05      	ldr	r2, [pc, #20]	; (8005770 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	f007 fdef 	bl	800d344 <_ZN10TestOutputD1Ev>
    }
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	08023db4 	.word	0x08023db4

08005774 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
    }
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ffe7 	bl	8005750 <_ZN17ConsoleTestOutputD1Ev>
 8005782:	2110      	movs	r1, #16
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fce7 	bl	8007158 <_ZdlPvj>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b098      	sub	sp, #96	; 0x60
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
    int result = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 80057a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ffc0 	bl	800572c <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80057ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057b0:	4935      	ldr	r1, [pc, #212]	; (8005888 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80057b2:	4618      	mov	r0, r3
 80057b4:	f004 f87f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80057b8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80057bc:	f107 0318 	add.w	r3, r7, #24
 80057c0:	2200      	movs	r2, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 ff6a 	bl	800769c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80057c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057cc:	4618      	mov	r0, r3
 80057ce:	f004 fc2a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80057d2:	f107 0318 	add.w	r3, r7, #24
 80057d6:	2101      	movs	r1, #1
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 ff2f 	bl	800763c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80057de:	f009 fb21 	bl	800ee24 <_ZN12TestRegistry18getCurrentRegistryEv>
 80057e2:	4603      	mov	r3, r0
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	3234      	adds	r2, #52	; 0x34
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	f107 0118 	add.w	r1, r7, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80057f2:	f009 fb17 	bl	800ee24 <_ZN12TestRegistry18getCurrentRegistryEv>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f107 0008 	add.w	r0, r7, #8
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	f000 f844 	bl	800588c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8005804:	f107 0308 	add.w	r3, r7, #8
 8005808:	4618      	mov	r0, r3
 800580a:	f000 f899 	bl	8005940 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800580e:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8005810:	f107 0308 	add.w	r3, r7, #8
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f863 	bl	80058e0 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800581a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8005820:	f107 0318 	add.w	r3, r7, #24
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f002 f83a 	bl	80078a0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 800582c:	4602      	mov	r2, r0
 800582e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f007 fe27 	bl	800d488 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800583a:	f009 faf3 	bl	800ee24 <_ZN12TestRegistry18getCurrentRegistryEv>
 800583e:	4604      	mov	r4, r0
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	3344      	adds	r3, #68	; 0x44
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800584a:	490f      	ldr	r1, [pc, #60]	; (8005888 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800584c:	4618      	mov	r0, r3
 800584e:	f004 f832 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8005852:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005856:	4619      	mov	r1, r3
 8005858:	4620      	mov	r0, r4
 800585a:	47a8      	blx	r5
 800585c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005860:	4618      	mov	r0, r3
 8005862:	f004 fbe0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return result;
 8005866:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8005868:	f107 0318 	add.w	r3, r7, #24
 800586c:	4618      	mov	r0, r3
 800586e:	f001 ff4d 	bl	800770c <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8005872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ff6a 	bl	8005750 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 800587c:	4623      	mov	r3, r4
}
 800587e:	4618      	mov	r0, r3
 8005880:	3760      	adds	r7, #96	; 0x60
 8005882:	46bd      	mov	sp, r7
 8005884:	bdb0      	pop	{r4, r5, r7, pc}
 8005886:	bf00      	nop
 8005888:	08020550 	.word	0x08020550

0800588c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800589a:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 80058b2:	2241      	movs	r2, #65	; 0x41
 80058b4:	4909      	ldr	r1, [pc, #36]	; (80058dc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 80058b6:	2038      	movs	r0, #56	; 0x38
 80058b8:	f001 fc3a 	bl	8007130 <_ZnwjPKci>
 80058bc:	4604      	mov	r4, r0
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4620      	mov	r0, r4
 80058c4:	f00c f84a 	bl	801195c <_ZN20CommandLineArgumentsC1EiPKPKc>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	609c      	str	r4, [r3, #8]
}
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	08023740 	.word	0x08023740
 80058dc:	08020564 	.word	0x08020564

080058e0 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	4a0c      	ldr	r2, [pc, #48]	; (800591c <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	3204      	adds	r2, #4
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	4790      	blx	r2
    delete output_;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	3204      	adds	r2, #4
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	4790      	blx	r2
}
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	08023740 	.word	0x08023740

08005920 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
}
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff ffd9 	bl	80058e0 <_ZN21CommandLineTestRunnerD1Ev>
 800592e:	2110      	movs	r1, #16
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fc11 	bl	8007158 <_ZdlPvj>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8005940:	b5b0      	push	{r4, r5, r7, lr}
 8005942:	b08c      	sub	sp, #48	; 0x30
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8005948:	2301      	movs	r3, #1
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4929      	ldr	r1, [pc, #164]	; (80059f8 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8005952:	4618      	mov	r0, r3
 8005954:	f003 ffaf 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8005958:	f107 021c 	add.w	r2, r7, #28
 800595c:	f107 0308 	add.w	r3, r7, #8
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f008 fe1c 	bl	800e5a0 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8005968:	f107 031c 	add.w	r3, r7, #28
 800596c:	4618      	mov	r0, r3
 800596e:	f004 fb5a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3334      	adds	r3, #52	; 0x34
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f107 0108 	add.w	r1, r7, #8
 8005984:	4610      	mov	r0, r2
 8005986:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	333c      	adds	r3, #60	; 0x3c
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4610      	mov	r0, r2
 8005998:	4798      	blx	r3
 800599a:	4603      	mov	r3, r0
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa3e 	bl	8005e20 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8ac 	bl	8005b08 <_ZN21CommandLineTestRunner11runAllTestsEv>
 80059b0:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68dd      	ldr	r5, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3344      	adds	r3, #68	; 0x44
 80059be:	681c      	ldr	r4, [r3, #0]
 80059c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059c4:	490c      	ldr	r1, [pc, #48]	; (80059f8 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	f003 ff75 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80059cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d0:	4619      	mov	r1, r3
 80059d2:	4628      	mov	r0, r5
 80059d4:	47a0      	blx	r4
 80059d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059da:	4618      	mov	r0, r3
 80059dc:	f004 fb23 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return testResult;
 80059e0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 faaa 	bl	8005f40 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80059ec:	4623      	mov	r3, r4
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3730      	adds	r7, #48	; 0x30
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	08020588 	.word	0x08020588

080059fc <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80059fc:	b5b0      	push	{r4, r5, r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68dd      	ldr	r5, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3330      	adds	r3, #48	; 0x30
 8005a10:	681c      	ldr	r4, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f00c fce0 	bl	80123dc <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4628      	mov	r0, r5
 8005a22:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68dd      	ldr	r5, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	332c      	adds	r3, #44	; 0x2c
 8005a30:	681c      	ldr	r4, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f00c fcdc 	bl	80123f4 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4628      	mov	r0, r5
 8005a42:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f00c fc2b 	bl	80122a4 <_ZNK20CommandLineArguments9isVerboseEv>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3320      	adds	r3, #32
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2101      	movs	r1, #1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f00c fc25 	bl	80122bc <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3320      	adds	r3, #32
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2102      	movs	r1, #2
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f00c fc1f 	bl	80122d4 <_ZNK20CommandLineArguments7isColorEv>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f00c fc4a 	bl	801234c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3360      	adds	r3, #96	; 0x60
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f00c fc2d 	bl	8012334 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f009 fa19 	bl	800ef1c <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f00c fc50 	bl	8012394 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8005afa:	f00b fadb 	bl	80110b4 <_ZN10UtestShell14setCrashOnFailEv>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b08 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8005b08:	b5b0      	push	{r4, r5, r7, lr}
 8005b0a:	b094      	sub	sp, #80	; 0x50
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ff73 	bl	80059fc <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f00c fc1c 	bl	8012364 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8005b2c:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f00c fbda 	bl	80122ec <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d019      	beq.n	8005b72 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f009 fbaf 	bl	800f2ac <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3320      	adds	r3, #32
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f107 0108 	add.w	r1, r7, #8
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
        return 0;
 8005b64:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f009 fbd6 	bl	800f31c <_ZN10TestResultD1Ev>
 8005b70:	e0e1      	b.n	8005d36 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f00c fbc4 	bl	8012304 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d019      	beq.n	8005bb6 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f009 fb8d 	bl	800f2ac <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3324      	adds	r3, #36	; 0x24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f107 0108 	add.w	r1, r7, #8
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
        return 0;
 8005ba8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005baa:	f107 0308 	add.w	r3, r7, #8
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f009 fbb4 	bl	800f31c <_ZN10TestResultD1Ev>
 8005bb4:	e0bf      	b.n	8005d36 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f00c fbae 	bl	801231c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d019      	beq.n	8005bfa <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	f107 0308 	add.w	r3, r7, #8
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f009 fb6b 	bl	800f2ac <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3328      	adds	r3, #40	; 0x28
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
        return 0;
 8005bec:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f009 fb92 	bl	800f31c <_ZN10TestResultD1Ev>
 8005bf8:	e09d      	b.n	8005d36 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f00c fbbc 	bl	801237c <_ZNK20CommandLineArguments11isReversingEv>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d008      	beq.n	8005c1c <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	331c      	adds	r3, #28
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3

    if (arguments_->isShuffling())
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f00c fbc3 	bl	80123ac <_ZNK20CommandLineArguments11isShufflingEv>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d023      	beq.n	8005c74 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	332c      	adds	r3, #44	; 0x2c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4941      	ldr	r1, [pc, #260]	; (8005d40 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685d      	ldr	r5, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3334      	adds	r3, #52	; 0x34
 8005c4c:	681c      	ldr	r4, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f00c fbb6 	bl	80123c4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47a0      	blx	r4
        output_->print("\n");
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	332c      	adds	r3, #44	; 0x2c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4935      	ldr	r1, [pc, #212]	; (8005d44 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8005c70:	4610      	mov	r0, r2
 8005c72:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	bf8c      	ite	hi
 8005c80:	2301      	movhi	r3, #1
 8005c82:	2300      	movls	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d04e      	beq.n	8005d28 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f00c fb8c 	bl	80123ac <_ZNK20CommandLineArguments11isShufflingEv>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00f      	beq.n	8005cba <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68dd      	ldr	r5, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3318      	adds	r3, #24
 8005ca6:	681c      	ldr	r4, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f00c fb89 	bl	80123c4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6858      	ldr	r0, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3340      	adds	r3, #64	; 0x40
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005ccc:	4798      	blx	r3
        TestResult tr(*output_);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f009 fae7 	bl	800f2ac <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f107 0108 	add.w	r1, r7, #8
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fcef 	bl	80056dc <_ZNK10TestResult15getFailureCountEv>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d02:	4413      	add	r3, r2
 8005d04:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8005d06:	f107 0308 	add.w	r3, r7, #8
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fcf2 	bl	80056f4 <_ZNK10TestResult9isFailureEv>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8005d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d18:	3301      	adds	r3, #1
 8005d1a:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8005d1c:	f107 0308 	add.w	r3, r7, #8
 8005d20:	4618      	mov	r0, r3
 8005d22:	f009 fafb 	bl	800f31c <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8005d26:	e7a5      	b.n	8005c74 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8005d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8005d2e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8005d30:	e000      	b.n	8005d34 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8005d32:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005d34:	bf00      	nop
 8005d36:	4623      	mov	r3, r4
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3750      	adds	r7, #80	; 0x50
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d40:	0802059c 	.word	0x0802059c
 8005d44:	080205c8 	.word	0x080205c8

08005d48 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8005d50:	229d      	movs	r2, #157	; 0x9d
 8005d52:	4906      	ldr	r1, [pc, #24]	; (8005d6c <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8005d54:	201c      	movs	r0, #28
 8005d56:	f001 f9eb 	bl	8007130 <_ZnwjPKci>
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f005 f955 	bl	800b00c <_ZN18TeamCityTestOutputC1Ev>
 8005d62:	4623      	mov	r3, r4
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd90      	pop	{r4, r7, pc}
 8005d6c:	08020564 	.word	0x08020564

08005d70 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8005d7a:	22a2      	movs	r2, #162	; 0xa2
 8005d7c:	490a      	ldr	r1, [pc, #40]	; (8005da8 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8005d7e:	2014      	movs	r0, #20
 8005d80:	f001 f9d6 	bl	8007130 <_ZnwjPKci>
 8005d84:	4604      	mov	r4, r0
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 f980 	bl	800608c <_ZN15JUnitTestOutputC1Ev>
 8005d8c:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fbb2 	bl	8006500 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	08020564 	.word	0x08020564

08005dac <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8005db4:	22ab      	movs	r2, #171	; 0xab
 8005db6:	4906      	ldr	r1, [pc, #24]	; (8005dd0 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8005db8:	2010      	movs	r0, #16
 8005dba:	f001 f9b9 	bl	8007130 <_ZnwjPKci>
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff fcb3 	bl	800572c <_ZN17ConsoleTestOutputC1Ev>
 8005dc6:	4623      	mov	r3, r4
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd90      	pop	{r4, r7, pc}
 8005dd0:	08020564 	.word	0x08020564

08005dd4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8005de0:	22b0      	movs	r2, #176	; 0xb0
 8005de2:	490e      	ldr	r1, [pc, #56]	; (8005e1c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8005de4:	2018      	movs	r0, #24
 8005de6:	f001 f9a3 	bl	8007130 <_ZnwjPKci>
 8005dea:	4604      	mov	r4, r0
 8005dec:	4620      	mov	r0, r4
 8005dee:	f007 ff83 	bl	800dcf8 <_ZN19CompositeTestOutputC1Ev>
 8005df2:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	335c      	adds	r3, #92	; 0x5c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	6978      	ldr	r0, [r7, #20]
 8005e00:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3360      	adds	r3, #96	; 0x60
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	6978      	ldr	r0, [r7, #20]
 8005e0e:	4798      	blx	r3
  return composite;
 8005e10:	697b      	ldr	r3, [r7, #20]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	08020564 	.word	0x08020564

08005e20 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8005e20:	b5b0      	push	{r4, r5, r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f00b fe4f 	bl	8011ad4 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f083 0301 	eor.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d029      	beq.n	8005e96 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3310      	adds	r3, #16
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
 8005e4e:	4602      	mov	r2, r0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685d      	ldr	r5, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	332c      	adds	r3, #44	; 0x2c
 8005e60:	681c      	ldr	r4, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00c fa10 	bl	801228c <_ZNK20CommandLineArguments8needHelpEv>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f00c f9fa 	bl	8012270 <_ZNK20CommandLineArguments4helpEv>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	e005      	b.n	8005e8c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f00c f9e5 	bl	8012254 <_ZNK20CommandLineArguments5usageEv>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47a0      	blx	r4
    return false;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e050      	b.n	8005f38 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f00d f84c 	bl	8012f38 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d02c      	beq.n	8005f00 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	681c      	ldr	r4, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f00d f864 	bl	8012f80 <_ZNK20CommandLineArguments14getPackageNameEv>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	47a0      	blx	r4
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00c f9ea 	bl	80122a4 <_ZNK20CommandLineArguments9isVerboseEv>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d02f      	beq.n	8005f36 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3314      	adds	r3, #20
 8005edc:	681c      	ldr	r4, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685d      	ldr	r5, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3310      	adds	r3, #16
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	47a0      	blx	r4
 8005ef8:	4602      	mov	r2, r0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	e01a      	b.n	8005f36 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f00d f829 	bl	8012f5c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	e008      	b.n	8005f36 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3310      	adds	r3, #16
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	4602      	mov	r2, r0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	605a      	str	r2, [r3, #4]
  return true;
 8005f36:	2301      	movs	r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bdb0      	pop	{r4, r5, r7, pc}

08005f40 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	4a05      	ldr	r2, [pc, #20]	; (8005f60 <_ZN16SetPointerPluginD1Ev+0x20>)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f008 f9e7 	bl	800e324 <_ZN10TestPluginD1Ev>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	08023ec0 	.word	0x08023ec0

08005f64 <_ZN16SetPointerPluginD0Ev>:
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ffe7 	bl	8005f40 <_ZN16SetPointerPluginD1Ev>
 8005f72:	2114      	movs	r1, #20
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 f8ef 	bl	8007158 <_ZdlPvj>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
    }
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4910      	ldr	r1, [pc, #64]	; (8005fe8 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 fc84 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	741a      	strb	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	4908      	ldr	r1, [pc, #32]	; (8005fe8 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f003 fc75 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61da      	str	r2, [r3, #28]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	621a      	str	r2, [r3, #32]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	080205cc 	.word	0x080205cc

08005fec <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	611a      	str	r2, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3314      	adds	r3, #20
 8006016:	4907      	ldr	r1, [pc, #28]	; (8006034 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8006018:	4618      	mov	r0, r3
 800601a:	f003 fc4c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	61da      	str	r2, [r3, #28]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	621a      	str	r2, [r3, #32]
    {
    }
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	080205cc 	.word	0x080205cc

08006038 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3314      	adds	r3, #20
 8006044:	4618      	mov	r0, r3
 8006046:	f003 ffee 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff ffc4 	bl	8005fec <_ZN20JUnitTestGroupResultC1Ev>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3328      	adds	r3, #40	; 0x28
 8006068:	4907      	ldr	r1, [pc, #28]	; (8006088 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800606a:	4618      	mov	r0, r3
 800606c:	f003 fc23 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3330      	adds	r3, #48	; 0x30
 8006074:	4904      	ldr	r1, [pc, #16]	; (8006088 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8006076:	4618      	mov	r0, r3
 8006078:	f003 fc1d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	080205cc 	.word	0x080205cc

0800608c <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4618      	mov	r0, r3
 8006098:	f007 f936 	bl	800d308 <_ZN10TestOutputC1Ev>
 800609c:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	224d      	movs	r2, #77	; 0x4d
 80060a4:	4908      	ldr	r1, [pc, #32]	; (80060c8 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80060a6:	2038      	movs	r0, #56	; 0x38
 80060a8:	f001 f842 	bl	8007130 <_ZnwjPKci>
 80060ac:	4604      	mov	r4, r0
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff ffd0 	bl	8006054 <_ZN19JUnitTestOutputImplC1Ev>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	611c      	str	r4, [r3, #16]
{
}
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd90      	pop	{r4, r7, pc}
 80060c2:	bf00      	nop
 80060c4:	08023760 	.word	0x08023760
 80060c8:	080205d0 	.word	0x080205d0

080060cc <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3330      	adds	r3, #48	; 0x30
 80060d8:	4618      	mov	r0, r3
 80060da:	f003 ffa4 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3328      	adds	r3, #40	; 0x28
 80060e2:	4618      	mov	r0, r3
 80060e4:	f003 ff9f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff ffa4 	bl	8006038 <_ZN20JUnitTestGroupResultD1Ev>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	4a0c      	ldr	r2, [pc, #48]	; (8006138 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f838 	bl	8006180 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691c      	ldr	r4, [r3, #16]
 8006114:	2c00      	cmp	r4, #0
 8006116:	d006      	beq.n	8006126 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8006118:	4620      	mov	r0, r4
 800611a:	f7ff ffd7 	bl	80060cc <_ZN19JUnitTestOutputImplD1Ev>
 800611e:	2138      	movs	r1, #56	; 0x38
 8006120:	4620      	mov	r0, r4
 8006122:	f001 f819 	bl	8007158 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4618      	mov	r0, r3
 800612a:	f007 f90b 	bl	800d344 <_ZN10TestOutputD1Ev>
}
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}
 8006138:	08023760 	.word	0x08023760

0800613c <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
}
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ffd9 	bl	80060fc <_ZN15JUnitTestOutputD1Ev>
 800614a:	2114      	movs	r1, #20
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f803 	bl	8007158 <_ZdlPvj>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3314      	adds	r3, #20
 8006168:	4618      	mov	r0, r3
 800616a:	f003 ff5c 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4618      	mov	r0, r3
 8006172:	f003 ff58 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f103 0414 	add.w	r4, r3, #20
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	491d      	ldr	r1, [pc, #116]	; (800621c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80061a6:	4618      	mov	r0, r3
 80061a8:	f003 fb85 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80061ac:	f107 0308 	add.w	r3, r7, #8
 80061b0:	4619      	mov	r1, r3
 80061b2:	4620      	mov	r0, r4
 80061b4:	f003 fbeb 	bl	800998e <_ZN12SimpleStringaSERKS_>
 80061b8:	f107 0308 	add.w	r3, r7, #8
 80061bc:	4618      	mov	r0, r3
 80061be:	f003 ff32 	bl	800a026 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	617b      	str	r3, [r7, #20]
    while (cur) {
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d018      	beq.n	8006202 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	3204      	adds	r2, #4
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	4790      	blx	r2
        delete cur;
 80061e8:	697c      	ldr	r4, [r7, #20]
 80061ea:	2c00      	cmp	r4, #0
 80061ec:	d006      	beq.n	80061fc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80061ee:	4620      	mov	r0, r4
 80061f0:	f7ff ffb4 	bl	800615c <_ZN23JUnitTestCaseResultNodeD1Ev>
 80061f4:	2128      	movs	r1, #40	; 0x28
 80061f6:	4620      	mov	r0, r4
 80061f8:	f000 ffae 	bl	8007158 <_ZdlPvj>
        cur = tmp;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006200:	e7e3      	b.n	80061ca <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2200      	movs	r2, #0
 8006208:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2200      	movs	r2, #0
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	080205cc 	.word	0x080205cc

08006220 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800624a:	b590      	push	{r4, r7, lr}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	6a1c      	ldr	r4, [r3, #32]
 800625a:	6838      	ldr	r0, [r7, #0]
 800625c:	f009 f9c6 	bl	800f5ec <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8006260:	4603      	mov	r3, r0
 8006262:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	6a1c      	ldr	r4, [r3, #32]
 800626a:	6838      	ldr	r0, [r7, #0]
 800626c:	f7ff fe8a 	bl	8005f84 <_ZNK10TestResult13getCheckCountEv>
 8006270:	4603      	mov	r3, r0
 8006272:	6223      	str	r3, [r4, #32]
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8006292:	b590      	push	{r4, r7, lr}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691c      	ldr	r4, [r3, #16]
 80062a0:	6838      	ldr	r0, [r7, #0]
 80062a2:	f009 f9af 	bl	800f604 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80062a6:	4603      	mov	r3, r0
 80062a8:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3364      	adds	r3, #100	; 0x64
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
    resetTestGroupResult();
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff62 	bl	8006180 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd90      	pop	{r4, r7, pc}

080062c4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b089      	sub	sp, #36	; 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	3201      	adds	r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f103 0414 	add.w	r4, r3, #20
 80062e0:	f107 0308 	add.w	r3, r7, #8
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f009 fcef 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4619      	mov	r1, r3
 80062f2:	4620      	mov	r0, r4
 80062f4:	f003 fb4b 	bl	800998e <_ZN12SimpleStringaSERKS_>
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	4618      	mov	r0, r3
 80062fe:	f003 fe92 	bl	800a026 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8006302:	4b3c      	ldr	r3, [pc, #240]	; (80063f4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4798      	blx	r3
 8006308:	4602      	mov	r2, r0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d110      	bne.n	800633c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800631a:	2288      	movs	r2, #136	; 0x88
 800631c:	4936      	ldr	r1, [pc, #216]	; (80063f8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800631e:	2028      	movs	r0, #40	; 0x28
 8006320:	f000 ff06 	bl	8007130 <_ZnwjPKci>
 8006324:	4604      	mov	r4, r0
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fe38 	bl	8005f9c <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8006330:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6912      	ldr	r2, [r2, #16]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	61d3      	str	r3, [r2, #28]
 800633a:	e013      	b.n	8006364 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800633c:	228b      	movs	r2, #139	; 0x8b
 800633e:	492e      	ldr	r1, [pc, #184]	; (80063f8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8006340:	2028      	movs	r0, #40	; 0x28
 8006342:	f000 fef5 	bl	8007130 <_ZnwjPKci>
 8006346:	4604      	mov	r4, r0
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff fe27 	bl	8005f9c <_ZN23JUnitTestCaseResultNodeC1Ev>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006362:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	461c      	mov	r4, r3
 800636c:	f107 0310 	add.w	r3, r7, #16
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f009 fc9a 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 8006378:	f107 0310 	add.w	r3, r7, #16
 800637c:	4619      	mov	r1, r3
 800637e:	4620      	mov	r0, r4
 8006380:	f003 fb05 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8006384:	f107 0310 	add.w	r3, r7, #16
 8006388:	4618      	mov	r0, r3
 800638a:	f003 fe4c 	bl	800a026 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	f103 0414 	add.w	r4, r3, #20
 8006398:	f107 0318 	add.w	r3, r7, #24
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f009 fd55 	bl	800fe4e <_ZNK10UtestShell7getFileEv>
 80063a4:	f107 0318 	add.w	r3, r7, #24
 80063a8:	4619      	mov	r1, r3
 80063aa:	4620      	mov	r0, r4
 80063ac:	f003 faef 	bl	800998e <_ZN12SimpleStringaSERKS_>
 80063b0:	f107 0318 	add.w	r3, r7, #24
 80063b4:	4618      	mov	r0, r3
 80063b6:	f003 fe36 	bl	800a026 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	6a1c      	ldr	r4, [r3, #32]
 80063c0:	6838      	ldr	r0, [r7, #0]
 80063c2:	f009 fd53 	bl	800fe6c <_ZNK10UtestShell13getLineNumberEv>
 80063c6:	4603      	mov	r3, r0
 80063c8:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3318      	adds	r3, #24
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6838      	ldr	r0, [r7, #0]
 80063d4:	4798      	blx	r3
 80063d6:	4603      	mov	r3, r0
 80063d8:	f083 0301 	eor.w	r3, r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	2201      	movs	r2, #1
 80063ea:	741a      	strb	r2, [r3, #16]
    }
}
 80063ec:	bf00      	nop
 80063ee:	3724      	adds	r7, #36	; 0x24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd90      	pop	{r4, r7, pc}
 80063f4:	200000a4 	.word	0x200000a4
 80063f8:	080205d0 	.word	0x080205d0

080063fc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	4928      	ldr	r1, [pc, #160]	; (80064b0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800640e:	4618      	mov	r0, r3
 8006410:	f003 fa51 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	3328      	adds	r3, #40	; 0x28
 800641a:	4618      	mov	r0, r3
 800641c:	f003 fdf2 	bl	800a004 <_ZNK12SimpleString7isEmptyEv>
 8006420:	4603      	mov	r3, r0
 8006422:	f083 0301 	eor.w	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00f      	beq.n	800644c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006434:	f107 0310 	add.w	r3, r7, #16
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f003 fe70 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8006440:	f107 0310 	add.w	r3, r7, #16
 8006444:	491b      	ldr	r1, [pc, #108]	; (80064b4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8006446:	4618      	mov	r0, r3
 8006448:	f003 fe7c 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800644c:	f107 0310 	add.w	r3, r7, #16
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4618      	mov	r0, r3
 8006454:	f003 fe64 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3384      	adds	r3, #132	; 0x84
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f107 0018 	add.w	r0, r7, #24
 8006464:	f107 0210 	add.w	r2, r7, #16
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	4798      	blx	r3
 800646c:	f107 0320 	add.w	r3, r7, #32
 8006470:	4911      	ldr	r1, [pc, #68]	; (80064b8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8006472:	4618      	mov	r0, r3
 8006474:	f003 fa1f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f107 0220 	add.w	r2, r7, #32
 800647e:	f107 0118 	add.w	r1, r7, #24
 8006482:	4618      	mov	r0, r3
 8006484:	f003 fe31 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8006488:	f107 0320 	add.w	r3, r7, #32
 800648c:	4618      	mov	r0, r3
 800648e:	f003 fdca 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8006492:	f107 0318 	add.w	r3, r7, #24
 8006496:	4618      	mov	r0, r3
 8006498:	f003 fdc5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800649c:	f107 0310 	add.w	r3, r7, #16
 80064a0:	4618      	mov	r0, r3
 80064a2:	f003 fdc0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80064a6:	bf00      	nop
}
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	080205ec 	.word	0x080205ec
 80064b4:	080205f8 	.word	0x080205f8
 80064b8:	080205fc 	.word	0x080205fc

080064bc <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f003 fa47 	bl	800995e <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	225f      	movs	r2, #95	; 0x5f
 80064e2:	4619      	mov	r1, r3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f003 fbcc 	bl	8009c82 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	3301      	adds	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e7f0      	b.n	80064d4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80064f2:	bf00      	nop
}
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	08020604 	.word	0x08020604

08006500 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d006      	beq.n	8006520 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	3328      	adds	r3, #40	; 0x28
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f003 fa37 	bl	800998e <_ZN12SimpleStringaSERKS_>
    }
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3368      	adds	r3, #104	; 0x68
 8006536:	681c      	ldr	r4, [r3, #0]
 8006538:	f107 0308 	add.w	r3, r7, #8
 800653c:	4908      	ldr	r1, [pc, #32]	; (8006560 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800653e:	4618      	mov	r0, r3
 8006540:	f003 f9b9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006544:	f107 0308 	add.w	r3, r7, #8
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	47a0      	blx	r4
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	4618      	mov	r0, r3
 8006554:	f003 fd67 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bd90      	pop	{r4, r7, pc}
 8006560:	08020610 	.word	0x08020610

08006564 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8006564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006568:	b08a      	sub	sp, #40	; 0x28
 800656a:	af04      	add	r7, sp, #16
 800656c:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8006574:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800657a:	3314      	adds	r3, #20
 800657c:	4618      	mov	r0, r3
 800657e:	f003 fd25 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8006582:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800658a:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	4a23      	ldr	r2, [pc, #140]	; (8006620 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006594:	fba2 2303 	umull	r2, r3, r2, r3
 8006598:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800659a:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	099b      	lsrs	r3, r3, #6
 80065aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	f107 0008 	add.w	r0, r7, #8
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	9601      	str	r6, [sp, #4]
 80065ca:	9500      	str	r5, [sp, #0]
 80065cc:	4623      	mov	r3, r4
 80065ce:	4642      	mov	r2, r8
 80065d0:	4915      	ldr	r1, [pc, #84]	; (8006628 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80065d2:	f004 fa2f 	bl	800aa34 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3368      	adds	r3, #104	; 0x68
 80065dc:	681c      	ldr	r4, [r3, #0]
 80065de:	f107 0308 	add.w	r3, r7, #8
 80065e2:	4618      	mov	r0, r3
 80065e4:	f003 fcf2 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80065e8:	4602      	mov	r2, r0
 80065ea:	f107 0310 	add.w	r3, r7, #16
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f003 f960 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80065f6:	f107 0310 	add.w	r3, r7, #16
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	47a0      	blx	r4
 8006600:	f107 0310 	add.w	r3, r7, #16
 8006604:	4618      	mov	r0, r3
 8006606:	f003 fd0e 	bl	800a026 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	4618      	mov	r0, r3
 8006610:	f003 fd09 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800661e:	bf00      	nop
 8006620:	10624dd3 	.word	0x10624dd3
 8006624:	200000a8 	.word	0x200000a8
 8006628:	0802063c 	.word	0x0802063c

0800662c <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3368      	adds	r3, #104	; 0x68
 800663a:	681c      	ldr	r4, [r3, #0]
 800663c:	f107 0308 	add.w	r3, r7, #8
 8006640:	4912      	ldr	r1, [pc, #72]	; (800668c <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8006642:	4618      	mov	r0, r3
 8006644:	f003 f937 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006648:	f107 0308 	add.w	r3, r7, #8
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	47a0      	blx	r4
 8006652:	f107 0308 	add.w	r3, r7, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f003 fce5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3368      	adds	r3, #104	; 0x68
 8006662:	681c      	ldr	r4, [r3, #0]
 8006664:	f107 0310 	add.w	r3, r7, #16
 8006668:	4909      	ldr	r1, [pc, #36]	; (8006690 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800666a:	4618      	mov	r0, r3
 800666c:	f003 f923 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006670:	f107 0310 	add.w	r3, r7, #16
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	47a0      	blx	r4
 800667a:	f107 0310 	add.w	r3, r7, #16
 800667e:	4618      	mov	r0, r3
 8006680:	f003 fcd1 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd90      	pop	{r4, r7, pc}
 800668c:	080206ac 	.word	0x080206ac
 8006690:	080206bc 	.word	0x080206bc

08006694 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f003 fc93 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4619      	mov	r1, r3
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f003 f903 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 80066b0:	4a0e      	ldr	r2, [pc, #56]	; (80066ec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 80066b2:	490f      	ldr	r1, [pc, #60]	; (80066f0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f003 fb13 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 80066ba:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80066bc:	490e      	ldr	r1, [pc, #56]	; (80066f8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f003 fb0e 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80066c4:	4a0d      	ldr	r2, [pc, #52]	; (80066fc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80066c6:	490e      	ldr	r1, [pc, #56]	; (8006700 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f003 fb09 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80066ce:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80066d0:	490d      	ldr	r1, [pc, #52]	; (8006708 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f003 fb04 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80066d8:	4a0c      	ldr	r2, [pc, #48]	; (800670c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80066da:	490d      	ldr	r1, [pc, #52]	; (8006710 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f003 faff 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80066e2:	bf00      	nop
}
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	080206cc 	.word	0x080206cc
 80066f0:	080206d4 	.word	0x080206d4
 80066f4:	080206d8 	.word	0x080206d8
 80066f8:	080206e0 	.word	0x080206e0
 80066fc:	080206e4 	.word	0x080206e4
 8006700:	080206ec 	.word	0x080206ec
 8006704:	080206f0 	.word	0x080206f0
 8006708:	080206f8 	.word	0x080206f8
 800670c:	080206fc 	.word	0x080206fc
 8006710:	08020708 	.word	0x08020708

08006714 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	b096      	sub	sp, #88	; 0x58
 800671a:	af08      	add	r7, sp, #32
 800671c:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80b2 	beq.w	8006892 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8006732:	3328      	adds	r3, #40	; 0x28
 8006734:	4618      	mov	r0, r3
 8006736:	f003 fc49 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800673a:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	3328      	adds	r3, #40	; 0x28
 8006742:	4618      	mov	r0, r3
 8006744:	f003 fc5e 	bl	800a004 <_ZNK12SimpleString7isEmptyEv>
 8006748:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800674e:	4c53      	ldr	r4, [pc, #332]	; (800689c <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8006750:	e000      	b.n	8006754 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8006752:	4c53      	ldr	r4, [pc, #332]	; (80068a0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8006758:	3314      	adds	r3, #20
 800675a:	4618      	mov	r0, r3
 800675c:	f003 fc36 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8006760:	4605      	mov	r5, r0
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	4618      	mov	r0, r3
 8006766:	f003 fc31 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800676a:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	6a1a      	ldr	r2, [r3, #32]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006778:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	4a49      	ldr	r2, [pc, #292]	; (80068a4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8006786:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800678e:	fba3 1302 	umull	r1, r3, r3, r2
 8006792:	099b      	lsrs	r3, r3, #6
 8006794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a2:	3314      	adds	r3, #20
 80067a4:	4618      	mov	r0, r3
 80067a6:	f003 fc11 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f107 0014 	add.w	r0, r7, #20
 80067b4:	9306      	str	r3, [sp, #24]
 80067b6:	9205      	str	r2, [sp, #20]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	9204      	str	r2, [sp, #16]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	9203      	str	r2, [sp, #12]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	9601      	str	r6, [sp, #4]
 80067c6:	9500      	str	r5, [sp, #0]
 80067c8:	4623      	mov	r3, r4
 80067ca:	4642      	mov	r2, r8
 80067cc:	4936      	ldr	r1, [pc, #216]	; (80068a8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80067ce:	f004 f931 	bl	800aa34 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3368      	adds	r3, #104	; 0x68
 80067d8:	681c      	ldr	r4, [r3, #0]
 80067da:	f107 0314 	add.w	r3, r7, #20
 80067de:	4618      	mov	r0, r3
 80067e0:	f003 fbf4 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f107 031c 	add.w	r3, r7, #28
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f003 f862 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80067f2:	f107 031c 	add.w	r3, r7, #28
 80067f6:	4619      	mov	r1, r3
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	47a0      	blx	r4
 80067fc:	f107 031c 	add.w	r3, r7, #28
 8006800:	4618      	mov	r0, r3
 8006802:	f003 fc10 	bl	800a026 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800680c:	6a12      	ldr	r2, [r2, #32]
 800680e:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3388      	adds	r3, #136	; 0x88
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	4798      	blx	r3
 8006826:	e017      	b.n	8006858 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	7c1b      	ldrb	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d013      	beq.n	8006858 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3368      	adds	r3, #104	; 0x68
 8006836:	681c      	ldr	r4, [r3, #0]
 8006838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800683c:	491b      	ldr	r1, [pc, #108]	; (80068ac <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800683e:	4618      	mov	r0, r3
 8006840:	f003 f839 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006848:	4619      	mov	r1, r3
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	47a0      	blx	r4
 800684e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f003 fbe7 	bl	800a026 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3368      	adds	r3, #104	; 0x68
 800685e:	681c      	ldr	r4, [r3, #0]
 8006860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006864:	4912      	ldr	r1, [pc, #72]	; (80068b0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8006866:	4618      	mov	r0, r3
 8006868:	f003 f825 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800686c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006870:	4619      	mov	r1, r3
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	47a0      	blx	r4
 8006876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800687a:	4618      	mov	r0, r3
 800687c:	f003 fbd3 	bl	800a026 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8006880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8006886:	f107 0314 	add.w	r3, r7, #20
 800688a:	4618      	mov	r0, r3
 800688c:	f003 fbcb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8006890:	e749      	b.n	8006726 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8006892:	bf00      	nop
 8006894:	3738      	adds	r7, #56	; 0x38
 8006896:	46bd      	mov	sp, r7
 8006898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689c:	080205cc 	.word	0x080205cc
 80068a0:	0802070c 	.word	0x0802070c
 80068a4:	10624dd3 	.word	0x10624dd3
 80068a8:	08020710 	.word	0x08020710
 80068ac:	0802076c 	.word	0x0802076c
 80068b0:	0802077c 	.word	0x0802077c

080068b4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 80068b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b6:	b091      	sub	sp, #68	; 0x44
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68d9      	ldr	r1, [r3, #12]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f107 0210 	add.w	r2, r7, #16
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f003 fb77 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80068de:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3314      	adds	r3, #20
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4610      	mov	r0, r2
 80068f0:	4798      	blx	r3
 80068f2:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80068f4:	461e      	mov	r6, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3380      	adds	r3, #128	; 0x80
 80068fc:	681c      	ldr	r4, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68d9      	ldr	r1, [r3, #12]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3318      	adds	r3, #24
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f107 0220 	add.w	r2, r7, #32
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	f107 0318 	add.w	r3, r7, #24
 8006918:	f107 0220 	add.w	r2, r7, #32
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	4618      	mov	r0, r3
 8006920:	47a0      	blx	r4
 8006922:	f107 0318 	add.w	r3, r7, #24
 8006926:	4618      	mov	r0, r3
 8006928:	f003 fb50 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800692c:	4603      	mov	r3, r0
 800692e:	f107 0008 	add.w	r0, r7, #8
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	4633      	mov	r3, r6
 8006936:	462a      	mov	r2, r5
 8006938:	4924      	ldr	r1, [pc, #144]	; (80069cc <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800693a:	f004 f87b 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800693e:	f107 0318 	add.w	r3, r7, #24
 8006942:	4618      	mov	r0, r3
 8006944:	f003 fb6f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8006948:	f107 0320 	add.w	r3, r7, #32
 800694c:	4618      	mov	r0, r3
 800694e:	f003 fb6a 	bl	800a026 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8006952:	f107 0310 	add.w	r3, r7, #16
 8006956:	4618      	mov	r0, r3
 8006958:	f003 fb65 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3368      	adds	r3, #104	; 0x68
 8006962:	681c      	ldr	r4, [r3, #0]
 8006964:	f107 0308 	add.w	r3, r7, #8
 8006968:	4618      	mov	r0, r3
 800696a:	f003 fb2f 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800696e:	4602      	mov	r2, r0
 8006970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006974:	4611      	mov	r1, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f002 ff9d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800697c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	47a0      	blx	r4
 8006986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800698a:	4618      	mov	r0, r3
 800698c:	f003 fb4b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3368      	adds	r3, #104	; 0x68
 8006996:	681c      	ldr	r4, [r3, #0]
 8006998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800699c:	490c      	ldr	r1, [pc, #48]	; (80069d0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 ff89 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80069a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	47a0      	blx	r4
 80069ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069b2:	4618      	mov	r0, r3
 80069b4:	f003 fb37 	bl	800a026 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	4618      	mov	r0, r3
 80069be:	f003 fb32 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 80069c2:	bf00      	nop
 80069c4:	373c      	adds	r7, #60	; 0x3c
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ca:	bf00      	nop
 80069cc:	0802078c 	.word	0x0802078c
 80069d0:	080207c8 	.word	0x080207c8

080069d4 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b08d      	sub	sp, #52	; 0x34
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3368      	adds	r3, #104	; 0x68
 80069e2:	681c      	ldr	r4, [r3, #0]
 80069e4:	f107 0308 	add.w	r3, r7, #8
 80069e8:	4933      	ldr	r1, [pc, #204]	; (8006ab8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 ff63 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80069f0:	f107 0308 	add.w	r3, r7, #8
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	47a0      	blx	r4
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4618      	mov	r0, r3
 8006a00:	f003 fb11 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3368      	adds	r3, #104	; 0x68
 8006a0a:	681c      	ldr	r4, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3380      	adds	r3, #128	; 0x80
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6912      	ldr	r2, [r2, #16]
 8006a18:	3230      	adds	r2, #48	; 0x30
 8006a1a:	f107 0010 	add.w	r0, r7, #16
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4798      	blx	r3
 8006a22:	f107 0310 	add.w	r3, r7, #16
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	47a0      	blx	r4
 8006a2c:	f107 0310 	add.w	r3, r7, #16
 8006a30:	4618      	mov	r0, r3
 8006a32:	f003 faf8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3368      	adds	r3, #104	; 0x68
 8006a3c:	681c      	ldr	r4, [r3, #0]
 8006a3e:	f107 0318 	add.w	r3, r7, #24
 8006a42:	491e      	ldr	r1, [pc, #120]	; (8006abc <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8006a44:	4618      	mov	r0, r3
 8006a46:	f002 ff36 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006a4a:	f107 0318 	add.w	r3, r7, #24
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	47a0      	blx	r4
 8006a54:	f107 0318 	add.w	r3, r7, #24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f003 fae4 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3368      	adds	r3, #104	; 0x68
 8006a64:	681c      	ldr	r4, [r3, #0]
 8006a66:	f107 0320 	add.w	r3, r7, #32
 8006a6a:	4915      	ldr	r1, [pc, #84]	; (8006ac0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f002 ff22 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006a72:	f107 0320 	add.w	r3, r7, #32
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	47a0      	blx	r4
 8006a7c:	f107 0320 	add.w	r3, r7, #32
 8006a80:	4618      	mov	r0, r3
 8006a82:	f003 fad0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3368      	adds	r3, #104	; 0x68
 8006a8c:	681c      	ldr	r4, [r3, #0]
 8006a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a92:	490c      	ldr	r1, [pc, #48]	; (8006ac4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 ff0e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8006a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	47a0      	blx	r4
 8006aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f003 fabc 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8006aae:	bf00      	nop
 8006ab0:	3734      	adds	r7, #52	; 0x34
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd90      	pop	{r4, r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	080207d4 	.word	0x080207d4
 8006abc:	080207e4 	.word	0x080207e4
 8006ac0:	080207f4 	.word	0x080207f4
 8006ac4:	08020810 	.word	0x08020810

08006ac8 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3360      	adds	r3, #96	; 0x60
 8006ad6:	681c      	ldr	r4, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	335c      	adds	r3, #92	; 0x5c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6912      	ldr	r2, [r2, #16]
 8006ae4:	3214      	adds	r2, #20
 8006ae6:	f107 0008 	add.w	r0, r7, #8
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	4798      	blx	r3
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	47a0      	blx	r4
 8006af8:	f107 0308 	add.w	r3, r7, #8
 8006afc:	4618      	mov	r0, r3
 8006afe:	f003 fa92 	bl	800a026 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3370      	adds	r3, #112	; 0x70
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
    writeTestSuiteSummary();
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3374      	adds	r3, #116	; 0x74
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
    writeProperties();
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3378      	adds	r3, #120	; 0x78
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	4798      	blx	r3
    writeTestCases();
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	337c      	adds	r3, #124	; 0x7c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
    writeFileEnding();
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	338c      	adds	r3, #140	; 0x8c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
    closeFile();
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	336c      	adds	r3, #108	; 0x6c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
}
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}

08006b52 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	6039      	str	r1, [r7, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	3330      	adds	r3, #48	; 0x30
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f003 fae2 	bl	800a144 <_ZN12SimpleStringpLEPKc>
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8006bc8:	b590      	push	{r4, r7, lr}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d113      	bne.n	8006c06 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	3201      	adds	r2, #1
 8006be6:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8006be8:	f240 1233 	movw	r2, #307	; 0x133
 8006bec:	4908      	ldr	r1, [pc, #32]	; (8006c10 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8006bee:	2034      	movs	r0, #52	; 0x34
 8006bf0:	f000 fa9e 	bl	8007130 <_ZnwjPKci>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f004 fd37 	bl	800b66c <_ZN11TestFailureC1ERKS_>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	60dc      	str	r4, [r3, #12]
    }
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	080205d0 	.word	0x080205d0

08006c14 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8006c14:	b5b0      	push	{r4, r5, r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8006c1e:	4b08      	ldr	r3, [pc, #32]	; (8006c40 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8006c20:	681d      	ldr	r5, [r3, #0]
 8006c22:	6838      	ldr	r0, [r7, #0]
 8006c24:	f003 f9d2 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691c      	ldr	r4, [r3, #16]
 8006c2e:	4905      	ldr	r1, [pc, #20]	; (8006c44 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8006c30:	4610      	mov	r0, r2
 8006c32:	47a8      	blx	r5
 8006c34:	4603      	mov	r3, r0
 8006c36:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c40:	200000b0 	.word	0x200000b0
 8006c44:	08020820 	.word	0x08020820

08006c48 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8006c54:	681c      	ldr	r4, [r3, #0]
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f003 f9b8 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	47a0      	blx	r4
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	200000b4 	.word	0x200000b4

08006c78 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6912      	ldr	r2, [r2, #16]
 8006c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	4798      	blx	r3
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200000b8 	.word	0x200000b8

08006c9c <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
        return false;
 8006caa:	2300      	movs	r3, #0
    }
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    {
 8006cc0:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
    }
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	0802380c 	.word	0x0802380c

08006cd8 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    }
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ffe9 	bl	8006cb8 <_ZN17MemoryLeakFailureD1Ev>
 8006ce6:	2104      	movs	r1, #4
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa35 	bl	8007158 <_ZdlPvj>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	687c      	ldr	r4, [r7, #4]
 8006d02:	f000 fc71 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006d06:	4603      	mov	r3, r0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f00c ff6c 	bl	8013be6 <_ZN18MemoryLeakDetector8getMutexEv>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4619      	mov	r1, r3
 8006d12:	4620      	mov	r0, r4
 8006d14:	f002 fb24 	bl	8009360 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd90      	pop	{r4, r7, pc}

08006d22 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 fb29 	bl	8009384 <_ZN15ScopedMutexLockD1Ev>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8006d48:	f000 fc4e 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	f006 f8df 	bl	800cf10 <_Z25getCurrentMallocAllocatorv>
 8006d52:	4601      	mov	r1, r0
 8006d54:	2301      	movs	r3, #1
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4620      	mov	r0, r4
 8006d62:	f00d f983 	bl	801406c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006d66:	4603      	mov	r3, r0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd90      	pop	{r4, r7, pc}

08006d70 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8006d7c:	f000 fc34 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006d80:	4603      	mov	r3, r0
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f00c ffdd 	bl	8013d44 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8006d8a:	f000 fc2d 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	f006 f8be 	bl	800cf10 <_Z25getCurrentMallocAllocatorv>
 8006d94:	4601      	mov	r1, r0
 8006d96:	2301      	movs	r3, #1
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f00d f996 	bl	80140d4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8006da8:	bf00      	nop
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd90      	pop	{r4, r7, pc}

08006db0 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af04      	add	r7, sp, #16
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8006dbe:	f000 fc13 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	f006 f8a4 	bl	800cf10 <_Z25getCurrentMallocAllocatorv>
 8006dc8:	4601      	mov	r1, r0
 8006dca:	2301      	movs	r3, #1
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f00d f9de 	bl	801419c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8006de0:	4603      	mov	r3, r0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd90      	pop	{r4, r7, pc}
	...

08006dec <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <_ZL13normal_mallocjPKcj+0x20>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	4798      	blx	r3
 8006e00:	4603      	mov	r3, r0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200000c4 	.word	0x200000c4

08006e10 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <_ZL14normal_reallocPvjPKcj+0x24>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	4798      	blx	r3
 8006e28:	4603      	mov	r3, r0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200000c8 	.word	0x200000c8

08006e38 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8006e44:	4b03      	ldr	r3, [pc, #12]	; (8006e54 <_ZL11normal_freePvPKcj+0x1c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	4798      	blx	r3
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200000cc 	.word	0x200000cc

08006e58 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff47 	bl	8006cf8 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006e6a:	f000 fbbd 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	f005 ff9e 	bl	800cdb0 <_Z22getCurrentNewAllocatorv>
 8006e74:	4601      	mov	r1, r0
 8006e76:	2300      	movs	r3, #0
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f00d f864 	bl	8013f48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006e80:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006e82:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8006e84:	f107 0308 	add.w	r3, r7, #8
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff ff4a 	bl	8006d22 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8006e8e:	4623      	mov	r3, r4
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}

08006e98 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006e98:	b590      	push	{r4, r7, lr}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006ea0:	f000 fba2 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	f005 ff83 	bl	800cdb0 <_Z22getCurrentNewAllocatorv>
 8006eaa:	4601      	mov	r1, r0
 8006eac:	2300      	movs	r3, #0
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f00d f849 	bl	8013f48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006eb6:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}

08006ec2 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8006ec2:	b590      	push	{r4, r7, lr}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006eca:	f000 fb8d 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f005 ff6e 	bl	800cdb0 <_Z22getCurrentNewAllocatorv>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4620      	mov	r0, r4
 8006edc:	f00d f834 	bl	8013f48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006ee0:	4603      	mov	r3, r0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd90      	pop	{r4, r7, pc}

08006eea <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8006eea:	b590      	push	{r4, r7, lr}
 8006eec:	b089      	sub	sp, #36	; 0x24
 8006eee:	af02      	add	r7, sp, #8
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8006ef6:	f000 fb77 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006efa:	4604      	mov	r4, r0
 8006efc:	f005 ff58 	bl	800cdb0 <_Z22getCurrentNewAllocatorv>
 8006f00:	4601      	mov	r1, r0
 8006f02:	2300      	movs	r3, #0
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f00d f8ac 	bl	801406c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006f14:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006f16:	697b      	ldr	r3, [r7, #20]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd90      	pop	{r4, r7, pc}

08006f20 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8006f28:	f000 fb5e 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	f005 ff97 	bl	800ce60 <_Z27getCurrentNewArrayAllocatorv>
 8006f32:	4601      	mov	r1, r0
 8006f34:	2300      	movs	r3, #0
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f00d f805 	bl	8013f48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006f3e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}

08006f4a <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8006f4a:	b590      	push	{r4, r7, lr}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8006f52:	f000 fb49 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006f56:	4604      	mov	r4, r0
 8006f58:	f005 ff82 	bl	800ce60 <_Z27getCurrentNewArrayAllocatorv>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4620      	mov	r0, r4
 8006f64:	f00c fff0 	bl	8013f48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006f68:	4603      	mov	r3, r0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd90      	pop	{r4, r7, pc}

08006f72 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8006f72:	b590      	push	{r4, r7, lr}
 8006f74:	b089      	sub	sp, #36	; 0x24
 8006f76:	af02      	add	r7, sp, #8
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8006f7e:	f000 fb33 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006f82:	4604      	mov	r4, r0
 8006f84:	f005 ff6c 	bl	800ce60 <_Z27getCurrentNewArrayAllocatorv>
 8006f88:	4601      	mov	r1, r0
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f00d f868 	bl	801406c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006f9c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006f9e:	697b      	ldr	r3, [r7, #20]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd90      	pop	{r4, r7, pc}

08006fa8 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006fb0:	f000 fb1a 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f00c fec3 	bl	8013d44 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8006fbe:	f000 fb13 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	f005 fef4 	bl	800cdb0 <_Z22getCurrentNewAllocatorv>
 8006fc8:	4601      	mov	r1, r0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f00d f8ca 	bl	8014168 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd90      	pop	{r4, r7, pc}

08006fdc <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006fe4:	f000 fb00 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f00c fea9 	bl	8013d44 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8006ff2:	f000 faf9 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	f005 ff32 	bl	800ce60 <_Z27getCurrentNewArrayAllocatorv>
 8006ffc:	4601      	mov	r1, r0
 8006ffe:	2300      	movs	r3, #0
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4620      	mov	r0, r4
 8007004:	f00d f8b0 	bl	8014168 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bd90      	pop	{r4, r7, pc}

08007010 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <_ZL19normal_operator_newj+0x1c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007022:	68fb      	ldr	r3, [r7, #12]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	200000c4 	.word	0x200000c4

08007030 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007038:	4b04      	ldr	r3, [pc, #16]	; (800704c <_ZL27normal_operator_new_nothrowj+0x1c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	200000c4 	.word	0x200000c4

08007050 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	4798      	blx	r3
 8007064:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	200000c4 	.word	0x200000c4

08007074 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <_ZL25normal_operator_new_arrayj+0x1c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
 8007084:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	200000c4 	.word	0x200000c4

08007094 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	200000c4 	.word	0x200000c4

080070b4 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80070c0:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	4798      	blx	r3
 80070c8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80070ca:	697b      	ldr	r3, [r7, #20]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	200000c4 	.word	0x200000c4

080070d8 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <_ZL22normal_operator_deletePv+0x18>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200000cc 	.word	0x200000cc

080070f4 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <_ZL28normal_operator_delete_arrayPv+0x18>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200000cc 	.word	0x200000cc

08007110 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <_Znwj+0x1c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
 8007120:	4603      	mov	r3, r0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000028 	.word	0x20000028

08007130 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <_ZnwjPKci+0x24>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	4798      	blx	r3
 8007148:	4603      	mov	r3, r0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000030 	.word	0x20000030

08007158 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <_ZdlPvj+0x1c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20000040 	.word	0x20000040

08007178 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <_ZnajPKci+0x24>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	4798      	blx	r3
 8007190:	4603      	mov	r3, r0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	2000003c 	.word	0x2000003c

080071a0 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 80071a8:	4b03      	ldr	r3, [pc, #12]	; (80071b8 <_ZdaPv+0x18>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000044 	.word	0x20000044

080071bc <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 80071c6:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <_ZdaPvj+0x1c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000044 	.word	0x20000044

080071dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 80071e0:	4b12      	ldr	r3, [pc, #72]	; (800722c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 80071e4:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 80071e8:	4a13      	ldr	r2, [pc, #76]	; (8007238 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 80071ea:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 80071ec:	4b13      	ldr	r3, [pc, #76]	; (800723c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 80071ee:	4a14      	ldr	r2, [pc, #80]	; (8007240 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 80071f0:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 80071f2:	4b14      	ldr	r3, [pc, #80]	; (8007244 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 80071f4:	4a14      	ldr	r2, [pc, #80]	; (8007248 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 80071f6:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 80071f8:	4b14      	ldr	r3, [pc, #80]	; (800724c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 80071fa:	4a15      	ldr	r2, [pc, #84]	; (8007250 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 80071fc:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8007200:	4a15      	ldr	r2, [pc, #84]	; (8007258 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8007202:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8007204:	4b15      	ldr	r3, [pc, #84]	; (800725c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8007206:	4a16      	ldr	r2, [pc, #88]	; (8007260 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8007208:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800720a:	4b16      	ldr	r3, [pc, #88]	; (8007264 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800720c:	4a16      	ldr	r2, [pc, #88]	; (8007268 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800720e:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8007210:	4b16      	ldr	r3, [pc, #88]	; (800726c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8007212:	4a17      	ldr	r2, [pc, #92]	; (8007270 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8007214:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8007216:	4b17      	ldr	r3, [pc, #92]	; (8007274 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8007218:	4a17      	ldr	r2, [pc, #92]	; (8007278 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800721a:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800721c:	4b17      	ldr	r3, [pc, #92]	; (800727c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800721e:	4a18      	ldr	r2, [pc, #96]	; (8007280 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8007220:	601a      	str	r2, [r3, #0]

#endif
}
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	20000028 	.word	0x20000028
 8007230:	08007011 	.word	0x08007011
 8007234:	2000002c 	.word	0x2000002c
 8007238:	08007031 	.word	0x08007031
 800723c:	20000030 	.word	0x20000030
 8007240:	08007051 	.word	0x08007051
 8007244:	20000034 	.word	0x20000034
 8007248:	08007075 	.word	0x08007075
 800724c:	20000038 	.word	0x20000038
 8007250:	08007095 	.word	0x08007095
 8007254:	2000003c 	.word	0x2000003c
 8007258:	080070b5 	.word	0x080070b5
 800725c:	20000040 	.word	0x20000040
 8007260:	080070d9 	.word	0x080070d9
 8007264:	20000044 	.word	0x20000044
 8007268:	080070f5 	.word	0x080070f5
 800726c:	20000010 	.word	0x20000010
 8007270:	08006ded 	.word	0x08006ded
 8007274:	20000018 	.word	0x20000018
 8007278:	08006e11 	.word	0x08006e11
 800727c:	20000014 	.word	0x20000014
 8007280:	08006e39 	.word	0x08006e39

08007284 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d004      	beq.n	800729c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8007292:	4b06      	ldr	r3, [pc, #24]	; (80072ac <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a07      	ldr	r2, [pc, #28]	; (80072b4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d101      	bne.n	80072a0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 80072a0:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000028 	.word	0x20000028
 80072b0:	08006e99 	.word	0x08006e99
 80072b4:	08006e59 	.word	0x08006e59

080072b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 80072bc:	4b1f      	ldr	r3, [pc, #124]	; (800733c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4a1e      	ldr	r2, [pc, #120]	; (800733c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	4b1d      	ldr	r3, [pc, #116]	; (800733c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	bfcc      	ite	gt
 80072ce:	2301      	movgt	r3, #1
 80072d0:	2300      	movle	r3, #0
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d12e      	bne.n	8007336 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 80072d8:	4b19      	ldr	r3, [pc, #100]	; (8007340 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a19      	ldr	r2, [pc, #100]	; (8007344 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 80072de:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 80072e0:	4b19      	ldr	r3, [pc, #100]	; (8007348 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a19      	ldr	r2, [pc, #100]	; (800734c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 80072e6:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 80072e8:	4b19      	ldr	r3, [pc, #100]	; (8007350 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a19      	ldr	r2, [pc, #100]	; (8007354 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 80072ee:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 80072f0:	4b19      	ldr	r3, [pc, #100]	; (8007358 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a19      	ldr	r2, [pc, #100]	; (800735c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 80072f6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 80072f8:	4b19      	ldr	r3, [pc, #100]	; (8007360 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a19      	ldr	r2, [pc, #100]	; (8007364 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 80072fe:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8007300:	4b19      	ldr	r3, [pc, #100]	; (8007368 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a19      	ldr	r2, [pc, #100]	; (800736c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8007306:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8007308:	4b19      	ldr	r3, [pc, #100]	; (8007370 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800730e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8007310:	4b19      	ldr	r3, [pc, #100]	; (8007378 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a19      	ldr	r2, [pc, #100]	; (800737c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8007316:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800731e:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a19      	ldr	r2, [pc, #100]	; (800738c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8007326:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8007328:	4b19      	ldr	r3, [pc, #100]	; (8007390 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a19      	ldr	r2, [pc, #100]	; (8007394 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800732e:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8007330:	f7ff ff54 	bl	80071dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8007334:	e000      	b.n	8007338 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8007336:	bf00      	nop
#endif
}
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	200005f4 	.word	0x200005f4
 8007340:	20000028 	.word	0x20000028
 8007344:	20000048 	.word	0x20000048
 8007348:	2000002c 	.word	0x2000002c
 800734c:	2000004c 	.word	0x2000004c
 8007350:	20000030 	.word	0x20000030
 8007354:	20000050 	.word	0x20000050
 8007358:	20000034 	.word	0x20000034
 800735c:	20000054 	.word	0x20000054
 8007360:	20000038 	.word	0x20000038
 8007364:	20000058 	.word	0x20000058
 8007368:	2000003c 	.word	0x2000003c
 800736c:	2000005c 	.word	0x2000005c
 8007370:	20000040 	.word	0x20000040
 8007374:	20000060 	.word	0x20000060
 8007378:	20000044 	.word	0x20000044
 800737c:	20000064 	.word	0x20000064
 8007380:	20000010 	.word	0x20000010
 8007384:	2000001c 	.word	0x2000001c
 8007388:	20000018 	.word	0x20000018
 800738c:	20000024 	.word	0x20000024
 8007390:	20000014 	.word	0x20000014
 8007394:	20000020 	.word	0x20000020

08007398 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800739c:	4b1f      	ldr	r3, [pc, #124]	; (800741c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	4a1e      	ldr	r2, [pc, #120]	; (800741c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	4b1d      	ldr	r3, [pc, #116]	; (800741c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfcc      	ite	gt
 80073ae:	2301      	movgt	r3, #1
 80073b0:	2300      	movle	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d12c      	bne.n	8007412 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 80073b8:	4b19      	ldr	r3, [pc, #100]	; (8007420 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a19      	ldr	r2, [pc, #100]	; (8007424 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 80073be:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 80073c0:	4b19      	ldr	r3, [pc, #100]	; (8007428 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a19      	ldr	r2, [pc, #100]	; (800742c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 80073c6:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 80073c8:	4b19      	ldr	r3, [pc, #100]	; (8007430 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a19      	ldr	r2, [pc, #100]	; (8007434 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 80073ce:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 80073d0:	4b19      	ldr	r3, [pc, #100]	; (8007438 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a19      	ldr	r2, [pc, #100]	; (800743c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 80073d6:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 80073d8:	4b19      	ldr	r3, [pc, #100]	; (8007440 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a19      	ldr	r2, [pc, #100]	; (8007444 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 80073de:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 80073e0:	4b19      	ldr	r3, [pc, #100]	; (8007448 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a19      	ldr	r2, [pc, #100]	; (800744c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 80073e6:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80073e8:	4b19      	ldr	r3, [pc, #100]	; (8007450 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a19      	ldr	r2, [pc, #100]	; (8007454 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80073ee:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80073f0:	4b19      	ldr	r3, [pc, #100]	; (8007458 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80073f6:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 80073f8:	4b19      	ldr	r3, [pc, #100]	; (8007460 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a19      	ldr	r2, [pc, #100]	; (8007464 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 80073fe:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8007400:	4b19      	ldr	r3, [pc, #100]	; (8007468 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	; (800746c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8007406:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8007408:	4b19      	ldr	r3, [pc, #100]	; (8007470 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e000      	b.n	8007414 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8007412:	bf00      	nop
#endif
}
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	200005f4 	.word	0x200005f4
 8007420:	20000048 	.word	0x20000048
 8007424:	20000028 	.word	0x20000028
 8007428:	2000004c 	.word	0x2000004c
 800742c:	2000002c 	.word	0x2000002c
 8007430:	20000050 	.word	0x20000050
 8007434:	20000030 	.word	0x20000030
 8007438:	20000054 	.word	0x20000054
 800743c:	20000034 	.word	0x20000034
 8007440:	20000058 	.word	0x20000058
 8007444:	20000038 	.word	0x20000038
 8007448:	2000005c 	.word	0x2000005c
 800744c:	2000003c 	.word	0x2000003c
 8007450:	20000060 	.word	0x20000060
 8007454:	20000040 	.word	0x20000040
 8007458:	20000064 	.word	0x20000064
 800745c:	20000044 	.word	0x20000044
 8007460:	2000001c 	.word	0x2000001c
 8007464:	20000010 	.word	0x20000010
 8007468:	20000024 	.word	0x20000024
 800746c:	20000018 	.word	0x20000018
 8007470:	20000020 	.word	0x20000020
 8007474:	20000014 	.word	0x20000014

08007478 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    {
 8007480:	4a05      	ldr	r2, [pc, #20]	; (8007498 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fc15 	bl	8006cb8 <_ZN17MemoryLeakFailureD1Ev>
    }
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	080237f8 	.word	0x080237f8

0800749c <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
    }
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ffe7 	bl	8007478 <_ZN25MemoryLeakWarningReporterD1Ev>
 80074aa:	2104      	movs	r1, #4
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fe53 	bl	8007158 <_ZdlPvj>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <_ZN14TestTerminatorC1Ev+0x1c>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080241a4 	.word	0x080241a4

080074dc <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff ffe8 	bl	80074bc <_ZN14TestTerminatorC1Ev>
 80074ec:	4a03      	ldr	r2, [pc, #12]	; (80074fc <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	0802417c 	.word	0x0802417c

08007500 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8007500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007502:	b099      	sub	sp, #100	; 0x64
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800750a:	f009 fdb7 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800750e:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8007510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	339c      	adds	r3, #156	; 0x9c
 8007516:	681c      	ldr	r4, [r3, #0]
 8007518:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800751c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800751e:	4618      	mov	r0, r3
 8007520:	f008 fbc4 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 8007524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007528:	4618      	mov	r0, r3
 800752a:	f002 fd4f 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800752e:	4605      	mov	r5, r0
 8007530:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007532:	f008 fc9b 	bl	800fe6c <_ZNK10UtestShell13getLineNumberEv>
 8007536:	4606      	mov	r6, r0
 8007538:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f002 f9b9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8007544:	f107 000c 	add.w	r0, r7, #12
 8007548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	4633      	mov	r3, r6
 8007550:	462a      	mov	r2, r5
 8007552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007554:	f004 fd14 	bl	800bf80 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8007558:	2300      	movs	r3, #0
 800755a:	653b      	str	r3, [r7, #80]	; 0x50
 800755c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff ffbb 	bl	80074dc <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8007566:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800756a:	f107 030c 	add.w	r3, r7, #12
 800756e:	4619      	mov	r1, r3
 8007570:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007572:	47a0      	blx	r4
 8007574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007578:	4618      	mov	r0, r3
 800757a:	f009 fe79 	bl	8011270 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800757e:	f107 030c 	add.w	r3, r7, #12
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f9ac 	bl	80078e0 <_ZN11FailFailureD1Ev>
 8007588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800758c:	4618      	mov	r0, r3
 800758e:	f002 fd4a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8007592:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007596:	4618      	mov	r0, r3
 8007598:	f002 fd45 	bl	800a026 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800759c:	bf00      	nop
 800759e:	375c      	adds	r7, #92	; 0x5c
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075a4 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	4a04      	ldr	r2, [pc, #16]	; (80075c0 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	0802380c 	.word	0x0802380c

080075c4 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff ffe8 	bl	80075a4 <_ZN17MemoryLeakFailureC1Ev>
 80075d4:	4a03      	ldr	r2, [pc, #12]	; (80075e4 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	080237f8 	.word	0x080237f8

080075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 80075e8:	b598      	push	{r3, r4, r7, lr}
 80075ea:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 80075ec:	4b11      	ldr	r3, [pc, #68]	; (8007634 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11b      	bne.n	800762c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 80075f4:	f7ff fe60 	bl	80072b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 80075f8:	2004      	movs	r0, #4
 80075fa:	f7ff fd89 	bl	8007110 <_Znwj>
 80075fe:	4603      	mov	r3, r0
 8007600:	461c      	mov	r4, r3
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff ffde 	bl	80075c4 <_ZN25MemoryLeakWarningReporterC1Ev>
 8007608:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800760a:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800760c:	f241 1050 	movw	r0, #4432	; 0x1150
 8007610:	f7ff fd7e 	bl	8007110 <_Znwj>
 8007614:	4603      	mov	r3, r0
 8007616:	461c      	mov	r4, r3
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4619      	mov	r1, r3
 800761e:	4620      	mov	r0, r4
 8007620:	f00c fa3e 	bl	8013aa0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8007624:	4b03      	ldr	r3, [pc, #12]	; (8007634 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007626:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8007628:	f7ff feb6 	bl	8007398 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800762c:	4b01      	ldr	r3, [pc, #4]	; (8007634 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800762e:	681b      	ldr	r3, [r3, #0]
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd98      	pop	{r3, r4, r7, pc}
 8007634:	200005fc 	.word	0x200005fc
 8007638:	200005f8 	.word	0x200005f8

0800763c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	765a      	strb	r2, [r3, #25]
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8007660:	f7ff fdbc 	bl	80071dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8007664:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	3204      	adds	r2, #4
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	4790      	blx	r2
    delete globalReporter;
 8007676:	4b08      	ldr	r3, [pc, #32]	; (8007698 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	3204      	adds	r2, #4
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	4790      	blx	r2
    globalDetector = NULLPTR;
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200005fc 	.word	0x200005fc
 8007698:	200005f8 	.word	0x200005f8

0800769c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f006 fdfd 	bl	800e2ac <_ZN10TestPluginC1ERK12SimpleString>
 80076b2:	4a14      	ldr	r2, [pc, #80]	; (8007704 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	761a      	strb	r2, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	765a      	strb	r2, [r3, #25]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 80076d2:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	615a      	str	r2, [r3, #20]
 80076e4:	e004      	b.n	80076f0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 80076e6:	f7ff ff7f 	bl	80075e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80076ea:	4602      	mov	r2, r0
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f00c fa69 	bl	8013bcc <_ZN18MemoryLeakDetector6enableEv>
}
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	08023820 	.word	0x08023820
 8007708:	20000600 	.word	0x20000600

0800770c <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	4a09      	ldr	r2, [pc, #36]	; (800773c <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7e5b      	ldrb	r3, [r3, #25]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8007722:	f7ff fd5b 	bl	80071dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8007726:	f7ff ff99 	bl	800765c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	f006 fdf9 	bl	800e324 <_ZN10TestPluginD1Ev>
    }
}
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	08023820 	.word	0x08023820

08007740 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
}
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff ffdf 	bl	800770c <_ZN23MemoryLeakWarningPluginD1Ev>
 800774e:	2124      	movs	r1, #36	; 0x24
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff fd01 	bl	8007158 <_ZdlPvj>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	4618      	mov	r0, r3
 8007772:	f00c fa0e 	bl	8013b92 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fd ffb0 	bl	80056dc <_ZNK10TestResult15getFailureCountEv>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b097      	sub	sp, #92	; 0x5c
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	4618      	mov	r0, r3
 800779e:	f00c fa08 	bl	8013bb2 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2103      	movs	r1, #3
 80077a8:	4618      	mov	r0, r3
 80077aa:	f00c fda5 	bl	80142f8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80077ae:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	7e1b      	ldrb	r3, [r3, #24]
 80077b4:	f083 0301 	eor.w	r3, r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d009      	beq.n	80077dc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1c      	ldr	r4, [r3, #32]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fd ff85 	bl	80056dc <_ZNK10TestResult15getFailureCountEv>
 80077d2:	4603      	mov	r3, r0
 80077d4:	429c      	cmp	r4, r3
 80077d6:	d101      	bne.n	80077dc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80077dc:	2300      	movs	r3, #0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d04c      	beq.n	800787c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80077e2:	f7ff fd4f 	bl	8007284 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d028      	beq.n	800783e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	2103      	movs	r1, #3
 80077f2:	4618      	mov	r0, r3
 80077f4:	f00c fd45 	bl	8014282 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80077f8:	4602      	mov	r2, r0
 80077fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80077fe:	4611      	mov	r1, r2
 8007800:	4618      	mov	r0, r3
 8007802:	f002 f858 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8007806:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800780a:	f107 0310 	add.w	r3, r7, #16
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f003 feaf 	bl	800b574 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8007816:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800781a:	4618      	mov	r0, r3
 800781c:	f002 fc03 	bl	800a026 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3334      	adds	r3, #52	; 0x34
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f107 0210 	add.w	r2, r7, #16
 800782c:	4611      	mov	r1, r2
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	4618      	mov	r0, r3
 8007838:	f003 ff5c 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800783c:	e01e      	b.n	800787c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01a      	beq.n	800787c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3338      	adds	r3, #56	; 0x38
 800784c:	681c      	ldr	r4, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	461a      	mov	r2, r3
 8007854:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007858:	4910      	ldr	r1, [pc, #64]	; (800789c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800785a:	4618      	mov	r0, r3
 800785c:	f003 f8ea 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8007860:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007864:	4618      	mov	r0, r3
 8007866:	f002 fbb1 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800786a:	4603      	mov	r3, r0
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	47a0      	blx	r4
 8007872:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007876:	4618      	mov	r0, r3
 8007878:	f002 fbd5 	bl	800a026 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	4618      	mov	r0, r3
 8007882:	f00c fd13 	bl	80142ac <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	61da      	str	r2, [r3, #28]
}
 8007892:	bf00      	nop
 8007894:	375c      	adds	r7, #92	; 0x5c
 8007896:	46bd      	mov	sp, r7
 8007898:	bd90      	pop	{r4, r7, pc}
 800789a:	bf00      	nop
 800789c:	08020824 	.word	0x08020824

080078a0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	2102      	movs	r1, #2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f00c fd21 	bl	80142f8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80078b6:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d007      	beq.n	80078d0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	2102      	movs	r1, #2
 80078c6:	4618      	mov	r0, r3
 80078c8:	f00c fcdb 	bl	8014282 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80078cc:	4603      	mov	r3, r0
 80078ce:	e000      	b.n	80078d2 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	08020864 	.word	0x08020864

080078e0 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	4a05      	ldr	r2, [pc, #20]	; (8007900 <_ZN11FailFailureD1Ev+0x20>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f003 feff 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	08023868 	.word	0x08023868

08007904 <_ZN11FailFailureD0Ev>:
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ffe7 	bl	80078e0 <_ZN11FailFailureD1Ev>
 8007912:	2134      	movs	r1, #52	; 0x34
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fc1f 	bl	8007158 <_ZdlPvj>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	4a06      	ldr	r2, [pc, #24]	; (8007978 <_ZN19MockFailureReporterC1Ev+0x24>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	711a      	strb	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	08024a44 	.word	0x08024a44

0800797c <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	4a04      	ldr	r2, [pc, #16]	; (8007998 <_ZN19MockFailureReporterD1Ev+0x1c>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	08024a44 	.word	0x08024a44

0800799c <_ZN19MockFailureReporterD0Ev>:
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff ffe9 	bl	800797c <_ZN19MockFailureReporterD1Ev>
 80079aa:	2108      	movs	r1, #8
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fbd3 	bl	8007158 <_ZdlPvj>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	4a05      	ldr	r2, [pc, #20]	; (80079dc <_ZN11MockFailureD1Ev+0x20>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f003 fe91 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	080239bc 	.word	0x080239bc

080079e0 <_ZN11MockFailureD0Ev>:
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ffe7 	bl	80079bc <_ZN11MockFailureD1Ev>
 80079ee:	2134      	movs	r1, #52	; 0x34
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff fbb1 	bl	8007158 <_ZdlPvj>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	4a16      	ldr	r2, [pc, #88]	; (8007a64 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f001 ff9f 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 020c 	add.w	r2, r3, #12
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f001 ff96 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	f102 0418 	add.w	r4, r2, #24
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	629a      	str	r2, [r3, #40]	; 0x28
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd90      	pop	{r4, r7, pc}
 8007a64:	08024a84 	.word	0x08024a84

08007a68 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8007a72:	f107 030c 	add.w	r3, r7, #12
 8007a76:	4916      	ldr	r1, [pc, #88]	; (8007ad0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f001 ff1c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f002 fb1f 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4810      	ldr	r0, [pc, #64]	; (8007ad4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8007a94:	f000 ff70 	bl	8008978 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	e000      	b.n	8007a9e <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8007a9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	f107 030c 	add.w	r3, r7, #12
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f002 fabe 	bl	800a026 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	33a8      	adds	r3, #168	; 0xa8
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6978      	ldr	r0, [r7, #20]
 8007ab6:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	33ac      	adds	r3, #172	; 0xac
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	4798      	blx	r3
    return mock_support;
 8007ac4:	697b      	ldr	r3, [r7, #20]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08020868 	.word	0x08020868
 8007ad4:	20000604 	.word	0x20000604

08007ad8 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8007ae2:	4a21      	ldr	r2, [pc, #132]	; (8007b68 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	609a      	str	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	731a      	strb	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f103 0218 	add.w	r2, r3, #24
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	615a      	str	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3318      	adds	r3, #24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff ff23 	bl	8007954 <_ZN19MockFailureReporterC1Ev>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3320      	adds	r3, #32
 8007b12:	4618      	mov	r0, r3
 8007b14:	f010 fefc 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3330      	adds	r3, #48	; 0x30
 8007b32:	4618      	mov	r0, r3
 8007b34:	f014 fbea 	bl	801c30c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3338      	adds	r3, #56	; 0x38
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f014 faf4 	bl	801c12a <_ZN18MockNamedValueListC1Ev>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	333c      	adds	r3, #60	; 0x3c
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 ff08 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f894 	bl	8007c86 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	08023894 	.word	0x08023894

08007b6c <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <_ZN11MockSupportD1Ev+0x40>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	333c      	adds	r3, #60	; 0x3c
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f002 fa51 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3330      	adds	r3, #48	; 0x30
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f014 fbd3 	bl	801c334 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3320      	adds	r3, #32
 8007b92:	4618      	mov	r0, r3
 8007b94:	f010 fed0 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff feed 	bl	800797c <_ZN19MockFailureReporterD1Ev>
{
}
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	08023894 	.word	0x08023894

08007bb0 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
}
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ffd7 	bl	8007b6c <_ZN11MockSupportD1Ev>
 8007bbe:	2148      	movs	r1, #72	; 0x48
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff fac9 	bl	8007158 <_ZdlPvj>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3310      	adds	r3, #16
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	78f9      	ldrb	r1, [r7, #3]
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
}
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3318      	adds	r3, #24
 8007c0c:	e000      	b.n	8007c10 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	33c8      	adds	r3, #200	; 0xc8
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6952      	ldr	r2, [r2, #20]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3338      	adds	r3, #56	; 0x38
 8007c36:	4618      	mov	r0, r3
 8007c38:	f014 fb0d 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01c      	beq.n	8007c7e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 ff26 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8007c5c:	68f9      	ldr	r1, [r7, #12]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 ff1a 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007c64:	4603      	mov	r3, r0
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	32a4      	adds	r2, #164	; 0xa4
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	6949      	ldr	r1, [r1, #20]
 8007c70:	4618      	mov	r0, r3
 8007c72:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f014 f9f7 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	e7df      	b.n	8007c3e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d102      	bne.n	8007c9c <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	e000      	b.n	8007c9e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6113      	str	r3, [r2, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3330      	adds	r3, #48	; 0x30
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f012 fb10 	bl	801a2e0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 8007cc8:	b590      	push	{r4, r7, lr}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3330      	adds	r3, #48	; 0x30
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f014 fb77 	bl	801c3d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3338      	adds	r3, #56	; 0x38
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f014 fab5 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8007cec:	6178      	str	r0, [r7, #20]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01c      	beq.n	8007d2e <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 8007cf4:	6979      	ldr	r1, [r7, #20]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fece 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bf14      	ite	ne
 8007d02:	2301      	movne	r3, #1
 8007d04:	2300      	moveq	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8007d0c:	6979      	ldr	r1, [r7, #20]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fec2 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007d14:	4603      	mov	r3, r0
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	32b0      	adds	r2, #176	; 0xb0
 8007d1a:	6814      	ldr	r4, [r2, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68b9      	ldr	r1, [r7, #8]
 8007d20:	4618      	mov	r0, r3
 8007d22:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007d24:	6978      	ldr	r0, [r7, #20]
 8007d26:	f014 f99f 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8007d2a:	6178      	str	r0, [r7, #20]
 8007d2c:	e7df      	b.n	8007cee <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd90      	pop	{r4, r7, pc}

08007d36 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 8007d36:	b590      	push	{r4, r7, lr}
 8007d38:	b087      	sub	sp, #28
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3330      	adds	r3, #48	; 0x30
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f014 fb5c 	bl	801c408 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3338      	adds	r3, #56	; 0x38
 8007d54:	4618      	mov	r0, r3
 8007d56:	f014 fa7e 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8007d5a:	6178      	str	r0, [r7, #20]
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01c      	beq.n	8007d9c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 8007d62:	6979      	ldr	r1, [r7, #20]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fe97 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 8007d7a:	6979      	ldr	r1, [r7, #20]
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fe8b 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007d82:	4603      	mov	r3, r0
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	32b4      	adds	r2, #180	; 0xb4
 8007d88:	6814      	ldr	r4, [r2, #0]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f014 f968 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8007d98:	6178      	str	r0, [r7, #20]
 8007d9a:	e7df      	b.n	8007d5c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8007d9c:	bf00      	nop
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3330      	adds	r3, #48	; 0x30
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f014 fb93 	bl	801c4e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3338      	adds	r3, #56	; 0x38
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f014 fa49 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01b      	beq.n	8007e04 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fe62 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bf14      	ite	ne
 8007dda:	2301      	movne	r3, #1
 8007ddc:	2300      	moveq	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8007de4:	68f9      	ldr	r1, [r7, #12]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fe56 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007dec:	4603      	mov	r3, r0
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	32b8      	adds	r2, #184	; 0xb8
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f014 f934 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	e7e0      	b.n	8007dc6 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8007e04:	bf00      	nop
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3330      	adds	r3, #48	; 0x30
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f014 faba 	bl	801c392 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3338      	adds	r3, #56	; 0x38
 8007e22:	4618      	mov	r0, r3
 8007e24:	f014 fa17 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01a      	beq.n	8007e66 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fe30 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	2300      	moveq	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d009      	beq.n	8007e5c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8007e48:	68f9      	ldr	r1, [r7, #12]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fe24 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007e50:	4603      	mov	r3, r0
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	32bc      	adds	r2, #188	; 0xbc
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f014 f903 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	e7e1      	b.n	8007e2a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <_ZN11MockSupport5clearEv+0x1a>
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	3204      	adds	r2, #4
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 8007e96:	f00e fe0d 	bl	8016ab4 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3320      	adds	r3, #32
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f011 f937 	bl	8019112 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3338      	adds	r3, #56	; 0x38
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f014 f9c3 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d01a      	beq.n	8007f0e <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fddc 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8007ee0:	60b8      	str	r0, [r7, #8]
        if (support) {
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00d      	beq.n	8007f04 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	339c      	adds	r3, #156	; 0x9c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68b8      	ldr	r0, [r7, #8]
 8007ef2:	4798      	blx	r3
            delete support;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <_ZN11MockSupport5clearEv+0x96>
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	3204      	adds	r2, #4
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f014 f8af 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	e7e1      	b.n	8007ed2 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3338      	adds	r3, #56	; 0x38
 8007f12:	4618      	mov	r0, r3
 8007f14:	f014 f917 	bl	801c146 <_ZN18MockNamedValueList5clearEv>
}
 8007f18:	bf00      	nop
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	731a      	strb	r2, [r3, #12]
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8007f3c:	b590      	push	{r4, r7, lr}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	333c      	adds	r3, #60	; 0x3c
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f002 f859 	bl	800a004 <_ZNK12SimpleString7isEmptyEv>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f001 fcff 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 8007f60:	e021      	b.n	8007fa6 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8007f68:	f107 0318 	add.w	r3, r7, #24
 8007f6c:	4910      	ldr	r1, [pc, #64]	; (8007fb0 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 fca1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8007f74:	f107 0310 	add.w	r3, r7, #16
 8007f78:	f107 0218 	add.w	r2, r7, #24
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 f8b3 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f107 0110 	add.w	r1, r7, #16
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f002 f8ac 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8007f92:	f107 0310 	add.w	r3, r7, #16
 8007f96:	4618      	mov	r0, r3
 8007f98:	f002 f845 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8007f9c:	f107 0318 	add.w	r3, r7, #24
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f002 f840 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	3724      	adds	r7, #36	; 0x24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd90      	pop	{r4, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	0802086c 	.word	0x0802086c

08007fb4 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3314      	adds	r3, #20
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	2101      	movs	r1, #1
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
 8007fce:	4603      	mov	r3, r0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3314      	adds	r3, #20
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	2100      	movs	r1, #0
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800800e:	f083 0301 	eor.w	r3, r3, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8008018:	f010 fbf6 	bl	8018808 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800801c:	4603      	mov	r3, r0
 800801e:	e041      	b.n	80080a4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fb1b 	bl	800865c <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 8008026:	22a5      	movs	r2, #165	; 0xa5
 8008028:	4920      	ldr	r1, [pc, #128]	; (80080ac <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800802a:	2070      	movs	r0, #112	; 0x70
 800802c:	f7ff f880 	bl	8007130 <_ZnwjPKci>
 8008030:	4604      	mov	r4, r0
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4620      	mov	r0, r4
 8008036:	f00f f8f3 	bl	8017220 <_ZN23MockCheckedExpectedCallC1Ej>
 800803a:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	681c      	ldr	r4, [r3, #0]
 8008044:	f107 0314 	add.w	r3, r7, #20
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff ff75 	bl	8007f3c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 8008052:	f107 0314 	add.w	r3, r7, #20
 8008056:	4619      	mov	r1, r3
 8008058:	69f8      	ldr	r0, [r7, #28]
 800805a:	47a0      	blx	r4
 800805c:	f107 0314 	add.w	r3, r7, #20
 8008060:	4618      	mov	r0, r3
 8008062:	f001 ffe0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	7b1b      	ldrb	r3, [r3, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d013      	beq.n	8008096 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3310      	adds	r3, #16
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	6892      	ldr	r2, [r2, #8]
 800807a:	1c50      	adds	r0, r2, #1
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	6891      	ldr	r1, [r2, #8]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	440a      	add	r2, r1
 8008084:	4601      	mov	r1, r0
 8008086:	69f8      	ldr	r0, [r7, #28]
 8008088:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	441a      	add	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3320      	adds	r3, #32
 800809a:	69f9      	ldr	r1, [r7, #28]
 800809c:	4618      	mov	r0, r3
 800809e:	f010 fd89 	bl	8018bb4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 80080a2:	69fb      	ldr	r3, [r7, #28]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3724      	adds	r7, #36	; 0x24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd90      	pop	{r4, r7, pc}
 80080ac:	08020870 	.word	0x08020870

080080b0 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685d      	ldr	r5, [r3, #4]
 80080c6:	22b1      	movs	r2, #177	; 0xb1
 80080c8:	490a      	ldr	r1, [pc, #40]	; (80080f4 <_ZN11MockSupport16createActualCallEv+0x44>)
 80080ca:	202c      	movs	r0, #44	; 0x2c
 80080cc:	f7ff f830 	bl	8007130 <_ZnwjPKci>
 80080d0:	4604      	mov	r4, r0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3320      	adds	r3, #32
 80080da:	4629      	mov	r1, r5
 80080dc:	4620      	mov	r0, r4
 80080de:	f00c fbdb 	bl	8014898 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bdb0      	pop	{r4, r5, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	08020870 	.word	0x08020870

080080f8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00d      	beq.n	8008128 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3320      	adds	r3, #32
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f010 fd2a 	bl	8018b6c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 8008118:	4603      	mov	r3, r0
 800811a:	f083 0301 	eor.w	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8008132:	b590      	push	{r4, r7, lr}
 8008134:	b087      	sub	sp, #28
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800813c:	f107 030c 	add.w	r3, r7, #12
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff fef9 	bl	8007f3c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d014      	beq.n	800817c <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	33c4      	adds	r3, #196	; 0xc4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
        delete lastActualFunctionCall_;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	3204      	adds	r2, #4
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008182:	f083 0301 	eor.w	r3, r3, #1
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800818c:	f00e fcbe 	bl	8016b0c <_ZN21MockIgnoredActualCall8instanceEv>
 8008190:	4603      	mov	r3, r0
 8008192:	461c      	mov	r4, r3
 8008194:	e02f      	b.n	80081f6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 80081a0:	f00e fc6e 	bl	8016a80 <_ZN19MockActualCallTrace8instanceEv>
 80081a4:	4603      	mov	r3, r0
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	3208      	adds	r2, #8
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	f107 010c 	add.w	r1, r7, #12
 80081b0:	4618      	mov	r0, r3
 80081b2:	4790      	blx	r2
 80081b4:	4604      	mov	r4, r0
 80081b6:	e01e      	b.n	80081f6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 80081b8:	f107 030c 	add.w	r3, r7, #12
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff ff9a 	bl	80080f8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 80081ca:	f00e fc9f 	bl	8016b0c <_ZN21MockIgnoredActualCall8instanceEv>
 80081ce:	4603      	mov	r3, r0
 80081d0:	461c      	mov	r4, r3
 80081d2:	e010      	b.n	80081f6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	33c0      	adds	r3, #192	; 0xc0
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
 80081e0:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f107 020c 	add.w	r2, r7, #12
 80081ee:	4611      	mov	r1, r2
 80081f0:	6978      	ldr	r0, [r7, #20]
 80081f2:	4798      	blx	r3
    return *call;
 80081f4:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 80081f6:	f107 030c 	add.w	r3, r7, #12
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 ff13 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008200:	4623      	mov	r3, r4
}
 8008202:	4618      	mov	r0, r3
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	bd90      	pop	{r4, r7, pc}

0800820a <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	4618      	mov	r0, r3
 8008220:	f014 f819 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01a      	beq.n	8008262 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800822c:	68f9      	ldr	r1, [r7, #12]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fc32 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	bf14      	ite	ne
 800823a:	2301      	movne	r3, #1
 800823c:	2300      	moveq	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8008244:	68f9      	ldr	r1, [r7, #12]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fc26 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800824c:	4603      	mov	r3, r0
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	3290      	adds	r2, #144	; 0x90
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	4618      	mov	r0, r3
 8008256:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f013 ff05 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	e7e1      	b.n	8008226 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3338      	adds	r3, #56	; 0x38
 800827e:	4618      	mov	r0, r3
 8008280:	f013 ffe9 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01a      	beq.n	80082c2 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800828c:	68f9      	ldr	r1, [r7, #12]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc02 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	bf14      	ite	ne
 800829a:	2301      	movne	r3, #1
 800829c:	2300      	moveq	r3, #0
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <_ZN11MockSupport7disableEv+0x4e>
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fbf6 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80082ac:	4603      	mov	r3, r0
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	3284      	adds	r2, #132	; 0x84
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f013 fed5 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	e7e1      	b.n	8008286 <_ZN11MockSupport7disableEv+0x1c>
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3338      	adds	r3, #56	; 0x38
 80082de:	4618      	mov	r0, r3
 80082e0:	f013 ffb9 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01a      	beq.n	8008322 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 80082ec:	68f9      	ldr	r1, [r7, #12]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fbd2 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bf14      	ite	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	2300      	moveq	r3, #0
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <_ZN11MockSupport6enableEv+0x4e>
 8008304:	68f9      	ldr	r1, [r7, #12]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fbc6 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800830c:	4603      	mov	r3, r0
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	3288      	adds	r2, #136	; 0x88
 8008312:	6812      	ldr	r2, [r2, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f013 fea5 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	e7e1      	b.n	80082e6 <_ZN11MockSupport6enableEv+0x1c>
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3338      	adds	r3, #56	; 0x38
 8008342:	4618      	mov	r0, r3
 8008344:	f013 ff87 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01b      	beq.n	8008388 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fba0 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	bf14      	ite	ne
 800835e:	2301      	movne	r3, #1
 8008360:	2300      	moveq	r3, #0
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <_ZN11MockSupport7tracingEb+0x54>
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb94 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008370:	4603      	mov	r3, r0
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	328c      	adds	r2, #140	; 0x8c
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	78f9      	ldrb	r1, [r7, #3]
 800837a:	4618      	mov	r0, r3
 800837c:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f013 fe72 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	e7e0      	b.n	800834a <_ZN11MockSupport7tracingEb+0x20>
}
 8008388:	bf00      	nop
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3320      	adds	r3, #32
 800839c:	4618      	mov	r0, r3
 800839e:	f010 fbc1 	bl	8018b24 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 80083a2:	4603      	mov	r3, r0
 80083a4:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3338      	adds	r3, #56	; 0x38
 80083aa:	4618      	mov	r0, r3
 80083ac:	f013 ff53 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80083b0:	60b8      	str	r0, [r7, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01f      	beq.n	80083f8 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fb6c 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bf14      	ite	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	2300      	moveq	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00e      	beq.n	80083ee <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fb60 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80083d8:	4603      	mov	r3, r0
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	3298      	adds	r2, #152	; 0x98
 80083de:	6812      	ldr	r2, [r2, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	4790      	blx	r2
 80083e4:	4603      	mov	r3, r0
 80083e6:	461a      	mov	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80083ee:	68b8      	ldr	r0, [r7, #8]
 80083f0:	f013 fe3a 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 80083f4:	60b8      	str	r0, [r7, #8]
 80083f6:	e7dc      	b.n	80083b2 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf14      	ite	ne
 80083fe:	2301      	movne	r3, #1
 8008400:	2300      	moveq	r3, #0
 8008402:	b2db      	uxtb	r3, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d010      	beq.n	800843e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	33bc      	adds	r3, #188	; 0xbc
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4610      	mov	r0, r2
 800842c:	4798      	blx	r3
 800842e:	4603      	mov	r3, r0
 8008430:	f083 0301 	eor.w	r3, r3, #1
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 8008444:	2300      	movs	r3, #0
 8008446:	e02a      	b.n	800849e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3338      	adds	r3, #56	; 0x38
 800844c:	4618      	mov	r0, r3
 800844e:	f013 ff02 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d020      	beq.n	800849c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb1b 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00f      	beq.n	8008488 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008468:	68f9      	ldr	r1, [r7, #12]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fb14 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008470:	4603      	mov	r3, r0
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff ffca 	bl	800840c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8008478:	4603      	mov	r3, r0
 800847a:	f083 0301 	eor.w	r3, r3, #1
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 8008488:	2300      	movs	r3, #0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800848e:	2300      	movs	r3, #0
 8008490:	e005      	b.n	800849e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f013 fde8 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	e7db      	b.n	8008454 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800849c:	2301      	movs	r3, #1
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b092      	sub	sp, #72	; 0x48
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 80084ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084b2:	4618      	mov	r0, r3
 80084b4:	f010 fa2c 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f103 0220 	add.w	r2, r3, #32
 80084be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f010 fbf3 	bl	8018cb0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3338      	adds	r3, #56	; 0x38
 80084ce:	4618      	mov	r0, r3
 80084d0:	f013 fec1 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80084d4:	6478      	str	r0, [r7, #68]	; 0x44
 80084d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01d      	beq.n	8008518 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 80084dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fada 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	2300      	moveq	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80084f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 face 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f103 0220 	add.w	r2, r3, #32
 8008502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f010 fbd1 	bl	8018cb0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800850e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008510:	f013 fdaa 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8008514:	6478      	str	r0, [r7, #68]	; 0x44
 8008516:	e7de      	b.n	80084d6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691a      	ldr	r2, [r3, #16]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	330c      	adds	r3, #12
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4610      	mov	r0, r2
 8008528:	4798      	blx	r3
 800852a:	4601      	mov	r1, r0
 800852c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008530:	f107 0308 	add.w	r3, r7, #8
 8008534:	4618      	mov	r0, r3
 8008536:	f011 f9f5 	bl	8019924 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	33c4      	adds	r3, #196	; 0xc4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f107 0208 	add.w	r2, r7, #8
 8008546:	4611      	mov	r1, r2
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800854c:	f107 0308 	add.w	r3, r7, #8
 8008550:	4618      	mov	r0, r3
 8008552:	f000 fe6d 	bl	8009230 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8008556:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800855a:	4618      	mov	r0, r3
 800855c:	f010 f9ec 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 8008560:	bf00      	nop
 8008562:	3748      	adds	r7, #72	; 0x48
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b092      	sub	sp, #72	; 0x48
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008570:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008574:	4618      	mov	r0, r3
 8008576:	f010 f9cb 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f103 0220 	add.w	r2, r3, #32
 8008580:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f010 fb92 	bl	8018cb0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3338      	adds	r3, #56	; 0x38
 8008590:	4618      	mov	r0, r3
 8008592:	f013 fe60 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8008596:	6478      	str	r0, [r7, #68]	; 0x44
 8008598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	d01d      	beq.n	80085da <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800859e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa79 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bf14      	ite	ne
 80085ac:	2301      	movne	r3, #1
 80085ae:	2300      	moveq	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00c      	beq.n	80085d0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80085b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa6d 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80085be:	4603      	mov	r3, r0
 80085c0:	f103 0220 	add.w	r2, r3, #32
 80085c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f010 fb70 	bl	8018cb0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80085d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085d2:	f013 fd49 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 80085d6:	6478      	str	r0, [r7, #68]	; 0x44
 80085d8:	e7de      	b.n	8008598 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330c      	adds	r3, #12
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	4601      	mov	r1, r0
 80085ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80085f2:	f107 0308 	add.w	r3, r7, #8
 80085f6:	4618      	mov	r0, r3
 80085f8:	f011 fa38 	bl	8019a6c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	33c4      	adds	r3, #196	; 0xc4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f107 0208 	add.w	r2, r7, #8
 8008608:	4611      	mov	r1, r2
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800860e:	f107 0308 	add.w	r3, r7, #8
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fe2e 	bl	8009274 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8008618:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800861c:	4618      	mov	r0, r3
 800861e:	f010 f98b 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 8008622:	bf00      	nop
 8008624:	3748      	adds	r7, #72	; 0x48
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
    clear();
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	339c      	adds	r3, #156	; 0x9c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 8008664:	f008 fd0a 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8008668:	4603      	mov	r3, r0
 800866a:	4618      	mov	r0, r3
 800866c:	f007 fb78 	bl	800fd60 <_ZN10UtestShell10countCheckEv>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	33c4      	adds	r3, #196	; 0xc4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4610      	mov	r0, r2
 8008698:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3338      	adds	r3, #56	; 0x38
 800869e:	4618      	mov	r0, r3
 80086a0:	f013 fdd9 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d023      	beq.n	80086f4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 80086ac:	68f9      	ldr	r1, [r7, #12]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9f2 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f9eb 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80086c2:	4603      	mov	r3, r0
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 80086ce:	2300      	movs	r3, #0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f9de 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80086dc:	4603      	mov	r3, r0
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	32c4      	adds	r2, #196	; 0xc4
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f013 fcbc 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	e7d8      	b.n	80086a6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3320      	adds	r3, #32
 8008708:	4618      	mov	r0, r3
 800870a:	f010 f947 	bl	801899c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 8008714:	2301      	movs	r3, #1
 8008716:	e027      	b.n	8008768 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3338      	adds	r3, #56	; 0x38
 800871c:	4618      	mov	r0, r3
 800871e:	f013 fd9a 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01d      	beq.n	8008766 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f9b3 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9ac 	bl	8008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008740:	4603      	mov	r3, r0
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff ffda 	bl	80086fc <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8008758:	2301      	movs	r3, #1
 800875a:	e005      	b.n	8008768 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f013 fc83 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	e7de      	b.n	8008724 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff7d 	bl	8008678 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff fe44 	bl	800840c <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3398      	adds	r3, #152	; 0x98
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <_ZN11MockSupport17checkExpectationsEv+0x32>
 80087a0:	2300      	movs	r3, #0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d002      	beq.n	80087ac <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fe7d 	bl	80084a6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff ffa5 	bl	80086fc <_ZN11MockSupport18hasCallsOutOfOrderEv>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff fed5 	bl	8008568 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3338      	adds	r3, #56	; 0x38
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f013 fd0e 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bf14      	ite	ne
 80087e2:	2301      	movne	r3, #1
 80087e4:	2300      	moveq	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 80087f0:	b590      	push	{r4, r7, lr}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3338      	adds	r3, #56	; 0x38
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f013 fcf9 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008806:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d111      	bne.n	8008832 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800880e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008812:	490a      	ldr	r1, [pc, #40]	; (800883c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 8008814:	2038      	movs	r0, #56	; 0x38
 8008816:	f7fe fc8b 	bl	8007130 <_ZnwjPKci>
 800881a:	4604      	mov	r4, r0
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	4620      	mov	r0, r4
 8008820:	f011 fd6e 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008824:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3338      	adds	r3, #56	; 0x38
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	4618      	mov	r0, r3
 800882e:	f013 fcad 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 8008832:	68fb      	ldr	r3, [r7, #12]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	bd90      	pop	{r4, r7, pc}
 800883c:	08020870 	.word	0x08020870

08008840 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff ffcd 	bl	80087f0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 8008856:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3344      	adds	r3, #68	; 0x44
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	6978      	ldr	r0, [r7, #20]
 8008866:	4798      	blx	r3
}
 8008868:	bf00      	nop
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	3338      	adds	r3, #56	; 0x38
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4618      	mov	r0, r3
 8008884:	f013 fcb8 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8008888:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d111      	bne.n	80088b4 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	490b      	ldr	r1, [pc, #44]	; (80088c4 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 8008896:	4618      	mov	r0, r3
 8008898:	f001 f80d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4619      	mov	r1, r3
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f011 fd2c 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 80088a8:	f107 0314 	add.w	r3, r7, #20
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fbba 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80088b2:	e003      	b.n	80088bc <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 80088b4:	69f9      	ldr	r1, [r7, #28]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff f8a2 	bl	8007a00 <_ZN14MockNamedValueC1ERKS_>
}
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	08020868 	.word	0x08020868

080088c8 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 80088d2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80088d6:	4927      	ldr	r1, [pc, #156]	; (8008974 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 80088d8:	2048      	movs	r0, #72	; 0x48
 80088da:	f7fe fc29 	bl	8007130 <_ZnwjPKci>
 80088de:	4604      	mov	r4, r0
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff f8f8 	bl	8007ad8 <_ZN11MockSupportC1ERK12SimpleString>
 80088e8:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	33a4      	adds	r3, #164	; 0xa4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6952      	ldr	r2, [r2, #20]
 80088f6:	4611      	mov	r1, r2
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3390      	adds	r3, #144	; 0x90
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008918:	f083 0301 	eor.w	r3, r3, #1
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3384      	adds	r3, #132	; 0x84
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7b1b      	ldrb	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	4798      	blx	r3

    newMock->tracing(tracing_);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	338c      	adds	r3, #140	; 0x8c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8008950:	4611      	mov	r1, r2
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	33b8      	adds	r3, #184	; 0xb8
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	3230      	adds	r2, #48	; 0x30
 8008962:	4611      	mov	r1, r2
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	4798      	blx	r3
    return newMock;
 8008968:	68fb      	ldr	r3, [r7, #12]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}
 8008972:	bf00      	nop
 8008974:	08020870 	.word	0x08020870

08008978 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8008978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800897a:	b0ab      	sub	sp, #172	; 0xac
 800897c:	af04      	add	r7, sp, #16
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8008982:	f107 0308 	add.w	r3, r7, #8
 8008986:	4941      	ldr	r1, [pc, #260]	; (8008a8c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 8008988:	4618      	mov	r0, r3
 800898a:	f000 ff94 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fbc3 	bl	800a120 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800899a:	f107 0308 	add.w	r3, r7, #8
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff10 	bl	80087c6 <_ZN11MockSupport7hasDataERK12SimpleString>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d048      	beq.n	8008a3e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 80089ac:	f008 fb66 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80089b0:	4604      	mov	r4, r0
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	3324      	adds	r3, #36	; 0x24
 80089b6:	681d      	ldr	r5, [r3, #0]
 80089b8:	f107 0318 	add.w	r3, r7, #24
 80089bc:	f107 0208 	add.w	r2, r7, #8
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff ff54 	bl	8008870 <_ZN11MockSupport7getDataERK12SimpleString>
 80089c8:	f107 0310 	add.w	r3, r7, #16
 80089cc:	f107 0218 	add.w	r2, r7, #24
 80089d0:	4611      	mov	r1, r2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f011 ff63 	bl	801a89e <_ZNK14MockNamedValue7getTypeEv>
 80089d8:	f107 0310 	add.w	r3, r7, #16
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 faf5 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80089e2:	4606      	mov	r6, r0
 80089e4:	f008 fb5a 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80089e8:	4603      	mov	r3, r0
 80089ea:	9302      	str	r3, [sp, #8]
 80089ec:	f240 13bd 	movw	r3, #445	; 0x1bd
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	4b27      	ldr	r3, [pc, #156]	; (8008a90 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	2300      	movs	r3, #0
 80089f8:	4632      	mov	r2, r6
 80089fa:	4926      	ldr	r1, [pc, #152]	; (8008a94 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 80089fc:	4620      	mov	r0, r4
 80089fe:	47a8      	blx	r5
 8008a00:	f107 0310 	add.w	r3, r7, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fb0e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008a0a:	f107 0318 	add.w	r3, r7, #24
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f011 fca0 	bl	801a354 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8008a14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a18:	f107 0208 	add.w	r2, r7, #8
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff ff26 	bl	8008870 <_ZN11MockSupport7getDataERK12SimpleString>
 8008a24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f012 fa51 	bl	801aed0 <_ZNK14MockNamedValue16getObjectPointerEv>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	bf00      	nop
 8008a32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a36:	4618      	mov	r0, r3
 8008a38:	f011 fc8c 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008a3c:	e01b      	b.n	8008a76 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff41 	bl	80088c8 <_ZN11MockSupport5cloneERK12SimpleString>
 8008a46:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 8008a4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a4e:	4911      	ldr	r1, [pc, #68]	; (8008a94 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 ff30 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8008a56:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8008a5a:	f107 0108 	add.w	r1, r7, #8
 8008a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff feec 	bl	8008840 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 8008a68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f001 fada 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return newMock;
 8008a72:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f001 fad3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008a80:	4623      	mov	r3, r4
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	379c      	adds	r7, #156	; 0x9c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	08020888 	.word	0x08020888
 8008a90:	08020870 	.word	0x08020870
 8008a94:	080208a8 	.word	0x080208a8

08008a98 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 8008a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	b08b      	sub	sp, #44	; 0x2c
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 8008aa4:	2500      	movs	r5, #0
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	f107 0308 	add.w	r3, r7, #8
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f013 fb28 	bl	801c104 <_ZNK22MockNamedValueListNode7getTypeEv>
 8008ab4:	f04f 0801 	mov.w	r8, #1
 8008ab8:	f107 0310 	add.w	r3, r7, #16
 8008abc:	492e      	ldr	r1, [pc, #184]	; (8008b78 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fef9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8008ac4:	f04f 0901 	mov.w	r9, #1
 8008ac8:	f107 0210 	add.w	r2, r7, #16
 8008acc:	f107 0308 	add.w	r3, r7, #8
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 fab3 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d01a      	beq.n	8008b14 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8008ade:	f107 0318 	add.w	r3, r7, #24
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f013 fafa 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 8008aea:	2501      	movs	r5, #1
 8008aec:	f107 0320 	add.w	r3, r7, #32
 8008af0:	4922      	ldr	r1, [pc, #136]	; (8008b7c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fedf 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8008af8:	2601      	movs	r6, #1
 8008afa:	f107 0220 	add.w	r2, r7, #32
 8008afe:	f107 0318 	add.w	r3, r7, #24
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 ff54 	bl	80099b2 <_ZNK12SimpleString8containsERKS_>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8008b10:	2401      	movs	r4, #1
 8008b12:	e000      	b.n	8008b16 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 8008b14:	2400      	movs	r4, #0
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d004      	beq.n	8008b24 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 8008b1a:	f107 0320 	add.w	r3, r7, #32
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 fa81 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008b24:	2d00      	cmp	r5, #0
 8008b26:	d004      	beq.n	8008b32 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 8008b28:	f107 0318 	add.w	r3, r7, #24
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 fa7a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008b32:	f1b9 0f00 	cmp.w	r9, #0
 8008b36:	d004      	beq.n	8008b42 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 8008b38:	f107 0310 	add.w	r3, r7, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fa72 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008b42:	f1b8 0f00 	cmp.w	r8, #0
 8008b46:	d004      	beq.n	8008b52 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 fa6a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8008b52:	2c00      	cmp	r4, #0
 8008b54:	d00a      	beq.n	8008b6c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 8008b56:	6838      	ldr	r0, [r7, #0]
 8008b58:	f013 fa92 	bl	801c080 <_ZN22MockNamedValueListNode4itemEv>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	32a0      	adds	r2, #160	; 0xa0
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	4790      	blx	r2
 8008b68:	4603      	mov	r3, r0
 8008b6a:	e000      	b.n	8008b6e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	372c      	adds	r7, #44	; 0x2c
 8008b72:	46bd      	mov	sp, r7
 8008b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b78:	080208a8 	.word	0x080208a8
 8008b7c:	08020888 	.word	0x08020888

08008b80 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <_ZN11MockSupport11returnValueEv+0x28>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3354      	adds	r3, #84	; 0x54
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4798      	blx	r3
 8008ba6:	e010      	b.n	8008bca <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 8008ba8:	f107 0308 	add.w	r3, r7, #8
 8008bac:	4909      	ldr	r1, [pc, #36]	; (8008bd4 <_ZN11MockSupport11returnValueEv+0x54>)
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fe81 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8008bb4:	f107 0308 	add.w	r3, r7, #8
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f011 fba0 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8008bc0:	f107 0308 	add.w	r3, r7, #8
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 fa2e 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	08020868 	.word	0x08020868

08008bd8 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 8008bd8:	b590      	push	{r4, r7, lr}
 8008bda:	b091      	sub	sp, #68	; 0x44
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3320      	adds	r3, #32
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f107 0208 	add.w	r2, r7, #8
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	4610      	mov	r0, r2
 8008bf0:	4798      	blx	r3
 8008bf2:	f107 0308 	add.w	r3, r7, #8
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f011 fe60 	bl	801a8bc <_ZNK14MockNamedValue12getBoolValueEv>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461c      	mov	r4, r3
 8008c00:	bf00      	nop
 8008c02:	f107 0308 	add.w	r3, r7, #8
 8008c06:	4618      	mov	r0, r3
 8008c08:	f011 fba4 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008c0c:	4623      	mov	r3, r4
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3744      	adds	r7, #68	; 0x44
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd90      	pop	{r4, r7, pc}

08008c16 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 8008c16:	b590      	push	{r4, r7, lr}
 8008c18:	b091      	sub	sp, #68	; 0x44
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3320      	adds	r3, #32
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f107 0208 	add.w	r2, r7, #8
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	f107 0308 	add.w	r3, r7, #8
 8008c34:	4618      	mov	r0, r3
 8008c36:	f011 fe69 	bl	801a90c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	bf00      	nop
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f011 fb86 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008c48:	4623      	mov	r3, r4
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3744      	adds	r7, #68	; 0x44
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd90      	pop	{r4, r7, pc}

08008c52 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 8008c52:	b590      	push	{r4, r7, lr}
 8008c54:	b091      	sub	sp, #68	; 0x44
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3320      	adds	r3, #32
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f107 0208 	add.w	r2, r7, #8
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	f107 0308 	add.w	r3, r7, #8
 8008c70:	4618      	mov	r0, r3
 8008c72:	f011 fe9b 	bl	801a9ac <_ZNK14MockNamedValue11getIntValueEv>
 8008c76:	4604      	mov	r4, r0
 8008c78:	bf00      	nop
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f011 fb68 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008c84:	4623      	mov	r3, r4
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3744      	adds	r7, #68	; 0x44
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd90      	pop	{r4, r7, pc}

08008c8e <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	331c      	adds	r3, #28
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	335c      	adds	r3, #92	; 0x5c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	4798      	blx	r3
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	e000      	b.n	8008cbc <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 8008cba:	683b      	ldr	r3, [r7, #0]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	331c      	adds	r3, #28
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	4798      	blx	r3
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3368      	adds	r3, #104	; 0x68
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	4798      	blx	r3
 8008cee:	eeb0 7a40 	vmov.f32	s14, s0
 8008cf2:	eef0 7a60 	vmov.f32	s15, s1
 8008cf6:	e001      	b.n	8008cfc <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 8008cf8:	ed97 7b00 	vldr	d7, [r7]
}
 8008cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8008d00:	eef0 0a67 	vmov.f32	s1, s15
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	331c      	adds	r3, #28
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3338      	adds	r3, #56	; 0x38
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	e000      	b.n	8008d38 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 8008d36:	683b      	ldr	r3, [r7, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	331c      	adds	r3, #28
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	e000      	b.n	8008d70 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	331c      	adds	r3, #28
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	332c      	adds	r3, #44	; 0x2c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	4798      	blx	r3
 8008da0:	4603      	mov	r3, r0
 8008da2:	e000      	b.n	8008da6 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 8008da4:	683b      	ldr	r3, [r7, #0]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	331c      	adds	r3, #28
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	4798      	blx	r3
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d007      	beq.n	8008dda <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3334      	adds	r3, #52	; 0x34
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	e000      	b.n	8008ddc <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 8008dda:	683b      	ldr	r3, [r7, #0]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	331c      	adds	r3, #28
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d007      	beq.n	8008e10 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3340      	adds	r3, #64	; 0x40
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	e000      	b.n	8008e12 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 8008e10:	683b      	ldr	r3, [r7, #0]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 8008e1a:	b590      	push	{r4, r7, lr}
 8008e1c:	b091      	sub	sp, #68	; 0x44
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3320      	adds	r3, #32
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f107 0208 	add.w	r2, r7, #8
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4610      	mov	r0, r2
 8008e32:	4798      	blx	r3
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f011 fddf 	bl	801a9fc <_ZNK14MockNamedValue15getLongIntValueEv>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	bf00      	nop
 8008e42:	f107 0308 	add.w	r3, r7, #8
 8008e46:	4618      	mov	r0, r3
 8008e48:	f011 fa84 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008e4c:	4623      	mov	r3, r4
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3744      	adds	r7, #68	; 0x44
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd90      	pop	{r4, r7, pc}

08008e56 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 8008e56:	b590      	push	{r4, r7, lr}
 8008e58:	b091      	sub	sp, #68	; 0x44
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3320      	adds	r3, #32
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f107 0208 	add.w	r2, r7, #8
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	f107 0308 	add.w	r3, r7, #8
 8008e74:	4618      	mov	r0, r3
 8008e76:	f011 fe23 	bl	801aac0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	bf00      	nop
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	4618      	mov	r0, r3
 8008e84:	f011 fa66 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008e88:	4623      	mov	r3, r4
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3744      	adds	r7, #68	; 0x44
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd90      	pop	{r4, r7, pc}
	...

08008e94 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 8008e94:	b5b0      	push	{r4, r5, r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8008e9e:	f008 f8ed 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	3368      	adds	r3, #104	; 0x68
 8008ea8:	681d      	ldr	r5, [r3, #0]
 8008eaa:	f008 f8f7 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	f240 2345 	movw	r3, #581	; 0x245
 8008eb6:	4a06      	ldr	r2, [pc, #24]	; (8008ed0 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 8008eb8:	4906      	ldr	r1, [pc, #24]	; (8008ed4 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 8008eba:	4620      	mov	r0, r4
 8008ebc:	47a8      	blx	r5
    return cpputest_longlong(0);
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7fe fd2f 	bl	8007924 <_ZN17cpputest_longlongC1Ei>
}
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	08020870 	.word	0x08020870
 8008ed4:	080208b4 	.word	0x080208b4

08008ed8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 8008ed8:	b5b0      	push	{r4, r5, r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8008ee2:	f008 f8cb 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	3368      	adds	r3, #104	; 0x68
 8008eec:	681d      	ldr	r5, [r3, #0]
 8008eee:	f008 f8d5 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	f240 234b 	movw	r3, #587	; 0x24b
 8008efa:	4a06      	ldr	r2, [pc, #24]	; (8008f14 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 8008efc:	4906      	ldr	r1, [pc, #24]	; (8008f18 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 8008efe:	4620      	mov	r0, r4
 8008f00:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8008f02:	2100      	movs	r1, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7fe fd19 	bl	800793c <_ZN18cpputest_ulonglongC1Ei>
}
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bdb0      	pop	{r4, r5, r7, pc}
 8008f12:	bf00      	nop
 8008f14:	08020870 	.word	0x08020870
 8008f18:	080208d4 	.word	0x080208d4

08008f1c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 8008f1c:	b5b0      	push	{r4, r5, r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4639      	mov	r1, r7
 8008f28:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8008f2c:	f008 f8a6 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8008f30:	4604      	mov	r4, r0
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	3368      	adds	r3, #104	; 0x68
 8008f36:	681d      	ldr	r5, [r3, #0]
 8008f38:	f008 f8b0 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	f240 2351 	movw	r3, #593	; 0x251
 8008f44:	4a06      	ldr	r2, [pc, #24]	; (8008f60 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8008f46:	4907      	ldr	r1, [pc, #28]	; (8008f64 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8008f48:	4620      	mov	r0, r4
 8008f4a:	47a8      	blx	r5
    return defaultValue;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	463b      	mov	r3, r7
 8008f52:	cb03      	ldmia	r3!, {r0, r1}
 8008f54:	6010      	str	r0, [r2, #0]
 8008f56:	6051      	str	r1, [r2, #4]
}
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f60:	08020870 	.word	0x08020870
 8008f64:	080208b4 	.word	0x080208b4

08008f68 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 8008f68:	b5b0      	push	{r4, r5, r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4639      	mov	r1, r7
 8008f74:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8008f78:	f008 f880 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	3368      	adds	r3, #104	; 0x68
 8008f82:	681d      	ldr	r5, [r3, #0]
 8008f84:	f008 f88a 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	f240 2357 	movw	r3, #599	; 0x257
 8008f90:	4a06      	ldr	r2, [pc, #24]	; (8008fac <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8008f92:	4907      	ldr	r1, [pc, #28]	; (8008fb0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8008f94:	4620      	mov	r0, r4
 8008f96:	47a8      	blx	r5
    return defaultValue;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	cb03      	ldmia	r3!, {r0, r1}
 8008fa0:	6010      	str	r0, [r2, #0]
 8008fa2:	6051      	str	r1, [r2, #4]
}
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bdb0      	pop	{r4, r5, r7, pc}
 8008fac:	08020870 	.word	0x08020870
 8008fb0:	080208d4 	.word	0x080208d4

08008fb4 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b091      	sub	sp, #68	; 0x44
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3320      	adds	r3, #32
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f107 0208 	add.w	r2, r7, #8
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4798      	blx	r3
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f011 fea8 	bl	801ad28 <_ZNK14MockNamedValue14getStringValueEv>
 8008fd8:	4604      	mov	r4, r0
 8008fda:	bf00      	nop
 8008fdc:	f107 0308 	add.w	r3, r7, #8
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f011 f9b7 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8008fe6:	4623      	mov	r3, r4
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3744      	adds	r7, #68	; 0x44
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd90      	pop	{r4, r7, pc}

08008ff0 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	ed2d 8b02 	vpush	{d8}
 8008ff6:	b090      	sub	sp, #64	; 0x40
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3320      	adds	r3, #32
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f107 0208 	add.w	r2, r7, #8
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	4610      	mov	r0, r2
 800900c:	4798      	blx	r3
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4618      	mov	r0, r3
 8009014:	f011 fe2c 	bl	801ac70 <_ZNK14MockNamedValue14getDoubleValueEv>
 8009018:	eeb0 8a40 	vmov.f32	s16, s0
 800901c:	eef0 8a60 	vmov.f32	s17, s1
 8009020:	bf00      	nop
 8009022:	f107 0308 	add.w	r3, r7, #8
 8009026:	4618      	mov	r0, r3
 8009028:	f011 f994 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 800902c:	eeb0 7a48 	vmov.f32	s14, s16
 8009030:	eef0 7a68 	vmov.f32	s15, s17
}
 8009034:	eeb0 0a47 	vmov.f32	s0, s14
 8009038:	eef0 0a67 	vmov.f32	s1, s15
 800903c:	3740      	adds	r7, #64	; 0x40
 800903e:	46bd      	mov	sp, r7
 8009040:	ecbd 8b02 	vpop	{d8}
 8009044:	bd80      	pop	{r7, pc}

08009046 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	331c      	adds	r3, #28
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d007      	beq.n	8009072 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	336c      	adds	r3, #108	; 0x6c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	e000      	b.n	8009074 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 8009072:	683b      	ldr	r3, [r7, #0]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	331c      	adds	r3, #28
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d007      	beq.n	80090a8 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3378      	adds	r3, #120	; 0x78
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
 80090a4:	4603      	mov	r3, r0
 80090a6:	e000      	b.n	80090aa <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 80090a8:	683b      	ldr	r3, [r7, #0]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	331c      	adds	r3, #28
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3380      	adds	r3, #128	; 0x80
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
 80090da:	4603      	mov	r3, r0
 80090dc:	e000      	b.n	80090e0 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 80090de:	683b      	ldr	r3, [r7, #0]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b091      	sub	sp, #68	; 0x44
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3320      	adds	r3, #32
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f107 0208 	add.w	r2, r7, #8
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4610      	mov	r0, r2
 8009100:	4798      	blx	r3
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	4618      	mov	r0, r3
 8009108:	f011 fe36 	bl	801ad78 <_ZNK14MockNamedValue15getPointerValueEv>
 800910c:	4604      	mov	r4, r0
 800910e:	bf00      	nop
 8009110:	f107 0308 	add.w	r3, r7, #8
 8009114:	4618      	mov	r0, r3
 8009116:	f011 f91d 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 800911a:	4623      	mov	r3, r4
}
 800911c:	4618      	mov	r0, r3
 800911e:	3744      	adds	r7, #68	; 0x44
 8009120:	46bd      	mov	sp, r7
 8009122:	bd90      	pop	{r4, r7, pc}

08009124 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 8009124:	b590      	push	{r4, r7, lr}
 8009126:	b091      	sub	sp, #68	; 0x44
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3320      	adds	r3, #32
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f107 0208 	add.w	r2, r7, #8
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
 800913e:	f107 0308 	add.w	r3, r7, #8
 8009142:	4618      	mov	r0, r3
 8009144:	f011 fe40 	bl	801adc8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8009148:	4604      	mov	r4, r0
 800914a:	bf00      	nop
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4618      	mov	r0, r3
 8009152:	f011 f8ff 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8009156:	4623      	mov	r3, r4
}
 8009158:	4618      	mov	r0, r3
 800915a:	3744      	adds	r7, #68	; 0x44
 800915c:	46bd      	mov	sp, r7
 800915e:	bd90      	pop	{r4, r7, pc}

08009160 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 8009160:	b590      	push	{r4, r7, lr}
 8009162:	b091      	sub	sp, #68	; 0x44
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3320      	adds	r3, #32
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f107 0208 	add.w	r2, r7, #8
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
 800917a:	f107 0308 	add.w	r3, r7, #8
 800917e:	4618      	mov	r0, r3
 8009180:	f011 fe4a 	bl	801ae18 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8009184:	4604      	mov	r4, r0
 8009186:	bf00      	nop
 8009188:	f107 0308 	add.w	r3, r7, #8
 800918c:	4618      	mov	r0, r3
 800918e:	f011 f8e1 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8009192:	4623      	mov	r3, r4
}
 8009194:	4618      	mov	r0, r3
 8009196:	3744      	adds	r7, #68	; 0x44
 8009198:	46bd      	mov	sp, r7
 800919a:	bd90      	pop	{r4, r7, pc}

0800919c <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <_ZN11MockSupport14hasReturnValueEv+0x26>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3350      	adds	r3, #80	; 0x50
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4610      	mov	r0, r2
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	e000      	b.n	80091c4 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <_Z41__static_initialization_and_destruction_0ii>:
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d115      	bne.n	8009208 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d110      	bne.n	8009208 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	490f      	ldr	r1, [pc, #60]	; (8009228 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fb62 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	4619      	mov	r1, r3
 80091f8:	480c      	ldr	r0, [pc, #48]	; (800922c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80091fa:	f7fe fc6d 	bl	8007ad8 <_ZN11MockSupportC1ERK12SimpleString>
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	4618      	mov	r0, r3
 8009204:	f000 ff0f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d107      	bne.n	800921e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009214:	4293      	cmp	r3, r2
 8009216:	d102      	bne.n	800921e <_Z41__static_initialization_and_destruction_0ii+0x52>
 8009218:	4804      	ldr	r0, [pc, #16]	; (800922c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800921a:	f7fe fca7 	bl	8007b6c <_ZN11MockSupportD1Ev>
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	08020868 	.word	0x08020868
 800922c:	20000604 	.word	0x20000604

08009230 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	4a05      	ldr	r2, [pc, #20]	; (8009250 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fbbb 	bl	80079bc <_ZN11MockFailureD1Ev>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	08023990 	.word	0x08023990

08009254 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff ffe7 	bl	8009230 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 8009262:	2134      	movs	r1, #52	; 0x34
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7fd ff77 	bl	8007158 <_ZdlPvj>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	4a05      	ldr	r2, [pc, #20]	; (8009294 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fb99 	bl	80079bc <_ZN11MockFailureD1Ev>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	08023964 	.word	0x08023964

08009298 <_ZN20MockCallOrderFailureD0Ev>:
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff ffe7 	bl	8009274 <_ZN20MockCallOrderFailureD1Ev>
 80092a6:	2134      	movs	r1, #52	; 0x34
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fd ff55 	bl	8007158 <_ZdlPvj>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092c0:	2001      	movs	r0, #1
 80092c2:	f7ff ff83 	bl	80091cc <_Z41__static_initialization_and_destruction_0ii>
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80092d0:	2000      	movs	r0, #0
 80092d2:	f7ff ff7b 	bl	80091cc <_Z41__static_initialization_and_destruction_0ii>
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <_ZN11SimpleMutexC1Ev+0x20>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4798      	blx	r3
 80092e6:	4602      	mov	r2, r0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]
}
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	200000ec 	.word	0x200000ec

080092fc <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <_ZN11SimpleMutexD1Ev+0x20>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6812      	ldr	r2, [r2, #0]
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
}
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	200000f8 	.word	0x200000f8

08009320 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <_ZN11SimpleMutex4LockEv+0x1c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	4610      	mov	r0, r2
 8009332:	4798      	blx	r3
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200000f0 	.word	0x200000f0

08009340 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8009348:	4b04      	ldr	r3, [pc, #16]	; (800935c <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	6812      	ldr	r2, [r2, #0]
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	200000f4 	.word	0x200000f4

08009360 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff ffd3 	bl	8009320 <_ZN11SimpleMutex4LockEv>
}
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff ffd5 	bl	8009340 <_ZN11SimpleMutex6UnlockEv>
}
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d103      	bne.n	80093b4 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 80093ac:	f003 fd7a 	bl	800cea4 <_Z24defaultNewArrayAllocatorv>
 80093b0:	4603      	mov	r3, r0
 80093b2:	e001      	b.n	80093b8 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 80093b4:	4b01      	ldr	r3, [pc, #4]	; (80093bc <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	2000064c 	.word	0x2000064c

080093c0 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 80093cc:	f7ff ffe8 	bl	80093a0 <_ZN12SimpleString18getStringAllocatorEv>
 80093d0:	6803      	ldr	r3, [r0, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	681c      	ldr	r4, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	47a0      	blx	r4
 80093de:	4603      	mov	r3, r0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd90      	pop	{r4, r7, pc}

080093e8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af02      	add	r7, sp, #8
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 80093f6:	f7ff ffd3 	bl	80093a0 <_ZN12SimpleString18getStringAllocatorEv>
 80093fa:	6803      	ldr	r3, [r0, #0]
 80093fc:	330c      	adds	r3, #12
 80093fe:	681c      	ldr	r4, [r3, #0]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	47a0      	blx	r4
}
 800940c:	bf00      	nop
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	bd90      	pop	{r4, r7, pc}

08009414 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800941c:	2284      	movs	r2, #132	; 0x84
 800941e:	4906      	ldr	r1, [pc, #24]	; (8009438 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8009420:	2001      	movs	r0, #1
 8009422:	f7ff ffcd 	bl	80093c0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8009426:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
    return empty;
 800942e:	68fb      	ldr	r3, [r7, #12]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	08020900 	.word	0x08020900

0800943c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f001 f809 	bl	800a460 <_ZN12SimpleString7isSpaceEc>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <_ZN12SimpleString4AtoUEPKc+0x20>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3301      	adds	r3, #1
 8009458:	607b      	str	r3, [r7, #4]
 800945a:	e7f3      	b.n	8009444 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 ffe7 	bl	800a438 <_ZN12SimpleString7isDigitEc>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <_ZN12SimpleString4AtoUEPKc+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b2f      	cmp	r3, #47	; 0x2f
 8009476:	d901      	bls.n	800947c <_ZN12SimpleString4AtoUEPKc+0x40>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <_ZN12SimpleString4AtoUEPKc+0x42>
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d010      	beq.n	80094a4 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	3b30      	subs	r3, #48	; 0x30
 800949a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3301      	adds	r3, #1
 80094a0:	607b      	str	r3, [r7, #4]
 80094a2:	e7dd      	b.n	8009460 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 80094a4:	68fb      	ldr	r3, [r7, #12]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 ffd0 	bl	800a460 <_ZN12SimpleString7isSpaceEc>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <_ZN12SimpleString4AtoIEPKc+0x20>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3301      	adds	r3, #1
 80094ca:	607b      	str	r3, [r7, #4]
 80094cc:	e7f3      	b.n	80094b6 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	2b2d      	cmp	r3, #45	; 0x2d
 80094d8:	d002      	beq.n	80094e0 <_ZN12SimpleString4AtoIEPKc+0x32>
 80094da:	7afb      	ldrb	r3, [r7, #11]
 80094dc:	2b2b      	cmp	r3, #43	; 0x2b
 80094de:	d102      	bne.n	80094e6 <_ZN12SimpleString4AtoIEPKc+0x38>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3301      	adds	r3, #1
 80094e4:	607b      	str	r3, [r7, #4]

    int  result = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 ffa2 	bl	800a438 <_ZN12SimpleString7isDigitEc>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00f      	beq.n	800951a <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	3b30      	subs	r3, #48	; 0x30
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3301      	adds	r3, #1
 8009516:	607b      	str	r3, [r7, #4]
 8009518:	e7e7      	b.n	80094ea <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	2b2d      	cmp	r3, #45	; 0x2d
 800951e:	d102      	bne.n	8009526 <_ZN12SimpleString4AtoIEPKc+0x78>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	425b      	negs	r3, r3
 8009524:	e000      	b.n	8009528 <_ZN12SimpleString4AtoIEPKc+0x7a>
 8009526:	68fb      	ldr	r3, [r7, #12]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00c      	beq.n	800955c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	781a      	ldrb	r2, [r3, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	d106      	bne.n	800955c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3301      	adds	r3, #1
 8009552:	607b      	str	r3, [r7, #4]
       ++s2;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800955a:	e7ee      	b.n	800953a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	1ad3      	subs	r3, r2, r3
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800957c:	f04f 33ff 	mov.w	r3, #4294967295
 8009580:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	bf14      	ite	ne
 8009594:	2301      	movne	r3, #1
 8009596:	2300      	moveq	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d000      	beq.n	80095a0 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800959e:	e7f0      	b.n	8009582 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 80095a0:	68fb      	ldr	r3, [r7, #12]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d013      	beq.n	80095e8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00f      	beq.n	80095e8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d109      	bne.n	80095e8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	607b      	str	r3, [r7, #4]
        ++s1;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3301      	adds	r3, #1
 80095de:	60fb      	str	r3, [r7, #12]
        ++s2;
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	3301      	adds	r3, #1
 80095e4:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 80095e6:	e7e8      	b.n	80095ba <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d006      	beq.n	80095fc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	e000      	b.n	80095fe <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800960a:	b480      	push	{r7}
 800960c:	b087      	sub	sp, #28
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	607a      	str	r2, [r7, #4]
    char* result = s1;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	e01e      	b.n	8009668 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	781a      	ldrb	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3b01      	subs	r3, #1
 8009636:	607b      	str	r3, [r7, #4]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800964a:	2300      	movs	r3, #0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	3301      	adds	r3, #1
 8009654:	60bb      	str	r3, [r7, #8]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3301      	adds	r3, #1
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	781a      	ldrb	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8009664:	e7e5      	b.n	8009632 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 8009666:	697b      	ldr	r3, [r7, #20]
}
 8009668:	4618      	mov	r0, r3
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	e01b      	b.n	80096c2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d016      	beq.n	80096c0 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 8009692:	6838      	ldr	r0, [r7, #0]
 8009694:	f7ff ff6e 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 8009698:	4603      	mov	r3, r0
 800969a:	461a      	mov	r2, r3
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff ff85 	bl	80095ae <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bf0c      	ite	eq
 80096aa:	2301      	moveq	r3, #1
 80096ac:	2300      	movne	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	e004      	b.n	80096c2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3301      	adds	r3, #1
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	e7e4      	b.n	800968a <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	4603      	mov	r3, r0
 80096d2:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fed9 	bl	800a48e <_ZN12SimpleString7isUpperEc>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <_ZN12SimpleString7ToLowerEc+0x20>
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	3320      	adds	r3, #32
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	e000      	b.n	80096ec <_ZN12SimpleString7ToLowerEc+0x22>
 80096ea:	79fb      	ldrb	r3, [r7, #7]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	613b      	str	r3, [r7, #16]

    while (n--)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	1e5a      	subs	r2, r3, #1
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	bf14      	ite	ne
 8009712:	2301      	movne	r3, #1
 8009714:	2300      	moveq	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	d013      	beq.n	8009744 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d006      	beq.n	8009736 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	e007      	b.n	8009746 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	3301      	adds	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
            ++p2;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	3301      	adds	r3, #1
 8009740:	613b      	str	r3, [r7, #16]
    while (n--)
 8009742:	e7e1      	b.n	8009708 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
	...

08009754 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00d      	beq.n	8009780 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6859      	ldr	r1, [r3, #4]
 800976c:	23ee      	movs	r3, #238	; 0xee
 800976e:	4a06      	ldr	r2, [pc, #24]	; (8009788 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8009770:	f7ff fe3a 	bl	80093e8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	605a      	str	r2, [r3, #4]
    }
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	08020900 	.word	0x08020900

0800978c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff ffdd 	bl	8009754 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff fe37 	bl	8009414 <_ZNK12SimpleString14getEmptyStringEv>
 80097a6:	4602      	mov	r2, r0
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	601a      	str	r2, [r3, #0]
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff ffc7 	bl	8009754 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	4619      	mov	r1, r3
 80097d2:	68b8      	ldr	r0, [r7, #8]
 80097d4:	f000 fe12 	bl	800a3fc <_ZN12SimpleString15copyToNewBufferEPKcj>
 80097d8:	4602      	mov	r2, r0
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ffae 	bl	8009754 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f240 1209 	movw	r2, #265	; 0x109
 8009806:	4907      	ldr	r1, [pc, #28]	; (8009824 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fdd9 	bl	80093c0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800980e:	4602      	mov	r2, r0
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	701a      	strb	r2, [r3, #0]
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	08020900 	.word	0x08020900

08009828 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff ff8d 	bl	8009754 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	601a      	str	r2, [r3, #0]
}
 8009846:	bf00      	nop
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800984e:	b590      	push	{r4, r7, lr}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681c      	ldr	r4, [r3, #0]
 800985c:	6838      	ldr	r0, [r7, #0]
 800985e:	f000 fbc1 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009862:	4603      	mov	r3, r0
 8009864:	3301      	adds	r3, #1
 8009866:	461a      	mov	r2, r3
 8009868:	4621      	mov	r1, r4
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff ffa2 	bl	80097b4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	bd90      	pop	{r4, r7, pc}

08009878 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8009882:	6838      	ldr	r0, [r7, #0]
 8009884:	f7ff fe76 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 8009888:	4603      	mov	r3, r0
 800988a:	3301      	adds	r3, #1
 800988c:	461a      	mov	r2, r3
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff ff8f 	bl	80097b4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
    return buffer_;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d103      	bne.n	80098da <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff ff5a 	bl	800978c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80098d8:	e003      	b.n	80098e2 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7ff ffcb 	bl	8009878 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8009904:	68b8      	ldr	r0, [r7, #8]
 8009906:	f7ff fe35 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 800990a:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	fb02 f303 	mul.w	r3, r2, r3
 8009914:	3301      	adds	r3, #1
 8009916:	4619      	mov	r1, r3
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7ff ff65 	bl	80097e8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	429a      	cmp	r2, r3
 800992e:	d20e      	bcs.n	800994e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	3301      	adds	r3, #1
 8009934:	461a      	mov	r2, r3
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	69f8      	ldr	r0, [r7, #28]
 800993a:	f7ff fe66 	bl	800960a <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	4413      	add	r3, r2
 8009944:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	3301      	adds	r3, #1
 800994a:	61bb      	str	r3, [r7, #24]
 800994c:	e7ec      	b.n	8009928 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
}
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4618      	mov	r0, r3
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8009974:	6838      	ldr	r0, [r7, #0]
 8009976:	f7ff ff92 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800997a:	4603      	mov	r3, r0
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff ff7a 	bl	8009878 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	429a      	cmp	r2, r3
 800999e:	d003      	beq.n	80099a8 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff ff53 	bl	800984e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 80099a8:	687b      	ldr	r3, [r7, #4]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff ff6e 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 80099c2:	4604      	mov	r4, r0
 80099c4:	6838      	ldr	r0, [r7, #0]
 80099c6:	f7ff ff6a 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 80099ca:	4603      	mov	r3, r0
 80099cc:	4619      	mov	r1, r3
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7ff fe50 	bl	8009674 <_ZN12SimpleString6StrStrEPKcS1_>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bf14      	ite	ne
 80099da:	2301      	movne	r3, #1
 80099dc:	2300      	moveq	r3, #0
 80099de:	b2db      	uxtb	r3, r3
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd90      	pop	{r4, r7, pc}

080099e8 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 80099e8:	b590      	push	{r4, r7, lr}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 80099f2:	f107 0308 	add.w	r3, r7, #8
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fabb 	bl	8009f74 <_ZNK12SimpleString9lowerCaseEv>
 80099fe:	f107 0310 	add.w	r3, r7, #16
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fab5 	bl	8009f74 <_ZNK12SimpleString9lowerCaseEv>
 8009a0a:	f107 0210 	add.w	r2, r7, #16
 8009a0e:	f107 0308 	add.w	r3, r7, #8
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff ffcc 	bl	80099b2 <_ZNK12SimpleString8containsERKS_>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461c      	mov	r4, r3
 8009a1e:	bf00      	nop
 8009a20:	f107 0310 	add.w	r3, r7, #16
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fafe 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 faf9 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8009a34:	4623      	mov	r3, r4
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd90      	pop	{r4, r7, pc}

08009a3e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8009a3e:	b590      	push	{r4, r7, lr}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8009a48:	6838      	ldr	r0, [r7, #0]
 8009a4a:	f000 facb 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bf0c      	ite	eq
 8009a54:	2301      	moveq	r3, #1
 8009a56:	2300      	movne	r3, #0
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <_ZNK12SimpleString10startsWithERKS_+0x24>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e022      	b.n	8009aa8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fabe 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bf0c      	ite	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	2300      	movne	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e015      	b.n	8009aa8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff ff0e 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009a82:	4604      	mov	r4, r0
 8009a84:	6838      	ldr	r0, [r7, #0]
 8009a86:	f7ff ff0a 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff fdf0 	bl	8009674 <_ZN12SimpleString6StrStrEPKcS1_>
 8009a94:	4604      	mov	r4, r0
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff ff01 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	429c      	cmp	r4, r3
 8009aa0:	bf0c      	ite	eq
 8009aa2:	2301      	moveq	r3, #1
 8009aa4:	2300      	movne	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd90      	pop	{r4, r7, pc}

08009ab0 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa92 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009ac0:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 8009ac2:	6838      	ldr	r0, [r7, #0]
 8009ac4:	f000 fa8e 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009ac8:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <_ZNK12SimpleString8endsWithERKS_+0x24>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e020      	b.n	8009b16 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8009ada:	2300      	movs	r3, #0
 8009adc:	e01b      	b.n	8009b16 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d201      	bcs.n	8009aea <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e015      	b.n	8009b16 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fed7 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009af0:	4601      	mov	r1, r0
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	18cc      	adds	r4, r1, r3
 8009afa:	6838      	ldr	r0, [r7, #0]
 8009afc:	f7ff fecf 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009b00:	4603      	mov	r3, r0
 8009b02:	4619      	mov	r1, r3
 8009b04:	4620      	mov	r0, r4
 8009b06:	f7ff fd13 	bl	8009530 <_ZN12SimpleString6StrCmpEPKcS1_>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	bf0c      	ite	eq
 8009b10:	2301      	moveq	r3, #1
 8009b12:	2300      	movne	r3, #0
 8009b14:	b2db      	uxtb	r3, r3
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd90      	pop	{r4, r7, pc}

08009b1e <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b086      	sub	sp, #24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff feb6 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009b32:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
    if (*str){
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d008      	beq.n	8009b52 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8009b40:	6838      	ldr	r0, [r7, #0]
 8009b42:	f7ff feac 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f7ff fd92 	bl	8009674 <_ZN12SimpleString6StrStrEPKcS1_>
 8009b50:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d014      	beq.n	8009b84 <_ZNK12SimpleString5countERKS_+0x66>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d011      	beq.n	8009b84 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	613b      	str	r3, [r7, #16]
        str++;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	3301      	adds	r3, #1
 8009b68:	613b      	str	r3, [r7, #16]
        num++;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8009b70:	6838      	ldr	r0, [r7, #0]
 8009b72:	f7ff fe94 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009b76:	4603      	mov	r3, r0
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6938      	ldr	r0, [r7, #16]
 8009b7c:	f7ff fd7a 	bl	8009674 <_ZN12SimpleString6StrStrEPKcS1_>
 8009b80:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8009b82:	e7e6      	b.n	8009b52 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8009b84:	697b      	ldr	r3, [r7, #20]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8009b8e:	b590      	push	{r4, r7, lr}
 8009b90:	b091      	sub	sp, #68	; 0x44
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff ffbe 	bl	8009b1e <_ZNK12SimpleString5countERKS_>
 8009ba2:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff ff82 	bl	8009ab0 <_ZNK12SimpleString8endsWithERKS_>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e000      	b.n	8009bb8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8009bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbe:	4413      	add	r3, r2
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 f95c 	bl	800ae80 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fe68 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009bce:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d235      	bcs.n	8009c48 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8009bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 8009be0:	68b8      	ldr	r0, [r7, #8]
 8009be2:	f7ff fe5c 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009be6:	4603      	mov	r3, r0
 8009be8:	4619      	mov	r1, r3
 8009bea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009bec:	f7ff fd42 	bl	8009674 <_ZN12SimpleString6StrStrEPKcS1_>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8009bf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 f9db 	bl	800afb4 <_ZN22SimpleStringCollectionixEj>
 8009bfe:	4604      	mov	r4, r0
 8009c00:	f107 031c 	add.w	r3, r7, #28
 8009c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fe55 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8009c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	f107 0014 	add.w	r0, r7, #20
 8009c16:	f107 011c 	add.w	r1, r7, #28
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f000 fb0c 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
 8009c20:	f107 0314 	add.w	r3, r7, #20
 8009c24:	4619      	mov	r1, r3
 8009c26:	4620      	mov	r0, r4
 8009c28:	f7ff feb1 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8009c2c:	f107 0314 	add.w	r3, r7, #20
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 f9f8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8009c36:	f107 031c 	add.w	r3, r7, #28
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f9f3 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8009c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c42:	3301      	adds	r3, #1
 8009c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c46:	e7c5      	b.n	8009bd4 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d015      	beq.n	8009c7a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8009c4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f9af 	bl	800afb4 <_ZN22SimpleStringCollectionixEj>
 8009c56:	4604      	mov	r4, r0
 8009c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff fe29 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8009c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7ff fe8f 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8009c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 f9d6 	bl	800a026 <_ZN12SimpleStringD1Ev>
    }
}
 8009c7a:	bf00      	nop
 8009c7c:	3744      	adds	r7, #68	; 0x44
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd90      	pop	{r4, r7, pc}

08009c82 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	70fb      	strb	r3, [r7, #3]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f9a6 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009c98:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d218      	bcs.n	8009cd8 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fdf9 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009cac:	4602      	mov	r2, r0
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	78fa      	ldrb	r2, [r7, #3]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	bf0c      	ite	eq
 8009cba:	2301      	moveq	r3, #1
 8009cbc:	2300      	movne	r3, #0
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <_ZN12SimpleString7replaceEcc+0x4e>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	78ba      	ldrb	r2, [r7, #2]
 8009cce:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	e7e2      	b.n	8009c9e <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8009cd8:	bf00      	nop
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b08e      	sub	sp, #56	; 0x38
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 8009cec:	f107 0310 	add.w	r3, r7, #16
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff fddf 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8009cf8:	f107 0310 	add.w	r3, r7, #16
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff ff0d 	bl	8009b1e <_ZNK12SimpleString5countERKS_>
 8009d04:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009d06:	f107 0310 	add.w	r3, r7, #16
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f98b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d071      	beq.n	8009dfa <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f964 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009d1c:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 8009d1e:	68b8      	ldr	r0, [r7, #8]
 8009d20:	f7ff fc28 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 8009d24:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fc24 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 8009d2c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d32:	fb02 f203 	mul.w	r2, r2, r3
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	441a      	add	r2, r3
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d3e:	fb01 f303 	mul.w	r3, r1, r3
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	3301      	adds	r3, #1
 8009d46:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d951      	bls.n	8009df2 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 8009d4e:	f240 129d 	movw	r2, #413	; 0x19d
 8009d52:	492c      	ldr	r1, [pc, #176]	; (8009e04 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8009d54:	69f8      	ldr	r0, [r7, #28]
 8009d56:	f7ff fb33 	bl	80093c0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8009d5a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d60:	2300      	movs	r3, #0
 8009d62:	633b      	str	r3, [r7, #48]	; 0x30
 8009d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d236      	bcs.n	8009dda <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff fd96 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009d72:	4602      	mov	r2, r0
 8009d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d76:	4413      	add	r3, r2
 8009d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7a:	68b9      	ldr	r1, [r7, #8]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff fc16 	bl	80095ae <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bf0c      	ite	eq
 8009d88:	2301      	moveq	r3, #1
 8009d8a:	2300      	movne	r3, #0
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d011      	beq.n	8009db6 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	18d0      	adds	r0, r2, r3
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	f7ff fc33 	bl	800960a <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 8009da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	4413      	add	r3, r2
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8009dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	4413      	add	r3, r2
 8009db2:	637b      	str	r3, [r7, #52]	; 0x34
 8009db4:	e7d6      	b.n	8009d64 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7ff fd71 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc0:	441a      	add	r2, r3
 8009dc2:	69b9      	ldr	r1, [r7, #24]
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	440b      	add	r3, r1
 8009dc8:	7812      	ldrb	r2, [r2, #0]
 8009dca:	701a      	strb	r2, [r3, #0]
                j++;
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	3301      	adds	r3, #1
 8009dd0:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 8009dd8:	e7c4      	b.n	8009d64 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	4413      	add	r3, r2
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 8009de6:	69fa      	ldr	r2, [r7, #28]
 8009de8:	69b9      	ldr	r1, [r7, #24]
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff fd1c 	bl	8009828 <_ZN12SimpleString19setInternalBufferToEPcj>
 8009df0:	e004      	b.n	8009dfc <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7ff fcca 	bl	800978c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8009df8:	e000      	b.n	8009dfc <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 8009dfa:	bf00      	nop
}
 8009dfc:	3738      	adds	r7, #56	; 0x38
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	08020900 	.word	0x08020900

08009e08 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 8009e08:	b590      	push	{r4, r7, lr}
 8009e0a:	b089      	sub	sp, #36	; 0x24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 8009e12:	493b      	ldr	r1, [pc, #236]	; (8009f00 <_ZNK12SimpleString9printableEv+0xf8>)
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff fd4e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 8009e1a:	6838      	ldr	r0, [r7, #0]
 8009e1c:	f000 f876 	bl	8009f0c <_ZNK12SimpleString16getPrintableSizeEv>
 8009e20:	4603      	mov	r3, r0
 8009e22:	3301      	adds	r3, #1
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff fcde 	bl	80097e8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 8009e2c:	6838      	ldr	r0, [r7, #0]
 8009e2e:	f000 f8d9 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009e32:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61bb      	str	r3, [r7, #24]
 8009e3c:	69ba      	ldr	r2, [r7, #24]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d252      	bcs.n	8009eea <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 8009e50:	7cfb      	ldrb	r3, [r7, #19]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fb43 	bl	800a4de <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d012      	beq.n	8009e84 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	18d0      	adds	r0, r2, r3
 8009e66:	7cfb      	ldrb	r3, [r7, #19]
 8009e68:	3b07      	subs	r3, #7
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b25      	ldr	r3, [pc, #148]	; (8009f04 <_ZNK12SimpleString9printableEv+0xfc>)
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	2202      	movs	r2, #2
 8009e76:	4619      	mov	r1, r3
 8009e78:	f7ff fbc7 	bl	800960a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	3302      	adds	r3, #2
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	e02e      	b.n	8009ee2 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 8009e84:	7cfb      	ldrb	r3, [r7, #19]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fb15 	bl	800a4b6 <_ZN12SimpleString9isControlEc>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01e      	beq.n	8009ed0 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8009e92:	7cfa      	ldrb	r2, [r7, #19]
 8009e94:	f107 0308 	add.w	r3, r7, #8
 8009e98:	491b      	ldr	r1, [pc, #108]	; (8009f08 <_ZNK12SimpleString9printableEv+0x100>)
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fdca 	bl	800aa34 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	18d4      	adds	r4, r2, r3
 8009ea8:	f107 0308 	add.w	r3, r7, #8
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 f88d 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2204      	movs	r2, #4
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7ff fba6 	bl	800960a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8009ec4:	f107 0308 	add.w	r3, r7, #8
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f8ac 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8009ece:	e008      	b.n	8009ee2 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	7cfa      	ldrb	r2, [r7, #19]
 8009eda:	701a      	strb	r2, [r3, #0]
            j++;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	61bb      	str	r3, [r7, #24]
 8009ee8:	e7a8      	b.n	8009e3c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	701a      	strb	r2, [r3, #0]

    return result;
 8009ef6:	bf00      	nop
}
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	3724      	adds	r7, #36	; 0x24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd90      	pop	{r4, r7, pc}
 8009f00:	080209c0 	.word	0x080209c0
 8009f04:	20000068 	.word	0x20000068
 8009f08:	080209c4 	.word	0x080209c4

08009f0c <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f865 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009f1a:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 8009f20:	2300      	movs	r3, #0
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d21e      	bcs.n	8009f6a <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	4413      	add	r3, r2
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 facf 	bl	800a4de <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	617b      	str	r3, [r7, #20]
 8009f4c:	e009      	b.n	8009f62 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 8009f4e:	7afb      	ldrb	r3, [r7, #11]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fab0 	bl	800a4b6 <_ZN12SimpleString9isControlEc>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	3303      	adds	r3, #3
 8009f60:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3301      	adds	r3, #1
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	e7dc      	b.n	8009f24 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8009f6a:	697b      	ldr	r3, [r7, #20]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 8009f74:	b590      	push	{r4, r7, lr}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f7ff fcec 	bl	800995e <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f82c 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8009f8c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d213      	bcs.n	8009fc2 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fc7f 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	7819      	ldrb	r1, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	18d4      	adds	r4, r2, r3
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	f7ff fb8a 	bl	80096ca <_ZN12SimpleString7ToLowerEc>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	e7e7      	b.n	8009f92 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 8009fc2:	bf00      	nop
}
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd90      	pop	{r4, r7, pc}

08009fcc <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
    return getBuffer();
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fc62 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009fda:	4603      	mov	r3, r0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff fc56 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fabd 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 8009ffa:	4603      	mov	r3, r0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff ffe9 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	bf0c      	ite	eq
 800a018:	2301      	moveq	r3, #1
 800a01a:	2300      	movne	r3, #0
 800a01c:	b2db      	uxtb	r3, r3
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7ff fb90 	bl	8009754 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4618      	mov	r0, r3
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800a03e:	b590      	push	{r4, r7, lr}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff ffbf 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800a04e:	4604      	mov	r4, r0
 800a050:	6838      	ldr	r0, [r7, #0]
 800a052:	f7ff ffbb 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800a056:	4603      	mov	r3, r0
 800a058:	4619      	mov	r1, r3
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7ff fa68 	bl	8009530 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf0c      	ite	eq
 800a066:	2301      	moveq	r3, #1
 800a068:	2300      	movne	r3, #0
 800a06a:	b2db      	uxtb	r3, r3
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bd90      	pop	{r4, r7, pc}

0800a074 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800a074:	b590      	push	{r4, r7, lr}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff ff75 	bl	8009f74 <_ZNK12SimpleString9lowerCaseEv>
 800a08a:	f107 0310 	add.w	r3, r7, #16
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	4618      	mov	r0, r3
 800a092:	f7ff ff6f 	bl	8009f74 <_ZNK12SimpleString9lowerCaseEv>
 800a096:	f107 0210 	add.w	r2, r7, #16
 800a09a:	f107 0308 	add.w	r3, r7, #8
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff ffcc 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	461c      	mov	r4, r3
 800a0aa:	f107 0310 	add.w	r3, r7, #16
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff ffb9 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7ff ffb4 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a0be:	4623      	mov	r3, r4
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	371c      	adds	r7, #28
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd90      	pop	{r4, r7, pc}

0800a0c8 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff ffb2 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f083 0301 	eor.w	r3, r3, #1
 800a0e0:	b2db      	uxtb	r3, r3
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800a0f6:	68b8      	ldr	r0, [r7, #8]
 800a0f8:	f7ff fbd1 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff fbd8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff fbc9 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800a10c:	4603      	mov	r3, r0
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 f817 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    return t;
 800a116:	bf00      	nop
}
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800a12a:	6838      	ldr	r0, [r7, #0]
 800a12c:	f7ff fbb7 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800a130:	4603      	mov	r3, r0
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f805 	bl	800a144 <_ZN12SimpleStringpLEPKc>
 800a13a:	4603      	mov	r3, r0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7ff ff48 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a154:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800a156:	6838      	ldr	r0, [r7, #0]
 800a158:	f7ff fa0c 	bl	8009574 <_ZN12SimpleString6StrLenEPKc>
 800a15c:	4603      	mov	r3, r0
 800a15e:	3301      	adds	r3, #1
 800a160:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	4413      	add	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fb97 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800a170:	4603      	mov	r3, r0
 800a172:	68f9      	ldr	r1, [r7, #12]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 f941 	bl	800a3fc <_ZN12SimpleString15copyToNewBufferEPKcj>
 800a17a:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	4413      	add	r3, r2
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fa3f 	bl	800960a <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fb49 	bl	8009828 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800a196:	687b      	ldr	r3, [r7, #4]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b08b      	sub	sp, #44	; 0x2c
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff ff18 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	68b8      	ldr	r0, [r7, #8]
 800a1b8:	f7ff ff14 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	bf8c      	ite	hi
 800a1c2:	2301      	movhi	r3, #1
 800a1c4:	2300      	movls	r3, #0
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d006      	beq.n	800a1da <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	68f9      	ldr	r1, [r7, #12]
 800a1d2:	68b8      	ldr	r0, [r7, #8]
 800a1d4:	f7ff ffe4 	bl	800a1a0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800a1d8:	e02b      	b.n	800a232 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800a1e2:	68b8      	ldr	r0, [r7, #8]
 800a1e4:	f7ff fefe 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fefa 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	1ae2      	subs	r2, r4, r3
 800a1f4:	f107 0114 	add.w	r1, r7, #20
 800a1f8:	f107 0320 	add.w	r3, r7, #32
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff fb75 	bl	80098ec <_ZN12SimpleStringC1EPKcj>
 800a202:	f107 0318 	add.w	r3, r7, #24
 800a206:	f107 0120 	add.w	r1, r7, #32
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff ff6c 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800a212:	f107 0318 	add.w	r3, r7, #24
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff fbb8 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800a21e:	f107 0318 	add.w	r3, r7, #24
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff feff 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a228:	f107 0320 	add.w	r3, r7, #32
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff fefa 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800a232:	372c      	adds	r7, #44	; 0x2c
 800a234:	46bd      	mov	sp, r7
 800a236:	bd90      	pop	{r4, r7, pc}

0800a238 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800a246:	68b8      	ldr	r0, [r7, #8]
 800a248:	f7ff fecc 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a24c:	4603      	mov	r3, r0
 800a24e:	3b01      	subs	r3, #1
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	bf8c      	ite	hi
 800a256:	2301      	movhi	r3, #1
 800a258:	2300      	movls	r3, #0
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <_ZNK12SimpleString9subStringEjj+0x32>
 800a260:	4919      	ldr	r1, [pc, #100]	; (800a2c8 <_ZNK12SimpleString9subStringEjj+0x90>)
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff fb27 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a268:	e029      	b.n	800a2be <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800a26a:	68b8      	ldr	r0, [r7, #8]
 800a26c:	f7ff fb17 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800a270:	4602      	mov	r2, r0
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	441a      	add	r2, r3
 800a276:	f107 0310 	add.w	r3, r7, #16
 800a27a:	4611      	mov	r1, r2
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fb1a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800a282:	f107 0310 	add.w	r3, r7, #16
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff feac 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a28c:	4602      	mov	r2, r0
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	4293      	cmp	r3, r2
 800a292:	bf34      	ite	cc
 800a294:	2301      	movcc	r3, #1
 800a296:	2300      	movcs	r3, #0
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d004      	beq.n	800a2a8 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]

    return newString;
 800a2a8:	f107 0310 	add.w	r3, r7, #16
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7ff fb55 	bl	800995e <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800a2b4:	f107 0310 	add.w	r3, r7, #16
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff feb4 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	080209c0 	.word	0x080209c0

0800a2cc <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	f7ff ffa9 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
}
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fad0 	bl	800989e <_ZNK12SimpleString9getBufferEv>
 800a2fe:	4602      	mov	r2, r0
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	4413      	add	r3, r2
 800a304:	781b      	ldrb	r3, [r3, #0]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	461a      	mov	r2, r3
 800a31e:	2100      	movs	r1, #0
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f805 	bl	800a330 <_ZNK12SimpleString8findFromEjc>
 800a326:	4603      	mov	r3, r0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff fe50 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a344:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d213      	bcs.n	800a37a <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800a352:	6979      	ldr	r1, [r7, #20]
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7ff ffca 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	4293      	cmp	r3, r2
 800a362:	bf0c      	ite	eq
 800a364:	2301      	moveq	r3, #1
 800a366:	2300      	movne	r3, #0
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <_ZNK12SimpleString8findFromEjc+0x42>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	e005      	b.n	800a37e <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	3301      	adds	r3, #1
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e7e7      	b.n	800a34a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800a37a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4611      	mov	r1, r2
 800a394:	461a      	mov	r2, r3
 800a396:	460b      	mov	r3, r1
 800a398:	71fb      	strb	r3, [r7, #7]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	68b8      	ldr	r0, [r7, #8]
 800a3a4:	f7ff ffb3 	bl	800a30e <_ZNK12SimpleString4findEc>
 800a3a8:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d104      	bne.n	800a3bc <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800a3b2:	4911      	ldr	r1, [pc, #68]	; (800a3f8 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fa7e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a3ba:	e019      	b.n	800a3f0 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800a3bc:	79bb      	ldrb	r3, [r7, #6]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	68b8      	ldr	r0, [r7, #8]
 800a3c4:	f7ff ffb4 	bl	800a330 <_ZNK12SimpleString8findFromEjc>
 800a3c8:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d106      	bne.n	800a3e0 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff ff77 	bl	800a2cc <_ZNK12SimpleString9subStringEj>
 800a3de:	e007      	b.n	800a3f0 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	f7ff ff24 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
}
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	080209c0 	.word	0x080209c0

0800a3fc <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800a406:	f240 2275 	movw	r2, #629	; 0x275
 800a40a:	490a      	ldr	r1, [pc, #40]	; (800a434 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800a40c:	6838      	ldr	r0, [r7, #0]
 800a40e:	f7fe ffd7 	bl	80093c0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a412:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f7ff f8f6 	bl	800960a <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	3b01      	subs	r3, #1
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4413      	add	r3, r2
 800a426:	2200      	movs	r2, #0
 800a428:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800a42a:	68fb      	ldr	r3, [r7, #12]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	08020900 	.word	0x08020900

0800a438 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	2b2f      	cmp	r3, #47	; 0x2f
 800a446:	d904      	bls.n	800a452 <_ZN12SimpleString7isDigitEc+0x1a>
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b39      	cmp	r3, #57	; 0x39
 800a44c:	d801      	bhi.n	800a452 <_ZN12SimpleString7isDigitEc+0x1a>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <_ZN12SimpleString7isDigitEc+0x1c>
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d005      	beq.n	800a47c <_ZN12SimpleString7isSpaceEc+0x1c>
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	2b08      	cmp	r3, #8
 800a474:	d904      	bls.n	800a480 <_ZN12SimpleString7isSpaceEc+0x20>
 800a476:	79fb      	ldrb	r3, [r7, #7]
 800a478:	2b0d      	cmp	r3, #13
 800a47a:	d801      	bhi.n	800a480 <_ZN12SimpleString7isSpaceEc+0x20>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e000      	b.n	800a482 <_ZN12SimpleString7isSpaceEc+0x22>
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	4603      	mov	r3, r0
 800a496:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b40      	cmp	r3, #64	; 0x40
 800a49c:	d904      	bls.n	800a4a8 <_ZN12SimpleString7isUpperEc+0x1a>
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	2b5a      	cmp	r3, #90	; 0x5a
 800a4a2:	d801      	bhi.n	800a4a8 <_ZN12SimpleString7isUpperEc+0x1a>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e000      	b.n	800a4aa <_ZN12SimpleString7isUpperEc+0x1c>
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	4603      	mov	r3, r0
 800a4be:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b1f      	cmp	r3, #31
 800a4c4:	d902      	bls.n	800a4cc <_ZN12SimpleString9isControlEc+0x16>
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	2b7f      	cmp	r3, #127	; 0x7f
 800a4ca:	d101      	bne.n	800a4d0 <_ZN12SimpleString9isControlEc+0x1a>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <_ZN12SimpleString9isControlEc+0x1c>
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b06      	cmp	r3, #6
 800a4ec:	d904      	bls.n	800a4f8 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	2b0d      	cmp	r3, #13
 800a4f2:	d801      	bhi.n	800a4f8 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e000      	b.n	800a4fa <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
	...

0800a508 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <_Z10StringFromb+0x16>
 800a51a:	4a06      	ldr	r2, [pc, #24]	; (800a534 <_Z10StringFromb+0x2c>)
 800a51c:	e000      	b.n	800a520 <_Z10StringFromb+0x18>
 800a51e:	4a06      	ldr	r2, [pc, #24]	; (800a538 <_Z10StringFromb+0x30>)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4906      	ldr	r1, [pc, #24]	; (800a53c <_Z10StringFromb+0x34>)
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fa85 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	080209cc 	.word	0x080209cc
 800a538:	080209d4 	.word	0x080209d4
 800a53c:	080209dc 	.word	0x080209dc

0800a540 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7ff f9b2 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
}
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800a566:	2400      	movs	r4, #0
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00e      	beq.n	800a58c <_Z25PrintableStringFromOrNullPKc+0x30>
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff ffe3 	bl	800a540 <_Z10StringFromPKc>
 800a57a:	2401      	movs	r4, #1
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f107 0208 	add.w	r2, r7, #8
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fc3f 	bl	8009e08 <_ZNK12SimpleString9printableEv>
 800a58a:	e004      	b.n	800a596 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4908      	ldr	r1, [pc, #32]	; (800a5b0 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff ffd5 	bl	800a540 <_Z10StringFromPKc>
 800a596:	2c00      	cmp	r4, #0
 800a598:	d004      	beq.n	800a5a4 <_Z25PrintableStringFromOrNullPKc+0x48>
 800a59a:	f107 0308 	add.w	r3, r7, #8
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fd41 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a5a4:	bf00      	nop
}
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd90      	pop	{r4, r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	080209e0 	.word	0x080209e0

0800a5b4 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	4904      	ldr	r1, [pc, #16]	; (800a5d4 <_Z10StringFromi+0x20>)
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 fa35 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	080209e8 	.word	0x080209e8

0800a5d8 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	4904      	ldr	r1, [pc, #16]	; (800a5f8 <_Z10StringFroml+0x20>)
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fa23 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	080209ec 	.word	0x080209ec

0800a5fc <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800a606:	f107 0308 	add.w	r3, r7, #8
 800a60a:	4910      	ldr	r1, [pc, #64]	; (800a64c <_Z10StringFromPKv+0x50>)
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff f952 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a612:	f107 0310 	add.w	r3, r7, #16
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 f9a1 	bl	800a960 <_Z13HexStringFromPKv>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f107 0210 	add.w	r2, r7, #16
 800a624:	f107 0108 	add.w	r1, r7, #8
 800a628:	4618      	mov	r0, r3
 800a62a:	f7ff fd5e 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800a62e:	f107 0310 	add.w	r3, r7, #16
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fcf7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff fcf2 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a642:	bf00      	nop
}
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	080209f0 	.word	0x080209f0

0800a650 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800a65a:	f107 0308 	add.w	r3, r7, #8
 800a65e:	4910      	ldr	r1, [pc, #64]	; (800a6a0 <_Z10StringFromPFvvE+0x50>)
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff f928 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a666:	f107 0310 	add.w	r3, r7, #16
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 f98b 	bl	800a988 <_Z13HexStringFromPFvvE>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f107 0210 	add.w	r2, r7, #16
 800a678:	f107 0108 	add.w	r1, r7, #8
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fd34 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800a682:	f107 0310 	add.w	r3, r7, #16
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fccd 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a68c:	f107 0308 	add.w	r3, r7, #8
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fcc8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a696:	bf00      	nop
}
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	080209f0 	.word	0x080209f0

0800a6a4 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <_Z13HexStringFroml+0x20>)
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 f9bd 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	080209f4 	.word	0x080209f4

0800a6c8 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	4904      	ldr	r1, [pc, #16]	; (800a6e8 <_Z13HexStringFromi+0x20>)
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 f9ab 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	080209f8 	.word	0x080209f8

0800a6ec <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800a6f8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4912      	ldr	r1, [pc, #72]	; (800a748 <_Z13HexStringFroma+0x5c>)
 800a700:	4618      	mov	r0, r3
 800a702:	f000 f997 	bl	800aa34 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800a706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da16      	bge.n	800a73c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fc68 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800a714:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	1e9a      	subs	r2, r3, #2
 800a71a:	f107 030c 	add.w	r3, r7, #12
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fdd3 	bl	800a2cc <_ZNK12SimpleString9subStringEj>
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff f92e 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fc75 	bl	800a026 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800a73c:	bf00      	nop
}
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	080209f8 	.word	0x080209f8

0800a74c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	4904      	ldr	r1, [pc, #16]	; (800a76c <_Z13HexStringFromm+0x20>)
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 f969 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	080209f4 	.word	0x080209f4

0800a770 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	4904      	ldr	r1, [pc, #16]	; (800a790 <_Z13HexStringFromj+0x20>)
 800a780:	4618      	mov	r0, r3
 800a782:	f000 f957 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	080209f8 	.word	0x080209f8

0800a794 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800a79e:	f107 0308 	add.w	r3, r7, #8
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff ff8f 	bl	800a6c8 <_Z13HexStringFromi>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f107 0208 	add.w	r2, r7, #8
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f87e 	bl	800a8b4 <_Z26BracketsFormattedHexString12SimpleString>
 800a7b8:	f107 0308 	add.w	r3, r7, #8
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7ff fc32 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a7c2:	bf00      	nop
}
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800a7d6:	f107 0308 	add.w	r3, r7, #8
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff ffc7 	bl	800a770 <_Z13HexStringFromj>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f107 0208 	add.w	r2, r7, #8
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f862 	bl	800a8b4 <_Z26BracketsFormattedHexString12SimpleString>
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff fc16 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a7fa:	bf00      	nop
}
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800a80e:	f107 0308 	add.w	r3, r7, #8
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff ff45 	bl	800a6a4 <_Z13HexStringFroml>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f107 0208 	add.w	r2, r7, #8
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f846 	bl	800a8b4 <_Z26BracketsFormattedHexString12SimpleString>
 800a828:	f107 0308 	add.w	r3, r7, #8
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff fbfa 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a832:	bf00      	nop
}
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff ff7d 	bl	800a74c <_Z13HexStringFromm>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f107 0208 	add.w	r2, r7, #8
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f82a 	bl	800a8b4 <_Z26BracketsFormattedHexString12SimpleString>
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff fbde 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a86a:	bf00      	nop
}
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800a888:	4611      	mov	r1, r2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff ff2e 	bl	800a6ec <_Z13HexStringFroma>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f107 0208 	add.w	r2, r7, #8
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f80b 	bl	800a8b4 <_Z26BracketsFormattedHexString12SimpleString>
 800a89e:	f107 0308 	add.w	r3, r7, #8
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7ff fbbf 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a8a8:	bf00      	nop
}
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800a8be:	f107 0310 	add.w	r3, r7, #16
 800a8c2:	4917      	ldr	r1, [pc, #92]	; (800a920 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fff6 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a8ca:	f107 0308 	add.w	r3, r7, #8
 800a8ce:	f107 0110 	add.w	r1, r7, #16
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fc08 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800a8da:	f107 0318 	add.w	r3, r7, #24
 800a8de:	4911      	ldr	r1, [pc, #68]	; (800a924 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe ffe8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f107 0218 	add.w	r2, r7, #24
 800a8ec:	f107 0108 	add.w	r1, r7, #8
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7ff fbfa 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800a8f6:	f107 0318 	add.w	r3, r7, #24
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fb93 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a900:	f107 0308 	add.w	r3, r7, #8
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fb8e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a90a:	f107 0310 	add.w	r3, r7, #16
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff fb89 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800a914:	bf00      	nop
}
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	080209fc 	.word	0x080209fc
 800a924:	08020a00 	.word	0x08020a00

0800a928 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800a930:	1d3b      	adds	r3, r7, #4
 800a932:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800a94c:	1d3b      	adds	r3, r7, #4
 800a94e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800a96a:	6838      	ldr	r0, [r7, #0]
 800a96c:	f7ff ffdc 	bl	800a928 <_ZL25convertPointerToLongValuePKv>
 800a970:	4602      	mov	r2, r0
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4903      	ldr	r1, [pc, #12]	; (800a984 <_Z13HexStringFromPKv+0x24>)
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f85c 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	080209f4 	.word	0x080209f4

0800a988 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800a992:	6838      	ldr	r0, [r7, #0]
 800a994:	f7ff ffd6 	bl	800a944 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800a998:	4602      	mov	r2, r0
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4903      	ldr	r1, [pc, #12]	; (800a9ac <_Z13HexStringFromPFvvE+0x24>)
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f848 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	080209f4 	.word	0x080209f4

0800a9b0 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af02      	add	r7, sp, #8
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	ed87 0b00 	vstr	d0, [r7]
 800a9bc:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800a9be:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <_Z10StringFromdi+0x70>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	ed97 0b00 	vldr	d0, [r7]
 800a9c6:	4798      	blx	r3
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	bf14      	ite	ne
 800a9ce:	2301      	movne	r3, #1
 800a9d0:	2300      	moveq	r3, #0
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d004      	beq.n	800a9e2 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800a9d8:	4912      	ldr	r1, [pc, #72]	; (800aa24 <_Z10StringFromdi+0x74>)
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7fe ff6b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800a9e0:	e01a      	b.n	800aa18 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800a9e2:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <_Z10StringFromdi+0x78>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	ed97 0b00 	vldr	d0, [r7]
 800a9ea:	4798      	blx	r3
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bf14      	ite	ne
 800a9f2:	2301      	movne	r3, #1
 800a9f4:	2300      	moveq	r3, #0
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d004      	beq.n	800aa06 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800a9fc:	490b      	ldr	r1, [pc, #44]	; (800aa2c <_Z10StringFromdi+0x7c>)
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7fe ff59 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800aa04:	e008      	b.n	800aa18 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa0c:	e9cd 2300 	strd	r2, r3, [sp]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	4907      	ldr	r1, [pc, #28]	; (800aa30 <_Z10StringFromdi+0x80>)
 800aa14:	f000 f80e 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	200000e4 	.word	0x200000e4
 800aa24:	08020a34 	.word	0x08020a34
 800aa28:	200000e8 	.word	0x200000e8
 800aa2c:	08020a48 	.word	0x08020a48
 800aa30:	08020a58 	.word	0x08020a58

0800aa34 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800aa34:	b40e      	push	{r1, r2, r3}
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b087      	sub	sp, #28
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800aa3e:	4910      	ldr	r1, [pc, #64]	; (800aa80 <_Z16StringFromFormatPKcz+0x4c>)
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fe ff38 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800aa46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa4a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800aa4c:	f107 0310 	add.w	r3, r7, #16
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 f839 	bl	800aacc <_Z17VStringFromFormatPKcSt9__va_list>
 800aa5a:	f107 0310 	add.w	r3, r7, #16
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f7fe ff94 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800aa66:	f107 0310 	add.w	r3, r7, #16
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff fadb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800aa70:	bf00      	nop
}
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa7c:	b003      	add	sp, #12
 800aa7e:	4770      	bx	lr
 800aa80:	080209c0 	.word	0x080209c0

0800aa84 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	4904      	ldr	r1, [pc, #16]	; (800aaa4 <_Z10StringFromj+0x20>)
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff ffcd 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	08020a64 	.word	0x08020a64

0800aaa8 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	4904      	ldr	r1, [pc, #16]	; (800aac8 <_Z10StringFromm+0x20>)
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff ffbb 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	08020a68 	.word	0x08020a68

0800aacc <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800aacc:	b590      	push	{r4, r7, lr}
 800aace:	b0a7      	sub	sp, #156	; 0x9c
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800aadc:	492e      	ldr	r1, [pc, #184]	; (800ab98 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7fe fee9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800aae4:	4b2d      	ldr	r3, [pc, #180]	; (800ab9c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800aae6:	681c      	ldr	r4, [r3, #0]
 800aae8:	f107 0014 	add.w	r0, r7, #20
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	2164      	movs	r1, #100	; 0x64
 800aaf2:	47a0      	blx	r4
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800aafa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aafe:	2b63      	cmp	r3, #99	; 0x63
 800ab00:	d813      	bhi.n	800ab2a <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800ab02:	f107 0214 	add.w	r2, r7, #20
 800ab06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fed2 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800ab12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ab16:	4619      	mov	r1, r3
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7fe ff38 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800ab1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fa7f 	bl	800a026 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800ab28:	e031      	b.n	800ab8e <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800ab2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab2e:	3301      	adds	r3, #1
 800ab30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800ab34:	f240 32c3 	movw	r2, #963	; 0x3c3
 800ab38:	4919      	ldr	r1, [pc, #100]	; (800aba0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800ab3a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ab3e:	f7fe fc3f 	bl	80093c0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ab42:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800ab48:	681c      	ldr	r4, [r3, #0]
 800ab4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab52:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800ab56:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800ab58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ab5c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fea8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800ab66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f7fe ff0e 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800ab72:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fa55 	bl	800a026 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800ab7c:	f240 33c7 	movw	r3, #967	; 0x3c7
 800ab80:	4a07      	ldr	r2, [pc, #28]	; (800aba0 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800ab82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab86:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800ab8a:	f7fe fc2d 	bl	80093e8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800ab8e:	bf00      	nop
}
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	379c      	adds	r7, #156	; 0x9c
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd90      	pop	{r4, r7, pc}
 800ab98:	080209c0 	.word	0x080209c0
 800ab9c:	200000ac 	.word	0x200000ac
 800aba0:	08020900 	.word	0x08020900

0800aba4 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08a      	sub	sp, #40	; 0x28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800abb0:	491f      	ldr	r1, [pc, #124]	; (800ac30 <_Z16StringFromBinaryPKhj+0x8c>)
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fe fe7f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800abb8:	2300      	movs	r3, #0
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
 800abbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d219      	bcs.n	800abf8 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	4413      	add	r3, r2
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	461a      	mov	r2, r3
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	4918      	ldr	r1, [pc, #96]	; (800ac34 <_Z16StringFromBinaryPKhj+0x90>)
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff ff2d 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800abda:	f107 0314 	add.w	r3, r7, #20
 800abde:	4619      	mov	r1, r3
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7ff fa9d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800abe6:	f107 0314 	add.w	r3, r7, #20
 800abea:	4618      	mov	r0, r3
 800abec:	f7ff fa1b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	3301      	adds	r3, #1
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
 800abf6:	e7e1      	b.n	800abbc <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff f9f3 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800abfe:	4603      	mov	r3, r0
 800ac00:	3b01      	subs	r3, #1
 800ac02:	f107 001c 	add.w	r0, r7, #28
 800ac06:	2200      	movs	r2, #0
 800ac08:	68f9      	ldr	r1, [r7, #12]
 800ac0a:	f7ff fb15 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
 800ac0e:	f107 031c 	add.w	r3, r7, #28
 800ac12:	4619      	mov	r1, r3
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7fe feba 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800ac1a:	f107 031c 	add.w	r3, r7, #28
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fa01 	bl	800a026 <_ZN12SimpleStringD1Ev>

    return result;
 800ac24:	bf00      	nop
}
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	3728      	adds	r7, #40	; 0x28
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	080209c0 	.word	0x080209c0
 800ac34:	08020a6c 	.word	0x08020a6c

0800ac38 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d006      	beq.n	800ac58 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7ff ffa7 	bl	800aba4 <_Z16StringFromBinaryPKhj>
 800ac56:	e004      	b.n	800ac62 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4904      	ldr	r1, [pc, #16]	; (800ac6c <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff fc6f 	bl	800a540 <_Z10StringFromPKc>
}
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	080209e0 	.word	0x080209e0

0800ac70 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	4913      	ldr	r1, [pc, #76]	; (800acd0 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7ff fed6 	bl	800aa34 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b80      	cmp	r3, #128	; 0x80
 800ac8c:	bf28      	it	cs
 800ac8e:	2380      	movcs	r3, #128	; 0x80
 800ac90:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800ac92:	f107 0314 	add.w	r3, r7, #20
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7ff ffcc 	bl	800ac38 <_Z22StringFromBinaryOrNullPKhj>
 800aca0:	f107 0314 	add.w	r3, r7, #20
 800aca4:	4619      	mov	r1, r3
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fa3a 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff f9b8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d903      	bls.n	800acc6 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800acbe:	4905      	ldr	r1, [pc, #20]	; (800acd4 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff fa3f 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800acc6:	bf00      	nop
}
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	08020a74 	.word	0x08020a74
 800acd4:	08020a90 	.word	0x08020a90

0800acd8 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d006      	beq.n	800acf8 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff ffbd 	bl	800ac70 <_Z24StringFromBinaryWithSizePKhj>
 800acf6:	e004      	b.n	800ad02 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	4904      	ldr	r1, [pc, #16]	; (800ad0c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff fc1f 	bl	800a540 <_Z10StringFromPKc>
}
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	080209e0 	.word	0x080209e0

0800ad10 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ad1e:	4925      	ldr	r1, [pc, #148]	; (800adb4 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f7fe fdc8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	d802      	bhi.n	800ad32 <_Z20StringFromMaskedBitsmmj+0x22>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	e000      	b.n	800ad34 <_Z20StringFromMaskedBitsmmj+0x24>
 800ad32:	2320      	movs	r3, #32
 800ad34:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad40:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800ad42:	2300      	movs	r3, #0
 800ad44:	61fb      	str	r3, [r7, #28]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d22d      	bcs.n	800adaa <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	4013      	ands	r3, r2
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <_Z20StringFromMaskedBitsmmj+0x56>
 800ad62:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800ad64:	e000      	b.n	800ad68 <_Z20StringFromMaskedBitsmmj+0x58>
 800ad66:	4b15      	ldr	r3, [pc, #84]	; (800adbc <_Z20StringFromMaskedBitsmmj+0xac>)
 800ad68:	4619      	mov	r1, r3
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f7ff f9ea 	bl	800a144 <_ZN12SimpleStringpLEPKc>
 800ad70:	e003      	b.n	800ad7a <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800ad72:	4913      	ldr	r1, [pc, #76]	; (800adc0 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff f9e5 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	f003 0307 	and.w	r3, r3, #7
 800ad80:	2b07      	cmp	r3, #7
 800ad82:	d108      	bne.n	800ad96 <_Z20StringFromMaskedBitsmmj+0x86>
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	69fa      	ldr	r2, [r7, #28]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d003      	beq.n	800ad96 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800ad8e:	490d      	ldr	r1, [pc, #52]	; (800adc4 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff f9d7 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	3301      	adds	r3, #1
 800ada6:	61fb      	str	r3, [r7, #28]
 800ada8:	e7cd      	b.n	800ad46 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800adaa:	bf00      	nop
}
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	080209c0 	.word	0x080209c0
 800adb8:	08020a98 	.word	0x08020a98
 800adbc:	08020a9c 	.word	0x08020a9c
 800adc0:	08020aa0 	.word	0x08020aa0
 800adc4:	08020aa4 	.word	0x08020aa4

0800adc8 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	4b18      	ldr	r3, [pc, #96]	; (800ae38 <_Z23StringFromOrdinalNumberj+0x70>)
 800add6:	fba3 1302 	umull	r1, r3, r3, r2
 800adda:	08d9      	lsrs	r1, r3, #3
 800addc:	460b      	mov	r3, r1
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b0a      	cmp	r3, #10
 800adec:	d905      	bls.n	800adfa <_Z23StringFromOrdinalNumberj+0x32>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b0d      	cmp	r3, #13
 800adf2:	d802      	bhi.n	800adfa <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800adf4:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <_Z23StringFromOrdinalNumberj+0x74>)
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	e013      	b.n	800ae22 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d102      	bne.n	800ae06 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800ae00:	4b0f      	ldr	r3, [pc, #60]	; (800ae40 <_Z23StringFromOrdinalNumberj+0x78>)
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	e00d      	b.n	800ae22 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d102      	bne.n	800ae12 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800ae0c:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <_Z23StringFromOrdinalNumberj+0x7c>)
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e007      	b.n	800ae22 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d102      	bne.n	800ae1e <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800ae18:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <_Z23StringFromOrdinalNumberj+0x80>)
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e001      	b.n	800ae22 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800ae1e:	4b07      	ldr	r3, [pc, #28]	; (800ae3c <_Z23StringFromOrdinalNumberj+0x74>)
 800ae20:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	4908      	ldr	r1, [pc, #32]	; (800ae4c <_Z23StringFromOrdinalNumberj+0x84>)
 800ae2a:	f7ff fe03 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	cccccccd 	.word	0xcccccccd
 800ae3c:	08020aa8 	.word	0x08020aa8
 800ae40:	08020aac 	.word	0x08020aac
 800ae44:	08020ab0 	.word	0x08020ab0
 800ae48:	08020ab4 	.word	0x08020ab4
 800ae4c:	08020ab8 	.word	0x08020ab8

0800ae50 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4907      	ldr	r1, [pc, #28]	; (800ae7c <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe fd29 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	60da      	str	r2, [r3, #12]
}
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	080209c0 	.word	0x080209c0

0800ae80 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d01e      	beq.n	800aed0 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	18d4      	adds	r4, r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d004      	beq.n	800aeb4 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800aeaa:	3c08      	subs	r4, #8
 800aeac:	4620      	mov	r0, r4
 800aeae:	f7ff f8ba 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800aeb2:	e7f6      	b.n	800aea2 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f1a3 0208 	sub.w	r2, r3, #8
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3301      	adds	r3, #1
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	4619      	mov	r1, r3
 800aeca:	4610      	mov	r0, r2
 800aecc:	f7fc f976 	bl	80071bc <_ZdaPvj>

    size_ = _size;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68dc      	ldr	r4, [r3, #12]
 800aeda:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800aede:	d202      	bcs.n	800aee6 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800aee0:	1c63      	adds	r3, r4, #1
 800aee2:	00db      	lsls	r3, r3, #3
 800aee4:	e001      	b.n	800aeea <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800aee6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeea:	f240 4227 	movw	r2, #1063	; 0x427
 800aeee:	4910      	ldr	r1, [pc, #64]	; (800af30 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fc f941 	bl	8007178 <_ZnajPKci>
 800aef6:	4605      	mov	r5, r0
 800aef8:	1d2b      	adds	r3, r5, #4
 800aefa:	3b04      	subs	r3, #4
 800aefc:	2208      	movs	r2, #8
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	1d2b      	adds	r3, r5, #4
 800af02:	601c      	str	r4, [r3, #0]
 800af04:	f105 0308 	add.w	r3, r5, #8
 800af08:	1e62      	subs	r2, r4, #1
 800af0a:	4614      	mov	r4, r2
 800af0c:	461e      	mov	r6, r3
 800af0e:	2c00      	cmp	r4, #0
 800af10:	db06      	blt.n	800af20 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800af12:	4908      	ldr	r1, [pc, #32]	; (800af34 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800af14:	4630      	mov	r0, r6
 800af16:	f7fe fcce 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800af1a:	3608      	adds	r6, #8
 800af1c:	3c01      	subs	r4, #1
 800af1e:	e7f6      	b.n	800af0e <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800af20:	f105 0208 	add.w	r2, r5, #8
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af30:	08020900 	.word	0x08020900
 800af34:	080209c0 	.word	0x080209c0

0800af38 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800af38:	b590      	push	{r4, r7, lr}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01e      	beq.n	800af86 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3b04      	subs	r3, #4
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	00db      	lsls	r3, r3, #3
 800af56:	18d4      	adds	r4, r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	429c      	cmp	r4, r3
 800af5e:	d004      	beq.n	800af6a <_ZN22SimpleStringCollectionD1Ev+0x32>
 800af60:	3c08      	subs	r4, #8
 800af62:	4620      	mov	r0, r4
 800af64:	f7ff f85f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800af68:	e7f6      	b.n	800af58 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f1a3 0208 	sub.w	r2, r3, #8
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3b04      	subs	r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3301      	adds	r3, #1
 800af7c:	00db      	lsls	r3, r3, #3
 800af7e:	4619      	mov	r1, r3
 800af80:	4610      	mov	r0, r2
 800af82:	f7fc f91b 	bl	80071bc <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3304      	adds	r3, #4
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff f84b 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	bd90      	pop	{r4, r7, pc}

0800af9a <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
    return size_;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68db      	ldr	r3, [r3, #12]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
	...

0800afb4 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800afb4:	b590      	push	{r4, r7, lr}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d315      	bcc.n	800aff4 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	1d1c      	adds	r4, r3, #4
 800afcc:	f107 0308 	add.w	r3, r7, #8
 800afd0:	490d      	ldr	r1, [pc, #52]	; (800b008 <_ZN22SimpleStringCollectionixEj+0x54>)
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe fc6f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4619      	mov	r1, r3
 800afde:	4620      	mov	r0, r4
 800afe0:	f7fe fcd5 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800afe4:	f107 0308 	add.w	r3, r7, #8
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff f81c 	bl	800a026 <_ZN12SimpleStringD1Ev>
        return empty_;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3304      	adds	r3, #4
 800aff2:	e004      	b.n	800affe <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	4413      	add	r3, r2
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	bd90      	pop	{r4, r7, pc}
 800b006:	bf00      	nop
 800b008:	080209c0 	.word	0x080209c0

0800b00c <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	f7fa fb88 	bl	800572c <_ZN17ConsoleTestOutputC1Ev>
 800b01c:	4a08      	ldr	r2, [pc, #32]	; (800b040 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	611a      	str	r2, [r3, #16]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3314      	adds	r3, #20
 800b02c:	4905      	ldr	r1, [pc, #20]	; (800b044 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fe fc41 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
{
}
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	080239e8 	.word	0x080239e8
 800b044:	08020ac0 	.word	0x08020ac0

0800b048 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	4a08      	ldr	r2, [pc, #32]	; (800b074 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3314      	adds	r3, #20
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe ffe3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4618      	mov	r0, r3
 800b064:	f7fa fb74 	bl	8005750 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4618      	mov	r0, r3
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	080239e8 	.word	0x080239e8

0800b078 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
}
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff ffe1 	bl	800b048 <_ZN18TeamCityTestOutputD1Ev>
 800b086:	211c      	movs	r1, #28
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7fc f865 	bl	8007158 <_ZdlPvj>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	332c      	adds	r3, #44	; 0x2c
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	492b      	ldr	r1, [pc, #172]	; (800b15c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800b0b2:	f107 0308 	add.w	r3, r7, #8
 800b0b6:	6839      	ldr	r1, [r7, #0]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f004 fdf7 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800b0be:	f107 0308 	add.w	r3, r7, #8
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe ff82 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f919 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b0d2:	f107 0308 	add.w	r3, r7, #8
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe ffa5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	332c      	adds	r3, #44	; 0x2c
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	491e      	ldr	r1, [pc, #120]	; (800b160 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	4798      	blx	r3
    if (!test.willRun()) {
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3318      	adds	r3, #24
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6838      	ldr	r0, [r7, #0]
 800b0f6:	4798      	blx	r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	f083 0301 	eor.w	r3, r3, #1
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b00      	cmp	r3, #0
 800b102:	d024      	beq.n	800b14e <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	332c      	adds	r3, #44	; 0x2c
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4915      	ldr	r1, [pc, #84]	; (800b164 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800b110:	4610      	mov	r0, r2
 800b112:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800b114:	f107 0310 	add.w	r3, r7, #16
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f004 fdc6 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800b120:	f107 0310 	add.w	r3, r7, #16
 800b124:	4618      	mov	r0, r3
 800b126:	f7fe ff51 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b12a:	4603      	mov	r3, r0
 800b12c:	4619      	mov	r1, r3
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f8e8 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b134:	f107 0310 	add.w	r3, r7, #16
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe ff74 	bl	800a026 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	332c      	adds	r3, #44	; 0x2c
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4905      	ldr	r1, [pc, #20]	; (800b160 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800b14a:	4610      	mov	r0, r2
 800b14c:	4798      	blx	r3
    }
    currtest_ = &test;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	611a      	str	r2, [r3, #16]
}
 800b154:	bf00      	nop
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	08020ac4 	.word	0x08020ac4
 800b160:	08020ae4 	.word	0x08020ae4
 800b164:	08020ae8 	.word	0x08020ae8

0800b168 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b168:	b5b0      	push	{r4, r5, r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d03b      	beq.n	800b1f2 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	332c      	adds	r3, #44	; 0x2c
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	491d      	ldr	r1, [pc, #116]	; (800b1fc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800b186:	4610      	mov	r0, r2
 800b188:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	691a      	ldr	r2, [r3, #16]
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	4611      	mov	r1, r2
 800b194:	4618      	mov	r0, r3
 800b196:	f004 fd89 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800b19a:	f107 0308 	add.w	r3, r7, #8
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ff14 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f8ab 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe ff37 	bl	800a026 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	332c      	adds	r3, #44	; 0x2c
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	490f      	ldr	r1, [pc, #60]	; (800b200 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800b1c8:	687d      	ldr	r5, [r7, #4]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3334      	adds	r3, #52	; 0x34
 800b1d0:	681c      	ldr	r4, [r3, #0]
 800b1d2:	6838      	ldr	r0, [r7, #0]
 800b1d4:	f004 fa0a 	bl	800f5ec <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47a0      	blx	r4
    print("']\n");
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	332c      	adds	r3, #44	; 0x2c
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4906      	ldr	r1, [pc, #24]	; (800b204 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	4798      	blx	r3
 800b1f0:	e000      	b.n	800b1f4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800b1f2:	bf00      	nop
}
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08020b08 	.word	0x08020b08
 800b200:	08020b28 	.word	0x08020b28
 800b204:	08020ae4 	.word	0x08020ae4

0800b208 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f103 0414 	add.w	r4, r3, #20
 800b218:	f107 0308 	add.w	r3, r7, #8
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f004 fd53 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800b224:	f107 0308 	add.w	r3, r7, #8
 800b228:	4619      	mov	r1, r3
 800b22a:	4620      	mov	r0, r4
 800b22c:	f7fe fbaf 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fef6 	bl	800a026 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	332c      	adds	r3, #44	; 0x2c
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	490c      	ldr	r1, [pc, #48]	; (800b278 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800b246:	4610      	mov	r0, r2
 800b248:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3314      	adds	r3, #20
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe febc 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b254:	4603      	mov	r3, r0
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f853 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	332c      	adds	r3, #44	; 0x2c
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4904      	ldr	r1, [pc, #16]	; (800b27c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800b26a:	4610      	mov	r0, r2
 800b26c:	4798      	blx	r3
}
 800b26e:	bf00      	nop
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	bd90      	pop	{r4, r7, pc}
 800b276:	bf00      	nop
 800b278:	08020b38 	.word	0x08020b38
 800b27c:	08020ae4 	.word	0x08020ae4

0800b280 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800b280:	b590      	push	{r4, r7, lr}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 0414 	add.w	r4, r3, #20
 800b290:	f107 0308 	add.w	r3, r7, #8
 800b294:	4918      	ldr	r1, [pc, #96]	; (800b2f8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe fb0d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800b29c:	f107 0308 	add.w	r3, r7, #8
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f7fe fecb 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461c      	mov	r4, r3
 800b2ac:	f107 0308 	add.w	r3, r7, #8
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fe feb8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b2b6:	2c00      	cmp	r4, #0
 800b2b8:	d11a      	bne.n	800b2f0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	332c      	adds	r3, #44	; 0x2c
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	490d      	ldr	r1, [pc, #52]	; (800b2fc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3314      	adds	r3, #20
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fe fe7c 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f813 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	332c      	adds	r3, #44	; 0x2c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4905      	ldr	r1, [pc, #20]	; (800b300 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	4798      	blx	r3
 800b2ee:	e000      	b.n	800b2f2 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800b2f0:	bf00      	nop
}
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd90      	pop	{r4, r7, pc}
 800b2f8:	08020ac0 	.word	0x08020ac0
 800b2fc:	08020b5c 	.word	0x08020b5c
 800b300:	08020ae4 	.word	0x08020ae4

0800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d03f      	beq.n	800b396 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b27      	cmp	r3, #39	; 0x27
 800b31c:	d00b      	beq.n	800b336 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b7c      	cmp	r3, #124	; 0x7c
 800b324:	d007      	beq.n	800b336 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b5b      	cmp	r3, #91	; 0x5b
 800b32c:	d003      	beq.n	800b336 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b5d      	cmp	r3, #93	; 0x5d
 800b334:	d107      	bne.n	800b346 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800b336:	237c      	movs	r3, #124	; 0x7c
 800b338:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	73bb      	strb	r3, [r7, #14]
 800b344:	e01a      	b.n	800b37c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b0d      	cmp	r3, #13
 800b34c:	d106      	bne.n	800b35c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800b34e:	237c      	movs	r3, #124	; 0x7c
 800b350:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800b352:	2372      	movs	r3, #114	; 0x72
 800b354:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	73bb      	strb	r3, [r7, #14]
 800b35a:	e00f      	b.n	800b37c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b0a      	cmp	r3, #10
 800b362:	d106      	bne.n	800b372 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800b364:	237c      	movs	r3, #124	; 0x7c
 800b366:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800b368:	236e      	movs	r3, #110	; 0x6e
 800b36a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73bb      	strb	r3, [r7, #14]
 800b370:	e004      	b.n	800b37c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3328      	adds	r3, #40	; 0x28
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f107 010c 	add.w	r1, r7, #12
 800b38a:	4610      	mov	r0, r2
 800b38c:	4798      	blx	r3
        s++;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	603b      	str	r3, [r7, #0]
    while (*s) {
 800b394:	e7bb      	b.n	800b30e <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800b3a0:	b5b0      	push	{r4, r5, r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	332c      	adds	r3, #44	; 0x2c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4968      	ldr	r1, [pc, #416]	; (800b558 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3310      	adds	r3, #16
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f107 0208 	add.w	r2, r7, #8
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	f107 0308 	add.w	r3, r7, #8
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fe fdfb 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff ff92 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b3e0:	f107 0308 	add.w	r3, r7, #8
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fe1e 	bl	800a026 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	332c      	adds	r3, #44	; 0x2c
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4959      	ldr	r1, [pc, #356]	; (800b55c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800b3fa:	6838      	ldr	r0, [r7, #0]
 800b3fc:	f000 fa15 	bl	800b82a <_ZNK11TestFailure17isOutsideTestFileEv>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d105      	bne.n	800b412 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800b406:	6838      	ldr	r0, [r7, #0]
 800b408:	f000 fa21 	bl	800b84e <_ZNK11TestFailure18isInHelperFunctionEv>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800b412:	2301      	movs	r3, #1
 800b414:	e000      	b.n	800b418 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800b416:	2300      	movs	r3, #0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d042      	beq.n	800b4a2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	332c      	adds	r3, #44	; 0x2c
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	494e      	ldr	r1, [pc, #312]	; (800b560 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800b428:	4610      	mov	r0, r2
 800b42a:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800b42c:	687d      	ldr	r5, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	332c      	adds	r3, #44	; 0x2c
 800b434:	681c      	ldr	r4, [r3, #0]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	331c      	adds	r3, #28
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f107 0210 	add.w	r2, r7, #16
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	f107 0310 	add.w	r3, r7, #16
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fdbd 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b452:	4603      	mov	r3, r0
 800b454:	4619      	mov	r1, r3
 800b456:	4628      	mov	r0, r5
 800b458:	47a0      	blx	r4
 800b45a:	f107 0310 	add.w	r3, r7, #16
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fde1 	bl	800a026 <_ZN12SimpleStringD1Ev>
        print(":");
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	332c      	adds	r3, #44	; 0x2c
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	493d      	ldr	r1, [pc, #244]	; (800b564 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800b474:	687d      	ldr	r5, [r7, #4]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3334      	adds	r3, #52	; 0x34
 800b47c:	681c      	ldr	r4, [r3, #0]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3320      	adds	r3, #32
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6838      	ldr	r0, [r7, #0]
 800b488:	4798      	blx	r3
 800b48a:	4603      	mov	r3, r0
 800b48c:	4619      	mov	r1, r3
 800b48e:	4628      	mov	r0, r5
 800b490:	47a0      	blx	r4
        print("): ");
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	332c      	adds	r3, #44	; 0x2c
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4932      	ldr	r1, [pc, #200]	; (800b568 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800b49e:	4610      	mov	r0, r2
 800b4a0:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f107 0218 	add.w	r2, r7, #24
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	f107 0318 	add.w	r3, r7, #24
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fd87 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff ff1e 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b4c8:	f107 0318 	add.w	r3, r7, #24
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe fdaa 	bl	800a026 <_ZN12SimpleStringD1Ev>
    print(":");
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	332c      	adds	r3, #44	; 0x2c
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4921      	ldr	r1, [pc, #132]	; (800b564 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800b4e2:	687d      	ldr	r5, [r7, #4]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3334      	adds	r3, #52	; 0x34
 800b4ea:	681c      	ldr	r4, [r3, #0]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3314      	adds	r3, #20
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6838      	ldr	r0, [r7, #0]
 800b4f6:	4798      	blx	r3
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47a0      	blx	r4

    print("' details='");
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	332c      	adds	r3, #44	; 0x2c
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4918      	ldr	r1, [pc, #96]	; (800b56c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3318      	adds	r3, #24
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f107 0220 	add.w	r2, r7, #32
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	4610      	mov	r0, r2
 800b520:	4798      	blx	r3
 800b522:	f107 0320 	add.w	r3, r7, #32
 800b526:	4618      	mov	r0, r3
 800b528:	f7fe fd50 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b52c:	4603      	mov	r3, r0
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fee7 	bl	800b304 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b536:	f107 0320 	add.w	r3, r7, #32
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fd73 	bl	800a026 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	332c      	adds	r3, #44	; 0x2c
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4909      	ldr	r1, [pc, #36]	; (800b570 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
}
 800b550:	bf00      	nop
 800b552:	3728      	adds	r7, #40	; 0x28
 800b554:	46bd      	mov	sp, r7
 800b556:	bdb0      	pop	{r4, r5, r7, pc}
 800b558:	08020b80 	.word	0x08020b80
 800b55c:	08020ba0 	.word	0x08020ba0
 800b560:	08020bac 	.word	0x08020bac
 800b564:	08020bbc 	.word	0x08020bbc
 800b568:	08020bc0 	.word	0x08020bc0
 800b56c:	08020bc4 	.word	0x08020bc4
 800b570:	08020ae4 	.word	0x08020ae4

0800b574 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800b580:	4a1a      	ldr	r2, [pc, #104]	; (800b5ec <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3314      	adds	r3, #20
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	3204      	adds	r2, #4
 800b592:	68b9      	ldr	r1, [r7, #8]
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	330c      	adds	r3, #12
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f004 fb84 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3314      	adds	r3, #20
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f004 fc4f 	bl	800fe4e <_ZNK10UtestShell7getFileEv>
 800b5b0:	68b8      	ldr	r0, [r7, #8]
 800b5b2:	f004 fc5b 	bl	800fe6c <_ZNK10UtestShell13getLineNumberEv>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	61da      	str	r2, [r3, #28]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	3320      	adds	r3, #32
 800b5c0:	68b9      	ldr	r1, [r7, #8]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f004 fc43 	bl	800fe4e <_ZNK10UtestShell7getFileEv>
 800b5c8:	68b8      	ldr	r0, [r7, #8]
 800b5ca:	f004 fc4f 	bl	800fe6c <_ZNK10UtestShell13getLineNumberEv>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	629a      	str	r2, [r3, #40]	; 0x28
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	332c      	adds	r3, #44	; 0x2c
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe f9bf 	bl	800995e <_ZN12SimpleStringC1ERKS_>
{
}
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	08023cb4 	.word	0x08023cb4

0800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800b5fe:	4a19      	ldr	r2, [pc, #100]	; (800b664 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3314      	adds	r3, #20
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	3204      	adds	r2, #4
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	4610      	mov	r0, r2
 800b614:	4798      	blx	r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	330c      	adds	r3, #12
 800b61a:	68b9      	ldr	r1, [r7, #8]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f004 fb45 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3314      	adds	r3, #20
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe f944 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	61da      	str	r2, [r3, #28]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3320      	adds	r3, #32
 800b638:	68b9      	ldr	r1, [r7, #8]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f004 fc07 	bl	800fe4e <_ZNK10UtestShell7getFileEv>
 800b640:	68b8      	ldr	r0, [r7, #8]
 800b642:	f004 fc13 	bl	800fe6c <_ZNK10UtestShell13getLineNumberEv>
 800b646:	4602      	mov	r2, r0
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	629a      	str	r2, [r3, #40]	; 0x28
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	332c      	adds	r3, #44	; 0x2c
 800b650:	4905      	ldr	r1, [pc, #20]	; (800b668 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe f92f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
{
}
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	08023cb4 	.word	0x08023cb4
 800b668:	08020bd0 	.word	0x08020bd0

0800b66c <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800b676:	4a1e      	ldr	r2, [pc, #120]	; (800b6f0 <_ZN11TestFailureC1ERKS_+0x84>)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	3304      	adds	r3, #4
 800b684:	4619      	mov	r1, r3
 800b686:	4610      	mov	r0, r2
 800b688:	f7fe f969 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f103 020c 	add.w	r2, r3, #12
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	330c      	adds	r3, #12
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7fe f960 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f103 0214 	add.w	r2, r3, #20
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	3314      	adds	r3, #20
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f7fe f957 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	69da      	ldr	r2, [r3, #28]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	61da      	str	r2, [r3, #28]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f103 0220 	add.w	r2, r3, #32
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	3320      	adds	r3, #32
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7fe f94a 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	629a      	str	r2, [r3, #40]	; 0x28
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	332c      	adds	r3, #44	; 0x2c
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	f7fe f93d 	bl	800995e <_ZN12SimpleStringC1ERKS_>
{
}
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	08023cb4 	.word	0x08023cb4

0800b6f4 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	4a10      	ldr	r2, [pc, #64]	; (800b740 <_ZN11TestFailureD1Ev+0x4c>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	332c      	adds	r3, #44	; 0x2c
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe fc8d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	3320      	adds	r3, #32
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fc88 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3314      	adds	r3, #20
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe fc83 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	330c      	adds	r3, #12
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe fc7e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fc79 	bl	800a026 <_ZN12SimpleStringD1Ev>
{
}
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	08023cb4 	.word	0x08023cb4

0800b744 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
}
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ffd1 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800b752:	2134      	movs	r1, #52	; 0x34
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7fb fcff 	bl	8007158 <_ZdlPvj>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
    return fileName_;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	3314      	adds	r3, #20
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7fe f8f2 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b082      	sub	sp, #8
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	3320      	adds	r3, #32
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fe f8e3 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
    return testName_;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7fe f8d4 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	330c      	adds	r3, #12
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fe f8c5 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	69db      	ldr	r3, [r3, #28]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800b800:	4618      	mov	r0, r3
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
    return message_;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	332c      	adds	r3, #44	; 0x2c
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7fe f89e 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f103 0220 	add.w	r2, r3, #32
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3314      	adds	r3, #20
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fe fc42 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 800b844:	4603      	mov	r3, r0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	69da      	ldr	r2, [r3, #28]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	429a      	cmp	r2, r3
 800b860:	bf34      	ite	cc
 800b862:	2301      	movcc	r3, #1
 800b864:	2300      	movcs	r3, #0
 800b866:	b2db      	uxtb	r3, r3
}
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7fe fba2 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b888:	4604      	mov	r4, r0
 800b88a:	6838      	ldr	r0, [r7, #0]
 800b88c:	f7fe fb9e 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b890:	4603      	mov	r3, r0
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	4622      	mov	r2, r4
 800b896:	4903      	ldr	r1, [pc, #12]	; (800b8a4 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800b898:	f7ff f8cc 	bl	800aa34 <_Z16StringFromFormatPKcz>
}
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd90      	pop	{r4, r7, pc}
 800b8a4:	08020bdc 	.word	0x08020bdc

0800b8a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800b8a8:	b590      	push	{r4, r7, lr}
 800b8aa:	b097      	sub	sp, #92	; 0x5c
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800b8b6:	494c      	ldr	r1, [pc, #304]	; (800b9e8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f7fd fffc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800b8be:	2314      	movs	r3, #20
 800b8c0:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800b8c2:	230a      	movs	r3, #10
 800b8c4:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800b8c6:	f107 0320 	add.w	r3, r7, #32
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	4947      	ldr	r1, [pc, #284]	; (800b9ec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe f80c 	bl	80098ec <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800b8d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8d8:	f107 0120 	add.w	r1, r7, #32
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fe fc03 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800b8e4:	f107 0318 	add.w	r3, r7, #24
 800b8e8:	f107 0220 	add.w	r2, r7, #32
 800b8ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fe fbfa 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800b8f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe fb93 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800b900:	f107 0310 	add.w	r3, r7, #16
 800b904:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b906:	493a      	ldr	r1, [pc, #232]	; (800b9f0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff f893 	bl	800aa34 <_Z16StringFromFormatPKcz>

    result += "\n";
 800b90e:	4939      	ldr	r1, [pc, #228]	; (800b9f4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7fe fc17 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800b916:	f107 0310 	add.w	r3, r7, #16
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe fb56 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b920:	4604      	mov	r4, r0
 800b922:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800b926:	f107 0118 	add.w	r1, r7, #24
 800b92a:	2314      	movs	r3, #20
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	f7fe fc83 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
 800b932:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe fb48 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800b942:	4622      	mov	r2, r4
 800b944:	492c      	ldr	r1, [pc, #176]	; (800b9f8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800b946:	f7ff f875 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800b94a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b94e:	4619      	mov	r1, r3
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7fe fbe5 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800b956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fe fb63 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b960:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b964:	4618      	mov	r0, r3
 800b966:	f7fe fb5e 	bl	800a026 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800b96a:	f107 0310 	add.w	r3, r7, #16
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fb38 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800b974:	4603      	mov	r3, r0
 800b976:	f103 020a 	add.w	r2, r3, #10
 800b97a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b97e:	491b      	ldr	r1, [pc, #108]	; (800b9ec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800b980:	4618      	mov	r0, r3
 800b982:	f7fd ffb3 	bl	80098ec <_ZN12SimpleStringC1EPKcj>
 800b986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fb1e 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800b990:	4602      	mov	r2, r0
 800b992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b996:	4919      	ldr	r1, [pc, #100]	; (800b9fc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff f84b 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800b99e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7fe fbbb 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800b9aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fb39 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800b9b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fe fb34 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return result;
 800b9be:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800b9c0:	f107 0310 	add.w	r3, r7, #16
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe fb2e 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800b9ca:	f107 0318 	add.w	r3, r7, #24
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe fb29 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800b9d4:	f107 0320 	add.w	r3, r7, #32
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fe fb24 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return result;
 800b9de:	bf00      	nop
}
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	375c      	adds	r7, #92	; 0x5c
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd90      	pop	{r4, r7, pc}
 800b9e8:	08020bfc 	.word	0x08020bfc
 800b9ec:	08020c00 	.word	0x08020c00
 800b9f0:	08020c04 	.word	0x08020c04
 800b9f4:	08020c2c 	.word	0x08020c2c
 800b9f8:	08020c30 	.word	0x08020c30
 800b9fc:	08020c38 	.word	0x08020c38

0800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800ba00:	b590      	push	{r4, r7, lr}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800ba0c:	491a      	ldr	r1, [pc, #104]	; (800ba78 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f7fd ff51 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7fe faf5 	bl	800a004 <_ZNK12SimpleString7isEmptyEv>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f083 0301 	eor.w	r3, r3, #1
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d022      	beq.n	800ba6c <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800ba26:	f107 0310 	add.w	r3, r7, #16
 800ba2a:	4914      	ldr	r1, [pc, #80]	; (800ba7c <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fd ff42 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800ba32:	f107 0310 	add.w	r3, r7, #16
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7fe f800 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f083 0301 	eor.w	r3, r3, #1
 800ba44:	b2dc      	uxtb	r4, r3
 800ba46:	f107 0310 	add.w	r3, r7, #16
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fe faeb 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800ba50:	2c00      	cmp	r4, #0
 800ba52:	d003      	beq.n	800ba5c <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800ba54:	490a      	ldr	r1, [pc, #40]	; (800ba80 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f7fe fb74 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7fe fb5e 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800ba64:	4907      	ldr	r1, [pc, #28]	; (800ba84 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7fe fb6c 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800ba6c:	bf00      	nop
}
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd90      	pop	{r4, r7, pc}
 800ba76:	bf00      	nop
 800ba78:	08020bfc 	.word	0x08020bfc
 800ba7c:	08020c40 	.word	0x08020c40
 800ba80:	08020c4c 	.word	0x08020c4c
 800ba84:	08020c58 	.word	0x08020c58

0800ba88 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800ba88:	b590      	push	{r4, r7, lr}
 800ba8a:	b089      	sub	sp, #36	; 0x24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	68b9      	ldr	r1, [r7, #8]
 800ba9e:	f7ff fda7 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800baa2:	4a19      	ldr	r2, [pc, #100]	; (800bb08 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800baae:	68f9      	ldr	r1, [r7, #12]
 800bab0:	f107 0310 	add.w	r3, r7, #16
 800bab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff ffa2 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800babc:	f107 0310 	add.w	r3, r7, #16
 800bac0:	4619      	mov	r1, r3
 800bac2:	4620      	mov	r0, r4
 800bac4:	f7fd ff63 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800bac8:	f107 0310 	add.w	r3, r7, #16
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe faaa 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bad8:	68f9      	ldr	r1, [r7, #12]
 800bada:	f107 0018 	add.w	r0, r7, #24
 800bade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae2:	f7ff fec7 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800bae6:	f107 0318 	add.w	r3, r7, #24
 800baea:	4619      	mov	r1, r3
 800baec:	4620      	mov	r0, r4
 800baee:	f7fe fb17 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800baf2:	f107 0318 	add.w	r3, r7, #24
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fa95 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4618      	mov	r0, r3
 800bb00:	3724      	adds	r7, #36	; 0x24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd90      	pop	{r4, r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08023c88 	.word	0x08023c88

0800bb0c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800bb0c:	b5b0      	push	{r4, r5, r7, lr}
 800bb0e:	b094      	sub	sp, #80	; 0x50
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6278      	str	r0, [r7, #36]	; 0x24
 800bb14:	6239      	str	r1, [r7, #32]
 800bb16:	61fa      	str	r2, [r7, #28]
 800bb18:	61bb      	str	r3, [r7, #24]
 800bb1a:	ed87 0b04 	vstr	d0, [r7, #16]
 800bb1e:	ed87 1b02 	vstr	d1, [r7, #8]
 800bb22:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800bb26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	69fa      	ldr	r2, [r7, #28]
 800bb2c:	6a39      	ldr	r1, [r7, #32]
 800bb2e:	f7ff fd5f 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bb32:	4a4a      	ldr	r2, [pc, #296]	; (800bc5c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bb3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff ff5a 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800bb4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb50:	4619      	mov	r1, r3
 800bb52:	4620      	mov	r0, r4
 800bb54:	f7fd ff1b 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800bb58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe fa62 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bb68:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800bb6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bb6e:	2107      	movs	r1, #7
 800bb70:	ed97 0b04 	vldr	d0, [r7, #16]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fe ff1b 	bl	800a9b0 <_Z10StringFromdi>
 800bb7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb7e:	2107      	movs	r1, #7
 800bb80:	ed97 0b02 	vldr	d0, [r7, #8]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe ff13 	bl	800a9b0 <_Z10StringFromdi>
 800bb8a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bb8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800bb96:	4629      	mov	r1, r5
 800bb98:	f7ff fe6c 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800bb9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bba0:	4619      	mov	r1, r3
 800bba2:	4620      	mov	r0, r4
 800bba4:	f7fe fabc 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800bba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fa3a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800bbb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe fa35 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800bbbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe fa30 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	332c      	adds	r3, #44	; 0x2c
 800bbca:	4925      	ldr	r1, [pc, #148]	; (800bc60 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe fab9 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bbd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bbdc:	2107      	movs	r1, #7
 800bbde:	ed97 0b00 	vldr	d0, [r7]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fee4 	bl	800a9b0 <_Z10StringFromdi>
 800bbe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bbec:	4619      	mov	r1, r3
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f7fe fa96 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800bbf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe fa14 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	332c      	adds	r3, #44	; 0x2c
 800bc02:	4918      	ldr	r1, [pc, #96]	; (800bc64 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe fa9d 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800bc0a:	4b17      	ldr	r3, [pc, #92]	; (800bc68 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	ed97 0b04 	vldr	d0, [r7, #16]
 800bc12:	4798      	blx	r3
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10f      	bne.n	800bc3a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800bc1a:	4b13      	ldr	r3, [pc, #76]	; (800bc68 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	ed97 0b02 	vldr	d0, [r7, #8]
 800bc22:	4798      	blx	r3
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d107      	bne.n	800bc3a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800bc2a:	4b0f      	ldr	r3, [pc, #60]	; (800bc68 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	ed97 0b00 	vldr	d0, [r7]
 800bc32:	4798      	blx	r3
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e000      	b.n	800bc40 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d005      	beq.n	800bc50 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc46:	332c      	adds	r3, #44	; 0x2c
 800bc48:	4908      	ldr	r1, [pc, #32]	; (800bc6c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe fa7a 	bl	800a144 <_ZN12SimpleStringpLEPKc>
}
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	4618      	mov	r0, r3
 800bc54:	3750      	adds	r7, #80	; 0x50
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bdb0      	pop	{r4, r5, r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	08023c5c 	.word	0x08023c5c
 800bc60:	08020c5c 	.word	0x08020c5c
 800bc64:	08020c74 	.word	0x08020c74
 800bc68:	200000e4 	.word	0x200000e4
 800bc6c:	08020c78 	.word	0x08020c78

0800bc70 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800bc70:	b590      	push	{r4, r7, lr}
 800bc72:	b093      	sub	sp, #76	; 0x4c
 800bc74:	af02      	add	r7, sp, #8
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	f7ff fcb3 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bc8a:	4a4f      	ldr	r2, [pc, #316]	; (800bdc8 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bc96:	68f9      	ldr	r1, [r7, #12]
 800bc98:	f107 0320 	add.w	r3, r7, #32
 800bc9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff feae 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800bca4:	f107 0320 	add.w	r3, r7, #32
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f7fd fe6f 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800bcb0:	f107 0320 	add.w	r3, r7, #32
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fe f9b6 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800bcba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bcbc:	f7fe f986 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	f107 0318 	add.w	r3, r7, #24
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fc47 	bl	800a55c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800bcce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bcd0:	f7fe f97c 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	f107 0310 	add.w	r3, r7, #16
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe fc3d 	bl	800a55c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bce8:	68f9      	ldr	r1, [r7, #12]
 800bcea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800bcee:	f107 0310 	add.w	r3, r7, #16
 800bcf2:	f107 0218 	add.w	r2, r7, #24
 800bcf6:	f7ff fdbd 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800bcfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4620      	mov	r0, r4
 800bd02:	f7fe fa0d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800bd06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe f98b 	bl	800a026 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800bd10:	2300      	movs	r3, #0
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bd18:	f7fe fae9 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	461c      	mov	r4, r3
 800bd20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bd24:	f7fe fae3 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	429c      	cmp	r4, r3
 800bd2c:	bf0c      	ite	eq
 800bd2e:	2301      	moveq	r3, #1
 800bd30:	2300      	movne	r3, #0
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800bd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd3e:	e7e9      	b.n	800bd14 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800bd40:	2300      	movs	r3, #0
 800bd42:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd44:	f107 0310 	add.w	r3, r7, #16
 800bd48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe facf 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800bd50:	4603      	mov	r3, r0
 800bd52:	461c      	mov	r4, r3
 800bd54:	f107 0318 	add.w	r3, r7, #24
 800bd58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe fac7 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800bd60:	4603      	mov	r3, r0
 800bd62:	429c      	cmp	r4, r3
 800bd64:	bf0c      	ite	eq
 800bd66:	2301      	moveq	r3, #1
 800bd68:	2300      	movne	r3, #0
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d003      	beq.n	800bd78 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	3301      	adds	r3, #1
 800bd74:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd76:	e7e5      	b.n	800bd44 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bd84:	f107 0210 	add.w	r2, r7, #16
 800bd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	f7ff fd8b 	bl	800b8a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800bd92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd96:	4619      	mov	r1, r3
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f7fe f9c1 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800bd9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe f93f 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800bda8:	f107 0310 	add.w	r3, r7, #16
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fe f93a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800bdb2:	f107 0318 	add.w	r3, r7, #24
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe f935 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3744      	adds	r7, #68	; 0x44
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd90      	pop	{r4, r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	08023c30 	.word	0x08023c30

0800bdcc <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800bdcc:	b590      	push	{r4, r7, lr}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	f7ff fc05 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bde6:	4a1a      	ldr	r2, [pc, #104]	; (800be50 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bdf2:	68f9      	ldr	r1, [r7, #12]
 800bdf4:	f107 0310 	add.w	r3, r7, #16
 800bdf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fe00 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800be00:	f107 0310 	add.w	r3, r7, #16
 800be04:	4619      	mov	r1, r3
 800be06:	4620      	mov	r0, r4
 800be08:	f7fd fdc1 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800be0c:	f107 0310 	add.w	r3, r7, #16
 800be10:	4618      	mov	r0, r3
 800be12:	f7fe f908 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	332c      	adds	r3, #44	; 0x2c
 800be1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe f97f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	332c      	adds	r3, #44	; 0x2c
 800be26:	490b      	ldr	r1, [pc, #44]	; (800be54 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe f98b 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	332c      	adds	r3, #44	; 0x2c
 800be32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe f973 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	332c      	adds	r3, #44	; 0x2c
 800be3e:	4906      	ldr	r1, [pc, #24]	; (800be58 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe f97f 	bl	800a144 <_ZN12SimpleStringpLEPKc>
}
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	4618      	mov	r0, r3
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd90      	pop	{r4, r7, pc}
 800be50:	08023c04 	.word	0x08023c04
 800be54:	08020c9c 	.word	0x08020c9c
 800be58:	08020ca0 	.word	0x08020ca0

0800be5c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800be5c:	b5b0      	push	{r4, r5, r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	68b9      	ldr	r1, [r7, #8]
 800be72:	f7ff fbbd 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800be76:	4a1c      	ldr	r2, [pc, #112]	; (800bee8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800be82:	68f9      	ldr	r1, [r7, #12]
 800be84:	f107 0310 	add.w	r3, r7, #16
 800be88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff fdb8 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800be90:	f107 0310 	add.w	r3, r7, #16
 800be94:	4619      	mov	r1, r3
 800be96:	4620      	mov	r0, r4
 800be98:	f7fd fd79 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800be9c:	f107 0310 	add.w	r3, r7, #16
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe f8c0 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800beac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800beae:	f7fe f88d 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800beb2:	4605      	mov	r5, r0
 800beb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beb6:	f7fe f889 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800beba:	4603      	mov	r3, r0
 800bebc:	f107 0018 	add.w	r0, r7, #24
 800bec0:	462a      	mov	r2, r5
 800bec2:	490a      	ldr	r1, [pc, #40]	; (800beec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800bec4:	f7fe fdb6 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800bec8:	f107 0318 	add.w	r3, r7, #24
 800becc:	4619      	mov	r1, r3
 800bece:	4620      	mov	r0, r4
 800bed0:	f7fe f926 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800bed4:	f107 0318 	add.w	r3, r7, #24
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fe f8a4 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4618      	mov	r0, r3
 800bee2:	3720      	adds	r7, #32
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bdb0      	pop	{r4, r5, r7, pc}
 800bee8:	08023bd8 	.word	0x08023bd8
 800beec:	08020cac 	.word	0x08020cac

0800bef0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800bef0:	b590      	push	{r4, r7, lr}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	f7ff fb73 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bf0a:	4a1a      	ldr	r2, [pc, #104]	; (800bf74 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	f107 0310 	add.w	r3, r7, #16
 800bf1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff fd6e 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800bf24:	f107 0310 	add.w	r3, r7, #16
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7fd fd2f 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800bf30:	f107 0310 	add.w	r3, r7, #16
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe f876 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	332c      	adds	r3, #44	; 0x2c
 800bf3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe f8ed 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	332c      	adds	r3, #44	; 0x2c
 800bf4a:	490b      	ldr	r1, [pc, #44]	; (800bf78 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fe f8f9 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	332c      	adds	r3, #44	; 0x2c
 800bf56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fe f8e1 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	332c      	adds	r3, #44	; 0x2c
 800bf62:	4906      	ldr	r1, [pc, #24]	; (800bf7c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe f8ed 	bl	800a144 <_ZN12SimpleStringpLEPKc>
}
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	371c      	adds	r7, #28
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd90      	pop	{r4, r7, pc}
 800bf74:	08023bac 	.word	0x08023bac
 800bf78:	08020c9c 	.word	0x08020c9c
 800bf7c:	08020ca0 	.word	0x08020ca0

0800bf80 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
 800bf8c:	603b      	str	r3, [r7, #0]
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	68b9      	ldr	r1, [r7, #8]
 800bf96:	f7ff fb2b 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bf9a:	4a07      	ldr	r2, [pc, #28]	; (800bfb8 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	332c      	adds	r3, #44	; 0x2c
 800bfa4:	69b9      	ldr	r1, [r7, #24]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fd fcf1 	bl	800998e <_ZN12SimpleStringaSERKS_>
}
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	08023868 	.word	0x08023868

0800bfbc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800bfbc:	b590      	push	{r4, r7, lr}
 800bfbe:	b09d      	sub	sp, #116	; 0x74
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	f7ff fb0d 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800bfd6:	4a5d      	ldr	r2, [pc, #372]	; (800c14c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfe8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fd07 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800bff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bff6:	4619      	mov	r1, r3
 800bff8:	4620      	mov	r0, r4
 800bffa:	f7fd fcc8 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800bffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe f80f 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c00c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c010:	4618      	mov	r0, r3
 800c012:	f7fe fae1 	bl	800a5d8 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800c016:	f107 0320 	add.w	r3, r7, #32
 800c01a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fada 	bl	800a5d8 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c024:	f107 0120 	add.w	r1, r7, #32
 800c028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c02c:	2220      	movs	r2, #32
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe f8b6 	bl	800a1a0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c034:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c038:	4945      	ldr	r1, [pc, #276]	; (800c150 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fd fc3b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800c040:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c044:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c048:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fe f84c 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c052:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c056:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe fbd2 	bl	800a804 <_Z30BracketsFormattedHexStringFroml>
 800c060:	f107 0318 	add.w	r3, r7, #24
 800c064:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c068:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe f83c 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c076:	4618      	mov	r0, r3
 800c078:	f7fd ffd5 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c07c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c080:	4618      	mov	r0, r3
 800c082:	f7fd ffd0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c086:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fd ffcb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c090:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c094:	492e      	ldr	r1, [pc, #184]	; (800c150 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c096:	4618      	mov	r0, r3
 800c098:	f7fd fc0d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800c09c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c0a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c0a4:	f107 0120 	add.w	r1, r7, #32
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe f81e 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c0ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c0b2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fba4 	bl	800a804 <_Z30BracketsFormattedHexStringFroml>
 800c0bc:	f107 0310 	add.w	r3, r7, #16
 800c0c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c0c4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe f80e 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c0ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd ffa7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c0d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fd ffa2 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c0e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd ff9d 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c0f2:	68f9      	ldr	r1, [r7, #12]
 800c0f4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c0f8:	f107 0318 	add.w	r3, r7, #24
 800c0fc:	f107 0210 	add.w	r2, r7, #16
 800c100:	f7ff fbb8 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c104:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c108:	4619      	mov	r1, r3
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7fe f808 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c110:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c114:	4618      	mov	r0, r3
 800c116:	f7fd ff86 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c11a:	f107 0310 	add.w	r3, r7, #16
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fd ff81 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c124:	f107 0318 	add.w	r3, r7, #24
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fd ff7c 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800c12e:	f107 0320 	add.w	r3, r7, #32
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd ff77 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800c138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fd ff72 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4618      	mov	r0, r3
 800c146:	3774      	adds	r7, #116	; 0x74
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd90      	pop	{r4, r7, pc}
 800c14c:	08023b80 	.word	0x08023b80
 800c150:	08020c00 	.word	0x08020c00

0800c154 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b09d      	sub	sp, #116	; 0x74
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	68b9      	ldr	r1, [r7, #8]
 800c16a:	f7ff fa41 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c16e:	4a5d      	ldr	r2, [pc, #372]	; (800c2e4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c17a:	68f9      	ldr	r1, [r7, #12]
 800c17c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c180:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff fc3b 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c18a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c18e:	4619      	mov	r1, r3
 800c190:	4620      	mov	r0, r4
 800c192:	f7fd fbfc 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c196:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fd ff43 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c1a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c1a4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fe fc7d 	bl	800aaa8 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800c1ae:	f107 0320 	add.w	r3, r7, #32
 800c1b2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fc76 	bl	800aaa8 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c1bc:	f107 0120 	add.w	r1, r7, #32
 800c1c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fd ffea 	bl	800a1a0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c1cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1d0:	4945      	ldr	r1, [pc, #276]	; (800c2e8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd fb6f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800c1d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c1dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c1e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fd ff80 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c1ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1ee:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe fb22 	bl	800a83c <_Z30BracketsFormattedHexStringFromm>
 800c1f8:	f107 0318 	add.w	r3, r7, #24
 800c1fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c200:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c204:	4618      	mov	r0, r3
 800c206:	f7fd ff70 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c20a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fd ff09 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c214:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fd ff04 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c21e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c222:	4618      	mov	r0, r3
 800c224:	f7fd feff 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c228:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c22c:	492e      	ldr	r1, [pc, #184]	; (800c2e8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fd fb41 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800c234:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c238:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c23c:	f107 0120 	add.w	r1, r7, #32
 800c240:	4618      	mov	r0, r3
 800c242:	f7fd ff52 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c246:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c24a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe faf4 	bl	800a83c <_Z30BracketsFormattedHexStringFromm>
 800c254:	f107 0310 	add.w	r3, r7, #16
 800c258:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c25c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c260:	4618      	mov	r0, r3
 800c262:	f7fd ff42 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c266:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fd fedb 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c270:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c274:	4618      	mov	r0, r3
 800c276:	f7fd fed6 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c27a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fd fed1 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c28a:	68f9      	ldr	r1, [r7, #12]
 800c28c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c290:	f107 0318 	add.w	r3, r7, #24
 800c294:	f107 0210 	add.w	r2, r7, #16
 800c298:	f7ff faec 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c29c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f7fd ff3c 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c2a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd feba 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c2b2:	f107 0310 	add.w	r3, r7, #16
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fd feb5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c2bc:	f107 0318 	add.w	r3, r7, #24
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fd feb0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800c2c6:	f107 0320 	add.w	r3, r7, #32
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd feab 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800c2d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fd fea6 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3774      	adds	r7, #116	; 0x74
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd90      	pop	{r4, r7, pc}
 800c2e4:	08023b54 	.word	0x08023b54
 800c2e8:	08020c00 	.word	0x08020c00

0800c2ec <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b09d      	sub	sp, #116	; 0x74
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	68b9      	ldr	r1, [r7, #8]
 800c302:	f7ff f975 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c306:	4a5f      	ldr	r2, [pc, #380]	; (800c484 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c318:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff fb6f 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c326:	4619      	mov	r1, r3
 800c328:	4620      	mov	r0, r4
 800c32a:	f7fd fb30 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c32e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd fe77 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800c338:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800c33c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f7fe f936 	bl	800a5b4 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800c348:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800c34c:	f107 0320 	add.w	r3, r7, #32
 800c350:	4611      	mov	r1, r2
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe f92e 	bl	800a5b4 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c358:	f107 0120 	add.w	r1, r7, #32
 800c35c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c360:	2220      	movs	r2, #32
 800c362:	4618      	mov	r0, r3
 800c364:	f7fd ff1c 	bl	800a1a0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c36c:	4946      	ldr	r1, [pc, #280]	; (800c488 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd faa1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800c374:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c378:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c37c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c380:	4618      	mov	r0, r3
 800c382:	f7fd feb2 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c38a:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fa6f 	bl	800a874 <_Z30BracketsFormattedHexStringFroma>
 800c396:	f107 0318 	add.w	r3, r7, #24
 800c39a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c39e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fd fea1 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c3a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7fd fe3a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c3b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd fe35 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c3bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fd fe30 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c3c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c3ca:	492f      	ldr	r1, [pc, #188]	; (800c488 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fd fa72 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800c3d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c3d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c3da:	f107 0120 	add.w	r1, r7, #32
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fd fe83 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c3e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c3e8:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe fa40 	bl	800a874 <_Z30BracketsFormattedHexStringFroma>
 800c3f4:	f107 0310 	add.w	r3, r7, #16
 800c3f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c3fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c400:	4618      	mov	r0, r3
 800c402:	f7fd fe72 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 800c406:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd fe0b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c414:	4618      	mov	r0, r3
 800c416:	f7fd fe06 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c41a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fd fe01 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c42a:	68f9      	ldr	r1, [r7, #12]
 800c42c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800c430:	f107 0318 	add.w	r3, r7, #24
 800c434:	f107 0210 	add.w	r2, r7, #16
 800c438:	f7ff fa1c 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c43c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c440:	4619      	mov	r1, r3
 800c442:	4620      	mov	r0, r4
 800c444:	f7fd fe6c 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c448:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fd fdea 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c452:	f107 0310 	add.w	r3, r7, #16
 800c456:	4618      	mov	r0, r3
 800c458:	f7fd fde5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c45c:	f107 0318 	add.w	r3, r7, #24
 800c460:	4618      	mov	r0, r3
 800c462:	f7fd fde0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800c466:	f107 0320 	add.w	r3, r7, #32
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fd fddb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800c470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c474:	4618      	mov	r0, r3
 800c476:	f7fd fdd6 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4618      	mov	r0, r3
 800c47e:	3774      	adds	r7, #116	; 0x74
 800c480:	46bd      	mov	sp, r7
 800c482:	bd90      	pop	{r4, r7, pc}
 800c484:	08023b28 	.word	0x08023b28
 800c488:	08020c00 	.word	0x08020c00

0800c48c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b093      	sub	sp, #76	; 0x4c
 800c490:	af02      	add	r7, sp, #8
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	f7ff f8a5 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c4a6:	4a4a      	ldr	r2, [pc, #296]	; (800c5d0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c4b2:	68f9      	ldr	r1, [r7, #12]
 800c4b4:	f107 0320 	add.w	r3, r7, #32
 800c4b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7ff faa0 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c4c0:	f107 0320 	add.w	r3, r7, #32
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f7fd fa61 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c4cc:	f107 0320 	add.w	r3, r7, #32
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fd fda8 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c4d6:	f107 0318 	add.w	r3, r7, #24
 800c4da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe f83d 	bl	800a55c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c4e2:	f107 0310 	add.w	r3, r7, #16
 800c4e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe f837 	bl	800a55c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c4f4:	68f9      	ldr	r1, [r7, #12]
 800c4f6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c4fa:	f107 0310 	add.w	r3, r7, #16
 800c4fe:	f107 0218 	add.w	r2, r7, #24
 800c502:	f7ff f9b7 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c50a:	4619      	mov	r1, r3
 800c50c:	4620      	mov	r0, r4
 800c50e:	f7fd fe07 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c516:	4618      	mov	r0, r3
 800c518:	f7fd fd85 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800c51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d046      	beq.n	800c5b0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800c522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c524:	2b00      	cmp	r3, #0
 800c526:	d043      	beq.n	800c5b0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800c528:	2300      	movs	r3, #0
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c530:	4413      	add	r3, r2
 800c532:	781a      	ldrb	r2, [r3, #0]
 800c534:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c538:	440b      	add	r3, r1
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d103      	bne.n	800c548 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800c540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c542:	3301      	adds	r3, #1
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c546:	e7f1      	b.n	800c52c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800c548:	2300      	movs	r3, #0
 800c54a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c54c:	f107 0310 	add.w	r3, r7, #16
 800c550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c552:	4618      	mov	r0, r3
 800c554:	f7fd fecb 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800c558:	4603      	mov	r3, r0
 800c55a:	461c      	mov	r4, r3
 800c55c:	f107 0318 	add.w	r3, r7, #24
 800c560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c562:	4618      	mov	r0, r3
 800c564:	f7fd fec3 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800c568:	4603      	mov	r3, r0
 800c56a:	429c      	cmp	r4, r3
 800c56c:	bf0c      	ite	eq
 800c56e:	2301      	moveq	r3, #1
 800c570:	2300      	movne	r3, #0
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b00      	cmp	r3, #0
 800c576:	d003      	beq.n	800c580 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	3301      	adds	r3, #1
 800c57c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c57e:	e7e5      	b.n	800c54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c58c:	f107 0210 	add.w	r2, r7, #16
 800c590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	f7ff f987 	bl	800b8a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c59a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f7fd fdbd 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c5a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fd fd3b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c5b0:	f107 0310 	add.w	r3, r7, #16
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fd fd36 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c5ba:	f107 0318 	add.w	r3, r7, #24
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fd fd31 	bl	800a026 <_ZN12SimpleStringD1Ev>
    }
}
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3744      	adds	r7, #68	; 0x44
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd90      	pop	{r4, r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	08023afc 	.word	0x08023afc

0800c5d4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800c5d4:	b590      	push	{r4, r7, lr}
 800c5d6:	b093      	sub	sp, #76	; 0x4c
 800c5d8:	af02      	add	r7, sp, #8
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	f7ff f801 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c5ee:	4a55      	ldr	r2, [pc, #340]	; (800c744 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c5fa:	68f9      	ldr	r1, [r7, #12]
 800c5fc:	f107 0320 	add.w	r3, r7, #32
 800c600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff f9fc 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c608:	f107 0320 	add.w	r3, r7, #32
 800c60c:	4619      	mov	r1, r3
 800c60e:	4620      	mov	r0, r4
 800c610:	f7fd f9bd 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c614:	f107 0320 	add.w	r3, r7, #32
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fd fd04 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c61e:	f107 0318 	add.w	r3, r7, #24
 800c622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c624:	4618      	mov	r0, r3
 800c626:	f7fd ff99 	bl	800a55c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c62a:	f107 0310 	add.w	r3, r7, #16
 800c62e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c630:	4618      	mov	r0, r3
 800c632:	f7fd ff93 	bl	800a55c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c63c:	68f9      	ldr	r1, [r7, #12]
 800c63e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c642:	f107 0310 	add.w	r3, r7, #16
 800c646:	f107 0218 	add.w	r2, r7, #24
 800c64a:	f7ff f913 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c64e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c652:	4619      	mov	r1, r3
 800c654:	4620      	mov	r0, r4
 800c656:	f7fd fd63 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c65a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fd fce1 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800c664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c666:	2b00      	cmp	r3, #0
 800c668:	d05c      	beq.n	800c724 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800c66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d059      	beq.n	800c724 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800c670:	2300      	movs	r3, #0
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c678:	4413      	add	r3, r2
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fd f824 	bl	80096ca <_ZN12SimpleString7ToLowerEc>
 800c682:	4603      	mov	r3, r0
 800c684:	461c      	mov	r4, r3
 800c686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c68a:	4413      	add	r3, r2
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fd f81b 	bl	80096ca <_ZN12SimpleString7ToLowerEc>
 800c694:	4603      	mov	r3, r0
 800c696:	429c      	cmp	r4, r3
 800c698:	bf0c      	ite	eq
 800c69a:	2301      	moveq	r3, #1
 800c69c:	2300      	movne	r3, #0
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d003      	beq.n	800c6ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800c6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6aa:	e7e3      	b.n	800c674 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800c6b0:	f107 0310 	add.w	r3, r7, #16
 800c6b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd fe19 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fd f803 	bl	80096ca <_ZN12SimpleString7ToLowerEc>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461c      	mov	r4, r3
 800c6c8:	f107 0318 	add.w	r3, r7, #24
 800c6cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fd fe0d 	bl	800a2ee <_ZNK12SimpleString2atEj>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fc fff7 	bl	80096ca <_ZN12SimpleString7ToLowerEc>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	429c      	cmp	r4, r3
 800c6e0:	bf0c      	ite	eq
 800c6e2:	2301      	moveq	r3, #1
 800c6e4:	2300      	movne	r3, #0
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6f2:	e7dd      	b.n	800c6b0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c6fa:	68f9      	ldr	r1, [r7, #12]
 800c6fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c700:	f107 0210 	add.w	r2, r7, #16
 800c704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	f7ff f8cd 	bl	800b8a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c70e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c712:	4619      	mov	r1, r3
 800c714:	4620      	mov	r0, r4
 800c716:	f7fd fd03 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c71a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fd fc81 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800c724:	f107 0310 	add.w	r3, r7, #16
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fd fc7c 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800c72e:	f107 0318 	add.w	r3, r7, #24
 800c732:	4618      	mov	r0, r3
 800c734:	f7fd fc77 	bl	800a026 <_ZN12SimpleStringD1Ev>
    }
}
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4618      	mov	r0, r3
 800c73c:	3744      	adds	r7, #68	; 0x44
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd90      	pop	{r4, r7, pc}
 800c742:	bf00      	nop
 800c744:	08023ad0 	.word	0x08023ad0

0800c748 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800c748:	b5b0      	push	{r4, r5, r7, lr}
 800c74a:	b092      	sub	sp, #72	; 0x48
 800c74c:	af02      	add	r7, sp, #8
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
 800c754:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	68b9      	ldr	r1, [r7, #8]
 800c75e:	f7fe ff47 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c762:	4a40      	ldr	r2, [pc, #256]	; (800c864 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c76e:	68f9      	ldr	r1, [r7, #12]
 800c770:	f107 031c 	add.w	r3, r7, #28
 800c774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c776:	4618      	mov	r0, r3
 800c778:	f7ff f942 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c77c:	f107 031c 	add.w	r3, r7, #28
 800c780:	4619      	mov	r1, r3
 800c782:	4620      	mov	r0, r4
 800c784:	f7fd f903 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c788:	f107 031c 	add.w	r3, r7, #28
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fd fc4a 	bl	800a026 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800c792:	f107 0314 	add.w	r3, r7, #20
 800c796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fa4c 	bl	800ac38 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7a6:	68fd      	ldr	r5, [r7, #12]
 800c7a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c7ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7fe fa41 	bl	800ac38 <_Z22StringFromBinaryOrNullPKhj>
 800c7b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	f7ff f856 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c7c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f7fd fca6 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fd fc24 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c7de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fd fc1f 	bl	800a026 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800c7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d02f      	beq.n	800c84e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800c7ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d02c      	beq.n	800c84e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fc:	4413      	add	r3, r2
 800c7fe:	781a      	ldrb	r2, [r3, #0]
 800c800:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c804:	440b      	add	r3, r1
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d103      	bne.n	800c814 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	3301      	adds	r3, #1
 800c810:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c812:	e7f1      	b.n	800c7f8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c81a:	68f9      	ldr	r1, [r7, #12]
 800c81c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c81e:	4613      	mov	r3, r2
 800c820:	005b      	lsls	r3, r3, #1
 800c822:	4413      	add	r3, r2
 800c824:	1c5d      	adds	r5, r3, #1
 800c826:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c82a:	f107 0214 	add.w	r2, r7, #20
 800c82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	462b      	mov	r3, r5
 800c834:	f7ff f838 	bl	800b8a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c83c:	4619      	mov	r1, r3
 800c83e:	4620      	mov	r0, r4
 800c840:	f7fd fc6e 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c844:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fd fbec 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800c84e:	f107 0314 	add.w	r3, r7, #20
 800c852:	4618      	mov	r0, r3
 800c854:	f7fd fbe7 	bl	800a026 <_ZN12SimpleStringD1Ev>
	}
}
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	4618      	mov	r0, r3
 800c85c:	3740      	adds	r7, #64	; 0x40
 800c85e:	46bd      	mov	sp, r7
 800c860:	bdb0      	pop	{r4, r5, r7, pc}
 800c862:	bf00      	nop
 800c864:	08023aa4 	.word	0x08023aa4

0800c868 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800c868:	b5b0      	push	{r4, r5, r7, lr}
 800c86a:	b08c      	sub	sp, #48	; 0x30
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	68b9      	ldr	r1, [r7, #8]
 800c87e:	f7fe feb7 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c882:	4a26      	ldr	r2, [pc, #152]	; (800c91c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c88e:	68f9      	ldr	r1, [r7, #12]
 800c890:	f107 0310 	add.w	r3, r7, #16
 800c894:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c896:	4618      	mov	r0, r3
 800c898:	f7ff f8b2 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c89c:	f107 0310 	add.w	r3, r7, #16
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f7fd f873 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fd fbba 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c8b8:	68fd      	ldr	r5, [r7, #12]
 800c8ba:	f107 0020 	add.w	r0, r7, #32
 800c8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8c4:	f7fe fa24 	bl	800ad10 <_Z20StringFromMaskedBitsmmj>
 800c8c8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8d2:	f7fe fa1d 	bl	800ad10 <_Z20StringFromMaskedBitsmmj>
 800c8d6:	f107 0018 	add.w	r0, r7, #24
 800c8da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8de:	f107 0220 	add.w	r2, r7, #32
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	f7fe ffc6 	bl	800b874 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c8e8:	f107 0318 	add.w	r3, r7, #24
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f7fd fc16 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c8f4:	f107 0318 	add.w	r3, r7, #24
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fd fb94 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c8fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c902:	4618      	mov	r0, r3
 800c904:	f7fd fb8f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800c908:	f107 0320 	add.w	r3, r7, #32
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fd fb8a 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	4618      	mov	r0, r3
 800c916:	3730      	adds	r7, #48	; 0x30
 800c918:	46bd      	mov	sp, r7
 800c91a:	bdb0      	pop	{r4, r5, r7, pc}
 800c91c:	08023a78 	.word	0x08023a78

0800c920 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800c920:	b590      	push	{r4, r7, lr}
 800c922:	b089      	sub	sp, #36	; 0x24
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	68b9      	ldr	r1, [r7, #8]
 800c936:	f7fe fe5b 	bl	800b5f0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c93a:	4a1a      	ldr	r2, [pc, #104]	; (800c9a4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c946:	68f9      	ldr	r1, [r7, #12]
 800c948:	f107 0310 	add.w	r3, r7, #16
 800c94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff f856 	bl	800ba00 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c954:	f107 0310 	add.w	r3, r7, #16
 800c958:	4619      	mov	r1, r3
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7fd f817 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800c960:	f107 0310 	add.w	r3, r7, #16
 800c964:	4618      	mov	r0, r3
 800c966:	f7fd fb5e 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c972:	f7fd fb2b 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800c976:	4602      	mov	r2, r0
 800c978:	f107 0318 	add.w	r3, r7, #24
 800c97c:	490a      	ldr	r1, [pc, #40]	; (800c9a8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fe f858 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800c984:	f107 0318 	add.w	r3, r7, #24
 800c988:	4619      	mov	r1, r3
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7fd fbc8 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800c990:	f107 0318 	add.w	r3, r7, #24
 800c994:	4618      	mov	r0, r3
 800c996:	f7fd fb46 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4618      	mov	r0, r3
 800c99e:	3724      	adds	r7, #36	; 0x24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd90      	pop	{r4, r7, pc}
 800c9a4:	08023a4c 	.word	0x08023a4c
 800c9a8:	08020cd0 	.word	0x08020cd0

0800c9ac <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	4a05      	ldr	r2, [pc, #20]	; (800c9cc <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fe fe99 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	08023a4c 	.word	0x08023a4c

0800c9d0 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff ffe7 	bl	800c9ac <_ZN25FeatureUnsupportedFailureD1Ev>
 800c9de:	2134      	movs	r1, #52	; 0x34
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7fa fbb9 	bl	8007158 <_ZdlPvj>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	4a05      	ldr	r2, [pc, #20]	; (800ca10 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fe fe77 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	08023a78 	.word	0x08023a78

0800ca14 <_ZN16BitsEqualFailureD0Ev>:
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7ff ffe7 	bl	800c9f0 <_ZN16BitsEqualFailureD1Ev>
 800ca22:	2134      	movs	r1, #52	; 0x34
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7fa fb97 	bl	8007158 <_ZdlPvj>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	4a05      	ldr	r2, [pc, #20]	; (800ca54 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	601a      	str	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fe fe55 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	08023aa4 	.word	0x08023aa4

0800ca58 <_ZN18BinaryEqualFailureD0Ev>:
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff ffe7 	bl	800ca34 <_ZN18BinaryEqualFailureD1Ev>
 800ca66:	2134      	movs	r1, #52	; 0x34
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7fa fb75 	bl	8007158 <_ZdlPvj>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	4a05      	ldr	r2, [pc, #20]	; (800ca98 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe fe33 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	08023ad0 	.word	0x08023ad0

0800ca9c <_ZN24StringEqualNoCaseFailureD0Ev>:
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ffe7 	bl	800ca78 <_ZN24StringEqualNoCaseFailureD1Ev>
 800caaa:	2134      	movs	r1, #52	; 0x34
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7fa fb53 	bl	8007158 <_ZdlPvj>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	4a05      	ldr	r2, [pc, #20]	; (800cadc <_ZN18StringEqualFailureD1Ev+0x20>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4618      	mov	r0, r3
 800cace:	f7fe fe11 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	08023afc 	.word	0x08023afc

0800cae0 <_ZN18StringEqualFailureD0Ev>:
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ffe7 	bl	800cabc <_ZN18StringEqualFailureD1Ev>
 800caee:	2134      	movs	r1, #52	; 0x34
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fa fb31 	bl	8007158 <_ZdlPvj>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	4a05      	ldr	r2, [pc, #20]	; (800cb20 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe fdef 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	08023b28 	.word	0x08023b28

0800cb24 <_ZN23SignedBytesEqualFailureD0Ev>:
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff ffe7 	bl	800cb00 <_ZN23SignedBytesEqualFailureD1Ev>
 800cb32:	2134      	movs	r1, #52	; 0x34
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7fa fb0f 	bl	8007158 <_ZdlPvj>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	4a05      	ldr	r2, [pc, #20]	; (800cb64 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fdcd 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	08023b54 	.word	0x08023b54

0800cb68 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff ffe7 	bl	800cb44 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800cb76:	2134      	movs	r1, #52	; 0x34
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7fa faed 	bl	8007158 <_ZdlPvj>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4618      	mov	r0, r3
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	4a05      	ldr	r2, [pc, #20]	; (800cba8 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fe fdab 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	08023b80 	.word	0x08023b80

0800cbac <_ZN17LongsEqualFailureD0Ev>:
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f7ff ffe7 	bl	800cb88 <_ZN17LongsEqualFailureD1Ev>
 800cbba:	2134      	movs	r1, #52	; 0x34
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fa facb 	bl	8007158 <_ZdlPvj>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	4a05      	ldr	r2, [pc, #20]	; (800cbec <_ZN12CheckFailureD1Ev+0x20>)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	601a      	str	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe fd89 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	08023bac 	.word	0x08023bac

0800cbf0 <_ZN12CheckFailureD0Ev>:
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff ffe7 	bl	800cbcc <_ZN12CheckFailureD1Ev>
 800cbfe:	2134      	movs	r1, #52	; 0x34
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f7fa faa9 	bl	8007158 <_ZdlPvj>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	4a05      	ldr	r2, [pc, #20]	; (800cc30 <_ZN15ContainsFailureD1Ev+0x20>)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fd67 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	08023bd8 	.word	0x08023bd8

0800cc34 <_ZN15ContainsFailureD0Ev>:
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff ffe7 	bl	800cc10 <_ZN15ContainsFailureD1Ev>
 800cc42:	2134      	movs	r1, #52	; 0x34
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7fa fa87 	bl	8007158 <_ZdlPvj>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	4a05      	ldr	r2, [pc, #20]	; (800cc74 <_ZN17ComparisonFailureD1Ev+0x20>)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fd45 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	08023c04 	.word	0x08023c04

0800cc78 <_ZN17ComparisonFailureD0Ev>:
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff ffe7 	bl	800cc54 <_ZN17ComparisonFailureD1Ev>
 800cc86:	2134      	movs	r1, #52	; 0x34
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7fa fa65 	bl	8007158 <_ZdlPvj>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	4a05      	ldr	r2, [pc, #20]	; (800ccb8 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fe fd23 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	08023c30 	.word	0x08023c30

0800ccbc <_ZN17CheckEqualFailureD0Ev>:
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7ff ffe7 	bl	800cc98 <_ZN17CheckEqualFailureD1Ev>
 800ccca:	2134      	movs	r1, #52	; 0x34
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7fa fa43 	bl	8007158 <_ZdlPvj>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	4a05      	ldr	r2, [pc, #20]	; (800ccfc <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fe fd01 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	08023c5c 	.word	0x08023c5c

0800cd00 <_ZN19DoublesEqualFailureD0Ev>:
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ffe7 	bl	800ccdc <_ZN19DoublesEqualFailureD1Ev>
 800cd0e:	2134      	movs	r1, #52	; 0x34
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7fa fa21 	bl	8007158 <_ZdlPvj>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	4a05      	ldr	r2, [pc, #20]	; (800cd40 <_ZN13EqualsFailureD1Ev+0x20>)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fcdf 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	08023c88 	.word	0x08023c88

0800cd44 <_ZN13EqualsFailureD0Ev>:
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ffe7 	bl	800cd20 <_ZN13EqualsFailureD1Ev>
 800cd52:	2134      	movs	r1, #52	; 0x34
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7fa f9ff 	bl	8007158 <_ZdlPvj>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800cd64:	b5b0      	push	{r4, r5, r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af02      	add	r7, sp, #8
 800cd6a:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <_ZL13checkedMallocj+0x40>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	4798      	blx	r3
 800cd74:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10e      	bne.n	800cd9a <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800cd7c:	f004 f97e 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800cd80:	4604      	mov	r4, r0
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	3368      	adds	r3, #104	; 0x68
 800cd86:	681d      	ldr	r5, [r3, #0]
 800cd88:	f004 f988 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	2325      	movs	r3, #37	; 0x25
 800cd92:	4a05      	ldr	r2, [pc, #20]	; (800cda8 <_ZL13checkedMallocj+0x44>)
 800cd94:	4905      	ldr	r1, [pc, #20]	; (800cdac <_ZL13checkedMallocj+0x48>)
 800cd96:	4620      	mov	r0, r4
 800cd98:	47a8      	blx	r5
    return mem;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bdb0      	pop	{r4, r5, r7, pc}
 800cda4:	200000c4 	.word	0x200000c4
 800cda8:	08020d44 	.word	0x08020d44
 800cdac:	08020d64 	.word	0x08020d64

0800cdb0 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800cdb4:	4b04      	ldr	r3, [pc, #16]	; (800cdc8 <_Z22getCurrentNewAllocatorv+0x18>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <_Z22getCurrentNewAllocatorv+0x10>
 800cdbc:	f000 f806 	bl	800cdcc <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800cdc0:	4b01      	ldr	r3, [pc, #4]	; (800cdc8 <_Z22getCurrentNewAllocatorv+0x18>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20000650 	.word	0x20000650

0800cdcc <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800cdd0:	f000 f810 	bl	800cdf4 <_Z19defaultNewAllocatorv>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	4a02      	ldr	r2, [pc, #8]	; (800cde0 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800cdd8:	6013      	str	r3, [r2, #0]
}
 800cdda:	bf00      	nop
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20000650 	.word	0x20000650

0800cde4 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	4801      	ldr	r0, [pc, #4]	; (800cdf0 <__tcf_0+0xc>)
 800cdea:	f000 f909 	bl	800d000 <_ZN19TestMemoryAllocatorD1Ev>
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	2000065c 	.word	0x2000065c

0800cdf4 <_Z19defaultNewAllocatorv>:
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800cdf8:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <_Z19defaultNewAllocatorv+0x54>)
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	f3bf 8f5b 	dmb	ish
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	f003 0301 	and.w	r3, r3, #1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	bf0c      	ite	eq
 800ce0a:	2301      	moveq	r3, #1
 800ce0c:	2300      	movne	r3, #0
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d016      	beq.n	800ce42 <_Z19defaultNewAllocatorv+0x4e>
 800ce14:	480c      	ldr	r0, [pc, #48]	; (800ce48 <_Z19defaultNewAllocatorv+0x54>)
 800ce16:	f00f fc0f 	bl	801c638 <__cxa_guard_acquire>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bf14      	ite	ne
 800ce20:	2301      	movne	r3, #1
 800ce22:	2300      	moveq	r3, #0
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00b      	beq.n	800ce42 <_Z19defaultNewAllocatorv+0x4e>
 800ce2a:	4b08      	ldr	r3, [pc, #32]	; (800ce4c <_Z19defaultNewAllocatorv+0x58>)
 800ce2c:	4a08      	ldr	r2, [pc, #32]	; (800ce50 <_Z19defaultNewAllocatorv+0x5c>)
 800ce2e:	4909      	ldr	r1, [pc, #36]	; (800ce54 <_Z19defaultNewAllocatorv+0x60>)
 800ce30:	4809      	ldr	r0, [pc, #36]	; (800ce58 <_Z19defaultNewAllocatorv+0x64>)
 800ce32:	f000 f8c5 	bl	800cfc0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ce36:	4804      	ldr	r0, [pc, #16]	; (800ce48 <_Z19defaultNewAllocatorv+0x54>)
 800ce38:	f00f fc0a 	bl	801c650 <__cxa_guard_release>
 800ce3c:	4807      	ldr	r0, [pc, #28]	; (800ce5c <_Z19defaultNewAllocatorv+0x68>)
 800ce3e:	f00f fc2e 	bl	801c69e <atexit>
    return &allocator;
 800ce42:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <_Z19defaultNewAllocatorv+0x64>)
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	20000670 	.word	0x20000670
 800ce4c:	08020d84 	.word	0x08020d84
 800ce50:	08020d8c 	.word	0x08020d8c
 800ce54:	08020d90 	.word	0x08020d90
 800ce58:	2000065c 	.word	0x2000065c
 800ce5c:	0800cde5 	.word	0x0800cde5

0800ce60 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800ce64:	4b04      	ldr	r3, [pc, #16]	; (800ce78 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800ce6c:	f000 f806 	bl	800ce7c <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800ce70:	4b01      	ldr	r3, [pc, #4]	; (800ce78 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ce72:	681b      	ldr	r3, [r3, #0]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20000654 	.word	0x20000654

0800ce7c <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800ce80:	f000 f810 	bl	800cea4 <_Z24defaultNewArrayAllocatorv>
 800ce84:	4603      	mov	r3, r0
 800ce86:	4a02      	ldr	r2, [pc, #8]	; (800ce90 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800ce88:	6013      	str	r3, [r2, #0]
}
 800ce8a:	bf00      	nop
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20000654 	.word	0x20000654

0800ce94 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	4801      	ldr	r0, [pc, #4]	; (800cea0 <__tcf_1+0xc>)
 800ce9a:	f000 f8b1 	bl	800d000 <_ZN19TestMemoryAllocatorD1Ev>
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20000674 	.word	0x20000674

0800cea4 <_Z24defaultNewArrayAllocatorv>:
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800cea8:	4b13      	ldr	r3, [pc, #76]	; (800cef8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f3bf 8f5b 	dmb	ish
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	f003 0301 	and.w	r3, r3, #1
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	bf0c      	ite	eq
 800ceba:	2301      	moveq	r3, #1
 800cebc:	2300      	movne	r3, #0
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d016      	beq.n	800cef2 <_Z24defaultNewArrayAllocatorv+0x4e>
 800cec4:	480c      	ldr	r0, [pc, #48]	; (800cef8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800cec6:	f00f fbb7 	bl	801c638 <__cxa_guard_acquire>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	bf14      	ite	ne
 800ced0:	2301      	movne	r3, #1
 800ced2:	2300      	moveq	r3, #0
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00b      	beq.n	800cef2 <_Z24defaultNewArrayAllocatorv+0x4e>
 800ceda:	4b08      	ldr	r3, [pc, #32]	; (800cefc <_Z24defaultNewArrayAllocatorv+0x58>)
 800cedc:	4a08      	ldr	r2, [pc, #32]	; (800cf00 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800cede:	4909      	ldr	r1, [pc, #36]	; (800cf04 <_Z24defaultNewArrayAllocatorv+0x60>)
 800cee0:	4809      	ldr	r0, [pc, #36]	; (800cf08 <_Z24defaultNewArrayAllocatorv+0x64>)
 800cee2:	f000 f86d 	bl	800cfc0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800cee6:	4804      	ldr	r0, [pc, #16]	; (800cef8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800cee8:	f00f fbb2 	bl	801c650 <__cxa_guard_release>
 800ceec:	4807      	ldr	r0, [pc, #28]	; (800cf0c <_Z24defaultNewArrayAllocatorv+0x68>)
 800ceee:	f00f fbd6 	bl	801c69e <atexit>
    return &allocator;
 800cef2:	4b05      	ldr	r3, [pc, #20]	; (800cf08 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	20000688 	.word	0x20000688
 800cefc:	08020da8 	.word	0x08020da8
 800cf00:	08020db4 	.word	0x08020db4
 800cf04:	08020dbc 	.word	0x08020dbc
 800cf08:	20000674 	.word	0x20000674
 800cf0c:	0800ce95 	.word	0x0800ce95

0800cf10 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800cf14:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <_Z25getCurrentMallocAllocatorv+0x18>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <_Z25getCurrentMallocAllocatorv+0x10>
 800cf1c:	f000 f806 	bl	800cf2c <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800cf20:	4b01      	ldr	r3, [pc, #4]	; (800cf28 <_Z25getCurrentMallocAllocatorv+0x18>)
 800cf22:	681b      	ldr	r3, [r3, #0]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	20000658 	.word	0x20000658

0800cf2c <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800cf30:	f000 f810 	bl	800cf54 <_Z22defaultMallocAllocatorv>
 800cf34:	4603      	mov	r3, r0
 800cf36:	4a02      	ldr	r2, [pc, #8]	; (800cf40 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800cf38:	6013      	str	r3, [r2, #0]
}
 800cf3a:	bf00      	nop
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000658 	.word	0x20000658

0800cf44 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	4801      	ldr	r0, [pc, #4]	; (800cf50 <__tcf_2+0xc>)
 800cf4a:	f000 f859 	bl	800d000 <_ZN19TestMemoryAllocatorD1Ev>
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	2000068c 	.word	0x2000068c

0800cf54 <_Z22defaultMallocAllocatorv>:
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800cf58:	4b13      	ldr	r3, [pc, #76]	; (800cfa8 <_Z22defaultMallocAllocatorv+0x54>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	f3bf 8f5b 	dmb	ish
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bf0c      	ite	eq
 800cf6a:	2301      	moveq	r3, #1
 800cf6c:	2300      	movne	r3, #0
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d016      	beq.n	800cfa2 <_Z22defaultMallocAllocatorv+0x4e>
 800cf74:	480c      	ldr	r0, [pc, #48]	; (800cfa8 <_Z22defaultMallocAllocatorv+0x54>)
 800cf76:	f00f fb5f 	bl	801c638 <__cxa_guard_acquire>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	bf14      	ite	ne
 800cf80:	2301      	movne	r3, #1
 800cf82:	2300      	moveq	r3, #0
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00b      	beq.n	800cfa2 <_Z22defaultMallocAllocatorv+0x4e>
 800cf8a:	4b08      	ldr	r3, [pc, #32]	; (800cfac <_Z22defaultMallocAllocatorv+0x58>)
 800cf8c:	4a08      	ldr	r2, [pc, #32]	; (800cfb0 <_Z22defaultMallocAllocatorv+0x5c>)
 800cf8e:	4909      	ldr	r1, [pc, #36]	; (800cfb4 <_Z22defaultMallocAllocatorv+0x60>)
 800cf90:	4809      	ldr	r0, [pc, #36]	; (800cfb8 <_Z22defaultMallocAllocatorv+0x64>)
 800cf92:	f000 f815 	bl	800cfc0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800cf96:	4804      	ldr	r0, [pc, #16]	; (800cfa8 <_Z22defaultMallocAllocatorv+0x54>)
 800cf98:	f00f fb5a 	bl	801c650 <__cxa_guard_release>
 800cf9c:	4807      	ldr	r0, [pc, #28]	; (800cfbc <_Z22defaultMallocAllocatorv+0x68>)
 800cf9e:	f00f fb7e 	bl	801c69e <atexit>
    return &allocator;
 800cfa2:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <_Z22defaultMallocAllocatorv+0x64>)
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	200006a0 	.word	0x200006a0
 800cfac:	08020dd8 	.word	0x08020dd8
 800cfb0:	08020de0 	.word	0x08020de0
 800cfb4:	08020de8 	.word	0x08020de8
 800cfb8:	2000068c 	.word	0x2000068c
 800cfbc:	0800cf45 	.word	0x0800cf45

0800cfc0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	607a      	str	r2, [r7, #4]
 800cfcc:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800cfce:	4a0b      	ldr	r2, [pc, #44]	; (800cffc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	605a      	str	r2, [r3, #4]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	609a      	str	r2, [r3, #8]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	60da      	str	r2, [r3, #12]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	741a      	strb	r2, [r3, #16]
{
}
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	08023d14 	.word	0x08023d14

0800d000 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	4a06      	ldr	r2, [pc, #24]	; (800d024 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	741a      	strb	r2, [r3, #16]
}
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	08023d14 	.word	0x08023d14

0800d028 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
}
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff ffe5 	bl	800d000 <_ZN19TestMemoryAllocatorD1Ev>
 800d036:	2114      	movs	r1, #20
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7fa f88d 	bl	8007158 <_ZdlPvj>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	7c1b      	ldrb	r3, [r3, #16]
}
 800d054:	4618      	mov	r0, r3
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800d060:	b590      	push	{r4, r7, lr}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3310      	adds	r3, #16
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	4798      	blx	r3
 800d076:	4604      	mov	r4, r0
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3310      	adds	r3, #16
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6838      	ldr	r0, [r7, #0]
 800d082:	4798      	blx	r3
 800d084:	4603      	mov	r3, r0
 800d086:	4619      	mov	r1, r3
 800d088:	4620      	mov	r0, r4
 800d08a:	f7fc fa51 	bl	8009530 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	bf0c      	ite	eq
 800d094:	2301      	moveq	r3, #1
 800d096:	2300      	movne	r3, #0
 800d098:	b2db      	uxtb	r3, r3
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	370c      	adds	r7, #12
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd90      	pop	{r4, r7, pc}
	...

0800d0a4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800d0a4:	b590      	push	{r4, r7, lr}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3308      	adds	r3, #8
 800d0b4:	681c      	ldr	r4, [r3, #0]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	4a04      	ldr	r2, [pc, #16]	; (800d0cc <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	47a0      	blx	r4
 800d0c0:	4603      	mov	r3, r0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd90      	pop	{r4, r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	08020e04 	.word	0x08020e04

0800d0d0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800d0d0:	b590      	push	{r4, r7, lr}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af02      	add	r7, sp, #8
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	330c      	adds	r3, #12
 800d0e0:	681c      	ldr	r4, [r3, #0]
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	47a0      	blx	r4
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd90      	pop	{r4, r7, pc}
 800d0f8:	08020e04 	.word	0x08020e04

0800d0fc <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800d10a:	68b8      	ldr	r0, [r7, #8]
 800d10c:	f7ff fe2a 	bl	800cd64 <_ZL13checkedMallocj>
 800d110:	4603      	mov	r3, r0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800d12a:	4b04      	ldr	r3, [pc, #16]	; (800d13c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	68b8      	ldr	r0, [r7, #8]
 800d130:	4798      	blx	r3
}
 800d132:	bf00      	nop
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	200000cc 	.word	0x200000cc

0800d140 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
    return name_;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	689b      	ldr	r3, [r3, #8]
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
    return free_name_;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68db      	ldr	r3, [r3, #12]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
    return this;
 800d190:	687b      	ldr	r3, [r7, #4]
}
 800d192:	4618      	mov	r0, r3
 800d194:	370c      	adds	r7, #12
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
	...

0800d1a0 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	4a05      	ldr	r2, [pc, #20]	; (800d1c0 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	601a      	str	r2, [r3, #0]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff ff25 	bl	800d000 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	08023ce0 	.word	0x08023ce0

0800d1c4 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
}
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff ffe7 	bl	800d1a0 <_ZN20NullUnknownAllocatorD1Ev>
 800d1d2:	2114      	movs	r1, #20
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7f9 ffbf 	bl	8007158 <_ZdlPvj>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
}
 800d20e:	bf00      	nop
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
	...

0800d21c <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	4b06      	ldr	r3, [pc, #24]	; (800d240 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800d228:	4a05      	ldr	r2, [pc, #20]	; (800d240 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800d22a:	4906      	ldr	r1, [pc, #24]	; (800d244 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800d22c:	f7ff fec8 	bl	800cfc0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d230:	4a05      	ldr	r2, [pc, #20]	; (800d248 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	601a      	str	r2, [r3, #0]
{
}
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4618      	mov	r0, r3
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	08020e38 	.word	0x08020e38
 800d244:	08020e40 	.word	0x08020e40
 800d248:	08023ce0 	.word	0x08023ce0

0800d24c <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
 800d250:	4801      	ldr	r0, [pc, #4]	; (800d258 <__tcf_3+0xc>)
 800d252:	f7ff ffa5 	bl	800d1a0 <_ZN20NullUnknownAllocatorD1Ev>
 800d256:	bd80      	pop	{r7, pc}
 800d258:	200006a4 	.word	0x200006a4

0800d25c <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800d260:	4b12      	ldr	r3, [pc, #72]	; (800d2ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	f3bf 8f5b 	dmb	ish
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bf0c      	ite	eq
 800d272:	2301      	moveq	r3, #1
 800d274:	2300      	movne	r3, #0
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d013      	beq.n	800d2a4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800d27c:	480b      	ldr	r0, [pc, #44]	; (800d2ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d27e:	f00f f9db 	bl	801c638 <__cxa_guard_acquire>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	bf14      	ite	ne
 800d288:	2301      	movne	r3, #1
 800d28a:	2300      	moveq	r3, #0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d008      	beq.n	800d2a4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800d292:	4807      	ldr	r0, [pc, #28]	; (800d2b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800d294:	f7ff ffc2 	bl	800d21c <_ZN20NullUnknownAllocatorC1Ev>
 800d298:	4804      	ldr	r0, [pc, #16]	; (800d2ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800d29a:	f00f f9d9 	bl	801c650 <__cxa_guard_release>
 800d29e:	4805      	ldr	r0, [pc, #20]	; (800d2b4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800d2a0:	f00f f9fd 	bl	801c69e <atexit>
    return &allocator;
 800d2a4:	4b02      	ldr	r3, [pc, #8]	; (800d2b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	200006b8 	.word	0x200006b8
 800d2b0:	200006a4 	.word	0x200006a4
 800d2b4:	0800d24d 	.word	0x0800d24d

0800d2b8 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
        return testCount_;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	689b      	ldr	r3, [r3, #8]
    }
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	699b      	ldr	r3, [r3, #24]
    }
 800d2dc:	4618      	mov	r0, r3
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800d2ec:	4b05      	ldr	r3, [pc, #20]	; (800d304 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d103      	bne.n	800d2fc <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800d2f4:	f004 fa4a 	bl	801178c <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	e001      	b.n	800d300 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800d2fc:	4b01      	ldr	r3, [pc, #4]	; (800d304 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
}
 800d300:	4618      	mov	r0, r3
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20000084 	.word	0x20000084

0800d308 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800d310:	4a0a      	ldr	r2, [pc, #40]	; (800d33c <_ZN10TestOutputC1Ev+0x34>)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	601a      	str	r2, [r3, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	605a      	str	r2, [r3, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	721a      	strb	r2, [r3, #8]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	725a      	strb	r2, [r3, #9]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a05      	ldr	r2, [pc, #20]	; (800d340 <_ZN10TestOutputC1Ev+0x38>)
 800d32c:	60da      	str	r2, [r3, #12]
{
}
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4618      	mov	r0, r3
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	08023e18 	.word	0x08023e18
 800d340:	08021240 	.word	0x08021240

0800d344 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	4a04      	ldr	r2, [pc, #16]	; (800d360 <_ZN10TestOutputD1Ev+0x1c>)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	601a      	str	r2, [r3, #0]
{
}
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4618      	mov	r0, r3
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr
 800d360:	08023e18 	.word	0x08023e18

0800d364 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	78fa      	ldrb	r2, [r7, #3]
 800d374:	721a      	strb	r2, [r3, #8]
}
 800d376:	bf00      	nop
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
    color_ = true;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	725a      	strb	r2, [r3, #9]
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	3328      	adds	r3, #40	; 0x28
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	4798      	blx	r3
}
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800d3bc:	b590      	push	{r4, r7, lr}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	332c      	adds	r3, #44	; 0x2c
 800d3cc:	681c      	ldr	r4, [r3, #0]
 800d3ce:	f107 0308 	add.w	r3, r7, #8
 800d3d2:	6839      	ldr	r1, [r7, #0]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fd f8ff 	bl	800a5d8 <_Z10StringFroml>
 800d3da:	f107 0308 	add.w	r3, r7, #8
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fc fdf4 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	47a0      	blx	r4
 800d3ec:	f107 0308 	add.w	r3, r7, #8
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fc fe18 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800d3f6:	bf00      	nop
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd90      	pop	{r4, r7, pc}

0800d3fe <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800d3fe:	b590      	push	{r4, r7, lr}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	332c      	adds	r3, #44	; 0x2c
 800d40e:	681c      	ldr	r4, [r3, #0]
 800d410:	f107 0308 	add.w	r3, r7, #8
 800d414:	6839      	ldr	r1, [r7, #0]
 800d416:	4618      	mov	r0, r3
 800d418:	f7fd fb34 	bl	800aa84 <_Z10StringFromj>
 800d41c:	f107 0308 	add.w	r3, r7, #8
 800d420:	4618      	mov	r0, r3
 800d422:	f7fc fdd3 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800d426:	4603      	mov	r3, r0
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	47a0      	blx	r4
 800d42e:	f107 0308 	add.w	r3, r7, #8
 800d432:	4618      	mov	r0, r3
 800d434:	f7fc fdf7 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800d438:	bf00      	nop
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd90      	pop	{r4, r7, pc}

0800d440 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800d440:	b590      	push	{r4, r7, lr}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	332c      	adds	r3, #44	; 0x2c
 800d452:	681c      	ldr	r4, [r3, #0]
 800d454:	f107 0310 	add.w	r3, r7, #16
 800d458:	2106      	movs	r1, #6
 800d45a:	ed97 0b00 	vldr	d0, [r7]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fd faa6 	bl	800a9b0 <_Z10StringFromdi>
 800d464:	f107 0310 	add.w	r3, r7, #16
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fc fdaf 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800d46e:	4603      	mov	r3, r0
 800d470:	4619      	mov	r1, r3
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	47a0      	blx	r4
 800d476:	f107 0310 	add.w	r3, r7, #16
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fc fdd3 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800d480:	bf00      	nop
 800d482:	371c      	adds	r7, #28
 800d484:	46bd      	mov	sp, r7
 800d486:	bd90      	pop	{r4, r7, pc}

0800d488 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
    p.print(s);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	332c      	adds	r3, #44	; 0x2c
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6839      	ldr	r1, [r7, #0]
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	4798      	blx	r3
    return p;
 800d4a0:	687b      	ldr	r3, [r7, #4]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
	...

0800d4ac <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800d4ac:	b590      	push	{r4, r7, lr}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7a1b      	ldrb	r3, [r3, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d01a      	beq.n	800d4f4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	332c      	adds	r3, #44	; 0x2c
 800d4c4:	681c      	ldr	r4, [r3, #0]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	3314      	adds	r3, #20
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f107 0208 	add.w	r2, r7, #8
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	4798      	blx	r3
 800d4d8:	f107 0308 	add.w	r3, r7, #8
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fc fd75 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	47a0      	blx	r4
 800d4ea:	f107 0308 	add.w	r3, r7, #8
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fc fd99 	bl	800a026 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3318      	adds	r3, #24
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6838      	ldr	r0, [r7, #0]
 800d4fe:	4798      	blx	r3
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d007      	beq.n	800d516 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	3344      	adds	r3, #68	; 0x44
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4907      	ldr	r1, [pc, #28]	; (800d52c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800d514:	e006      	b.n	800d524 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	3344      	adds	r3, #68	; 0x44
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4904      	ldr	r1, [pc, #16]	; (800d530 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	4798      	blx	r3
}
 800d524:	bf00      	nop
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd90      	pop	{r4, r7, pc}
 800d52c:	08021240 	.word	0x08021240
 800d530:	08021244 	.word	0x08021244

0800d534 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800d534:	b590      	push	{r4, r7, lr}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7a1b      	ldrb	r3, [r3, #8]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d019      	beq.n	800d57a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	332c      	adds	r3, #44	; 0x2c
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4910      	ldr	r1, [pc, #64]	; (800d590 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3334      	adds	r3, #52	; 0x34
 800d55a:	681c      	ldr	r4, [r3, #0]
 800d55c:	6838      	ldr	r0, [r7, #0]
 800d55e:	f002 f845 	bl	800f5ec <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800d562:	4603      	mov	r3, r0
 800d564:	4619      	mov	r1, r3
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	47a0      	blx	r4
        print(" ms\n");
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	332c      	adds	r3, #44	; 0x2c
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4908      	ldr	r1, [pc, #32]	; (800d594 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800d578:	e005      	b.n	800d586 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	3358      	adds	r3, #88	; 0x58
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	4798      	blx	r3
}
 800d586:	bf00      	nop
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd90      	pop	{r4, r7, pc}
 800d58e:	bf00      	nop
 800d590:	08021248 	.word	0x08021248
 800d594:	0802124c 	.word	0x0802124c

0800d598 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	332c      	adds	r3, #44	; 0x2c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	68d2      	ldr	r2, [r2, #12]
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	605a      	str	r2, [r3, #4]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	4b0d      	ldr	r3, [pc, #52]	; (800d5f8 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800d5c2:	fb83 1302 	smull	r1, r3, r3, r2
 800d5c6:	1119      	asrs	r1, r3, #4
 800d5c8:	17d3      	asrs	r3, r2, #31
 800d5ca:	1acb      	subs	r3, r1, r3
 800d5cc:	2132      	movs	r1, #50	; 0x32
 800d5ce:	fb01 f303 	mul.w	r3, r1, r3
 800d5d2:	1ad3      	subs	r3, r2, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	bf0c      	ite	eq
 800d5d8:	2301      	moveq	r3, #1
 800d5da:	2300      	movne	r3, #0
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d006      	beq.n	800d5f0 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	332c      	adds	r3, #44	; 0x2c
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4904      	ldr	r1, [pc, #16]	; (800d5fc <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	4798      	blx	r3
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	51eb851f 	.word	0x51eb851f
 800d5fc:	08021254 	.word	0x08021254

0800d600 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	60da      	str	r2, [r3, #12]
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
}
 800d63a:	bf00      	nop
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	6039      	str	r1, [r7, #0]
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800d65c:	b590      	push	{r4, r7, lr}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
    print("\n");
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	332c      	adds	r3, #44	; 0x2c
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	496f      	ldr	r1, [pc, #444]	; (800d82c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800d674:	6838      	ldr	r0, [r7, #0]
 800d676:	f7f8 f83d 	bl	80056f4 <_ZNK10TestResult9isFailureEv>
 800d67a:	4603      	mov	r3, r0
 800d67c:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800d67e:	6838      	ldr	r0, [r7, #0]
 800d680:	f7f8 f82c 	bl	80056dc <_ZNK10TestResult15getFailureCountEv>
 800d684:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d02b      	beq.n	800d6e4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7a5b      	ldrb	r3, [r3, #9]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d006      	beq.n	800d6a2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	332c      	adds	r3, #44	; 0x2c
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4964      	ldr	r1, [pc, #400]	; (800d830 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	4798      	blx	r3
        }
        print("Errors (");
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	332c      	adds	r3, #44	; 0x2c
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4962      	ldr	r1, [pc, #392]	; (800d834 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	4798      	blx	r3
        if (failureCount > 0) {
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00e      	beq.n	800d6d4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3334      	adds	r3, #52	; 0x34
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	68b9      	ldr	r1, [r7, #8]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	4798      	blx	r3
            print(" failures, ");
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	332c      	adds	r3, #44	; 0x2c
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	495a      	ldr	r1, [pc, #360]	; (800d838 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	4798      	blx	r3
 800d6d2:	e019      	b.n	800d708 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	332c      	adds	r3, #44	; 0x2c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4957      	ldr	r1, [pc, #348]	; (800d83c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	4798      	blx	r3
 800d6e2:	e011      	b.n	800d708 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7a5b      	ldrb	r3, [r3, #9]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	332c      	adds	r3, #44	; 0x2c
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4952      	ldr	r1, [pc, #328]	; (800d840 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	4798      	blx	r3
        }
        print("OK (");
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	332c      	adds	r3, #44	; 0x2c
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4950      	ldr	r1, [pc, #320]	; (800d844 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	4798      	blx	r3
    }
    print(result.getTestCount());
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3334      	adds	r3, #52	; 0x34
 800d70e:	681c      	ldr	r4, [r3, #0]
 800d710:	6838      	ldr	r0, [r7, #0]
 800d712:	f7ff fdd1 	bl	800d2b8 <_ZNK10TestResult12getTestCountEv>
 800d716:	4603      	mov	r3, r0
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	47a0      	blx	r4
    print(" tests, ");
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	332c      	adds	r3, #44	; 0x2c
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4948      	ldr	r1, [pc, #288]	; (800d848 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	4798      	blx	r3
    print(result.getRunCount());
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3334      	adds	r3, #52	; 0x34
 800d732:	681c      	ldr	r4, [r3, #0]
 800d734:	6838      	ldr	r0, [r7, #0]
 800d736:	f7f7 ffb9 	bl	80056ac <_ZNK10TestResult11getRunCountEv>
 800d73a:	4603      	mov	r3, r0
 800d73c:	4619      	mov	r1, r3
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	47a0      	blx	r4
    print(" ran, ");
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	332c      	adds	r3, #44	; 0x2c
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4940      	ldr	r1, [pc, #256]	; (800d84c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	4798      	blx	r3
    print(result.getCheckCount());
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3334      	adds	r3, #52	; 0x34
 800d756:	681c      	ldr	r4, [r3, #0]
 800d758:	6838      	ldr	r0, [r7, #0]
 800d75a:	f7f8 fc13 	bl	8005f84 <_ZNK10TestResult13getCheckCountEv>
 800d75e:	4603      	mov	r3, r0
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	47a0      	blx	r4
    print(" checks, ");
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	332c      	adds	r3, #44	; 0x2c
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4938      	ldr	r1, [pc, #224]	; (800d850 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	4798      	blx	r3
    print(result.getIgnoredCount());
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	3334      	adds	r3, #52	; 0x34
 800d77a:	681c      	ldr	r4, [r3, #0]
 800d77c:	6838      	ldr	r0, [r7, #0]
 800d77e:	f7f7 ffa1 	bl	80056c4 <_ZNK10TestResult15getIgnoredCountEv>
 800d782:	4603      	mov	r3, r0
 800d784:	4619      	mov	r1, r3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	47a0      	blx	r4
    print(" ignored, ");
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	332c      	adds	r3, #44	; 0x2c
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4930      	ldr	r1, [pc, #192]	; (800d854 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3334      	adds	r3, #52	; 0x34
 800d79e:	681c      	ldr	r4, [r3, #0]
 800d7a0:	6838      	ldr	r0, [r7, #0]
 800d7a2:	f7ff fd95 	bl	800d2d0 <_ZNK10TestResult19getFilteredOutCountEv>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	47a0      	blx	r4
    print(" filtered out, ");
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	332c      	adds	r3, #44	; 0x2c
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4928      	ldr	r1, [pc, #160]	; (800d858 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3334      	adds	r3, #52	; 0x34
 800d7c2:	681c      	ldr	r4, [r3, #0]
 800d7c4:	6838      	ldr	r0, [r7, #0]
 800d7c6:	f001 ff05 	bl	800f5d4 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	47a0      	blx	r4
    print(" ms)");
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	332c      	adds	r3, #44	; 0x2c
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4920      	ldr	r1, [pc, #128]	; (800d85c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	4798      	blx	r3
    if (color_) {
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7a5b      	ldrb	r3, [r3, #9]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d006      	beq.n	800d7f6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	332c      	adds	r3, #44	; 0x2c
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	491b      	ldr	r1, [pc, #108]	; (800d860 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d009      	beq.n	800d810 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	332c      	adds	r3, #44	; 0x2c
 800d808:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800d80a:	4916      	ldr	r1, [pc, #88]	; (800d864 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	4798      	blx	r3
    }
    print("\n\n");
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	332c      	adds	r3, #44	; 0x2c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4913      	ldr	r1, [pc, #76]	; (800d868 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	4798      	blx	r3

    dotCount_ = 0;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	605a      	str	r2, [r3, #4]
}
 800d824:	bf00      	nop
 800d826:	3714      	adds	r7, #20
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd90      	pop	{r4, r7, pc}
 800d82c:	08021254 	.word	0x08021254
 800d830:	08021258 	.word	0x08021258
 800d834:	08021260 	.word	0x08021260
 800d838:	0802126c 	.word	0x0802126c
 800d83c:	08021278 	.word	0x08021278
 800d840:	08021288 	.word	0x08021288
 800d844:	08021290 	.word	0x08021290
 800d848:	08021298 	.word	0x08021298
 800d84c:	080212a4 	.word	0x080212a4
 800d850:	080212ac 	.word	0x080212ac
 800d854:	080212b8 	.word	0x080212b8
 800d858:	080212c4 	.word	0x080212c4
 800d85c:	080212d4 	.word	0x080212d4
 800d860:	080212dc 	.word	0x080212dc
 800d864:	080212e0 	.word	0x080212e0
 800d868:	08021384 	.word	0x08021384

0800d86c <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d922      	bls.n	800d8c4 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	332c      	adds	r3, #44	; 0x2c
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4911      	ldr	r1, [pc, #68]	; (800d8cc <_ZN10TestOutput12printTestRunEjj+0x60>)
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	4798      	blx	r3
        print(number);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3334      	adds	r3, #52	; 0x34
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68b9      	ldr	r1, [r7, #8]
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	4798      	blx	r3
        print(" of ");
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	332c      	adds	r3, #44	; 0x2c
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	490b      	ldr	r1, [pc, #44]	; (800d8d0 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	4798      	blx	r3
        print(total);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3334      	adds	r3, #52	; 0x34
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6879      	ldr	r1, [r7, #4]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	4798      	blx	r3
        print("\n");
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	332c      	adds	r3, #44	; 0x2c
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4905      	ldr	r1, [pc, #20]	; (800d8d4 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	4798      	blx	r3
    }
}
 800d8c4:	bf00      	nop
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	08021388 	.word	0x08021388
 800d8d0:	08021394 	.word	0x08021394
 800d8d4:	08021254 	.word	0x08021254

0800d8d8 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800d8e2:	6838      	ldr	r0, [r7, #0]
 800d8e4:	f7fd ffa1 	bl	800b82a <_ZNK11TestFailure17isOutsideTestFileEv>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d105      	bne.n	800d8fa <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800d8ee:	6838      	ldr	r0, [r7, #0]
 800d8f0:	f7fd ffad 	bl	800b84e <_ZNK11TestFailure18isInHelperFunctionEv>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d001      	beq.n	800d8fe <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e000      	b.n	800d900 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800d8fe:	2300      	movs	r3, #0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d004      	beq.n	800d90e <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f81d 	bl	800d946 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800d90c:	e003      	b.n	800d916 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 f86b 	bl	800d9ec <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3318      	adds	r3, #24
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f107 0208 	add.w	r2, r7, #8
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	4610      	mov	r0, r2
 800d926:	4798      	blx	r3
 800d928:	f107 0308 	add.w	r3, r7, #8
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f8b2 	bl	800da98 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800d934:	f107 0308 	add.w	r3, r7, #8
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fc fb74 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800d93e:	bf00      	nop
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b088      	sub	sp, #32
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	331c      	adds	r3, #28
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f107 0208 	add.w	r2, r7, #8
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	4610      	mov	r0, r2
 800d960:	4798      	blx	r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	3320      	adds	r3, #32
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	6838      	ldr	r0, [r7, #0]
 800d96c:	4798      	blx	r3
 800d96e:	4602      	mov	r2, r0
 800d970:	f107 0308 	add.w	r3, r7, #8
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f8be 	bl	800daf8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800d97c:	f107 0308 	add.w	r3, r7, #8
 800d980:	4618      	mov	r0, r3
 800d982:	f7fc fb50 	bl	800a026 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	330c      	adds	r3, #12
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f107 0210 	add.w	r2, r7, #16
 800d992:	6839      	ldr	r1, [r7, #0]
 800d994:	4610      	mov	r0, r2
 800d996:	4798      	blx	r3
 800d998:	f107 0310 	add.w	r3, r7, #16
 800d99c:	4619      	mov	r1, r3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f85c 	bl	800da5c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800d9a4:	f107 0310 	add.w	r3, r7, #16
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fc fb3c 	bl	800a026 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	3308      	adds	r3, #8
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f107 0218 	add.w	r2, r7, #24
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4798      	blx	r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3314      	adds	r3, #20
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6838      	ldr	r0, [r7, #0]
 800d9ca:	4798      	blx	r3
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	f107 0318 	add.w	r3, r7, #24
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f88f 	bl	800daf8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800d9da:	f107 0318 	add.w	r3, r7, #24
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7fc fb21 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800d9e4:	bf00      	nop
 800d9e6:	3720      	adds	r7, #32
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f107 0208 	add.w	r2, r7, #8
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	4610      	mov	r0, r2
 800da06:	4798      	blx	r3
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3314      	adds	r3, #20
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6838      	ldr	r0, [r7, #0]
 800da12:	4798      	blx	r3
 800da14:	4602      	mov	r2, r0
 800da16:	f107 0308 	add.w	r3, r7, #8
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f86b 	bl	800daf8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800da22:	f107 0308 	add.w	r3, r7, #8
 800da26:	4618      	mov	r0, r3
 800da28:	f7fc fafd 	bl	800a026 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	330c      	adds	r3, #12
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f107 0210 	add.w	r2, r7, #16
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	4610      	mov	r0, r2
 800da3c:	4798      	blx	r3
 800da3e:	f107 0310 	add.w	r3, r7, #16
 800da42:	4619      	mov	r1, r3
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f809 	bl	800da5c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800da4a:	f107 0310 	add.w	r3, r7, #16
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fc fae9 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800da54:	bf00      	nop
 800da56:	3718      	adds	r7, #24
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	332c      	adds	r3, #44	; 0x2c
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4909      	ldr	r1, [pc, #36]	; (800da94 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
    print(testName.asCharString());
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	332c      	adds	r3, #44	; 0x2c
 800da7a:	681c      	ldr	r4, [r3, #0]
 800da7c:	6838      	ldr	r0, [r7, #0]
 800da7e:	f7fc faa5 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800da82:	4603      	mov	r3, r0
 800da84:	4619      	mov	r1, r3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	47a0      	blx	r4
}
 800da8a:	bf00      	nop
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd90      	pop	{r4, r7, pc}
 800da92:	bf00      	nop
 800da94:	0802139c 	.word	0x0802139c

0800da98 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800da98:	b590      	push	{r4, r7, lr}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
    print("\n");
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	332c      	adds	r3, #44	; 0x2c
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4910      	ldr	r1, [pc, #64]	; (800daec <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	4798      	blx	r3
    print("\t");
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	332c      	adds	r3, #44	; 0x2c
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	490d      	ldr	r1, [pc, #52]	; (800daf0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	4798      	blx	r3
    print(reason.asCharString());
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	332c      	adds	r3, #44	; 0x2c
 800dac4:	681c      	ldr	r4, [r3, #0]
 800dac6:	6838      	ldr	r0, [r7, #0]
 800dac8:	f7fc fa80 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800dacc:	4603      	mov	r3, r0
 800dace:	4619      	mov	r1, r3
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	47a0      	blx	r4
    print("\n\n");
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	332c      	adds	r3, #44	; 0x2c
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4905      	ldr	r1, [pc, #20]	; (800daf4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
}
 800dae2:	bf00      	nop
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd90      	pop	{r4, r7, pc}
 800daea:	bf00      	nop
 800daec:	08021254 	.word	0x08021254
 800daf0:	080213ac 	.word	0x080213ac
 800daf4:	08021384 	.word	0x08021384

0800daf8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800daf8:	b590      	push	{r4, r7, lr}
 800dafa:	b089      	sub	sp, #36	; 0x24
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800db04:	f7ff fbf0 	bl	800d2e8 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	bf0c      	ite	eq
 800db0e:	2301      	moveq	r3, #1
 800db10:	2300      	movne	r3, #0
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	d015      	beq.n	800db44 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	3354      	adds	r3, #84	; 0x54
 800db1e:	681c      	ldr	r4, [r3, #0]
 800db20:	f107 0310 	add.w	r3, r7, #16
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	4618      	mov	r0, r3
 800db28:	f7fb ff19 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800db2c:	f107 0310 	add.w	r3, r7, #16
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	4619      	mov	r1, r3
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	47a0      	blx	r4
 800db38:	f107 0310 	add.w	r3, r7, #16
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fc fa72 	bl	800a026 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800db42:	e014      	b.n	800db6e <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	3350      	adds	r3, #80	; 0x50
 800db4a:	681c      	ldr	r4, [r3, #0]
 800db4c:	f107 0318 	add.w	r3, r7, #24
 800db50:	68b9      	ldr	r1, [r7, #8]
 800db52:	4618      	mov	r0, r3
 800db54:	f7fb ff03 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800db58:	f107 0318 	add.w	r3, r7, #24
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	4619      	mov	r1, r3
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	47a0      	blx	r4
 800db64:	f107 0318 	add.w	r3, r7, #24
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fc fa5c 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800db6e:	bf00      	nop
 800db70:	3724      	adds	r7, #36	; 0x24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd90      	pop	{r4, r7, pc}
	...

0800db78 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800db78:	b590      	push	{r4, r7, lr}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
    print("\n");
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	332c      	adds	r3, #44	; 0x2c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4916      	ldr	r1, [pc, #88]	; (800dbe8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	4798      	blx	r3
    print(file.asCharString());
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	332c      	adds	r3, #44	; 0x2c
 800db98:	681c      	ldr	r4, [r3, #0]
 800db9a:	68b8      	ldr	r0, [r7, #8]
 800db9c:	f7fc fa16 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800dba0:	4603      	mov	r3, r0
 800dba2:	4619      	mov	r1, r3
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	47a0      	blx	r4
    print(":");
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	332c      	adds	r3, #44	; 0x2c
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	490e      	ldr	r1, [pc, #56]	; (800dbec <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	4798      	blx	r3
    print(lineNumber);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3334      	adds	r3, #52	; 0x34
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6879      	ldr	r1, [r7, #4]
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	4798      	blx	r3
    print(":");
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	332c      	adds	r3, #44	; 0x2c
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4907      	ldr	r1, [pc, #28]	; (800dbec <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	4798      	blx	r3
    print(" error:");
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	332c      	adds	r3, #44	; 0x2c
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4905      	ldr	r1, [pc, #20]	; (800dbf0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	4798      	blx	r3
}
 800dbe0:	bf00      	nop
 800dbe2:	3714      	adds	r7, #20
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd90      	pop	{r4, r7, pc}
 800dbe8:	08021254 	.word	0x08021254
 800dbec:	080213b0 	.word	0x080213b0
 800dbf0:	080213b4 	.word	0x080213b4

0800dbf4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
    print("\n");
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	332c      	adds	r3, #44	; 0x2c
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4916      	ldr	r1, [pc, #88]	; (800dc64 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	4798      	blx	r3
    print(file.asCharString());
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	332c      	adds	r3, #44	; 0x2c
 800dc14:	681c      	ldr	r4, [r3, #0]
 800dc16:	68b8      	ldr	r0, [r7, #8]
 800dc18:	f7fc f9d8 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	4619      	mov	r1, r3
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	47a0      	blx	r4
    print("(");
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	332c      	adds	r3, #44	; 0x2c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	490e      	ldr	r1, [pc, #56]	; (800dc68 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	4798      	blx	r3
    print(lineNumber);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3334      	adds	r3, #52	; 0x34
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	4798      	blx	r3
    print("):");
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	332c      	adds	r3, #44	; 0x2c
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4908      	ldr	r1, [pc, #32]	; (800dc6c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	4798      	blx	r3
    print(" error:");
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	332c      	adds	r3, #44	; 0x2c
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4906      	ldr	r1, [pc, #24]	; (800dc70 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	4798      	blx	r3
}
 800dc5c:	bf00      	nop
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd90      	pop	{r4, r7, pc}
 800dc64:	08021254 	.word	0x08021254
 800dc68:	080213bc 	.word	0x080213bc
 800dc6c:	080213c0 	.word	0x080213c0
 800dc70:	080213b4 	.word	0x080213b4

0800dc74 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7a1b      	ldrb	r3, [r3, #8]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d106      	bne.n	800dc94 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	3328      	adds	r3, #40	; 0x28
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	4798      	blx	r3
}
 800dc94:	bf00      	nop
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
 800dca4:	6039      	str	r1, [r7, #0]
    while (*s) {
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d009      	beq.n	800dcc2 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800dcae:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	7812      	ldrb	r2, [r2, #0]
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	4798      	blx	r3
        s++;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	603b      	str	r3, [r7, #0]
    while (*s) {
 800dcc0:	e7f1      	b.n	800dca6 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	334c      	adds	r3, #76	; 0x4c
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	4798      	blx	r3
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200000bc 	.word	0x200000bc

0800dcdc <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800dce4:	4b03      	ldr	r3, [pc, #12]	; (800dcf4 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4798      	blx	r3
}
 800dcea:	bf00      	nop
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200000c0 	.word	0x200000c0

0800dcf8 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fb00 	bl	800d308 <_ZN10TestOutputC1Ev>
 800dd08:	4a06      	ldr	r2, [pc, #24]	; (800dd24 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	611a      	str	r2, [r3, #16]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	615a      	str	r2, [r3, #20]
{
}
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	08023d48 	.word	0x08023d48

0800dd28 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	4a0e      	ldr	r2, [pc, #56]	; (800dd6c <_ZN19CompositeTestOutputD1Ev+0x44>)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d004      	beq.n	800dd48 <_ZN19CompositeTestOutputD1Ev+0x20>
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	3204      	adds	r2, #4
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	4618      	mov	r0, r3
 800dd46:	4790      	blx	r2
  delete outputTwo_;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d004      	beq.n	800dd5a <_ZN19CompositeTestOutputD1Ev+0x32>
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	3204      	adds	r2, #4
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	4618      	mov	r0, r3
 800dd58:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff faf1 	bl	800d344 <_ZN10TestOutputD1Ev>
}
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4618      	mov	r0, r3
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	08023d48 	.word	0x08023d48

0800dd70 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
}
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7ff ffd5 	bl	800dd28 <_ZN19CompositeTestOutputD1Ev>
 800dd7e:	2118      	movs	r1, #24
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7f9 f9e9 	bl	8007158 <_ZdlPvj>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d004      	beq.n	800ddac <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	3204      	adds	r2, #4
 800dda6:	6812      	ldr	r2, [r2, #0]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	4790      	blx	r2
  outputOne_ = output;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	611a      	str	r2, [r3, #16]
}
 800ddb2:	bf00      	nop
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d004      	beq.n	800ddd6 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	3204      	adds	r2, #4
 800ddd0:	6812      	ldr	r2, [r2, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	4790      	blx	r2
  outputTwo_ = output;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	615a      	str	r2, [r3, #20]
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d008      	beq.n	800de06 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	691a      	ldr	r2, [r3, #16]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4610      	mov	r0, r2
 800de04:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d008      	beq.n	800de20 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	695a      	ldr	r2, [r3, #20]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	695b      	ldr	r3, [r3, #20]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3308      	adds	r3, #8
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4610      	mov	r0, r2
 800de1e:	4798      	blx	r3
}
 800de20:	bf00      	nop
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d009      	beq.n	800de4e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	691a      	ldr	r2, [r3, #16]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	330c      	adds	r3, #12
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	4610      	mov	r0, r2
 800de4c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	695b      	ldr	r3, [r3, #20]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d009      	beq.n	800de6a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	695a      	ldr	r2, [r3, #20]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	330c      	adds	r3, #12
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	4610      	mov	r0, r2
 800de68:	4798      	blx	r3
}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d009      	beq.n	800de98 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	691a      	ldr	r2, [r3, #16]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	3310      	adds	r3, #16
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	4610      	mov	r0, r2
 800de96:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d009      	beq.n	800deb4 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	695a      	ldr	r2, [r3, #20]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	3310      	adds	r3, #16
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	6839      	ldr	r1, [r7, #0]
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
}
 800deb4:	bf00      	nop
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d009      	beq.n	800dee2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	691a      	ldr	r2, [r3, #16]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3314      	adds	r3, #20
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	4610      	mov	r0, r2
 800dee0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d009      	beq.n	800defe <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	695a      	ldr	r2, [r3, #20]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3314      	adds	r3, #20
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6839      	ldr	r1, [r7, #0]
 800defa:	4610      	mov	r0, r2
 800defc:	4798      	blx	r3
}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b082      	sub	sp, #8
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d009      	beq.n	800df2c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691a      	ldr	r2, [r3, #16]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	3318      	adds	r3, #24
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	4610      	mov	r0, r2
 800df2a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	695b      	ldr	r3, [r3, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d009      	beq.n	800df48 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	695a      	ldr	r2, [r3, #20]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	695b      	ldr	r3, [r3, #20]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	3318      	adds	r3, #24
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6839      	ldr	r1, [r7, #0]
 800df44:	4610      	mov	r0, r2
 800df46:	4798      	blx	r3
}
 800df48:	bf00      	nop
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d009      	beq.n	800df76 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	691a      	ldr	r2, [r3, #16]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	331c      	adds	r3, #28
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	4610      	mov	r0, r2
 800df74:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d009      	beq.n	800df92 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	695a      	ldr	r2, [r3, #20]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	695b      	ldr	r3, [r3, #20]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	331c      	adds	r3, #28
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	4610      	mov	r0, r2
 800df90:	4798      	blx	r3
}
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b082      	sub	sp, #8
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d009      	beq.n	800dfc2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	691a      	ldr	r2, [r3, #16]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3320      	adds	r3, #32
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	78f9      	ldrb	r1, [r7, #3]
 800dfbe:	4610      	mov	r0, r2
 800dfc0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	695b      	ldr	r3, [r3, #20]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d009      	beq.n	800dfde <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	695a      	ldr	r2, [r3, #20]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	695b      	ldr	r3, [r3, #20]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3320      	adds	r3, #32
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	78f9      	ldrb	r1, [r7, #3]
 800dfda:	4610      	mov	r0, r2
 800dfdc:	4798      	blx	r3
}
 800dfde:	bf00      	nop
 800dfe0:	3708      	adds	r7, #8
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b082      	sub	sp, #8
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d008      	beq.n	800e008 <_ZN19CompositeTestOutput5colorEv+0x22>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	691a      	ldr	r2, [r3, #16]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	691b      	ldr	r3, [r3, #16]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	3324      	adds	r3, #36	; 0x24
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4610      	mov	r0, r2
 800e006:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d008      	beq.n	800e022 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	695a      	ldr	r2, [r3, #20]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	3324      	adds	r3, #36	; 0x24
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4610      	mov	r0, r2
 800e020:	4798      	blx	r3
}
 800e022:	bf00      	nop
 800e024:	3708      	adds	r7, #8
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b082      	sub	sp, #8
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d009      	beq.n	800e050 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	691a      	ldr	r2, [r3, #16]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	3328      	adds	r3, #40	; 0x28
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d009      	beq.n	800e06c <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	695a      	ldr	r2, [r3, #20]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3328      	adds	r3, #40	; 0x28
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6839      	ldr	r1, [r7, #0]
 800e068:	4610      	mov	r0, r2
 800e06a:	4798      	blx	r3
}
 800e06c:	bf00      	nop
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d009      	beq.n	800e09a <_ZN19CompositeTestOutput5printEPKc+0x26>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	691a      	ldr	r2, [r3, #16]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	332c      	adds	r3, #44	; 0x2c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	4610      	mov	r0, r2
 800e098:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	695b      	ldr	r3, [r3, #20]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d009      	beq.n	800e0b6 <_ZN19CompositeTestOutput5printEPKc+0x42>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	695a      	ldr	r2, [r3, #20]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	332c      	adds	r3, #44	; 0x2c
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	4798      	blx	r3
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	691b      	ldr	r3, [r3, #16]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d009      	beq.n	800e0e4 <_ZN19CompositeTestOutput5printEl+0x26>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	691a      	ldr	r2, [r3, #16]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3330      	adds	r3, #48	; 0x30
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d009      	beq.n	800e100 <_ZN19CompositeTestOutput5printEl+0x42>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	695a      	ldr	r2, [r3, #20]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	3330      	adds	r3, #48	; 0x30
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
}
 800e100:	bf00      	nop
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	691b      	ldr	r3, [r3, #16]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d009      	beq.n	800e12e <_ZN19CompositeTestOutput5printEj+0x26>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	691a      	ldr	r2, [r3, #16]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	691b      	ldr	r3, [r3, #16]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3334      	adds	r3, #52	; 0x34
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6839      	ldr	r1, [r7, #0]
 800e12a:	4610      	mov	r0, r2
 800e12c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	695b      	ldr	r3, [r3, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d009      	beq.n	800e14a <_ZN19CompositeTestOutput5printEj+0x42>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695a      	ldr	r2, [r3, #20]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	695b      	ldr	r3, [r3, #20]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3334      	adds	r3, #52	; 0x34
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	4610      	mov	r0, r2
 800e148:	4798      	blx	r3
}
 800e14a:	bf00      	nop
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b084      	sub	sp, #16
 800e156:	af00      	add	r7, sp, #0
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	691b      	ldr	r3, [r3, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00a      	beq.n	800e17c <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	691a      	ldr	r2, [r3, #16]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3338      	adds	r3, #56	; 0x38
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	ed97 0b00 	vldr	d0, [r7]
 800e178:	4610      	mov	r0, r2
 800e17a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00a      	beq.n	800e19a <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	695a      	ldr	r2, [r3, #20]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	695b      	ldr	r3, [r3, #20]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3338      	adds	r3, #56	; 0x38
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	ed97 0b00 	vldr	d0, [r7]
 800e196:	4610      	mov	r0, r2
 800e198:	4798      	blx	r3
}
 800e19a:	bf00      	nop
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d009      	beq.n	800e1c8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	691a      	ldr	r2, [r3, #16]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	333c      	adds	r3, #60	; 0x3c
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d009      	beq.n	800e1e4 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	695a      	ldr	r2, [r3, #20]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	695b      	ldr	r3, [r3, #20]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	333c      	adds	r3, #60	; 0x3c
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	6839      	ldr	r1, [r7, #0]
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d009      	beq.n	800e212 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691a      	ldr	r2, [r3, #16]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	3344      	adds	r3, #68	; 0x44
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	4610      	mov	r0, r2
 800e210:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d009      	beq.n	800e22e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	695a      	ldr	r2, [r3, #20]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3344      	adds	r3, #68	; 0x44
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	6839      	ldr	r1, [r7, #0]
 800e22a:	4610      	mov	r0, r2
 800e22c:	4798      	blx	r3
}
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b082      	sub	sp, #8
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d008      	beq.n	800e258 <_ZN19CompositeTestOutput5flushEv+0x22>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	691a      	ldr	r2, [r3, #16]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	691b      	ldr	r3, [r3, #16]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	334c      	adds	r3, #76	; 0x4c
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4610      	mov	r0, r2
 800e256:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d008      	beq.n	800e272 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	695a      	ldr	r2, [r3, #20]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	334c      	adds	r3, #76	; 0x4c
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4610      	mov	r0, r2
 800e270:	4798      	blx	r3
}
 800e272:	bf00      	nop
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800e27a:	b480      	push	{r7}
 800e27c:	b085      	sub	sp, #20
 800e27e:	af00      	add	r7, sp, #0
 800e280:	60f8      	str	r0, [r7, #12]
 800e282:	60b9      	str	r1, [r7, #8]
 800e284:	607a      	str	r2, [r7, #4]
    }
 800e286:	bf00      	nop
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800e292:	b480      	push	{r7}
 800e294:	b085      	sub	sp, #20
 800e296:	af00      	add	r7, sp, #0
 800e298:	60f8      	str	r0, [r7, #12]
 800e29a:	60b9      	str	r1, [r7, #8]
 800e29c:	607a      	str	r2, [r7, #4]
    }
 800e29e:	bf00      	nop
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
	...

0800e2ac <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800e2b6:	4a0b      	ldr	r2, [pc, #44]	; (800e2e4 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	f000 f9ce 	bl	800e65c <_ZN14NullTestPlugin8instanceEv>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	605a      	str	r2, [r3, #4]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	6839      	ldr	r1, [r7, #0]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fb fb46 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	741a      	strb	r2, [r3, #16]
{
}
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	08023f04 	.word	0x08023f04

0800e2e8 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800e2f2:	4a0a      	ldr	r2, [pc, #40]	; (800e31c <_ZN10TestPluginC1EPS_+0x34>)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	605a      	str	r2, [r3, #4]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3308      	adds	r3, #8
 800e302:	4907      	ldr	r1, [pc, #28]	; (800e320 <_ZN10TestPluginC1EPS_+0x38>)
 800e304:	4618      	mov	r0, r3
 800e306:	f7fb fad6 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	741a      	strb	r2, [r3, #16]
{
}
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	08023f04 	.word	0x08023f04
 800e320:	080213c4 	.word	0x080213c4

0800e324 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	4a06      	ldr	r2, [pc, #24]	; (800e348 <_ZN10TestPluginD1Ev+0x24>)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3308      	adds	r3, #8
 800e336:	4618      	mov	r0, r3
 800e338:	f7fb fe75 	bl	800a026 <_ZN12SimpleStringD1Ev>
{
}
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	08023f04 	.word	0x08023f04

0800e34c <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
}
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7ff ffe5 	bl	800e324 <_ZN10TestPluginD1Ev>
 800e35a:	2114      	movs	r1, #20
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7f8 fefb 	bl	8007158 <_ZdlPvj>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	605a      	str	r2, [r3, #4]
    return this;
 800e37c:	687b      	ldr	r3, [r7, #4]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	370c      	adds	r7, #12
 800e382:	46bd      	mov	sp, r7
 800e384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e388:	4770      	bx	lr

0800e38a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	60f8      	str	r0, [r7, #12]
 800e392:	60b9      	str	r1, [r7, #8]
 800e394:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	7c1b      	ldrb	r3, [r3, #16]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d007      	beq.n	800e3ae <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3308      	adds	r3, #8
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	68b9      	ldr	r1, [r7, #8]
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6858      	ldr	r0, [r3, #4]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3314      	adds	r3, #20
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	4798      	blx	r3
}
 800e3c2:	bf00      	nop
 800e3c4:	3710      	adds	r7, #16
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b084      	sub	sp, #16
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	60b9      	str	r1, [r7, #8]
 800e3d4:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6858      	ldr	r0, [r3, #4]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3318      	adds	r3, #24
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	7c1b      	ldrb	r3, [r3, #16]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d007      	beq.n	800e402 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	330c      	adds	r3, #12
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	68b9      	ldr	r1, [r7, #8]
 800e3fe:	68f8      	ldr	r0, [r7, #12]
 800e400:	4798      	blx	r3
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800e40a:	b590      	push	{r4, r7, lr}
 800e40c:	b085      	sub	sp, #20
 800e40e:	af00      	add	r7, sp, #0
 800e410:	60f8      	str	r0, [r7, #12]
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	607a      	str	r2, [r7, #4]
 800e416:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	331c      	adds	r3, #28
 800e41e:	681c      	ldr	r4, [r3, #0]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	68b9      	ldr	r1, [r7, #8]
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	47a0      	blx	r4
 800e42a:	4603      	mov	r3, r0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	bd90      	pop	{r4, r7, pc}

0800e434 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800e434:	b590      	push	{r4, r7, lr}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
 800e440:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	3310      	adds	r3, #16
 800e448:	681c      	ldr	r4, [r3, #0]
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	68b9      	ldr	r1, [r7, #8]
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	47a0      	blx	r4
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800e45a:	2301      	movs	r3, #1
 800e45c:	e011      	b.n	800e482 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00c      	beq.n	800e480 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6858      	ldr	r0, [r3, #4]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	331c      	adds	r3, #28
 800e472:	681c      	ldr	r4, [r3, #0]
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	47a0      	blx	r4
 800e47c:	4603      	mov	r3, r0
 800e47e:	e000      	b.n	800e482 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	bd90      	pop	{r4, r7, pc}

0800e48a <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
    return name_;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3308      	adds	r3, #8
}
 800e496:	4618      	mov	r0, r3
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b082      	sub	sp, #8
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
 800e4aa:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6838      	ldr	r0, [r7, #0]
 800e4b4:	f7fb fdc3 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	e00d      	b.n	800e4de <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d007      	beq.n	800e4da <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7ff ffe6 	bl	800e4a2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	e001      	b.n	800e4de <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800e4e6:	b480      	push	{r7}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	6078      	str	r0, [r7, #4]
    return next_;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	370c      	adds	r7, #12
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr

0800e4fe <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b084      	sub	sp, #16
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800e508:	2300      	movs	r3, #0
 800e50a:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00e      	beq.n	800e532 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	4618      	mov	r0, r3
 800e51a:	f7ff ffb6 	bl	800e48a <_ZN10TestPlugin7getNameEv>
 800e51e:	4603      	mov	r3, r0
 800e520:	6839      	ldr	r1, [r7, #0]
 800e522:	4618      	mov	r0, r3
 800e524:	f7fb fd8b 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800e52e:	2301      	movs	r3, #1
 800e530:	e000      	b.n	800e534 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800e532:	2300      	movs	r3, #0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d007      	beq.n	800e548 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	685a      	ldr	r2, [r3, #4]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800e548:	68fb      	ldr	r3, [r7, #12]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800e552:	b480      	push	{r7}
 800e554:	b083      	sub	sp, #12
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	741a      	strb	r2, [r3, #16]
}
 800e560:	bf00      	nop
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	741a      	strb	r2, [r3, #16]
}
 800e57a:	bf00      	nop
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr

0800e586 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800e586:	b480      	push	{r7}
 800e588:	b083      	sub	sp, #12
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
    return enabled_;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	7c1b      	ldrb	r3, [r3, #16]
}
 800e592:	4618      	mov	r0, r3
 800e594:	370c      	adds	r7, #12
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
	...

0800e5a0 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7ff fe7c 	bl	800e2ac <_ZN10TestPluginC1ERK12SimpleString>
 800e5b4:	4a05      	ldr	r2, [pc, #20]	; (800e5cc <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800e5ba:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	601a      	str	r2, [r3, #0]
}
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08023ec0 	.word	0x08023ec0
 800e5d0:	200006bc 	.word	0x200006bc

0800e5d4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b087      	sub	sp, #28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800e5e0:	4b0e      	ldr	r3, [pc, #56]	; (800e61c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	617b      	str	r3, [r7, #20]
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	db0d      	blt.n	800e60a <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800e5ee:	4a0c      	ldr	r2, [pc, #48]	; (800e620 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e5f6:	490a      	ldr	r1, [pc, #40]	; (800e620 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	440b      	add	r3, r1
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	3b01      	subs	r3, #1
 800e606:	617b      	str	r3, [r7, #20]
 800e608:	e7ee      	b.n	800e5e8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800e60a:	4b04      	ldr	r3, [pc, #16]	; (800e61c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
}
 800e610:	bf00      	nop
 800e612:	371c      	adds	r7, #28
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr
 800e61c:	200006bc 	.word	0x200006bc
 800e620:	200006c0 	.word	0x200006c0

0800e624 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2100      	movs	r1, #0
 800e630:	4618      	mov	r0, r3
 800e632:	f7ff fe59 	bl	800e2e8 <_ZN10TestPluginC1EPS_>
 800e636:	4a04      	ldr	r2, [pc, #16]	; (800e648 <_ZN14NullTestPluginC1Ev+0x24>)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	601a      	str	r2, [r3, #0]
{
}
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4618      	mov	r0, r3
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	08023e7c 	.word	0x08023e7c

0800e64c <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
 800e650:	4801      	ldr	r0, [pc, #4]	; (800e658 <__tcf_0+0xc>)
 800e652:	f000 f849 	bl	800e6e8 <_ZN14NullTestPluginD1Ev>
 800e656:	bd80      	pop	{r7, pc}
 800e658:	200007c0 	.word	0x200007c0

0800e65c <_ZN14NullTestPlugin8instanceEv>:
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800e660:	4b12      	ldr	r3, [pc, #72]	; (800e6ac <_ZN14NullTestPlugin8instanceEv+0x50>)
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f3bf 8f5b 	dmb	ish
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	f003 0301 	and.w	r3, r3, #1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	bf0c      	ite	eq
 800e672:	2301      	moveq	r3, #1
 800e674:	2300      	movne	r3, #0
 800e676:	b2db      	uxtb	r3, r3
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d013      	beq.n	800e6a4 <_ZN14NullTestPlugin8instanceEv+0x48>
 800e67c:	480b      	ldr	r0, [pc, #44]	; (800e6ac <_ZN14NullTestPlugin8instanceEv+0x50>)
 800e67e:	f00d ffdb 	bl	801c638 <__cxa_guard_acquire>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	bf14      	ite	ne
 800e688:	2301      	movne	r3, #1
 800e68a:	2300      	moveq	r3, #0
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d008      	beq.n	800e6a4 <_ZN14NullTestPlugin8instanceEv+0x48>
 800e692:	4807      	ldr	r0, [pc, #28]	; (800e6b0 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800e694:	f7ff ffc6 	bl	800e624 <_ZN14NullTestPluginC1Ev>
 800e698:	4804      	ldr	r0, [pc, #16]	; (800e6ac <_ZN14NullTestPlugin8instanceEv+0x50>)
 800e69a:	f00d ffd9 	bl	801c650 <__cxa_guard_release>
 800e69e:	4805      	ldr	r0, [pc, #20]	; (800e6b4 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800e6a0:	f00d fffd 	bl	801c69e <atexit>
    return &_instance;
 800e6a4:	4b02      	ldr	r3, [pc, #8]	; (800e6b0 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	200007d4 	.word	0x200007d4
 800e6b0:	200007c0 	.word	0x200007c0
 800e6b4:	0800e64d 	.word	0x0800e64d

0800e6b8 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
}
 800e6c4:	bf00      	nop
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
}
 800e6dc:	bf00      	nop
 800e6de:	3714      	adds	r7, #20
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	4a05      	ldr	r2, [pc, #20]	; (800e708 <_ZN14NullTestPluginD1Ev+0x20>)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7ff fe13 	bl	800e324 <_ZN10TestPluginD1Ev>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	08023e7c 	.word	0x08023e7c

0800e70c <_ZN14NullTestPluginD0Ev>:
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7ff ffe7 	bl	800e6e8 <_ZN14NullTestPluginD1Ev>
 800e71a:	2114      	movs	r1, #20
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7f8 fd1b 	bl	8007158 <_ZdlPvj>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800e734:	4a0f      	ldr	r2, [pc, #60]	; (800e774 <_ZN12TestRegistryC1Ev+0x48>)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	605a      	str	r2, [r3, #4]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	609a      	str	r2, [r3, #8]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	60da      	str	r2, [r3, #12]
 800e74c:	f7ff ff86 	bl	800e65c <_ZN14NullTestPlugin8instanceEv>
 800e750:	4602      	mov	r2, r0
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	611a      	str	r2, [r3, #16]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	751a      	strb	r2, [r3, #20]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	619a      	str	r2, [r3, #24]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	771a      	strb	r2, [r3, #28]
{
}
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	08023f48 	.word	0x08023f48

0800e778 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	4a04      	ldr	r2, [pc, #16]	; (800e794 <_ZN12TestRegistryD1Ev+0x1c>)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]
{
}
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	08023f48 	.word	0x08023f48

0800e798 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
}
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7ff ffe9 	bl	800e778 <_ZN12TestRegistryD1Ev>
 800e7a6:	2120      	movs	r1, #32
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7f8 fcd5 	bl	8007158 <_ZdlPvj>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3308      	adds	r3, #8
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	6852      	ldr	r2, [r2, #4]
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	6838      	ldr	r0, [r7, #0]
 800e7d2:	4798      	blx	r3
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	605a      	str	r2, [r3, #4]
}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	3308      	adds	r3, #8
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6838      	ldr	r0, [r7, #0]
 800e7fa:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	60bb      	str	r3, [r7, #8]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d05c      	beq.n	800e8c2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7d1b      	ldrb	r3, [r3, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d005      	beq.n	800e81c <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3380      	adds	r3, #128	; 0x80
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68b8      	ldr	r0, [r7, #8]
 800e81a:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	7f1b      	ldrb	r3, [r3, #28]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d005      	beq.n	800e830 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3384      	adds	r3, #132	; 0x84
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68b8      	ldr	r0, [r7, #8]
 800e82e:	4798      	blx	r3

        if (groupStart) {
 800e830:	7bfb      	ldrb	r3, [r7, #15]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d008      	beq.n	800e848 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3310      	adds	r3, #16
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	6838      	ldr	r0, [r7, #0]
 800e842:	4798      	blx	r3
            groupStart = false;
 800e844:	2300      	movs	r3, #0
 800e846:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	3320      	adds	r3, #32
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6838      	ldr	r0, [r7, #0]
 800e852:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	68b9      	ldr	r1, [r7, #8]
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 fb79 	bl	800ef50 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d016      	beq.n	800e892 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	3318      	adds	r3, #24
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68b9      	ldr	r1, [r7, #8]
 800e86e:	6838      	ldr	r0, [r7, #0]
 800e870:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	3390      	adds	r3, #144	; 0x90
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	6911      	ldr	r1, [r2, #16]
 800e87e:	683a      	ldr	r2, [r7, #0]
 800e880:	68b8      	ldr	r0, [r7, #8]
 800e882:	4798      	blx	r3
            result.currentTestEnded(test);
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	331c      	adds	r3, #28
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	6838      	ldr	r0, [r7, #0]
 800e890:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800e892:	68b9      	ldr	r1, [r7, #8]
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 fa5b 	bl	800ed50 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d008      	beq.n	800e8b2 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3314      	adds	r3, #20
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68b9      	ldr	r1, [r7, #8]
 800e8ae:	6838      	ldr	r0, [r7, #0]
 800e8b0:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	330c      	adds	r3, #12
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68b8      	ldr	r0, [r7, #8]
 800e8bc:	4798      	blx	r3
 800e8be:	60b8      	str	r0, [r7, #8]
 800e8c0:	e79f      	b.n	800e802 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	330c      	adds	r3, #12
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	6838      	ldr	r0, [r7, #0]
 800e8cc:	4798      	blx	r3
    currentRepetition_++;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	699b      	ldr	r3, [r3, #24]
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	619a      	str	r2, [r3, #24]
}
 800e8d8:	bf00      	nop
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800e8e0:	b590      	push	{r4, r7, lr}
 800e8e2:	b08f      	sub	sp, #60	; 0x3c
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800e8ea:	f107 0314 	add.w	r3, r7, #20
 800e8ee:	4953      	ldr	r1, [pc, #332]	; (800ea3c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fa ffe0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	637b      	str	r3, [r7, #52]	; 0x34
 800e8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d04d      	beq.n	800e99e <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800e902:	f107 030c 	add.w	r3, r7, #12
 800e906:	494d      	ldr	r1, [pc, #308]	; (800ea3c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fa ffd4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800e90e:	f107 030c 	add.w	r3, r7, #12
 800e912:	494b      	ldr	r1, [pc, #300]	; (800ea40 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800e914:	4618      	mov	r0, r3
 800e916:	f7fb fc15 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800e91a:	f107 031c 	add.w	r3, r7, #28
 800e91e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e920:	4618      	mov	r0, r3
 800e922:	f001 f9d2 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800e926:	f107 021c 	add.w	r2, r7, #28
 800e92a:	f107 030c 	add.w	r3, r7, #12
 800e92e:	4611      	mov	r1, r2
 800e930:	4618      	mov	r0, r3
 800e932:	f7fb fbf5 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800e936:	f107 031c 	add.w	r3, r7, #28
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fb fb73 	bl	800a026 <_ZN12SimpleStringD1Ev>
        gname += "#";
 800e940:	f107 030c 	add.w	r3, r7, #12
 800e944:	493e      	ldr	r1, [pc, #248]	; (800ea40 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800e946:	4618      	mov	r0, r3
 800e948:	f7fb fbfc 	bl	800a144 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800e94c:	f107 020c 	add.w	r2, r7, #12
 800e950:	f107 0314 	add.w	r3, r7, #20
 800e954:	4611      	mov	r1, r2
 800e956:	4618      	mov	r0, r3
 800e958:	f7fb f82b 	bl	80099b2 <_ZNK12SimpleString8containsERKS_>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f083 0301 	eor.w	r3, r3, #1
 800e962:	b2db      	uxtb	r3, r3
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00d      	beq.n	800e984 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800e968:	f107 020c 	add.w	r2, r7, #12
 800e96c:	f107 0314 	add.w	r3, r7, #20
 800e970:	4611      	mov	r1, r2
 800e972:	4618      	mov	r0, r3
 800e974:	f7fb fbd4 	bl	800a120 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800e978:	f107 0314 	add.w	r3, r7, #20
 800e97c:	4931      	ldr	r1, [pc, #196]	; (800ea44 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fb fbe0 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800e984:	f107 030c 	add.w	r3, r7, #12
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fb fb4c 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800e98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	330c      	adds	r3, #12
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e998:	4798      	blx	r3
 800e99a:	6378      	str	r0, [r7, #52]	; 0x34
 800e99c:	e7ae      	b.n	800e8fc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800e99e:	f107 0314 	add.w	r3, r7, #20
 800e9a2:	4a26      	ldr	r2, [pc, #152]	; (800ea3c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800e9a4:	4926      	ldr	r1, [pc, #152]	; (800ea40 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fb f99a 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800e9ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9b0:	4924      	ldr	r1, [pc, #144]	; (800ea44 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fa ff7f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800e9b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e9bc:	f107 0314 	add.w	r3, r7, #20
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fb f874 	bl	8009ab0 <_ZNK12SimpleString8endsWithERKS_>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	461c      	mov	r4, r3
 800e9cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fb fb28 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800e9d6:	2c00      	cmp	r4, #0
 800e9d8:	d01a      	beq.n	800ea10 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800e9da:	f107 0314 	add.w	r3, r7, #20
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fb fb00 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	3b01      	subs	r3, #1
 800e9e8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e9ec:	f107 0114 	add.w	r1, r7, #20
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f7fb fc21 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
 800e9f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e9fa:	f107 0314 	add.w	r3, r7, #20
 800e9fe:	4611      	mov	r1, r2
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7fa ffc4 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800ea06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fb fb0b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3338      	adds	r3, #56	; 0x38
 800ea16:	681c      	ldr	r4, [r3, #0]
 800ea18:	f107 0314 	add.w	r3, r7, #20
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fb fad5 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800ea22:	4603      	mov	r3, r0
 800ea24:	4619      	mov	r1, r3
 800ea26:	6838      	ldr	r0, [r7, #0]
 800ea28:	47a0      	blx	r4
    SimpleString groupList;
 800ea2a:	f107 0314 	add.w	r3, r7, #20
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fb faf9 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800ea34:	bf00      	nop
 800ea36:	373c      	adds	r7, #60	; 0x3c
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd90      	pop	{r4, r7, pc}
 800ea3c:	08021414 	.word	0x08021414
 800ea40:	08021418 	.word	0x08021418
 800ea44:	0802141c 	.word	0x0802141c

0800ea48 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800ea48:	b590      	push	{r4, r7, lr}
 800ea4a:	b091      	sub	sp, #68	; 0x44
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800ea52:	f107 0314 	add.w	r3, r7, #20
 800ea56:	4964      	ldr	r1, [pc, #400]	; (800ebe8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fa ff2c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d06e      	beq.n	800eb48 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fa6e 	bl	800ef50 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d05e      	beq.n	800eb38 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800ea7a:	f107 030c 	add.w	r3, r7, #12
 800ea7e:	495a      	ldr	r1, [pc, #360]	; (800ebe8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fa ff18 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800ea86:	f107 030c 	add.w	r3, r7, #12
 800ea8a:	4958      	ldr	r1, [pc, #352]	; (800ebec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fb fb59 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800ea92:	f107 031c 	add.w	r3, r7, #28
 800ea96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f001 f916 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800ea9e:	f107 021c 	add.w	r2, r7, #28
 800eaa2:	f107 030c 	add.w	r3, r7, #12
 800eaa6:	4611      	mov	r1, r2
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fb fb39 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800eaae:	f107 031c 	add.w	r3, r7, #28
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fb fab7 	bl	800a026 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800eab8:	f107 030c 	add.w	r3, r7, #12
 800eabc:	494c      	ldr	r1, [pc, #304]	; (800ebf0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fb fb40 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800eac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaca:	4618      	mov	r0, r3
 800eacc:	f001 f8ee 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800ead0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ead4:	f107 030c 	add.w	r3, r7, #12
 800ead8:	4611      	mov	r1, r2
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fb fb20 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800eae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eae4:	4618      	mov	r0, r3
 800eae6:	f7fb fa9e 	bl	800a026 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800eaea:	f107 030c 	add.w	r3, r7, #12
 800eaee:	493f      	ldr	r1, [pc, #252]	; (800ebec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fb fb27 	bl	800a144 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800eaf6:	f107 020c 	add.w	r2, r7, #12
 800eafa:	f107 0314 	add.w	r3, r7, #20
 800eafe:	4611      	mov	r1, r2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fa ff56 	bl	80099b2 <_ZNK12SimpleString8containsERKS_>
 800eb06:	4603      	mov	r3, r0
 800eb08:	f083 0301 	eor.w	r3, r3, #1
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00d      	beq.n	800eb2e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800eb12:	f107 020c 	add.w	r2, r7, #12
 800eb16:	f107 0314 	add.w	r3, r7, #20
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fb faff 	bl	800a120 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800eb22:	f107 0314 	add.w	r3, r7, #20
 800eb26:	4933      	ldr	r1, [pc, #204]	; (800ebf4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fb fb0b 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800eb2e:	f107 030c 	add.w	r3, r7, #12
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fb fa77 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800eb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	330c      	adds	r3, #12
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb42:	4798      	blx	r3
 800eb44:	63f8      	str	r0, [r7, #60]	; 0x3c
 800eb46:	e78d      	b.n	800ea64 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	4a26      	ldr	r2, [pc, #152]	; (800ebe8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800eb4e:	4927      	ldr	r1, [pc, #156]	; (800ebec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fb f8c5 	bl	8009ce0 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800eb56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb5a:	4926      	ldr	r1, [pc, #152]	; (800ebf4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fa feaa 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800eb62:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800eb66:	f107 0314 	add.w	r3, r7, #20
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fa ff9f 	bl	8009ab0 <_ZNK12SimpleString8endsWithERKS_>
 800eb72:	4603      	mov	r3, r0
 800eb74:	461c      	mov	r4, r3
 800eb76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fb fa53 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800eb80:	2c00      	cmp	r4, #0
 800eb82:	d01a      	beq.n	800ebba <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800eb84:	f107 0314 	add.w	r3, r7, #20
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fb fa2b 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	3b01      	subs	r3, #1
 800eb92:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800eb96:	f107 0114 	add.w	r1, r7, #20
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f7fb fb4c 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
 800eba0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800eba4:	f107 0314 	add.w	r3, r7, #20
 800eba8:	4611      	mov	r1, r2
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fa feef 	bl	800998e <_ZN12SimpleStringaSERKS_>
 800ebb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fb fa36 	bl	800a026 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	3338      	adds	r3, #56	; 0x38
 800ebc0:	681c      	ldr	r4, [r3, #0]
 800ebc2:	f107 0314 	add.w	r3, r7, #20
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fb fa00 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	4619      	mov	r1, r3
 800ebd0:	6838      	ldr	r0, [r7, #0]
 800ebd2:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800ebd4:	f107 0314 	add.w	r3, r7, #20
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7fb fa24 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800ebde:	bf00      	nop
 800ebe0:	3744      	adds	r7, #68	; 0x44
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd90      	pop	{r4, r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	08021414 	.word	0x08021414
 800ebec:	08021418 	.word	0x08021418
 800ebf0:	08021420 	.word	0x08021420
 800ebf4:	0802141c 	.word	0x0802141c

0800ebf8 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800ebf8:	b590      	push	{r4, r7, lr}
 800ebfa:	b091      	sub	sp, #68	; 0x44
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800ec02:	f107 0314 	add.w	r3, r7, #20
 800ec06:	494f      	ldr	r1, [pc, #316]	; (800ed44 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fa fe54 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d07d      	beq.n	800ed16 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800ec1a:	f107 030c 	add.w	r3, r7, #12
 800ec1e:	4949      	ldr	r1, [pc, #292]	; (800ed44 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7fa fe48 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800ec26:	f107 031c 	add.w	r3, r7, #28
 800ec2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f001 f84c 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800ec32:	f107 021c 	add.w	r2, r7, #28
 800ec36:	f107 030c 	add.w	r3, r7, #12
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fb fa6f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800ec42:	f107 031c 	add.w	r3, r7, #28
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fb f9ed 	bl	800a026 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ec4c:	f107 030c 	add.w	r3, r7, #12
 800ec50:	493d      	ldr	r1, [pc, #244]	; (800ed48 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fb fa76 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800ec58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f001 f824 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800ec64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ec68:	f107 030c 	add.w	r3, r7, #12
 800ec6c:	4611      	mov	r1, r2
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fb fa56 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800ec74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fb f9d4 	bl	800a026 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ec7e:	f107 030c 	add.w	r3, r7, #12
 800ec82:	4931      	ldr	r1, [pc, #196]	; (800ed48 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fb fa5d 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800ec8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec90:	4618      	mov	r0, r3
 800ec92:	f001 f8dc 	bl	800fe4e <_ZNK10UtestShell7getFileEv>
 800ec96:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ec9a:	f107 030c 	add.w	r3, r7, #12
 800ec9e:	4611      	mov	r1, r2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fb fa3d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800eca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fb f9bb 	bl	800a026 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800ecb0:	f107 030c 	add.w	r3, r7, #12
 800ecb4:	4924      	ldr	r1, [pc, #144]	; (800ed48 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fb fa44 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800ecbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ecbe:	f001 f8d5 	bl	800fe6c <_ZNK10UtestShell13getLineNumberEv>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ecca:	4920      	ldr	r1, [pc, #128]	; (800ed4c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fb feb1 	bl	800aa34 <_Z16StringFromFormatPKcz>
 800ecd2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ecd6:	f107 030c 	add.w	r3, r7, #12
 800ecda:	4611      	mov	r1, r2
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fb fa1f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 800ece2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fb f99d 	bl	800a026 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800ecec:	f107 020c 	add.w	r2, r7, #12
 800ecf0:	f107 0314 	add.w	r3, r7, #20
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fb fa12 	bl	800a120 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800ecfc:	f107 030c 	add.w	r3, r7, #12
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fb f990 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ed06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	330c      	adds	r3, #12
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed10:	4798      	blx	r3
 800ed12:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ed14:	e77e      	b.n	800ec14 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	3338      	adds	r3, #56	; 0x38
 800ed1c:	681c      	ldr	r4, [r3, #0]
 800ed1e:	f107 0314 	add.w	r3, r7, #20
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fb f952 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6838      	ldr	r0, [r7, #0]
 800ed2e:	47a0      	blx	r4
    SimpleString testLocations;
 800ed30:	f107 0314 	add.w	r3, r7, #20
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fb f976 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 800ed3a:	bf00      	nop
 800ed3c:	3744      	adds	r7, #68	; 0x44
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd90      	pop	{r4, r7, pc}
 800ed42:	bf00      	nop
 800ed44:	08021414 	.word	0x08021414
 800ed48:	08021420 	.word	0x08021420
 800ed4c:	08021424 	.word	0x08021424

0800ed50 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800ed50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed52:	b087      	sub	sp, #28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800ed5a:	2400      	movs	r4, #0
 800ed5c:	2500      	movs	r5, #0
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d028      	beq.n	800edb6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	330c      	adds	r3, #12
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6838      	ldr	r0, [r7, #0]
 800ed6e:	4798      	blx	r3
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d01f      	beq.n	800edb6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800ed76:	f107 0308 	add.w	r3, r7, #8
 800ed7a:	6839      	ldr	r1, [r7, #0]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 ffa4 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800ed82:	2401      	movs	r4, #1
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	330c      	adds	r3, #12
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	6838      	ldr	r0, [r7, #0]
 800ed8e:	4798      	blx	r3
 800ed90:	4602      	mov	r2, r0
 800ed92:	f107 0310 	add.w	r3, r7, #16
 800ed96:	4611      	mov	r1, r2
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 ff96 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800ed9e:	2501      	movs	r5, #1
 800eda0:	f107 0210 	add.w	r2, r7, #16
 800eda4:	f107 0308 	add.w	r3, r7, #8
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fb f98c 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800edb6:	2601      	movs	r6, #1
 800edb8:	e000      	b.n	800edbc <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800edba:	2600      	movs	r6, #0
 800edbc:	2d00      	cmp	r5, #0
 800edbe:	d004      	beq.n	800edca <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800edc0:	f107 0310 	add.w	r3, r7, #16
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fb f92e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800edca:	2c00      	cmp	r4, #0
 800edcc:	d004      	beq.n	800edd8 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800edce:	f107 0308 	add.w	r3, r7, #8
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fb f927 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800edd8:	4633      	mov	r3, r6
}
 800edda:	4618      	mov	r0, r3
 800eddc:	371c      	adds	r7, #28
 800edde:	46bd      	mov	sp, r7
 800ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ede2 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00a      	beq.n	800ee08 <_ZN12TestRegistry10countTestsEv+0x26>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685a      	ldr	r2, [r3, #4]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	3310      	adds	r3, #16
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4610      	mov	r0, r2
 800ee02:	4798      	blx	r3
 800ee04:	4603      	mov	r3, r0
 800ee06:	e000      	b.n	800ee0a <_ZN12TestRegistry10countTestsEv+0x28>
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800ee14:	b580      	push	{r7, lr}
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	4801      	ldr	r0, [pc, #4]	; (800ee20 <__tcf_0+0xc>)
 800ee1a:	f7ff fcad 	bl	800e778 <_ZN12TestRegistryD1Ev>
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	200007dc 	.word	0x200007dc

0800ee24 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800ee28:	4b15      	ldr	r3, [pc, #84]	; (800ee80 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f3bf 8f5b 	dmb	ish
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	f003 0301 	and.w	r3, r3, #1
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	bf0c      	ite	eq
 800ee3a:	2301      	moveq	r3, #1
 800ee3c:	2300      	movne	r3, #0
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d013      	beq.n	800ee6c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800ee44:	480e      	ldr	r0, [pc, #56]	; (800ee80 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ee46:	f00d fbf7 	bl	801c638 <__cxa_guard_acquire>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	bf14      	ite	ne
 800ee50:	2301      	movne	r3, #1
 800ee52:	2300      	moveq	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d008      	beq.n	800ee6c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800ee5a:	480a      	ldr	r0, [pc, #40]	; (800ee84 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800ee5c:	f7ff fc66 	bl	800e72c <_ZN12TestRegistryC1Ev>
 800ee60:	4807      	ldr	r0, [pc, #28]	; (800ee80 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ee62:	f00d fbf5 	bl	801c650 <__cxa_guard_release>
 800ee66:	4808      	ldr	r0, [pc, #32]	; (800ee88 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800ee68:	f00d fc19 	bl	801c69e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800ee6c:	4b07      	ldr	r3, [pc, #28]	; (800ee8c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800ee74:	4b05      	ldr	r3, [pc, #20]	; (800ee8c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	e000      	b.n	800ee7c <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800ee7a:	4b02      	ldr	r3, [pc, #8]	; (800ee84 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	200007fc 	.word	0x200007fc
 800ee84:	200007dc 	.word	0x200007dc
 800ee88:	0800ee15 	.word	0x0800ee15
 800ee8c:	200007d8 	.word	0x200007d8

0800ee90 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800ee9a:	4a04      	ldr	r2, [pc, #16]	; (800eeac <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	6013      	str	r3, [r2, #0]
}
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	200007d8 	.word	0x200007d8

0800eeb0 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00a      	beq.n	800eed6 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685a      	ldr	r2, [r3, #4]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	330c      	adds	r3, #12
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4610      	mov	r0, r2
 800eed0:	4798      	blx	r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	e000      	b.n	800eed8 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800eed6:	2300      	movs	r3, #0
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	6053      	str	r3, [r2, #4]

}
 800eedc:	bf00      	nop
 800eede:	3708      	adds	r7, #8
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	609a      	str	r2, [r3, #8]
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	60da      	str	r2, [r3, #12]
}
 800ef10:	bf00      	nop
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	771a      	strb	r2, [r3, #28]
}
 800ef2a:	bf00      	nop
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800ef36:	b480      	push	{r7}
 800ef38:	b083      	sub	sp, #12
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	751a      	strb	r2, [r3, #20]
}
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	68d9      	ldr	r1, [r3, #12]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	461a      	mov	r2, r3
 800ef66:	68b8      	ldr	r0, [r7, #8]
 800ef68:	f000 ffbb 	bl	800fee2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e006      	b.n	800ef84 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	332c      	adds	r3, #44	; 0x2c
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	4798      	blx	r3
        return false;
 800ef82:	2300      	movs	r3, #0
    }
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800ef94:	f7ff fb62 	bl	800e65c <_ZN14NullTestPlugin8instanceEv>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	611a      	str	r2, [r3, #16]
}
 800ef9e:	bf00      	nop
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b082      	sub	sp, #8
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	3324      	adds	r3, #36	; 0x24
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	6912      	ldr	r2, [r2, #16]
 800efbc:	4611      	mov	r1, r2
 800efbe:	6838      	ldr	r0, [r7, #0]
 800efc0:	4798      	blx	r3
 800efc2:	4602      	mov	r2, r0
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	611a      	str	r2, [r3, #16]
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	691b      	ldr	r3, [r3, #16]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff fa52 	bl	800e4a2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800effe:	4603      	mov	r3, r0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	691a      	ldr	r2, [r3, #16]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	3328      	adds	r3, #40	; 0x28
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6839      	ldr	r1, [r7, #0]
 800f022:	4610      	mov	r0, r2
 800f024:	4798      	blx	r3
 800f026:	4602      	mov	r2, r0
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	bf0c      	ite	eq
 800f030:	2301      	moveq	r3, #1
 800f032:	2300      	movne	r3, #0
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00b      	beq.n	800f052 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	691a      	ldr	r2, [r3, #16]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	332c      	adds	r3, #44	; 0x2c
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4610      	mov	r0, r2
 800f04a:	4798      	blx	r3
 800f04c:	4602      	mov	r2, r0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff fa17 	bl	800e48a <_ZN10TestPlugin7getNameEv>
 800f05c:	4603      	mov	r3, r0
 800f05e:	6839      	ldr	r1, [r7, #0]
 800f060:	4618      	mov	r0, r3
 800f062:	f7fa ffec 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00b      	beq.n	800f084 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	691a      	ldr	r2, [r3, #16]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	332c      	adds	r3, #44	; 0x2c
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4610      	mov	r0, r2
 800f07c:	4798      	blx	r3
 800f07e:	4602      	mov	r2, r0
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	691a      	ldr	r2, [r3, #16]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	3328      	adds	r3, #40	; 0x28
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	6839      	ldr	r1, [r7, #0]
 800f094:	4610      	mov	r0, r2
 800f096:	4798      	blx	r3
}
 800f098:	bf00      	nop
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
    int count = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	691b      	ldr	r3, [r3, #16]
 800f0b0:	60bb      	str	r3, [r7, #8]
 800f0b2:	f7ff fad3 	bl	800e65c <_ZN14NullTestPlugin8instanceEv>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	bf14      	ite	ne
 800f0be:	2301      	movne	r3, #1
 800f0c0:	2300      	moveq	r3, #0
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d00a      	beq.n	800f0de <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	332c      	adds	r3, #44	; 0x2c
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68b8      	ldr	r0, [r7, #8]
 800f0d8:	4798      	blx	r3
 800f0da:	60b8      	str	r0, [r7, #8]
 800f0dc:	e7e9      	b.n	800f0b2 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800f0de:	68fb      	ldr	r3, [r7, #12]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
    return tests_;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	334c      	adds	r3, #76	; 0x4c
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	4798      	blx	r3
 800f116:	4602      	mov	r2, r0
 800f118:	f107 0308 	add.w	r3, r7, #8
 800f11c:	4611      	mov	r1, r2
 800f11e:	4618      	mov	r0, r3
 800f120:	f002 f8f8 	bl	8011314 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800f124:	f107 0308 	add.w	r3, r7, #8
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f002 f980 	bl	8011430 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800f130:	f107 0308 	add.w	r3, r7, #8
 800f134:	4618      	mov	r0, r3
 800f136:	f002 fa13 	bl	8011560 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800f13a:	4602      	mov	r2, r0
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800f140:	f107 0308 	add.w	r3, r7, #8
 800f144:	4618      	mov	r0, r3
 800f146:	f002 f939 	bl	80113bc <_ZN22UtestShellPointerArrayD1Ev>
}
 800f14a:	bf00      	nop
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	334c      	adds	r3, #76	; 0x4c
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	4798      	blx	r3
 800f166:	4602      	mov	r2, r0
 800f168:	f107 0308 	add.w	r3, r7, #8
 800f16c:	4611      	mov	r1, r2
 800f16e:	4618      	mov	r0, r3
 800f170:	f002 f8d0 	bl	8011314 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800f174:	f107 0308 	add.w	r3, r7, #8
 800f178:	4618      	mov	r0, r3
 800f17a:	f002 f995 	bl	80114a8 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800f17e:	f107 0308 	add.w	r3, r7, #8
 800f182:	4618      	mov	r0, r3
 800f184:	f002 f9ec 	bl	8011560 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800f188:	4602      	mov	r2, r0
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800f18e:	f107 0308 	add.w	r3, r7, #8
 800f192:	4618      	mov	r0, r3
 800f194:	f002 f912 	bl	80113bc <_ZN22UtestShellPointerArrayD1Ev>
}
 800f198:	bf00      	nop
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00b      	beq.n	800f1ce <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	330c      	adds	r3, #12
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	4798      	blx	r3
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d001      	beq.n	800f1ce <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e000      	b.n	800f1d0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d007      	beq.n	800f1e4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	330c      	adds	r3, #12
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68f8      	ldr	r0, [r7, #12]
 800f1de:	4798      	blx	r3
 800f1e0:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800f1e2:	e7e5      	b.n	800f1b0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800f1ee:	b590      	push	{r4, r7, lr}
 800f1f0:	b087      	sub	sp, #28
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
 800f1f6:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	617b      	str	r3, [r7, #20]
    while (current) {
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d01e      	beq.n	800f242 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800f204:	f107 030c 	add.w	r3, r7, #12
 800f208:	6979      	ldr	r1, [r7, #20]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f000 fd4e 	bl	800fcac <_ZNK10UtestShell7getNameEv>
 800f210:	f107 030c 	add.w	r3, r7, #12
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	4618      	mov	r0, r3
 800f218:	f7fa ff11 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800f21c:	4603      	mov	r3, r0
 800f21e:	461c      	mov	r4, r3
 800f220:	f107 030c 	add.w	r3, r7, #12
 800f224:	4618      	mov	r0, r3
 800f226:	f7fa fefe 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	d001      	beq.n	800f232 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	e008      	b.n	800f244 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	330c      	adds	r3, #12
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	6978      	ldr	r0, [r7, #20]
 800f23c:	4798      	blx	r3
 800f23e:	6178      	str	r0, [r7, #20]
    while (current) {
 800f240:	e7dd      	b.n	800f1fe <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	371c      	adds	r7, #28
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd90      	pop	{r4, r7, pc}

0800f24c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	617b      	str	r3, [r7, #20]
    while (current) {
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d01e      	beq.n	800f2a0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800f262:	f107 030c 	add.w	r3, r7, #12
 800f266:	6979      	ldr	r1, [r7, #20]
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 fd2e 	bl	800fcca <_ZNK10UtestShell8getGroupEv>
 800f26e:	f107 030c 	add.w	r3, r7, #12
 800f272:	6839      	ldr	r1, [r7, #0]
 800f274:	4618      	mov	r0, r3
 800f276:	f7fa fee2 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 800f27a:	4603      	mov	r3, r0
 800f27c:	461c      	mov	r4, r3
 800f27e:	f107 030c 	add.w	r3, r7, #12
 800f282:	4618      	mov	r0, r3
 800f284:	f7fa fecf 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800f288:	2c00      	cmp	r4, #0
 800f28a:	d001      	beq.n	800f290 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	e008      	b.n	800f2a2 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	330c      	adds	r3, #12
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	6978      	ldr	r0, [r7, #20]
 800f29a:	4798      	blx	r3
 800f29c:	6178      	str	r0, [r7, #20]
    while (current) {
 800f29e:	e7dd      	b.n	800f25c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	371c      	adds	r7, #28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd90      	pop	{r4, r7, pc}
	...

0800f2ac <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800f2b6:	4a18      	ldr	r2, [pc, #96]	; (800f318 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	683a      	ldr	r2, [r7, #0]
 800f2c0:	605a      	str	r2, [r3, #4]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	609a      	str	r2, [r3, #8]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	60da      	str	r2, [r3, #12]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	611a      	str	r2, [r3, #16]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	615a      	str	r2, [r3, #20]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	619a      	str	r2, [r3, #24]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	61da      	str	r2, [r3, #28]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	621a      	str	r2, [r3, #32]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	625a      	str	r2, [r3, #36]	; 0x24
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	629a      	str	r2, [r3, #40]	; 0x28
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2200      	movs	r2, #0
 800f302:	631a      	str	r2, [r3, #48]	; 0x30
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4618      	mov	r0, r3
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	08023fb4 	.word	0x08023fb4

0800f31c <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	4a04      	ldr	r2, [pc, #16]	; (800f338 <_ZN10TestResultD1Ev+0x1c>)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	601a      	str	r2, [r3, #0]
{
}
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4618      	mov	r0, r3
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	08023fb4 	.word	0x08023fb4

0800f33c <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
}
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff ffe9 	bl	800f31c <_ZN10TestResultD1Ev>
 800f34a:	2138      	movs	r1, #56	; 0x38
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7f7 ff03 	bl	8007158 <_ZdlPvj>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	3318      	adds	r3, #24
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	4610      	mov	r0, r2
 800f378:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4798      	blx	r3
 800f380:	4603      	mov	r3, r0
 800f382:	461a      	mov	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f388:	bf00      	nop
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	200000a4 	.word	0x200000a4

0800f394 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800f39e:	4b0c      	ldr	r3, [pc, #48]	; (800f3d0 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4798      	blx	r3
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ac:	1ad2      	subs	r2, r2, r3
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	685a      	ldr	r2, [r3, #4]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	331c      	adds	r3, #28
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6879      	ldr	r1, [r7, #4]
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	4798      	blx	r3
}
 800f3c6:	bf00      	nop
 800f3c8:	3708      	adds	r7, #8
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	200000a4 	.word	0x200000a4

0800f3d4 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685a      	ldr	r2, [r3, #4]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3310      	adds	r3, #16
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	6839      	ldr	r1, [r7, #0]
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f3f2:	4b05      	ldr	r3, [pc, #20]	; (800f408 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4798      	blx	r3
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	200000a4 	.word	0x200000a4

0800f40c <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	332c      	adds	r3, #44	; 0x2c
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6839      	ldr	r1, [r7, #0]
 800f426:	4610      	mov	r0, r2
 800f428:	4798      	blx	r3
}
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685a      	ldr	r2, [r3, #4]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	3348      	adds	r3, #72	; 0x48
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800f462:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4798      	blx	r3
 800f468:	4603      	mov	r3, r0
 800f46a:	461a      	mov	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f470:	1ad2      	subs	r2, r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685a      	ldr	r2, [r3, #4]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3314      	adds	r3, #20
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6879      	ldr	r1, [r7, #4]
 800f486:	4610      	mov	r0, r2
 800f488:	4798      	blx	r3

}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	200000a4 	.word	0x200000a4

0800f498 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	685a      	ldr	r2, [r3, #4]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	333c      	adds	r3, #60	; 0x3c
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	4798      	blx	r3
    failureCount_++;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	615a      	str	r2, [r3, #20]
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
    testCount_++;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	609a      	str	r2, [r3, #8]
}
 800f4da:	bf00      	nop
 800f4dc:	370c      	adds	r7, #12
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
    runCount_++;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	1c5a      	adds	r2, r3, #1
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	60da      	str	r2, [r3, #12]
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	611a      	str	r2, [r3, #16]
}
 800f516:	bf00      	nop
 800f518:	370c      	adds	r7, #12
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800f522:	b480      	push	{r7}
 800f524:	b083      	sub	sp, #12
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	699b      	ldr	r3, [r3, #24]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	619a      	str	r2, [r3, #24]
}
 800f534:	bf00      	nop
 800f536:	370c      	adds	r7, #12
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	69db      	ldr	r3, [r3, #28]
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	61da      	str	r2, [r3, #28]
}
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
	...

0800f560 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800f568:	4b09      	ldr	r3, [pc, #36]	; (800f590 <_ZN10TestResult12testsStartedEv+0x30>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4798      	blx	r3
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	685a      	ldr	r2, [r3, #4]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	3308      	adds	r3, #8
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4610      	mov	r0, r2
 800f586:	4798      	blx	r3
}
 800f588:	bf00      	nop
 800f58a:	3708      	adds	r7, #8
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	200000a4 	.word	0x200000a4

0800f594 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800f59c:	4b0c      	ldr	r3, [pc, #48]	; (800f5d0 <_ZN10TestResult10testsEndedEv+0x3c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4798      	blx	r3
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	1ad2      	subs	r2, r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	330c      	adds	r3, #12
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	4798      	blx	r3
}
 800f5c6:	bf00      	nop
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	200000a4 	.word	0x200000a4

0800f5d4 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6a1b      	ldr	r3, [r3, #32]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800f610:	4618      	mov	r0, r3
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800f61c:	b590      	push	{r4, r7, lr}
 800f61e:	b087      	sub	sp, #28
 800f620:	af00      	add	r7, sp, #0
 800f622:	ed87 0b04 	vstr	d0, [r7, #16]
 800f626:	ed87 1b02 	vstr	d1, [r7, #8]
 800f62a:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800f62e:	4b2c      	ldr	r3, [pc, #176]	; (800f6e0 <_Z13doubles_equalddd+0xc4>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	ed97 0b04 	vldr	d0, [r7, #16]
 800f636:	4798      	blx	r3
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10f      	bne.n	800f65e <_Z13doubles_equalddd+0x42>
 800f63e:	4b28      	ldr	r3, [pc, #160]	; (800f6e0 <_Z13doubles_equalddd+0xc4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	ed97 0b02 	vldr	d0, [r7, #8]
 800f646:	4798      	blx	r3
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d107      	bne.n	800f65e <_Z13doubles_equalddd+0x42>
 800f64e:	4b24      	ldr	r3, [pc, #144]	; (800f6e0 <_Z13doubles_equalddd+0xc4>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	ed97 0b00 	vldr	d0, [r7]
 800f656:	4798      	blx	r3
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <_Z13doubles_equalddd+0x46>
 800f65e:	2301      	movs	r3, #1
 800f660:	e000      	b.n	800f664 <_Z13doubles_equalddd+0x48>
 800f662:	2300      	movs	r3, #0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <_Z13doubles_equalddd+0x50>
        return false;
 800f668:	2300      	movs	r3, #0
 800f66a:	e035      	b.n	800f6d8 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800f66c:	4b1d      	ldr	r3, [pc, #116]	; (800f6e4 <_Z13doubles_equalddd+0xc8>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	ed97 0b04 	vldr	d0, [r7, #16]
 800f674:	4798      	blx	r3
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d009      	beq.n	800f690 <_Z13doubles_equalddd+0x74>
 800f67c:	4b19      	ldr	r3, [pc, #100]	; (800f6e4 <_Z13doubles_equalddd+0xc8>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	ed97 0b02 	vldr	d0, [r7, #8]
 800f684:	4798      	blx	r3
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <_Z13doubles_equalddd+0x74>
 800f68c:	2301      	movs	r3, #1
 800f68e:	e000      	b.n	800f692 <_Z13doubles_equalddd+0x76>
 800f690:	2300      	movs	r3, #0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800f696:	2301      	movs	r3, #1
 800f698:	e01e      	b.n	800f6d8 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800f69a:	4b13      	ldr	r3, [pc, #76]	; (800f6e8 <_Z13doubles_equalddd+0xcc>)
 800f69c:	681c      	ldr	r4, [r3, #0]
 800f69e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f6a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f6a6:	f7f0 fe2f 	bl	8000308 <__aeabi_dsub>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	ec43 2b17 	vmov	d7, r2, r3
 800f6b2:	eeb0 0a47 	vmov.f32	s0, s14
 800f6b6:	eef0 0a67 	vmov.f32	s1, s15
 800f6ba:	47a0      	blx	r4
 800f6bc:	ec53 2b10 	vmov	r2, r3, d0
 800f6c0:	2101      	movs	r1, #1
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f6c8:	f7f1 f84a 	bl	8000760 <__aeabi_dcmpge>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d101      	bne.n	800f6d6 <_Z13doubles_equalddd+0xba>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	461c      	mov	r4, r3
 800f6d6:	b2e3      	uxtb	r3, r4
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	371c      	adds	r7, #28
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd90      	pop	{r4, r7, pc}
 800f6e0:	200000e4 	.word	0x200000e4
 800f6e4:	200000e8 	.word	0x200000e8
 800f6e8:	200000d8 	.word	0x200000d8

0800f6ec <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	332c      	adds	r3, #44	; 0x2c
    }
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	370c      	adds	r7, #12
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
    {
 800f70c:	4a0a      	ldr	r2, [pc, #40]	; (800f738 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	332c      	adds	r3, #44	; 0x2c
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff fe00 	bl	800f31c <_ZN10TestResultD1Ev>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	331c      	adds	r3, #28
 800f720:	4618      	mov	r0, r3
 800f722:	f7f6 f815 	bl	8005750 <_ZN17ConsoleTestOutputD1Ev>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 f943 	bl	800f9b4 <_ZN10UtestShellD1Ev>
    }
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	08023ffc 	.word	0x08023ffc

0800f73c <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
    }
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7ff ffdd 	bl	800f704 <_ZN22OutsideTestRunnerUTestD1Ev>
 800f74a:	2164      	movs	r1, #100	; 0x64
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7f7 fd03 	bl	8007158 <_ZdlPvj>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	4618      	mov	r0, r3
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af02      	add	r7, sp, #8
 800f762:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	2300      	movs	r3, #0
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	4b0d      	ldr	r3, [pc, #52]	; (800f7a0 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800f76c:	4a0d      	ldr	r2, [pc, #52]	; (800f7a4 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800f76e:	490e      	ldr	r1, [pc, #56]	; (800f7a8 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800f770:	f000 f8f8 	bl	800f964 <_ZN10UtestShellC1EPKcS1_S1_j>
 800f774:	4a0d      	ldr	r2, [pc, #52]	; (800f7ac <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	601a      	str	r2, [r3, #0]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	331c      	adds	r3, #28
 800f77e:	4618      	mov	r0, r3
 800f780:	f7f5 ffd4 	bl	800572c <_ZN17ConsoleTestOutputC1Ev>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	331c      	adds	r3, #28
 800f78e:	4619      	mov	r1, r3
 800f790:	4610      	mov	r0, r2
 800f792:	f7ff fd8b 	bl	800f2ac <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	08021428 	.word	0x08021428
 800f7a4:	08021438 	.word	0x08021438
 800f7a8:	08021478 	.word	0x08021478
 800f7ac:	08023ffc 	.word	0x08023ffc

0800f7b0 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	4801      	ldr	r0, [pc, #4]	; (800f7bc <__tcf_0+0xc>)
 800f7b6:	f7ff ffa5 	bl	800f704 <_ZN22OutsideTestRunnerUTestD1Ev>
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	20000800 	.word	0x20000800

0800f7c0 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800f7c4:	4b12      	ldr	r3, [pc, #72]	; (800f810 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	f3bf 8f5b 	dmb	ish
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	f003 0301 	and.w	r3, r3, #1
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	bf0c      	ite	eq
 800f7d6:	2301      	moveq	r3, #1
 800f7d8:	2300      	movne	r3, #0
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d013      	beq.n	800f808 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800f7e0:	480b      	ldr	r0, [pc, #44]	; (800f810 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800f7e2:	f00c ff29 	bl	801c638 <__cxa_guard_acquire>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	bf14      	ite	ne
 800f7ec:	2301      	movne	r3, #1
 800f7ee:	2300      	moveq	r3, #0
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d008      	beq.n	800f808 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800f7f6:	4807      	ldr	r0, [pc, #28]	; (800f814 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800f7f8:	f7ff ffb0 	bl	800f75c <_ZN22OutsideTestRunnerUTestC1Ev>
 800f7fc:	4804      	ldr	r0, [pc, #16]	; (800f810 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800f7fe:	f00c ff27 	bl	801c650 <__cxa_guard_release>
 800f802:	4805      	ldr	r0, [pc, #20]	; (800f818 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800f804:	f00c ff4b 	bl	801c69e <atexit>
    return instance_;
 800f808:	4b02      	ldr	r3, [pc, #8]	; (800f814 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	20000864 	.word	0x20000864
 800f814:	20000800 	.word	0x20000800
 800f818:	0800f7b1 	.word	0x0800f7b1

0800f81c <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	330c      	adds	r3, #12
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	4798      	blx	r3
    }
 800f830:	bf00      	nop
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	3314      	adds	r3, #20
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	4798      	blx	r3
    }
 800f84c:	bf00      	nop
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	3310      	adds	r3, #16
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	4798      	blx	r3
    }
 800f868:	bf00      	nop
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	603b      	str	r3, [r7, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	68ba      	ldr	r2, [r7, #8]
 800f882:	601a      	str	r2, [r3, #0]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	605a      	str	r2, [r3, #4]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	609a      	str	r2, [r3, #8]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	4618      	mov	r0, r3
 800f894:	3714      	adds	r7, #20
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr

0800f89e <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b086      	sub	sp, #24
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	689b      	ldr	r3, [r3, #8]
 800f8ba:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	3394      	adds	r3, #148	; 0x94
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	68ba      	ldr	r2, [r7, #8]
 800f8c6:	68f9      	ldr	r1, [r7, #12]
 800f8c8:	6938      	ldr	r0, [r7, #16]
 800f8ca:	4798      	blx	r3
    }
 800f8cc:	bf00      	nop
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800f8f2:	4b05      	ldr	r3, [pc, #20]	; (800f908 <helperDoRunOneTestSeperateProcess+0x34>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	68f9      	ldr	r1, [r7, #12]
 800f8fa:	6938      	ldr	r0, [r7, #16]
 800f8fc:	4798      	blx	r3
    }
 800f8fe:	bf00      	nop
 800f900:	3718      	adds	r7, #24
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	20000098 	.word	0x20000098

0800f90c <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800f914:	4a0f      	ldr	r2, [pc, #60]	; (800f954 <_ZN10UtestShellC1Ev+0x48>)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	601a      	str	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4a0e      	ldr	r2, [pc, #56]	; (800f958 <_ZN10UtestShellC1Ev+0x4c>)
 800f91e:	605a      	str	r2, [r3, #4]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a0e      	ldr	r2, [pc, #56]	; (800f95c <_ZN10UtestShellC1Ev+0x50>)
 800f924:	609a      	str	r2, [r3, #8]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a0d      	ldr	r2, [pc, #52]	; (800f960 <_ZN10UtestShellC1Ev+0x54>)
 800f92a:	60da      	str	r2, [r3, #12]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	611a      	str	r2, [r3, #16]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	615a      	str	r2, [r3, #20]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	761a      	strb	r2, [r3, #24]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	765a      	strb	r2, [r3, #25]
{
}
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4618      	mov	r0, r3
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	080240bc 	.word	0x080240bc
 800f958:	080214c4 	.word	0x080214c4
 800f95c:	080214d8 	.word	0x080214d8
 800f960:	080214e8 	.word	0x080214e8

0800f964 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800f964:	b480      	push	{r7}
 800f966:	b085      	sub	sp, #20
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
 800f970:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800f972:	4a0f      	ldr	r2, [pc, #60]	; (800f9b0 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	601a      	str	r2, [r3, #0]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	68ba      	ldr	r2, [r7, #8]
 800f97c:	605a      	str	r2, [r3, #4]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	609a      	str	r2, [r3, #8]
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	60da      	str	r2, [r3, #12]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	69ba      	ldr	r2, [r7, #24]
 800f98e:	611a      	str	r2, [r3, #16]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2200      	movs	r2, #0
 800f994:	615a      	str	r2, [r3, #20]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2200      	movs	r2, #0
 800f99a:	761a      	strb	r2, [r3, #24]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	765a      	strb	r2, [r3, #25]
{
}
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3714      	adds	r7, #20
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	080240bc 	.word	0x080240bc

0800f9b4 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	4a04      	ldr	r2, [pc, #16]	; (800f9d0 <_ZN10UtestShellD1Ev+0x1c>)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	601a      	str	r2, [r3, #0]
{
}
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	080240bc 	.word	0x080240bc

0800f9d4 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
}
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff ffe9 	bl	800f9b4 <_ZN10UtestShellD1Ev>
 800f9e2:	211c      	movs	r1, #28
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7f7 fbb7 	bl	8007158 <_ZdlPvj>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	3310      	adds	r3, #16
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	4798      	blx	r3
}
 800fa0a:	bf00      	nop
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800fa18:	4b02      	ldr	r3, [pc, #8]	; (800fa24 <_ZN10UtestShell5crashEv+0x10>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4798      	blx	r3
}
 800fa1e:	bf00      	nop
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	20000094 	.word	0x20000094

0800fa28 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3324      	adds	r3, #36	; 0x24
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800fa46:	f107 0014 	add.w	r0, r7, #20
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	68f9      	ldr	r1, [r7, #12]
 800fa50:	f7ff ff0e 	bl	800f870 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	337c      	adds	r3, #124	; 0x7c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	4798      	blx	r3
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d007      	beq.n	800fa76 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800fa66:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f107 0214 	add.w	r2, r7, #20
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4807      	ldr	r0, [pc, #28]	; (800fa90 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800fa72:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800fa74:	e006      	b.n	800fa84 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800fa76:	4b05      	ldr	r3, [pc, #20]	; (800fa8c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f107 0214 	add.w	r2, r7, #20
 800fa7e:	4611      	mov	r1, r2
 800fa80:	4804      	ldr	r0, [pc, #16]	; (800fa94 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800fa82:	4798      	blx	r3
}
 800fa84:	bf00      	nop
 800fa86:	3720      	adds	r7, #32
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	200000a0 	.word	0x200000a0
 800fa90:	0800f8d5 	.word	0x0800f8d5
 800fa94:	0800f89f 	.word	0x0800f89f

0800fa98 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800fa98:	b590      	push	{r4, r7, lr}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
    return new Utest();
 800faa0:	22d3      	movs	r2, #211	; 0xd3
 800faa2:	4906      	ldr	r1, [pc, #24]	; (800fabc <_ZN10UtestShell10createTestEv+0x24>)
 800faa4:	2004      	movs	r0, #4
 800faa6:	f7f7 fb43 	bl	8007130 <_ZnwjPKci>
 800faaa:	4604      	mov	r4, r0
 800faac:	4620      	mov	r0, r4
 800faae:	f001 fb0f 	bl	80110d0 <_ZN5UtestC1Ev>
 800fab2:	4623      	mov	r3, r4
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd90      	pop	{r4, r7, pc}
 800fabc:	080214f8 	.word	0x080214f8

0800fac0 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
    delete test;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d004      	beq.n	800fada <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	3204      	adds	r2, #4
 800fad4:	6812      	ldr	r2, [r2, #0]
 800fad6:	4618      	mov	r0, r3
 800fad8:	4790      	blx	r2
}
 800fada:	bf00      	nop
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
	...

0800fae4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b088      	sub	sp, #32
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	333c      	adds	r3, #60	; 0x3c
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4940      	ldr	r1, [pc, #256]	; (800fbfc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	3314      	adds	r3, #20
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	68f9      	ldr	r1, [r7, #12]
 800fb0a:	68b8      	ldr	r0, [r7, #8]
 800fb0c:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	333c      	adds	r3, #60	; 0x3c
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	493a      	ldr	r1, [pc, #232]	; (800fc00 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800fb1c:	f001 faae 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 800fb20:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f001 fa90 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 800fb28:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	68f8      	ldr	r0, [r7, #12]
 800fb2e:	f001 fa6b 	bl	8011008 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800fb32:	68f9      	ldr	r1, [r7, #12]
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f001 fa77 	bl	8011028 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	333c      	adds	r3, #60	; 0x3c
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4930      	ldr	r1, [pc, #192]	; (800fc04 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	4798      	blx	r3
    Utest* testToRun = createTest();
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	3388      	adds	r3, #136	; 0x88
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	4798      	blx	r3
 800fb54:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	333c      	adds	r3, #60	; 0x3c
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	492a      	ldr	r1, [pc, #168]	; (800fc08 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	333c      	adds	r3, #60	; 0x3c
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4927      	ldr	r1, [pc, #156]	; (800fc0c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	4798      	blx	r3
    testToRun->run();
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3308      	adds	r3, #8
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	6978      	ldr	r0, [r7, #20]
 800fb7c:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	333c      	adds	r3, #60	; 0x3c
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4922      	ldr	r1, [pc, #136]	; (800fc10 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800fb8c:	69f9      	ldr	r1, [r7, #28]
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f001 fa4a 	bl	8011028 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800fb94:	69b9      	ldr	r1, [r7, #24]
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f001 fa36 	bl	8011008 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	333c      	adds	r3, #60	; 0x3c
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	491b      	ldr	r1, [pc, #108]	; (800fc14 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	4798      	blx	r3
    destroyTest(testToRun);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	338c      	adds	r3, #140	; 0x8c
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6979      	ldr	r1, [r7, #20]
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	333c      	adds	r3, #60	; 0x3c
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4915      	ldr	r1, [pc, #84]	; (800fc18 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	333c      	adds	r3, #60	; 0x3c
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4913      	ldr	r1, [pc, #76]	; (800fc1c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3318      	adds	r3, #24
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	68f9      	ldr	r1, [r7, #12]
 800fbe0:	68b8      	ldr	r0, [r7, #8]
 800fbe2:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	333c      	adds	r3, #60	; 0x3c
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	490c      	ldr	r1, [pc, #48]	; (800fc20 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	4798      	blx	r3
}
 800fbf2:	bf00      	nop
 800fbf4:	3720      	adds	r7, #32
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	0802150c 	.word	0x0802150c
 800fc00:	08021530 	.word	0x08021530
 800fc04:	08021550 	.word	0x08021550
 800fc08:	0802156c 	.word	0x0802156c
 800fc0c:	08021588 	.word	0x08021588
 800fc10:	080215a4 	.word	0x080215a4
 800fc14:	080215bc 	.word	0x080215bc
 800fc18:	080215d8 	.word	0x080215d8
 800fc1c:	080215f4 	.word	0x080215f4
 800fc20:	08021618 	.word	0x08021618

0800fc24 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
    return next_;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	695b      	ldr	r3, [r3, #20]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
    next_ = test;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	615a      	str	r2, [r3, #20]
    return this;
 800fc4c:	687b      	ldr	r3, [r7, #4]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr

0800fc5a <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b082      	sub	sp, #8
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	695b      	ldr	r3, [r3, #20]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00b      	beq.n	800fc82 <_ZN10UtestShell10countTestsEv+0x28>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	695a      	ldr	r2, [r3, #20]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	695b      	ldr	r3, [r3, #20]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	3310      	adds	r3, #16
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4610      	mov	r0, r2
 800fc7a:	4798      	blx	r3
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	3301      	adds	r3, #1
 800fc80:	e000      	b.n	800fc84 <_ZN10UtestShell10countTestsEv+0x2a>
 800fc82:	2301      	movs	r3, #1
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
    return "TEST";
 800fc96:	4904      	ldr	r1, [pc, #16]	; (800fca8 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f7f9 fe0c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
}
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	3708      	adds	r7, #8
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	0802163c 	.word	0x0802163c

0800fcac <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	689b      	ldr	r3, [r3, #8]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7f9 fdfa 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
}
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b082      	sub	sp, #8
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	4619      	mov	r1, r3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7f9 fdeb 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
}
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	33a0      	adds	r3, #160	; 0xa0
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	6839      	ldr	r1, [r7, #0]
 800fcfe:	4610      	mov	r0, r2
 800fd00:	4798      	blx	r3
    formattedName += "(";
 800fd02:	490e      	ldr	r1, [pc, #56]	; (800fd3c <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f7fa fa1d 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7fa fa17 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800fd16:	490a      	ldr	r1, [pc, #40]	; (800fd40 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7fa fa13 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	4619      	mov	r1, r3
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7fa fa0d 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800fd2a:	4906      	ldr	r1, [pc, #24]	; (800fd44 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7fa fa09 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800fd32:	bf00      	nop
}
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	08021644 	.word	0x08021644
 800fd40:	08021648 	.word	0x08021648
 800fd44:	0802164c 	.word	0x0802164c

0800fd48 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	7e5b      	ldrb	r3, [r3, #25]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f001 f96d 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	3228      	adds	r2, #40	; 0x28
 800fd74:	6812      	ldr	r2, [r2, #0]
 800fd76:	4618      	mov	r0, r3
 800fd78:	4790      	blx	r2
}
 800fd7a:	bf00      	nop
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 800fd82:	b480      	push	{r7}
 800fd84:	b083      	sub	sp, #12
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
    return true;
 800fd8a:	2301      	movs	r3, #1
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7e1b      	ldrb	r3, [r3, #24]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	761a      	strb	r2, [r3, #24]
}
 800fdbe:	bf00      	nop
 800fdc0:	370c      	adds	r7, #12
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800fdca:	b480      	push	{r7}
 800fdcc:	b083      	sub	sp, #12
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]

}
 800fdd2:	bf00      	nop
 800fdd4:	370c      	adds	r7, #12
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800fdde:	b480      	push	{r7}
 800fde0:	b083      	sub	sp, #12
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
 800fde6:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	683a      	ldr	r2, [r7, #0]
 800fdec:	60da      	str	r2, [r3, #12]
}
 800fdee:	bf00      	nop
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800fdfa:	b480      	push	{r7}
 800fdfc:	b083      	sub	sp, #12
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
 800fe02:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	611a      	str	r2, [r3, #16]
}
 800fe0a:	bf00      	nop
 800fe0c:	370c      	adds	r7, #12
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr

0800fe16 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800fe16:	b480      	push	{r7}
 800fe18:	b083      	sub	sp, #12
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
 800fe1e:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	605a      	str	r2, [r3, #4]
}
 800fe26:	bf00      	nop
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	683a      	ldr	r2, [r7, #0]
 800fe40:	609a      	str	r2, [r3, #8]
}
 800fe42:	bf00      	nop
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f7f9 fd29 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
}
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	691b      	ldr	r3, [r3, #16]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800fe84:	b590      	push	{r4, r7, lr}
 800fe86:	b087      	sub	sp, #28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d101      	bne.n	800fe9a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e01f      	b.n	800feda <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d01b      	beq.n	800fed8 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800fea0:	f107 0310 	add.w	r3, r7, #16
 800fea4:	68b9      	ldr	r1, [r7, #8]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f9 fd05 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800feac:	f107 0310 	add.w	r3, r7, #16
 800feb0:	4619      	mov	r1, r3
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f00c fb93 	bl	801c5de <_ZNK10TestFilter5matchERK12SimpleString>
 800feb8:	4603      	mov	r3, r0
 800feba:	461c      	mov	r4, r3
 800febc:	f107 0310 	add.w	r3, r7, #16
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fa f8b0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 800fec6:	2c00      	cmp	r4, #0
 800fec8:	d001      	beq.n	800fece <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800feca:	2301      	movs	r3, #1
 800fecc:	e005      	b.n	800feda <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f00c fb5f 	bl	801c592 <_ZNK10TestFilter7getNextEv>
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	e7e0      	b.n	800fe9a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800fed8:	2300      	movs	r3, #0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}

0800fee2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b084      	sub	sp, #16
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	60f8      	str	r0, [r7, #12]
 800feea:	60b9      	str	r1, [r7, #8]
 800feec:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	68ba      	ldr	r2, [r7, #8]
 800fef4:	4619      	mov	r1, r3
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f7ff ffc4 	bl	800fe84 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00b      	beq.n	800ff1a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	4619      	mov	r1, r3
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f7ff ffba 	bl	800fe84 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800ff16:	2301      	movs	r3, #1
 800ff18:	e000      	b.n	800ff1c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800ff1a:	2300      	movs	r3, #0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800ff24:	b590      	push	{r4, r7, lr}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	339c      	adds	r3, #156	; 0x9c
 800ff34:	681c      	ldr	r4, [r3, #0]
 800ff36:	f001 f8b1 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800ff44:	bf00      	nop
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd90      	pop	{r4, r7, pc}

0800ff4c <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f001 f872 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 800ff64:	4603      	mov	r3, r0
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	3234      	adds	r2, #52	; 0x34
 800ff6a:	6812      	ldr	r2, [r2, #0]
 800ff6c:	68b9      	ldr	r1, [r7, #8]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	4790      	blx	r2
    terminator.exitCurrentTest();
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800ff7c:	bf00      	nop
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	6838      	ldr	r0, [r7, #0]
 800ff96:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ffa0:	b590      	push	{r4, r7, lr}
 800ffa2:	b09d      	sub	sp, #116	; 0x74
 800ffa4:	af04      	add	r7, sp, #16
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	607a      	str	r2, [r7, #4]
 800ffaa:	603b      	str	r3, [r7, #0]
 800ffac:	460b      	mov	r3, r1
 800ffae:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f001 f849 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	3228      	adds	r2, #40	; 0x28
 800ffbc:	6812      	ldr	r2, [r2, #0]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	4790      	blx	r2
    if (!condition)
 800ffc2:	7afb      	ldrb	r3, [r7, #11]
 800ffc4:	f083 0301 	eor.w	r3, r3, #1
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d03f      	beq.n	801004e <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	339c      	adds	r3, #156	; 0x9c
 800ffd4:	681c      	ldr	r4, [r3, #0]
 800ffd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f9 fc6a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800ffe2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ffe6:	6839      	ldr	r1, [r7, #0]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f9 fc64 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800ffee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fff2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7f9 fc5e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 800fffa:	f107 0014 	add.w	r0, r7, #20
 800fffe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010002:	9302      	str	r3, [sp, #8]
 8010004:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801000e:	9300      	str	r3, [sp, #0]
 8010010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010012:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010014:	68f9      	ldr	r1, [r7, #12]
 8010016:	f7fb ff6b 	bl	800bef0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801001a:	f107 0314 	add.w	r3, r7, #20
 801001e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010020:	4619      	mov	r1, r3
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	47a0      	blx	r4
 8010026:	f107 0314 	add.w	r3, r7, #20
 801002a:	4618      	mov	r0, r3
 801002c:	f7fc fdce 	bl	800cbcc <_ZN12CheckFailureD1Ev>
 8010030:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010034:	4618      	mov	r0, r3
 8010036:	f7f9 fff6 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801003a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801003e:	4618      	mov	r0, r3
 8010040:	f7f9 fff1 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010044:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010048:	4618      	mov	r0, r3
 801004a:	f7f9 ffec 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801004e:	bf00      	nop
 8010050:	3764      	adds	r7, #100	; 0x64
 8010052:	46bd      	mov	sp, r7
 8010054:	bd90      	pop	{r4, r7, pc}

08010056 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010056:	b590      	push	{r4, r7, lr}
 8010058:	b097      	sub	sp, #92	; 0x5c
 801005a:	af02      	add	r7, sp, #8
 801005c:	60f8      	str	r0, [r7, #12]
 801005e:	60b9      	str	r1, [r7, #8]
 8010060:	607a      	str	r2, [r7, #4]
 8010062:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f000 ffef 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 801006a:	4603      	mov	r3, r0
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	3228      	adds	r2, #40	; 0x28
 8010070:	6812      	ldr	r2, [r2, #0]
 8010072:	4618      	mov	r0, r3
 8010074:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	339c      	adds	r3, #156	; 0x9c
 801007c:	681c      	ldr	r4, [r3, #0]
 801007e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010082:	68b9      	ldr	r1, [r7, #8]
 8010084:	4618      	mov	r0, r3
 8010086:	f7f9 fc16 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801008a:	f107 0014 	add.w	r0, r7, #20
 801008e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	68f9      	ldr	r1, [r7, #12]
 801009a:	f7fb ff71 	bl	800bf80 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 801009e:	f107 0314 	add.w	r3, r7, #20
 80100a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100a4:	4619      	mov	r1, r3
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	47a0      	blx	r4
 80100aa:	f107 0314 	add.w	r3, r7, #20
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7f7 fc16 	bl	80078e0 <_ZN11FailFailureD1Ev>
 80100b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7f9 ffb4 	bl	800a026 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80100be:	bf00      	nop
 80100c0:	3754      	adds	r7, #84	; 0x54
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd90      	pop	{r4, r7, pc}

080100c6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80100c6:	b590      	push	{r4, r7, lr}
 80100c8:	b0a7      	sub	sp, #156	; 0x9c
 80100ca:	af04      	add	r7, sp, #16
 80100cc:	60f8      	str	r0, [r7, #12]
 80100ce:	60b9      	str	r1, [r7, #8]
 80100d0:	607a      	str	r2, [r7, #4]
 80100d2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f000 ffb7 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 80100da:	4603      	mov	r3, r0
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	3228      	adds	r2, #40	; 0x28
 80100e0:	6812      	ldr	r2, [r2, #0]
 80100e2:	4618      	mov	r0, r3
 80100e4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d102      	bne.n	80100f2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d068      	beq.n	80101c4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d12a      	bne.n	8010154 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	339c      	adds	r3, #156	; 0x9c
 8010104:	681c      	ldr	r4, [r3, #0]
 8010106:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	4618      	mov	r0, r3
 801010e:	f7f9 fbd2 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010112:	f107 0010 	add.w	r0, r7, #16
 8010116:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801011a:	9302      	str	r3, [sp, #8]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010128:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801012c:	68f9      	ldr	r1, [r7, #12]
 801012e:	f7fc f9ad 	bl	800c48c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010132:	f107 0310 	add.w	r3, r7, #16
 8010136:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801013a:	4619      	mov	r1, r3
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	47a0      	blx	r4
 8010140:	f107 0310 	add.w	r3, r7, #16
 8010144:	4618      	mov	r0, r3
 8010146:	f7fc fcb9 	bl	800cabc <_ZN18StringEqualFailureD1Ev>
 801014a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801014e:	4618      	mov	r0, r3
 8010150:	f7f9 ff69 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8010154:	6879      	ldr	r1, [r7, #4]
 8010156:	68b8      	ldr	r0, [r7, #8]
 8010158:	f7f9 f9ea 	bl	8009530 <_ZN12SimpleString6StrCmpEPKcS1_>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	bf14      	ite	ne
 8010162:	2301      	movne	r3, #1
 8010164:	2300      	moveq	r3, #0
 8010166:	b2db      	uxtb	r3, r3
 8010168:	2b00      	cmp	r3, #0
 801016a:	d02c      	beq.n	80101c6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	339c      	adds	r3, #156	; 0x9c
 8010172:	681c      	ldr	r4, [r3, #0]
 8010174:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010178:	6839      	ldr	r1, [r7, #0]
 801017a:	4618      	mov	r0, r3
 801017c:	f7f9 fb9b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010180:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010188:	9302      	str	r3, [sp, #8]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010196:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801019a:	68f9      	ldr	r1, [r7, #12]
 801019c:	f7fc f976 	bl	800c48c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80101a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80101a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80101a8:	4619      	mov	r1, r3
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	47a0      	blx	r4
 80101ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fc fc82 	bl	800cabc <_ZN18StringEqualFailureD1Ev>
 80101b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80101bc:	4618      	mov	r0, r3
 80101be:	f7f9 ff32 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80101c2:	e000      	b.n	80101c6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80101c4:	bf00      	nop
}
 80101c6:	378c      	adds	r7, #140	; 0x8c
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd90      	pop	{r4, r7, pc}

080101cc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80101cc:	b590      	push	{r4, r7, lr}
 80101ce:	b0a7      	sub	sp, #156	; 0x9c
 80101d0:	af04      	add	r7, sp, #16
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f000 ff34 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 80101e0:	4603      	mov	r3, r0
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	3228      	adds	r2, #40	; 0x28
 80101e6:	6812      	ldr	r2, [r2, #0]
 80101e8:	4618      	mov	r0, r3
 80101ea:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d102      	bne.n	80101f8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d06b      	beq.n	80102d0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d12b      	bne.n	801025c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	339c      	adds	r3, #156	; 0x9c
 801020a:	681c      	ldr	r4, [r3, #0]
 801020c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010210:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010214:	4618      	mov	r0, r3
 8010216:	f7f9 fb4e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801021a:	f107 0010 	add.w	r0, r7, #16
 801021e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010222:	9302      	str	r3, [sp, #8]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	9301      	str	r3, [sp, #4]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010230:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010234:	68f9      	ldr	r1, [r7, #12]
 8010236:	f7fc f929 	bl	800c48c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801023a:	f107 0310 	add.w	r3, r7, #16
 801023e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010242:	4619      	mov	r1, r3
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	47a0      	blx	r4
 8010248:	f107 0310 	add.w	r3, r7, #16
 801024c:	4618      	mov	r0, r3
 801024e:	f7fc fc35 	bl	800cabc <_ZN18StringEqualFailureD1Ev>
 8010252:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010256:	4618      	mov	r0, r3
 8010258:	f7f9 fee5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 801025c:	683a      	ldr	r2, [r7, #0]
 801025e:	6879      	ldr	r1, [r7, #4]
 8010260:	68b8      	ldr	r0, [r7, #8]
 8010262:	f7f9 f9a4 	bl	80095ae <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	bf14      	ite	ne
 801026c:	2301      	movne	r3, #1
 801026e:	2300      	moveq	r3, #0
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d02d      	beq.n	80102d2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	339c      	adds	r3, #156	; 0x9c
 801027c:	681c      	ldr	r4, [r3, #0]
 801027e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010282:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010286:	4618      	mov	r0, r3
 8010288:	f7f9 fb15 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801028c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010290:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010294:	9302      	str	r3, [sp, #8]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	9301      	str	r3, [sp, #4]
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80102a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80102a6:	68f9      	ldr	r1, [r7, #12]
 80102a8:	f7fc f8f0 	bl	800c48c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80102ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80102b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80102b4:	4619      	mov	r1, r3
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	47a0      	blx	r4
 80102ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fc fbfc 	bl	800cabc <_ZN18StringEqualFailureD1Ev>
 80102c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7f9 feac 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80102ce:	e000      	b.n	80102d2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80102d0:	bf00      	nop
}
 80102d2:	378c      	adds	r7, #140	; 0x8c
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd90      	pop	{r4, r7, pc}

080102d8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80102d8:	b590      	push	{r4, r7, lr}
 80102da:	b0ab      	sub	sp, #172	; 0xac
 80102dc:	af04      	add	r7, sp, #16
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	607a      	str	r2, [r7, #4]
 80102e4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f000 feae 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 80102ec:	4603      	mov	r3, r0
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	3228      	adds	r2, #40	; 0x28
 80102f2:	6812      	ldr	r2, [r2, #0]
 80102f4:	4618      	mov	r0, r3
 80102f6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d102      	bne.n	8010304 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d07c      	beq.n	80103fe <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d002      	beq.n	8010310 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d128      	bne.n	8010362 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	3398      	adds	r3, #152	; 0x98
 8010316:	681c      	ldr	r4, [r3, #0]
 8010318:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801031c:	6839      	ldr	r1, [r7, #0]
 801031e:	4618      	mov	r0, r3
 8010320:	f7f9 fac9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010324:	f107 0010 	add.w	r0, r7, #16
 8010328:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801032c:	9302      	str	r3, [sp, #8]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	9301      	str	r3, [sp, #4]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801033a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801033e:	68f9      	ldr	r1, [r7, #12]
 8010340:	f7fc f948 	bl	800c5d4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010344:	f107 0310 	add.w	r3, r7, #16
 8010348:	4619      	mov	r1, r3
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	47a0      	blx	r4
 801034e:	f107 0310 	add.w	r3, r7, #16
 8010352:	4618      	mov	r0, r3
 8010354:	f7fc fb90 	bl	800ca78 <_ZN24StringEqualNoCaseFailureD1Ev>
 8010358:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801035c:	4618      	mov	r0, r3
 801035e:	f7f9 fe62 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8010362:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010366:	68b9      	ldr	r1, [r7, #8]
 8010368:	4618      	mov	r0, r3
 801036a:	f7f9 faa4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801036e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010372:	6879      	ldr	r1, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	f7f9 fa9e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801037a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801037e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010382:	4611      	mov	r1, r2
 8010384:	4618      	mov	r0, r3
 8010386:	f7f9 fe75 	bl	800a074 <_ZNK12SimpleString12equalsNoCaseERKS_>
 801038a:	4603      	mov	r3, r0
 801038c:	f083 0301 	eor.w	r3, r3, #1
 8010390:	b2dc      	uxtb	r4, r3
 8010392:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010396:	4618      	mov	r0, r3
 8010398:	f7f9 fe45 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801039c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7f9 fe40 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80103a6:	2c00      	cmp	r4, #0
 80103a8:	d02a      	beq.n	8010400 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	3398      	adds	r3, #152	; 0x98
 80103b0:	681c      	ldr	r4, [r3, #0]
 80103b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80103b6:	6839      	ldr	r1, [r7, #0]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7f9 fa7c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80103be:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80103c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80103c6:	9302      	str	r3, [sp, #8]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	9301      	str	r3, [sp, #4]
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80103d8:	68f9      	ldr	r1, [r7, #12]
 80103da:	f7fc f8fb 	bl	800c5d4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80103de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80103e2:	4619      	mov	r1, r3
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	47a0      	blx	r4
 80103e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fc fb43 	bl	800ca78 <_ZN24StringEqualNoCaseFailureD1Ev>
 80103f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7f9 fe15 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80103fc:	e000      	b.n	8010400 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80103fe:	bf00      	nop
}
 8010400:	379c      	adds	r7, #156	; 0x9c
 8010402:	46bd      	mov	sp, r7
 8010404:	bd90      	pop	{r4, r7, pc}

08010406 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010406:	b590      	push	{r4, r7, lr}
 8010408:	b0b3      	sub	sp, #204	; 0xcc
 801040a:	af04      	add	r7, sp, #16
 801040c:	60f8      	str	r0, [r7, #12]
 801040e:	60b9      	str	r1, [r7, #8]
 8010410:	607a      	str	r2, [r7, #4]
 8010412:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	f000 fe17 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 801041a:	4603      	mov	r3, r0
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	3228      	adds	r2, #40	; 0x28
 8010420:	6812      	ldr	r2, [r2, #0]
 8010422:	4618      	mov	r0, r3
 8010424:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d103      	bne.n	8010434 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 80ad 	beq.w	801058e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d140      	bne.n	80104c2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3398      	adds	r3, #152	; 0x98
 8010446:	681c      	ldr	r4, [r3, #0]
 8010448:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801044c:	68b9      	ldr	r1, [r7, #8]
 801044e:	4618      	mov	r0, r3
 8010450:	f7f9 fa31 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010454:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010458:	6879      	ldr	r1, [r7, #4]
 801045a:	4618      	mov	r0, r3
 801045c:	f7f9 fa2b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	4618      	mov	r0, r3
 8010468:	f7f9 fa25 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801046c:	f107 0010 	add.w	r0, r7, #16
 8010470:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010474:	9302      	str	r3, [sp, #8]
 8010476:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801047a:	9301      	str	r3, [sp, #4]
 801047c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010480:	9300      	str	r3, [sp, #0]
 8010482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801048a:	68f9      	ldr	r1, [r7, #12]
 801048c:	f7fb fce6 	bl	800be5c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010490:	f107 0310 	add.w	r3, r7, #16
 8010494:	4619      	mov	r1, r3
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	47a0      	blx	r4
 801049a:	f107 0310 	add.w	r3, r7, #16
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fc fbb6 	bl	800cc10 <_ZN15ContainsFailureD1Ev>
 80104a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7f9 fdbc 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80104ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f9 fdb7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80104b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f9 fdb2 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80104c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7f9 f9f4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80104ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80104d2:	68b9      	ldr	r1, [r7, #8]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7f9 f9ee 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80104da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80104de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80104e2:	4611      	mov	r1, r2
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7f9 fa64 	bl	80099b2 <_ZNK12SimpleString8containsERKS_>
 80104ea:	4603      	mov	r3, r0
 80104ec:	f083 0301 	eor.w	r3, r3, #1
 80104f0:	b2dc      	uxtb	r4, r3
 80104f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7f9 fd95 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80104fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010500:	4618      	mov	r0, r3
 8010502:	f7f9 fd90 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010506:	2c00      	cmp	r4, #0
 8010508:	d042      	beq.n	8010590 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	3398      	adds	r3, #152	; 0x98
 8010510:	681c      	ldr	r4, [r3, #0]
 8010512:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010516:	68b9      	ldr	r1, [r7, #8]
 8010518:	4618      	mov	r0, r3
 801051a:	f7f9 f9cc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801051e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010522:	6879      	ldr	r1, [r7, #4]
 8010524:	4618      	mov	r0, r3
 8010526:	f7f9 f9c6 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801052a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801052e:	6839      	ldr	r1, [r7, #0]
 8010530:	4618      	mov	r0, r3
 8010532:	f7f9 f9c0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010536:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801053a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801053e:	9302      	str	r3, [sp, #8]
 8010540:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010544:	9301      	str	r3, [sp, #4]
 8010546:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010550:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010554:	68f9      	ldr	r1, [r7, #12]
 8010556:	f7fb fc81 	bl	800be5c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801055a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801055e:	4619      	mov	r1, r3
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	47a0      	blx	r4
 8010564:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010568:	4618      	mov	r0, r3
 801056a:	f7fc fb51 	bl	800cc10 <_ZN15ContainsFailureD1Ev>
 801056e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010572:	4618      	mov	r0, r3
 8010574:	f7f9 fd57 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010578:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801057c:	4618      	mov	r0, r3
 801057e:	f7f9 fd52 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010582:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010586:	4618      	mov	r0, r3
 8010588:	f7f9 fd4d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801058c:	e000      	b.n	8010590 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801058e:	bf00      	nop
}
 8010590:	37bc      	adds	r7, #188	; 0xbc
 8010592:	46bd      	mov	sp, r7
 8010594:	bd90      	pop	{r4, r7, pc}

08010596 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010596:	b590      	push	{r4, r7, lr}
 8010598:	b0b3      	sub	sp, #204	; 0xcc
 801059a:	af04      	add	r7, sp, #16
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	607a      	str	r2, [r7, #4]
 80105a2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f000 fd4f 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 80105aa:	4603      	mov	r3, r0
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	3228      	adds	r2, #40	; 0x28
 80105b0:	6812      	ldr	r2, [r2, #0]
 80105b2:	4618      	mov	r0, r3
 80105b4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d103      	bne.n	80105c4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f000 80ad 	beq.w	801071e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d140      	bne.n	8010652 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3398      	adds	r3, #152	; 0x98
 80105d6:	681c      	ldr	r4, [r3, #0]
 80105d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80105dc:	68b9      	ldr	r1, [r7, #8]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7f9 f969 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80105e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80105e8:	6879      	ldr	r1, [r7, #4]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7f9 f963 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80105f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80105f4:	6839      	ldr	r1, [r7, #0]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7f9 f95d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80105fc:	f107 0010 	add.w	r0, r7, #16
 8010600:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010604:	9302      	str	r3, [sp, #8]
 8010606:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801060a:	9301      	str	r3, [sp, #4]
 801060c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801061a:	68f9      	ldr	r1, [r7, #12]
 801061c:	f7fb fc1e 	bl	800be5c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010620:	f107 0310 	add.w	r3, r7, #16
 8010624:	4619      	mov	r1, r3
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	47a0      	blx	r4
 801062a:	f107 0310 	add.w	r3, r7, #16
 801062e:	4618      	mov	r0, r3
 8010630:	f7fc faee 	bl	800cc10 <_ZN15ContainsFailureD1Ev>
 8010634:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010638:	4618      	mov	r0, r3
 801063a:	f7f9 fcf4 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801063e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010642:	4618      	mov	r0, r3
 8010644:	f7f9 fcef 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010648:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801064c:	4618      	mov	r0, r3
 801064e:	f7f9 fcea 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8010652:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	4618      	mov	r0, r3
 801065a:	f7f9 f92c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801065e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010662:	68b9      	ldr	r1, [r7, #8]
 8010664:	4618      	mov	r0, r3
 8010666:	f7f9 f926 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801066a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801066e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010672:	4611      	mov	r1, r2
 8010674:	4618      	mov	r0, r3
 8010676:	f7f9 f9b7 	bl	80099e8 <_ZNK12SimpleString14containsNoCaseERKS_>
 801067a:	4603      	mov	r3, r0
 801067c:	f083 0301 	eor.w	r3, r3, #1
 8010680:	b2dc      	uxtb	r4, r3
 8010682:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010686:	4618      	mov	r0, r3
 8010688:	f7f9 fccd 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801068c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010690:	4618      	mov	r0, r3
 8010692:	f7f9 fcc8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010696:	2c00      	cmp	r4, #0
 8010698:	d042      	beq.n	8010720 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	3398      	adds	r3, #152	; 0x98
 80106a0:	681c      	ldr	r4, [r3, #0]
 80106a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80106a6:	68b9      	ldr	r1, [r7, #8]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7f9 f904 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80106ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f9 f8fe 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80106ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80106be:	6839      	ldr	r1, [r7, #0]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f9 f8f8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80106c6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80106ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80106ce:	9302      	str	r3, [sp, #8]
 80106d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80106d4:	9301      	str	r3, [sp, #4]
 80106d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80106e0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80106e4:	68f9      	ldr	r1, [r7, #12]
 80106e6:	f7fb fbb9 	bl	800be5c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80106ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80106ee:	4619      	mov	r1, r3
 80106f0:	68f8      	ldr	r0, [r7, #12]
 80106f2:	47a0      	blx	r4
 80106f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fc fa89 	bl	800cc10 <_ZN15ContainsFailureD1Ev>
 80106fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010702:	4618      	mov	r0, r3
 8010704:	f7f9 fc8f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010708:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801070c:	4618      	mov	r0, r3
 801070e:	f7f9 fc8a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010716:	4618      	mov	r0, r3
 8010718:	f7f9 fc85 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801071c:	e000      	b.n	8010720 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801071e:	bf00      	nop
}
 8010720:	37bc      	adds	r7, #188	; 0xbc
 8010722:	46bd      	mov	sp, r7
 8010724:	bd90      	pop	{r4, r7, pc}

08010726 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010726:	b590      	push	{r4, r7, lr}
 8010728:	b099      	sub	sp, #100	; 0x64
 801072a:	af04      	add	r7, sp, #16
 801072c:	60f8      	str	r0, [r7, #12]
 801072e:	60b9      	str	r1, [r7, #8]
 8010730:	607a      	str	r2, [r7, #4]
 8010732:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f000 fc87 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 801073a:	4603      	mov	r3, r0
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	3228      	adds	r2, #40	; 0x28
 8010740:	6812      	ldr	r2, [r2, #0]
 8010742:	4618      	mov	r0, r3
 8010744:	4790      	blx	r2
    if (expected != actual)
 8010746:	68ba      	ldr	r2, [r7, #8]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	429a      	cmp	r2, r3
 801074c:	d027      	beq.n	801079e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	339c      	adds	r3, #156	; 0x9c
 8010754:	681c      	ldr	r4, [r3, #0]
 8010756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801075a:	6839      	ldr	r1, [r7, #0]
 801075c:	4618      	mov	r0, r3
 801075e:	f7f9 f8aa 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010762:	f107 0014 	add.w	r0, r7, #20
 8010766:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801076a:	9302      	str	r3, [sp, #8]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	9301      	str	r3, [sp, #4]
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010776:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010778:	68f9      	ldr	r1, [r7, #12]
 801077a:	f7fb fc1f 	bl	800bfbc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 801077e:	f107 0314 	add.w	r3, r7, #20
 8010782:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010784:	4619      	mov	r1, r3
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	47a0      	blx	r4
 801078a:	f107 0314 	add.w	r3, r7, #20
 801078e:	4618      	mov	r0, r3
 8010790:	f7fc f9fa 	bl	800cb88 <_ZN17LongsEqualFailureD1Ev>
 8010794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010798:	4618      	mov	r0, r3
 801079a:	f7f9 fc44 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801079e:	bf00      	nop
 80107a0:	3754      	adds	r7, #84	; 0x54
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd90      	pop	{r4, r7, pc}

080107a6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80107a6:	b590      	push	{r4, r7, lr}
 80107a8:	b099      	sub	sp, #100	; 0x64
 80107aa:	af04      	add	r7, sp, #16
 80107ac:	60f8      	str	r0, [r7, #12]
 80107ae:	60b9      	str	r1, [r7, #8]
 80107b0:	607a      	str	r2, [r7, #4]
 80107b2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f000 fc47 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 80107ba:	4603      	mov	r3, r0
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	3228      	adds	r2, #40	; 0x28
 80107c0:	6812      	ldr	r2, [r2, #0]
 80107c2:	4618      	mov	r0, r3
 80107c4:	4790      	blx	r2
    if (expected != actual)
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d027      	beq.n	801081e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	339c      	adds	r3, #156	; 0x9c
 80107d4:	681c      	ldr	r4, [r3, #0]
 80107d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80107da:	6839      	ldr	r1, [r7, #0]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7f9 f86a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80107e2:	f107 0014 	add.w	r0, r7, #20
 80107e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80107ea:	9302      	str	r3, [sp, #8]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	9301      	str	r3, [sp, #4]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107f8:	68f9      	ldr	r1, [r7, #12]
 80107fa:	f7fb fcab 	bl	800c154 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80107fe:	f107 0314 	add.w	r3, r7, #20
 8010802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010804:	4619      	mov	r1, r3
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	47a0      	blx	r4
 801080a:	f107 0314 	add.w	r3, r7, #20
 801080e:	4618      	mov	r0, r3
 8010810:	f7fc f998 	bl	800cb44 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8010814:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010818:	4618      	mov	r0, r3
 801081a:	f7f9 fc04 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801081e:	bf00      	nop
 8010820:	3754      	adds	r7, #84	; 0x54
 8010822:	46bd      	mov	sp, r7
 8010824:	bd90      	pop	{r4, r7, pc}
	...

08010828 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010828:	b082      	sub	sp, #8
 801082a:	b590      	push	{r4, r7, lr}
 801082c:	b099      	sub	sp, #100	; 0x64
 801082e:	af02      	add	r7, sp, #8
 8010830:	60f8      	str	r0, [r7, #12]
 8010832:	1d38      	adds	r0, r7, #4
 8010834:	e880 0006 	stmia.w	r0, {r1, r2}
 8010838:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f000 fc04 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010840:	4603      	mov	r3, r0
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	3228      	adds	r2, #40	; 0x28
 8010846:	6812      	ldr	r2, [r2, #0]
 8010848:	4618      	mov	r0, r3
 801084a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	339c      	adds	r3, #156	; 0x9c
 8010852:	681c      	ldr	r4, [r3, #0]
 8010854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010858:	4919      	ldr	r1, [pc, #100]	; (80108c0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 801085a:	4618      	mov	r0, r3
 801085c:	f7f9 f82b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010860:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010864:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010866:	4618      	mov	r0, r3
 8010868:	f7f9 f825 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801086c:	f107 0014 	add.w	r0, r7, #20
 8010870:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801087e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010880:	68f9      	ldr	r1, [r7, #12]
 8010882:	f7fc f84d 	bl	800c920 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8010886:	f107 0314 	add.w	r3, r7, #20
 801088a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801088e:	4619      	mov	r1, r3
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	47a0      	blx	r4
 8010894:	f107 0314 	add.w	r3, r7, #20
 8010898:	4618      	mov	r0, r3
 801089a:	f7fc f887 	bl	800c9ac <_ZN25FeatureUnsupportedFailureD1Ev>
 801089e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7f9 fbbf 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80108a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7f9 fbba 	bl	800a026 <_ZN12SimpleStringD1Ev>
#endif
}
 80108b2:	bf00      	nop
 80108b4:	375c      	adds	r7, #92	; 0x5c
 80108b6:	46bd      	mov	sp, r7
 80108b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80108bc:	b002      	add	sp, #8
 80108be:	4770      	bx	lr
 80108c0:	08021650 	.word	0x08021650

080108c4 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80108c4:	b082      	sub	sp, #8
 80108c6:	b590      	push	{r4, r7, lr}
 80108c8:	b099      	sub	sp, #100	; 0x64
 80108ca:	af02      	add	r7, sp, #8
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	1d38      	adds	r0, r7, #4
 80108d0:	e880 0006 	stmia.w	r0, {r1, r2}
 80108d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f000 fbb6 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 80108dc:	4603      	mov	r3, r0
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	3228      	adds	r2, #40	; 0x28
 80108e2:	6812      	ldr	r2, [r2, #0]
 80108e4:	4618      	mov	r0, r3
 80108e6:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	339c      	adds	r3, #156	; 0x9c
 80108ee:	681c      	ldr	r4, [r3, #0]
 80108f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108f4:	4919      	ldr	r1, [pc, #100]	; (801095c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7f8 ffdd 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80108fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010900:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010902:	4618      	mov	r0, r3
 8010904:	f7f8 ffd7 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010908:	f107 0014 	add.w	r0, r7, #20
 801090c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010910:	9301      	str	r3, [sp, #4]
 8010912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801091a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801091c:	68f9      	ldr	r1, [r7, #12]
 801091e:	f7fb ffff 	bl	800c920 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8010922:	f107 0314 	add.w	r3, r7, #20
 8010926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801092a:	4619      	mov	r1, r3
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	47a0      	blx	r4
 8010930:	f107 0314 	add.w	r3, r7, #20
 8010934:	4618      	mov	r0, r3
 8010936:	f7fc f839 	bl	800c9ac <_ZN25FeatureUnsupportedFailureD1Ev>
 801093a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801093e:	4618      	mov	r0, r3
 8010940:	f7f9 fb71 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010948:	4618      	mov	r0, r3
 801094a:	f7f9 fb6c 	bl	800a026 <_ZN12SimpleStringD1Ev>
#endif
}
 801094e:	bf00      	nop
 8010950:	375c      	adds	r7, #92	; 0x5c
 8010952:	46bd      	mov	sp, r7
 8010954:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010958:	b002      	add	sp, #8
 801095a:	4770      	bx	lr
 801095c:	08021650 	.word	0x08021650

08010960 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010960:	b590      	push	{r4, r7, lr}
 8010962:	b099      	sub	sp, #100	; 0x64
 8010964:	af04      	add	r7, sp, #16
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	607b      	str	r3, [r7, #4]
 801096a:	460b      	mov	r3, r1
 801096c:	72fb      	strb	r3, [r7, #11]
 801096e:	4613      	mov	r3, r2
 8010970:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8010972:	68f8      	ldr	r0, [r7, #12]
 8010974:	f000 fb68 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010978:	4603      	mov	r3, r0
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	3228      	adds	r2, #40	; 0x28
 801097e:	6812      	ldr	r2, [r2, #0]
 8010980:	4618      	mov	r0, r3
 8010982:	4790      	blx	r2
    if (expected != actual)
 8010984:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010988:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801098c:	429a      	cmp	r2, r3
 801098e:	d029      	beq.n	80109e4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	339c      	adds	r3, #156	; 0x9c
 8010996:	681c      	ldr	r4, [r3, #0]
 8010998:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801099c:	6879      	ldr	r1, [r7, #4]
 801099e:	4618      	mov	r0, r3
 80109a0:	f7f8 ff89 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80109a4:	f107 0014 	add.w	r0, r7, #20
 80109a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109ac:	9302      	str	r3, [sp, #8]
 80109ae:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80109b2:	9301      	str	r3, [sp, #4]
 80109b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80109b8:	9300      	str	r3, [sp, #0]
 80109ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109be:	68f9      	ldr	r1, [r7, #12]
 80109c0:	f7fb fc94 	bl	800c2ec <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80109c4:	f107 0314 	add.w	r3, r7, #20
 80109c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109ca:	4619      	mov	r1, r3
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	47a0      	blx	r4
 80109d0:	f107 0314 	add.w	r3, r7, #20
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fc f893 	bl	800cb00 <_ZN23SignedBytesEqualFailureD1Ev>
 80109da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109de:	4618      	mov	r0, r3
 80109e0:	f7f9 fb21 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 80109e4:	bf00      	nop
 80109e6:	3754      	adds	r7, #84	; 0x54
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd90      	pop	{r4, r7, pc}

080109ec <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80109ec:	b590      	push	{r4, r7, lr}
 80109ee:	b09d      	sub	sp, #116	; 0x74
 80109f0:	af04      	add	r7, sp, #16
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f000 fb24 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010a00:	4603      	mov	r3, r0
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	3228      	adds	r2, #40	; 0x28
 8010a06:	6812      	ldr	r2, [r2, #0]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	4790      	blx	r2
    if (expected != actual)
 8010a0c:	68ba      	ldr	r2, [r7, #8]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d03f      	beq.n	8010a94 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	339c      	adds	r3, #156	; 0x9c
 8010a1a:	681c      	ldr	r4, [r3, #0]
 8010a1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a20:	68b9      	ldr	r1, [r7, #8]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f9 fdea 	bl	800a5fc <_Z10StringFromPKv>
 8010a28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7f9 fde4 	bl	800a5fc <_Z10StringFromPKv>
 8010a34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a38:	6839      	ldr	r1, [r7, #0]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7f8 ff3b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010a40:	f107 0014 	add.w	r0, r7, #20
 8010a44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a48:	9302      	str	r3, [sp, #8]
 8010a4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a4e:	9301      	str	r3, [sp, #4]
 8010a50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010a58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010a5a:	68f9      	ldr	r1, [r7, #12]
 8010a5c:	f7fb f814 	bl	800ba88 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010a60:	f107 0314 	add.w	r3, r7, #20
 8010a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010a66:	4619      	mov	r1, r3
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	47a0      	blx	r4
 8010a6c:	f107 0314 	add.w	r3, r7, #20
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7fc f955 	bl	800cd20 <_ZN13EqualsFailureD1Ev>
 8010a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7f9 fad3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010a80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7f9 face 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7f9 fac9 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010a94:	bf00      	nop
 8010a96:	3764      	adds	r7, #100	; 0x64
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd90      	pop	{r4, r7, pc}

08010a9c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010a9c:	b590      	push	{r4, r7, lr}
 8010a9e:	b09d      	sub	sp, #116	; 0x74
 8010aa0:	af04      	add	r7, sp, #16
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	607a      	str	r2, [r7, #4]
 8010aa8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f000 facc 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	3228      	adds	r2, #40	; 0x28
 8010ab6:	6812      	ldr	r2, [r2, #0]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	4790      	blx	r2
    if (expected != actual)
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d03f      	beq.n	8010b44 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	339c      	adds	r3, #156	; 0x9c
 8010aca:	681c      	ldr	r4, [r3, #0]
 8010acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ad0:	68b9      	ldr	r1, [r7, #8]
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7f9 fdbc 	bl	800a650 <_Z10StringFromPFvvE>
 8010ad8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010adc:	6879      	ldr	r1, [r7, #4]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7f9 fdb6 	bl	800a650 <_Z10StringFromPFvvE>
 8010ae4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ae8:	6839      	ldr	r1, [r7, #0]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7f8 fee3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010af0:	f107 0014 	add.w	r0, r7, #20
 8010af4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010af8:	9302      	str	r3, [sp, #8]
 8010afa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010afe:	9301      	str	r3, [sp, #4]
 8010b00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010b0a:	68f9      	ldr	r1, [r7, #12]
 8010b0c:	f7fa ffbc 	bl	800ba88 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010b10:	f107 0314 	add.w	r3, r7, #20
 8010b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010b16:	4619      	mov	r1, r3
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	47a0      	blx	r4
 8010b1c:	f107 0314 	add.w	r3, r7, #20
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fc f8fd 	bl	800cd20 <_ZN13EqualsFailureD1Ev>
 8010b26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7f9 fa7b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7f9 fa76 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7f9 fa71 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010b44:	bf00      	nop
 8010b46:	3764      	adds	r7, #100	; 0x64
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd90      	pop	{r4, r7, pc}

08010b4c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010b4c:	b590      	push	{r4, r7, lr}
 8010b4e:	b09d      	sub	sp, #116	; 0x74
 8010b50:	af02      	add	r7, sp, #8
 8010b52:	6278      	str	r0, [r7, #36]	; 0x24
 8010b54:	ed87 0b06 	vstr	d0, [r7, #24]
 8010b58:	ed87 1b04 	vstr	d1, [r7, #16]
 8010b5c:	ed87 2b02 	vstr	d2, [r7, #8]
 8010b60:	6239      	str	r1, [r7, #32]
 8010b62:	607a      	str	r2, [r7, #4]
 8010b64:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b68:	f000 fa6e 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	3228      	adds	r2, #40	; 0x28
 8010b72:	6812      	ldr	r2, [r2, #0]
 8010b74:	4618      	mov	r0, r3
 8010b76:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8010b78:	ed97 2b02 	vldr	d2, [r7, #8]
 8010b7c:	ed97 1b04 	vldr	d1, [r7, #16]
 8010b80:	ed97 0b06 	vldr	d0, [r7, #24]
 8010b84:	f7fe fd4a 	bl	800f61c <_Z13doubles_equalddd>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	f083 0301 	eor.w	r3, r3, #1
 8010b8e:	b2db      	uxtb	r3, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d029      	beq.n	8010be8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	339c      	adds	r3, #156	; 0x9c
 8010b9a:	681c      	ldr	r4, [r3, #0]
 8010b9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010ba0:	6a39      	ldr	r1, [r7, #32]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7f8 fe87 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010ba8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8010bac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010bb0:	9300      	str	r3, [sp, #0]
 8010bb2:	ed97 2b02 	vldr	d2, [r7, #8]
 8010bb6:	ed97 1b04 	vldr	d1, [r7, #16]
 8010bba:	ed97 0b06 	vldr	d0, [r7, #24]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bc4:	f7fa ffa2 	bl	800bb0c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8010bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010bce:	4619      	mov	r1, r3
 8010bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bd2:	47a0      	blx	r4
 8010bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fc f87f 	bl	800ccdc <_ZN19DoublesEqualFailureD1Ev>
 8010bde:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7f9 fa1f 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010be8:	bf00      	nop
 8010bea:	376c      	adds	r7, #108	; 0x6c
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd90      	pop	{r4, r7, pc}

08010bf0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b0a7      	sub	sp, #156	; 0x9c
 8010bf4:	af04      	add	r7, sp, #16
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f000 fa22 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010c04:	4603      	mov	r3, r0
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	3228      	adds	r2, #40	; 0x28
 8010c0a:	6812      	ldr	r2, [r2, #0]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	4790      	blx	r2
	if (length == 0) return;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d075      	beq.n	8010d02 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d102      	bne.n	8010c22 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d071      	beq.n	8010d06 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d12d      	bne.n	8010c8a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	339c      	adds	r3, #156	; 0x9c
 8010c34:	681c      	ldr	r4, [r3, #0]
 8010c36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c3a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7f8 fe39 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010c44:	f107 0010 	add.w	r0, r7, #16
 8010c48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c4c:	9303      	str	r3, [sp, #12]
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	9302      	str	r3, [sp, #8]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	9301      	str	r3, [sp, #4]
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	9300      	str	r3, [sp, #0]
 8010c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010c5e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010c62:	68f9      	ldr	r1, [r7, #12]
 8010c64:	f7fb fd70 	bl	800c748 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8010c68:	f107 0310 	add.w	r3, r7, #16
 8010c6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010c70:	4619      	mov	r1, r3
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	47a0      	blx	r4
 8010c76:	f107 0310 	add.w	r3, r7, #16
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fb feda 	bl	800ca34 <_ZN18BinaryEqualFailureD1Ev>
 8010c80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7f9 f9ce 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8010c8a:	683a      	ldr	r2, [r7, #0]
 8010c8c:	6879      	ldr	r1, [r7, #4]
 8010c8e:	68b8      	ldr	r0, [r7, #8]
 8010c90:	f7f8 fd30 	bl	80096f4 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	bf14      	ite	ne
 8010c9a:	2301      	movne	r3, #1
 8010c9c:	2300      	moveq	r3, #0
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d031      	beq.n	8010d08 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	339c      	adds	r3, #156	; 0x9c
 8010caa:	681c      	ldr	r4, [r3, #0]
 8010cac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cb0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7f8 fdfe 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010cba:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010cbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cc2:	9303      	str	r3, [sp, #12]
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	9302      	str	r3, [sp, #8]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	9301      	str	r3, [sp, #4]
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010cd4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010cd8:	68f9      	ldr	r1, [r7, #12]
 8010cda:	f7fb fd35 	bl	800c748 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8010cde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010ce2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	47a0      	blx	r4
 8010cec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fb fe9f 	bl	800ca34 <_ZN18BinaryEqualFailureD1Ev>
 8010cf6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f9 f993 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010d00:	e002      	b.n	8010d08 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8010d02:	bf00      	nop
 8010d04:	e000      	b.n	8010d08 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010d06:	bf00      	nop
}
 8010d08:	378c      	adds	r7, #140	; 0x8c
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd90      	pop	{r4, r7, pc}

08010d0e <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010d0e:	b590      	push	{r4, r7, lr}
 8010d10:	b09b      	sub	sp, #108	; 0x6c
 8010d12:	af06      	add	r7, sp, #24
 8010d14:	60f8      	str	r0, [r7, #12]
 8010d16:	60b9      	str	r1, [r7, #8]
 8010d18:	607a      	str	r2, [r7, #4]
 8010d1a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f000 f993 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010d22:	4603      	mov	r3, r0
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	3228      	adds	r2, #40	; 0x28
 8010d28:	6812      	ldr	r2, [r2, #0]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	405a      	eors	r2, r3
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	4013      	ands	r3, r2
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d02b      	beq.n	8010d94 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	339c      	adds	r3, #156	; 0x9c
 8010d42:	681c      	ldr	r4, [r3, #0]
 8010d44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7f8 fdb3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010d50:	f107 0014 	add.w	r0, r7, #20
 8010d54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d58:	9304      	str	r3, [sp, #16]
 8010d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d5c:	9303      	str	r3, [sp, #12]
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	9302      	str	r3, [sp, #8]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	9301      	str	r3, [sp, #4]
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d6e:	68f9      	ldr	r1, [r7, #12]
 8010d70:	f7fb fd7a 	bl	800c868 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8010d74:	f107 0314 	add.w	r3, r7, #20
 8010d78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	47a0      	blx	r4
 8010d80:	f107 0314 	add.w	r3, r7, #20
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fb fe33 	bl	800c9f0 <_ZN16BitsEqualFailureD1Ev>
 8010d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7f9 f949 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010d94:	bf00      	nop
 8010d96:	3754      	adds	r7, #84	; 0x54
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd90      	pop	{r4, r7, pc}

08010d9c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8010d9c:	b590      	push	{r4, r7, lr}
 8010d9e:	b09d      	sub	sp, #116	; 0x74
 8010da0:	af04      	add	r7, sp, #16
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	607a      	str	r2, [r7, #4]
 8010da6:	603b      	str	r3, [r7, #0]
 8010da8:	460b      	mov	r3, r1
 8010daa:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f000 f94b 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010db2:	4603      	mov	r3, r0
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	3228      	adds	r2, #40	; 0x28
 8010db8:	6812      	ldr	r2, [r2, #0]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	4790      	blx	r2
    if (failed)
 8010dbe:	7afb      	ldrb	r3, [r7, #11]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d03f      	beq.n	8010e44 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	339c      	adds	r3, #156	; 0x9c
 8010dca:	681c      	ldr	r4, [r3, #0]
 8010dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dd0:	6879      	ldr	r1, [r7, #4]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7f8 fd6f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ddc:	6839      	ldr	r1, [r7, #0]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7f8 fd69 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010de4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010de8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7f8 fd63 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010df0:	f107 0014 	add.w	r0, r7, #20
 8010df4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010df8:	9302      	str	r3, [sp, #8]
 8010dfa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010dfe:	9301      	str	r3, [sp, #4]
 8010e00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010e0a:	68f9      	ldr	r1, [r7, #12]
 8010e0c:	f7fa ff30 	bl	800bc70 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010e10:	f107 0314 	add.w	r3, r7, #20
 8010e14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010e16:	4619      	mov	r1, r3
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	47a0      	blx	r4
 8010e1c:	f107 0314 	add.w	r3, r7, #20
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fb ff39 	bl	800cc98 <_ZN17CheckEqualFailureD1Ev>
 8010e26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7f9 f8fb 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010e30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7f9 f8f6 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7f9 f8f1 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010e44:	bf00      	nop
 8010e46:	3764      	adds	r7, #100	; 0x64
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd90      	pop	{r4, r7, pc}

08010e4c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8010e4c:	b590      	push	{r4, r7, lr}
 8010e4e:	b09d      	sub	sp, #116	; 0x74
 8010e50:	af04      	add	r7, sp, #16
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	607a      	str	r2, [r7, #4]
 8010e56:	603b      	str	r3, [r7, #0]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f000 f8f3 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010e62:	4603      	mov	r3, r0
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	3228      	adds	r2, #40	; 0x28
 8010e68:	6812      	ldr	r2, [r2, #0]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	4790      	blx	r2
    if (!comparison)
 8010e6e:	7afb      	ldrb	r3, [r7, #11]
 8010e70:	f083 0301 	eor.w	r3, r3, #1
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d03f      	beq.n	8010efa <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	339c      	adds	r3, #156	; 0x9c
 8010e80:	681c      	ldr	r4, [r3, #0]
 8010e82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e86:	6879      	ldr	r1, [r7, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7f8 fd14 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f8 fd0e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010e9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7f8 fd08 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8010ea6:	f107 0014 	add.w	r0, r7, #20
 8010eaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010eae:	9302      	str	r3, [sp, #8]
 8010eb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ebe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010ec0:	68f9      	ldr	r1, [r7, #12]
 8010ec2:	f7fa ff83 	bl	800bdcc <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010ec6:	f107 0314 	add.w	r3, r7, #20
 8010eca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010ecc:	4619      	mov	r1, r3
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	47a0      	blx	r4
 8010ed2:	f107 0314 	add.w	r3, r7, #20
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fb febc 	bl	800cc54 <_ZN17ComparisonFailureD1Ev>
 8010edc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7f9 f8a0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010ee6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7f9 f89b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8010ef0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f9 f896 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010efa:	bf00      	nop
 8010efc:	3764      	adds	r7, #100	; 0x64
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd90      	pop	{r4, r7, pc}
	...

08010f04 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8010f04:	b5b0      	push	{r4, r5, r7, lr}
 8010f06:	b088      	sub	sp, #32
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
 8010f10:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8010f12:	f107 0310 	add.w	r3, r7, #16
 8010f16:	4924      	ldr	r1, [pc, #144]	; (8010fa8 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7f8 fccc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8010f1e:	f107 0310 	add.w	r3, r7, #16
 8010f22:	6879      	ldr	r1, [r7, #4]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7f9 f90d 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8010f2a:	f107 0310 	add.w	r3, r7, #16
 8010f2e:	491f      	ldr	r1, [pc, #124]	; (8010fac <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7f9 f907 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8010f36:	f107 0318 	add.w	r3, r7, #24
 8010f3a:	6839      	ldr	r1, [r7, #0]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7f9 fda1 	bl	800aa84 <_Z10StringFromj>
 8010f42:	f107 0218 	add.w	r2, r7, #24
 8010f46:	f107 0310 	add.w	r3, r7, #16
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f9 f8e7 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8010f52:	f107 0318 	add.w	r3, r7, #24
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7f9 f865 	bl	800a026 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8010f5c:	f107 0310 	add.w	r3, r7, #16
 8010f60:	4913      	ldr	r1, [pc, #76]	; (8010fb0 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7f9 f8ee 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8010f68:	f107 0310 	add.w	r3, r7, #16
 8010f6c:	68b9      	ldr	r1, [r7, #8]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7f9 f8e8 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f000 f867 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	6823      	ldr	r3, [r4, #0]
 8010f7e:	3338      	adds	r3, #56	; 0x38
 8010f80:	681d      	ldr	r5, [r3, #0]
 8010f82:	f107 0310 	add.w	r3, r7, #16
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7f9 f820 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	4619      	mov	r1, r3
 8010f90:	4620      	mov	r0, r4
 8010f92:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8010f94:	f107 0310 	add.w	r3, r7, #16
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7f9 f844 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8010f9e:	bf00      	nop
 8010fa0:	3720      	adds	r7, #32
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	08021668 	.word	0x08021668
 8010fac:	0802166c 	.word	0x0802166c
 8010fb0:	08021670 	.word	0x08021670

08010fb4 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8010fb4:	b590      	push	{r4, r7, lr}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
 8010fc0:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	3370      	adds	r3, #112	; 0x70
 8010fc8:	681c      	ldr	r4, [r3, #0]
 8010fca:	68b8      	ldr	r0, [r7, #8]
 8010fcc:	f7f8 fffe 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8010fd0:	4601      	mov	r1, r0
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	68f8      	ldr	r0, [r7, #12]
 8010fd8:	47a0      	blx	r4
}
 8010fda:	bf00      	nop
 8010fdc:	3714      	adds	r7, #20
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd90      	pop	{r4, r7, pc}

08010fe2 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b082      	sub	sp, #8
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	6078      	str	r0, [r7, #4]
 8010fea:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 f82b 	bl	8011048 <_ZN10UtestShell13getTestResultEv>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	323c      	adds	r2, #60	; 0x3c
 8010ff8:	6812      	ldr	r2, [r2, #0]
 8010ffa:	6839      	ldr	r1, [r7, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	4790      	blx	r2
}
 8011000:	bf00      	nop
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8011008:	b480      	push	{r7}
 801100a:	b083      	sub	sp, #12
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8011012:	4a04      	ldr	r2, [pc, #16]	; (8011024 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	6013      	str	r3, [r2, #0]
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr
 8011024:	20000868 	.word	0x20000868

08011028 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8011032:	4a04      	ldr	r2, [pc, #16]	; (8011044 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	6013      	str	r3, [r2, #0]
}
 8011038:	bf00      	nop
 801103a:	370c      	adds	r7, #12
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr
 8011044:	2000086c 	.word	0x2000086c

08011048 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8011050:	4b09      	ldr	r3, [pc, #36]	; (8011078 <_ZN10UtestShell13getTestResultEv+0x30>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d109      	bne.n	801106c <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8011058:	f7fe fbb2 	bl	800f7c0 <_ZN22OutsideTestRunnerUTest8instanceEv>
 801105c:	4603      	mov	r3, r0
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	32a4      	adds	r2, #164	; 0xa4
 8011062:	6812      	ldr	r2, [r2, #0]
 8011064:	4618      	mov	r0, r3
 8011066:	4790      	blx	r2
 8011068:	4603      	mov	r3, r0
 801106a:	e001      	b.n	8011070 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 801106c:	4b02      	ldr	r3, [pc, #8]	; (8011078 <_ZN10UtestShell13getTestResultEv+0x30>)
 801106e:	681b      	ldr	r3, [r3, #0]
}
 8011070:	4618      	mov	r0, r3
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	20000868 	.word	0x20000868

0801107c <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 801107c:	b580      	push	{r7, lr}
 801107e:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8011080:	4b05      	ldr	r3, [pc, #20]	; (8011098 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d103      	bne.n	8011090 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8011088:	f7fe fb9a 	bl	800f7c0 <_ZN22OutsideTestRunnerUTest8instanceEv>
 801108c:	4603      	mov	r3, r0
 801108e:	e001      	b.n	8011094 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8011090:	4b01      	ldr	r3, [pc, #4]	; (8011098 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011092:	681b      	ldr	r3, [r3, #0]
}
 8011094:	4618      	mov	r0, r3
 8011096:	bd80      	pop	{r7, pc}
 8011098:	2000086c 	.word	0x2000086c

0801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 801109c:	b480      	push	{r7}
 801109e:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80110a0:	4b03      	ldr	r3, [pc, #12]	; (80110b0 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80110a2:	681b      	ldr	r3, [r3, #0]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	20000090 	.word	0x20000090

080110b4 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80110b4:	b480      	push	{r7}
 80110b6:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80110b8:	4b03      	ldr	r3, [pc, #12]	; (80110c8 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80110ba:	4a04      	ldr	r2, [pc, #16]	; (80110cc <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80110bc:	601a      	str	r2, [r3, #0]
}
 80110be:	bf00      	nop
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr
 80110c8:	20000090 	.word	0x20000090
 80110cc:	2000008c 	.word	0x2000008c

080110d0 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	4a04      	ldr	r2, [pc, #16]	; (80110ec <_ZN5UtestC1Ev+0x1c>)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	601a      	str	r2, [r3, #0]
{
}
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	4618      	mov	r0, r3
 80110e2:	370c      	adds	r7, #12
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr
 80110ec:	080241b8 	.word	0x080241b8

080110f0 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80110f0:	b480      	push	{r7}
 80110f2:	b083      	sub	sp, #12
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	4a04      	ldr	r2, [pc, #16]	; (801110c <_ZN5UtestD1Ev+0x1c>)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	601a      	str	r2, [r3, #0]
{
}
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4618      	mov	r0, r3
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr
 801110c:	080241b8 	.word	0x080241b8

08011110 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
}
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f7ff ffe9 	bl	80110f0 <_ZN5UtestD1Ev>
 801111e:	2104      	movs	r1, #4
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7f6 f819 	bl	8007158 <_ZdlPvj>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4618      	mov	r0, r3
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8011138:	4b0d      	ldr	r3, [pc, #52]	; (8011170 <_ZN5Utest3runEv+0x40>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	6879      	ldr	r1, [r7, #4]
 801113e:	480d      	ldr	r0, [pc, #52]	; (8011174 <_ZN5Utest3runEv+0x44>)
 8011140:	4798      	blx	r3
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	bf14      	ite	ne
 8011148:	2301      	movne	r3, #1
 801114a:	2300      	moveq	r3, #0
 801114c:	b2db      	uxtb	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	d004      	beq.n	801115c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8011152:	4b07      	ldr	r3, [pc, #28]	; (8011170 <_ZN5Utest3runEv+0x40>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	6879      	ldr	r1, [r7, #4]
 8011158:	4807      	ldr	r0, [pc, #28]	; (8011178 <_ZN5Utest3runEv+0x48>)
 801115a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 801115c:	4b04      	ldr	r3, [pc, #16]	; (8011170 <_ZN5Utest3runEv+0x40>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	6879      	ldr	r1, [r7, #4]
 8011162:	4806      	ldr	r0, [pc, #24]	; (801117c <_ZN5Utest3runEv+0x4c>)
 8011164:	4798      	blx	r3
}
 8011166:	bf00      	nop
 8011168:	3708      	adds	r7, #8
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	200000a0 	.word	0x200000a0
 8011174:	0800f81d 	.word	0x0800f81d
 8011178:	0800f839 	.word	0x0800f839
 801117c:	0800f855 	.word	0x0800f855

08011180 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
}
 8011188:	bf00      	nop
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
}
 80111b0:	bf00      	nop
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	4a04      	ldr	r2, [pc, #16]	; (80111d8 <_ZN14TestTerminatorD1Ev+0x1c>)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	601a      	str	r2, [r3, #0]
{
}
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	370c      	adds	r7, #12
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr
 80111d8:	080241a4 	.word	0x080241a4

080111dc <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80111e4:	2300      	movs	r3, #0
 80111e6:	60fb      	str	r3, [r7, #12]
 80111e8:	f107 030c 	add.w	r3, r7, #12
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7f6 f975 	bl	80074dc <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80111f2:	f107 030c 	add.w	r3, r7, #12
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 f82c 	bl	8011254 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80111fc:	f107 030c 	add.w	r3, r7, #12
 8011200:	4618      	mov	r0, r3
 8011202:	f000 f835 	bl	8011270 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8011206:	bf00      	nop
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
	...

08011210 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	4a05      	ldr	r2, [pc, #20]	; (8011230 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff ffcb 	bl	80111bc <_ZN14TestTerminatorD1Ev>
{
}
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	08024190 	.word	0x08024190

08011234 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
}
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7ff ffe7 	bl	8011210 <_ZN20NormalTestTerminatorD1Ev>
 8011242:	2104      	movs	r1, #4
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7f5 ff87 	bl	8007158 <_ZdlPvj>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4618      	mov	r0, r3
 801124e:	3708      	adds	r7, #8
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 801125c:	4b03      	ldr	r3, [pc, #12]	; (801126c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011262:	bf00      	nop
 8011264:	3708      	adds	r7, #8
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	2000009c 	.word	0x2000009c

08011270 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	4a05      	ldr	r2, [pc, #20]	; (8011290 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff ff9b 	bl	80111bc <_ZN14TestTerminatorD1Ev>
{
}
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	0802417c 	.word	0x0802417c

08011294 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
}
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffe7 	bl	8011270 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80112a2:	2104      	movs	r1, #4
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7f5 ff57 	bl	8007158 <_ZdlPvj>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80112bc:	f7fe fbaa 	bl	800fa14 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7ff ff8a 	bl	80111dc <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80112c8:	bf00      	nop
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	4a05      	ldr	r2, [pc, #20]	; (80112f0 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff ff95 	bl	8011210 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4618      	mov	r0, r3
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	08024168 	.word	0x08024168

080112f4 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
}
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f7ff ffe7 	bl	80112d0 <_ZN22CrashingTestTerminatorD1Ev>
 8011302:	2104      	movs	r1, #4
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7f5 ff27 	bl	8007158 <_ZdlPvj>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d007      	beq.n	8011340 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3310      	adds	r3, #16
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	6838      	ldr	r0, [r7, #0]
 801133a:	4798      	blx	r3
 801133c:	4603      	mov	r3, r0
 801133e:	e000      	b.n	8011342 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8011340:	2300      	movs	r3, #0
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d02d      	beq.n	80113aa <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8011356:	4293      	cmp	r3, r2
 8011358:	d201      	bcs.n	801135e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	e001      	b.n	8011362 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 801135e:	f04f 33ff 	mov.w	r3, #4294967295
 8011362:	f240 3237 	movw	r2, #823	; 0x337
 8011366:	4914      	ldr	r1, [pc, #80]	; (80113b8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8011368:	4618      	mov	r0, r3
 801136a:	f7f5 ff05 	bl	8007178 <_ZnajPKci>
 801136e:	4602      	mov	r2, r0
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011378:	2300      	movs	r3, #0
 801137a:	60bb      	str	r3, [r7, #8]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	429a      	cmp	r2, r3
 8011384:	d212      	bcs.n	80113ac <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	4413      	add	r3, r2
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	330c      	adds	r3, #12
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	4798      	blx	r3
 80113a0:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	3301      	adds	r3, #1
 80113a6:	60bb      	str	r3, [r7, #8]
 80113a8:	e7e8      	b.n	801137c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80113aa:	bf00      	nop
    }
}
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	080214f8 	.word	0x080214f8

080113bc <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d004      	beq.n	80113d6 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7f5 fee5 	bl	80071a0 <_ZdaPv>
}
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b087      	sub	sp, #28
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4413      	add	r3, r2
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	4413      	add	r3, r2
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681a      	ldr	r2, [r3, #0]
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	4413      	add	r3, r2
 8011412:	697a      	ldr	r2, [r7, #20]
 8011414:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	4413      	add	r3, r2
 8011420:	693a      	ldr	r2, [r7, #16]
 8011422:	601a      	str	r2, [r3, #0]
}
 8011424:	bf00      	nop
 8011426:	371c      	adds	r7, #28
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d028      	beq.n	8011494 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8011442:	4b17      	ldr	r3, [pc, #92]	; (80114a0 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6838      	ldr	r0, [r7, #0]
 8011448:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	3b01      	subs	r3, #1
 8011450:	60fb      	str	r3, [r7, #12]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d019      	beq.n	801148c <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d01b      	beq.n	8011498 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8011460:	4b10      	ldr	r3, [pc, #64]	; (80114a4 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4798      	blx	r3
 8011466:	4603      	mov	r3, r0
 8011468:	461a      	mov	r2, r3
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	3301      	adds	r3, #1
 801146e:	fbb2 f1f3 	udiv	r1, r2, r3
 8011472:	fb03 f301 	mul.w	r3, r3, r1
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 801147a:	68ba      	ldr	r2, [r7, #8]
 801147c:	68f9      	ldr	r1, [r7, #12]
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7ff ffae 	bl	80113e0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	3b01      	subs	r3, #1
 8011488:	60fb      	str	r3, [r7, #12]
 801148a:	e7e2      	b.n	8011452 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f000 f834 	bl	80114fa <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011492:	e002      	b.n	801149a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8011494:	bf00      	nop
 8011496:	e000      	b.n	801149a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8011498:	bf00      	nop
}
 801149a:	3710      	adds	r7, #16
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	200000dc 	.word	0x200000dc
 80114a4:	200000e0 	.word	0x200000e0

080114a8 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b086      	sub	sp, #24
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d01c      	beq.n	80114f2 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	085b      	lsrs	r3, r3, #1
 80114be:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80114c0:	2300      	movs	r3, #0
 80114c2:	617b      	str	r3, [r7, #20]
 80114c4:	697a      	ldr	r2, [r7, #20]
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d20e      	bcs.n	80114ea <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685a      	ldr	r2, [r3, #4]
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	3b01      	subs	r3, #1
 80114d6:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	6979      	ldr	r1, [r7, #20]
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ff ff7f 	bl	80113e0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	3301      	adds	r3, #1
 80114e6:	617b      	str	r3, [r7, #20]
 80114e8:	e7ec      	b.n	80114c4 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f000 f805 	bl	80114fa <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80114f0:	e000      	b.n	80114f4 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80114f2:	bf00      	nop
}
 80114f4:	3718      	adds	r7, #24
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8011502:	2300      	movs	r3, #0
 8011504:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011506:	2300      	movs	r3, #0
 8011508:	60bb      	str	r3, [r7, #8]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	429a      	cmp	r2, r3
 8011512:	d221      	bcs.n	8011558 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6859      	ldr	r1, [r3, #4]
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	1acb      	subs	r3, r1, r3
 8011520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011524:	3b01      	subs	r3, #1
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	4413      	add	r3, r2
 801152a:	6818      	ldr	r0, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6859      	ldr	r1, [r3, #4]
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	1acb      	subs	r3, r1, r3
 8011538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801153c:	3b01      	subs	r3, #1
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	4413      	add	r3, r2
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3308      	adds	r3, #8
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	68f9      	ldr	r1, [r7, #12]
 801154c:	4798      	blx	r3
 801154e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	3301      	adds	r3, #1
 8011554:	60bb      	str	r3, [r7, #8]
 8011556:	e7d8      	b.n	801150a <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8011558:	bf00      	nop
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
    return get(0);
 8011568:	2100      	movs	r1, #0
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f000 f805 	bl	801157a <_ZNK22UtestShellPointerArray3getEj>
 8011570:	4603      	mov	r3, r0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}

0801157a <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 801157a:	b480      	push	{r7}
 801157c:	b083      	sub	sp, #12
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	683a      	ldr	r2, [r7, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d301      	bcc.n	8011592 <_ZNK22UtestShellPointerArray3getEj+0x18>
 801158e:	2300      	movs	r3, #0
 8011590:	e005      	b.n	801159e <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	4413      	add	r3, r2
 801159c:	681b      	ldr	r3, [r3, #0]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	370c      	adds	r7, #12
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
	...

080115ac <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b084      	sub	sp, #16
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	603b      	str	r3, [r7, #0]
 80115ba:	4a10      	ldr	r2, [pc, #64]	; (80115fc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80115c0:	6879      	ldr	r1, [r7, #4]
 80115c2:	68b8      	ldr	r0, [r7, #8]
 80115c4:	f7fe fc27 	bl	800fe16 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	68b8      	ldr	r0, [r7, #8]
 80115cc:	f7fe fc31 	bl	800fe32 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80115d0:	69b9      	ldr	r1, [r7, #24]
 80115d2:	68b8      	ldr	r0, [r7, #8]
 80115d4:	f7fe fc03 	bl	800fdde <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80115d8:	69f9      	ldr	r1, [r7, #28]
 80115da:	68b8      	ldr	r0, [r7, #8]
 80115dc:	f7fe fc0d 	bl	800fdfa <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80115e0:	f7fd fc20 	bl	800ee24 <_ZN12TestRegistry18getCurrentRegistryEv>
 80115e4:	4603      	mov	r3, r0
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	3208      	adds	r2, #8
 80115ea:	6812      	ldr	r2, [r2, #0]
 80115ec:	68b9      	ldr	r1, [r7, #8]
 80115ee:	4618      	mov	r0, r3
 80115f0:	4790      	blx	r2
}
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	4618      	mov	r0, r3
 80115f6:	3710      	adds	r7, #16
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	080240ac 	.word	0x080240ac

08011600 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	4a04      	ldr	r2, [pc, #16]	; (801161c <_ZN13TestInstallerD1Ev+0x1c>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	601a      	str	r2, [r3, #0]
{
}
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr
 801161c:	080240ac 	.word	0x080240ac

08011620 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
}
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7ff ffe9 	bl	8011600 <_ZN13TestInstallerD1Ev>
 801162e:	2104      	movs	r1, #4
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f7f5 fd91 	bl	8007158 <_ZdlPvj>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d10a      	bne.n	8011666 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011656:	4293      	cmp	r3, r2
 8011658:	d105      	bne.n	8011666 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801165a:	4805      	ldr	r0, [pc, #20]	; (8011670 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801165c:	f7ff fe38 	bl	80112d0 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8011660:	4804      	ldr	r0, [pc, #16]	; (8011674 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8011662:	f7ff fdd5 	bl	8011210 <_ZN20NormalTestTerminatorD1Ev>
}
 8011666:	bf00      	nop
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	2000008c 	.word	0x2000008c
 8011674:	20000088 	.word	0x20000088

08011678 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8011678:	b580      	push	{r7, lr}
 801167a:	af00      	add	r7, sp, #0
 801167c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011680:	2001      	movs	r0, #1
 8011682:	f7ff ffdd 	bl	8011640 <_Z41__static_initialization_and_destruction_0ii>
 8011686:	bd80      	pop	{r7, pc}

08011688 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8011688:	b580      	push	{r7, lr}
 801168a:	af00      	add	r7, sp, #0
 801168c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011690:	2000      	movs	r0, #0
 8011692:	f7ff ffd5 	bl	8011640 <_Z41__static_initialization_and_destruction_0ii>
 8011696:	bd80      	pop	{r7, pc}

08011698 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8011698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	ed87 0b00 	vstr	d0, [r7]
 80116a2:	683c      	ldr	r4, [r7, #0]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80116aa:	2301      	movs	r3, #1
 80116ac:	461e      	mov	r6, r3
 80116ae:	f04f 32ff 	mov.w	r2, #4294967295
 80116b2:	4b10      	ldr	r3, [pc, #64]	; (80116f4 <_ZSt5isinfd+0x5c>)
 80116b4:	4620      	mov	r0, r4
 80116b6:	4629      	mov	r1, r5
 80116b8:	f7ef f866 	bl	8000788 <__aeabi_dcmpun>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10b      	bne.n	80116da <_ZSt5isinfd+0x42>
 80116c2:	f04f 32ff 	mov.w	r2, #4294967295
 80116c6:	4b0b      	ldr	r3, [pc, #44]	; (80116f4 <_ZSt5isinfd+0x5c>)
 80116c8:	4620      	mov	r0, r4
 80116ca:	4629      	mov	r1, r5
 80116cc:	f7ef f83e 	bl	800074c <__aeabi_dcmple>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d101      	bne.n	80116da <_ZSt5isinfd+0x42>
 80116d6:	2300      	movs	r3, #0
 80116d8:	461e      	mov	r6, r3
 80116da:	b2f3      	uxtb	r3, r6
 80116dc:	f083 0301 	eor.w	r3, r3, #1
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	bf14      	ite	ne
 80116e6:	2301      	movne	r3, #1
 80116e8:	2300      	moveq	r3, #0
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	4618      	mov	r0, r3
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116f4:	7fefffff 	.word	0x7fefffff

080116f8 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	ed87 0b00 	vstr	d0, [r7]
 8011702:	2301      	movs	r3, #1
 8011704:	461c      	mov	r4, r3
 8011706:	e9d7 2300 	ldrd	r2, r3, [r7]
 801170a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801170e:	f7ef f83b 	bl	8000788 <__aeabi_dcmpun>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d101      	bne.n	801171c <_ZSt5isnand+0x24>
 8011718:	2300      	movs	r3, #0
 801171a:	461c      	mov	r4, r3
 801171c:	b2e3      	uxtb	r3, r4
 801171e:	2b00      	cmp	r3, #0
 8011720:	bf14      	ite	ne
 8011722:	2301      	movne	r3, #1
 8011724:	2300      	moveq	r3, #0
 8011726:	b2db      	uxtb	r3, r3
 8011728:	4618      	mov	r0, r3
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	bd90      	pop	{r4, r7, pc}

08011730 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8011730:	b590      	push	{r4, r7, lr}
 8011732:	b095      	sub	sp, #84	; 0x54
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	3334      	adds	r3, #52	; 0x34
 8011742:	681c      	ldr	r4, [r3, #0]
 8011744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011748:	490f      	ldr	r1, [pc, #60]	; (8011788 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 801174a:	4618      	mov	r0, r3
 801174c:	f7f8 f8b3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011754:	f107 0314 	add.w	r3, r7, #20
 8011758:	68f9      	ldr	r1, [r7, #12]
 801175a:	4618      	mov	r0, r3
 801175c:	f7f9 ff0a 	bl	800b574 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8011760:	f107 0314 	add.w	r3, r7, #20
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	47a0      	blx	r4
 801176a:	f107 0314 	add.w	r3, r7, #20
 801176e:	4618      	mov	r0, r3
 8011770:	f7f9 ffc0 	bl	800b6f4 <_ZN11TestFailureD1Ev>
 8011774:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011778:	4618      	mov	r0, r3
 801177a:	f7f8 fc54 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801177e:	bf00      	nop
 8011780:	3754      	adds	r7, #84	; 0x54
 8011782:	46bd      	mov	sp, r7
 8011784:	bd90      	pop	{r4, r7, pc}
 8011786:	bf00      	nop
 8011788:	08021680 	.word	0x08021680

0801178c <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 801178c:	b480      	push	{r7}
 801178e:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8011790:	2301      	movs	r3, #1
}
 8011792:	4618      	mov	r0, r3
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr

0801179c <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 80117a6:	4b13      	ldr	r3, [pc, #76]	; (80117f4 <PlatformSpecificSetJmpImplementation+0x58>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	225c      	movs	r2, #92	; 0x5c
 80117ac:	fb02 f303 	mul.w	r3, r2, r3
 80117b0:	4a11      	ldr	r2, [pc, #68]	; (80117f8 <PlatformSpecificSetJmpImplementation+0x5c>)
 80117b2:	4413      	add	r3, r2
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7ee fd33 	bl	8000220 <setjmp>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	bf0c      	ite	eq
 80117c0:	2301      	moveq	r3, #1
 80117c2:	2300      	movne	r3, #0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00e      	beq.n	80117e8 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80117ca:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <PlatformSpecificSetJmpImplementation+0x58>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	3301      	adds	r3, #1
 80117d0:	4a08      	ldr	r2, [pc, #32]	; (80117f4 <PlatformSpecificSetJmpImplementation+0x58>)
 80117d2:	6013      	str	r3, [r2, #0]
        function(data);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6838      	ldr	r0, [r7, #0]
 80117d8:	4798      	blx	r3
        jmp_buf_index--;
 80117da:	4b06      	ldr	r3, [pc, #24]	; (80117f4 <PlatformSpecificSetJmpImplementation+0x58>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	3b01      	subs	r3, #1
 80117e0:	4a04      	ldr	r2, [pc, #16]	; (80117f4 <PlatformSpecificSetJmpImplementation+0x58>)
 80117e2:	6013      	str	r3, [r2, #0]
        return 1;
 80117e4:	2301      	movs	r3, #1
 80117e6:	e000      	b.n	80117ea <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80117e8:	2300      	movs	r3, #0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	20000c08 	.word	0x20000c08
 80117f8:	20000870 	.word	0x20000870

080117fc <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8011800:	4b07      	ldr	r3, [pc, #28]	; (8011820 <PlatformSpecificLongJmpImplementation+0x24>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3b01      	subs	r3, #1
 8011806:	4a06      	ldr	r2, [pc, #24]	; (8011820 <PlatformSpecificLongJmpImplementation+0x24>)
 8011808:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 801180a:	4b05      	ldr	r3, [pc, #20]	; (8011820 <PlatformSpecificLongJmpImplementation+0x24>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	225c      	movs	r2, #92	; 0x5c
 8011810:	fb02 f303 	mul.w	r3, r2, r3
 8011814:	4a03      	ldr	r2, [pc, #12]	; (8011824 <PlatformSpecificLongJmpImplementation+0x28>)
 8011816:	4413      	add	r3, r2
 8011818:	2101      	movs	r1, #1
 801181a:	4618      	mov	r0, r3
 801181c:	f7ee fd06 	bl	800022c <longjmp>
 8011820:	20000c08 	.word	0x20000c08
 8011824:	20000870 	.word	0x20000870

08011828 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8011828:	b480      	push	{r7}
 801182a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 801182c:	2300      	movs	r3, #0
#endif
}
 801182e:	4618      	mov	r0, r3
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 801183e:	2000      	movs	r0, #0
 8011840:	f00c fd10 	bl	801e264 <time>
 8011844:	4602      	mov	r2, r0
 8011846:	460b      	mov	r3, r1
 8011848:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 801184c:	463b      	mov	r3, r7
 801184e:	4618      	mov	r0, r3
 8011850:	f00b fb76 	bl	801cf40 <localtime>
 8011854:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	4a04      	ldr	r2, [pc, #16]	; (801186c <TimeStringImplementation+0x34>)
 801185a:	2150      	movs	r1, #80	; 0x50
 801185c:	4804      	ldr	r0, [pc, #16]	; (8011870 <TimeStringImplementation+0x38>)
 801185e:	f00c fc57 	bl	801e110 <strftime>
    return dateTime;
 8011862:	4b03      	ldr	r3, [pc, #12]	; (8011870 <TimeStringImplementation+0x38>)
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	080216bc 	.word	0x080216bc
 8011870:	20000c0c 	.word	0x20000c0c

08011874 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f00b f993 	bl	801cbac <fopen>
 8011886:	4603      	mov	r3, r0
#endif
}
 8011888:	4618      	mov	r0, r3
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 801189a:	6839      	ldr	r1, [r7, #0]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f00b f9f3 	bl	801cc88 <fputs>
}
 80118a2:	bf00      	nop
 80118a4:	3708      	adds	r7, #8
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b082      	sub	sp, #8
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f00a ff74 	bl	801c7a0 <fclose>
}
 80118b8:	bf00      	nop
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	af00      	add	r7, sp, #0
  fflush(stdout);
 80118c4:	4b03      	ldr	r3, [pc, #12]	; (80118d4 <PlatformSpecificFlushImplementation+0x14>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	689b      	ldr	r3, [r3, #8]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f00b f832 	bl	801c934 <fflush>
}
 80118d0:	bf00      	nop
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	20000104 	.word	0x20000104

080118d8 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
 80118de:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80118e2:	ed97 0b00 	vldr	d0, [r7]
 80118e6:	f7ff ff07 	bl	80116f8 <_ZSt5isnand>
 80118ea:	4603      	mov	r3, r0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80118fe:	ed97 0b00 	vldr	d0, [r7]
 8011902:	f7ff fec9 	bl	8011698 <_ZSt5isinfd>
 8011906:	4603      	mov	r3, r0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8011910:	b480      	push	{r7}
 8011912:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8011914:	2300      	movs	r3, #0
#endif

}
 8011916:	4618      	mov	r0, r3
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
}
 8011928:	bf00      	nop
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8011934:	b480      	push	{r7}
 8011936:	b083      	sub	sp, #12
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
}
 801193c:	bf00      	nop
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
}
 8011950:	bf00      	nop
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr

0801195c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8011968:	4a25      	ldr	r2, [pc, #148]	; (8011a00 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	605a      	str	r2, [r3, #4]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	609a      	str	r2, [r3, #8]
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	731a      	strb	r2, [r3, #12]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2200      	movs	r2, #0
 8011984:	735a      	strb	r2, [r3, #13]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	739a      	strb	r2, [r3, #14]
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2200      	movs	r2, #0
 8011990:	73da      	strb	r2, [r3, #15]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2200      	movs	r2, #0
 8011996:	741a      	strb	r2, [r3, #16]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2200      	movs	r2, #0
 801199c:	745a      	strb	r2, [r3, #17]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2200      	movs	r2, #0
 80119a2:	749a      	strb	r2, [r3, #18]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2200      	movs	r2, #0
 80119a8:	74da      	strb	r2, [r3, #19]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2200      	movs	r2, #0
 80119ae:	751a      	strb	r2, [r3, #20]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2200      	movs	r2, #0
 80119b4:	755a      	strb	r2, [r3, #21]
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2200      	movs	r2, #0
 80119ba:	759a      	strb	r2, [r3, #22]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2200      	movs	r2, #0
 80119c0:	75da      	strb	r2, [r3, #23]
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2200      	movs	r2, #0
 80119c6:	761a      	strb	r2, [r3, #24]
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2201      	movs	r2, #1
 80119cc:	61da      	str	r2, [r3, #28]
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2200      	movs	r2, #0
 80119d2:	621a      	str	r2, [r3, #32]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2200      	movs	r2, #0
 80119d8:	625a      	str	r2, [r3, #36]	; 0x24
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2200      	movs	r2, #0
 80119de:	629a      	str	r2, [r3, #40]	; 0x28
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	3330      	adds	r3, #48	; 0x30
 80119ec:	4905      	ldr	r1, [pc, #20]	; (8011a04 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7f7 ff61 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
{
}
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	4618      	mov	r0, r3
 80119f8:	3710      	adds	r7, #16
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	080241d8 	.word	0x080241d8
 8011a04:	080216d0 	.word	0x080216d0

08011a08 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7f8 fb07 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
	...

08011a24 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8011a24:	b590      	push	{r4, r7, lr}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	4a20      	ldr	r2, [pc, #128]	; (8011ab0 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d015      	beq.n	8011a66 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a3e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a44:	4618      	mov	r0, r3
 8011a46:	f00a fda4 	bl	801c592 <_ZNK10TestFilter7getNextEv>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8011a50:	68fc      	ldr	r4, [r7, #12]
 8011a52:	2c00      	cmp	r4, #0
 8011a54:	d0ed      	beq.n	8011a32 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7ff ffd6 	bl	8011a08 <_ZN10TestFilterD1Ev>
 8011a5c:	2110      	movs	r1, #16
 8011a5e:	4620      	mov	r0, r4
 8011a60:	f7f5 fb7a 	bl	8007158 <_ZdlPvj>
    while(groupFilters_) {
 8011a64:	e7e5      	b.n	8011a32 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d015      	beq.n	8011a9a <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a72:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f00a fd8a 	bl	801c592 <_ZNK10TestFilter7getNextEv>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8011a84:	68bc      	ldr	r4, [r7, #8]
 8011a86:	2c00      	cmp	r4, #0
 8011a88:	d0ed      	beq.n	8011a66 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f7ff ffbc 	bl	8011a08 <_ZN10TestFilterD1Ev>
 8011a90:	2110      	movs	r1, #16
 8011a92:	4620      	mov	r0, r4
 8011a94:	f7f5 fb60 	bl	8007158 <_ZdlPvj>
    while(nameFilters_) {
 8011a98:	e7e5      	b.n	8011a66 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	3330      	adds	r3, #48	; 0x30
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7f8 fac1 	bl	800a026 <_ZN12SimpleStringD1Ev>
    }
}
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3714      	adds	r7, #20
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd90      	pop	{r4, r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	080241d8 	.word	0x080241d8

08011ab4 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
}
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7ff ffb1 	bl	8011a24 <_ZN20CommandLineArgumentsD1Ev>
 8011ac2:	2138      	movs	r1, #56	; 0x38
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f7f5 fb47 	bl	8007158 <_ZdlPvj>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	4618      	mov	r0, r3
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8011ad4:	b5b0      	push	{r4, r5, r7, lr}
 8011ad6:	b0be      	sub	sp, #248	; 0xf8
 8011ad8:	af02      	add	r7, sp, #8
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
 8011ade:	2400      	movs	r4, #0
    bool correctParameters = true;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	613b      	str	r3, [r7, #16]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	685a      	ldr	r2, [r3, #4]
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	f340 83a4 	ble.w	801223e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	689a      	ldr	r2, [r3, #8]
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	009b      	lsls	r3, r3, #2
 8011afe:	4413      	add	r3, r2
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	f107 0308 	add.w	r3, r7, #8
 8011b06:	4611      	mov	r1, r2
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7f7 fed4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8011b0e:	f107 0314 	add.w	r3, r7, #20
 8011b12:	49c8      	ldr	r1, [pc, #800]	; (8011e34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7f7 fece 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011b1a:	f107 0214 	add.w	r2, r7, #20
 8011b1e:	f107 0308 	add.w	r3, r7, #8
 8011b22:	4611      	mov	r1, r2
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f8 fa8a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	461d      	mov	r5, r3
 8011b2e:	f107 0314 	add.w	r3, r7, #20
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7f8 fa77 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011b38:	2d00      	cmp	r5, #0
 8011b3a:	d006      	beq.n	8011b4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8011b42:	2300      	movs	r3, #0
 8011b44:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8011b48:	e366      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8011b4a:	f107 031c 	add.w	r3, r7, #28
 8011b4e:	49ba      	ldr	r1, [pc, #744]	; (8011e38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7f7 feb0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011b56:	f107 021c 	add.w	r2, r7, #28
 8011b5a:	f107 0308 	add.w	r3, r7, #8
 8011b5e:	4611      	mov	r1, r2
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7f8 fa6c 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011b66:	4603      	mov	r3, r0
 8011b68:	461d      	mov	r5, r3
 8011b6a:	f107 031c 	add.w	r3, r7, #28
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7f8 fa59 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011b74:	2d00      	cmp	r5, #0
 8011b76:	d003      	beq.n	8011b80 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	735a      	strb	r2, [r3, #13]
 8011b7e:	e34b      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8011b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b84:	49ad      	ldr	r1, [pc, #692]	; (8011e3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7f7 fe95 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011b8c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011b90:	f107 0308 	add.w	r3, r7, #8
 8011b94:	4611      	mov	r1, r2
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f8 fa51 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	461d      	mov	r5, r3
 8011ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f7f8 fa3e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011baa:	2d00      	cmp	r5, #0
 8011bac:	d003      	beq.n	8011bb6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	739a      	strb	r2, [r3, #14]
 8011bb4:	e330      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8011bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bba:	49a1      	ldr	r1, [pc, #644]	; (8011e40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7f7 fe7a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011bc2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011bc6:	f107 0308 	add.w	r3, r7, #8
 8011bca:	4611      	mov	r1, r2
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7f8 fa36 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	461d      	mov	r5, r3
 8011bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7f8 fa23 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011be0:	2d00      	cmp	r5, #0
 8011be2:	d003      	beq.n	8011bec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2201      	movs	r2, #1
 8011be8:	73da      	strb	r2, [r3, #15]
 8011bea:	e315      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8011bec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011bf0:	4994      	ldr	r1, [pc, #592]	; (8011e44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7f7 fe5f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011bf8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011bfc:	f107 0308 	add.w	r3, r7, #8
 8011c00:	4611      	mov	r1, r2
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f8 fa1b 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	461d      	mov	r5, r3
 8011c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7f8 fa08 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011c16:	2d00      	cmp	r5, #0
 8011c18:	d003      	beq.n	8011c22 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	741a      	strb	r2, [r3, #16]
 8011c20:	e2fa      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8011c22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011c26:	4988      	ldr	r1, [pc, #544]	; (8011e48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7f7 fe44 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011c2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011c32:	f107 0308 	add.w	r3, r7, #8
 8011c36:	4611      	mov	r1, r2
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7f8 fa00 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	461d      	mov	r5, r3
 8011c42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7f8 f9ed 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011c4c:	2d00      	cmp	r5, #0
 8011c4e:	d003      	beq.n	8011c58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2201      	movs	r2, #1
 8011c54:	755a      	strb	r2, [r3, #21]
 8011c56:	e2df      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8011c58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011c5c:	497b      	ldr	r1, [pc, #492]	; (8011e4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7f7 fe29 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011c64:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011c68:	f107 0308 	add.w	r3, r7, #8
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7f8 f9e5 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011c74:	4603      	mov	r3, r0
 8011c76:	461d      	mov	r5, r3
 8011c78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7f8 f9d2 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011c82:	2d00      	cmp	r5, #0
 8011c84:	d003      	beq.n	8011c8e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	745a      	strb	r2, [r3, #17]
 8011c8c:	e2c4      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8011c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011c92:	496f      	ldr	r1, [pc, #444]	; (8011e50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7f7 fe0e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011c9a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011c9e:	f107 0308 	add.w	r3, r7, #8
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7f8 f9ca 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011caa:	4603      	mov	r3, r0
 8011cac:	461d      	mov	r5, r3
 8011cae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7f8 f9b7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011cb8:	2d00      	cmp	r5, #0
 8011cba:	d003      	beq.n	8011cc4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	749a      	strb	r2, [r3, #18]
 8011cc2:	e2a9      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8011cc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011cc8:	4962      	ldr	r1, [pc, #392]	; (8011e54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7f7 fdf3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011cd0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011cd4:	f107 0308 	add.w	r3, r7, #8
 8011cd8:	4611      	mov	r1, r2
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7f8 f9af 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	461d      	mov	r5, r3
 8011ce4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f8 f99c 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011cee:	2d00      	cmp	r5, #0
 8011cf0:	d003      	beq.n	8011cfa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	74da      	strb	r2, [r3, #19]
 8011cf8:	e28e      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8011cfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011cfe:	4956      	ldr	r1, [pc, #344]	; (8011e58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7f7 fdd8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011d06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011d0a:	f107 0308 	add.w	r3, r7, #8
 8011d0e:	4611      	mov	r1, r2
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7f8 f994 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011d16:	4603      	mov	r3, r0
 8011d18:	461d      	mov	r5, r3
 8011d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f8 f981 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011d24:	2d00      	cmp	r5, #0
 8011d26:	d003      	beq.n	8011d30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	751a      	strb	r2, [r3, #20]
 8011d2e:	e273      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8011d30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011d34:	4949      	ldr	r1, [pc, #292]	; (8011e5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7f7 fdbd 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011d3c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011d40:	f107 0308 	add.w	r3, r7, #8
 8011d44:	4611      	mov	r1, r2
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7f8 f979 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	461d      	mov	r5, r3
 8011d50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7f8 f966 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011d5a:	2d00      	cmp	r5, #0
 8011d5c:	d003      	beq.n	8011d66 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2201      	movs	r2, #1
 8011d62:	759a      	strb	r2, [r3, #22]
 8011d64:	e258      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8011d66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011d6a:	493d      	ldr	r1, [pc, #244]	; (8011e60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f7 fda2 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011d72:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011d76:	f107 0308 	add.w	r3, r7, #8
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f7 fe5e 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011d82:	4603      	mov	r3, r0
 8011d84:	461d      	mov	r5, r3
 8011d86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7f8 f94b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011d90:	2d00      	cmp	r5, #0
 8011d92:	d009      	beq.n	8011da8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6859      	ldr	r1, [r3, #4]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	689a      	ldr	r2, [r3, #8]
 8011d9c:	f107 0310 	add.w	r3, r7, #16
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 fb33 	bl	801240c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8011da6:	e237      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8011da8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011dac:	492d      	ldr	r1, [pc, #180]	; (8011e64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7f7 fd81 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011db4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011db8:	f107 0308 	add.w	r3, r7, #8
 8011dbc:	4611      	mov	r1, r2
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7f7 fe3d 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	461d      	mov	r5, r3
 8011dc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7f8 f92a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011dd2:	2d00      	cmp	r5, #0
 8011dd4:	d009      	beq.n	8011dea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6859      	ldr	r1, [r3, #4]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	689a      	ldr	r2, [r3, #8]
 8011dde:	f107 0310 	add.w	r3, r7, #16
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fc40 	bl	8012668 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8011de8:	e216      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8011dea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011dee:	491e      	ldr	r1, [pc, #120]	; (8011e68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7f7 fd60 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011df6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8011dfa:	f107 0308 	add.w	r3, r7, #8
 8011dfe:	4611      	mov	r1, r2
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f7 fe1c 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011e06:	4603      	mov	r3, r0
 8011e08:	461d      	mov	r5, r3
 8011e0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7f8 f909 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011e14:	2d00      	cmp	r5, #0
 8011e16:	d029      	beq.n	8011e6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6859      	ldr	r1, [r3, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	689a      	ldr	r2, [r3, #8]
 8011e20:	f107 0310 	add.w	r3, r7, #16
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 fc61 	bl	80126ec <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8011e30:	e1f2      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8011e32:	bf00      	nop
 8011e34:	080216d4 	.word	0x080216d4
 8011e38:	080216d8 	.word	0x080216d8
 8011e3c:	080216dc 	.word	0x080216dc
 8011e40:	080216e0 	.word	0x080216e0
 8011e44:	080216e4 	.word	0x080216e4
 8011e48:	080216e8 	.word	0x080216e8
 8011e4c:	080216ec 	.word	0x080216ec
 8011e50:	080216f0 	.word	0x080216f0
 8011e54:	080216f4 	.word	0x080216f4
 8011e58:	080216f8 	.word	0x080216f8
 8011e5c:	080216fc 	.word	0x080216fc
 8011e60:	08021700 	.word	0x08021700
 8011e64:	08021704 	.word	0x08021704
 8011e68:	08021708 	.word	0x08021708
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8011e6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011e70:	49b9      	ldr	r1, [pc, #740]	; (8012158 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7f7 fd1f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011e78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8011e7c:	f107 0308 	add.w	r3, r7, #8
 8011e80:	4611      	mov	r1, r2
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7f7 fddb 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	461d      	mov	r5, r3
 8011e8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7f8 f8c8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011e96:	2d00      	cmp	r5, #0
 8011e98:	d009      	beq.n	8011eae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6859      	ldr	r1, [r3, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	689a      	ldr	r2, [r3, #8]
 8011ea2:	f107 0310 	add.w	r3, r7, #16
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 fccc 	bl	8012844 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8011eac:	e1b4      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8011eae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011eb2:	49aa      	ldr	r1, [pc, #680]	; (801215c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7f7 fcfe 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011eba:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8011ebe:	f107 0308 	add.w	r3, r7, #8
 8011ec2:	4611      	mov	r1, r2
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7f7 fdba 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	461d      	mov	r5, r3
 8011ece:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7f8 f8a7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011ed8:	2d00      	cmp	r5, #0
 8011eda:	d009      	beq.n	8011ef0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6859      	ldr	r1, [r3, #4]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	689a      	ldr	r2, [r3, #8]
 8011ee4:	f107 0310 	add.w	r3, r7, #16
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f000 fcf1 	bl	80128d0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8011eee:	e193      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8011ef0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011ef4:	499a      	ldr	r1, [pc, #616]	; (8012160 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7f7 fcdd 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011efc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8011f00:	f107 0308 	add.w	r3, r7, #8
 8011f04:	4611      	mov	r1, r2
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7f7 fd99 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	461d      	mov	r5, r3
 8011f10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7f8 f886 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011f1a:	2d00      	cmp	r5, #0
 8011f1c:	d009      	beq.n	8011f32 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6859      	ldr	r1, [r3, #4]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	689a      	ldr	r2, [r3, #8]
 8011f26:	f107 0310 	add.w	r3, r7, #16
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 fd16 	bl	801295c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8011f30:	e172      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8011f32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011f36:	498b      	ldr	r1, [pc, #556]	; (8012164 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f7 fcbc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011f3e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8011f42:	f107 0308 	add.w	r3, r7, #8
 8011f46:	4611      	mov	r1, r2
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7f7 fd78 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	461d      	mov	r5, r3
 8011f52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7f8 f865 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011f5c:	2d00      	cmp	r5, #0
 8011f5e:	d009      	beq.n	8011f74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6859      	ldr	r1, [r3, #4]
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	689a      	ldr	r2, [r3, #8]
 8011f68:	f107 0310 	add.w	r3, r7, #16
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 fd3d 	bl	80129ec <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8011f72:	e151      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8011f74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011f78:	497b      	ldr	r1, [pc, #492]	; (8012168 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7f7 fc9b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011f80:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8011f84:	f107 0308 	add.w	r3, r7, #8
 8011f88:	4611      	mov	r1, r2
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7f7 fd57 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011f90:	4603      	mov	r3, r0
 8011f92:	461d      	mov	r5, r3
 8011f94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7f8 f844 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011f9e:	2d00      	cmp	r5, #0
 8011fa0:	d009      	beq.n	8011fb6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6859      	ldr	r1, [r3, #4]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	689a      	ldr	r2, [r3, #8]
 8011faa:	f107 0310 	add.w	r3, r7, #16
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 fd5e 	bl	8012a70 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8011fb4:	e130      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8011fb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011fba:	496c      	ldr	r1, [pc, #432]	; (801216c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7f7 fc7a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8011fc2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8011fc6:	f107 0308 	add.w	r3, r7, #8
 8011fca:	4611      	mov	r1, r2
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7f7 fd36 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	461d      	mov	r5, r3
 8011fd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f7f8 f823 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8011fe0:	2d00      	cmp	r5, #0
 8011fe2:	d009      	beq.n	8011ff8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6859      	ldr	r1, [r3, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	689a      	ldr	r2, [r3, #8]
 8011fec:	f107 0310 	add.w	r3, r7, #16
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 fd83 	bl	8012afc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8011ff6:	e10f      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8011ff8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011ffc:	495c      	ldr	r1, [pc, #368]	; (8012170 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7f7 fc59 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012004:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8012008:	f107 0308 	add.w	r3, r7, #8
 801200c:	4611      	mov	r1, r2
 801200e:	4618      	mov	r0, r3
 8012010:	f7f7 fd15 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8012014:	4603      	mov	r3, r0
 8012016:	461d      	mov	r5, r3
 8012018:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801201c:	4618      	mov	r0, r3
 801201e:	f7f8 f802 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012022:	2d00      	cmp	r5, #0
 8012024:	d009      	beq.n	801203a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6859      	ldr	r1, [r3, #4]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	689a      	ldr	r2, [r3, #8]
 801202e:	f107 0310 	add.w	r3, r7, #16
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 fda8 	bl	8012b88 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8012038:	e0ee      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801203a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801203e:	494d      	ldr	r1, [pc, #308]	; (8012174 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8012040:	4618      	mov	r0, r3
 8012042:	f7f7 fc38 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012046:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801204a:	f107 0308 	add.w	r3, r7, #8
 801204e:	4611      	mov	r1, r2
 8012050:	4618      	mov	r0, r3
 8012052:	f7f7 fcf4 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 8012056:	4603      	mov	r3, r0
 8012058:	461d      	mov	r5, r3
 801205a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801205e:	4618      	mov	r0, r3
 8012060:	f7f7 ffe1 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012064:	2d00      	cmp	r5, #0
 8012066:	d00c      	beq.n	8012082 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6859      	ldr	r1, [r3, #4]
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	689a      	ldr	r2, [r3, #8]
 8012070:	f107 0310 	add.w	r3, r7, #16
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f000 fa29 	bl	80124cc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 801207a:	4603      	mov	r3, r0
 801207c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012080:	e0ca      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8012082:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012086:	493c      	ldr	r1, [pc, #240]	; (8012178 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8012088:	4618      	mov	r0, r3
 801208a:	f7f7 fc14 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801208e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8012092:	f107 0308 	add.w	r3, r7, #8
 8012096:	4611      	mov	r1, r2
 8012098:	4618      	mov	r0, r3
 801209a:	f7f7 fcd0 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 801209e:	4603      	mov	r3, r0
 80120a0:	461d      	mov	r5, r3
 80120a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7f7 ffbd 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80120ac:	2d00      	cmp	r5, #0
 80120ae:	d00b      	beq.n	80120c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6859      	ldr	r1, [r3, #4]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	689a      	ldr	r2, [r3, #8]
 80120b8:	f107 0310 	add.w	r3, r7, #16
 80120bc:	482e      	ldr	r0, [pc, #184]	; (8012178 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80120be:	9000      	str	r0, [sp, #0]
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 fda9 	bl	8012c18 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80120c6:	e0a7      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 80120c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80120cc:	492b      	ldr	r1, [pc, #172]	; (801217c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7f7 fbf1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80120d4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80120d8:	f107 0308 	add.w	r3, r7, #8
 80120dc:	4611      	mov	r1, r2
 80120de:	4618      	mov	r0, r3
 80120e0:	f7f7 fcad 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 80120e4:	4603      	mov	r3, r0
 80120e6:	461d      	mov	r5, r3
 80120e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f7 ff9a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80120f2:	2d00      	cmp	r5, #0
 80120f4:	d00b      	beq.n	801210e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6859      	ldr	r1, [r3, #4]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	689a      	ldr	r2, [r3, #8]
 80120fe:	f107 0310 	add.w	r3, r7, #16
 8012102:	481e      	ldr	r0, [pc, #120]	; (801217c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012104:	9000      	str	r0, [sp, #0]
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f000 fd86 	bl	8012c18 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801210c:	e084      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 801210e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012112:	491b      	ldr	r1, [pc, #108]	; (8012180 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8012114:	4618      	mov	r0, r3
 8012116:	f7f7 fbce 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801211a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801211e:	f107 0308 	add.w	r3, r7, #8
 8012122:	4611      	mov	r1, r2
 8012124:	4618      	mov	r0, r3
 8012126:	f7f7 fc8a 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 801212a:	4603      	mov	r3, r0
 801212c:	461d      	mov	r5, r3
 801212e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012132:	4618      	mov	r0, r3
 8012134:	f7f7 ff77 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012138:	2d00      	cmp	r5, #0
 801213a:	d023      	beq.n	8012184 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6859      	ldr	r1, [r3, #4]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	689a      	ldr	r2, [r3, #8]
 8012144:	f107 0310 	add.w	r3, r7, #16
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f000 fe3b 	bl	8012dc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 801214e:	4603      	mov	r3, r0
 8012150:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012154:	e060      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8012156:	bf00      	nop
 8012158:	0802170c 	.word	0x0802170c
 801215c:	08021710 	.word	0x08021710
 8012160:	08021714 	.word	0x08021714
 8012164:	0802171c 	.word	0x0802171c
 8012168:	08021720 	.word	0x08021720
 801216c:	08021724 	.word	0x08021724
 8012170:	08021728 	.word	0x08021728
 8012174:	08021730 	.word	0x08021730
 8012178:	08021734 	.word	0x08021734
 801217c:	0802173c 	.word	0x0802173c
 8012180:	0802174c 	.word	0x0802174c
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8012184:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012188:	4930      	ldr	r1, [pc, #192]	; (801224c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 801218a:	4618      	mov	r0, r3
 801218c:	f7f7 fb93 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012190:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8012194:	f107 0308 	add.w	r3, r7, #8
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f7f7 fc4f 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 80121a0:	4603      	mov	r3, r0
 80121a2:	461d      	mov	r5, r3
 80121a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7f7 ff3c 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	d00e      	beq.n	80121d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	331c      	adds	r3, #28
 80121b8:	681d      	ldr	r5, [r3, #0]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6859      	ldr	r1, [r3, #4]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	689a      	ldr	r2, [r3, #8]
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	6838      	ldr	r0, [r7, #0]
 80121c6:	47a8      	blx	r5
 80121c8:	4603      	mov	r3, r0
 80121ca:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80121ce:	e023      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80121d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80121d4:	491e      	ldr	r1, [pc, #120]	; (8012250 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7f7 fb6d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80121dc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80121e0:	f107 0308 	add.w	r3, r7, #8
 80121e4:	4611      	mov	r1, r2
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7f7 fc29 	bl	8009a3e <_ZNK12SimpleString10startsWithERKS_>
 80121ec:	4603      	mov	r3, r0
 80121ee:	461d      	mov	r5, r3
 80121f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f7 ff16 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80121fa:	2d00      	cmp	r5, #0
 80121fc:	d009      	beq.n	8012212 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6859      	ldr	r1, [r3, #4]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	689a      	ldr	r2, [r3, #8]
 8012206:	f107 0310 	add.w	r3, r7, #16
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 fd98 	bl	8012d40 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8012210:	e002      	b.n	8012218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8012212:	2300      	movs	r3, #0
 8012214:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8012218:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8012220:	2400      	movs	r4, #0
 8012222:	2500      	movs	r5, #0
 8012224:	e000      	b.n	8012228 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8012226:	2501      	movs	r5, #1
 8012228:	f107 0308 	add.w	r3, r7, #8
 801222c:	4618      	mov	r0, r3
 801222e:	f7f7 fefa 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012232:	2d01      	cmp	r5, #1
 8012234:	d104      	bne.n	8012240 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	3301      	adds	r3, #1
 801223a:	613b      	str	r3, [r7, #16]
 801223c:	e455      	b.n	8011aea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 801223e:	2401      	movs	r4, #1
 8012240:	4623      	mov	r3, r4
}
 8012242:	4618      	mov	r0, r3
 8012244:	37f0      	adds	r7, #240	; 0xf0
 8012246:	46bd      	mov	sp, r7
 8012248:	bdb0      	pop	{r4, r5, r7, pc}
 801224a:	bf00      	nop
 801224c:	080216e4 	.word	0x080216e4
 8012250:	08021750 	.word	0x08021750

08012254 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 801225c:	4b03      	ldr	r3, [pc, #12]	; (801226c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 801225e:	4618      	mov	r0, r3
 8012260:	370c      	adds	r7, #12
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop
 801226c:	08021754 	.word	0x08021754

08012270 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8012278:	4b03      	ldr	r3, [pc, #12]	; (8012288 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801227a:	4618      	mov	r0, r3
 801227c:	370c      	adds	r7, #12
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	08021884 	.word	0x08021884

0801228c <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 801228c:	b480      	push	{r7}
 801228e:	b083      	sub	sp, #12
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	7b1b      	ldrb	r3, [r3, #12]
}
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
    return verbose_;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	7b5b      	ldrb	r3, [r3, #13]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr

080122bc <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	7b9b      	ldrb	r3, [r3, #14]
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	370c      	adds	r7, #12
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr

080122d4 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
    return color_;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	7bdb      	ldrb	r3, [r3, #15]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	370c      	adds	r7, #12
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr

080122ec <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	7c5b      	ldrb	r3, [r3, #17]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	370c      	adds	r7, #12
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr

08012304 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	7c9b      	ldrb	r3, [r3, #18]
}
 8012310:	4618      	mov	r0, r3
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr

0801231c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	7cdb      	ldrb	r3, [r3, #19]
}
 8012328:	4618      	mov	r0, r3
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8012334:	b480      	push	{r7}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	7d1b      	ldrb	r3, [r3, #20]
}
 8012340:	4618      	mov	r0, r3
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	7c1b      	ldrb	r3, [r3, #16]
}
 8012358:	4618      	mov	r0, r3
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
    return repeat_;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	69db      	ldr	r3, [r3, #28]
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
    return reversing_;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	7d5b      	ldrb	r3, [r3, #21]
}
 8012388:	4618      	mov	r0, r3
 801238a:	370c      	adds	r7, #12
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8012394:	b480      	push	{r7}
 8012396:	b083      	sub	sp, #12
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	7d9b      	ldrb	r3, [r3, #22]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr

080123ac <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80123ac:	b480      	push	{r7}
 80123ae:	b083      	sub	sp, #12
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	7ddb      	ldrb	r3, [r3, #23]
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	370c      	adds	r7, #12
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr

080123c4 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80123c4:	b480      	push	{r7}
 80123c6:	b083      	sub	sp, #12
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6a1b      	ldr	r3, [r3, #32]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	370c      	adds	r7, #12
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr

080123dc <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012400:	4618      	mov	r0, r3
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b086      	sub	sp, #24
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
 8012418:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2200      	movs	r2, #0
 801241e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	009b      	lsls	r3, r3, #2
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	4413      	add	r3, r2
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	f107 0310 	add.w	r3, r7, #16
 8012430:	4611      	mov	r1, r2
 8012432:	4618      	mov	r0, r3
 8012434:	f7f7 fa3f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8012438:	f107 0310 	add.w	r3, r7, #16
 801243c:	4618      	mov	r0, r3
 801243e:	f7f7 fdd1 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8012442:	4603      	mov	r3, r0
 8012444:	2b02      	cmp	r3, #2
 8012446:	bf8c      	ite	hi
 8012448:	2301      	movhi	r3, #1
 801244a:	2300      	movls	r3, #0
 801244c:	b2db      	uxtb	r3, r3
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00e      	beq.n	8012470 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	009b      	lsls	r3, r3, #2
 8012458:	687a      	ldr	r2, [r7, #4]
 801245a:	4413      	add	r3, r2
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	3302      	adds	r3, #2
 8012460:	4618      	mov	r0, r3
 8012462:	f7f7 f824 	bl	80094ae <_ZN12SimpleString4AtoIEPKc>
 8012466:	4603      	mov	r3, r0
 8012468:	461a      	mov	r2, r3
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	61da      	str	r2, [r3, #28]
 801246e:	e01c      	b.n	80124aa <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	3301      	adds	r3, #1
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	429a      	cmp	r2, r3
 801247a:	dd16      	ble.n	80124aa <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	3301      	adds	r3, #1
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	4413      	add	r3, r2
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	4618      	mov	r0, r3
 801248c:	f7f7 f80f 	bl	80094ae <_ZN12SimpleString4AtoIEPKc>
 8012490:	4603      	mov	r3, r0
 8012492:	461a      	mov	r2, r3
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	69db      	ldr	r3, [r3, #28]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d004      	beq.n	80124aa <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	1c5a      	adds	r2, r3, #1
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	69db      	ldr	r3, [r3, #28]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d102      	bne.n	80124b8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2202      	movs	r2, #2
 80124b6:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80124b8:	f107 0310 	add.w	r3, r7, #16
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f7 fdb2 	bl	800a026 <_ZN12SimpleStringD1Ev>

}
 80124c2:	bf00      	nop
 80124c4:	3718      	adds	r7, #24
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
	...

080124cc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80124cc:	b590      	push	{r4, r7, lr}
 80124ce:	b089      	sub	sp, #36	; 0x24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
 80124d8:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2201      	movs	r2, #1
 80124de:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80124e0:	4b34      	ldr	r3, [pc, #208]	; (80125b4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4798      	blx	r3
 80124e6:	4603      	mov	r3, r0
 80124e8:	461a      	mov	r2, r3
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	6a1b      	ldr	r3, [r3, #32]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d104      	bne.n	8012500 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	6a1b      	ldr	r3, [r3, #32]
 80124fa:	1c5a      	adds	r2, r3, #1
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	687a      	ldr	r2, [r7, #4]
 8012508:	4413      	add	r3, r2
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	f107 0314 	add.w	r3, r7, #20
 8012510:	4611      	mov	r1, r2
 8012512:	4618      	mov	r0, r3
 8012514:	f7f7 f9cf 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8012518:	f107 0314 	add.w	r3, r7, #20
 801251c:	4618      	mov	r0, r3
 801251e:	f7f7 fd61 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8012522:	4603      	mov	r3, r0
 8012524:	2b02      	cmp	r3, #2
 8012526:	bf8c      	ite	hi
 8012528:	2301      	movhi	r3, #1
 801252a:	2300      	movls	r3, #0
 801252c:	b2db      	uxtb	r3, r3
 801252e:	2b00      	cmp	r3, #0
 8012530:	d010      	beq.n	8012554 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	2201      	movs	r2, #1
 8012536:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	4413      	add	r3, r2
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	3302      	adds	r3, #2
 8012546:	4618      	mov	r0, r3
 8012548:	f7f6 ff78 	bl	800943c <_ZN12SimpleString4AtoUEPKc>
 801254c:	4602      	mov	r2, r0
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	621a      	str	r2, [r3, #32]
 8012552:	e01e      	b.n	8012592 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	3301      	adds	r3, #1
 801255a:	68ba      	ldr	r2, [r7, #8]
 801255c:	429a      	cmp	r2, r3
 801255e:	dd18      	ble.n	8012592 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	3301      	adds	r3, #1
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	4413      	add	r3, r2
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	4618      	mov	r0, r3
 8012570:	f7f6 ff64 	bl	800943c <_ZN12SimpleString4AtoUEPKc>
 8012574:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00a      	beq.n	8012592 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2201      	movs	r2, #1
 8012580:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	69fa      	ldr	r2, [r7, #28]
 8012586:	621a      	str	r2, [r3, #32]
            i++;
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	1c5a      	adds	r2, r3, #1
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6a1b      	ldr	r3, [r3, #32]
 8012596:	2b00      	cmp	r3, #0
 8012598:	bf14      	ite	ne
 801259a:	2301      	movne	r3, #1
 801259c:	2300      	moveq	r3, #0
 801259e:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 80125a0:	f107 0314 	add.w	r3, r7, #20
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f7 fd3e 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80125aa:	4623      	mov	r3, r4
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3724      	adds	r7, #36	; 0x24
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd90      	pop	{r4, r7, pc}
 80125b4:	200000a4 	.word	0x200000a4

080125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b088      	sub	sp, #32
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80125c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125c8:	f7f7 fd0c 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 80125cc:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80125ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	009b      	lsls	r3, r3, #2
 80125d4:	683a      	ldr	r2, [r7, #0]
 80125d6:	4413      	add	r3, r2
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	f107 0314 	add.w	r3, r7, #20
 80125de:	4611      	mov	r1, r2
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7f7 f968 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80125e6:	f107 0314 	add.w	r3, r7, #20
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7f7 fcfa 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 80125f0:	4602      	mov	r2, r0
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	4293      	cmp	r3, r2
 80125f6:	bf34      	ite	cc
 80125f8:	2301      	movcc	r3, #1
 80125fa:	2300      	movcs	r3, #0
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00c      	beq.n	801261c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8012602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	683a      	ldr	r2, [r7, #0]
 801260a:	4413      	add	r3, r2
 801260c:	681a      	ldr	r2, [r3, #0]
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	4413      	add	r3, r2
 8012612:	4619      	mov	r1, r3
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f7f7 f94e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801261a:	e019      	b.n	8012650 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 801261c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	3301      	adds	r3, #1
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	429a      	cmp	r2, r3
 8012626:	dd0f      	ble.n	8012648 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8012628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	1c5a      	adds	r2, r3, #1
 801262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	009b      	lsls	r3, r3, #2
 8012638:	683a      	ldr	r2, [r7, #0]
 801263a:	4413      	add	r3, r2
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4619      	mov	r1, r3
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7f7 f938 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012646:	e003      	b.n	8012650 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8012648:	4906      	ldr	r1, [pc, #24]	; (8012664 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7f7 f933 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8012650:	f107 0314 	add.w	r3, r7, #20
 8012654:	4618      	mov	r0, r3
 8012656:	f7f7 fce6 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	3720      	adds	r7, #32
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	080216d0 	.word	0x080216d0

08012668 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8012668:	b5b0      	push	{r4, r5, r7, lr}
 801266a:	b08c      	sub	sp, #48	; 0x30
 801266c:	af02      	add	r7, sp, #8
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
 8012674:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8012676:	f107 031c 	add.w	r3, r7, #28
 801267a:	491a      	ldr	r1, [pc, #104]	; (80126e4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 801267c:	4618      	mov	r0, r3
 801267e:	f7f7 f91a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012682:	f107 0014 	add.w	r0, r7, #20
 8012686:	f107 031c 	add.w	r3, r7, #28
 801268a:	9301      	str	r3, [sp, #4]
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	9300      	str	r3, [sp, #0]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	68f9      	ldr	r1, [r7, #12]
 8012696:	f7ff ff8f 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801269a:	f107 0514 	add.w	r5, r7, #20
 801269e:	f44f 7289 	mov.w	r2, #274	; 0x112
 80126a2:	4911      	ldr	r1, [pc, #68]	; (80126e8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 80126a4:	2010      	movs	r0, #16
 80126a6:	f7f4 fd43 	bl	8007130 <_ZnwjPKci>
 80126aa:	4604      	mov	r4, r0
 80126ac:	4629      	mov	r1, r5
 80126ae:	4620      	mov	r0, r4
 80126b0:	f009 ff40 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 80126b4:	627c      	str	r4, [r7, #36]	; 0x24
 80126b6:	f107 0314 	add.w	r3, r7, #20
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7f7 fcb3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80126c0:	f107 031c 	add.w	r3, r7, #28
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7f7 fcae 	bl	800a026 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ce:	4619      	mov	r1, r3
 80126d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126d2:	f009 ff4f 	bl	801c574 <_ZN10TestFilter3addEPS_>
 80126d6:	4602      	mov	r2, r0
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80126dc:	bf00      	nop
 80126de:	3728      	adds	r7, #40	; 0x28
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bdb0      	pop	{r4, r5, r7, pc}
 80126e4:	08021704 	.word	0x08021704
 80126e8:	08022098 	.word	0x08022098

080126ec <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80126ec:	b5b0      	push	{r4, r5, r7, lr}
 80126ee:	b092      	sub	sp, #72	; 0x48
 80126f0:	af02      	add	r7, sp, #8
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
 80126f8:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80126fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80126fe:	494e      	ldr	r1, [pc, #312]	; (8012838 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8012700:	4618      	mov	r0, r3
 8012702:	f7f7 f8d8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012706:	f107 0020 	add.w	r0, r7, #32
 801270a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801270e:	9301      	str	r3, [sp, #4]
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	68ba      	ldr	r2, [r7, #8]
 8012718:	68f9      	ldr	r1, [r7, #12]
 801271a:	f7ff ff4d 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801271e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012722:	4618      	mov	r0, r3
 8012724:	f7f7 fc7f 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8012728:	f107 0310 	add.w	r3, r7, #16
 801272c:	4618      	mov	r0, r3
 801272e:	f7f8 fb8f 	bl	800ae50 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8012732:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012736:	4941      	ldr	r1, [pc, #260]	; (801283c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8012738:	4618      	mov	r0, r3
 801273a:	f7f7 f8bc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801273e:	f107 0210 	add.w	r2, r7, #16
 8012742:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012746:	f107 0320 	add.w	r3, r7, #32
 801274a:	4618      	mov	r0, r3
 801274c:	f7f7 fa1f 	bl	8009b8e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8012750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012754:	4618      	mov	r0, r3
 8012756:	f7f7 fc66 	bl	800a026 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801275a:	f107 0310 	add.w	r3, r7, #16
 801275e:	4618      	mov	r0, r3
 8012760:	f7f8 fc1b 	bl	800af9a <_ZNK22SimpleStringCollection4sizeEv>
 8012764:	4603      	mov	r3, r0
 8012766:	2b02      	cmp	r3, #2
 8012768:	bf14      	ite	ne
 801276a:	2301      	movne	r3, #1
 801276c:	2300      	moveq	r3, #0
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8012774:	2400      	movs	r4, #0
 8012776:	e04f      	b.n	8012818 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8012778:	f107 0310 	add.w	r3, r7, #16
 801277c:	2100      	movs	r1, #0
 801277e:	4618      	mov	r0, r3
 8012780:	f7f8 fc18 	bl	800afb4 <_ZN22SimpleStringCollectionixEj>
 8012784:	4604      	mov	r4, r0
 8012786:	f107 0310 	add.w	r3, r7, #16
 801278a:	2100      	movs	r1, #0
 801278c:	4618      	mov	r0, r3
 801278e:	f7f8 fc11 	bl	800afb4 <_ZN22SimpleStringCollectionixEj>
 8012792:	4603      	mov	r3, r0
 8012794:	4618      	mov	r0, r3
 8012796:	f7f7 fc25 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 801279a:	4603      	mov	r3, r0
 801279c:	3b01      	subs	r3, #1
 801279e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80127a2:	2200      	movs	r2, #0
 80127a4:	4621      	mov	r1, r4
 80127a6:	f7f7 fd47 	bl	800a238 <_ZNK12SimpleString9subStringEjj>
 80127aa:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80127ae:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80127b2:	4923      	ldr	r1, [pc, #140]	; (8012840 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80127b4:	2010      	movs	r0, #16
 80127b6:	f7f4 fcbb 	bl	8007130 <_ZnwjPKci>
 80127ba:	4604      	mov	r4, r0
 80127bc:	4629      	mov	r1, r5
 80127be:	4620      	mov	r0, r4
 80127c0:	f009 feb8 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c8:	4619      	mov	r1, r3
 80127ca:	4620      	mov	r0, r4
 80127cc:	f009 fed2 	bl	801c574 <_ZN10TestFilter3addEPS_>
 80127d0:	4602      	mov	r2, r0
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	625a      	str	r2, [r3, #36]	; 0x24
 80127d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f7 fc23 	bl	800a026 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80127e0:	f107 0310 	add.w	r3, r7, #16
 80127e4:	2101      	movs	r1, #1
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7f8 fbe4 	bl	800afb4 <_ZN22SimpleStringCollectionixEj>
 80127ec:	4605      	mov	r5, r0
 80127ee:	f240 121f 	movw	r2, #287	; 0x11f
 80127f2:	4913      	ldr	r1, [pc, #76]	; (8012840 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80127f4:	2010      	movs	r0, #16
 80127f6:	f7f4 fc9b 	bl	8007130 <_ZnwjPKci>
 80127fa:	4604      	mov	r4, r0
 80127fc:	4629      	mov	r1, r5
 80127fe:	4620      	mov	r0, r4
 8012800:	f009 fe98 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012808:	4619      	mov	r1, r3
 801280a:	4620      	mov	r0, r4
 801280c:	f009 feb2 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012810:	4602      	mov	r2, r0
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8012816:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8012818:	f107 0310 	add.w	r3, r7, #16
 801281c:	4618      	mov	r0, r3
 801281e:	f7f8 fb8b 	bl	800af38 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8012822:	f107 0320 	add.w	r3, r7, #32
 8012826:	4618      	mov	r0, r3
 8012828:	f7f7 fbfd 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801282c:	4623      	mov	r3, r4
}
 801282e:	4618      	mov	r0, r3
 8012830:	3740      	adds	r7, #64	; 0x40
 8012832:	46bd      	mov	sp, r7
 8012834:	bdb0      	pop	{r4, r5, r7, pc}
 8012836:	bf00      	nop
 8012838:	08021708 	.word	0x08021708
 801283c:	080220b8 	.word	0x080220b8
 8012840:	08022098 	.word	0x08022098

08012844 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8012844:	b5b0      	push	{r4, r5, r7, lr}
 8012846:	b08c      	sub	sp, #48	; 0x30
 8012848:	af02      	add	r7, sp, #8
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
 8012850:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8012852:	f107 031c 	add.w	r3, r7, #28
 8012856:	491c      	ldr	r1, [pc, #112]	; (80128c8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8012858:	4618      	mov	r0, r3
 801285a:	f7f7 f82c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801285e:	f107 0014 	add.w	r0, r7, #20
 8012862:	f107 031c 	add.w	r3, r7, #28
 8012866:	9301      	str	r3, [sp, #4]
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	68ba      	ldr	r2, [r7, #8]
 8012870:	68f9      	ldr	r1, [r7, #12]
 8012872:	f7ff fea1 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012876:	f107 0514 	add.w	r5, r7, #20
 801287a:	f240 1225 	movw	r2, #293	; 0x125
 801287e:	4913      	ldr	r1, [pc, #76]	; (80128cc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8012880:	2010      	movs	r0, #16
 8012882:	f7f4 fc55 	bl	8007130 <_ZnwjPKci>
 8012886:	4604      	mov	r4, r0
 8012888:	4629      	mov	r1, r5
 801288a:	4620      	mov	r0, r4
 801288c:	f009 fe52 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012890:	627c      	str	r4, [r7, #36]	; 0x24
 8012892:	f107 0314 	add.w	r3, r7, #20
 8012896:	4618      	mov	r0, r3
 8012898:	f7f7 fbc5 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801289c:	f107 031c 	add.w	r3, r7, #28
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f7 fbc0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80128a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128a8:	f009 fe7f 	bl	801c5aa <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b0:	4619      	mov	r1, r3
 80128b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128b4:	f009 fe5e 	bl	801c574 <_ZN10TestFilter3addEPS_>
 80128b8:	4602      	mov	r2, r0
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80128be:	bf00      	nop
 80128c0:	3728      	adds	r7, #40	; 0x28
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bdb0      	pop	{r4, r5, r7, pc}
 80128c6:	bf00      	nop
 80128c8:	0802170c 	.word	0x0802170c
 80128cc:	08022098 	.word	0x08022098

080128d0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80128d0:	b5b0      	push	{r4, r5, r7, lr}
 80128d2:	b08c      	sub	sp, #48	; 0x30
 80128d4:	af02      	add	r7, sp, #8
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80128de:	f107 031c 	add.w	r3, r7, #28
 80128e2:	491c      	ldr	r1, [pc, #112]	; (8012954 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7f6 ffe6 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80128ea:	f107 0014 	add.w	r0, r7, #20
 80128ee:	f107 031c 	add.w	r3, r7, #28
 80128f2:	9301      	str	r3, [sp, #4]
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	9300      	str	r3, [sp, #0]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	68ba      	ldr	r2, [r7, #8]
 80128fc:	68f9      	ldr	r1, [r7, #12]
 80128fe:	f7ff fe5b 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012902:	f107 0514 	add.w	r5, r7, #20
 8012906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801290a:	4913      	ldr	r1, [pc, #76]	; (8012958 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 801290c:	2010      	movs	r0, #16
 801290e:	f7f4 fc0f 	bl	8007130 <_ZnwjPKci>
 8012912:	4604      	mov	r4, r0
 8012914:	4629      	mov	r1, r5
 8012916:	4620      	mov	r0, r4
 8012918:	f009 fe0c 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 801291c:	627c      	str	r4, [r7, #36]	; 0x24
 801291e:	f107 0314 	add.w	r3, r7, #20
 8012922:	4618      	mov	r0, r3
 8012924:	f7f7 fb7f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012928:	f107 031c 	add.w	r3, r7, #28
 801292c:	4618      	mov	r0, r3
 801292e:	f7f7 fb7a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8012932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012934:	f009 fe46 	bl	801c5c4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801293c:	4619      	mov	r1, r3
 801293e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012940:	f009 fe18 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012944:	4602      	mov	r2, r0
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	625a      	str	r2, [r3, #36]	; 0x24
}
 801294a:	bf00      	nop
 801294c:	3728      	adds	r7, #40	; 0x28
 801294e:	46bd      	mov	sp, r7
 8012950:	bdb0      	pop	{r4, r5, r7, pc}
 8012952:	bf00      	nop
 8012954:	08021710 	.word	0x08021710
 8012958:	08022098 	.word	0x08022098

0801295c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801295c:	b5b0      	push	{r4, r5, r7, lr}
 801295e:	b08c      	sub	sp, #48	; 0x30
 8012960:	af02      	add	r7, sp, #8
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	607a      	str	r2, [r7, #4]
 8012968:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801296a:	f107 031c 	add.w	r3, r7, #28
 801296e:	491d      	ldr	r1, [pc, #116]	; (80129e4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8012970:	4618      	mov	r0, r3
 8012972:	f7f6 ffa0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012976:	f107 0014 	add.w	r0, r7, #20
 801297a:	f107 031c 	add.w	r3, r7, #28
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	68f9      	ldr	r1, [r7, #12]
 801298a:	f7ff fe15 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801298e:	f107 0514 	add.w	r5, r7, #20
 8012992:	f240 1233 	movw	r2, #307	; 0x133
 8012996:	4914      	ldr	r1, [pc, #80]	; (80129e8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8012998:	2010      	movs	r0, #16
 801299a:	f7f4 fbc9 	bl	8007130 <_ZnwjPKci>
 801299e:	4604      	mov	r4, r0
 80129a0:	4629      	mov	r1, r5
 80129a2:	4620      	mov	r0, r4
 80129a4:	f009 fdc6 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 80129a8:	627c      	str	r4, [r7, #36]	; 0x24
 80129aa:	f107 0314 	add.w	r3, r7, #20
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7f7 fb39 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80129b4:	f107 031c 	add.w	r3, r7, #28
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f7 fb34 	bl	800a026 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80129be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129c0:	f009 fdf3 	bl	801c5aa <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80129c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129c6:	f009 fdfd 	bl	801c5c4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ce:	4619      	mov	r1, r3
 80129d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129d2:	f009 fdcf 	bl	801c574 <_ZN10TestFilter3addEPS_>
 80129d6:	4602      	mov	r2, r0
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80129dc:	bf00      	nop
 80129de:	3728      	adds	r7, #40	; 0x28
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bdb0      	pop	{r4, r5, r7, pc}
 80129e4:	08021714 	.word	0x08021714
 80129e8:	08022098 	.word	0x08022098

080129ec <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80129ec:	b5b0      	push	{r4, r5, r7, lr}
 80129ee:	b08c      	sub	sp, #48	; 0x30
 80129f0:	af02      	add	r7, sp, #8
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	607a      	str	r2, [r7, #4]
 80129f8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80129fa:	f107 031c 	add.w	r3, r7, #28
 80129fe:	491a      	ldr	r1, [pc, #104]	; (8012a68 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f6 ff58 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012a06:	f107 0014 	add.w	r0, r7, #20
 8012a0a:	f107 031c 	add.w	r3, r7, #28
 8012a0e:	9301      	str	r3, [sp, #4]
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	9300      	str	r3, [sp, #0]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	68ba      	ldr	r2, [r7, #8]
 8012a18:	68f9      	ldr	r1, [r7, #12]
 8012a1a:	f7ff fdcd 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012a1e:	f107 0514 	add.w	r5, r7, #20
 8012a22:	f240 123b 	movw	r2, #315	; 0x13b
 8012a26:	4911      	ldr	r1, [pc, #68]	; (8012a6c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8012a28:	2010      	movs	r0, #16
 8012a2a:	f7f4 fb81 	bl	8007130 <_ZnwjPKci>
 8012a2e:	4604      	mov	r4, r0
 8012a30:	4629      	mov	r1, r5
 8012a32:	4620      	mov	r0, r4
 8012a34:	f009 fd7e 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012a38:	627c      	str	r4, [r7, #36]	; 0x24
 8012a3a:	f107 0314 	add.w	r3, r7, #20
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7f7 faf1 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012a44:	f107 031c 	add.w	r3, r7, #28
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f7 faec 	bl	800a026 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a52:	4619      	mov	r1, r3
 8012a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a56:	f009 fd8d 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012a60:	bf00      	nop
 8012a62:	3728      	adds	r7, #40	; 0x28
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bdb0      	pop	{r4, r5, r7, pc}
 8012a68:	0802171c 	.word	0x0802171c
 8012a6c:	08022098 	.word	0x08022098

08012a70 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8012a70:	b5b0      	push	{r4, r5, r7, lr}
 8012a72:	b08c      	sub	sp, #48	; 0x30
 8012a74:	af02      	add	r7, sp, #8
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
 8012a7c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8012a7e:	f107 031c 	add.w	r3, r7, #28
 8012a82:	491c      	ldr	r1, [pc, #112]	; (8012af4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7f6 ff16 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012a8a:	f107 0014 	add.w	r0, r7, #20
 8012a8e:	f107 031c 	add.w	r3, r7, #28
 8012a92:	9301      	str	r3, [sp, #4]
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	68f9      	ldr	r1, [r7, #12]
 8012a9e:	f7ff fd8b 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012aa2:	f107 0514 	add.w	r5, r7, #20
 8012aa6:	f240 1241 	movw	r2, #321	; 0x141
 8012aaa:	4913      	ldr	r1, [pc, #76]	; (8012af8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8012aac:	2010      	movs	r0, #16
 8012aae:	f7f4 fb3f 	bl	8007130 <_ZnwjPKci>
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	4629      	mov	r1, r5
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f009 fd3c 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012abc:	627c      	str	r4, [r7, #36]	; 0x24
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7f7 faaf 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012ac8:	f107 031c 	add.w	r3, r7, #28
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f7 faaa 	bl	800a026 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8012ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ad4:	f009 fd69 	bl	801c5aa <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012adc:	4619      	mov	r1, r3
 8012ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ae0:	f009 fd48 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012aea:	bf00      	nop
 8012aec:	3728      	adds	r7, #40	; 0x28
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bdb0      	pop	{r4, r5, r7, pc}
 8012af2:	bf00      	nop
 8012af4:	08021720 	.word	0x08021720
 8012af8:	08022098 	.word	0x08022098

08012afc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8012afc:	b5b0      	push	{r4, r5, r7, lr}
 8012afe:	b08c      	sub	sp, #48	; 0x30
 8012b00:	af02      	add	r7, sp, #8
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
 8012b08:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8012b0a:	f107 031c 	add.w	r3, r7, #28
 8012b0e:	491c      	ldr	r1, [pc, #112]	; (8012b80 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7f6 fed0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012b16:	f107 0014 	add.w	r0, r7, #20
 8012b1a:	f107 031c 	add.w	r3, r7, #28
 8012b1e:	9301      	str	r3, [sp, #4]
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	68ba      	ldr	r2, [r7, #8]
 8012b28:	68f9      	ldr	r1, [r7, #12]
 8012b2a:	f7ff fd45 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012b2e:	f107 0514 	add.w	r5, r7, #20
 8012b32:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8012b36:	4913      	ldr	r1, [pc, #76]	; (8012b84 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8012b38:	2010      	movs	r0, #16
 8012b3a:	f7f4 faf9 	bl	8007130 <_ZnwjPKci>
 8012b3e:	4604      	mov	r4, r0
 8012b40:	4629      	mov	r1, r5
 8012b42:	4620      	mov	r0, r4
 8012b44:	f009 fcf6 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012b48:	627c      	str	r4, [r7, #36]	; 0x24
 8012b4a:	f107 0314 	add.w	r3, r7, #20
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7f7 fa69 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012b54:	f107 031c 	add.w	r3, r7, #28
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7f7 fa64 	bl	800a026 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8012b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b60:	f009 fd30 	bl	801c5c4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b6c:	f009 fd02 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012b70:	4602      	mov	r2, r0
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012b76:	bf00      	nop
 8012b78:	3728      	adds	r7, #40	; 0x28
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	08021724 	.word	0x08021724
 8012b84:	08022098 	.word	0x08022098

08012b88 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8012b88:	b5b0      	push	{r4, r5, r7, lr}
 8012b8a:	b08c      	sub	sp, #48	; 0x30
 8012b8c:	af02      	add	r7, sp, #8
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	60b9      	str	r1, [r7, #8]
 8012b92:	607a      	str	r2, [r7, #4]
 8012b94:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8012b96:	f107 031c 	add.w	r3, r7, #28
 8012b9a:	491d      	ldr	r1, [pc, #116]	; (8012c10 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7f6 fe8a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012ba2:	f107 0014 	add.w	r0, r7, #20
 8012ba6:	f107 031c 	add.w	r3, r7, #28
 8012baa:	9301      	str	r3, [sp, #4]
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	9300      	str	r3, [sp, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	68ba      	ldr	r2, [r7, #8]
 8012bb4:	68f9      	ldr	r1, [r7, #12]
 8012bb6:	f7ff fcff 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012bba:	f107 0514 	add.w	r5, r7, #20
 8012bbe:	f240 124f 	movw	r2, #335	; 0x14f
 8012bc2:	4914      	ldr	r1, [pc, #80]	; (8012c14 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8012bc4:	2010      	movs	r0, #16
 8012bc6:	f7f4 fab3 	bl	8007130 <_ZnwjPKci>
 8012bca:	4604      	mov	r4, r0
 8012bcc:	4629      	mov	r1, r5
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f009 fcb0 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012bd4:	627c      	str	r4, [r7, #36]	; 0x24
 8012bd6:	f107 0314 	add.w	r3, r7, #20
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7f7 fa23 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012be0:	f107 031c 	add.w	r3, r7, #28
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7f7 fa1e 	bl	800a026 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8012bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bec:	f009 fcea 	bl	801c5c4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8012bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bf2:	f009 fcda 	bl	801c5aa <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bfe:	f009 fcb9 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012c02:	4602      	mov	r2, r0
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012c08:	bf00      	nop
 8012c0a:	3728      	adds	r7, #40	; 0x28
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c10:	08021728 	.word	0x08021728
 8012c14:	08022098 	.word	0x08022098

08012c18 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8012c18:	b5b0      	push	{r4, r5, r7, lr}
 8012c1a:	b092      	sub	sp, #72	; 0x48
 8012c1c:	af02      	add	r7, sp, #8
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8012c26:	f107 0320 	add.w	r3, r7, #32
 8012c2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7f6 fe42 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012c32:	f107 0018 	add.w	r0, r7, #24
 8012c36:	f107 0320 	add.w	r3, r7, #32
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	9300      	str	r3, [sp, #0]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	68ba      	ldr	r2, [r7, #8]
 8012c44:	68f9      	ldr	r1, [r7, #12]
 8012c46:	f7ff fcb7 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012c4a:	f107 0320 	add.w	r3, r7, #32
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f7 f9e9 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8012c54:	f107 0010 	add.w	r0, r7, #16
 8012c58:	f107 0118 	add.w	r1, r7, #24
 8012c5c:	2329      	movs	r3, #41	; 0x29
 8012c5e:	222c      	movs	r2, #44	; 0x2c
 8012c60:	f7f7 fb92 	bl	800a388 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8012c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c68:	f107 0110 	add.w	r1, r7, #16
 8012c6c:	2202      	movs	r2, #2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7f7 fb2c 	bl	800a2cc <_ZNK12SimpleString9subStringEj>
 8012c74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012c78:	f107 0310 	add.w	r3, r7, #16
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7f6 fe85 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8012c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7f7 f9cc 	bl	800a026 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8012c8e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8012c92:	492a      	ldr	r1, [pc, #168]	; (8012d3c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8012c94:	2010      	movs	r0, #16
 8012c96:	f7f4 fa4b 	bl	8007130 <_ZnwjPKci>
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	f107 0310 	add.w	r3, r7, #16
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f009 fc46 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012ca8:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8012caa:	f107 0318 	add.w	r3, r7, #24
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7f7 fb1c 	bl	800a2ee <_ZNK12SimpleString2atEj>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	461a      	mov	r2, r3
 8012cba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012cbe:	f107 0118 	add.w	r1, r7, #24
 8012cc2:	232c      	movs	r3, #44	; 0x2c
 8012cc4:	f7f7 fb60 	bl	800a388 <_ZNK12SimpleString17subStringFromTillEcc>
 8012cc8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8012ccc:	f240 125b 	movw	r2, #347	; 0x15b
 8012cd0:	491a      	ldr	r1, [pc, #104]	; (8012d3c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8012cd2:	2010      	movs	r0, #16
 8012cd4:	f7f4 fa2c 	bl	8007130 <_ZnwjPKci>
 8012cd8:	4604      	mov	r4, r0
 8012cda:	4629      	mov	r1, r5
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f009 fc29 	bl	801c534 <_ZN10TestFilterC1ERK12SimpleString>
 8012ce2:	63bc      	str	r4, [r7, #56]	; 0x38
 8012ce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7f7 f99c 	bl	800a026 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8012cee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012cf0:	f009 fc5b 	bl	801c5aa <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8012cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012cf6:	f009 fc58 	bl	801c5aa <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfe:	4619      	mov	r1, r3
 8012d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d02:	f009 fc37 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012d06:	4602      	mov	r2, r0
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d10:	4619      	mov	r1, r3
 8012d12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d14:	f009 fc2e 	bl	801c574 <_ZN10TestFilter3addEPS_>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8012d1e:	f107 0310 	add.w	r3, r7, #16
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7f7 f97f 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8012d28:	f107 0318 	add.w	r3, r7, #24
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7f7 f97a 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8012d32:	bf00      	nop
 8012d34:	3740      	adds	r7, #64	; 0x40
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bdb0      	pop	{r4, r5, r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	08022098 	.word	0x08022098

08012d40 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8012d40:	b590      	push	{r4, r7, lr}
 8012d42:	b08b      	sub	sp, #44	; 0x2c
 8012d44:	af02      	add	r7, sp, #8
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	607a      	str	r2, [r7, #4]
 8012d4c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8012d4e:	f107 0318 	add.w	r3, r7, #24
 8012d52:	491b      	ldr	r1, [pc, #108]	; (8012dc0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f6 fdae 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012d5a:	f107 0010 	add.w	r0, r7, #16
 8012d5e:	f107 0318 	add.w	r3, r7, #24
 8012d62:	9301      	str	r3, [sp, #4]
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	68ba      	ldr	r2, [r7, #8]
 8012d6c:	68f9      	ldr	r1, [r7, #12]
 8012d6e:	f7ff fc23 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012d72:	f107 0318 	add.w	r3, r7, #24
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f7 f955 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8012d7c:	f107 0310 	add.w	r3, r7, #16
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7f7 f92f 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8012d86:	4603      	mov	r3, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	bf0c      	ite	eq
 8012d8c:	2301      	moveq	r3, #1
 8012d8e:	2300      	movne	r3, #0
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d001      	beq.n	8012d9a <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8012d96:	2400      	movs	r4, #0
 8012d98:	e008      	b.n	8012dac <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	3330      	adds	r3, #48	; 0x30
 8012d9e:	f107 0210 	add.w	r2, r7, #16
 8012da2:	4611      	mov	r1, r2
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7f6 fdf2 	bl	800998e <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8012daa:	2401      	movs	r4, #1
 8012dac:	f107 0310 	add.w	r3, r7, #16
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7f7 f938 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012db6:	2c01      	cmp	r4, #1
}
 8012db8:	3724      	adds	r7, #36	; 0x24
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd90      	pop	{r4, r7, pc}
 8012dbe:	bf00      	nop
 8012dc0:	08021750 	.word	0x08021750

08012dc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8012dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dc6:	b093      	sub	sp, #76	; 0x4c
 8012dc8:	af02      	add	r7, sp, #8
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8012dd2:	f107 0318 	add.w	r3, r7, #24
 8012dd6:	4953      	ldr	r1, [pc, #332]	; (8012f24 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7f6 fd6c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012dde:	f107 0010 	add.w	r0, r7, #16
 8012de2:	f107 0318 	add.w	r3, r7, #24
 8012de6:	9301      	str	r3, [sp, #4]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	9300      	str	r3, [sp, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	68ba      	ldr	r2, [r7, #8]
 8012df0:	68f9      	ldr	r1, [r7, #12]
 8012df2:	f7ff fbe1 	bl	80125b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012df6:	f107 0318 	add.w	r3, r7, #24
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7f7 f913 	bl	800a026 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8012e00:	f107 0310 	add.w	r3, r7, #16
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f7 f8ed 	bl	8009fe4 <_ZNK12SimpleString4sizeEv>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	bf0c      	ite	eq
 8012e10:	2301      	moveq	r3, #1
 8012e12:	2300      	movne	r3, #0
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d001      	beq.n	8012e1e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8012e1a:	2400      	movs	r4, #0
 8012e1c:	e078      	b.n	8012f10 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8012e1e:	2500      	movs	r5, #0
 8012e20:	f107 0320 	add.w	r3, r7, #32
 8012e24:	4940      	ldr	r1, [pc, #256]	; (8012f28 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f6 fd45 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012e2c:	2601      	movs	r6, #1
 8012e2e:	f107 0220 	add.w	r2, r7, #32
 8012e32:	f107 0310 	add.w	r3, r7, #16
 8012e36:	4611      	mov	r1, r2
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f7 f900 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d111      	bne.n	8012e68 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8012e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012e48:	4938      	ldr	r1, [pc, #224]	; (8012f2c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f7f6 fd33 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012e50:	2501      	movs	r5, #1
 8012e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e56:	f107 0310 	add.w	r3, r7, #16
 8012e5a:	4611      	mov	r1, r2
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7f7 f8ee 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d001      	beq.n	8012e6c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8012e68:	2401      	movs	r4, #1
 8012e6a:	e000      	b.n	8012e6e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8012e6c:	2400      	movs	r4, #0
 8012e6e:	2d00      	cmp	r5, #0
 8012e70:	d004      	beq.n	8012e7c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8012e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7f7 f8d5 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012e7c:	2e00      	cmp	r6, #0
 8012e7e:	d004      	beq.n	8012e8a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8012e80:	f107 0320 	add.w	r3, r7, #32
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f7 f8ce 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012e8a:	2c00      	cmp	r4, #0
 8012e8c:	d005      	beq.n	8012e9a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2200      	movs	r2, #0
 8012e92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8012e96:	2401      	movs	r4, #1
 8012e98:	e03a      	b.n	8012f10 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8012e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e9e:	4924      	ldr	r1, [pc, #144]	; (8012f30 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7f6 fd08 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012ea6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012eaa:	f107 0310 	add.w	r3, r7, #16
 8012eae:	4611      	mov	r1, r2
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7f7 f8c4 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	461c      	mov	r4, r3
 8012eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7f7 f8b1 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012ec4:	2c00      	cmp	r4, #0
 8012ec6:	d005      	beq.n	8012ed4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2201      	movs	r2, #1
 8012ecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8012ed0:	2401      	movs	r4, #1
 8012ed2:	e01d      	b.n	8012f10 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8012ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ed8:	4916      	ldr	r1, [pc, #88]	; (8012f34 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7f6 fceb 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8012ee0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012ee4:	f107 0310 	add.w	r3, r7, #16
 8012ee8:	4611      	mov	r1, r2
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7f7 f8a7 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	461c      	mov	r4, r3
 8012ef4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7f7 f894 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012efe:	2c00      	cmp	r4, #0
 8012f00:	d005      	beq.n	8012f0e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2202      	movs	r2, #2
 8012f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8012f0a:	2401      	movs	r4, #1
 8012f0c:	e000      	b.n	8012f10 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8012f0e:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8012f10:	f107 0310 	add.w	r3, r7, #16
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7f7 f886 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8012f1a:	4623      	mov	r3, r4
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3744      	adds	r7, #68	; 0x44
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f24:	0802174c 	.word	0x0802174c
 8012f28:	080220bc 	.word	0x080220bc
 8012f2c:	080220c4 	.word	0x080220c4
 8012f30:	080220cc 	.word	0x080220cc
 8012f34:	080220d4 	.word	0x080220d4

08012f38 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b083      	sub	sp, #12
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	bf0c      	ite	eq
 8012f4a:	2301      	moveq	r3, #1
 8012f4c:	2300      	movne	r3, #0
 8012f4e:	b2db      	uxtb	r3, r3
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5a:	4770      	bx	lr

08012f5c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	b083      	sub	sp, #12
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f6a:	2b02      	cmp	r3, #2
 8012f6c:	bf0c      	ite	eq
 8012f6e:	2301      	moveq	r3, #1
 8012f70:	2300      	movne	r3, #0
 8012f72:	b2db      	uxtb	r3, r3
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	370c      	adds	r7, #12
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr

08012f80 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
    return packageName_;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	3330      	adds	r3, #48	; 0x30
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr

08012f98 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	601a      	str	r2, [r3, #0]
    {}
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	370c      	adds	r7, #12
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr

08012fb4 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8012fb4:	b480      	push	{r7}
 8012fb6:	b083      	sub	sp, #12
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fcc:	3304      	adds	r3, #4
 8012fce:	f640 72ff 	movw	r2, #4095	; 0xfff
 8012fd2:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	701a      	strb	r2, [r3, #0]
}
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	370c      	adds	r7, #12
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	701a      	strb	r2, [r3, #0]
}
 8013000:	bf00      	nop
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 801300c:	b40e      	push	{r1, r2, r3}
 801300e:	b590      	push	{r4, r7, lr}
 8013010:	b086      	sub	sp, #24
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801301c:	3304      	adds	r3, #4
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	1ad3      	subs	r3, r2, r3
 801302a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d032      	beq.n	8013098 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8013032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013036:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8013038:	4b1b      	ldr	r3, [pc, #108]	; (80130a8 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801303a:	681c      	ldr	r4, [r3, #0]
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	18d0      	adds	r0, r2, r3
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	1c59      	adds	r1, r3, #1
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013050:	47a0      	blx	r4
 8013052:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	2b00      	cmp	r3, #0
 8013058:	dd09      	ble.n	801306e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	441a      	add	r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801306c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801307c:	3304      	adds	r3, #4
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	429a      	cmp	r2, r3
 8013082:	d90a      	bls.n	801309a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801308a:	3304      	adds	r3, #4
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013094:	601a      	str	r2, [r3, #0]
 8013096:	e000      	b.n	801309a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8013098:	bf00      	nop
    va_end(arguments);
}
 801309a:	3718      	adds	r7, #24
 801309c:	46bd      	mov	sp, r7
 801309e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80130a2:	b003      	add	sp, #12
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop
 80130a8:	200000ac 	.word	0x200000ac

080130ac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b08c      	sub	sp, #48	; 0x30
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	60f8      	str	r0, [r7, #12]
 80130b4:	60b9      	str	r1, [r7, #8]
 80130b6:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80130bc:	2310      	movs	r3, #16
 80130be:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80130c0:	2300      	movs	r3, #0
 80130c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80130c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d273      	bcs.n	80131b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80130cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130ce:	493b      	ldr	r1, [pc, #236]	; (80131bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f7ff ff9b 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130da:	1ad3      	subs	r3, r2, r3
 80130dc:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80130de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e0:	2b10      	cmp	r3, #16
 80130e2:	d901      	bls.n	80130e8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80130e4:	2310      	movs	r3, #16
 80130e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	f1c3 0310 	rsb	r3, r3, #16
 80130ee:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80130f0:	2300      	movs	r3, #0
 80130f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80130f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d215      	bcs.n	8013128 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80130fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013100:	4413      	add	r3, r2
 8013102:	69fa      	ldr	r2, [r7, #28]
 8013104:	4413      	add	r3, r2
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	461a      	mov	r2, r3
 801310a:	492d      	ldr	r1, [pc, #180]	; (80131c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f7ff ff7d 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8013112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013114:	2b07      	cmp	r3, #7
 8013116:	d103      	bne.n	8013120 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8013118:	492a      	ldr	r1, [pc, #168]	; (80131c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801311a:	68f8      	ldr	r0, [r7, #12]
 801311c:	f7ff ff76 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013122:	3301      	adds	r3, #1
 8013124:	62bb      	str	r3, [r7, #40]	; 0x28
 8013126:	e7e5      	b.n	80130f4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8013128:	2300      	movs	r3, #0
 801312a:	62bb      	str	r3, [r7, #40]	; 0x28
 801312c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	429a      	cmp	r2, r3
 8013132:	d207      	bcs.n	8013144 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8013134:	4924      	ldr	r1, [pc, #144]	; (80131c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f7ff ff68 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 801313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313e:	3301      	adds	r3, #1
 8013140:	62bb      	str	r3, [r7, #40]	; 0x28
 8013142:	e7f3      	b.n	801312c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	2b08      	cmp	r3, #8
 8013148:	d903      	bls.n	8013152 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801314a:	491e      	ldr	r1, [pc, #120]	; (80131c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	f7ff ff5d 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8013152:	491e      	ldr	r1, [pc, #120]	; (80131cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f7ff ff59 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801315a:	2300      	movs	r3, #0
 801315c:	62bb      	str	r3, [r7, #40]	; 0x28
 801315e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013162:	429a      	cmp	r2, r3
 8013164:	d21d      	bcs.n	80131a2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8013166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316a:	4413      	add	r3, r2
 801316c:	69fa      	ldr	r2, [r7, #28]
 801316e:	4413      	add	r3, r2
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8013176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801317a:	2b1f      	cmp	r3, #31
 801317c:	d903      	bls.n	8013186 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 801317e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013182:	2b7e      	cmp	r3, #126	; 0x7e
 8013184:	d902      	bls.n	801318c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8013186:	232e      	movs	r3, #46	; 0x2e
 8013188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 801318c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013190:	461a      	mov	r2, r3
 8013192:	490f      	ldr	r1, [pc, #60]	; (80131d0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7ff ff39 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	3301      	adds	r3, #1
 801319e:	62bb      	str	r3, [r7, #40]	; 0x28
 80131a0:	e7dd      	b.n	801315e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80131a2:	490c      	ldr	r1, [pc, #48]	; (80131d4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f7ff ff31 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80131aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	4413      	add	r3, r2
 80131b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80131b2:	e787      	b.n	80130c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80131b4:	bf00      	nop
 80131b6:	3730      	adds	r7, #48	; 0x30
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	080220ec 	.word	0x080220ec
 80131c0:	080220f8 	.word	0x080220f8
 80131c4:	08022100 	.word	0x08022100
 80131c8:	08022104 	.word	0x08022104
 80131cc:	08022108 	.word	0x08022108
 80131d0:	0802210c 	.word	0x0802210c
 80131d4:	08022110 	.word	0x08022110

080131d8 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80131d8:	b480      	push	{r7}
 80131da:	b083      	sub	sp, #12
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
    return buffer_;
 80131e0:	687b      	ldr	r3, [r7, #4]
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	370c      	adds	r7, #12
 80131e6:	46bd      	mov	sp, r7
 80131e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ec:	4770      	bx	lr

080131ee <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80131ee:	b480      	push	{r7}
 80131f0:	b083      	sub	sp, #12
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131fe:	3304      	adds	r3, #4
 8013200:	683a      	ldr	r2, [r7, #0]
 8013202:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801320a:	3304      	adds	r3, #4
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013212:	d306      	bcc.n	8013222 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801321a:	3304      	adds	r3, #4
 801321c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013220:	601a      	str	r2, [r3, #0]
}
 8013222:	bf00      	nop
 8013224:	370c      	adds	r7, #12
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr

0801322e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801322e:	b480      	push	{r7}
 8013230:	b083      	sub	sp, #12
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801323c:	3304      	adds	r3, #4
 801323e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013242:	601a      	str	r2, [r3, #0]
}
 8013244:	bf00      	nop
 8013246:	370c      	adds	r7, #12
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013266:	3304      	adds	r3, #4
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	429a      	cmp	r2, r3
 801326c:	bf2c      	ite	cs
 801326e:	2301      	movcs	r3, #1
 8013270:	2300      	movcc	r3, #0
 8013272:	b2db      	uxtb	r3, r3
}
 8013274:	4618      	mov	r0, r3
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr

08013280 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	601a      	str	r2, [r3, #0]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2200      	movs	r2, #0
 8013292:	711a      	strb	r2, [r3, #4]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	3308      	adds	r3, #8
 8013298:	4618      	mov	r0, r3
 801329a:	f7ff fe8b 	bl	8012fb4 <_ZN18SimpleStringBufferC1Ev>
{
}
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	4618      	mov	r0, r3
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80132a8:	b5b0      	push	{r4, r5, r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af02      	add	r7, sp, #8
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	607a      	str	r2, [r7, #4]
 80132b4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f103 0408 	add.w	r4, r3, #8
 80132bc:	687d      	ldr	r5, [r7, #4]
 80132be:	6a3b      	ldr	r3, [r7, #32]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	3314      	adds	r3, #20
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	6a38      	ldr	r0, [r7, #32]
 80132c8:	4798      	blx	r3
 80132ca:	4603      	mov	r3, r0
 80132cc:	9301      	str	r3, [sp, #4]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	9300      	str	r3, [sp, #0]
 80132d2:	462b      	mov	r3, r5
 80132d4:	68ba      	ldr	r2, [r7, #8]
 80132d6:	4904      	ldr	r1, [pc, #16]	; (80132e8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80132d8:	4620      	mov	r0, r4
 80132da:	f7ff fe97 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80132de:	bf00      	nop
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bdb0      	pop	{r4, r5, r7, pc}
 80132e6:	bf00      	nop
 80132e8:	08022114 	.word	0x08022114

080132ec <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80132ec:	b5b0      	push	{r4, r5, r7, lr}
 80132ee:	b086      	sub	sp, #24
 80132f0:	af02      	add	r7, sp, #8
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	607a      	str	r2, [r7, #4]
 80132f8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	f103 0408 	add.w	r4, r3, #8
 8013300:	687d      	ldr	r5, [r7, #4]
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	3318      	adds	r3, #24
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6838      	ldr	r0, [r7, #0]
 801330c:	4798      	blx	r3
 801330e:	4603      	mov	r3, r0
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	462b      	mov	r3, r5
 8013314:	68ba      	ldr	r2, [r7, #8]
 8013316:	4904      	ldr	r1, [pc, #16]	; (8013328 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8013318:	4620      	mov	r0, r4
 801331a:	f7ff fe77 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 801331e:	bf00      	nop
 8013320:	3710      	adds	r7, #16
 8013322:	46bd      	mov	sp, r7
 8013324:	bdb0      	pop	{r4, r5, r7, pc}
 8013326:	bf00      	nop
 8013328:	0802214c 	.word	0x0802214c

0801332c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	3308      	adds	r3, #8
 8013338:	4903      	ldr	r1, [pc, #12]	; (8013348 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801333a:	4618      	mov	r0, r3
 801333c:	f7ff fe66 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013340:	bf00      	nop
 8013342:	3708      	adds	r7, #8
 8013344:	46bd      	mov	sp, r7
 8013346:	bd80      	pop	{r7, pc}
 8013348:	0802217c 	.word	0x0802217c

0801334c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b084      	sub	sp, #16
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2200      	movs	r2, #0
 8013358:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2200      	movs	r2, #0
 801335e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8013360:	2367      	movs	r3, #103	; 0x67
 8013362:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	f203 1311 	addw	r3, r3, #273	; 0x111
 801336a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f103 0208 	add.w	r2, r3, #8
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013378:	4619      	mov	r1, r3
 801337a:	4610      	mov	r0, r2
 801337c:	f7ff ff37 	bl	80131ee <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8013380:	bf00      	nop
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8013388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801338a:	b089      	sub	sp, #36	; 0x24
 801338c:	af04      	add	r7, sp, #16
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d102      	bne.n	80133a0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801339a:	68f8      	ldr	r0, [r7, #12]
 801339c:	f000 f882 	bl	80134a4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	1c5a      	adds	r2, r3, #1
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f103 0508 	add.w	r5, r3, #8
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80133c2:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	695a      	ldr	r2, [r3, #20]
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	695b      	ldr	r3, [r3, #20]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	3314      	adds	r3, #20
 80133d0:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80133d2:	4610      	mov	r0, r2
 80133d4:	4798      	blx	r3
 80133d6:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80133dc:	9303      	str	r3, [sp, #12]
 80133de:	9202      	str	r2, [sp, #8]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	9201      	str	r2, [sp, #4]
 80133e4:	9400      	str	r4, [sp, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	4632      	mov	r2, r6
 80133ea:	4915      	ldr	r1, [pc, #84]	; (8013440 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80133ec:	4628      	mov	r0, r5
 80133ee:	f7ff fe0d 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f103 0008 	add.w	r0, r3, #8
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	6899      	ldr	r1, [r3, #8]
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	461a      	mov	r2, r3
 8013402:	f7ff fe53 	bl	80130ac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	695a      	ldr	r2, [r3, #20]
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	695b      	ldr	r3, [r3, #20]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	3314      	adds	r3, #20
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4610      	mov	r0, r2
 8013416:	4798      	blx	r3
 8013418:	4603      	mov	r3, r0
 801341a:	490a      	ldr	r1, [pc, #40]	; (8013444 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 801341c:	4618      	mov	r0, r3
 801341e:	f7f6 f887 	bl	8009530 <_ZN12SimpleString6StrCmpEPKcS1_>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	bf0c      	ite	eq
 8013428:	2301      	moveq	r3, #1
 801342a:	2300      	movne	r3, #0
 801342c:	b2db      	uxtb	r3, r3
 801342e:	2b00      	cmp	r3, #0
 8013430:	d002      	beq.n	8013438 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2201      	movs	r2, #1
 8013436:	711a      	strb	r2, [r3, #4]
}
 8013438:	bf00      	nop
 801343a:	3714      	adds	r7, #20
 801343c:	46bd      	mov	sp, r7
 801343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013440:	0802219c 	.word	0x0802219c
 8013444:	080221fc 	.word	0x080221fc

08013448 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b084      	sub	sp, #16
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d103      	bne.n	8013460 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f7ff ff67 	bl	801332c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801345e:	e01e      	b.n	801349e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	3308      	adds	r3, #8
 8013464:	4618      	mov	r0, r3
 8013466:	f7ff fef3 	bl	8013250 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801346a:	4603      	mov	r3, r0
 801346c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	3308      	adds	r3, #8
 8013472:	4618      	mov	r0, r3
 8013474:	f7ff fedb 	bl	801322e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8013478:	7bfb      	ldrb	r3, [r7, #15]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d002      	beq.n	8013484 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f820 	bl	80134c4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	4619      	mov	r1, r3
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f000 f82a 	bl	80134e4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	791b      	ldrb	r3, [r3, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d002      	beq.n	801349e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 f839 	bl	8013510 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801349e:	3710      	adds	r7, #16
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}

080134a4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	3308      	adds	r3, #8
 80134b0:	4903      	ldr	r1, [pc, #12]	; (80134c0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7ff fdaa 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80134b8:	bf00      	nop
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	08022204 	.word	0x08022204

080134c4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	3308      	adds	r3, #8
 80134d0:	4903      	ldr	r1, [pc, #12]	; (80134e0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7ff fd9a 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80134d8:	bf00      	nop
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	0802221c 	.word	0x0802221c

080134e4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f103 0008 	add.w	r0, r3, #8
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	4a04      	ldr	r2, [pc, #16]	; (8013508 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80134f8:	4904      	ldr	r1, [pc, #16]	; (801350c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80134fa:	f7ff fd87 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 80134fe:	bf00      	nop
 8013500:	3708      	adds	r7, #8
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	08022264 	.word	0x08022264
 801350c:	0802227c 	.word	0x0802227c

08013510 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	3308      	adds	r3, #8
 801351c:	4903      	ldr	r1, [pc, #12]	; (801352c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801351e:	4618      	mov	r0, r3
 8013520:	f7ff fd74 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013524:	bf00      	nop
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	08022284 	.word	0x08022284

08013530 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08a      	sub	sp, #40	; 0x28
 8013534:	af06      	add	r7, sp, #24
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801353e:	f7f9 fe8d 	bl	800d25c <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8013542:	4602      	mov	r2, r0
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	9305      	str	r3, [sp, #20]
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	9304      	str	r3, [sp, #16]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	9303      	str	r3, [sp, #12]
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	9302      	str	r3, [sp, #8]
 8013554:	9201      	str	r2, [sp, #4]
 8013556:	2300      	movs	r3, #0
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	2300      	movs	r3, #0
 801355c:	4a04      	ldr	r2, [pc, #16]	; (8013570 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801355e:	4905      	ldr	r1, [pc, #20]	; (8013574 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8013560:	68f8      	ldr	r0, [r7, #12]
 8013562:	f000 f855 	bl	8013610 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013566:	bf00      	nop
 8013568:	3710      	adds	r7, #16
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	080220e0 	.word	0x080220e0
 8013574:	08022398 	.word	0x08022398

08013578 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013578:	b590      	push	{r4, r7, lr}
 801357a:	b08b      	sub	sp, #44	; 0x2c
 801357c:	af06      	add	r7, sp, #24
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
 8013584:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	68d8      	ldr	r0, [r3, #12]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	691c      	ldr	r4, [r3, #16]
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	68ba      	ldr	r2, [r7, #8]
 8013594:	6952      	ldr	r2, [r2, #20]
 8013596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013598:	9105      	str	r1, [sp, #20]
 801359a:	6a39      	ldr	r1, [r7, #32]
 801359c:	9104      	str	r1, [sp, #16]
 801359e:	6839      	ldr	r1, [r7, #0]
 80135a0:	9103      	str	r1, [sp, #12]
 80135a2:	6879      	ldr	r1, [r7, #4]
 80135a4:	9102      	str	r1, [sp, #8]
 80135a6:	9201      	str	r2, [sp, #4]
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	4623      	mov	r3, r4
 80135ac:	4602      	mov	r2, r0
 80135ae:	4904      	ldr	r1, [pc, #16]	; (80135c0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80135b0:	68f8      	ldr	r0, [r7, #12]
 80135b2:	f000 f82d 	bl	8013610 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80135b6:	bf00      	nop
 80135b8:	3714      	adds	r7, #20
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd90      	pop	{r4, r7, pc}
 80135be:	bf00      	nop
 80135c0:	080223bc 	.word	0x080223bc

080135c4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b08b      	sub	sp, #44	; 0x2c
 80135c8:	af06      	add	r7, sp, #24
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	68d8      	ldr	r0, [r3, #12]
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	691c      	ldr	r4, [r3, #16]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	68ba      	ldr	r2, [r7, #8]
 80135e0:	6952      	ldr	r2, [r2, #20]
 80135e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135e4:	9105      	str	r1, [sp, #20]
 80135e6:	6a39      	ldr	r1, [r7, #32]
 80135e8:	9104      	str	r1, [sp, #16]
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	9103      	str	r1, [sp, #12]
 80135ee:	6879      	ldr	r1, [r7, #4]
 80135f0:	9102      	str	r1, [sp, #8]
 80135f2:	9201      	str	r2, [sp, #4]
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	4623      	mov	r3, r4
 80135f8:	4602      	mov	r2, r0
 80135fa:	4904      	ldr	r1, [pc, #16]	; (801360c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f000 f807 	bl	8013610 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013602:	bf00      	nop
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	bd90      	pop	{r4, r7, pc}
 801360a:	bf00      	nop
 801360c:	080223e4 	.word	0x080223e4

08013610 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013610:	b590      	push	{r4, r7, lr}
 8013612:	b087      	sub	sp, #28
 8013614:	af02      	add	r7, sp, #8
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
 801361c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	3308      	adds	r3, #8
 8013622:	68ba      	ldr	r2, [r7, #8]
 8013624:	4910      	ldr	r1, [pc, #64]	; (8013668 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff fcf0 	bl	801300c <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 801362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362e:	9300      	str	r3, [sp, #0]
 8013630:	6a3b      	ldr	r3, [r7, #32]
 8013632:	683a      	ldr	r2, [r7, #0]
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f7ff fe36 	bl	80132a8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 801363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013642:	68f8      	ldr	r0, [r7, #12]
 8013644:	f7ff fe52 	bl	80132ec <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8013648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3308      	adds	r3, #8
 801364e:	681c      	ldr	r4, [r3, #0]
 8013650:	68f8      	ldr	r0, [r7, #12]
 8013652:	f000 f80b 	bl	801366c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8013656:	4603      	mov	r3, r0
 8013658:	4619      	mov	r1, r3
 801365a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801365c:	47a0      	blx	r4
}
 801365e:	bf00      	nop
 8013660:	3714      	adds	r7, #20
 8013662:	46bd      	mov	sp, r7
 8013664:	bd90      	pop	{r4, r7, pc}
 8013666:	bf00      	nop
 8013668:	08022410 	.word	0x08022410

0801366c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	3308      	adds	r3, #8
 8013678:	4618      	mov	r0, r3
 801367a:	f7ff fdad 	bl	80131d8 <_ZN18SimpleStringBuffer8toStringEv>
 801367e:	4603      	mov	r3, r0
}
 8013680:	4618      	mov	r0, r3
 8013682:	3708      	adds	r7, #8
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3308      	adds	r3, #8
 8013694:	4618      	mov	r0, r3
 8013696:	f7ff fca7 	bl	8012fe8 <_ZN18SimpleStringBuffer5clearEv>
}
 801369a:	bf00      	nop
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 80136a2:	b480      	push	{r7}
 80136a4:	b085      	sub	sp, #20
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	60f8      	str	r0, [r7, #12]
 80136aa:	60b9      	str	r1, [r7, #8]
 80136ac:	607a      	str	r2, [r7, #4]
 80136ae:	603b      	str	r3, [r7, #0]
    number_ = number;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	687a      	ldr	r2, [r7, #4]
 80136b4:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	68ba      	ldr	r2, [r7, #8]
 80136ba:	609a      	str	r2, [r3, #8]
    size_ = size;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	683a      	ldr	r2, [r7, #0]
 80136c0:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	69ba      	ldr	r2, [r7, #24]
 80136c6:	615a      	str	r2, [r3, #20]
    period_ = period;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	7f3a      	ldrb	r2, [r7, #28]
 80136cc:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80136d4:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136da:	60da      	str	r2, [r3, #12]
    line_ = line;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136e0:	611a      	str	r2, [r3, #16]
}
 80136e2:	bf00      	nop
 80136e4:	3714      	adds	r7, #20
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr

080136ee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80136ee:	b480      	push	{r7}
 80136f0:	b085      	sub	sp, #20
 80136f2:	af00      	add	r7, sp, #0
 80136f4:	60f8      	str	r0, [r7, #12]
 80136f6:	60b9      	str	r1, [r7, #8]
 80136f8:	4613      	mov	r3, r2
 80136fa:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80136fc:	79fb      	ldrb	r3, [r7, #7]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00b      	beq.n	801371a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	7e1b      	ldrb	r3, [r3, #24]
 8013706:	79fa      	ldrb	r2, [r7, #7]
 8013708:	429a      	cmp	r2, r3
 801370a:	d006      	beq.n	801371a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	7e1b      	ldrb	r3, [r3, #24]
 8013710:	2b01      	cmp	r3, #1
 8013712:	d004      	beq.n	801371e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8013714:	79fb      	ldrb	r3, [r7, #7]
 8013716:	2b02      	cmp	r3, #2
 8013718:	d101      	bne.n	801371e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801371a:	2301      	movs	r3, #1
 801371c:	e000      	b.n	8013720 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 801371e:	2300      	movs	r3, #0
}
 8013720:	4618      	mov	r0, r3
 8013722:	3714      	adds	r7, #20
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr

0801372c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 801372c:	b480      	push	{r7}
 801372e:	b083      	sub	sp, #12
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	61da      	str	r2, [r3, #28]
    head_ = node;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	683a      	ldr	r2, [r7, #0]
 8013742:	601a      	str	r2, [r3, #0]
}
 8013744:	bf00      	nop
 8013746:	370c      	adds	r7, #12
 8013748:	46bd      	mov	sp, r7
 801374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374e:	4770      	bx	lr

08013750 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8013750:	b480      	push	{r7}
 8013752:	b085      	sub	sp, #20
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8013760:	2300      	movs	r3, #0
 8013762:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d019      	beq.n	801379e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	689b      	ldr	r3, [r3, #8]
 801376e:	683a      	ldr	r2, [r7, #0]
 8013770:	429a      	cmp	r2, r3
 8013772:	d10e      	bne.n	8013792 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d005      	beq.n	8013786 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	69da      	ldr	r2, [r3, #28]
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	61da      	str	r2, [r3, #28]
                return cur;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	e00c      	b.n	80137a0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	69da      	ldr	r2, [r3, #28]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	601a      	str	r2, [r3, #0]
                return cur;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	e006      	b.n	80137a0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	69db      	ldr	r3, [r3, #28]
 801379a:	60fb      	str	r3, [r7, #12]
    while (cur) {
 801379c:	e7e2      	b.n	8013764 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3714      	adds	r7, #20
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b085      	sub	sp, #20
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d00a      	beq.n	80137d8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	683a      	ldr	r2, [r7, #0]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	d101      	bne.n	80137d0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	e004      	b.n	80137da <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	69db      	ldr	r3, [r3, #28]
 80137d4:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80137d6:	e7f1      	b.n	80137bc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3714      	adds	r7, #20
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr

080137e6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b086      	sub	sp, #24
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	60f8      	str	r0, [r7, #12]
 80137ee:	60b9      	str	r1, [r7, #8]
 80137f0:	4613      	mov	r3, r2
 80137f2:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	617b      	str	r3, [r7, #20]
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d00e      	beq.n	801381c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80137fe:	79fb      	ldrb	r3, [r7, #7]
 8013800:	461a      	mov	r2, r3
 8013802:	6979      	ldr	r1, [r7, #20]
 8013804:	68f8      	ldr	r0, [r7, #12]
 8013806:	f7ff ff72 	bl	80136ee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801380a:	4603      	mov	r3, r0
 801380c:	2b00      	cmp	r3, #0
 801380e:	d001      	beq.n	8013814 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	e004      	b.n	801381e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	69db      	ldr	r3, [r3, #28]
 8013818:	617b      	str	r3, [r7, #20]
 801381a:	e7ed      	b.n	80137f8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 801381c:	2300      	movs	r3, #0
}
 801381e:	4618      	mov	r0, r3
 8013820:	3718      	adds	r7, #24
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}

08013826 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8013826:	b580      	push	{r7, lr}
 8013828:	b082      	sub	sp, #8
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
 801382e:	460b      	mov	r3, r1
 8013830:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	78fa      	ldrb	r2, [r7, #3]
 8013838:	4619      	mov	r1, r3
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7ff ffd3 	bl	80137e6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013840:	4603      	mov	r3, r0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3708      	adds	r7, #8
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b084      	sub	sp, #16
 801384e:	af00      	add	r7, sp, #0
 8013850:	60f8      	str	r0, [r7, #12]
 8013852:	60b9      	str	r1, [r7, #8]
 8013854:	4613      	mov	r3, r2
 8013856:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	69db      	ldr	r3, [r3, #28]
 801385c:	79fa      	ldrb	r2, [r7, #7]
 801385e:	4619      	mov	r1, r3
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7ff ffc0 	bl	80137e6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013866:	4603      	mov	r3, r0
}
 8013868:	4618      	mov	r0, r3
 801386a:	3710      	adds	r7, #16
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	460b      	mov	r3, r1
 801387a:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801387c:	2300      	movs	r3, #0
 801387e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	60bb      	str	r3, [r7, #8]
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d00f      	beq.n	80138ac <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 801388c:	78fb      	ldrb	r3, [r7, #3]
 801388e:	461a      	mov	r2, r3
 8013890:	68b9      	ldr	r1, [r7, #8]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff ff2b 	bl	80136ee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013898:	4603      	mov	r3, r0
 801389a:	2b00      	cmp	r3, #0
 801389c:	d002      	beq.n	80138a4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	3301      	adds	r3, #1
 80138a2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	69db      	ldr	r3, [r3, #28]
 80138a8:	60bb      	str	r3, [r7, #8]
 80138aa:	e7ec      	b.n	8013886 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80138ac:	68fb      	ldr	r3, [r7, #12]
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
	...

080138b8 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80138c2:	6839      	ldr	r1, [r7, #0]
 80138c4:	4b09      	ldr	r3, [pc, #36]	; (80138ec <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80138c6:	fba3 2301 	umull	r2, r3, r3, r1
 80138ca:	1aca      	subs	r2, r1, r3
 80138cc:	0852      	lsrs	r2, r2, #1
 80138ce:	4413      	add	r3, r2
 80138d0:	099a      	lsrs	r2, r3, #6
 80138d2:	4613      	mov	r3, r2
 80138d4:	00db      	lsls	r3, r3, #3
 80138d6:	4413      	add	r3, r2
 80138d8:	00db      	lsls	r3, r3, #3
 80138da:	4413      	add	r3, r2
 80138dc:	1aca      	subs	r2, r1, r3
 80138de:	4613      	mov	r3, r2
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	c0e07039 	.word	0xc0e07039

080138f0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	4619      	mov	r1, r3
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7ff ffd9 	bl	80138b8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013906:	4603      	mov	r3, r0
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	4413      	add	r3, r2
 801390e:	6839      	ldr	r1, [r7, #0]
 8013910:	4618      	mov	r0, r3
 8013912:	f7ff ff0b 	bl	801372c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8013916:	bf00      	nop
 8013918:	3708      	adds	r7, #8
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}

0801391e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 801391e:	b580      	push	{r7, lr}
 8013920:	b082      	sub	sp, #8
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
 8013926:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8013928:	6839      	ldr	r1, [r7, #0]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff ffc4 	bl	80138b8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013930:	4603      	mov	r3, r0
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	4413      	add	r3, r2
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff ff08 	bl	8013750 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8013940:	4603      	mov	r3, r0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3708      	adds	r7, #8
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b082      	sub	sp, #8
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
 8013952:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8013954:	6839      	ldr	r1, [r7, #0]
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f7ff ffae 	bl	80138b8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801395c:	4603      	mov	r3, r0
 801395e:	009b      	lsls	r3, r3, #2
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	4413      	add	r3, r2
 8013964:	6839      	ldr	r1, [r7, #0]
 8013966:	4618      	mov	r0, r3
 8013968:	f7ff ff20 	bl	80137ac <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 801396c:	4603      	mov	r3, r0
}
 801396e:	4618      	mov	r0, r3
 8013970:	3708      	adds	r7, #8
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}

08013976 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8013976:	b580      	push	{r7, lr}
 8013978:	b084      	sub	sp, #16
 801397a:	af00      	add	r7, sp, #0
 801397c:	6078      	str	r0, [r7, #4]
 801397e:	460b      	mov	r3, r1
 8013980:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8013982:	2300      	movs	r3, #0
 8013984:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8013986:	2300      	movs	r3, #0
 8013988:	60bb      	str	r3, [r7, #8]
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	2b48      	cmp	r3, #72	; 0x48
 801398e:	dc10      	bgt.n	80139b2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	4413      	add	r3, r2
 8013998:	78fa      	ldrb	r2, [r7, #3]
 801399a:	4611      	mov	r1, r2
 801399c:	4618      	mov	r0, r3
 801399e:	f7ff ff67 	bl	8013870 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 80139a2:	4602      	mov	r2, r0
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	4413      	add	r3, r2
 80139a8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	3301      	adds	r3, #1
 80139ae:	60bb      	str	r3, [r7, #8]
 80139b0:	e7eb      	b.n	801398a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80139b2:	68fb      	ldr	r3, [r7, #12]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b084      	sub	sp, #16
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	460b      	mov	r3, r1
 80139c6:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80139c8:	2300      	movs	r3, #0
 80139ca:	60fb      	str	r3, [r7, #12]
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2b48      	cmp	r3, #72	; 0x48
 80139d0:	dc12      	bgt.n	80139f8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	009b      	lsls	r3, r3, #2
 80139d6:	687a      	ldr	r2, [r7, #4]
 80139d8:	4413      	add	r3, r2
 80139da:	78fa      	ldrb	r2, [r7, #3]
 80139dc:	4611      	mov	r1, r2
 80139de:	4618      	mov	r0, r3
 80139e0:	f7ff ff21 	bl	8013826 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80139e4:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d001      	beq.n	80139f0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	e004      	b.n	80139fa <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	3301      	adds	r3, #1
 80139f4:	60fb      	str	r3, [r7, #12]
 80139f6:	e7e9      	b.n	80139cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80139f8:	2300      	movs	r3, #0
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3710      	adds	r7, #16
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}

08013a02 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b086      	sub	sp, #24
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	60f8      	str	r0, [r7, #12]
 8013a0a:	60b9      	str	r1, [r7, #8]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	4619      	mov	r1, r3
 8013a16:	68f8      	ldr	r0, [r7, #12]
 8013a18:	f7ff ff4e 	bl	80138b8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8013a1c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	009b      	lsls	r3, r3, #2
 8013a22:	68fa      	ldr	r2, [r7, #12]
 8013a24:	4413      	add	r3, r2
 8013a26:	79fa      	ldrb	r2, [r7, #7]
 8013a28:	68b9      	ldr	r1, [r7, #8]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7ff ff0d 	bl	801384a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8013a30:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d001      	beq.n	8013a3c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	e019      	b.n	8013a70 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	617b      	str	r3, [r7, #20]
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	2b48      	cmp	r3, #72	; 0x48
 8013a46:	d812      	bhi.n	8013a6e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	009b      	lsls	r3, r3, #2
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	4413      	add	r3, r2
 8013a50:	79fa      	ldrb	r2, [r7, #7]
 8013a52:	4611      	mov	r1, r2
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7ff fee6 	bl	8013826 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8013a5a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d001      	beq.n	8013a66 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	e004      	b.n	8013a70 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	617b      	str	r3, [r7, #20]
 8013a6c:	e7e9      	b.n	8013a42 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8013a6e:	2300      	movs	r3, #0
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3718      	adds	r7, #24
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8013a78:	b5b0      	push	{r4, r5, r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2448      	movs	r4, #72	; 0x48
 8013a84:	461d      	mov	r5, r3
 8013a86:	2c00      	cmp	r4, #0
 8013a88:	db05      	blt.n	8013a96 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f7ff fa84 	bl	8012f98 <_ZN22MemoryLeakDetectorListC1Ev>
 8013a90:	3504      	adds	r5, #4
 8013a92:	3c01      	subs	r4, #1
 8013a94:	e7f7      	b.n	8013a86 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3708      	adds	r7, #8
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bdb0      	pop	{r4, r5, r7, pc}

08013aa0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8013aa0:	b590      	push	{r4, r7, lr}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
 8013aaa:	4a1d      	ldr	r2, [pc, #116]	; (8013b20 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	601a      	str	r2, [r3, #0]
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	330c      	adds	r3, #12
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7ff fbe3 	bl	8013280 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ac0:	331c      	adds	r3, #28
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7ff ffd8 	bl	8013a78 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013ace:	2201      	movs	r2, #1
 8013ad0:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013ad8:	3304      	adds	r3, #4
 8013ada:	2201      	movs	r2, #1
 8013adc:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013aea:	3308      	adds	r3, #8
 8013aec:	2200      	movs	r2, #0
 8013aee:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	683a      	ldr	r2, [r7, #0]
 8013af4:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8013af6:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8013afa:	490a      	ldr	r1, [pc, #40]	; (8013b24 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8013afc:	2004      	movs	r0, #4
 8013afe:	f7f3 fb17 	bl	8007130 <_ZnwjPKci>
 8013b02:	4604      	mov	r4, r0
 8013b04:	4620      	mov	r0, r4
 8013b06:	f7f5 fbe7 	bl	80092d8 <_ZN11SimpleMutexC1Ev>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013b10:	330c      	adds	r3, #12
 8013b12:	601c      	str	r4, [r3, #0]
}
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	4618      	mov	r0, r3
 8013b18:	370c      	adds	r7, #12
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd90      	pop	{r4, r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	080241ec 	.word	0x080241ec
 8013b24:	08022414 	.word	0x08022414

08013b28 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8013b28:	b590      	push	{r4, r7, lr}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	4a0e      	ldr	r2, [pc, #56]	; (8013b6c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013b3c:	330c      	adds	r3, #12
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00d      	beq.n	8013b60 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013b4a:	330c      	adds	r3, #12
 8013b4c:	681c      	ldr	r4, [r3, #0]
 8013b4e:	2c00      	cmp	r4, #0
 8013b50:	d006      	beq.n	8013b60 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8013b52:	4620      	mov	r0, r4
 8013b54:	f7f5 fbd2 	bl	80092fc <_ZN11SimpleMutexD1Ev>
 8013b58:	2104      	movs	r1, #4
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	f7f3 fafc 	bl	8007158 <_ZdlPvj>
    }
}
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4618      	mov	r0, r3
 8013b64:	370c      	adds	r7, #12
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd90      	pop	{r4, r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	080241ec 	.word	0x080241ec

08013b70 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
}
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff ffd5 	bl	8013b28 <_ZN18MemoryLeakDetectorD1Ev>
 8013b7e:	f241 1150 	movw	r1, #4432	; 0x1150
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f7f3 fae8 	bl	8007158 <_ZdlPvj>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3708      	adds	r7, #8
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b082      	sub	sp, #8
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	330c      	adds	r3, #12
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7ff fd72 	bl	8013688 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2203      	movs	r2, #3
 8013ba8:	721a      	strb	r2, [r3, #8]
}
 8013baa:	bf00      	nop
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}

08013bb2 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8013bb2:	b480      	push	{r7}
 8013bb4:	b083      	sub	sp, #12
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2202      	movs	r2, #2
 8013bbe:	721a      	strb	r2, [r3, #8]
}
 8013bc0:	bf00      	nop
 8013bc2:	370c      	adds	r7, #12
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8013bcc:	b480      	push	{r7}
 8013bce:	b083      	sub	sp, #12
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2202      	movs	r2, #2
 8013bd8:	721a      	strb	r2, [r3, #8]
}
 8013bda:	bf00      	nop
 8013bdc:	370c      	adds	r7, #12
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr

08013be6 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8013be6:	b480      	push	{r7}
 8013be8:	b083      	sub	sp, #12
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]
    return mutex_;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013bf4:	330c      	adds	r3, #12
 8013bf6:	681b      	ldr	r3, [r3, #0]
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b083      	sub	sp, #12
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f023 0303 	bic.w	r3, r3, #3
 8013c12:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	370c      	adds	r7, #12
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr

08013c20 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	3303      	adds	r3, #3
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7ff ffe8 	bl	8013c04 <_ZL31calculateVoidPointerAlignedSizej>
 8013c34:	4603      	mov	r3, r0
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3708      	adds	r7, #8
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}

08013c3e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8013c3e:	b580      	push	{r7, lr}
 8013c40:	b084      	sub	sp, #16
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	60f8      	str	r0, [r7, #12]
 8013c46:	60b9      	str	r1, [r7, #8]
 8013c48:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8013c4a:	6879      	ldr	r1, [r7, #4]
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f7ff ffe7 	bl	8013c20 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8013c52:	4602      	mov	r2, r0
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	4413      	add	r3, r2
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3710      	adds	r7, #16
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b08a      	sub	sp, #40	; 0x28
 8013c64:	af06      	add	r7, sp, #24
 8013c66:	60f8      	str	r0, [r7, #12]
 8013c68:	60b9      	str	r1, [r7, #8]
 8013c6a:	607a      	str	r2, [r7, #4]
 8013c6c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013c74:	3304      	adds	r3, #4
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	1c51      	adds	r1, r2, #1
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013c80:	3304      	adds	r3, #4
 8013c82:	6019      	str	r1, [r3, #0]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	7a19      	ldrb	r1, [r3, #8]
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013c8e:	3308      	adds	r3, #8
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	6a38      	ldr	r0, [r7, #32]
 8013c94:	9004      	str	r0, [sp, #16]
 8013c96:	69f8      	ldr	r0, [r7, #28]
 8013c98:	9003      	str	r0, [sp, #12]
 8013c9a:	9302      	str	r3, [sp, #8]
 8013c9c:	9101      	str	r1, [sp, #4]
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	6879      	ldr	r1, [r7, #4]
 8013ca6:	68b8      	ldr	r0, [r7, #8]
 8013ca8:	f7ff fcfb 	bl	80136a2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	689a      	ldr	r2, [r3, #8]
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	68f8      	ldr	r0, [r7, #12]
 8013cba:	f000 f861 	bl	8013d80 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cc4:	331c      	adds	r3, #28
 8013cc6:	68b9      	ldr	r1, [r7, #8]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7ff fe11 	bl	80138f0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8013cce:	bf00      	nop
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}

08013cd6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8013cd6:	b580      	push	{r7, lr}
 8013cd8:	b08a      	sub	sp, #40	; 0x28
 8013cda:	af04      	add	r7, sp, #16
 8013cdc:	60f8      	str	r0, [r7, #12]
 8013cde:	60b9      	str	r1, [r7, #8]
 8013ce0:	607a      	str	r2, [r7, #4]
 8013ce2:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8013ce4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ce8:	9302      	str	r3, [sp, #8]
 8013cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cec:	9301      	str	r3, [sp, #4]
 8013cee:	6a3b      	ldr	r3, [r7, #32]
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	68b9      	ldr	r1, [r7, #8]
 8013cf8:	68f8      	ldr	r0, [r7, #12]
 8013cfa:	f000 f96f 	bl	8013fdc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8013cfe:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d101      	bne.n	8013d0a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8013d06:	2300      	movs	r3, #0
 8013d08:	e017      	b.n	8013d3a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8013d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d0e:	9300      	str	r3, [sp, #0]
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	683a      	ldr	r2, [r7, #0]
 8013d14:	68b9      	ldr	r1, [r7, #8]
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f000 f98a 	bl	8014030 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8013d1c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8013d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d20:	9302      	str	r3, [sp, #8]
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	9301      	str	r3, [sp, #4]
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	697a      	ldr	r2, [r7, #20]
 8013d2e:	6939      	ldr	r1, [r7, #16]
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f7ff ff95 	bl	8013c60 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	689b      	ldr	r3, [r3, #8]
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3718      	adds	r7, #24
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
	...

08013d44 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d54:	331c      	adds	r3, #28
 8013d56:	6839      	ldr	r1, [r7, #0]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7ff fdf6 	bl	801394a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8013d5e:	60f8      	str	r0, [r7, #12]
  if (node)
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d006      	beq.n	8013d74 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	6812      	ldr	r2, [r2, #0]
 8013d6e:	21cd      	movs	r1, #205	; 0xcd
 8013d70:	6838      	ldr	r0, [r7, #0]
 8013d72:	4798      	blx	r3
#endif
}
 8013d74:	bf00      	nop
 8013d76:	3710      	adds	r7, #16
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	200000d4 	.word	0x200000d4

08013d80 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b085      	sub	sp, #20
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	60fb      	str	r3, [r7, #12]
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	2b02      	cmp	r3, #2
 8013d92:	d812      	bhi.n	8013dba <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8013d94:	68f9      	ldr	r1, [r7, #12]
 8013d96:	4b0c      	ldr	r3, [pc, #48]	; (8013dc8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8013d98:	fba3 2301 	umull	r2, r3, r3, r1
 8013d9c:	085a      	lsrs	r2, r3, #1
 8013d9e:	4613      	mov	r3, r2
 8013da0:	005b      	lsls	r3, r3, #1
 8013da2:	4413      	add	r3, r2
 8013da4:	1aca      	subs	r2, r1, r3
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	440b      	add	r3, r1
 8013dac:	4907      	ldr	r1, [pc, #28]	; (8013dcc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8013dae:	5c8a      	ldrb	r2, [r1, r2]
 8013db0:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	3301      	adds	r3, #1
 8013db6:	60fb      	str	r3, [r7, #12]
 8013db8:	e7e9      	b.n	8013d8e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8013dba:	bf00      	nop
 8013dbc:	3714      	adds	r7, #20
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr
 8013dc6:	bf00      	nop
 8013dc8:	aaaaaaab 	.word	0xaaaaaaab
 8013dcc:	080241e0 	.word	0x080241e0

08013dd0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b085      	sub	sp, #20
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8013dda:	2300      	movs	r3, #0
 8013ddc:	60fb      	str	r3, [r7, #12]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2b02      	cmp	r3, #2
 8013de2:	d816      	bhi.n	8013e12 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8013de4:	683a      	ldr	r2, [r7, #0]
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	4413      	add	r3, r2
 8013dea:	7818      	ldrb	r0, [r3, #0]
 8013dec:	68f9      	ldr	r1, [r7, #12]
 8013dee:	4b0c      	ldr	r3, [pc, #48]	; (8013e20 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8013df0:	fba3 2301 	umull	r2, r3, r3, r1
 8013df4:	085a      	lsrs	r2, r3, #1
 8013df6:	4613      	mov	r3, r2
 8013df8:	005b      	lsls	r3, r3, #1
 8013dfa:	4413      	add	r3, r2
 8013dfc:	1aca      	subs	r2, r1, r3
 8013dfe:	4b09      	ldr	r3, [pc, #36]	; (8013e24 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8013e00:	5c9b      	ldrb	r3, [r3, r2]
 8013e02:	4298      	cmp	r0, r3
 8013e04:	d001      	beq.n	8013e0a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8013e06:	2300      	movs	r3, #0
 8013e08:	e004      	b.n	8013e14 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	60fb      	str	r3, [r7, #12]
 8013e10:	e7e5      	b.n	8013dde <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8013e12:	2301      	movs	r3, #1
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3714      	adds	r7, #20
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr
 8013e20:	aaaaaaab 	.word	0xaaaaaaab
 8013e24:	080241e0 	.word	0x080241e0

08013e28 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b084      	sub	sp, #16
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d101      	bne.n	8013e40 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e013      	b.n	8013e68 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	f083 0301 	eor.w	r3, r3, #1
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d001      	beq.n	8013e56 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8013e52:	2301      	movs	r3, #1
 8013e54:	e008      	b.n	8013e68 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	331c      	adds	r3, #28
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	68b9      	ldr	r1, [r7, #8]
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	4798      	blx	r3
 8013e64:	4603      	mov	r3, r0
 8013e66:	bf00      	nop
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3710      	adds	r7, #16
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}

08013e70 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8013e70:	b590      	push	{r4, r7, lr}
 8013e72:	b087      	sub	sp, #28
 8013e74:	af02      	add	r7, sp, #8
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]
 8013e7c:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	695a      	ldr	r2, [r3, #20]
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	695b      	ldr	r3, [r3, #20]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	3328      	adds	r3, #40	; 0x28
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4610      	mov	r0, r2
 8013e8e:	4798      	blx	r3
 8013e90:	4604      	mov	r4, r0
 8013e92:	6a3b      	ldr	r3, [r7, #32]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	3328      	adds	r3, #40	; 0x28
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	6a38      	ldr	r0, [r7, #32]
 8013e9c:	4798      	blx	r3
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	4621      	mov	r1, r4
 8013ea4:	68f8      	ldr	r0, [r7, #12]
 8013ea6:	f7ff ffbf 	bl	8013e28 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	f083 0301 	eor.w	r3, r3, #1
 8013eb0:	b2db      	uxtb	r3, r3
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d014      	beq.n	8013ee0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f103 040c 	add.w	r4, r3, #12
 8013ebc:	6a3b      	ldr	r3, [r7, #32]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	3328      	adds	r3, #40	; 0x28
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	6a38      	ldr	r0, [r7, #32]
 8013ec6:	4798      	blx	r3
 8013ec8:	4602      	mov	r2, r0
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	9301      	str	r3, [sp, #4]
 8013ed0:	9200      	str	r2, [sp, #0]
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	68b9      	ldr	r1, [r7, #8]
 8013ed8:	4620      	mov	r0, r4
 8013eda:	f7ff fb4d 	bl	8013578 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8013ede:	e02e      	b.n	8013f3e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	689a      	ldr	r2, [r3, #8]
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	4413      	add	r3, r2
 8013eea:	4619      	mov	r1, r3
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f7ff ff6f 	bl	8013dd0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	f083 0301 	eor.w	r3, r3, #1
 8013ef8:	b2db      	uxtb	r3, r3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d014      	beq.n	8013f28 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	f103 040c 	add.w	r4, r3, #12
 8013f04:	6a3b      	ldr	r3, [r7, #32]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	3328      	adds	r3, #40	; 0x28
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	6a38      	ldr	r0, [r7, #32]
 8013f0e:	4798      	blx	r3
 8013f10:	4602      	mov	r2, r0
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	685b      	ldr	r3, [r3, #4]
 8013f16:	9301      	str	r3, [sp, #4]
 8013f18:	9200      	str	r2, [sp, #0]
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	68b9      	ldr	r1, [r7, #8]
 8013f20:	4620      	mov	r0, r4
 8013f22:	f7ff fb4f 	bl	80135c4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8013f26:	e00a      	b.n	8013f3e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8013f28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d006      	beq.n	8013f3e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8013f30:	6a3b      	ldr	r3, [r7, #32]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	3324      	adds	r3, #36	; 0x24
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	68b9      	ldr	r1, [r7, #8]
 8013f3a:	6a38      	ldr	r0, [r7, #32]
 8013f3c:	4798      	blx	r3
}
 8013f3e:	bf00      	nop
 8013f40:	3714      	adds	r7, #20
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd90      	pop	{r4, r7, pc}
	...

08013f48 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af02      	add	r7, sp, #8
 8013f4e:	60f8      	str	r0, [r7, #12]
 8013f50:	60b9      	str	r1, [r7, #8]
 8013f52:	607a      	str	r2, [r7, #4]
 8013f54:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8013f56:	4b08      	ldr	r3, [pc, #32]	; (8013f78 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	78fb      	ldrb	r3, [r7, #3]
 8013f5c:	9301      	str	r3, [sp, #4]
 8013f5e:	2300      	movs	r3, #0
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	4613      	mov	r3, r2
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	68b9      	ldr	r1, [r7, #8]
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f000 f87f 	bl	801406c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8013f6e:	4603      	mov	r3, r0
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3710      	adds	r7, #16
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	200000fc 	.word	0x200000fc

08013f7c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b085      	sub	sp, #20
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	607a      	str	r2, [r7, #4]
 8013f88:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8013f8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d00e      	beq.n	8013fb0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	3308      	adds	r3, #8
 8013f98:	681c      	ldr	r4, [r3, #0]
 8013f9a:	6879      	ldr	r1, [r7, #4]
 8013f9c:	68f8      	ldr	r0, [r7, #12]
 8013f9e:	f7ff fe3f 	bl	8013c20 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8013fa2:	4601      	mov	r1, r0
 8013fa4:	6a3b      	ldr	r3, [r7, #32]
 8013fa6:	683a      	ldr	r2, [r7, #0]
 8013fa8:	68b8      	ldr	r0, [r7, #8]
 8013faa:	47a0      	blx	r4
 8013fac:	4603      	mov	r3, r0
 8013fae:	e010      	b.n	8013fd2 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	681c      	ldr	r4, [r3, #0]
 8013fb8:	6879      	ldr	r1, [r7, #4]
 8013fba:	68f8      	ldr	r0, [r7, #12]
 8013fbc:	f7ff fe30 	bl	8013c20 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	f103 0120 	add.w	r1, r3, #32
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	683a      	ldr	r2, [r7, #0]
 8013fca:	68b8      	ldr	r0, [r7, #8]
 8013fcc:	47a0      	blx	r4
 8013fce:	4603      	mov	r3, r0
 8013fd0:	bf00      	nop
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3714      	adds	r7, #20
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd90      	pop	{r4, r7, pc}
	...

08013fdc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8013fdc:	b590      	push	{r4, r7, lr}
 8013fde:	b085      	sub	sp, #20
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	607a      	str	r2, [r7, #4]
 8013fe8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8013fea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00b      	beq.n	801400a <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8013ff2:	4b0e      	ldr	r3, [pc, #56]	; (801402c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8013ff4:	681c      	ldr	r4, [r3, #0]
 8013ff6:	6839      	ldr	r1, [r7, #0]
 8013ff8:	68f8      	ldr	r0, [r7, #12]
 8013ffa:	f7ff fe11 	bl	8013c20 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8013ffe:	4603      	mov	r3, r0
 8014000:	4619      	mov	r1, r3
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	47a0      	blx	r4
 8014006:	4603      	mov	r3, r0
 8014008:	e00c      	b.n	8014024 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 801400a:	4b08      	ldr	r3, [pc, #32]	; (801402c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 801400c:	681c      	ldr	r4, [r3, #0]
 801400e:	6839      	ldr	r1, [r7, #0]
 8014010:	68f8      	ldr	r0, [r7, #12]
 8014012:	f7ff fe05 	bl	8013c20 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014016:	4603      	mov	r3, r0
 8014018:	3320      	adds	r3, #32
 801401a:	4619      	mov	r1, r3
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	47a0      	blx	r4
 8014020:	4603      	mov	r3, r0
 8014022:	bf00      	nop
}
 8014024:	4618      	mov	r0, r3
 8014026:	3714      	adds	r7, #20
 8014028:	46bd      	mov	sp, r7
 801402a:	bd90      	pop	{r4, r7, pc}
 801402c:	200000c8 	.word	0x200000c8

08014030 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	60f8      	str	r0, [r7, #12]
 8014038:	60b9      	str	r1, [r7, #8]
 801403a:	607a      	str	r2, [r7, #4]
 801403c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 801403e:	7e3b      	ldrb	r3, [r7, #24]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d008      	beq.n	8014056 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	3320      	adds	r3, #32
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2120      	movs	r1, #32
 801404e:	68b8      	ldr	r0, [r7, #8]
 8014050:	4798      	blx	r3
 8014052:	4603      	mov	r3, r0
 8014054:	e006      	b.n	8014064 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	6839      	ldr	r1, [r7, #0]
 801405a:	68f8      	ldr	r0, [r7, #12]
 801405c:	f7ff fdef 	bl	8013c3e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8014060:	4603      	mov	r3, r0
 8014062:	bf00      	nop
}
 8014064:	4618      	mov	r0, r3
 8014066:	3710      	adds	r7, #16
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b08a      	sub	sp, #40	; 0x28
 8014070:	af04      	add	r7, sp, #16
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	607a      	str	r2, [r7, #4]
 8014078:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801407a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801407e:	9301      	str	r3, [sp, #4]
 8014080:	6a3b      	ldr	r3, [r7, #32]
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	68b9      	ldr	r1, [r7, #8]
 801408a:	68f8      	ldr	r0, [r7, #12]
 801408c:	f7ff ff76 	bl	8013f7c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8014090:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d101      	bne.n	801409c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8014098:	2300      	movs	r3, #0
 801409a:	e017      	b.n	80140cc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 801409c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	68b9      	ldr	r1, [r7, #8]
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f7ff ffc1 	bl	8014030 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80140ae:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80140b0:	6a3b      	ldr	r3, [r7, #32]
 80140b2:	9302      	str	r3, [sp, #8]
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	697a      	ldr	r2, [r7, #20]
 80140c0:	6939      	ldr	r1, [r7, #16]
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f7ff fdcc 	bl	8013c60 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	689b      	ldr	r3, [r3, #8]
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3718      	adds	r7, #24
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80140d4:	b590      	push	{r4, r7, lr}
 80140d6:	b089      	sub	sp, #36	; 0x24
 80140d8:	af02      	add	r7, sp, #8
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	60b9      	str	r1, [r7, #8]
 80140de:	607a      	str	r2, [r7, #4]
 80140e0:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d03a      	beq.n	801415e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80140ee:	331c      	adds	r3, #28
 80140f0:	6879      	ldr	r1, [r7, #4]
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7ff fc13 	bl	801391e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80140f8:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10b      	bne.n	8014118 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f103 000c 	add.w	r0, r3, #12
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014110:	6839      	ldr	r1, [r7, #0]
 8014112:	f7ff fa0d 	bl	8013530 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8014116:	e023      	b.n	8014160 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8014118:	68b8      	ldr	r0, [r7, #8]
 801411a:	f7f8 ff95 	bl	800d048 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801411e:	4603      	mov	r3, r0
 8014120:	f083 0301 	eor.w	r3, r3, #1
 8014124:	b2db      	uxtb	r3, r3
 8014126:	2b00      	cmp	r3, #0
 8014128:	d01a      	beq.n	8014160 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014130:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	6979      	ldr	r1, [r7, #20]
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f7ff fe95 	bl	8013e70 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	330c      	adds	r3, #12
 801414c:	681c      	ldr	r4, [r3, #0]
 801414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014150:	9300      	str	r3, [sp, #0]
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	693a      	ldr	r2, [r7, #16]
 8014156:	6879      	ldr	r1, [r7, #4]
 8014158:	68b8      	ldr	r0, [r7, #8]
 801415a:	47a0      	blx	r4
 801415c:	e000      	b.n	8014160 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801415e:	bf00      	nop
    }
}
 8014160:	371c      	adds	r7, #28
 8014162:	46bd      	mov	sp, r7
 8014164:	bd90      	pop	{r4, r7, pc}
	...

08014168 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b086      	sub	sp, #24
 801416c:	af02      	add	r7, sp, #8
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8014176:	4b08      	ldr	r3, [pc, #32]	; (8014198 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	78fb      	ldrb	r3, [r7, #3]
 801417c:	9301      	str	r3, [sp, #4]
 801417e:	2300      	movs	r3, #0
 8014180:	9300      	str	r3, [sp, #0]
 8014182:	4613      	mov	r3, r2
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	68b9      	ldr	r1, [r7, #8]
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f7ff ffa3 	bl	80140d4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801418e:	bf00      	nop
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	200000fc 	.word	0x200000fc

0801419c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b08a      	sub	sp, #40	; 0x28
 80141a0:	af04      	add	r7, sp, #16
 80141a2:	60f8      	str	r0, [r7, #12]
 80141a4:	60b9      	str	r1, [r7, #8]
 80141a6:	607a      	str	r2, [r7, #4]
 80141a8:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d023      	beq.n	80141f8 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141b6:	331c      	adds	r3, #28
 80141b8:	6879      	ldr	r1, [r7, #4]
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7ff fbaf 	bl	801391e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80141c0:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10c      	bne.n	80141e2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f103 000c 	add.w	r0, r3, #12
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141d8:	6a39      	ldr	r1, [r7, #32]
 80141da:	f7ff f9a9 	bl	8013530 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80141de:	2300      	movs	r3, #0
 80141e0:	e019      	b.n	8014216 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80141e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80141e6:	9301      	str	r3, [sp, #4]
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	9300      	str	r3, [sp, #0]
 80141ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ee:	6a3a      	ldr	r2, [r7, #32]
 80141f0:	6979      	ldr	r1, [r7, #20]
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f7ff fe3c 	bl	8013e70 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80141f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80141fc:	9302      	str	r3, [sp, #8]
 80141fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014200:	9301      	str	r3, [sp, #4]
 8014202:	6a3b      	ldr	r3, [r7, #32]
 8014204:	9300      	str	r3, [sp, #0]
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	68b9      	ldr	r1, [r7, #8]
 801420c:	68f8      	ldr	r0, [r7, #12]
 801420e:	f7ff fd62 	bl	8013cd6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014212:	4603      	mov	r3, r0
 8014214:	bf00      	nop
}
 8014216:	4618      	mov	r0, r3
 8014218:	3718      	adds	r7, #24
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b084      	sub	sp, #16
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
 8014226:	460b      	mov	r3, r1
 8014228:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014230:	331c      	adds	r3, #28
 8014232:	78fa      	ldrb	r2, [r7, #3]
 8014234:	4611      	mov	r1, r2
 8014236:	4618      	mov	r0, r3
 8014238:	f7ff fbc0 	bl	80139bc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801423c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	330c      	adds	r3, #12
 8014242:	4618      	mov	r0, r3
 8014244:	f7ff f882 	bl	801334c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d010      	beq.n	8014270 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	330c      	adds	r3, #12
 8014252:	68f9      	ldr	r1, [r7, #12]
 8014254:	4618      	mov	r0, r3
 8014256:	f7ff f897 	bl	8013388 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014260:	331c      	adds	r3, #28
 8014262:	78fa      	ldrb	r2, [r7, #3]
 8014264:	68f9      	ldr	r1, [r7, #12]
 8014266:	4618      	mov	r0, r3
 8014268:	f7ff fbcb 	bl	8013a02 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801426c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801426e:	e7eb      	b.n	8014248 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	330c      	adds	r3, #12
 8014274:	4618      	mov	r0, r3
 8014276:	f7ff f8e7 	bl	8013448 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801427a:	bf00      	nop
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}

08014282 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8014282:	b580      	push	{r7, lr}
 8014284:	b082      	sub	sp, #8
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
 801428a:	460b      	mov	r3, r1
 801428c:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801428e:	78fb      	ldrb	r3, [r7, #3]
 8014290:	4619      	mov	r1, r3
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f7ff ffc3 	bl	801421e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	330c      	adds	r3, #12
 801429c:	4618      	mov	r0, r3
 801429e:	f7ff f9e5 	bl	801366c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80142a2:	4603      	mov	r3, r0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142ba:	331c      	adds	r3, #28
 80142bc:	2103      	movs	r1, #3
 80142be:	4618      	mov	r0, r3
 80142c0:	f7ff fb7c 	bl	80139bc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80142c4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d011      	beq.n	80142f0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	7e1b      	ldrb	r3, [r3, #24]
 80142d0:	2b03      	cmp	r3, #3
 80142d2:	d102      	bne.n	80142da <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2202      	movs	r2, #2
 80142d8:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80142e0:	331c      	adds	r3, #28
 80142e2:	2203      	movs	r2, #3
 80142e4:	68f9      	ldr	r1, [r7, #12]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7ff fb8b 	bl	8013a02 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80142ec:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80142ee:	e7ea      	b.n	80142c6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80142f0:	bf00      	nop
 80142f2:	3710      	adds	r7, #16
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	460b      	mov	r3, r1
 8014302:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801430a:	331c      	adds	r3, #28
 801430c:	78fa      	ldrb	r2, [r7, #3]
 801430e:	4611      	mov	r1, r2
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fb30 	bl	8013976 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8014316:	4603      	mov	r3, r0
}
 8014318:	4618      	mov	r0, r3
 801431a:	3708      	adds	r7, #8
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8014320:	b580      	push	{r7, lr}
 8014322:	b084      	sub	sp, #16
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	607a      	str	r2, [r7, #4]
 801432c:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	68b9      	ldr	r1, [r7, #8]
 8014332:	4618      	mov	r0, r3
 8014334:	f7f5 fb13 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	3308      	adds	r3, #8
 801433c:	6879      	ldr	r1, [r7, #4]
 801433e:	4618      	mov	r0, r3
 8014340:	f7f5 fb0d 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	683a      	ldr	r2, [r7, #0]
 8014348:	611a      	str	r2, [r3, #16]
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2200      	movs	r2, #0
 801434e:	615a      	str	r2, [r3, #20]
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	4618      	mov	r0, r3
 8014354:	3710      	adds	r7, #16
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801435a:	b480      	push	{r7}
 801435c:	b083      	sub	sp, #12
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
 8014362:	6039      	str	r1, [r7, #0]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	4618      	mov	r0, r3
 8014368:	370c      	adds	r7, #12
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8014372:	b480      	push	{r7}
 8014374:	b083      	sub	sp, #12
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	6039      	str	r1, [r7, #0]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	4618      	mov	r0, r3
 8014380:	370c      	adds	r7, #12
 8014382:	46bd      	mov	sp, r7
 8014384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014388:	4770      	bx	lr

0801438a <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801438a:	b480      	push	{r7}
 801438c:	b085      	sub	sp, #20
 801438e:	af00      	add	r7, sp, #0
 8014390:	60f8      	str	r0, [r7, #12]
 8014392:	60b9      	str	r1, [r7, #8]
 8014394:	4613      	mov	r3, r2
 8014396:	71fb      	strb	r3, [r7, #7]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	4618      	mov	r0, r3
 801439c:	3714      	adds	r7, #20
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80143a6:	b480      	push	{r7}
 80143a8:	b085      	sub	sp, #20
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	60f8      	str	r0, [r7, #12]
 80143ae:	60b9      	str	r1, [r7, #8]
 80143b0:	607a      	str	r2, [r7, #4]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	4618      	mov	r0, r3
 80143b6:	3714      	adds	r7, #20
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80143c0:	b480      	push	{r7}
 80143c2:	b085      	sub	sp, #20
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	607a      	str	r2, [r7, #4]
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	4618      	mov	r0, r3
 80143d0:	3714      	adds	r7, #20
 80143d2:	46bd      	mov	sp, r7
 80143d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d8:	4770      	bx	lr

080143da <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80143da:	b480      	push	{r7}
 80143dc:	b085      	sub	sp, #20
 80143de:	af00      	add	r7, sp, #0
 80143e0:	60f8      	str	r0, [r7, #12]
 80143e2:	60b9      	str	r1, [r7, #8]
 80143e4:	607a      	str	r2, [r7, #4]
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	4618      	mov	r0, r3
 80143ea:	3714      	adds	r7, #20
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80143f4:	b480      	push	{r7}
 80143f6:	b085      	sub	sp, #20
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	4618      	mov	r0, r3
 8014404:	3714      	adds	r7, #20
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr

0801440e <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801440e:	b480      	push	{r7}
 8014410:	b085      	sub	sp, #20
 8014412:	af00      	add	r7, sp, #0
 8014414:	60f8      	str	r0, [r7, #12]
 8014416:	60b9      	str	r1, [r7, #8]
 8014418:	4639      	mov	r1, r7
 801441a:	e881 000c 	stmia.w	r1, {r2, r3}
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	4618      	mov	r0, r3
 8014422:	3714      	adds	r7, #20
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr

0801442c <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801442c:	b480      	push	{r7}
 801442e:	b085      	sub	sp, #20
 8014430:	af00      	add	r7, sp, #0
 8014432:	60f8      	str	r0, [r7, #12]
 8014434:	60b9      	str	r1, [r7, #8]
 8014436:	4639      	mov	r1, r7
 8014438:	e881 000c 	stmia.w	r1, {r2, r3}
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	4618      	mov	r0, r3
 8014440:	3714      	adds	r7, #20
 8014442:	46bd      	mov	sp, r7
 8014444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014448:	4770      	bx	lr

0801444a <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801444a:	b480      	push	{r7}
 801444c:	b085      	sub	sp, #20
 801444e:	af00      	add	r7, sp, #0
 8014450:	60f8      	str	r0, [r7, #12]
 8014452:	60b9      	str	r1, [r7, #8]
 8014454:	ed87 0b00 	vstr	d0, [r7]
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	4618      	mov	r0, r3
 801445c:	3714      	adds	r7, #20
 801445e:	46bd      	mov	sp, r7
 8014460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014464:	4770      	bx	lr

08014466 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8014466:	b480      	push	{r7}
 8014468:	b085      	sub	sp, #20
 801446a:	af00      	add	r7, sp, #0
 801446c:	60f8      	str	r0, [r7, #12]
 801446e:	60b9      	str	r1, [r7, #8]
 8014470:	607a      	str	r2, [r7, #4]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	4618      	mov	r0, r3
 8014476:	3714      	adds	r7, #20
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8014480:	b480      	push	{r7}
 8014482:	b085      	sub	sp, #20
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	607a      	str	r2, [r7, #4]
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	4618      	mov	r0, r3
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801449a:	b480      	push	{r7}
 801449c:	b085      	sub	sp, #20
 801449e:	af00      	add	r7, sp, #0
 80144a0:	60f8      	str	r0, [r7, #12]
 80144a2:	60b9      	str	r1, [r7, #8]
 80144a4:	607a      	str	r2, [r7, #4]
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	4618      	mov	r0, r3
 80144aa:	3714      	adds	r7, #20
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	4618      	mov	r0, r3
 80144c4:	3714      	adds	r7, #20
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80144ce:	b480      	push	{r7}
 80144d0:	b085      	sub	sp, #20
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	60f8      	str	r0, [r7, #12]
 80144d6:	60b9      	str	r1, [r7, #8]
 80144d8:	607a      	str	r2, [r7, #4]
 80144da:	603b      	str	r3, [r7, #0]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	4618      	mov	r0, r3
 80144e0:	3714      	adds	r7, #20
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr

080144ea <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80144ea:	b480      	push	{r7}
 80144ec:	b085      	sub	sp, #20
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	60f8      	str	r0, [r7, #12]
 80144f2:	60b9      	str	r1, [r7, #8]
 80144f4:	607a      	str	r2, [r7, #4]
 80144f6:	603b      	str	r3, [r7, #0]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	4618      	mov	r0, r3
 80144fc:	3714      	adds	r7, #20
 80144fe:	46bd      	mov	sp, r7
 8014500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014504:	4770      	bx	lr

08014506 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8014506:	b480      	push	{r7}
 8014508:	b085      	sub	sp, #20
 801450a:	af00      	add	r7, sp, #0
 801450c:	60f8      	str	r0, [r7, #12]
 801450e:	60b9      	str	r1, [r7, #8]
 8014510:	607a      	str	r2, [r7, #4]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	4618      	mov	r0, r3
 8014516:	3714      	adds	r7, #20
 8014518:	46bd      	mov	sp, r7
 801451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451e:	4770      	bx	lr

08014520 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8014520:	b480      	push	{r7}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
 801452c:	603b      	str	r3, [r7, #0]
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	4618      	mov	r0, r3
 8014532:	3714      	adds	r7, #20
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr

0801453c <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	2300      	movs	r3, #0
 8014546:	4618      	mov	r0, r3
 8014548:	370c      	adds	r7, #12
 801454a:	46bd      	mov	sp, r7
 801454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014550:	4770      	bx	lr
	...

08014554 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8014554:	b580      	push	{r7, lr}
 8014556:	b084      	sub	sp, #16
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
 801455e:	f107 0308 	add.w	r3, r7, #8
 8014562:	4909      	ldr	r1, [pc, #36]	; (8014588 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8014564:	4618      	mov	r0, r3
 8014566:	f7f5 f9a6 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801456a:	f107 0308 	add.w	r3, r7, #8
 801456e:	4619      	mov	r1, r3
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f005 fec5 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8014576:	f107 0308 	add.w	r3, r7, #8
 801457a:	4618      	mov	r0, r3
 801457c:	f7f5 fd53 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	3710      	adds	r7, #16
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	08022434 	.word	0x08022434

0801458c <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	460b      	mov	r3, r1
 8014596:	70fb      	strb	r3, [r7, #3]
 8014598:	78fb      	ldrb	r3, [r7, #3]
 801459a:	4618      	mov	r0, r3
 801459c:	370c      	adds	r7, #12
 801459e:	46bd      	mov	sp, r7
 80145a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a4:	4770      	bx	lr

080145a6 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80145a6:	b480      	push	{r7}
 80145a8:	b083      	sub	sp, #12
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	6078      	str	r0, [r7, #4]
 80145ae:	2300      	movs	r3, #0
 80145b0:	4618      	mov	r0, r3
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	2300      	movs	r3, #0
 80145c6:	4618      	mov	r0, r3
 80145c8:	370c      	adds	r7, #12
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr

080145d2 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 80145d2:	b480      	push	{r7}
 80145d4:	b083      	sub	sp, #12
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	6039      	str	r1, [r7, #0]
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	4618      	mov	r0, r3
 80145e0:	370c      	adds	r7, #12
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr

080145ea <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80145ea:	b480      	push	{r7}
 80145ec:	b083      	sub	sp, #12
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
 80145f2:	2300      	movs	r3, #0
 80145f4:	4618      	mov	r0, r3
 80145f6:	370c      	adds	r7, #12
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	4618      	mov	r0, r3
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr

08014618 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8014618:	b480      	push	{r7}
 801461a:	b083      	sub	sp, #12
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	2300      	movs	r3, #0
 8014622:	4618      	mov	r0, r3
 8014624:	370c      	adds	r7, #12
 8014626:	46bd      	mov	sp, r7
 8014628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462c:	4770      	bx	lr

0801462e <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801462e:	b480      	push	{r7}
 8014630:	b083      	sub	sp, #12
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
 8014636:	6039      	str	r1, [r7, #0]
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	4618      	mov	r0, r3
 801463c:	370c      	adds	r7, #12
 801463e:	46bd      	mov	sp, r7
 8014640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014644:	4770      	bx	lr

08014646 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8014646:	b580      	push	{r7, lr}
 8014648:	b082      	sub	sp, #8
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
 801464e:	6039      	str	r1, [r7, #0]
 8014650:	2100      	movs	r1, #0
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f7f3 f972 	bl	800793c <_ZN18cpputest_ulonglongC1Ei>
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	3708      	adds	r7, #8
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8014660:	b480      	push	{r7}
 8014662:	b085      	sub	sp, #20
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	4639      	mov	r1, r7
 801466c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	461a      	mov	r2, r3
 8014674:	463b      	mov	r3, r7
 8014676:	cb03      	ldmia	r3!, {r0, r1}
 8014678:	6010      	str	r0, [r2, #0]
 801467a:	6051      	str	r1, [r2, #4]
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	3714      	adds	r7, #20
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr

08014688 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
 8014692:	2100      	movs	r1, #0
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7f3 f945 	bl	8007924 <_ZN17cpputest_longlongC1Ei>
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	3708      	adds	r7, #8
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 80146a2:	b480      	push	{r7}
 80146a4:	b085      	sub	sp, #20
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	60f8      	str	r0, [r7, #12]
 80146aa:	60b9      	str	r1, [r7, #8]
 80146ac:	4639      	mov	r1, r7
 80146ae:	e881 000c 	stmia.w	r1, {r2, r3}
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	461a      	mov	r2, r3
 80146b6:	463b      	mov	r3, r7
 80146b8:	cb03      	ldmia	r3!, {r0, r1}
 80146ba:	6010      	str	r0, [r2, #0]
 80146bc:	6051      	str	r1, [r2, #4]
 80146be:	68f8      	ldr	r0, [r7, #12]
 80146c0:	3714      	adds	r7, #20
 80146c2:	46bd      	mov	sp, r7
 80146c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c8:	4770      	bx	lr

080146ca <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80146ca:	b480      	push	{r7}
 80146cc:	b083      	sub	sp, #12
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	2300      	movs	r3, #0
 80146d4:	4618      	mov	r0, r3
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr

080146e0 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80146e0:	b480      	push	{r7}
 80146e2:	b083      	sub	sp, #12
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	4618      	mov	r0, r3
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr

080146f8 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	f04f 0200 	mov.w	r2, #0
 8014704:	f04f 0300 	mov.w	r3, #0
 8014708:	ec43 2b17 	vmov	d7, r2, r3
 801470c:	eeb0 0a47 	vmov.f32	s0, s14
 8014710:	eef0 0a67 	vmov.f32	s1, s15
 8014714:	370c      	adds	r7, #12
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr

0801471e <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 801471e:	b480      	push	{r7}
 8014720:	b085      	sub	sp, #20
 8014722:	af00      	add	r7, sp, #0
 8014724:	60f8      	str	r0, [r7, #12]
 8014726:	ed87 0b00 	vstr	d0, [r7]
 801472a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801472e:	ec43 2b17 	vmov	d7, r2, r3
 8014732:	eeb0 0a47 	vmov.f32	s0, s14
 8014736:	eef0 0a67 	vmov.f32	s1, s15
 801473a:	3714      	adds	r7, #20
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8014744:	b480      	push	{r7}
 8014746:	b083      	sub	sp, #12
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	4b03      	ldr	r3, [pc, #12]	; (801475c <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801474e:	4618      	mov	r0, r3
 8014750:	370c      	adds	r7, #12
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop
 801475c:	08022434 	.word	0x08022434

08014760 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
 8014768:	6039      	str	r1, [r7, #0]
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	4618      	mov	r0, r3
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr

08014778 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8014778:	b480      	push	{r7}
 801477a:	b083      	sub	sp, #12
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	2300      	movs	r3, #0
 8014782:	4618      	mov	r0, r3
 8014784:	370c      	adds	r7, #12
 8014786:	46bd      	mov	sp, r7
 8014788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478c:	4770      	bx	lr

0801478e <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801478e:	b480      	push	{r7}
 8014790:	b083      	sub	sp, #12
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
 8014796:	6039      	str	r1, [r7, #0]
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	4618      	mov	r0, r3
 801479c:	370c      	adds	r7, #12
 801479e:	46bd      	mov	sp, r7
 80147a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a4:	4770      	bx	lr

080147a6 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 80147a6:	b480      	push	{r7}
 80147a8:	b083      	sub	sp, #12
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
 80147ae:	2300      	movs	r3, #0
 80147b0:	4618      	mov	r0, r3
 80147b2:	370c      	adds	r7, #12
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr

080147bc <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 80147bc:	b480      	push	{r7}
 80147be:	b083      	sub	sp, #12
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	2300      	movs	r3, #0
 80147de:	4618      	mov	r0, r3
 80147e0:	370c      	adds	r7, #12
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr

080147ea <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80147ea:	b480      	push	{r7}
 80147ec:	b083      	sub	sp, #12
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
 80147f2:	6039      	str	r1, [r7, #0]
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	4618      	mov	r0, r3
 80147f8:	370c      	adds	r7, #12
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr

08014802 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8014802:	b480      	push	{r7}
 8014804:	b083      	sub	sp, #12
 8014806:	af00      	add	r7, sp, #0
 8014808:	6078      	str	r0, [r7, #4]
 801480a:	6039      	str	r1, [r7, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	4618      	mov	r0, r3
 8014810:	370c      	adds	r7, #12
 8014812:	46bd      	mov	sp, r7
 8014814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014818:	4770      	bx	lr
	...

0801481c <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	4a04      	ldr	r2, [pc, #16]	; (8014838 <_ZN14MockActualCallC1Ev+0x1c>)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	601a      	str	r2, [r3, #0]
{
}
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	4618      	mov	r0, r3
 801482e:	370c      	adds	r7, #12
 8014830:	46bd      	mov	sp, r7
 8014832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014836:	4770      	bx	lr
 8014838:	080245e4 	.word	0x080245e4

0801483c <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	4a04      	ldr	r2, [pc, #16]	; (8014858 <_ZN14MockActualCallD1Ev+0x1c>)
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	601a      	str	r2, [r3, #0]
{
}
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	4618      	mov	r0, r3
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr
 8014858:	080245e4 	.word	0x080245e4

0801485c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	3304      	adds	r3, #4
 801486a:	6839      	ldr	r1, [r7, #0]
 801486c:	4618      	mov	r0, r3
 801486e:	f7f5 f88e 	bl	800998e <_ZN12SimpleStringaSERKS_>
}
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}

0801487a <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 801487a:	b580      	push	{r7, lr}
 801487c:	b082      	sub	sp, #8
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
 8014882:	6039      	str	r1, [r7, #0]
    return functionName_;
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	3304      	adds	r3, #4
 8014888:	4619      	mov	r1, r3
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f7f5 f867 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	60f8      	str	r0, [r7, #12]
 80148a0:	60b9      	str	r1, [r7, #8]
 80148a2:	607a      	str	r2, [r7, #4]
 80148a4:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff ffb7 	bl	801481c <_ZN14MockActualCallC1Ev>
 80148ae:	4a17      	ldr	r2, [pc, #92]	; (801490c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	601a      	str	r2, [r3, #0]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	3304      	adds	r3, #4
 80148b8:	4915      	ldr	r1, [pc, #84]	; (8014910 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7f4 fffb 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	68ba      	ldr	r2, [r7, #8]
 80148c4:	60da      	str	r2, [r3, #12]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	611a      	str	r2, [r3, #16]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2202      	movs	r2, #2
 80148d0:	751a      	strb	r2, [r3, #20]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	2200      	movs	r2, #0
 80148d6:	755a      	strb	r2, [r3, #21]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2200      	movs	r2, #0
 80148dc:	619a      	str	r2, [r3, #24]
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	331c      	adds	r3, #28
 80148e2:	4618      	mov	r0, r3
 80148e4:	f004 f814 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	683a      	ldr	r2, [r7, #0]
 80148ec:	625a      	str	r2, [r3, #36]	; 0x24
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	2200      	movs	r2, #0
 80148f2:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	331c      	adds	r3, #28
 80148f8:	6839      	ldr	r1, [r7, #0]
 80148fa:	4618      	mov	r0, r3
 80148fc:	f004 f986 	bl	8018c0c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	4618      	mov	r0, r3
 8014904:	3710      	adds	r7, #16
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	080244e4 	.word	0x080244e4
 8014910:	08022434 	.word	0x08022434

08014914 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	4a0c      	ldr	r2, [pc, #48]	; (8014950 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f001 fae4 	bl	8015ef0 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	331c      	adds	r3, #28
 801492c:	4618      	mov	r0, r3
 801492e:	f004 f803 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	3304      	adds	r3, #4
 8014936:	4618      	mov	r0, r3
 8014938:	f7f5 fb75 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	4618      	mov	r0, r3
 8014940:	f7ff ff7c 	bl	801483c <_ZN14MockActualCallD1Ev>
}
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	4618      	mov	r0, r3
 8014948:	3708      	adds	r7, #8
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	080244e4 	.word	0x080244e4

08014954 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
}
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f7ff ffd9 	bl	8014914 <_ZN21MockCheckedActualCallD1Ev>
 8014962:	212c      	movs	r1, #44	; 0x2c
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f7f2 fbf7 	bl	8007158 <_ZdlPvj>
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	4618      	mov	r0, r3
 801496e:	3708      	adds	r7, #8
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8014974:	b480      	push	{r7}
 8014976:	b083      	sub	sp, #12
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	683a      	ldr	r2, [r7, #0]
 8014982:	611a      	str	r2, [r3, #16]
}
 8014984:	bf00      	nop
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	691a      	ldr	r2, [r3, #16]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	691b      	ldr	r3, [r3, #16]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	330c      	adds	r3, #12
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	4610      	mov	r0, r2
 80149a8:	4798      	blx	r3
 80149aa:	4603      	mov	r3, r0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	33c0      	adds	r3, #192	; 0xc0
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	4798      	blx	r3
 80149ca:	4603      	mov	r3, r0
 80149cc:	f083 0301 	eor.w	r3, r3, #1
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d010      	beq.n	80149f8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	33ec      	adds	r3, #236	; 0xec
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	2101      	movs	r1, #1
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	4798      	blx	r3
        reporter_->failTest(failure);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	691a      	ldr	r2, [r3, #16]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	691b      	ldr	r3, [r3, #16]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3308      	adds	r3, #8
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	6839      	ldr	r1, [r7, #0]
 80149f4:	4610      	mov	r0, r2
 80149f6:	4798      	blx	r3
    }
}
 80149f8:	bf00      	nop
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8014a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a04:	b0bc      	sub	sp, #240	; 0xf0
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	6078      	str	r0, [r7, #4]
 8014a0a:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	f000 80f5 	beq.w	8014c08 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	339c      	adds	r3, #156	; 0x9c
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014a2a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8014a2e:	6839      	ldr	r1, [r7, #0]
 8014a30:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8014a32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014a36:	4618      	mov	r0, r3
 8014a38:	f006 fa6e 	bl	801af18 <_ZNK14MockNamedValue9getCopierEv>
 8014a3c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8014a40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d013      	beq.n	8014a70 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8014a48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	3308      	adds	r3, #8
 8014a50:	681c      	ldr	r4, [r3, #0]
 8014a52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014a56:	691d      	ldr	r5, [r3, #16]
 8014a58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f006 fa2b 	bl	801aeb8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8014a62:	4603      	mov	r3, r0
 8014a64:	461a      	mov	r2, r3
 8014a66:	4629      	mov	r1, r5
 8014a68:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8014a6c:	47a0      	blx	r4
 8014a6e:	e0c0      	b.n	8014bf2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8014a70:	2500      	movs	r5, #0
 8014a72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014a76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014a7a:	4611      	mov	r1, r2
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f005 ff0e 	bl	801a89e <_ZNK14MockNamedValue7getTypeEv>
 8014a82:	2601      	movs	r6, #1
 8014a84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014a88:	4962      	ldr	r1, [pc, #392]	; (8014c14 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7f4 ff13 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8014a90:	f04f 0801 	mov.w	r8, #1
 8014a94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8014a98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7f5 facd 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d015      	beq.n	8014ad6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8014aaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014aae:	f103 0408 	add.w	r4, r3, #8
 8014ab2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014ab6:	4958      	ldr	r1, [pc, #352]	; (8014c18 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7f4 fefc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8014abe:	2501      	movs	r5, #1
 8014ac0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	f7f5 fab9 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8014acc:	4603      	mov	r3, r0
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d001      	beq.n	8014ad6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8014ad2:	2401      	movs	r4, #1
 8014ad4:	e000      	b.n	8014ad8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8014ad6:	2400      	movs	r4, #0
 8014ad8:	2d00      	cmp	r5, #0
 8014ada:	d004      	beq.n	8014ae6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8014adc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7f5 faa0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8014ae6:	f1b8 0f00 	cmp.w	r8, #0
 8014aea:	d004      	beq.n	8014af6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8014aec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f5 fa98 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8014af6:	2e00      	cmp	r6, #0
 8014af8:	d004      	beq.n	8014b04 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8014afa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7f5 fa91 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8014b04:	2c00      	cmp	r4, #0
 8014b06:	d018      	beq.n	8014b3a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8014b08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f006 f95b 	bl	801adc8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8014b12:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8014b16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f006 f9e4 	bl	801aee8 <_ZNK14MockNamedValue7getSizeEv>
 8014b20:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8014b24:	4b3d      	ldr	r3, [pc, #244]	; (8014c1c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014b2c:	6910      	ldr	r0, [r2, #16]
 8014b2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014b32:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8014b36:	4798      	blx	r3
 8014b38:	e05b      	b.n	8014bf2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8014b3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014b3e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014b42:	4611      	mov	r1, r2
 8014b44:	4618      	mov	r0, r3
 8014b46:	f005 fe9b 	bl	801a880 <_ZNK14MockNamedValue7getNameEv>
 8014b4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014b4e:	4934      	ldr	r1, [pc, #208]	; (8014c20 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7f4 feb0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8014b56:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8014b5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014b5e:	4611      	mov	r1, r2
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7f5 fab1 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 8014b66:	4603      	mov	r3, r0
 8014b68:	461c      	mov	r4, r3
 8014b6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7f5 fa59 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8014b74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7f5 fa54 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8014b7e:	2c00      	cmp	r4, #0
 8014b80:	d037      	beq.n	8014bf2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	339c      	adds	r3, #156	; 0x9c
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014b8e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8014b92:	6839      	ldr	r1, [r7, #0]
 8014b94:	4798      	blx	r3
 8014b96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014b9a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8014b9e:	4611      	mov	r1, r2
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f005 fe7c 	bl	801a89e <_ZNK14MockNamedValue7getTypeEv>
 8014ba6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014baa:	4618      	mov	r0, r3
 8014bac:	f005 fbd2 	bl	801a354 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	33cc      	adds	r3, #204	; 0xcc
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	4798      	blx	r3
 8014bbc:	4601      	mov	r1, r0
 8014bbe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8014bc2:	f107 030c 	add.w	r3, r7, #12
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f005 faee 	bl	801a1a8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	33dc      	adds	r3, #220	; 0xdc
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f107 020c 	add.w	r2, r7, #12
 8014bd8:	4611      	mov	r1, r2
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8014bde:	f107 030c 	add.w	r3, r7, #12
 8014be2:	4618      	mov	r0, r3
 8014be4:	f001 ffe2 	bl	8016bac <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8014be8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7f5 fa1a 	bl	800a026 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8014bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f005 fbac 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8014bfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014c00:	695b      	ldr	r3, [r3, #20]
 8014c02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014c06:	e705      	b.n	8014a14 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8014c08:	bf00      	nop
 8014c0a:	37f0      	adds	r7, #240	; 0xf0
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c12:	bf00      	nop
 8014c14:	08022438 	.word	0x08022438
 8014c18:	08022444 	.word	0x08022444
 8014c1c:	200000d0 	.word	0x200000d0
 8014c20:	08022434 	.word	0x08022434

08014c24 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	331c      	adds	r3, #28
 8014c30:	4618      	mov	r0, r3
 8014c32:	f004 f9bb 	bl	8018fac <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8014c36:	4602      	mov	r2, r0
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	699b      	ldr	r3, [r3, #24]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d00f      	beq.n	8014c64 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	33d4      	adds	r3, #212	; 0xd4
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	6992      	ldr	r2, [r2, #24]
 8014c50:	4611      	mov	r1, r2
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	4798      	blx	r3
        callHasSucceeded();
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	33d0      	adds	r3, #208	; 0xd0
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8014c62:	e00f      	b.n	8014c84 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	331c      	adds	r3, #28
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f004 f9cc 	bl	8019006 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8014c6e:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d006      	beq.n	8014c84 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	33d4      	adds	r3, #212	; 0xd4
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	68f9      	ldr	r1, [r7, #12]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	4798      	blx	r3
}
 8014c84:	bf00      	nop
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	33ec      	adds	r3, #236	; 0xec
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	2102      	movs	r1, #2
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	4798      	blx	r3
}
 8014ca2:	bf00      	nop
 8014ca4:	3708      	adds	r7, #8
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}

08014caa <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b082      	sub	sp, #8
 8014cae:	af00      	add	r7, sp, #0
 8014cb0:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	699b      	ldr	r3, [r3, #24]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00b      	beq.n	8014cd2 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	699a      	ldr	r2, [r3, #24]
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	699b      	ldr	r3, [r3, #24]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	33ec      	adds	r3, #236	; 0xec
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4610      	mov	r0, r2
 8014cca:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	331c      	adds	r3, #28
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f004 f85c 	bl	8018d94 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8014cdc:	bf00      	nop
 8014cde:	3708      	adds	r7, #8
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8014ce4:	b590      	push	{r4, r7, lr}
 8014ce6:	b091      	sub	sp, #68	; 0x44
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
    setName(name);
 8014cee:	6839      	ldr	r1, [r7, #0]
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7ff fdb3 	bl	801485c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	33ec      	adds	r3, #236	; 0xec
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2100      	movs	r1, #0
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	331c      	adds	r3, #28
 8014d08:	6839      	ldr	r1, [r7, #0]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f003 ffec 	bl	8018ce8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	331c      	adds	r3, #28
 8014d14:	4618      	mov	r0, r3
 8014d16:	f003 fe7c 	bl	8018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d01d      	beq.n	8014d5c <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	33cc      	adds	r3, #204	; 0xcc
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	4798      	blx	r3
 8014d2c:	4601      	mov	r1, r0
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d32:	f107 000c 	add.w	r0, r7, #12
 8014d36:	683a      	ldr	r2, [r7, #0]
 8014d38:	f004 fe24 	bl	8019984 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	33dc      	adds	r3, #220	; 0xdc
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	f107 020c 	add.w	r2, r7, #12
 8014d48:	4611      	mov	r1, r2
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	4798      	blx	r3
        return *this;
 8014d4e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8014d50:	f107 030c 	add.w	r3, r7, #12
 8014d54:	4618      	mov	r0, r3
 8014d56:	f001 ff4b 	bl	8016bf0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8014d5a:	e006      	b.n	8014d6a <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	33d8      	adds	r3, #216	; 0xd8
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	6878      	ldr	r0, [r7, #4]
 8014d66:	4798      	blx	r3

    return *this;
 8014d68:	687c      	ldr	r4, [r7, #4]
 8014d6a:	4623      	mov	r3, r4
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3744      	adds	r7, #68	; 0x44
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd90      	pop	{r4, r7, pc}

08014d74 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8014d74:	b480      	push	{r7}
 8014d76:	b083      	sub	sp, #12
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	6039      	str	r1, [r7, #0]
    return *this;
 8014d7e:	687b      	ldr	r3, [r7, #4]
}
 8014d80:	4618      	mov	r0, r3
 8014d82:	370c      	adds	r7, #12
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8014d8c:	b590      	push	{r4, r7, lr}
 8014d8e:	b097      	sub	sp, #92	; 0x5c
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	33c0      	adds	r3, #192	; 0xc0
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	4798      	blx	r3
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d164      	bne.n	8014e72 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	33ec      	adds	r3, #236	; 0xec
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2100      	movs	r1, #0
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	33e8      	adds	r3, #232	; 0xe8
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	331c      	adds	r3, #28
 8014dc6:	6839      	ldr	r1, [r7, #0]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f004 f86b 	bl	8018ea4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	331c      	adds	r3, #28
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f003 fe1d 	bl	8018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d02b      	beq.n	8014e36 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	33cc      	adds	r3, #204	; 0xcc
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	4798      	blx	r3
 8014dea:	4604      	mov	r4, r0
 8014dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014df0:	6879      	ldr	r1, [r7, #4]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff fd41 	bl	801487a <_ZNK21MockCheckedActualCall7getNameEv>
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014e00:	f107 000c 	add.w	r0, r7, #12
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	4621      	mov	r1, r4
 8014e0a:	f004 fe7f 	bl	8019b0c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8014e0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7f5 f907 	bl	800a026 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	33dc      	adds	r3, #220	; 0xdc
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	f107 020c 	add.w	r2, r7, #12
 8014e24:	4611      	mov	r1, r2
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8014e2a:	f107 030c 	add.w	r3, r7, #12
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f001 ff00 	bl	8016c34 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8014e34:	e01e      	b.n	8014e74 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f103 041c 	add.w	r4, r3, #28
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	335c      	adds	r3, #92	; 0x5c
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014e48:	6839      	ldr	r1, [r7, #0]
 8014e4a:	4610      	mov	r0, r2
 8014e4c:	4798      	blx	r3
 8014e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e52:	4619      	mov	r1, r3
 8014e54:	4620      	mov	r0, r4
 8014e56:	f004 f9b8 	bl	80191ca <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8014e5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7f5 f8e1 	bl	800a026 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	33d8      	adds	r3, #216	; 0xd8
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	4798      	blx	r3
 8014e70:	e000      	b.n	8014e74 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8014e72:	bf00      	nop
}
 8014e74:	3754      	adds	r7, #84	; 0x54
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd90      	pop	{r4, r7, pc}

08014e7a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8014e7a:	b590      	push	{r4, r7, lr}
 8014e7c:	b097      	sub	sp, #92	; 0x5c
 8014e7e:	af02      	add	r7, sp, #8
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	33c0      	adds	r3, #192	; 0xc0
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	4798      	blx	r3
 8014e90:	4603      	mov	r3, r0
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d164      	bne.n	8014f60 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	33ec      	adds	r3, #236	; 0xec
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	2100      	movs	r1, #0
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	33e8      	adds	r3, #232	; 0xe8
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	331c      	adds	r3, #28
 8014eb4:	6839      	ldr	r1, [r7, #0]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f004 f820 	bl	8018efc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	331c      	adds	r3, #28
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f003 fda6 	bl	8018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d02b      	beq.n	8014f24 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	33cc      	adds	r3, #204	; 0xcc
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	4798      	blx	r3
 8014ed8:	4604      	mov	r4, r0
 8014eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014ede:	6879      	ldr	r1, [r7, #4]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff fcca 	bl	801487a <_ZNK21MockCheckedActualCall7getNameEv>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014eee:	f107 000c 	add.w	r0, r7, #12
 8014ef2:	9300      	str	r3, [sp, #0]
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	f004 ff6a 	bl	8019dd0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8014efc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7f5 f890 	bl	800a026 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	33dc      	adds	r3, #220	; 0xdc
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	f107 020c 	add.w	r2, r7, #12
 8014f12:	4611      	mov	r1, r2
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8014f18:	f107 030c 	add.w	r3, r7, #12
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f001 feab 	bl	8016c78 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8014f22:	e01e      	b.n	8014f62 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f103 041c 	add.w	r4, r3, #28
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	335c      	adds	r3, #92	; 0x5c
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014f36:	6839      	ldr	r1, [r7, #0]
 8014f38:	4610      	mov	r0, r2
 8014f3a:	4798      	blx	r3
 8014f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f40:	4619      	mov	r1, r3
 8014f42:	4620      	mov	r0, r4
 8014f44:	f004 f95e 	bl	8019204 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8014f48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f5 f86a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	33d8      	adds	r3, #216	; 0xd8
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	4798      	blx	r3
 8014f5e:	e000      	b.n	8014f62 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8014f60:	bf00      	nop
}
 8014f62:	3754      	adds	r7, #84	; 0x54
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd90      	pop	{r4, r7, pc}

08014f68 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8014f68:	b590      	push	{r4, r7, lr}
 8014f6a:	b093      	sub	sp, #76	; 0x4c
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	4613      	mov	r3, r2
 8014f74:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8014f76:	f107 0310 	add.w	r3, r7, #16
 8014f7a:	68b9      	ldr	r1, [r7, #8]
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f005 f9bf 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8014f82:	79fa      	ldrb	r2, [r7, #7]
 8014f84:	f107 0310 	add.w	r3, r7, #16
 8014f88:	4611      	mov	r1, r2
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f005 fa0a 	bl	801a3a4 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	33e0      	adds	r3, #224	; 0xe0
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	f107 0210 	add.w	r2, r7, #16
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	68f8      	ldr	r0, [r7, #12]
 8014fa0:	4798      	blx	r3
    return *this;
 8014fa2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8014fa4:	f107 0310 	add.w	r3, r7, #16
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f005 f9d3 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8014fae:	4623      	mov	r3, r4
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	374c      	adds	r7, #76	; 0x4c
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd90      	pop	{r4, r7, pc}

08014fb8 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8014fb8:	b590      	push	{r4, r7, lr}
 8014fba:	b093      	sub	sp, #76	; 0x4c
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	60f8      	str	r0, [r7, #12]
 8014fc0:	60b9      	str	r1, [r7, #8]
 8014fc2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8014fc4:	f107 0310 	add.w	r3, r7, #16
 8014fc8:	68b9      	ldr	r1, [r7, #8]
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f005 f998 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8014fd0:	f107 0310 	add.w	r3, r7, #16
 8014fd4:	6879      	ldr	r1, [r7, #4]
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f005 fa08 	bl	801a3ec <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	33e0      	adds	r3, #224	; 0xe0
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	f107 0210 	add.w	r2, r7, #16
 8014fe8:	4611      	mov	r1, r2
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	4798      	blx	r3
    return *this;
 8014fee:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8014ff0:	f107 0310 	add.w	r3, r7, #16
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f005 f9ad 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8014ffa:	4623      	mov	r3, r4
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	374c      	adds	r7, #76	; 0x4c
 8015000:	46bd      	mov	sp, r7
 8015002:	bd90      	pop	{r4, r7, pc}

08015004 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8015004:	b590      	push	{r4, r7, lr}
 8015006:	b093      	sub	sp, #76	; 0x4c
 8015008:	af00      	add	r7, sp, #0
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015010:	f107 0310 	add.w	r3, r7, #16
 8015014:	68b9      	ldr	r1, [r7, #8]
 8015016:	4618      	mov	r0, r3
 8015018:	f005 f972 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801501c:	f107 0310 	add.w	r3, r7, #16
 8015020:	6879      	ldr	r1, [r7, #4]
 8015022:	4618      	mov	r0, r3
 8015024:	f005 fa04 	bl	801a430 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	33e0      	adds	r3, #224	; 0xe0
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	f107 0210 	add.w	r2, r7, #16
 8015034:	4611      	mov	r1, r2
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	4798      	blx	r3
    return *this;
 801503a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801503c:	f107 0310 	add.w	r3, r7, #16
 8015040:	4618      	mov	r0, r3
 8015042:	f005 f987 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015046:	4623      	mov	r3, r4
}
 8015048:	4618      	mov	r0, r3
 801504a:	374c      	adds	r7, #76	; 0x4c
 801504c:	46bd      	mov	sp, r7
 801504e:	bd90      	pop	{r4, r7, pc}

08015050 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8015050:	b590      	push	{r4, r7, lr}
 8015052:	b093      	sub	sp, #76	; 0x4c
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801505c:	f107 0310 	add.w	r3, r7, #16
 8015060:	68b9      	ldr	r1, [r7, #8]
 8015062:	4618      	mov	r0, r3
 8015064:	f005 f94c 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015068:	f107 0310 	add.w	r3, r7, #16
 801506c:	6879      	ldr	r1, [r7, #4]
 801506e:	4618      	mov	r0, r3
 8015070:	f005 fa22 	bl	801a4b8 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	33e0      	adds	r3, #224	; 0xe0
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f107 0210 	add.w	r2, r7, #16
 8015080:	4611      	mov	r1, r2
 8015082:	68f8      	ldr	r0, [r7, #12]
 8015084:	4798      	blx	r3
    return *this;
 8015086:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015088:	f107 0310 	add.w	r3, r7, #16
 801508c:	4618      	mov	r0, r3
 801508e:	f005 f961 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015092:	4623      	mov	r3, r4
}
 8015094:	4618      	mov	r0, r3
 8015096:	374c      	adds	r7, #76	; 0x4c
 8015098:	46bd      	mov	sp, r7
 801509a:	bd90      	pop	{r4, r7, pc}

0801509c <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801509c:	b590      	push	{r4, r7, lr}
 801509e:	b093      	sub	sp, #76	; 0x4c
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80150a8:	f107 0310 	add.w	r3, r7, #16
 80150ac:	68b9      	ldr	r1, [r7, #8]
 80150ae:	4618      	mov	r0, r3
 80150b0:	f005 f926 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80150b4:	f107 0310 	add.w	r3, r7, #16
 80150b8:	6879      	ldr	r1, [r7, #4]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f005 f9da 	bl	801a474 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	33e0      	adds	r3, #224	; 0xe0
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	f107 0210 	add.w	r2, r7, #16
 80150cc:	4611      	mov	r1, r2
 80150ce:	68f8      	ldr	r0, [r7, #12]
 80150d0:	4798      	blx	r3
    return *this;
 80150d2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80150d4:	f107 0310 	add.w	r3, r7, #16
 80150d8:	4618      	mov	r0, r3
 80150da:	f005 f93b 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 80150de:	4623      	mov	r3, r4
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	374c      	adds	r7, #76	; 0x4c
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd90      	pop	{r4, r7, pc}

080150e8 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80150e8:	b5b0      	push	{r4, r5, r7, lr}
 80150ea:	b086      	sub	sp, #24
 80150ec:	af02      	add	r7, sp, #8
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	60b9      	str	r1, [r7, #8]
 80150f2:	4639      	mov	r1, r7
 80150f4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80150f8:	f7fb ffc0 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80150fc:	4604      	mov	r4, r0
 80150fe:	6823      	ldr	r3, [r4, #0]
 8015100:	3368      	adds	r3, #104	; 0x68
 8015102:	681d      	ldr	r5, [r3, #0]
 8015104:	f7fb ffca 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015108:	4603      	mov	r3, r0
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8015110:	4a04      	ldr	r2, [pc, #16]	; (8015124 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8015112:	4905      	ldr	r1, [pc, #20]	; (8015128 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8015114:	4620      	mov	r0, r4
 8015116:	47a8      	blx	r5
    return *this;
 8015118:	68fb      	ldr	r3, [r7, #12]
}
 801511a:	4618      	mov	r0, r3
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bdb0      	pop	{r4, r5, r7, pc}
 8015122:	bf00      	nop
 8015124:	0802244c 	.word	0x0802244c
 8015128:	08022468 	.word	0x08022468

0801512c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801512c:	b5b0      	push	{r4, r5, r7, lr}
 801512e:	b086      	sub	sp, #24
 8015130:	af02      	add	r7, sp, #8
 8015132:	60f8      	str	r0, [r7, #12]
 8015134:	60b9      	str	r1, [r7, #8]
 8015136:	4639      	mov	r1, r7
 8015138:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801513c:	f7fb ff9e 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8015140:	4604      	mov	r4, r0
 8015142:	6823      	ldr	r3, [r4, #0]
 8015144:	3368      	adds	r3, #104	; 0x68
 8015146:	681d      	ldr	r5, [r3, #0]
 8015148:	f7fb ffa8 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801514c:	4603      	mov	r3, r0
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015154:	4a04      	ldr	r2, [pc, #16]	; (8015168 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8015156:	4905      	ldr	r1, [pc, #20]	; (801516c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8015158:	4620      	mov	r0, r4
 801515a:	47a8      	blx	r5
    return *this;
 801515c:	68fb      	ldr	r3, [r7, #12]
}
 801515e:	4618      	mov	r0, r3
 8015160:	3710      	adds	r7, #16
 8015162:	46bd      	mov	sp, r7
 8015164:	bdb0      	pop	{r4, r5, r7, pc}
 8015166:	bf00      	nop
 8015168:	0802244c 	.word	0x0802244c
 801516c:	08022494 	.word	0x08022494

08015170 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8015170:	b590      	push	{r4, r7, lr}
 8015172:	b093      	sub	sp, #76	; 0x4c
 8015174:	af00      	add	r7, sp, #0
 8015176:	60f8      	str	r0, [r7, #12]
 8015178:	60b9      	str	r1, [r7, #8]
 801517a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801517e:	f107 0310 	add.w	r3, r7, #16
 8015182:	68b9      	ldr	r1, [r7, #8]
 8015184:	4618      	mov	r0, r3
 8015186:	f005 f8bb 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801518a:	f107 0310 	add.w	r3, r7, #16
 801518e:	ed97 0b00 	vldr	d0, [r7]
 8015192:	4618      	mov	r0, r3
 8015194:	f005 f9f0 	bl	801a578 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	33e0      	adds	r3, #224	; 0xe0
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	f107 0210 	add.w	r2, r7, #16
 80151a4:	4611      	mov	r1, r2
 80151a6:	68f8      	ldr	r0, [r7, #12]
 80151a8:	4798      	blx	r3
    return *this;
 80151aa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80151ac:	f107 0310 	add.w	r3, r7, #16
 80151b0:	4618      	mov	r0, r3
 80151b2:	f005 f8cf 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 80151b6:	4623      	mov	r3, r4
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	374c      	adds	r7, #76	; 0x4c
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd90      	pop	{r4, r7, pc}

080151c0 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 80151c0:	b590      	push	{r4, r7, lr}
 80151c2:	b093      	sub	sp, #76	; 0x4c
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	60f8      	str	r0, [r7, #12]
 80151c8:	60b9      	str	r1, [r7, #8]
 80151ca:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80151cc:	f107 0310 	add.w	r3, r7, #16
 80151d0:	68b9      	ldr	r1, [r7, #8]
 80151d2:	4618      	mov	r0, r3
 80151d4:	f005 f894 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80151d8:	f107 0310 	add.w	r3, r7, #16
 80151dc:	6879      	ldr	r1, [r7, #4]
 80151de:	4618      	mov	r0, r3
 80151e0:	f005 fa74 	bl	801a6cc <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	33e0      	adds	r3, #224	; 0xe0
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	f107 0210 	add.w	r2, r7, #16
 80151f0:	4611      	mov	r1, r2
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	4798      	blx	r3
    return *this;
 80151f6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80151f8:	f107 0310 	add.w	r3, r7, #16
 80151fc:	4618      	mov	r0, r3
 80151fe:	f005 f8a9 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015202:	4623      	mov	r3, r4
}
 8015204:	4618      	mov	r0, r3
 8015206:	374c      	adds	r7, #76	; 0x4c
 8015208:	46bd      	mov	sp, r7
 801520a:	bd90      	pop	{r4, r7, pc}

0801520c <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 801520c:	b590      	push	{r4, r7, lr}
 801520e:	b093      	sub	sp, #76	; 0x4c
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015218:	f107 0310 	add.w	r3, r7, #16
 801521c:	68b9      	ldr	r1, [r7, #8]
 801521e:	4618      	mov	r0, r3
 8015220:	f005 f86e 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015224:	f107 0310 	add.w	r3, r7, #16
 8015228:	6879      	ldr	r1, [r7, #4]
 801522a:	4618      	mov	r0, r3
 801522c:	f005 f9e8 	bl	801a600 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	33e0      	adds	r3, #224	; 0xe0
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	f107 0210 	add.w	r2, r7, #16
 801523c:	4611      	mov	r1, r2
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	4798      	blx	r3
    return *this;
 8015242:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015244:	f107 0310 	add.w	r3, r7, #16
 8015248:	4618      	mov	r0, r3
 801524a:	f005 f883 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 801524e:	4623      	mov	r3, r4
}
 8015250:	4618      	mov	r0, r3
 8015252:	374c      	adds	r7, #76	; 0x4c
 8015254:	46bd      	mov	sp, r7
 8015256:	bd90      	pop	{r4, r7, pc}

08015258 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8015258:	b590      	push	{r4, r7, lr}
 801525a:	b093      	sub	sp, #76	; 0x4c
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015264:	f107 0310 	add.w	r3, r7, #16
 8015268:	68b9      	ldr	r1, [r7, #8]
 801526a:	4618      	mov	r0, r3
 801526c:	f005 f848 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015270:	f107 0310 	add.w	r3, r7, #16
 8015274:	6879      	ldr	r1, [r7, #4]
 8015276:	4618      	mov	r0, r3
 8015278:	f005 f9e4 	bl	801a644 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	33e0      	adds	r3, #224	; 0xe0
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	f107 0210 	add.w	r2, r7, #16
 8015288:	4611      	mov	r1, r2
 801528a:	68f8      	ldr	r0, [r7, #12]
 801528c:	4798      	blx	r3
    return *this;
 801528e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015290:	f107 0310 	add.w	r3, r7, #16
 8015294:	4618      	mov	r0, r3
 8015296:	f005 f85d 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 801529a:	4623      	mov	r3, r4
}
 801529c:	4618      	mov	r0, r3
 801529e:	374c      	adds	r7, #76	; 0x4c
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd90      	pop	{r4, r7, pc}

080152a4 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80152a4:	b590      	push	{r4, r7, lr}
 80152a6:	b093      	sub	sp, #76	; 0x4c
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80152b0:	f107 0310 	add.w	r3, r7, #16
 80152b4:	68b9      	ldr	r1, [r7, #8]
 80152b6:	4618      	mov	r0, r3
 80152b8:	f005 f822 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80152bc:	f107 0310 	add.w	r3, r7, #16
 80152c0:	6879      	ldr	r1, [r7, #4]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f005 f9e0 	bl	801a688 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	33e0      	adds	r3, #224	; 0xe0
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	f107 0210 	add.w	r2, r7, #16
 80152d4:	4611      	mov	r1, r2
 80152d6:	68f8      	ldr	r0, [r7, #12]
 80152d8:	4798      	blx	r3
    return *this;
 80152da:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80152dc:	f107 0310 	add.w	r3, r7, #16
 80152e0:	4618      	mov	r0, r3
 80152e2:	f005 f837 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 80152e6:	4623      	mov	r3, r4
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	374c      	adds	r7, #76	; 0x4c
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd90      	pop	{r4, r7, pc}

080152f0 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80152f0:	b590      	push	{r4, r7, lr}
 80152f2:	b093      	sub	sp, #76	; 0x4c
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	60b9      	str	r1, [r7, #8]
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80152fe:	f107 0310 	add.w	r3, r7, #16
 8015302:	68b9      	ldr	r1, [r7, #8]
 8015304:	4618      	mov	r0, r3
 8015306:	f004 fffb 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801530a:	f107 0310 	add.w	r3, r7, #16
 801530e:	683a      	ldr	r2, [r7, #0]
 8015310:	6879      	ldr	r1, [r7, #4]
 8015312:	4618      	mov	r0, r3
 8015314:	f005 f9fc 	bl	801a710 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	33e0      	adds	r3, #224	; 0xe0
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	f107 0210 	add.w	r2, r7, #16
 8015324:	4611      	mov	r1, r2
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	4798      	blx	r3
    return *this;
 801532a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801532c:	f107 0310 	add.w	r3, r7, #16
 8015330:	4618      	mov	r0, r3
 8015332:	f005 f80f 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015336:	4623      	mov	r3, r4
}
 8015338:	4618      	mov	r0, r3
 801533a:	374c      	adds	r7, #76	; 0x4c
 801533c:	46bd      	mov	sp, r7
 801533e:	bd90      	pop	{r4, r7, pc}

08015340 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8015340:	b590      	push	{r4, r7, lr}
 8015342:	b0a1      	sub	sp, #132	; 0x84
 8015344:	af00      	add	r7, sp, #0
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	607a      	str	r2, [r7, #4]
 801534c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801534e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015352:	6879      	ldr	r1, [r7, #4]
 8015354:	4618      	mov	r0, r3
 8015356:	f004 ffd3 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801535a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801535e:	683a      	ldr	r2, [r7, #0]
 8015360:	68b9      	ldr	r1, [r7, #8]
 8015362:	4618      	mov	r0, r3
 8015364:	f005 f9fa 	bl	801a75c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8015368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801536c:	4618      	mov	r0, r3
 801536e:	f005 fdc7 	bl	801af00 <_ZNK14MockNamedValue13getComparatorEv>
 8015372:	4603      	mov	r3, r0
 8015374:	2b00      	cmp	r3, #0
 8015376:	bf0c      	ite	eq
 8015378:	2301      	moveq	r3, #1
 801537a:	2300      	movne	r3, #0
 801537c:	b2db      	uxtb	r3, r3
 801537e:	2b00      	cmp	r3, #0
 8015380:	d01c      	beq.n	80153bc <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	33cc      	adds	r3, #204	; 0xcc
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	68f8      	ldr	r0, [r7, #12]
 801538c:	4798      	blx	r3
 801538e:	4601      	mov	r1, r0
 8015390:	f107 0314 	add.w	r3, r7, #20
 8015394:	68ba      	ldr	r2, [r7, #8]
 8015396:	4618      	mov	r0, r3
 8015398:	f004 fed6 	bl	801a148 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	33dc      	adds	r3, #220	; 0xdc
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f107 0214 	add.w	r2, r7, #20
 80153a8:	4611      	mov	r1, r2
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	4798      	blx	r3
        return *this;
 80153ae:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80153b0:	f107 0314 	add.w	r3, r7, #20
 80153b4:	4618      	mov	r0, r3
 80153b6:	f001 fc81 	bl	8016cbc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80153ba:	e009      	b.n	80153d0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	33e0      	adds	r3, #224	; 0xe0
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80153c8:	4611      	mov	r1, r2
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	4798      	blx	r3
    return *this;
 80153ce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80153d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80153d4:	4618      	mov	r0, r3
 80153d6:	f004 ffbd 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 80153da:	4623      	mov	r3, r4
}
 80153dc:	4618      	mov	r0, r3
 80153de:	3784      	adds	r7, #132	; 0x84
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd90      	pop	{r4, r7, pc}

080153e4 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80153e4:	b590      	push	{r4, r7, lr}
 80153e6:	b095      	sub	sp, #84	; 0x54
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	33f0      	adds	r3, #240	; 0xf0
 80153f6:	681c      	ldr	r4, [r3, #0]
 80153f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80153fc:	4917      	ldr	r1, [pc, #92]	; (801545c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 80153fe:	4618      	mov	r0, r3
 8015400:	f7f4 fa59 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8015404:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	68b9      	ldr	r1, [r7, #8]
 801540c:	68f8      	ldr	r0, [r7, #12]
 801540e:	47a0      	blx	r4
 8015410:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015414:	4618      	mov	r0, r3
 8015416:	f7f4 fe06 	bl	800a026 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801541a:	f107 0310 	add.w	r3, r7, #16
 801541e:	68b9      	ldr	r1, [r7, #8]
 8015420:	4618      	mov	r0, r3
 8015422:	f004 ff6d 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8015426:	f107 0310 	add.w	r3, r7, #16
 801542a:	6879      	ldr	r1, [r7, #4]
 801542c:	4618      	mov	r0, r3
 801542e:	f005 f8e7 	bl	801a600 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	33e4      	adds	r3, #228	; 0xe4
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f107 0210 	add.w	r2, r7, #16
 801543e:	4611      	mov	r1, r2
 8015440:	68f8      	ldr	r0, [r7, #12]
 8015442:	4798      	blx	r3

    return *this;
 8015444:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8015446:	f107 0310 	add.w	r3, r7, #16
 801544a:	4618      	mov	r0, r3
 801544c:	f004 ff82 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015450:	4623      	mov	r3, r4
}
 8015452:	4618      	mov	r0, r3
 8015454:	3754      	adds	r7, #84	; 0x54
 8015456:	46bd      	mov	sp, r7
 8015458:	bd90      	pop	{r4, r7, pc}
 801545a:	bf00      	nop
 801545c:	08022444 	.word	0x08022444

08015460 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8015460:	b590      	push	{r4, r7, lr}
 8015462:	b093      	sub	sp, #76	; 0x4c
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
 801546c:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	33f0      	adds	r3, #240	; 0xf0
 8015474:	681c      	ldr	r4, [r3, #0]
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	68ba      	ldr	r2, [r7, #8]
 801547a:	6879      	ldr	r1, [r7, #4]
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8015480:	f107 0310 	add.w	r3, r7, #16
 8015484:	6879      	ldr	r1, [r7, #4]
 8015486:	4618      	mov	r0, r3
 8015488:	f004 ff3a 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 801548c:	f107 0310 	add.w	r3, r7, #16
 8015490:	683a      	ldr	r2, [r7, #0]
 8015492:	68b9      	ldr	r1, [r7, #8]
 8015494:	4618      	mov	r0, r3
 8015496:	f005 f961 	bl	801a75c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	33e4      	adds	r3, #228	; 0xe4
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	f107 0210 	add.w	r2, r7, #16
 80154a6:	4611      	mov	r1, r2
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	4798      	blx	r3

    return *this;
 80154ac:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80154ae:	f107 0310 	add.w	r3, r7, #16
 80154b2:	4618      	mov	r0, r3
 80154b4:	f004 ff4e 	bl	801a354 <_ZN14MockNamedValueD1Ev>
    return *this;
 80154b8:	4623      	mov	r3, r4
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	374c      	adds	r7, #76	; 0x4c
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd90      	pop	{r4, r7, pc}

080154c2 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 80154c2:	b480      	push	{r7}
 80154c4:	b083      	sub	sp, #12
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	7d1b      	ldrb	r3, [r3, #20]
 80154ce:	2b02      	cmp	r3, #2
 80154d0:	bf0c      	ite	eq
 80154d2:	2301      	moveq	r3, #1
 80154d4:	2300      	movne	r3, #0
 80154d6:	b2db      	uxtb	r3, r3
}
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr

080154e4 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	7d1b      	ldrb	r3, [r3, #20]
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	bf0c      	ite	eq
 80154f4:	2301      	moveq	r3, #1
 80154f6:	2300      	movne	r3, #0
 80154f8:	b2db      	uxtb	r3, r3
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	370c      	adds	r7, #12
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr
	...

08015508 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8015508:	b5b0      	push	{r4, r5, r7, lr}
 801550a:	b096      	sub	sp, #88	; 0x58
 801550c:	af02      	add	r7, sp, #8
 801550e:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	7d5b      	ldrb	r3, [r3, #21]
 8015514:	2b00      	cmp	r3, #0
 8015516:	f040 80bc 	bne.w	8015692 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2201      	movs	r2, #1
 801551e:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	7d1b      	ldrb	r3, [r3, #20]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d014      	beq.n	8015552 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	7d1b      	ldrb	r3, [r3, #20]
 801552c:	2b02      	cmp	r3, #2
 801552e:	d10a      	bne.n	8015546 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	6998      	ldr	r0, [r3, #24]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	699b      	ldr	r3, [r3, #24]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	33d8      	adds	r3, #216	; 0xd8
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	68d2      	ldr	r2, [r2, #12]
 8015542:	4611      	mov	r1, r2
 8015544:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	331c      	adds	r3, #28
 801554a:	4618      	mov	r0, r3
 801554c:	f003 fe07 	bl	801915e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8015550:	e0a0      	b.n	8015694 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	331c      	adds	r3, #28
 8015556:	4618      	mov	r0, r3
 8015558:	f003 fac3 	bl	8018ae2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 801555c:	4603      	mov	r3, r0
 801555e:	2b00      	cmp	r3, #0
 8015560:	d00f      	beq.n	8015582 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8015562:	f7fb fd8b 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8015566:	4604      	mov	r4, r0
 8015568:	6823      	ldr	r3, [r4, #0]
 801556a:	3368      	adds	r3, #104	; 0x68
 801556c:	681d      	ldr	r5, [r3, #0]
 801556e:	f7fb fd95 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015572:	4603      	mov	r3, r0
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	f240 1385 	movw	r3, #389	; 0x185
 801557a:	4a48      	ldr	r2, [pc, #288]	; (801569c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 801557c:	4948      	ldr	r1, [pc, #288]	; (80156a0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801557e:	4620      	mov	r0, r4
 8015580:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	331c      	adds	r3, #28
 8015586:	4618      	mov	r0, r3
 8015588:	f003 fd5f 	bl	801904a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 801558c:	4602      	mov	r2, r0
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	699b      	ldr	r3, [r3, #24]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d01f      	beq.n	80155da <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	699a      	ldr	r2, [r3, #24]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	699b      	ldr	r3, [r3, #24]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	33e4      	adds	r3, #228	; 0xe4
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	4610      	mov	r0, r2
 80155aa:	4798      	blx	r3
        callHasSucceeded();
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	33d0      	adds	r3, #208	; 0xd0
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	6998      	ldr	r0, [r3, #24]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	699b      	ldr	r3, [r3, #24]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	33d8      	adds	r3, #216	; 0xd8
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	687a      	ldr	r2, [r7, #4]
 80155c8:	68d2      	ldr	r2, [r2, #12]
 80155ca:	4611      	mov	r1, r2
 80155cc:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	331c      	adds	r3, #28
 80155d2:	4618      	mov	r0, r3
 80155d4:	f003 fdc3 	bl	801915e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80155d8:	e05c      	b.n	8015694 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	331c      	adds	r3, #28
 80155de:	4618      	mov	r0, r3
 80155e0:	f003 ffc4 	bl	801956c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d029      	beq.n	801563e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	33cc      	adds	r3, #204	; 0xcc
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	4798      	blx	r3
 80155f6:	4604      	mov	r4, r0
 80155f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80155fc:	6879      	ldr	r1, [r7, #4]
 80155fe:	4618      	mov	r0, r3
 8015600:	f7ff f93b 	bl	801487a <_ZNK21MockCheckedActualCall7getNameEv>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015608:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801560c:	f107 000c 	add.w	r0, r7, #12
 8015610:	4621      	mov	r1, r4
 8015612:	f004 fd21 	bl	801a058 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8015616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801561a:	4618      	mov	r0, r3
 801561c:	f7f4 fd03 	bl	800a026 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	33dc      	adds	r3, #220	; 0xdc
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	f107 020c 	add.w	r2, r7, #12
 801562c:	4611      	mov	r1, r2
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015632:	f107 030c 	add.w	r3, r7, #12
 8015636:	4618      	mov	r0, r3
 8015638:	f001 fb62 	bl	8016d00 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801563c:	e02a      	b.n	8015694 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	33cc      	adds	r3, #204	; 0xcc
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	4798      	blx	r3
 801564a:	4604      	mov	r4, r0
 801564c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015650:	6879      	ldr	r1, [r7, #4]
 8015652:	4618      	mov	r0, r3
 8015654:	f7ff f911 	bl	801487a <_ZNK21MockCheckedActualCall7getNameEv>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015660:	f107 000c 	add.w	r0, r7, #12
 8015664:	4621      	mov	r1, r4
 8015666:	f004 fe05 	bl	801a274 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801566a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801566e:	4618      	mov	r0, r3
 8015670:	f7f4 fcd9 	bl	800a026 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	33dc      	adds	r3, #220	; 0xdc
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f107 020c 	add.w	r2, r7, #12
 8015680:	4611      	mov	r1, r2
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015686:	f107 030c 	add.w	r3, r7, #12
 801568a:	4618      	mov	r0, r3
 801568c:	f001 fb5a 	bl	8016d44 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8015690:	e000      	b.n	8015694 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8015692:	bf00      	nop
    }
}
 8015694:	3750      	adds	r7, #80	; 0x50
 8015696:	46bd      	mov	sp, r7
 8015698:	bdb0      	pop	{r4, r5, r7, pc}
 801569a:	bf00      	nop
 801569c:	0802244c 	.word	0x0802244c
 80156a0:	080224b4 	.word	0x080224b4

080156a4 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 80156a4:	b480      	push	{r7}
 80156a6:	b083      	sub	sp, #12
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	460b      	mov	r3, r1
 80156ae:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	78fa      	ldrb	r2, [r7, #3]
 80156b4:	751a      	strb	r2, [r3, #20]
}
 80156b6:	bf00      	nop
 80156b8:	370c      	adds	r7, #12
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr
	...

080156c4 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b084      	sub	sp, #16
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6039      	str	r1, [r7, #0]
    checkExpectations();
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	33c4      	adds	r3, #196	; 0xc4
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	6838      	ldr	r0, [r7, #0]
 80156d8:	4798      	blx	r3
    if (matchingExpectation_)
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	699b      	ldr	r3, [r3, #24]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d00a      	beq.n	80156f8 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	6999      	ldr	r1, [r3, #24]
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	699b      	ldr	r3, [r3, #24]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	3394      	adds	r3, #148	; 0x94
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	4610      	mov	r0, r2
 80156f4:	4798      	blx	r3
 80156f6:	e010      	b.n	801571a <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80156f8:	f107 0308 	add.w	r3, r7, #8
 80156fc:	4909      	ldr	r1, [pc, #36]	; (8015724 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80156fe:	4618      	mov	r0, r3
 8015700:	f7f4 f8d9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8015704:	f107 0308 	add.w	r3, r7, #8
 8015708:	4619      	mov	r1, r3
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f004 fdf8 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8015710:	f107 0308 	add.w	r3, r7, #8
 8015714:	4618      	mov	r0, r3
 8015716:	f7f4 fc86 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	3710      	adds	r7, #16
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop
 8015724:	08022530 	.word	0x08022530

08015728 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	3350      	adds	r3, #80	; 0x50
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	4798      	blx	r3
 8015740:	4603      	mov	r3, r0
 8015742:	f083 0301 	eor.w	r3, r3, #1
 8015746:	b2db      	uxtb	r3, r3
 8015748:	2b00      	cmp	r3, #0
 801574a:	d001      	beq.n	8015750 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 801574c:	78fb      	ldrb	r3, [r7, #3]
 801574e:	e007      	b.n	8015760 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	335c      	adds	r3, #92	; 0x5c
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	4798      	blx	r3
 801575c:	4603      	mov	r3, r0
 801575e:	bf00      	nop
}
 8015760:	4618      	mov	r0, r3
 8015762:	3708      	adds	r7, #8
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8015768:	b590      	push	{r4, r7, lr}
 801576a:	b091      	sub	sp, #68	; 0x44
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	3354      	adds	r3, #84	; 0x54
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	f107 0208 	add.w	r2, r7, #8
 801577c:	6879      	ldr	r1, [r7, #4]
 801577e:	4610      	mov	r0, r2
 8015780:	4798      	blx	r3
 8015782:	f107 0308 	add.w	r3, r7, #8
 8015786:	4618      	mov	r0, r3
 8015788:	f005 f898 	bl	801a8bc <_ZNK14MockNamedValue12getBoolValueEv>
 801578c:	4603      	mov	r3, r0
 801578e:	461c      	mov	r4, r3
 8015790:	bf00      	nop
 8015792:	f107 0308 	add.w	r3, r7, #8
 8015796:	4618      	mov	r0, r3
 8015798:	f004 fddc 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 801579c:	4623      	mov	r3, r4
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3744      	adds	r7, #68	; 0x44
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd90      	pop	{r4, r7, pc}

080157a6 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b082      	sub	sp, #8
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
 80157ae:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	3350      	adds	r3, #80	; 0x50
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	4798      	blx	r3
 80157bc:	4603      	mov	r3, r0
 80157be:	f083 0301 	eor.w	r3, r3, #1
 80157c2:	b2db      	uxtb	r3, r3
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d001      	beq.n	80157cc <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	e007      	b.n	80157dc <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	3364      	adds	r3, #100	; 0x64
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	4798      	blx	r3
 80157d8:	4603      	mov	r3, r0
 80157da:	bf00      	nop
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80157e4:	b590      	push	{r4, r7, lr}
 80157e6:	b091      	sub	sp, #68	; 0x44
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	3354      	adds	r3, #84	; 0x54
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	f107 0208 	add.w	r2, r7, #8
 80157f8:	6879      	ldr	r1, [r7, #4]
 80157fa:	4610      	mov	r0, r2
 80157fc:	4798      	blx	r3
 80157fe:	f107 0308 	add.w	r3, r7, #8
 8015802:	4618      	mov	r0, r3
 8015804:	f005 f8d2 	bl	801a9ac <_ZNK14MockNamedValue11getIntValueEv>
 8015808:	4604      	mov	r4, r0
 801580a:	bf00      	nop
 801580c:	f107 0308 	add.w	r3, r7, #8
 8015810:	4618      	mov	r0, r3
 8015812:	f004 fd9f 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015816:	4623      	mov	r3, r4
}
 8015818:	4618      	mov	r0, r3
 801581a:	3744      	adds	r7, #68	; 0x44
 801581c:	46bd      	mov	sp, r7
 801581e:	bd90      	pop	{r4, r7, pc}

08015820 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8015820:	b590      	push	{r4, r7, lr}
 8015822:	b091      	sub	sp, #68	; 0x44
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	3354      	adds	r3, #84	; 0x54
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	f107 0208 	add.w	r2, r7, #8
 8015834:	6879      	ldr	r1, [r7, #4]
 8015836:	4610      	mov	r0, r2
 8015838:	4798      	blx	r3
 801583a:	f107 0308 	add.w	r3, r7, #8
 801583e:	4618      	mov	r0, r3
 8015840:	f005 f93e 	bl	801aac0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8015844:	4604      	mov	r4, r0
 8015846:	bf00      	nop
 8015848:	f107 0308 	add.w	r3, r7, #8
 801584c:	4618      	mov	r0, r3
 801584e:	f004 fd81 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015852:	4623      	mov	r3, r4
}
 8015854:	4618      	mov	r0, r3
 8015856:	3744      	adds	r7, #68	; 0x44
 8015858:	46bd      	mov	sp, r7
 801585a:	bd90      	pop	{r4, r7, pc}

0801585c <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	3350      	adds	r3, #80	; 0x50
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	4798      	blx	r3
 8015872:	4603      	mov	r3, r0
 8015874:	f083 0301 	eor.w	r3, r3, #1
 8015878:	b2db      	uxtb	r3, r3
 801587a:	2b00      	cmp	r3, #0
 801587c:	d001      	beq.n	8015882 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	e007      	b.n	8015892 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	3368      	adds	r3, #104	; 0x68
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	4798      	blx	r3
 801588e:	4603      	mov	r3, r0
 8015890:	bf00      	nop
}
 8015892:	4618      	mov	r0, r3
 8015894:	3708      	adds	r7, #8
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}

0801589a <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801589a:	b590      	push	{r4, r7, lr}
 801589c:	b091      	sub	sp, #68	; 0x44
 801589e:	af00      	add	r7, sp, #0
 80158a0:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	3354      	adds	r3, #84	; 0x54
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	f107 0208 	add.w	r2, r7, #8
 80158ae:	6879      	ldr	r1, [r7, #4]
 80158b0:	4610      	mov	r0, r2
 80158b2:	4798      	blx	r3
 80158b4:	f107 0308 	add.w	r3, r7, #8
 80158b8:	4618      	mov	r0, r3
 80158ba:	f005 f89f 	bl	801a9fc <_ZNK14MockNamedValue15getLongIntValueEv>
 80158be:	4604      	mov	r4, r0
 80158c0:	bf00      	nop
 80158c2:	f107 0308 	add.w	r3, r7, #8
 80158c6:	4618      	mov	r0, r3
 80158c8:	f004 fd44 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 80158cc:	4623      	mov	r3, r4
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	3744      	adds	r7, #68	; 0x44
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd90      	pop	{r4, r7, pc}

080158d6 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80158d6:	b580      	push	{r7, lr}
 80158d8:	b082      	sub	sp, #8
 80158da:	af00      	add	r7, sp, #0
 80158dc:	6078      	str	r0, [r7, #4]
 80158de:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	3350      	adds	r3, #80	; 0x50
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	4798      	blx	r3
 80158ec:	4603      	mov	r3, r0
 80158ee:	f083 0301 	eor.w	r3, r3, #1
 80158f2:	b2db      	uxtb	r3, r3
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d001      	beq.n	80158fc <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	e007      	b.n	801590c <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	3370      	adds	r3, #112	; 0x70
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	4798      	blx	r3
 8015908:	4603      	mov	r3, r0
 801590a:	bf00      	nop
}
 801590c:	4618      	mov	r0, r3
 801590e:	3708      	adds	r7, #8
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8015914:	b5b0      	push	{r4, r5, r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af02      	add	r7, sp, #8
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801591e:	f7fb fbad 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8015922:	4604      	mov	r4, r0
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	3368      	adds	r3, #104	; 0x68
 8015928:	681d      	ldr	r5, [r3, #0]
 801592a:	f7fb fbb7 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801592e:	4603      	mov	r3, r0
 8015930:	9300      	str	r3, [sp, #0]
 8015932:	f240 13fb 	movw	r3, #507	; 0x1fb
 8015936:	4a06      	ldr	r2, [pc, #24]	; (8015950 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8015938:	4906      	ldr	r1, [pc, #24]	; (8015954 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801593a:	4620      	mov	r0, r4
 801593c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801593e:	2100      	movs	r1, #0
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7f1 fffb 	bl	800793c <_ZN18cpputest_ulonglongC1Ei>
}
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	3708      	adds	r7, #8
 801594a:	46bd      	mov	sp, r7
 801594c:	bdb0      	pop	{r4, r5, r7, pc}
 801594e:	bf00      	nop
 8015950:	0802244c 	.word	0x0802244c
 8015954:	08022468 	.word	0x08022468

08015958 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8015958:	b5b0      	push	{r4, r5, r7, lr}
 801595a:	b086      	sub	sp, #24
 801595c:	af02      	add	r7, sp, #8
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	4639      	mov	r1, r7
 8015964:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8015968:	f7fb fb88 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801596c:	4604      	mov	r4, r0
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	3368      	adds	r3, #104	; 0x68
 8015972:	681d      	ldr	r5, [r3, #0]
 8015974:	f7fb fb92 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015978:	4603      	mov	r3, r0
 801597a:	9300      	str	r3, [sp, #0]
 801597c:	f240 2301 	movw	r3, #513	; 0x201
 8015980:	4a06      	ldr	r2, [pc, #24]	; (801599c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8015982:	4907      	ldr	r1, [pc, #28]	; (80159a0 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8015984:	4620      	mov	r0, r4
 8015986:	47a8      	blx	r5
    return default_value;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	461a      	mov	r2, r3
 801598c:	463b      	mov	r3, r7
 801598e:	cb03      	ldmia	r3!, {r0, r1}
 8015990:	6010      	str	r0, [r2, #0]
 8015992:	6051      	str	r1, [r2, #4]
}
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	3710      	adds	r7, #16
 8015998:	46bd      	mov	sp, r7
 801599a:	bdb0      	pop	{r4, r5, r7, pc}
 801599c:	0802244c 	.word	0x0802244c
 80159a0:	08022468 	.word	0x08022468

080159a4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 80159a4:	b5b0      	push	{r4, r5, r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af02      	add	r7, sp, #8
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80159ae:	f7fb fb65 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80159b2:	4604      	mov	r4, r0
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	3368      	adds	r3, #104	; 0x68
 80159b8:	681d      	ldr	r5, [r3, #0]
 80159ba:	f7fb fb6f 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80159be:	4603      	mov	r3, r0
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	f240 2307 	movw	r3, #519	; 0x207
 80159c6:	4a06      	ldr	r2, [pc, #24]	; (80159e0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 80159c8:	4906      	ldr	r1, [pc, #24]	; (80159e4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 80159ca:	4620      	mov	r0, r4
 80159cc:	47a8      	blx	r5
    return cpputest_longlong(0);
 80159ce:	2100      	movs	r1, #0
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f7f1 ffa7 	bl	8007924 <_ZN17cpputest_longlongC1Ei>
}
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	3708      	adds	r7, #8
 80159da:	46bd      	mov	sp, r7
 80159dc:	bdb0      	pop	{r4, r5, r7, pc}
 80159de:	bf00      	nop
 80159e0:	0802244c 	.word	0x0802244c
 80159e4:	08022494 	.word	0x08022494

080159e8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80159e8:	b5b0      	push	{r4, r5, r7, lr}
 80159ea:	b086      	sub	sp, #24
 80159ec:	af02      	add	r7, sp, #8
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	4639      	mov	r1, r7
 80159f4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80159f8:	f7fb fb40 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80159fc:	4604      	mov	r4, r0
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	3368      	adds	r3, #104	; 0x68
 8015a02:	681d      	ldr	r5, [r3, #0]
 8015a04:	f7fb fb4a 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	f240 230d 	movw	r3, #525	; 0x20d
 8015a10:	4a06      	ldr	r2, [pc, #24]	; (8015a2c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8015a12:	4907      	ldr	r1, [pc, #28]	; (8015a30 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8015a14:	4620      	mov	r0, r4
 8015a16:	47a8      	blx	r5
    return default_value;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	463b      	mov	r3, r7
 8015a1e:	cb03      	ldmia	r3!, {r0, r1}
 8015a20:	6010      	str	r0, [r2, #0]
 8015a22:	6051      	str	r1, [r2, #4]
}
 8015a24:	68f8      	ldr	r0, [r7, #12]
 8015a26:	3710      	adds	r7, #16
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8015a2c:	0802244c 	.word	0x0802244c
 8015a30:	08022494 	.word	0x08022494

08015a34 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	ed2d 8b02 	vpush	{d8}
 8015a3a:	b090      	sub	sp, #64	; 0x40
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	3354      	adds	r3, #84	; 0x54
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	f107 0208 	add.w	r2, r7, #8
 8015a4c:	6879      	ldr	r1, [r7, #4]
 8015a4e:	4610      	mov	r0, r2
 8015a50:	4798      	blx	r3
 8015a52:	f107 0308 	add.w	r3, r7, #8
 8015a56:	4618      	mov	r0, r3
 8015a58:	f005 f90a 	bl	801ac70 <_ZNK14MockNamedValue14getDoubleValueEv>
 8015a5c:	eeb0 8a40 	vmov.f32	s16, s0
 8015a60:	eef0 8a60 	vmov.f32	s17, s1
 8015a64:	bf00      	nop
 8015a66:	f107 0308 	add.w	r3, r7, #8
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f004 fc72 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015a70:	eeb0 7a48 	vmov.f32	s14, s16
 8015a74:	eef0 7a68 	vmov.f32	s15, s17
}
 8015a78:	eeb0 0a47 	vmov.f32	s0, s14
 8015a7c:	eef0 0a67 	vmov.f32	s1, s15
 8015a80:	3740      	adds	r7, #64	; 0x40
 8015a82:	46bd      	mov	sp, r7
 8015a84:	ecbd 8b02 	vpop	{d8}
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b084      	sub	sp, #16
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	60f8      	str	r0, [r7, #12]
 8015a92:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	3350      	adds	r3, #80	; 0x50
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	68f8      	ldr	r0, [r7, #12]
 8015aa0:	4798      	blx	r3
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	f083 0301 	eor.w	r3, r3, #1
 8015aa8:	b2db      	uxtb	r3, r3
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d002      	beq.n	8015ab4 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8015aae:	ed97 7b00 	vldr	d7, [r7]
 8015ab2:	e00a      	b.n	8015aca <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	3398      	adds	r3, #152	; 0x98
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68f8      	ldr	r0, [r7, #12]
 8015abe:	4798      	blx	r3
 8015ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8015ac4:	eef0 7a60 	vmov.f32	s15, s1
 8015ac8:	bf00      	nop
}
 8015aca:	eeb0 0a47 	vmov.f32	s0, s14
 8015ace:	eef0 0a67 	vmov.f32	s1, s15
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8015ad8:	b590      	push	{r4, r7, lr}
 8015ada:	b091      	sub	sp, #68	; 0x44
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	3354      	adds	r3, #84	; 0x54
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f107 0208 	add.w	r2, r7, #8
 8015aec:	6879      	ldr	r1, [r7, #4]
 8015aee:	4610      	mov	r0, r2
 8015af0:	4798      	blx	r3
 8015af2:	f107 0308 	add.w	r3, r7, #8
 8015af6:	4618      	mov	r0, r3
 8015af8:	f004 ff08 	bl	801a90c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8015afc:	4604      	mov	r4, r0
 8015afe:	bf00      	nop
 8015b00:	f107 0308 	add.w	r3, r7, #8
 8015b04:	4618      	mov	r0, r3
 8015b06:	f004 fc25 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015b0a:	4623      	mov	r3, r4
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3744      	adds	r7, #68	; 0x44
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd90      	pop	{r4, r7, pc}

08015b14 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
 8015b1c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	3350      	adds	r3, #80	; 0x50
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	4798      	blx	r3
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	f083 0301 	eor.w	r3, r3, #1
 8015b30:	b2db      	uxtb	r3, r3
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d001      	beq.n	8015b3a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	e007      	b.n	8015b4a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	3388      	adds	r3, #136	; 0x88
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	4798      	blx	r3
 8015b46:	4603      	mov	r3, r0
 8015b48:	bf00      	nop
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	3708      	adds	r7, #8
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}

08015b52 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8015b52:	b580      	push	{r7, lr}
 8015b54:	b082      	sub	sp, #8
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	6078      	str	r0, [r7, #4]
 8015b5a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	3350      	adds	r3, #80	; 0x50
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	4798      	blx	r3
 8015b68:	4603      	mov	r3, r0
 8015b6a:	f083 0301 	eor.w	r3, r3, #1
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d001      	beq.n	8015b78 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	e007      	b.n	8015b88 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	33a0      	adds	r3, #160	; 0xa0
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	4798      	blx	r3
 8015b84:	4603      	mov	r3, r0
 8015b86:	bf00      	nop
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3708      	adds	r7, #8
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8015b90:	b590      	push	{r4, r7, lr}
 8015b92:	b091      	sub	sp, #68	; 0x44
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	3354      	adds	r3, #84	; 0x54
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	f107 0208 	add.w	r2, r7, #8
 8015ba4:	6879      	ldr	r1, [r7, #4]
 8015ba6:	4610      	mov	r0, r2
 8015ba8:	4798      	blx	r3
 8015baa:	f107 0308 	add.w	r3, r7, #8
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f005 f8e2 	bl	801ad78 <_ZNK14MockNamedValue15getPointerValueEv>
 8015bb4:	4604      	mov	r4, r0
 8015bb6:	bf00      	nop
 8015bb8:	f107 0308 	add.w	r3, r7, #8
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f004 fbc9 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015bc2:	4623      	mov	r3, r4
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3744      	adds	r7, #68	; 0x44
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd90      	pop	{r4, r7, pc}

08015bcc <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8015bcc:	b590      	push	{r4, r7, lr}
 8015bce:	b091      	sub	sp, #68	; 0x44
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	3354      	adds	r3, #84	; 0x54
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	f107 0208 	add.w	r2, r7, #8
 8015be0:	6879      	ldr	r1, [r7, #4]
 8015be2:	4610      	mov	r0, r2
 8015be4:	4798      	blx	r3
 8015be6:	f107 0308 	add.w	r3, r7, #8
 8015bea:	4618      	mov	r0, r3
 8015bec:	f005 f8ec 	bl	801adc8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	bf00      	nop
 8015bf4:	f107 0308 	add.w	r3, r7, #8
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f004 fbab 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015bfe:	4623      	mov	r3, r4
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3744      	adds	r7, #68	; 0x44
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd90      	pop	{r4, r7, pc}

08015c08 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3350      	adds	r3, #80	; 0x50
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	4798      	blx	r3
 8015c1e:	4603      	mov	r3, r0
 8015c20:	f083 0301 	eor.w	r3, r3, #1
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d001      	beq.n	8015c2e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	e007      	b.n	8015c3e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	33a8      	adds	r3, #168	; 0xa8
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	4798      	blx	r3
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	bf00      	nop
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3708      	adds	r7, #8
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8015c46:	b590      	push	{r4, r7, lr}
 8015c48:	b091      	sub	sp, #68	; 0x44
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	3354      	adds	r3, #84	; 0x54
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	f107 0208 	add.w	r2, r7, #8
 8015c5a:	6879      	ldr	r1, [r7, #4]
 8015c5c:	4610      	mov	r0, r2
 8015c5e:	4798      	blx	r3
 8015c60:	f107 0308 	add.w	r3, r7, #8
 8015c64:	4618      	mov	r0, r3
 8015c66:	f005 f8d7 	bl	801ae18 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8015c6a:	4604      	mov	r4, r0
 8015c6c:	bf00      	nop
 8015c6e:	f107 0308 	add.w	r3, r7, #8
 8015c72:	4618      	mov	r0, r3
 8015c74:	f004 fb6e 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015c78:	4623      	mov	r3, r4
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3744      	adds	r7, #68	; 0x44
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd90      	pop	{r4, r7, pc}

08015c82 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b082      	sub	sp, #8
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	3350      	adds	r3, #80	; 0x50
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	4798      	blx	r3
 8015c98:	4603      	mov	r3, r0
 8015c9a:	f083 0301 	eor.w	r3, r3, #1
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d001      	beq.n	8015ca8 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	e007      	b.n	8015cb8 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	33b0      	adds	r3, #176	; 0xb0
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	4798      	blx	r3
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	bf00      	nop
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3708      	adds	r7, #8
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}

08015cc0 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b082      	sub	sp, #8
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	3350      	adds	r3, #80	; 0x50
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	4798      	blx	r3
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	f083 0301 	eor.w	r3, r3, #1
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d001      	beq.n	8015ce6 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	e007      	b.n	8015cf6 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	3394      	adds	r3, #148	; 0x94
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	4798      	blx	r3
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	bf00      	nop
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8015cfe:	b590      	push	{r4, r7, lr}
 8015d00:	b091      	sub	sp, #68	; 0x44
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	3354      	adds	r3, #84	; 0x54
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f107 0208 	add.w	r2, r7, #8
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	4610      	mov	r0, r2
 8015d16:	4798      	blx	r3
 8015d18:	f107 0308 	add.w	r3, r7, #8
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f005 f803 	bl	801ad28 <_ZNK14MockNamedValue14getStringValueEv>
 8015d22:	4604      	mov	r4, r0
 8015d24:	bf00      	nop
 8015d26:	f107 0308 	add.w	r3, r7, #8
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f004 fb12 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015d30:	4623      	mov	r3, r4
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3744      	adds	r7, #68	; 0x44
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd90      	pop	{r4, r7, pc}

08015d3a <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8015d3a:	b590      	push	{r4, r7, lr}
 8015d3c:	b093      	sub	sp, #76	; 0x4c
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	3354      	adds	r3, #84	; 0x54
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	f107 0210 	add.w	r2, r7, #16
 8015d4e:	6879      	ldr	r1, [r7, #4]
 8015d50:	4610      	mov	r0, r2
 8015d52:	4798      	blx	r3
 8015d54:	f107 0308 	add.w	r3, r7, #8
 8015d58:	f107 0210 	add.w	r2, r7, #16
 8015d5c:	4611      	mov	r1, r2
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f004 fd8e 	bl	801a880 <_ZNK14MockNamedValue7getNameEv>
 8015d64:	f107 0308 	add.w	r3, r7, #8
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f4 f94b 	bl	800a004 <_ZNK12SimpleString7isEmptyEv>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	f083 0301 	eor.w	r3, r3, #1
 8015d74:	b2dc      	uxtb	r4, r3
 8015d76:	f107 0308 	add.w	r3, r7, #8
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7f4 f953 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8015d80:	f107 0310 	add.w	r3, r7, #16
 8015d84:	4618      	mov	r0, r3
 8015d86:	f004 fae5 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 8015d8a:	4623      	mov	r3, r4
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	374c      	adds	r7, #76	; 0x4c
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd90      	pop	{r4, r7, pc}

08015d94 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8015d94:	b590      	push	{r4, r7, lr}
 8015d96:	b095      	sub	sp, #84	; 0x54
 8015d98:	af02      	add	r7, sp, #8
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	33c0      	adds	r3, #192	; 0xc0
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	4798      	blx	r3
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d001      	beq.n	8015db4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8015db0:	687c      	ldr	r4, [r7, #4]
 8015db2:	e053      	b.n	8015e5c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	331c      	adds	r3, #28
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f003 f8ca 	bl	8018f54 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	699b      	ldr	r3, [r3, #24]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d109      	bne.n	8015ddc <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	331c      	adds	r3, #28
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f002 fe20 	bl	8018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d001      	beq.n	8015ddc <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e000      	b.n	8015dde <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d02c      	beq.n	8015e3c <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	33cc      	adds	r3, #204	; 0xcc
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	4798      	blx	r3
 8015dee:	4604      	mov	r4, r0
 8015df0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015df4:	6879      	ldr	r1, [r7, #4]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7fe fd3f 	bl	801487a <_ZNK21MockCheckedActualCall7getNameEv>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015e04:	f107 000c 	add.w	r0, r7, #12
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	4621      	mov	r1, r4
 8015e0e:	f004 f9fb 	bl	801a208 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8015e12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7f4 f905 	bl	800a026 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	33dc      	adds	r3, #220	; 0xdc
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	f107 020c 	add.w	r2, r7, #12
 8015e28:	4611      	mov	r1, r2
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	4798      	blx	r3
        return *this;
 8015e2e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8015e30:	f107 030c 	add.w	r3, r7, #12
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 ffa7 	bl	8016d88 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8015e3a:	e00f      	b.n	8015e5c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	331c      	adds	r3, #28
 8015e40:	4618      	mov	r0, r3
 8015e42:	f003 f9a7 	bl	8019194 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	699b      	ldr	r3, [r3, #24]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d105      	bne.n	8015e5a <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	33d8      	adds	r3, #216	; 0xd8
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	4798      	blx	r3
    }

    return *this;
 8015e5a:	687c      	ldr	r4, [r7, #4]
 8015e5c:	4623      	mov	r3, r4
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	374c      	adds	r7, #76	; 0x4c
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd90      	pop	{r4, r7, pc}
	...

08015e68 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8015e68:	b590      	push	{r4, r7, lr}
 8015e6a:	b087      	sub	sp, #28
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
 8015e74:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8015e76:	f240 2282 	movw	r2, #642	; 0x282
 8015e7a:	4913      	ldr	r1, [pc, #76]	; (8015ec8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8015e7c:	2018      	movs	r0, #24
 8015e7e:	f7f1 f957 	bl	8007130 <_ZnwjPKci>
 8015e82:	4604      	mov	r4, r0
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	68b9      	ldr	r1, [r7, #8]
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	f7fe fa48 	bl	8014320 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8015e90:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d103      	bne.n	8015ea2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	693a      	ldr	r2, [r7, #16]
 8015e9e:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8015ea0:	e00d      	b.n	8015ebe <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ea6:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	695b      	ldr	r3, [r3, #20]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d003      	beq.n	8015eb8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	695b      	ldr	r3, [r3, #20]
 8015eb4:	617b      	str	r3, [r7, #20]
 8015eb6:	e7f7      	b.n	8015ea8 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	693a      	ldr	r2, [r7, #16]
 8015ebc:	615a      	str	r2, [r3, #20]
}
 8015ebe:	bf00      	nop
 8015ec0:	371c      	adds	r7, #28
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd90      	pop	{r4, r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	0802244c 	.word	0x0802244c

08015ecc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b082      	sub	sp, #8
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	3308      	adds	r3, #8
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7f4 f8a4 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7f4 f8a0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3708      	adds	r7, #8
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}

08015ef0 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8015ef0:	b590      	push	{r4, r7, lr}
 8015ef2:	b085      	sub	sp, #20
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015efc:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8015efe:	2300      	movs	r3, #0
 8015f00:	60bb      	str	r3, [r7, #8]

    while (current) {
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d012      	beq.n	8015f2e <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	695b      	ldr	r3, [r3, #20]
 8015f10:	60fb      	str	r3, [r7, #12]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	68fa      	ldr	r2, [r7, #12]
 8015f16:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8015f18:	68bc      	ldr	r4, [r7, #8]
 8015f1a:	2c00      	cmp	r4, #0
 8015f1c:	d0f1      	beq.n	8015f02 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f7ff ffd4 	bl	8015ecc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8015f24:	2118      	movs	r1, #24
 8015f26:	4620      	mov	r0, r4
 8015f28:	f7f1 f916 	bl	8007158 <_ZdlPvj>
    while (current) {
 8015f2c:	e7e9      	b.n	8015f02 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8015f2e:	bf00      	nop
 8015f30:	3714      	adds	r7, #20
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd90      	pop	{r4, r7, pc}
	...

08015f38 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fe fc6a 	bl	801481c <_ZN14MockActualCallC1Ev>
 8015f48:	4a06      	ldr	r2, [pc, #24]	; (8015f64 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	601a      	str	r2, [r3, #0]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	3304      	adds	r3, #4
 8015f52:	4905      	ldr	r1, [pc, #20]	; (8015f68 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7f3 fcae 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
{
}
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	3708      	adds	r7, #8
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}
 8015f64:	08024420 	.word	0x08024420
 8015f68:	08022434 	.word	0x08022434

08015f6c <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	4a08      	ldr	r2, [pc, #32]	; (8015f98 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	601a      	str	r2, [r3, #0]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	3304      	adds	r3, #4
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7f4 f851 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7fe fc58 	bl	801483c <_ZN14MockActualCallD1Ev>
{
}
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3708      	adds	r7, #8
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop
 8015f98:	08024420 	.word	0x08024420

08015f9c <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
}
 8015fa4:	6878      	ldr	r0, [r7, #4]
 8015fa6:	f7ff ffe1 	bl	8015f6c <_ZN19MockActualCallTraceD1Ev>
 8015faa:	210c      	movs	r1, #12
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7f1 f8d3 	bl	8007158 <_ZdlPvj>
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3708      	adds	r7, #8
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	3304      	adds	r3, #4
 8015fca:	4907      	ldr	r1, [pc, #28]	; (8015fe8 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7f4 f8b9 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	6839      	ldr	r1, [r7, #0]
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f4 f8a1 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    return *this;
 8015fde:	687b      	ldr	r3, [r7, #4]
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3708      	adds	r7, #8
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	08022540 	.word	0x08022540

08015fec <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8015fec:	b590      	push	{r4, r7, lr}
 8015fee:	b085      	sub	sp, #20
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
 8015ff4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	3304      	adds	r3, #4
 8015ffa:	490e      	ldr	r1, [pc, #56]	; (8016034 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f4 f8a1 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	1d1c      	adds	r4, r3, #4
 8016006:	f107 0308 	add.w	r3, r7, #8
 801600a:	6839      	ldr	r1, [r7, #0]
 801600c:	4618      	mov	r0, r3
 801600e:	f7f4 fd39 	bl	800aa84 <_Z10StringFromj>
 8016012:	f107 0308 	add.w	r3, r7, #8
 8016016:	4619      	mov	r1, r3
 8016018:	4620      	mov	r0, r4
 801601a:	f7f4 f881 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801601e:	f107 0308 	add.w	r3, r7, #8
 8016022:	4618      	mov	r0, r3
 8016024:	f7f3 ffff 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016028:	687b      	ldr	r3, [r7, #4]
}
 801602a:	4618      	mov	r0, r3
 801602c:	3714      	adds	r7, #20
 801602e:	46bd      	mov	sp, r7
 8016030:	bd90      	pop	{r4, r7, pc}
 8016032:	bf00      	nop
 8016034:	08022550 	.word	0x08022550

08016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
 8016040:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	3304      	adds	r3, #4
 8016046:	490a      	ldr	r1, [pc, #40]	; (8016070 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8016048:	4618      	mov	r0, r3
 801604a:	f7f4 f87b 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	3304      	adds	r3, #4
 8016052:	6839      	ldr	r1, [r7, #0]
 8016054:	4618      	mov	r0, r3
 8016056:	f7f4 f863 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	3304      	adds	r3, #4
 801605e:	4905      	ldr	r1, [pc, #20]	; (8016074 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8016060:	4618      	mov	r0, r3
 8016062:	f7f4 f86f 	bl	800a144 <_ZN12SimpleStringpLEPKc>
}
 8016066:	bf00      	nop
 8016068:	3708      	adds	r7, #8
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	08022560 	.word	0x08022560
 8016074:	08022564 	.word	0x08022564

08016078 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8016078:	b590      	push	{r4, r7, lr}
 801607a:	b087      	sub	sp, #28
 801607c:	af00      	add	r7, sp, #0
 801607e:	60f8      	str	r0, [r7, #12]
 8016080:	60b9      	str	r1, [r7, #8]
 8016082:	4613      	mov	r3, r2
 8016084:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8016086:	68b9      	ldr	r1, [r7, #8]
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f7ff ffd5 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	1d1c      	adds	r4, r3, #4
 8016092:	f107 0310 	add.w	r3, r7, #16
 8016096:	79fa      	ldrb	r2, [r7, #7]
 8016098:	4611      	mov	r1, r2
 801609a:	4618      	mov	r0, r3
 801609c:	f7f4 fa34 	bl	800a508 <_Z10StringFromb>
 80160a0:	f107 0310 	add.w	r3, r7, #16
 80160a4:	4619      	mov	r1, r3
 80160a6:	4620      	mov	r0, r4
 80160a8:	f7f4 f83a 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80160ac:	f107 0310 	add.w	r3, r7, #16
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7f3 ffb8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 80160b6:	68fb      	ldr	r3, [r7, #12]
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	371c      	adds	r7, #28
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd90      	pop	{r4, r7, pc}

080160c0 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80160c0:	b590      	push	{r4, r7, lr}
 80160c2:	b08f      	sub	sp, #60	; 0x3c
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80160cc:	68b9      	ldr	r1, [r7, #8]
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f7ff ffb2 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	1d1c      	adds	r4, r3, #4
 80160d8:	f107 0320 	add.w	r3, r7, #32
 80160dc:	6879      	ldr	r1, [r7, #4]
 80160de:	4618      	mov	r0, r3
 80160e0:	f7f4 fcd0 	bl	800aa84 <_Z10StringFromj>
 80160e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160e8:	491f      	ldr	r1, [pc, #124]	; (8016168 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7f3 fbe3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80160f0:	f107 0318 	add.w	r3, r7, #24
 80160f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80160f8:	f107 0120 	add.w	r1, r7, #32
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f3 fff4 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8016102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016106:	6879      	ldr	r1, [r7, #4]
 8016108:	4618      	mov	r0, r3
 801610a:	f7f4 fb5f 	bl	800a7cc <_Z30BracketsFormattedHexStringFromj>
 801610e:	f107 0310 	add.w	r3, r7, #16
 8016112:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016116:	f107 0118 	add.w	r1, r7, #24
 801611a:	4618      	mov	r0, r3
 801611c:	f7f3 ffe5 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8016120:	f107 0310 	add.w	r3, r7, #16
 8016124:	4619      	mov	r1, r3
 8016126:	4620      	mov	r0, r4
 8016128:	f7f3 fffa 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801612c:	f107 0310 	add.w	r3, r7, #16
 8016130:	4618      	mov	r0, r3
 8016132:	f7f3 ff78 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016136:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801613a:	4618      	mov	r0, r3
 801613c:	f7f3 ff73 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016140:	f107 0318 	add.w	r3, r7, #24
 8016144:	4618      	mov	r0, r3
 8016146:	f7f3 ff6e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801614a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801614e:	4618      	mov	r0, r3
 8016150:	f7f3 ff69 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016154:	f107 0320 	add.w	r3, r7, #32
 8016158:	4618      	mov	r0, r3
 801615a:	f7f3 ff64 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 801615e:	68fb      	ldr	r3, [r7, #12]
}
 8016160:	4618      	mov	r0, r3
 8016162:	373c      	adds	r7, #60	; 0x3c
 8016164:	46bd      	mov	sp, r7
 8016166:	bd90      	pop	{r4, r7, pc}
 8016168:	08022560 	.word	0x08022560

0801616c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 801616c:	b590      	push	{r4, r7, lr}
 801616e:	b08f      	sub	sp, #60	; 0x3c
 8016170:	af00      	add	r7, sp, #0
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016178:	68b9      	ldr	r1, [r7, #8]
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	f7ff ff5c 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	1d1c      	adds	r4, r3, #4
 8016184:	f107 0320 	add.w	r3, r7, #32
 8016188:	6879      	ldr	r1, [r7, #4]
 801618a:	4618      	mov	r0, r3
 801618c:	f7f4 fa12 	bl	800a5b4 <_Z10StringFromi>
 8016190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016194:	491f      	ldr	r1, [pc, #124]	; (8016214 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8016196:	4618      	mov	r0, r3
 8016198:	f7f3 fb8d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801619c:	f107 0318 	add.w	r3, r7, #24
 80161a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80161a4:	f107 0120 	add.w	r1, r7, #32
 80161a8:	4618      	mov	r0, r3
 80161aa:	f7f3 ff9e 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 80161ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161b2:	6879      	ldr	r1, [r7, #4]
 80161b4:	4618      	mov	r0, r3
 80161b6:	f7f4 faed 	bl	800a794 <_Z30BracketsFormattedHexStringFromi>
 80161ba:	f107 0310 	add.w	r3, r7, #16
 80161be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80161c2:	f107 0118 	add.w	r1, r7, #24
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7f3 ff8f 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 80161cc:	f107 0310 	add.w	r3, r7, #16
 80161d0:	4619      	mov	r1, r3
 80161d2:	4620      	mov	r0, r4
 80161d4:	f7f3 ffa4 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80161d8:	f107 0310 	add.w	r3, r7, #16
 80161dc:	4618      	mov	r0, r3
 80161de:	f7f3 ff22 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80161e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7f3 ff1d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80161ec:	f107 0318 	add.w	r3, r7, #24
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f3 ff18 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80161f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7f3 ff13 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016200:	f107 0320 	add.w	r3, r7, #32
 8016204:	4618      	mov	r0, r3
 8016206:	f7f3 ff0e 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 801620a:	68fb      	ldr	r3, [r7, #12]
}
 801620c:	4618      	mov	r0, r3
 801620e:	373c      	adds	r7, #60	; 0x3c
 8016210:	46bd      	mov	sp, r7
 8016212:	bd90      	pop	{r4, r7, pc}
 8016214:	08022560 	.word	0x08022560

08016218 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016218:	b590      	push	{r4, r7, lr}
 801621a:	b08f      	sub	sp, #60	; 0x3c
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016224:	68b9      	ldr	r1, [r7, #8]
 8016226:	68f8      	ldr	r0, [r7, #12]
 8016228:	f7ff ff06 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	1d1c      	adds	r4, r3, #4
 8016230:	f107 0320 	add.w	r3, r7, #32
 8016234:	6879      	ldr	r1, [r7, #4]
 8016236:	4618      	mov	r0, r3
 8016238:	f7f4 fc36 	bl	800aaa8 <_Z10StringFromm>
 801623c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016240:	491f      	ldr	r1, [pc, #124]	; (80162c0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8016242:	4618      	mov	r0, r3
 8016244:	f7f3 fb37 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8016248:	f107 0318 	add.w	r3, r7, #24
 801624c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016250:	f107 0120 	add.w	r1, r7, #32
 8016254:	4618      	mov	r0, r3
 8016256:	f7f3 ff48 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801625a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801625e:	6879      	ldr	r1, [r7, #4]
 8016260:	4618      	mov	r0, r3
 8016262:	f7f4 faeb 	bl	800a83c <_Z30BracketsFormattedHexStringFromm>
 8016266:	f107 0310 	add.w	r3, r7, #16
 801626a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801626e:	f107 0118 	add.w	r1, r7, #24
 8016272:	4618      	mov	r0, r3
 8016274:	f7f3 ff39 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8016278:	f107 0310 	add.w	r3, r7, #16
 801627c:	4619      	mov	r1, r3
 801627e:	4620      	mov	r0, r4
 8016280:	f7f3 ff4e 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8016284:	f107 0310 	add.w	r3, r7, #16
 8016288:	4618      	mov	r0, r3
 801628a:	f7f3 fecc 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801628e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016292:	4618      	mov	r0, r3
 8016294:	f7f3 fec7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016298:	f107 0318 	add.w	r3, r7, #24
 801629c:	4618      	mov	r0, r3
 801629e:	f7f3 fec2 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80162a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7f3 febd 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80162ac:	f107 0320 	add.w	r3, r7, #32
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7f3 feb8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 80162b6:	68fb      	ldr	r3, [r7, #12]
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	373c      	adds	r7, #60	; 0x3c
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd90      	pop	{r4, r7, pc}
 80162c0:	08022560 	.word	0x08022560

080162c4 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 80162c4:	b590      	push	{r4, r7, lr}
 80162c6:	b08f      	sub	sp, #60	; 0x3c
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80162d0:	68b9      	ldr	r1, [r7, #8]
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	f7ff feb0 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	1d1c      	adds	r4, r3, #4
 80162dc:	f107 0320 	add.w	r3, r7, #32
 80162e0:	6879      	ldr	r1, [r7, #4]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7f4 f978 	bl	800a5d8 <_Z10StringFroml>
 80162e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80162ec:	491f      	ldr	r1, [pc, #124]	; (801636c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7f3 fae1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80162f4:	f107 0318 	add.w	r3, r7, #24
 80162f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80162fc:	f107 0120 	add.w	r1, r7, #32
 8016300:	4618      	mov	r0, r3
 8016302:	f7f3 fef2 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8016306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801630a:	6879      	ldr	r1, [r7, #4]
 801630c:	4618      	mov	r0, r3
 801630e:	f7f4 fa79 	bl	800a804 <_Z30BracketsFormattedHexStringFroml>
 8016312:	f107 0310 	add.w	r3, r7, #16
 8016316:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801631a:	f107 0118 	add.w	r1, r7, #24
 801631e:	4618      	mov	r0, r3
 8016320:	f7f3 fee3 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 8016324:	f107 0310 	add.w	r3, r7, #16
 8016328:	4619      	mov	r1, r3
 801632a:	4620      	mov	r0, r4
 801632c:	f7f3 fef8 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8016330:	f107 0310 	add.w	r3, r7, #16
 8016334:	4618      	mov	r0, r3
 8016336:	f7f3 fe76 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801633a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801633e:	4618      	mov	r0, r3
 8016340:	f7f3 fe71 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016344:	f107 0318 	add.w	r3, r7, #24
 8016348:	4618      	mov	r0, r3
 801634a:	f7f3 fe6c 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801634e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016352:	4618      	mov	r0, r3
 8016354:	f7f3 fe67 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8016358:	f107 0320 	add.w	r3, r7, #32
 801635c:	4618      	mov	r0, r3
 801635e:	f7f3 fe62 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016362:	68fb      	ldr	r3, [r7, #12]
}
 8016364:	4618      	mov	r0, r3
 8016366:	373c      	adds	r7, #60	; 0x3c
 8016368:	46bd      	mov	sp, r7
 801636a:	bd90      	pop	{r4, r7, pc}
 801636c:	08022560 	.word	0x08022560

08016370 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016370:	b5b0      	push	{r4, r5, r7, lr}
 8016372:	b086      	sub	sp, #24
 8016374:	af02      	add	r7, sp, #8
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	60b9      	str	r1, [r7, #8]
 801637a:	4639      	mov	r1, r7
 801637c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016380:	f7fa fe7c 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8016384:	4604      	mov	r4, r0
 8016386:	6823      	ldr	r3, [r4, #0]
 8016388:	3368      	adds	r3, #104	; 0x68
 801638a:	681d      	ldr	r5, [r3, #0]
 801638c:	f7fa fe86 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016390:	4603      	mov	r3, r0
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	f240 23ee 	movw	r3, #750	; 0x2ee
 8016398:	4a04      	ldr	r2, [pc, #16]	; (80163ac <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801639a:	4905      	ldr	r1, [pc, #20]	; (80163b0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801639c:	4620      	mov	r0, r4
 801639e:	47a8      	blx	r5
    return *this;
 80163a0:	68fb      	ldr	r3, [r7, #12]
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3710      	adds	r7, #16
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bdb0      	pop	{r4, r5, r7, pc}
 80163aa:	bf00      	nop
 80163ac:	0802244c 	.word	0x0802244c
 80163b0:	08022468 	.word	0x08022468

080163b4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80163b4:	b5b0      	push	{r4, r5, r7, lr}
 80163b6:	b086      	sub	sp, #24
 80163b8:	af02      	add	r7, sp, #8
 80163ba:	60f8      	str	r0, [r7, #12]
 80163bc:	60b9      	str	r1, [r7, #8]
 80163be:	4639      	mov	r1, r7
 80163c0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80163c4:	f7fa fe5a 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80163c8:	4604      	mov	r4, r0
 80163ca:	6823      	ldr	r3, [r4, #0]
 80163cc:	3368      	adds	r3, #104	; 0x68
 80163ce:	681d      	ldr	r5, [r3, #0]
 80163d0:	f7fa fe64 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80163d4:	4603      	mov	r3, r0
 80163d6:	9300      	str	r3, [sp, #0]
 80163d8:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 80163dc:	4a04      	ldr	r2, [pc, #16]	; (80163f0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80163de:	4905      	ldr	r1, [pc, #20]	; (80163f4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80163e0:	4620      	mov	r0, r4
 80163e2:	47a8      	blx	r5
    return *this;
 80163e4:	68fb      	ldr	r3, [r7, #12]
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	3710      	adds	r7, #16
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bdb0      	pop	{r4, r5, r7, pc}
 80163ee:	bf00      	nop
 80163f0:	0802244c 	.word	0x0802244c
 80163f4:	08022494 	.word	0x08022494

080163f8 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 80163f8:	b590      	push	{r4, r7, lr}
 80163fa:	b087      	sub	sp, #28
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	60f8      	str	r0, [r7, #12]
 8016400:	60b9      	str	r1, [r7, #8]
 8016402:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8016406:	68b9      	ldr	r1, [r7, #8]
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f7ff fe15 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	1d1c      	adds	r4, r3, #4
 8016412:	f107 0310 	add.w	r3, r7, #16
 8016416:	2106      	movs	r1, #6
 8016418:	ed97 0b00 	vldr	d0, [r7]
 801641c:	4618      	mov	r0, r3
 801641e:	f7f4 fac7 	bl	800a9b0 <_Z10StringFromdi>
 8016422:	f107 0310 	add.w	r3, r7, #16
 8016426:	4619      	mov	r1, r3
 8016428:	4620      	mov	r0, r4
 801642a:	f7f3 fe79 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801642e:	f107 0310 	add.w	r3, r7, #16
 8016432:	4618      	mov	r0, r3
 8016434:	f7f3 fdf7 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016438:	68fb      	ldr	r3, [r7, #12]
}
 801643a:	4618      	mov	r0, r3
 801643c:	371c      	adds	r7, #28
 801643e:	46bd      	mov	sp, r7
 8016440:	bd90      	pop	{r4, r7, pc}

08016442 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8016442:	b590      	push	{r4, r7, lr}
 8016444:	b087      	sub	sp, #28
 8016446:	af00      	add	r7, sp, #0
 8016448:	60f8      	str	r0, [r7, #12]
 801644a:	60b9      	str	r1, [r7, #8]
 801644c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801644e:	68b9      	ldr	r1, [r7, #8]
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	f7ff fdf1 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	1d1c      	adds	r4, r3, #4
 801645a:	f107 0310 	add.w	r3, r7, #16
 801645e:	6879      	ldr	r1, [r7, #4]
 8016460:	4618      	mov	r0, r3
 8016462:	f7f4 f86d 	bl	800a540 <_Z10StringFromPKc>
 8016466:	f107 0310 	add.w	r3, r7, #16
 801646a:	4619      	mov	r1, r3
 801646c:	4620      	mov	r0, r4
 801646e:	f7f3 fe57 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8016472:	f107 0310 	add.w	r3, r7, #16
 8016476:	4618      	mov	r0, r3
 8016478:	f7f3 fdd5 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 801647c:	68fb      	ldr	r3, [r7, #12]
}
 801647e:	4618      	mov	r0, r3
 8016480:	371c      	adds	r7, #28
 8016482:	46bd      	mov	sp, r7
 8016484:	bd90      	pop	{r4, r7, pc}

08016486 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8016486:	b590      	push	{r4, r7, lr}
 8016488:	b087      	sub	sp, #28
 801648a:	af00      	add	r7, sp, #0
 801648c:	60f8      	str	r0, [r7, #12]
 801648e:	60b9      	str	r1, [r7, #8]
 8016490:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016492:	68b9      	ldr	r1, [r7, #8]
 8016494:	68f8      	ldr	r0, [r7, #12]
 8016496:	f7ff fdcf 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	1d1c      	adds	r4, r3, #4
 801649e:	f107 0310 	add.w	r3, r7, #16
 80164a2:	6879      	ldr	r1, [r7, #4]
 80164a4:	4618      	mov	r0, r3
 80164a6:	f7f4 f8a9 	bl	800a5fc <_Z10StringFromPKv>
 80164aa:	f107 0310 	add.w	r3, r7, #16
 80164ae:	4619      	mov	r1, r3
 80164b0:	4620      	mov	r0, r4
 80164b2:	f7f3 fe35 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80164b6:	f107 0310 	add.w	r3, r7, #16
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7f3 fdb3 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 80164c0:	68fb      	ldr	r3, [r7, #12]
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	371c      	adds	r7, #28
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd90      	pop	{r4, r7, pc}

080164ca <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80164ca:	b590      	push	{r4, r7, lr}
 80164cc:	b087      	sub	sp, #28
 80164ce:	af00      	add	r7, sp, #0
 80164d0:	60f8      	str	r0, [r7, #12]
 80164d2:	60b9      	str	r1, [r7, #8]
 80164d4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80164d6:	68b9      	ldr	r1, [r7, #8]
 80164d8:	68f8      	ldr	r0, [r7, #12]
 80164da:	f7ff fdad 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	1d1c      	adds	r4, r3, #4
 80164e2:	f107 0310 	add.w	r3, r7, #16
 80164e6:	6879      	ldr	r1, [r7, #4]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f4 f887 	bl	800a5fc <_Z10StringFromPKv>
 80164ee:	f107 0310 	add.w	r3, r7, #16
 80164f2:	4619      	mov	r1, r3
 80164f4:	4620      	mov	r0, r4
 80164f6:	f7f3 fe13 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80164fa:	f107 0310 	add.w	r3, r7, #16
 80164fe:	4618      	mov	r0, r3
 8016500:	f7f3 fd91 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016504:	68fb      	ldr	r3, [r7, #12]
}
 8016506:	4618      	mov	r0, r3
 8016508:	371c      	adds	r7, #28
 801650a:	46bd      	mov	sp, r7
 801650c:	bd90      	pop	{r4, r7, pc}

0801650e <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801650e:	b590      	push	{r4, r7, lr}
 8016510:	b087      	sub	sp, #28
 8016512:	af00      	add	r7, sp, #0
 8016514:	60f8      	str	r0, [r7, #12]
 8016516:	60b9      	str	r1, [r7, #8]
 8016518:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801651a:	68b9      	ldr	r1, [r7, #8]
 801651c:	68f8      	ldr	r0, [r7, #12]
 801651e:	f7ff fd8b 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	1d1c      	adds	r4, r3, #4
 8016526:	f107 0310 	add.w	r3, r7, #16
 801652a:	6879      	ldr	r1, [r7, #4]
 801652c:	4618      	mov	r0, r3
 801652e:	f7f4 f88f 	bl	800a650 <_Z10StringFromPFvvE>
 8016532:	f107 0310 	add.w	r3, r7, #16
 8016536:	4619      	mov	r1, r3
 8016538:	4620      	mov	r0, r4
 801653a:	f7f3 fdf1 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801653e:	f107 0310 	add.w	r3, r7, #16
 8016542:	4618      	mov	r0, r3
 8016544:	f7f3 fd6f 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016548:	68fb      	ldr	r3, [r7, #12]
}
 801654a:	4618      	mov	r0, r3
 801654c:	371c      	adds	r7, #28
 801654e:	46bd      	mov	sp, r7
 8016550:	bd90      	pop	{r4, r7, pc}

08016552 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8016552:	b590      	push	{r4, r7, lr}
 8016554:	b087      	sub	sp, #28
 8016556:	af00      	add	r7, sp, #0
 8016558:	60f8      	str	r0, [r7, #12]
 801655a:	60b9      	str	r1, [r7, #8]
 801655c:	607a      	str	r2, [r7, #4]
 801655e:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8016560:	68b9      	ldr	r1, [r7, #8]
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f7ff fd68 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	1d1c      	adds	r4, r3, #4
 801656c:	f107 0310 	add.w	r3, r7, #16
 8016570:	683a      	ldr	r2, [r7, #0]
 8016572:	6879      	ldr	r1, [r7, #4]
 8016574:	4618      	mov	r0, r3
 8016576:	f7f4 fbaf 	bl	800acd8 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801657a:	f107 0310 	add.w	r3, r7, #16
 801657e:	4619      	mov	r1, r3
 8016580:	4620      	mov	r0, r4
 8016582:	f7f3 fdcd 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8016586:	f107 0310 	add.w	r3, r7, #16
 801658a:	4618      	mov	r0, r3
 801658c:	f7f3 fd4b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016590:	68fb      	ldr	r3, [r7, #12]
}
 8016592:	4618      	mov	r0, r3
 8016594:	371c      	adds	r7, #28
 8016596:	46bd      	mov	sp, r7
 8016598:	bd90      	pop	{r4, r7, pc}
	...

0801659c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801659c:	b590      	push	{r4, r7, lr}
 801659e:	b087      	sub	sp, #28
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
 80165a8:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	3304      	adds	r3, #4
 80165ae:	4913      	ldr	r1, [pc, #76]	; (80165fc <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7f3 fdc7 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	3304      	adds	r3, #4
 80165ba:	68b9      	ldr	r1, [r7, #8]
 80165bc:	4618      	mov	r0, r3
 80165be:	f7f3 fdaf 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80165c2:	6879      	ldr	r1, [r7, #4]
 80165c4:	68f8      	ldr	r0, [r7, #12]
 80165c6:	f7ff fd37 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	1d1c      	adds	r4, r3, #4
 80165ce:	f107 0310 	add.w	r3, r7, #16
 80165d2:	6839      	ldr	r1, [r7, #0]
 80165d4:	4618      	mov	r0, r3
 80165d6:	f7f4 f811 	bl	800a5fc <_Z10StringFromPKv>
 80165da:	f107 0310 	add.w	r3, r7, #16
 80165de:	4619      	mov	r1, r3
 80165e0:	4620      	mov	r0, r4
 80165e2:	f7f3 fd9d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80165e6:	f107 0310 	add.w	r3, r7, #16
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7f3 fd1b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 80165f0:	68fb      	ldr	r3, [r7, #12]
}
 80165f2:	4618      	mov	r0, r3
 80165f4:	371c      	adds	r7, #28
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd90      	pop	{r4, r7, pc}
 80165fa:	bf00      	nop
 80165fc:	08022560 	.word	0x08022560

08016600 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8016600:	b590      	push	{r4, r7, lr}
 8016602:	b087      	sub	sp, #28
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801660c:	68b9      	ldr	r1, [r7, #8]
 801660e:	68f8      	ldr	r0, [r7, #12]
 8016610:	f7ff fd12 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	1d1c      	adds	r4, r3, #4
 8016618:	f107 0310 	add.w	r3, r7, #16
 801661c:	6879      	ldr	r1, [r7, #4]
 801661e:	4618      	mov	r0, r3
 8016620:	f7f3 ffec 	bl	800a5fc <_Z10StringFromPKv>
 8016624:	f107 0310 	add.w	r3, r7, #16
 8016628:	4619      	mov	r1, r3
 801662a:	4620      	mov	r0, r4
 801662c:	f7f3 fd78 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8016630:	f107 0310 	add.w	r3, r7, #16
 8016634:	4618      	mov	r0, r3
 8016636:	f7f3 fcf6 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 801663a:	68fb      	ldr	r3, [r7, #12]
}
 801663c:	4618      	mov	r0, r3
 801663e:	371c      	adds	r7, #28
 8016640:	46bd      	mov	sp, r7
 8016642:	bd90      	pop	{r4, r7, pc}

08016644 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8016644:	b590      	push	{r4, r7, lr}
 8016646:	b087      	sub	sp, #28
 8016648:	af00      	add	r7, sp, #0
 801664a:	60f8      	str	r0, [r7, #12]
 801664c:	60b9      	str	r1, [r7, #8]
 801664e:	607a      	str	r2, [r7, #4]
 8016650:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	3304      	adds	r3, #4
 8016656:	4913      	ldr	r1, [pc, #76]	; (80166a4 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8016658:	4618      	mov	r0, r3
 801665a:	f7f3 fd73 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	3304      	adds	r3, #4
 8016662:	68b9      	ldr	r1, [r7, #8]
 8016664:	4618      	mov	r0, r3
 8016666:	f7f3 fd5b 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801666a:	6879      	ldr	r1, [r7, #4]
 801666c:	68f8      	ldr	r0, [r7, #12]
 801666e:	f7ff fce3 	bl	8016038 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	1d1c      	adds	r4, r3, #4
 8016676:	f107 0310 	add.w	r3, r7, #16
 801667a:	6839      	ldr	r1, [r7, #0]
 801667c:	4618      	mov	r0, r3
 801667e:	f7f3 ffbd 	bl	800a5fc <_Z10StringFromPKv>
 8016682:	f107 0310 	add.w	r3, r7, #16
 8016686:	4619      	mov	r1, r3
 8016688:	4620      	mov	r0, r4
 801668a:	f7f3 fd49 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801668e:	f107 0310 	add.w	r3, r7, #16
 8016692:	4618      	mov	r0, r3
 8016694:	f7f3 fcc7 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016698:	68fb      	ldr	r3, [r7, #12]
}
 801669a:	4618      	mov	r0, r3
 801669c:	371c      	adds	r7, #28
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd90      	pop	{r4, r7, pc}
 80166a2:	bf00      	nop
 80166a4:	08022560 	.word	0x08022560

080166a8 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 80166a8:	b480      	push	{r7}
 80166aa:	b083      	sub	sp, #12
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
    return false;
 80166b0:	2300      	movs	r3, #0
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr
	...

080166c0 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b084      	sub	sp, #16
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 80166ca:	f107 0308 	add.w	r3, r7, #8
 80166ce:	4909      	ldr	r1, [pc, #36]	; (80166f4 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7f3 f8f0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80166d6:	f107 0308 	add.w	r3, r7, #8
 80166da:	4619      	mov	r1, r3
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f003 fe0f 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 80166e2:	f107 0308 	add.w	r3, r7, #8
 80166e6:	4618      	mov	r0, r3
 80166e8:	f7f3 fc9d 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	3710      	adds	r7, #16
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	08022434 	.word	0x08022434

080166f8 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 80166f8:	b480      	push	{r7}
 80166fa:	b083      	sub	sp, #12
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
    return 0;
 8016700:	2300      	movs	r3, #0
}
 8016702:	4618      	mov	r0, r3
 8016704:	370c      	adds	r7, #12
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr

0801670e <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801670e:	b480      	push	{r7}
 8016710:	b083      	sub	sp, #12
 8016712:	af00      	add	r7, sp, #0
 8016714:	6078      	str	r0, [r7, #4]
    return 0;
 8016716:	2300      	movs	r3, #0
}
 8016718:	4618      	mov	r0, r3
 801671a:	370c      	adds	r7, #12
 801671c:	46bd      	mov	sp, r7
 801671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016722:	4770      	bx	lr

08016724 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8016724:	b480      	push	{r7}
 8016726:	b083      	sub	sp, #12
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	6039      	str	r1, [r7, #0]
    return 0;
 801672e:	2300      	movs	r3, #0
}
 8016730:	4618      	mov	r0, r3
 8016732:	370c      	adds	r7, #12
 8016734:	46bd      	mov	sp, r7
 8016736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673a:	4770      	bx	lr

0801673c <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801673c:	b480      	push	{r7}
 801673e:	b083      	sub	sp, #12
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	6039      	str	r1, [r7, #0]
    return 0;
 8016746:	2300      	movs	r3, #0
}
 8016748:	4618      	mov	r0, r3
 801674a:	370c      	adds	r7, #12
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr

08016754 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8016754:	b5b0      	push	{r4, r5, r7, lr}
 8016756:	b084      	sub	sp, #16
 8016758:	af02      	add	r7, sp, #8
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801675e:	f7fa fc8d 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8016762:	4604      	mov	r4, r0
 8016764:	6823      	ldr	r3, [r4, #0]
 8016766:	3368      	adds	r3, #104	; 0x68
 8016768:	681d      	ldr	r5, [r3, #0]
 801676a:	f7fa fc97 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801676e:	4603      	mov	r3, r0
 8016770:	9300      	str	r3, [sp, #0]
 8016772:	f240 3375 	movw	r3, #885	; 0x375
 8016776:	4a06      	ldr	r2, [pc, #24]	; (8016790 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8016778:	4906      	ldr	r1, [pc, #24]	; (8016794 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801677a:	4620      	mov	r0, r4
 801677c:	47a8      	blx	r5
    return cpputest_longlong(0);
 801677e:	2100      	movs	r1, #0
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7f1 f8cf 	bl	8007924 <_ZN17cpputest_longlongC1Ei>
}
 8016786:	6878      	ldr	r0, [r7, #4]
 8016788:	3708      	adds	r7, #8
 801678a:	46bd      	mov	sp, r7
 801678c:	bdb0      	pop	{r4, r5, r7, pc}
 801678e:	bf00      	nop
 8016790:	0802244c 	.word	0x0802244c
 8016794:	08022494 	.word	0x08022494

08016798 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8016798:	b5b0      	push	{r4, r5, r7, lr}
 801679a:	b084      	sub	sp, #16
 801679c:	af02      	add	r7, sp, #8
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80167a2:	f7fa fc6b 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80167a6:	4604      	mov	r4, r0
 80167a8:	6823      	ldr	r3, [r4, #0]
 80167aa:	3368      	adds	r3, #104	; 0x68
 80167ac:	681d      	ldr	r5, [r3, #0]
 80167ae:	f7fa fc75 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80167b2:	4603      	mov	r3, r0
 80167b4:	9300      	str	r3, [sp, #0]
 80167b6:	f240 337b 	movw	r3, #891	; 0x37b
 80167ba:	4a06      	ldr	r2, [pc, #24]	; (80167d4 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 80167bc:	4906      	ldr	r1, [pc, #24]	; (80167d8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 80167be:	4620      	mov	r0, r4
 80167c0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80167c2:	2100      	movs	r1, #0
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7f1 f8b9 	bl	800793c <_ZN18cpputest_ulonglongC1Ei>
}
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bdb0      	pop	{r4, r5, r7, pc}
 80167d2:	bf00      	nop
 80167d4:	0802244c 	.word	0x0802244c
 80167d8:	08022468 	.word	0x08022468

080167dc <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80167dc:	b5b0      	push	{r4, r5, r7, lr}
 80167de:	b086      	sub	sp, #24
 80167e0:	af02      	add	r7, sp, #8
 80167e2:	60f8      	str	r0, [r7, #12]
 80167e4:	60b9      	str	r1, [r7, #8]
 80167e6:	4639      	mov	r1, r7
 80167e8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80167ec:	f7fa fc46 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80167f0:	4604      	mov	r4, r0
 80167f2:	6823      	ldr	r3, [r4, #0]
 80167f4:	3368      	adds	r3, #104	; 0x68
 80167f6:	681d      	ldr	r5, [r3, #0]
 80167f8:	f7fa fc50 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80167fc:	4603      	mov	r3, r0
 80167fe:	9300      	str	r3, [sp, #0]
 8016800:	f240 3381 	movw	r3, #897	; 0x381
 8016804:	4a05      	ldr	r2, [pc, #20]	; (801681c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8016806:	4906      	ldr	r1, [pc, #24]	; (8016820 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016808:	4620      	mov	r0, r4
 801680a:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801680c:	2100      	movs	r1, #0
 801680e:	68f8      	ldr	r0, [r7, #12]
 8016810:	f7f1 f894 	bl	800793c <_ZN18cpputest_ulonglongC1Ei>
}
 8016814:	68f8      	ldr	r0, [r7, #12]
 8016816:	3710      	adds	r7, #16
 8016818:	46bd      	mov	sp, r7
 801681a:	bdb0      	pop	{r4, r5, r7, pc}
 801681c:	0802244c 	.word	0x0802244c
 8016820:	08022468 	.word	0x08022468

08016824 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8016824:	b5b0      	push	{r4, r5, r7, lr}
 8016826:	b086      	sub	sp, #24
 8016828:	af02      	add	r7, sp, #8
 801682a:	60f8      	str	r0, [r7, #12]
 801682c:	60b9      	str	r1, [r7, #8]
 801682e:	4639      	mov	r1, r7
 8016830:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016834:	f7fa fc22 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 8016838:	4604      	mov	r4, r0
 801683a:	6823      	ldr	r3, [r4, #0]
 801683c:	3368      	adds	r3, #104	; 0x68
 801683e:	681d      	ldr	r5, [r3, #0]
 8016840:	f7fa fc2c 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016844:	4603      	mov	r3, r0
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	f240 3387 	movw	r3, #903	; 0x387
 801684c:	4a05      	ldr	r2, [pc, #20]	; (8016864 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801684e:	4906      	ldr	r1, [pc, #24]	; (8016868 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016850:	4620      	mov	r0, r4
 8016852:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016854:	2100      	movs	r1, #0
 8016856:	68f8      	ldr	r0, [r7, #12]
 8016858:	f7f1 f864 	bl	8007924 <_ZN17cpputest_longlongC1Ei>
}
 801685c:	68f8      	ldr	r0, [r7, #12]
 801685e:	3710      	adds	r7, #16
 8016860:	46bd      	mov	sp, r7
 8016862:	bdb0      	pop	{r4, r5, r7, pc}
 8016864:	0802244c 	.word	0x0802244c
 8016868:	08022494 	.word	0x08022494

0801686c <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801686c:	b480      	push	{r7}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
    return false;
 8016874:	2300      	movs	r3, #0
}
 8016876:	4618      	mov	r0, r3
 8016878:	370c      	adds	r7, #12
 801687a:	46bd      	mov	sp, r7
 801687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016880:	4770      	bx	lr

08016882 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8016882:	b480      	push	{r7}
 8016884:	b083      	sub	sp, #12
 8016886:	af00      	add	r7, sp, #0
 8016888:	6078      	str	r0, [r7, #4]
 801688a:	460b      	mov	r3, r1
 801688c:	70fb      	strb	r3, [r7, #3]
    return false;
 801688e:	2300      	movs	r3, #0
}
 8016890:	4618      	mov	r0, r3
 8016892:	370c      	adds	r7, #12
 8016894:	46bd      	mov	sp, r7
 8016896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689a:	4770      	bx	lr

0801689c <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801689c:	b480      	push	{r7}
 801689e:	b083      	sub	sp, #12
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
    return 0;
 80168a4:	2300      	movs	r3, #0
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	370c      	adds	r7, #12
 80168aa:	46bd      	mov	sp, r7
 80168ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b0:	4770      	bx	lr

080168b2 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 80168b2:	b480      	push	{r7}
 80168b4:	b083      	sub	sp, #12
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	6078      	str	r0, [r7, #4]
    return 0.0;
 80168ba:	f04f 0200 	mov.w	r2, #0
 80168be:	f04f 0300 	mov.w	r3, #0
 80168c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80168c6:	eeb0 0a47 	vmov.f32	s0, s14
 80168ca:	eef0 0a67 	vmov.f32	s1, s15
 80168ce:	370c      	adds	r7, #12
 80168d0:	46bd      	mov	sp, r7
 80168d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d6:	4770      	bx	lr

080168d8 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	3398      	adds	r3, #152	; 0x98
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	68f8      	ldr	r0, [r7, #12]
 80168ee:	4798      	blx	r3
 80168f0:	eeb0 7a40 	vmov.f32	s14, s0
 80168f4:	eef0 7a60 	vmov.f32	s15, s1
}
 80168f8:	eeb0 0a47 	vmov.f32	s0, s14
 80168fc:	eef0 0a67 	vmov.f32	s1, s15
 8016900:	3710      	adds	r7, #16
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}

08016906 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8016906:	b480      	push	{r7}
 8016908:	b083      	sub	sp, #12
 801690a:	af00      	add	r7, sp, #0
 801690c:	6078      	str	r0, [r7, #4]
    return 0;
 801690e:	2300      	movs	r3, #0
}
 8016910:	4618      	mov	r0, r3
 8016912:	370c      	adds	r7, #12
 8016914:	46bd      	mov	sp, r7
 8016916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691a:	4770      	bx	lr

0801691c <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801691c:	b480      	push	{r7}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016924:	2300      	movs	r3, #0
}
 8016926:	4618      	mov	r0, r3
 8016928:	370c      	adds	r7, #12
 801692a:	46bd      	mov	sp, r7
 801692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016930:	4770      	bx	lr

08016932 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8016932:	b480      	push	{r7}
 8016934:	b083      	sub	sp, #12
 8016936:	af00      	add	r7, sp, #0
 8016938:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801693a:	2300      	movs	r3, #0
}
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8016950:	2300      	movs	r3, #0
}
 8016952:	4618      	mov	r0, r3
 8016954:	370c      	adds	r7, #12
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr

0801695e <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801695e:	b580      	push	{r7, lr}
 8016960:	b082      	sub	sp, #8
 8016962:	af00      	add	r7, sp, #0
 8016964:	6078      	str	r0, [r7, #4]
 8016966:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	33a8      	adds	r3, #168	; 0xa8
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	4798      	blx	r3
 8016974:	4603      	mov	r3, r0
}
 8016976:	4618      	mov	r0, r3
 8016978:	3708      	adds	r7, #8
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}

0801697e <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801697e:	b580      	push	{r7, lr}
 8016980:	b082      	sub	sp, #8
 8016982:	af00      	add	r7, sp, #0
 8016984:	6078      	str	r0, [r7, #4]
 8016986:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	33a0      	adds	r3, #160	; 0xa0
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	4798      	blx	r3
 8016994:	4603      	mov	r3, r0
}
 8016996:	4618      	mov	r0, r3
 8016998:	3708      	adds	r7, #8
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}

0801699e <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801699e:	b580      	push	{r7, lr}
 80169a0:	b082      	sub	sp, #8
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6078      	str	r0, [r7, #4]
 80169a6:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	33b0      	adds	r3, #176	; 0xb0
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	4798      	blx	r3
 80169b4:	4603      	mov	r3, r0
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3708      	adds	r7, #8
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}
	...

080169c0 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 80169c0:	b480      	push	{r7}
 80169c2:	b083      	sub	sp, #12
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
    return "";
 80169c8:	4b03      	ldr	r3, [pc, #12]	; (80169d8 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	370c      	adds	r7, #12
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr
 80169d6:	bf00      	nop
 80169d8:	08022434 	.word	0x08022434

080169dc <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b082      	sub	sp, #8
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	3394      	adds	r3, #148	; 0x94
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	4798      	blx	r3
 80169f2:	4603      	mov	r3, r0
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3708      	adds	r7, #8
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}

080169fc <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 80169fc:	b480      	push	{r7}
 80169fe:	b083      	sub	sp, #12
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
 8016a04:	6039      	str	r1, [r7, #0]
    return 0;
 8016a06:	2300      	movs	r3, #0
}
 8016a08:	4618      	mov	r0, r3
 8016a0a:	370c      	adds	r7, #12
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr

08016a14 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	3388      	adds	r3, #136	; 0x88
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	4798      	blx	r3
 8016a2a:	4603      	mov	r3, r0
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3708      	adds	r7, #8
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}

08016a34 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8016a34:	b590      	push	{r4, r7, lr}
 8016a36:	b085      	sub	sp, #20
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
 8016a3c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	3304      	adds	r3, #4
 8016a42:	490e      	ldr	r1, [pc, #56]	; (8016a7c <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f3 fb7d 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	1d1c      	adds	r4, r3, #4
 8016a4e:	f107 0308 	add.w	r3, r7, #8
 8016a52:	6839      	ldr	r1, [r7, #0]
 8016a54:	4618      	mov	r0, r3
 8016a56:	f7f3 fdd1 	bl	800a5fc <_Z10StringFromPKv>
 8016a5a:	f107 0308 	add.w	r3, r7, #8
 8016a5e:	4619      	mov	r1, r3
 8016a60:	4620      	mov	r0, r4
 8016a62:	f7f3 fb5d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8016a66:	f107 0308 	add.w	r3, r7, #8
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7f3 fadb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return *this;
 8016a70:	687b      	ldr	r3, [r7, #4]
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3714      	adds	r7, #20
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd90      	pop	{r4, r7, pc}
 8016a7a:	bf00      	nop
 8016a7c:	08022568 	.word	0x08022568

08016a80 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8016a80:	b598      	push	{r3, r4, r7, lr}
 8016a82:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8016a84:	4b09      	ldr	r3, [pc, #36]	; (8016aac <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d10b      	bne.n	8016aa4 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8016a8c:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8016a90:	4907      	ldr	r1, [pc, #28]	; (8016ab0 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8016a92:	200c      	movs	r0, #12
 8016a94:	f7f0 fb4c 	bl	8007130 <_ZnwjPKci>
 8016a98:	4604      	mov	r4, r0
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	f7ff fa4c 	bl	8015f38 <_ZN19MockActualCallTraceC1Ev>
 8016aa0:	4b02      	ldr	r3, [pc, #8]	; (8016aac <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8016aa2:	601c      	str	r4, [r3, #0]
    return *instance_;
 8016aa4:	4b01      	ldr	r3, [pc, #4]	; (8016aac <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	bd98      	pop	{r3, r4, r7, pc}
 8016aac:	20000c5c 	.word	0x20000c5c
 8016ab0:	0802244c 	.word	0x0802244c

08016ab4 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	af00      	add	r7, sp, #0
    delete instance_;
 8016ab8:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d004      	beq.n	8016aca <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8016ac0:	681a      	ldr	r2, [r3, #0]
 8016ac2:	3204      	adds	r2, #4
 8016ac4:	6812      	ldr	r2, [r2, #0]
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	4790      	blx	r2
    instance_ = NULLPTR;
 8016aca:	4b02      	ldr	r3, [pc, #8]	; (8016ad4 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8016acc:	2200      	movs	r2, #0
 8016ace:	601a      	str	r2, [r3, #0]
}
 8016ad0:	bf00      	nop
 8016ad2:	bd80      	pop	{r7, pc}
 8016ad4:	20000c5c 	.word	0x20000c5c

08016ad8 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7fd fe9a 	bl	801481c <_ZN14MockActualCallC1Ev>
 8016ae8:	4a03      	ldr	r2, [pc, #12]	; (8016af8 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	601a      	str	r2, [r3, #0]
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	4618      	mov	r0, r3
 8016af2:	3708      	adds	r7, #8
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	0802435c 	.word	0x0802435c

08016afc <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8016afc:	b580      	push	{r7, lr}
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	4801      	ldr	r0, [pc, #4]	; (8016b08 <__tcf_0+0xc>)
 8016b02:	f000 f831 	bl	8016b68 <_ZN21MockIgnoredActualCallD1Ev>
 8016b06:	bd80      	pop	{r7, pc}
 8016b08:	20000c60 	.word	0x20000c60

08016b0c <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8016b10:	4b12      	ldr	r3, [pc, #72]	; (8016b5c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	f3bf 8f5b 	dmb	ish
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	f003 0301 	and.w	r3, r3, #1
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	bf0c      	ite	eq
 8016b22:	2301      	moveq	r3, #1
 8016b24:	2300      	movne	r3, #0
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d013      	beq.n	8016b54 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8016b2c:	480b      	ldr	r0, [pc, #44]	; (8016b5c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8016b2e:	f005 fd83 	bl	801c638 <__cxa_guard_acquire>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	bf14      	ite	ne
 8016b38:	2301      	movne	r3, #1
 8016b3a:	2300      	moveq	r3, #0
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d008      	beq.n	8016b54 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8016b42:	4807      	ldr	r0, [pc, #28]	; (8016b60 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8016b44:	f7ff ffc8 	bl	8016ad8 <_ZN21MockIgnoredActualCallC1Ev>
 8016b48:	4804      	ldr	r0, [pc, #16]	; (8016b5c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8016b4a:	f005 fd81 	bl	801c650 <__cxa_guard_release>
 8016b4e:	4805      	ldr	r0, [pc, #20]	; (8016b64 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8016b50:	f005 fda5 	bl	801c69e <atexit>
    return call;
 8016b54:	4b02      	ldr	r3, [pc, #8]	; (8016b60 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	20000c64 	.word	0x20000c64
 8016b60:	20000c60 	.word	0x20000c60
 8016b64:	08016afd 	.word	0x08016afd

08016b68 <_ZN21MockIgnoredActualCallD1Ev>:
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	4a05      	ldr	r2, [pc, #20]	; (8016b88 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	601a      	str	r2, [r3, #0]
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7fd fe5f 	bl	801483c <_ZN14MockActualCallD1Ev>
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	4618      	mov	r0, r3
 8016b82:	3708      	adds	r7, #8
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	0802435c 	.word	0x0802435c

08016b8c <_ZN21MockIgnoredActualCallD0Ev>:
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f7ff ffe7 	bl	8016b68 <_ZN21MockIgnoredActualCallD1Ev>
 8016b9a:	2104      	movs	r1, #4
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f7f0 fadb 	bl	8007158 <_ZdlPvj>
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3708      	adds	r7, #8
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	4a05      	ldr	r2, [pc, #20]	; (8016bcc <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	601a      	str	r2, [r3, #0]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7f0 fefd 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	3708      	adds	r7, #8
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}
 8016bcc:	08024254 	.word	0x08024254

08016bd0 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b082      	sub	sp, #8
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	f7ff ffe7 	bl	8016bac <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8016bde:	2134      	movs	r1, #52	; 0x34
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f7f0 fab9 	bl	8007158 <_ZdlPvj>
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	4618      	mov	r0, r3
 8016bea:	3708      	adds	r7, #8
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	4a05      	ldr	r2, [pc, #20]	; (8016c10 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	601a      	str	r2, [r3, #0]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7f0 fedb 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3708      	adds	r7, #8
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}
 8016c10:	08024330 	.word	0x08024330

08016c14 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b082      	sub	sp, #8
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7ff ffe7 	bl	8016bf0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8016c22:	2134      	movs	r1, #52	; 0x34
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7f0 fa97 	bl	8007158 <_ZdlPvj>
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	4a05      	ldr	r2, [pc, #20]	; (8016c54 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	4618      	mov	r0, r3
 8016c46:	f7f0 feb9 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}
 8016c54:	08024304 	.word	0x08024304

08016c58 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	f7ff ffe7 	bl	8016c34 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8016c66:	2134      	movs	r1, #52	; 0x34
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f7f0 fa75 	bl	8007158 <_ZdlPvj>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	4618      	mov	r0, r3
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	4a05      	ldr	r2, [pc, #20]	; (8016c98 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	601a      	str	r2, [r3, #0]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7f0 fe97 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	4618      	mov	r0, r3
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	080242d8 	.word	0x080242d8

08016c9c <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f7ff ffe7 	bl	8016c78 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8016caa:	2134      	movs	r1, #52	; 0x34
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7f0 fa53 	bl	8007158 <_ZdlPvj>
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	4a05      	ldr	r2, [pc, #20]	; (8016cdc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	601a      	str	r2, [r3, #0]
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f0 fe75 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	08024280 	.word	0x08024280

08016ce0 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b082      	sub	sp, #8
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f7ff ffe7 	bl	8016cbc <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8016cee:	2134      	movs	r1, #52	; 0x34
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f7f0 fa31 	bl	8007158 <_ZdlPvj>
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3708      	adds	r7, #8
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bd80      	pop	{r7, pc}

08016d00 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b082      	sub	sp, #8
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
 8016d08:	4a05      	ldr	r2, [pc, #20]	; (8016d20 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	601a      	str	r2, [r3, #0]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7f0 fe53 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	3708      	adds	r7, #8
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}
 8016d20:	080242ac 	.word	0x080242ac

08016d24 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b082      	sub	sp, #8
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	6878      	ldr	r0, [r7, #4]
 8016d2e:	f7ff ffe7 	bl	8016d00 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8016d32:	2134      	movs	r1, #52	; 0x34
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7f0 fa0f 	bl	8007158 <_ZdlPvj>
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3708      	adds	r7, #8
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}

08016d44 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	4a05      	ldr	r2, [pc, #20]	; (8016d64 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	601a      	str	r2, [r3, #0]
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7f0 fe31 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3708      	adds	r7, #8
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}
 8016d64:	080241fc 	.word	0x080241fc

08016d68 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f7ff ffe7 	bl	8016d44 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8016d76:	2134      	movs	r1, #52	; 0x34
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f7f0 f9ed 	bl	8007158 <_ZdlPvj>
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	4618      	mov	r0, r3
 8016d82:	3708      	adds	r7, #8
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}

08016d88 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b082      	sub	sp, #8
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	4a05      	ldr	r2, [pc, #20]	; (8016da8 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7f0 fe0f 	bl	80079bc <_ZN11MockFailureD1Ev>
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	4618      	mov	r0, r3
 8016da2:	3708      	adds	r7, #8
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	08024228 	.word	0x08024228

08016dac <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f7ff ffe7 	bl	8016d88 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8016dba:	2134      	movs	r1, #52	; 0x34
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7f0 f9cb 	bl	8007158 <_ZdlPvj>
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3708      	adds	r7, #8
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}

08016dcc <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	3310      	adds	r3, #16
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	683a      	ldr	r2, [r7, #0]
 8016de0:	6839      	ldr	r1, [r7, #0]
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	4798      	blx	r3
 8016de6:	4603      	mov	r3, r0
 8016de8:	4618      	mov	r0, r3
 8016dea:	3708      	adds	r7, #8
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8016df0:	b480      	push	{r7}
 8016df2:	b083      	sub	sp, #12
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	6039      	str	r1, [r7, #0]
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	370c      	adds	r7, #12
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr

08016e08 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
 8016e10:	6039      	str	r1, [r7, #0]
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	4618      	mov	r0, r3
 8016e16:	370c      	adds	r7, #12
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr

08016e20 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8016e20:	b480      	push	{r7}
 8016e22:	b085      	sub	sp, #20
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	60f8      	str	r0, [r7, #12]
 8016e28:	60b9      	str	r1, [r7, #8]
 8016e2a:	607a      	str	r2, [r7, #4]
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3714      	adds	r7, #20
 8016e32:	46bd      	mov	sp, r7
 8016e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e38:	4770      	bx	lr

08016e3a <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8016e3a:	b480      	push	{r7}
 8016e3c:	b085      	sub	sp, #20
 8016e3e:	af00      	add	r7, sp, #0
 8016e40:	60f8      	str	r0, [r7, #12]
 8016e42:	60b9      	str	r1, [r7, #8]
 8016e44:	4613      	mov	r3, r2
 8016e46:	71fb      	strb	r3, [r7, #7]
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3714      	adds	r7, #20
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e54:	4770      	bx	lr

08016e56 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8016e56:	b480      	push	{r7}
 8016e58:	b085      	sub	sp, #20
 8016e5a:	af00      	add	r7, sp, #0
 8016e5c:	60f8      	str	r0, [r7, #12]
 8016e5e:	60b9      	str	r1, [r7, #8]
 8016e60:	607a      	str	r2, [r7, #4]
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	4618      	mov	r0, r3
 8016e66:	3714      	adds	r7, #20
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6e:	4770      	bx	lr

08016e70 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8016e70:	b480      	push	{r7}
 8016e72:	b085      	sub	sp, #20
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	60f8      	str	r0, [r7, #12]
 8016e78:	60b9      	str	r1, [r7, #8]
 8016e7a:	607a      	str	r2, [r7, #4]
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3714      	adds	r7, #20
 8016e82:	46bd      	mov	sp, r7
 8016e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e88:	4770      	bx	lr

08016e8a <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8016e8a:	b480      	push	{r7}
 8016e8c:	b085      	sub	sp, #20
 8016e8e:	af00      	add	r7, sp, #0
 8016e90:	60f8      	str	r0, [r7, #12]
 8016e92:	60b9      	str	r1, [r7, #8]
 8016e94:	607a      	str	r2, [r7, #4]
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3714      	adds	r7, #20
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr

08016ea4 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8016ea4:	b480      	push	{r7}
 8016ea6:	b085      	sub	sp, #20
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	607a      	str	r2, [r7, #4]
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	3714      	adds	r7, #20
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebc:	4770      	bx	lr

08016ebe <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8016ebe:	b480      	push	{r7}
 8016ec0:	b085      	sub	sp, #20
 8016ec2:	af00      	add	r7, sp, #0
 8016ec4:	60f8      	str	r0, [r7, #12]
 8016ec6:	60b9      	str	r1, [r7, #8]
 8016ec8:	4639      	mov	r1, r7
 8016eca:	e881 000c 	stmia.w	r1, {r2, r3}
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3714      	adds	r7, #20
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr

08016edc <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8016edc:	b480      	push	{r7}
 8016ede:	b085      	sub	sp, #20
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	4639      	mov	r1, r7
 8016ee8:	e881 000c 	stmia.w	r1, {r2, r3}
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3714      	adds	r7, #20
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef8:	4770      	bx	lr

08016efa <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8016efa:	b480      	push	{r7}
 8016efc:	b085      	sub	sp, #20
 8016efe:	af00      	add	r7, sp, #0
 8016f00:	60f8      	str	r0, [r7, #12]
 8016f02:	60b9      	str	r1, [r7, #8]
 8016f04:	ed87 0b00 	vstr	d0, [r7]
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3714      	adds	r7, #20
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f14:	4770      	bx	lr

08016f16 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8016f16:	b480      	push	{r7}
 8016f18:	b087      	sub	sp, #28
 8016f1a:	af00      	add	r7, sp, #0
 8016f1c:	6178      	str	r0, [r7, #20]
 8016f1e:	6139      	str	r1, [r7, #16]
 8016f20:	ed87 0b02 	vstr	d0, [r7, #8]
 8016f24:	ed87 1b00 	vstr	d1, [r7]
 8016f28:	697b      	ldr	r3, [r7, #20]
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	371c      	adds	r7, #28
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f34:	4770      	bx	lr

08016f36 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8016f36:	b480      	push	{r7}
 8016f38:	b085      	sub	sp, #20
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	60f8      	str	r0, [r7, #12]
 8016f3e:	60b9      	str	r1, [r7, #8]
 8016f40:	607a      	str	r2, [r7, #4]
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	4618      	mov	r0, r3
 8016f46:	3714      	adds	r7, #20
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr

08016f50 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8016f50:	b480      	push	{r7}
 8016f52:	b085      	sub	sp, #20
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	607a      	str	r2, [r7, #4]
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3714      	adds	r7, #20
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr

08016f6a <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8016f6a:	b480      	push	{r7}
 8016f6c:	b085      	sub	sp, #20
 8016f6e:	af00      	add	r7, sp, #0
 8016f70:	60f8      	str	r0, [r7, #12]
 8016f72:	60b9      	str	r1, [r7, #8]
 8016f74:	607a      	str	r2, [r7, #4]
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3714      	adds	r7, #20
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr

08016f84 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8016f84:	b480      	push	{r7}
 8016f86:	b085      	sub	sp, #20
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	60f8      	str	r0, [r7, #12]
 8016f8c:	60b9      	str	r1, [r7, #8]
 8016f8e:	607a      	str	r2, [r7, #4]
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	4618      	mov	r0, r3
 8016f94:	3714      	adds	r7, #20
 8016f96:	46bd      	mov	sp, r7
 8016f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9c:	4770      	bx	lr

08016f9e <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8016f9e:	b480      	push	{r7}
 8016fa0:	b085      	sub	sp, #20
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	60f8      	str	r0, [r7, #12]
 8016fa6:	60b9      	str	r1, [r7, #8]
 8016fa8:	607a      	str	r2, [r7, #4]
 8016faa:	603b      	str	r3, [r7, #0]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3714      	adds	r7, #20
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8016fba:	b480      	push	{r7}
 8016fbc:	b085      	sub	sp, #20
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	60f8      	str	r0, [r7, #12]
 8016fc2:	60b9      	str	r1, [r7, #8]
 8016fc4:	607a      	str	r2, [r7, #4]
 8016fc6:	603b      	str	r3, [r7, #0]
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3714      	adds	r7, #20
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd4:	4770      	bx	lr

08016fd6 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8016fd6:	b480      	push	{r7}
 8016fd8:	b085      	sub	sp, #20
 8016fda:	af00      	add	r7, sp, #0
 8016fdc:	60f8      	str	r0, [r7, #12]
 8016fde:	60b9      	str	r1, [r7, #8]
 8016fe0:	607a      	str	r2, [r7, #4]
 8016fe2:	603b      	str	r3, [r7, #0]
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3714      	adds	r7, #20
 8016fea:	46bd      	mov	sp, r7
 8016fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff0:	4770      	bx	lr

08016ff2 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8016ff2:	b480      	push	{r7}
 8016ff4:	b085      	sub	sp, #20
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	60f8      	str	r0, [r7, #12]
 8016ffa:	60b9      	str	r1, [r7, #8]
 8016ffc:	607a      	str	r2, [r7, #4]
 8016ffe:	603b      	str	r3, [r7, #0]
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	4618      	mov	r0, r3
 8017004:	3714      	adds	r7, #20
 8017006:	46bd      	mov	sp, r7
 8017008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700c:	4770      	bx	lr

0801700e <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801700e:	b480      	push	{r7}
 8017010:	b083      	sub	sp, #12
 8017012:	af00      	add	r7, sp, #0
 8017014:	6078      	str	r0, [r7, #4]
 8017016:	6039      	str	r1, [r7, #0]
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	4618      	mov	r0, r3
 801701c:	370c      	adds	r7, #12
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8017026:	b480      	push	{r7}
 8017028:	b083      	sub	sp, #12
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	4618      	mov	r0, r3
 8017032:	370c      	adds	r7, #12
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	460b      	mov	r3, r1
 8017046:	70fb      	strb	r3, [r7, #3]
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	4618      	mov	r0, r3
 801704c:	370c      	adds	r7, #12
 801704e:	46bd      	mov	sp, r7
 8017050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017054:	4770      	bx	lr

08017056 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8017056:	b480      	push	{r7}
 8017058:	b083      	sub	sp, #12
 801705a:	af00      	add	r7, sp, #0
 801705c:	6078      	str	r0, [r7, #4]
 801705e:	6039      	str	r1, [r7, #0]
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	4618      	mov	r0, r3
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr

0801706e <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801706e:	b480      	push	{r7}
 8017070:	b083      	sub	sp, #12
 8017072:	af00      	add	r7, sp, #0
 8017074:	6078      	str	r0, [r7, #4]
 8017076:	6039      	str	r1, [r7, #0]
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	4618      	mov	r0, r3
 801707c:	370c      	adds	r7, #12
 801707e:	46bd      	mov	sp, r7
 8017080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017084:	4770      	bx	lr

08017086 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8017086:	b480      	push	{r7}
 8017088:	b083      	sub	sp, #12
 801708a:	af00      	add	r7, sp, #0
 801708c:	6078      	str	r0, [r7, #4]
 801708e:	6039      	str	r1, [r7, #0]
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	4618      	mov	r0, r3
 8017094:	370c      	adds	r7, #12
 8017096:	46bd      	mov	sp, r7
 8017098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709c:	4770      	bx	lr

0801709e <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801709e:	b480      	push	{r7}
 80170a0:	b083      	sub	sp, #12
 80170a2:	af00      	add	r7, sp, #0
 80170a4:	6078      	str	r0, [r7, #4]
 80170a6:	6039      	str	r1, [r7, #0]
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	4618      	mov	r0, r3
 80170ac:	370c      	adds	r7, #12
 80170ae:	46bd      	mov	sp, r7
 80170b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b4:	4770      	bx	lr

080170b6 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 80170b6:	b480      	push	{r7}
 80170b8:	b085      	sub	sp, #20
 80170ba:	af00      	add	r7, sp, #0
 80170bc:	60f8      	str	r0, [r7, #12]
 80170be:	1d3b      	adds	r3, r7, #4
 80170c0:	e883 0006 	stmia.w	r3, {r1, r2}
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	4618      	mov	r0, r3
 80170c8:	3714      	adds	r7, #20
 80170ca:	46bd      	mov	sp, r7
 80170cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d0:	4770      	bx	lr

080170d2 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 80170d2:	b480      	push	{r7}
 80170d4:	b085      	sub	sp, #20
 80170d6:	af00      	add	r7, sp, #0
 80170d8:	60f8      	str	r0, [r7, #12]
 80170da:	1d3b      	adds	r3, r7, #4
 80170dc:	e883 0006 	stmia.w	r3, {r1, r2}
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	4618      	mov	r0, r3
 80170e4:	3714      	adds	r7, #20
 80170e6:	46bd      	mov	sp, r7
 80170e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ec:	4770      	bx	lr

080170ee <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 80170ee:	b480      	push	{r7}
 80170f0:	b085      	sub	sp, #20
 80170f2:	af00      	add	r7, sp, #0
 80170f4:	60f8      	str	r0, [r7, #12]
 80170f6:	ed87 0b00 	vstr	d0, [r7]
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	4618      	mov	r0, r3
 80170fe:	3714      	adds	r7, #20
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr

08017108 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8017108:	b480      	push	{r7}
 801710a:	b083      	sub	sp, #12
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
 8017110:	6039      	str	r1, [r7, #0]
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	4618      	mov	r0, r3
 8017116:	370c      	adds	r7, #12
 8017118:	46bd      	mov	sp, r7
 801711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711e:	4770      	bx	lr

08017120 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8017120:	b480      	push	{r7}
 8017122:	b083      	sub	sp, #12
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
 8017128:	6039      	str	r1, [r7, #0]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	4618      	mov	r0, r3
 801712e:	370c      	adds	r7, #12
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8017138:	b480      	push	{r7}
 801713a:	b083      	sub	sp, #12
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	6039      	str	r1, [r7, #0]
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4618      	mov	r0, r3
 8017146:	370c      	adds	r7, #12
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8017150:	b480      	push	{r7}
 8017152:	b083      	sub	sp, #12
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4618      	mov	r0, r3
 801715e:	370c      	adds	r7, #12
 8017160:	46bd      	mov	sp, r7
 8017162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017166:	4770      	bx	lr

08017168 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8017168:	b480      	push	{r7}
 801716a:	b083      	sub	sp, #12
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	6039      	str	r1, [r7, #0]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	4618      	mov	r0, r3
 8017176:	370c      	adds	r7, #12
 8017178:	46bd      	mov	sp, r7
 801717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717e:	4770      	bx	lr

08017180 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8017180:	b480      	push	{r7}
 8017182:	b083      	sub	sp, #12
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	4a04      	ldr	r2, [pc, #16]	; (801719c <_ZN16MockExpectedCallC1Ev+0x1c>)
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	601a      	str	r2, [r3, #0]
{
}
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	4618      	mov	r0, r3
 8017192:	370c      	adds	r7, #12
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr
 801719c:	08024900 	.word	0x08024900

080171a0 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 80171a0:	b480      	push	{r7}
 80171a2:	b083      	sub	sp, #12
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	4a04      	ldr	r2, [pc, #16]	; (80171bc <_ZN16MockExpectedCallD1Ev+0x1c>)
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	601a      	str	r2, [r3, #0]
{
}
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	4618      	mov	r0, r3
 80171b2:	370c      	adds	r7, #12
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr
 80171bc:	08024900 	.word	0x08024900

080171c0 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	3358      	adds	r3, #88	; 0x58
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	687a      	ldr	r2, [r7, #4]
 80171d4:	6839      	ldr	r1, [r7, #0]
 80171d6:	4610      	mov	r0, r2
 80171d8:	4798      	blx	r3
}
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	3708      	adds	r7, #8
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}

080171e2 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 80171e2:	b580      	push	{r7, lr}
 80171e4:	b082      	sub	sp, #8
 80171e6:	af00      	add	r7, sp, #0
 80171e8:	6078      	str	r0, [r7, #4]
 80171ea:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	3304      	adds	r3, #4
 80171f0:	6839      	ldr	r1, [r7, #0]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7f2 fbcb 	bl	800998e <_ZN12SimpleStringaSERKS_>
}
 80171f8:	bf00      	nop
 80171fa:	3708      	adds	r7, #8
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}

08017200 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]
    return functionName_;
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	3304      	adds	r3, #4
 801720e:	4619      	mov	r1, r3
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f7f2 fba4 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	3708      	adds	r7, #8
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
	...

08017220 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8017220:	b590      	push	{r4, r7, lr}
 8017222:	b085      	sub	sp, #20
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
 8017228:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4618      	mov	r0, r3
 801722e:	f7ff ffa7 	bl	8017180 <_ZN16MockExpectedCallC1Ev>
 8017232:	4a2c      	ldr	r2, [pc, #176]	; (80172e4 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	601a      	str	r2, [r3, #0]
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	3304      	adds	r3, #4
 801723c:	492a      	ldr	r1, [pc, #168]	; (80172e8 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801723e:	4618      	mov	r0, r3
 8017240:	f7f2 fb39 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2200      	movs	r2, #0
 8017248:	731a      	strb	r2, [r3, #12]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2200      	movs	r2, #0
 801724e:	735a      	strb	r2, [r3, #13]
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	2200      	movs	r2, #0
 8017254:	611a      	str	r2, [r3, #16]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	2200      	movs	r2, #0
 801725a:	615a      	str	r2, [r3, #20]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2200      	movs	r2, #0
 8017260:	761a      	strb	r2, [r3, #24]
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8017268:	f107 0308 	add.w	r3, r7, #8
 801726c:	491e      	ldr	r1, [pc, #120]	; (80172e8 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801726e:	4618      	mov	r0, r3
 8017270:	f7f2 fb21 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8017274:	f107 0308 	add.w	r3, r7, #8
 8017278:	4619      	mov	r1, r3
 801727a:	4620      	mov	r0, r4
 801727c:	f003 f840 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017280:	f107 0308 	add.w	r3, r7, #8
 8017284:	4618      	mov	r0, r3
 8017286:	f7f2 fece 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2200      	movs	r2, #0
 801728e:	661a      	str	r2, [r3, #96]	; 0x60
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2200      	movs	r2, #0
 8017294:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2201      	movs	r2, #1
 801729c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2200      	movs	r2, #0
 80172a4:	669a      	str	r2, [r3, #104]	; 0x68
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	683a      	ldr	r2, [r7, #0]
 80172aa:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 80172ac:	2246      	movs	r2, #70	; 0x46
 80172ae:	490f      	ldr	r1, [pc, #60]	; (80172ec <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80172b0:	2004      	movs	r0, #4
 80172b2:	f7ef ff3d 	bl	8007130 <_ZnwjPKci>
 80172b6:	4604      	mov	r4, r0
 80172b8:	4620      	mov	r0, r4
 80172ba:	f004 ff36 	bl	801c12a <_ZN18MockNamedValueListC1Ev>
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 80172c2:	2247      	movs	r2, #71	; 0x47
 80172c4:	4909      	ldr	r1, [pc, #36]	; (80172ec <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80172c6:	2004      	movs	r0, #4
 80172c8:	f7ef ff32 	bl	8007130 <_ZnwjPKci>
 80172cc:	4604      	mov	r4, r0
 80172ce:	4620      	mov	r0, r4
 80172d0:	f004 ff2b 	bl	801c12a <_ZN18MockNamedValueListC1Ev>
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	621c      	str	r4, [r3, #32]
}
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	4618      	mov	r0, r3
 80172dc:	3714      	adds	r7, #20
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd90      	pop	{r4, r7, pc}
 80172e2:	bf00      	nop
 80172e4:	08024744 	.word	0x08024744
 80172e8:	08022574 	.word	0x08022574
 80172ec:	08022578 	.word	0x08022578

080172f0 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	4a17      	ldr	r2, [pc, #92]	; (8017358 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	69db      	ldr	r3, [r3, #28]
 8017302:	4618      	mov	r0, r3
 8017304:	f004 ff1f 	bl	801c146 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	69db      	ldr	r3, [r3, #28]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d003      	beq.n	8017318 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8017310:	2104      	movs	r1, #4
 8017312:	4618      	mov	r0, r3
 8017314:	f7ef ff20 	bl	8007158 <_ZdlPvj>
    outputParameters_->clear();
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6a1b      	ldr	r3, [r3, #32]
 801731c:	4618      	mov	r0, r3
 801731e:	f004 ff12 	bl	801c146 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6a1b      	ldr	r3, [r3, #32]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d003      	beq.n	8017332 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801732a:	2104      	movs	r1, #4
 801732c:	4618      	mov	r0, r3
 801732e:	f7ef ff13 	bl	8007158 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	3328      	adds	r3, #40	; 0x28
 8017336:	4618      	mov	r0, r3
 8017338:	f003 f80c 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	3304      	adds	r3, #4
 8017340:	4618      	mov	r0, r3
 8017342:	f7f2 fe70 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	4618      	mov	r0, r3
 801734a:	f7ff ff29 	bl	80171a0 <_ZN16MockExpectedCallD1Ev>
}
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	4618      	mov	r0, r3
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	08024744 	.word	0x08024744

0801735c <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
}
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f7ff ffc3 	bl	80172f0 <_ZN23MockCheckedExpectedCallD1Ev>
 801736a:	2170      	movs	r1, #112	; 0x70
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f7ef fef3 	bl	8007158 <_ZdlPvj>
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	4618      	mov	r0, r3
 8017376:	3708      	adds	r7, #8
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}

0801737c <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	6039      	str	r1, [r7, #0]
    setName(name);
 8017386:	6839      	ldr	r1, [r7, #0]
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f7ff ff2a 	bl	80171e2 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801738e:	687b      	ldr	r3, [r7, #4]
}
 8017390:	4618      	mov	r0, r3
 8017392:	3708      	adds	r7, #8
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8017398:	b590      	push	{r4, r7, lr}
 801739a:	b087      	sub	sp, #28
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	4613      	mov	r3, r2
 80173a4:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80173a6:	225a      	movs	r2, #90	; 0x5a
 80173a8:	490e      	ldr	r1, [pc, #56]	; (80173e4 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 80173aa:	2038      	movs	r0, #56	; 0x38
 80173ac:	f7ef fec0 	bl	8007130 <_ZnwjPKci>
 80173b0:	4604      	mov	r4, r0
 80173b2:	68b9      	ldr	r1, [r7, #8]
 80173b4:	4620      	mov	r0, r4
 80173b6:	f001 f851 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80173ba:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	69db      	ldr	r3, [r3, #28]
 80173c0:	6979      	ldr	r1, [r7, #20]
 80173c2:	4618      	mov	r0, r3
 80173c4:	f004 fee2 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	3308      	adds	r3, #8
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	79fa      	ldrb	r2, [r7, #7]
 80173d2:	4611      	mov	r1, r2
 80173d4:	6978      	ldr	r0, [r7, #20]
 80173d6:	4798      	blx	r3
    return *this;
 80173d8:	68fb      	ldr	r3, [r7, #12]
}
 80173da:	4618      	mov	r0, r3
 80173dc:	371c      	adds	r7, #28
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd90      	pop	{r4, r7, pc}
 80173e2:	bf00      	nop
 80173e4:	08022578 	.word	0x08022578

080173e8 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80173e8:	b590      	push	{r4, r7, lr}
 80173ea:	b087      	sub	sp, #28
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	60f8      	str	r0, [r7, #12]
 80173f0:	60b9      	str	r1, [r7, #8]
 80173f2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80173f4:	2262      	movs	r2, #98	; 0x62
 80173f6:	490e      	ldr	r1, [pc, #56]	; (8017430 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 80173f8:	2038      	movs	r0, #56	; 0x38
 80173fa:	f7ef fe99 	bl	8007130 <_ZnwjPKci>
 80173fe:	4604      	mov	r4, r0
 8017400:	68b9      	ldr	r1, [r7, #8]
 8017402:	4620      	mov	r0, r4
 8017404:	f001 f82a 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017408:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	69db      	ldr	r3, [r3, #28]
 801740e:	6979      	ldr	r1, [r7, #20]
 8017410:	4618      	mov	r0, r3
 8017412:	f004 febb 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017416:	697b      	ldr	r3, [r7, #20]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	3310      	adds	r3, #16
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	6879      	ldr	r1, [r7, #4]
 8017420:	6978      	ldr	r0, [r7, #20]
 8017422:	4798      	blx	r3
    return *this;
 8017424:	68fb      	ldr	r3, [r7, #12]
}
 8017426:	4618      	mov	r0, r3
 8017428:	371c      	adds	r7, #28
 801742a:	46bd      	mov	sp, r7
 801742c:	bd90      	pop	{r4, r7, pc}
 801742e:	bf00      	nop
 8017430:	08022578 	.word	0x08022578

08017434 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8017434:	b590      	push	{r4, r7, lr}
 8017436:	b087      	sub	sp, #28
 8017438:	af00      	add	r7, sp, #0
 801743a:	60f8      	str	r0, [r7, #12]
 801743c:	60b9      	str	r1, [r7, #8]
 801743e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017440:	226a      	movs	r2, #106	; 0x6a
 8017442:	490e      	ldr	r1, [pc, #56]	; (801747c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8017444:	2038      	movs	r0, #56	; 0x38
 8017446:	f7ef fe73 	bl	8007130 <_ZnwjPKci>
 801744a:	4604      	mov	r4, r0
 801744c:	68b9      	ldr	r1, [r7, #8]
 801744e:	4620      	mov	r0, r4
 8017450:	f001 f804 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017454:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	69db      	ldr	r3, [r3, #28]
 801745a:	6979      	ldr	r1, [r7, #20]
 801745c:	4618      	mov	r0, r3
 801745e:	f004 fe95 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	330c      	adds	r3, #12
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	6879      	ldr	r1, [r7, #4]
 801746c:	6978      	ldr	r0, [r7, #20]
 801746e:	4798      	blx	r3
    return *this;
 8017470:	68fb      	ldr	r3, [r7, #12]
}
 8017472:	4618      	mov	r0, r3
 8017474:	371c      	adds	r7, #28
 8017476:	46bd      	mov	sp, r7
 8017478:	bd90      	pop	{r4, r7, pc}
 801747a:	bf00      	nop
 801747c:	08022578 	.word	0x08022578

08017480 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017480:	b590      	push	{r4, r7, lr}
 8017482:	b087      	sub	sp, #28
 8017484:	af00      	add	r7, sp, #0
 8017486:	60f8      	str	r0, [r7, #12]
 8017488:	60b9      	str	r1, [r7, #8]
 801748a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801748c:	2272      	movs	r2, #114	; 0x72
 801748e:	490e      	ldr	r1, [pc, #56]	; (80174c8 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8017490:	2038      	movs	r0, #56	; 0x38
 8017492:	f7ef fe4d 	bl	8007130 <_ZnwjPKci>
 8017496:	4604      	mov	r4, r0
 8017498:	68b9      	ldr	r1, [r7, #8]
 801749a:	4620      	mov	r0, r4
 801749c:	f000 ffde 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80174a0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	69db      	ldr	r3, [r3, #28]
 80174a6:	6979      	ldr	r1, [r7, #20]
 80174a8:	4618      	mov	r0, r3
 80174aa:	f004 fe6f 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80174ae:	697b      	ldr	r3, [r7, #20]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	3314      	adds	r3, #20
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	6879      	ldr	r1, [r7, #4]
 80174b8:	6978      	ldr	r0, [r7, #20]
 80174ba:	4798      	blx	r3
    return *this;
 80174bc:	68fb      	ldr	r3, [r7, #12]
}
 80174be:	4618      	mov	r0, r3
 80174c0:	371c      	adds	r7, #28
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd90      	pop	{r4, r7, pc}
 80174c6:	bf00      	nop
 80174c8:	08022578 	.word	0x08022578

080174cc <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80174cc:	b590      	push	{r4, r7, lr}
 80174ce:	b087      	sub	sp, #28
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	60f8      	str	r0, [r7, #12]
 80174d4:	60b9      	str	r1, [r7, #8]
 80174d6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80174d8:	227a      	movs	r2, #122	; 0x7a
 80174da:	490e      	ldr	r1, [pc, #56]	; (8017514 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 80174dc:	2038      	movs	r0, #56	; 0x38
 80174de:	f7ef fe27 	bl	8007130 <_ZnwjPKci>
 80174e2:	4604      	mov	r4, r0
 80174e4:	68b9      	ldr	r1, [r7, #8]
 80174e6:	4620      	mov	r0, r4
 80174e8:	f000 ffb8 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80174ec:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	69db      	ldr	r3, [r3, #28]
 80174f2:	6979      	ldr	r1, [r7, #20]
 80174f4:	4618      	mov	r0, r3
 80174f6:	f004 fe49 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	3318      	adds	r3, #24
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	6879      	ldr	r1, [r7, #4]
 8017504:	6978      	ldr	r0, [r7, #20]
 8017506:	4798      	blx	r3
    return *this;
 8017508:	68fb      	ldr	r3, [r7, #12]
}
 801750a:	4618      	mov	r0, r3
 801750c:	371c      	adds	r7, #28
 801750e:	46bd      	mov	sp, r7
 8017510:	bd90      	pop	{r4, r7, pc}
 8017512:	bf00      	nop
 8017514:	08022578 	.word	0x08022578

08017518 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017518:	b5b0      	push	{r4, r5, r7, lr}
 801751a:	b086      	sub	sp, #24
 801751c:	af02      	add	r7, sp, #8
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	4639      	mov	r1, r7
 8017524:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017528:	f7f9 fda8 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801752c:	4604      	mov	r4, r0
 801752e:	6823      	ldr	r3, [r4, #0]
 8017530:	3368      	adds	r3, #104	; 0x68
 8017532:	681d      	ldr	r5, [r3, #0]
 8017534:	f7f9 fdb2 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017538:	4603      	mov	r3, r0
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	2396      	movs	r3, #150	; 0x96
 801753e:	4a04      	ldr	r2, [pc, #16]	; (8017550 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8017540:	4904      	ldr	r1, [pc, #16]	; (8017554 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017542:	4620      	mov	r0, r4
 8017544:	47a8      	blx	r5
    return *this;
 8017546:	68fb      	ldr	r3, [r7, #12]
}
 8017548:	4618      	mov	r0, r3
 801754a:	3710      	adds	r7, #16
 801754c:	46bd      	mov	sp, r7
 801754e:	bdb0      	pop	{r4, r5, r7, pc}
 8017550:	08022578 	.word	0x08022578
 8017554:	08022594 	.word	0x08022594

08017558 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017558:	b5b0      	push	{r4, r5, r7, lr}
 801755a:	b086      	sub	sp, #24
 801755c:	af02      	add	r7, sp, #8
 801755e:	60f8      	str	r0, [r7, #12]
 8017560:	60b9      	str	r1, [r7, #8]
 8017562:	4639      	mov	r1, r7
 8017564:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017568:	f7f9 fd88 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801756c:	4604      	mov	r4, r0
 801756e:	6823      	ldr	r3, [r4, #0]
 8017570:	3368      	adds	r3, #104	; 0x68
 8017572:	681d      	ldr	r5, [r3, #0]
 8017574:	f7f9 fd92 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017578:	4603      	mov	r3, r0
 801757a:	9300      	str	r3, [sp, #0]
 801757c:	239c      	movs	r3, #156	; 0x9c
 801757e:	4a04      	ldr	r2, [pc, #16]	; (8017590 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8017580:	4904      	ldr	r1, [pc, #16]	; (8017594 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017582:	4620      	mov	r0, r4
 8017584:	47a8      	blx	r5
    return *this;
 8017586:	68fb      	ldr	r3, [r7, #12]
}
 8017588:	4618      	mov	r0, r3
 801758a:	3710      	adds	r7, #16
 801758c:	46bd      	mov	sp, r7
 801758e:	bdb0      	pop	{r4, r5, r7, pc}
 8017590:	08022578 	.word	0x08022578
 8017594:	080225b4 	.word	0x080225b4

08017598 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 8017598:	b590      	push	{r4, r7, lr}
 801759a:	b087      	sub	sp, #28
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80175a6:	22a4      	movs	r2, #164	; 0xa4
 80175a8:	490e      	ldr	r1, [pc, #56]	; (80175e4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 80175aa:	2038      	movs	r0, #56	; 0x38
 80175ac:	f7ef fdc0 	bl	8007130 <_ZnwjPKci>
 80175b0:	4604      	mov	r4, r0
 80175b2:	68b9      	ldr	r1, [r7, #8]
 80175b4:	4620      	mov	r0, r4
 80175b6:	f000 ff51 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80175ba:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	69db      	ldr	r3, [r3, #28]
 80175c0:	6979      	ldr	r1, [r7, #20]
 80175c2:	4618      	mov	r0, r3
 80175c4:	f004 fde2 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	3324      	adds	r3, #36	; 0x24
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	ed97 0b00 	vldr	d0, [r7]
 80175d4:	6978      	ldr	r0, [r7, #20]
 80175d6:	4798      	blx	r3
    return *this;
 80175d8:	68fb      	ldr	r3, [r7, #12]
}
 80175da:	4618      	mov	r0, r3
 80175dc:	371c      	adds	r7, #28
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd90      	pop	{r4, r7, pc}
 80175e2:	bf00      	nop
 80175e4:	08022578 	.word	0x08022578

080175e8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 80175e8:	b590      	push	{r4, r7, lr}
 80175ea:	b089      	sub	sp, #36	; 0x24
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6178      	str	r0, [r7, #20]
 80175f0:	6139      	str	r1, [r7, #16]
 80175f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80175f6:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80175fa:	22ac      	movs	r2, #172	; 0xac
 80175fc:	490f      	ldr	r1, [pc, #60]	; (801763c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 80175fe:	2038      	movs	r0, #56	; 0x38
 8017600:	f7ef fd96 	bl	8007130 <_ZnwjPKci>
 8017604:	4604      	mov	r4, r0
 8017606:	6939      	ldr	r1, [r7, #16]
 8017608:	4620      	mov	r0, r4
 801760a:	f000 ff27 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801760e:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	69db      	ldr	r3, [r3, #28]
 8017614:	69f9      	ldr	r1, [r7, #28]
 8017616:	4618      	mov	r0, r3
 8017618:	f004 fdb8 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801761c:	69fb      	ldr	r3, [r7, #28]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	3328      	adds	r3, #40	; 0x28
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	ed97 1b00 	vldr	d1, [r7]
 8017628:	ed97 0b02 	vldr	d0, [r7, #8]
 801762c:	69f8      	ldr	r0, [r7, #28]
 801762e:	4798      	blx	r3
    return *this;
 8017630:	697b      	ldr	r3, [r7, #20]
}
 8017632:	4618      	mov	r0, r3
 8017634:	3724      	adds	r7, #36	; 0x24
 8017636:	46bd      	mov	sp, r7
 8017638:	bd90      	pop	{r4, r7, pc}
 801763a:	bf00      	nop
 801763c:	08022578 	.word	0x08022578

08017640 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8017640:	b590      	push	{r4, r7, lr}
 8017642:	b087      	sub	sp, #28
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801764c:	22b4      	movs	r2, #180	; 0xb4
 801764e:	490e      	ldr	r1, [pc, #56]	; (8017688 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8017650:	2038      	movs	r0, #56	; 0x38
 8017652:	f7ef fd6d 	bl	8007130 <_ZnwjPKci>
 8017656:	4604      	mov	r4, r0
 8017658:	68b9      	ldr	r1, [r7, #8]
 801765a:	4620      	mov	r0, r4
 801765c:	f000 fefe 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017660:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	69db      	ldr	r3, [r3, #28]
 8017666:	6979      	ldr	r1, [r7, #20]
 8017668:	4618      	mov	r0, r3
 801766a:	f004 fd8f 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	3338      	adds	r3, #56	; 0x38
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	6879      	ldr	r1, [r7, #4]
 8017678:	6978      	ldr	r0, [r7, #20]
 801767a:	4798      	blx	r3
    return *this;
 801767c:	68fb      	ldr	r3, [r7, #12]
}
 801767e:	4618      	mov	r0, r3
 8017680:	371c      	adds	r7, #28
 8017682:	46bd      	mov	sp, r7
 8017684:	bd90      	pop	{r4, r7, pc}
 8017686:	bf00      	nop
 8017688:	08022578 	.word	0x08022578

0801768c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801768c:	b590      	push	{r4, r7, lr}
 801768e:	b087      	sub	sp, #28
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017698:	22bc      	movs	r2, #188	; 0xbc
 801769a:	490e      	ldr	r1, [pc, #56]	; (80176d4 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801769c:	2038      	movs	r0, #56	; 0x38
 801769e:	f7ef fd47 	bl	8007130 <_ZnwjPKci>
 80176a2:	4604      	mov	r4, r0
 80176a4:	68b9      	ldr	r1, [r7, #8]
 80176a6:	4620      	mov	r0, r4
 80176a8:	f000 fed8 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80176ac:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	69db      	ldr	r3, [r3, #28]
 80176b2:	6979      	ldr	r1, [r7, #20]
 80176b4:	4618      	mov	r0, r3
 80176b6:	f004 fd69 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	332c      	adds	r3, #44	; 0x2c
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	6879      	ldr	r1, [r7, #4]
 80176c4:	6978      	ldr	r0, [r7, #20]
 80176c6:	4798      	blx	r3
    return *this;
 80176c8:	68fb      	ldr	r3, [r7, #12]
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	371c      	adds	r7, #28
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd90      	pop	{r4, r7, pc}
 80176d2:	bf00      	nop
 80176d4:	08022578 	.word	0x08022578

080176d8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80176d8:	b590      	push	{r4, r7, lr}
 80176da:	b087      	sub	sp, #28
 80176dc:	af00      	add	r7, sp, #0
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80176e4:	22c4      	movs	r2, #196	; 0xc4
 80176e6:	490e      	ldr	r1, [pc, #56]	; (8017720 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 80176e8:	2038      	movs	r0, #56	; 0x38
 80176ea:	f7ef fd21 	bl	8007130 <_ZnwjPKci>
 80176ee:	4604      	mov	r4, r0
 80176f0:	68b9      	ldr	r1, [r7, #8]
 80176f2:	4620      	mov	r0, r4
 80176f4:	f000 feb2 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80176f8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	69db      	ldr	r3, [r3, #28]
 80176fe:	6979      	ldr	r1, [r7, #20]
 8017700:	4618      	mov	r0, r3
 8017702:	f004 fd43 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	3330      	adds	r3, #48	; 0x30
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	6879      	ldr	r1, [r7, #4]
 8017710:	6978      	ldr	r0, [r7, #20]
 8017712:	4798      	blx	r3
    return *this;
 8017714:	68fb      	ldr	r3, [r7, #12]
}
 8017716:	4618      	mov	r0, r3
 8017718:	371c      	adds	r7, #28
 801771a:	46bd      	mov	sp, r7
 801771c:	bd90      	pop	{r4, r7, pc}
 801771e:	bf00      	nop
 8017720:	08022578 	.word	0x08022578

08017724 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017724:	b590      	push	{r4, r7, lr}
 8017726:	b087      	sub	sp, #28
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	60b9      	str	r1, [r7, #8]
 801772e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017730:	22cc      	movs	r2, #204	; 0xcc
 8017732:	490e      	ldr	r1, [pc, #56]	; (801776c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8017734:	2038      	movs	r0, #56	; 0x38
 8017736:	f7ef fcfb 	bl	8007130 <_ZnwjPKci>
 801773a:	4604      	mov	r4, r0
 801773c:	68b9      	ldr	r1, [r7, #8]
 801773e:	4620      	mov	r0, r4
 8017740:	f000 fe8c 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017744:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	69db      	ldr	r3, [r3, #28]
 801774a:	6979      	ldr	r1, [r7, #20]
 801774c:	4618      	mov	r0, r3
 801774e:	f004 fd1d 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017752:	697b      	ldr	r3, [r7, #20]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	3334      	adds	r3, #52	; 0x34
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	6879      	ldr	r1, [r7, #4]
 801775c:	6978      	ldr	r0, [r7, #20]
 801775e:	4798      	blx	r3
    return *this;
 8017760:	68fb      	ldr	r3, [r7, #12]
}
 8017762:	4618      	mov	r0, r3
 8017764:	371c      	adds	r7, #28
 8017766:	46bd      	mov	sp, r7
 8017768:	bd90      	pop	{r4, r7, pc}
 801776a:	bf00      	nop
 801776c:	08022578 	.word	0x08022578

08017770 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017770:	b590      	push	{r4, r7, lr}
 8017772:	b087      	sub	sp, #28
 8017774:	af00      	add	r7, sp, #0
 8017776:	60f8      	str	r0, [r7, #12]
 8017778:	60b9      	str	r1, [r7, #8]
 801777a:	607a      	str	r2, [r7, #4]
 801777c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801777e:	22d4      	movs	r2, #212	; 0xd4
 8017780:	490e      	ldr	r1, [pc, #56]	; (80177bc <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8017782:	2038      	movs	r0, #56	; 0x38
 8017784:	f7ef fcd4 	bl	8007130 <_ZnwjPKci>
 8017788:	4604      	mov	r4, r0
 801778a:	68b9      	ldr	r1, [r7, #8]
 801778c:	4620      	mov	r0, r4
 801778e:	f000 fe65 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017792:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	69db      	ldr	r3, [r3, #28]
 8017798:	6979      	ldr	r1, [r7, #20]
 801779a:	4618      	mov	r0, r3
 801779c:	f004 fcf6 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	333c      	adds	r3, #60	; 0x3c
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	683a      	ldr	r2, [r7, #0]
 80177aa:	6879      	ldr	r1, [r7, #4]
 80177ac:	6978      	ldr	r0, [r7, #20]
 80177ae:	4798      	blx	r3
    return *this;
 80177b0:	68fb      	ldr	r3, [r7, #12]
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	371c      	adds	r7, #28
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd90      	pop	{r4, r7, pc}
 80177ba:	bf00      	nop
 80177bc:	08022578 	.word	0x08022578

080177c0 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80177c0:	b590      	push	{r4, r7, lr}
 80177c2:	b087      	sub	sp, #28
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	60f8      	str	r0, [r7, #12]
 80177c8:	60b9      	str	r1, [r7, #8]
 80177ca:	607a      	str	r2, [r7, #4]
 80177cc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80177ce:	22dc      	movs	r2, #220	; 0xdc
 80177d0:	490e      	ldr	r1, [pc, #56]	; (801780c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 80177d2:	2038      	movs	r0, #56	; 0x38
 80177d4:	f7ef fcac 	bl	8007130 <_ZnwjPKci>
 80177d8:	4604      	mov	r4, r0
 80177da:	6879      	ldr	r1, [r7, #4]
 80177dc:	4620      	mov	r0, r4
 80177de:	f000 fe3d 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80177e2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	69db      	ldr	r3, [r3, #28]
 80177e8:	6979      	ldr	r1, [r7, #20]
 80177ea:	4618      	mov	r0, r3
 80177ec:	f004 fcce 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	3340      	adds	r3, #64	; 0x40
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	683a      	ldr	r2, [r7, #0]
 80177fa:	68b9      	ldr	r1, [r7, #8]
 80177fc:	6978      	ldr	r0, [r7, #20]
 80177fe:	4798      	blx	r3
    return *this;
 8017800:	68fb      	ldr	r3, [r7, #12]
}
 8017802:	4618      	mov	r0, r3
 8017804:	371c      	adds	r7, #28
 8017806:	46bd      	mov	sp, r7
 8017808:	bd90      	pop	{r4, r7, pc}
 801780a:	bf00      	nop
 801780c:	08022578 	.word	0x08022578

08017810 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8017810:	b590      	push	{r4, r7, lr}
 8017812:	b087      	sub	sp, #28
 8017814:	af00      	add	r7, sp, #0
 8017816:	60f8      	str	r0, [r7, #12]
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
 801781c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801781e:	22e4      	movs	r2, #228	; 0xe4
 8017820:	4911      	ldr	r1, [pc, #68]	; (8017868 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8017822:	2038      	movs	r0, #56	; 0x38
 8017824:	f7ef fc84 	bl	8007130 <_ZnwjPKci>
 8017828:	4604      	mov	r4, r0
 801782a:	68b9      	ldr	r1, [r7, #8]
 801782c:	4620      	mov	r0, r4
 801782e:	f000 fe15 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017832:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	6a1b      	ldr	r3, [r3, #32]
 8017838:	6979      	ldr	r1, [r7, #20]
 801783a:	4618      	mov	r0, r3
 801783c:	f004 fca6 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	3330      	adds	r3, #48	; 0x30
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	6879      	ldr	r1, [r7, #4]
 801784a:	6978      	ldr	r0, [r7, #20]
 801784c:	4798      	blx	r3
    newParameter->setSize(size);
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	3348      	adds	r3, #72	; 0x48
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	6839      	ldr	r1, [r7, #0]
 8017858:	6978      	ldr	r0, [r7, #20]
 801785a:	4798      	blx	r3
    return *this;
 801785c:	68fb      	ldr	r3, [r7, #12]
}
 801785e:	4618      	mov	r0, r3
 8017860:	371c      	adds	r7, #28
 8017862:	46bd      	mov	sp, r7
 8017864:	bd90      	pop	{r4, r7, pc}
 8017866:	bf00      	nop
 8017868:	08022578 	.word	0x08022578

0801786c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801786c:	b590      	push	{r4, r7, lr}
 801786e:	b087      	sub	sp, #28
 8017870:	af00      	add	r7, sp, #0
 8017872:	60f8      	str	r0, [r7, #12]
 8017874:	60b9      	str	r1, [r7, #8]
 8017876:	607a      	str	r2, [r7, #4]
 8017878:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801787a:	22ed      	movs	r2, #237	; 0xed
 801787c:	490e      	ldr	r1, [pc, #56]	; (80178b8 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801787e:	2038      	movs	r0, #56	; 0x38
 8017880:	f7ef fc56 	bl	8007130 <_ZnwjPKci>
 8017884:	4604      	mov	r4, r0
 8017886:	6879      	ldr	r1, [r7, #4]
 8017888:	4620      	mov	r0, r4
 801788a:	f000 fde7 	bl	801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801788e:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	6a1b      	ldr	r3, [r3, #32]
 8017894:	6979      	ldr	r1, [r7, #20]
 8017896:	4618      	mov	r0, r3
 8017898:	f004 fc78 	bl	801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801789c:	697b      	ldr	r3, [r7, #20]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	3340      	adds	r3, #64	; 0x40
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	683a      	ldr	r2, [r7, #0]
 80178a6:	68b9      	ldr	r1, [r7, #8]
 80178a8:	6978      	ldr	r0, [r7, #20]
 80178aa:	4798      	blx	r3
    return *this;
 80178ac:	68fb      	ldr	r3, [r7, #12]
}
 80178ae:	4618      	mov	r0, r3
 80178b0:	371c      	adds	r7, #28
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd90      	pop	{r4, r7, pc}
 80178b6:	bf00      	nop
 80178b8:	08022578 	.word	0x08022578

080178bc <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 80178bc:	b590      	push	{r4, r7, lr}
 80178be:	b083      	sub	sp, #12
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	3318      	adds	r3, #24
 80178cc:	681c      	ldr	r4, [r3, #0]
 80178ce:	2300      	movs	r3, #0
 80178d0:	2200      	movs	r2, #0
 80178d2:	6839      	ldr	r1, [r7, #0]
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	47a0      	blx	r4
 80178d8:	4603      	mov	r3, r0
}
 80178da:	4618      	mov	r0, r3
 80178dc:	370c      	adds	r7, #12
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd90      	pop	{r4, r7, pc}
	...

080178e4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b086      	sub	sp, #24
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	69db      	ldr	r3, [r3, #28]
 80178f4:	6879      	ldr	r1, [r7, #4]
 80178f6:	4618      	mov	r0, r3
 80178f8:	f004 fc7e 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80178fc:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d008      	beq.n	8017916 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8017904:	697b      	ldr	r3, [r7, #20]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	3360      	adds	r3, #96	; 0x60
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	68fa      	ldr	r2, [r7, #12]
 801790e:	6979      	ldr	r1, [r7, #20]
 8017910:	4610      	mov	r0, r2
 8017912:	4798      	blx	r3
 8017914:	e004      	b.n	8017920 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	4903      	ldr	r1, [pc, #12]	; (8017928 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801791a:	4618      	mov	r0, r3
 801791c:	f7f2 fe10 	bl	800a540 <_Z10StringFromPKc>
}
 8017920:	68f8      	ldr	r0, [r7, #12]
 8017922:	3718      	adds	r7, #24
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	08022574 	.word	0x08022574

0801792c <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b084      	sub	sp, #16
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
 8017934:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	69db      	ldr	r3, [r3, #28]
 801793a:	6839      	ldr	r1, [r7, #0]
 801793c:	4618      	mov	r0, r3
 801793e:	f004 fc5b 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017942:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	2b00      	cmp	r3, #0
 8017948:	bf14      	ite	ne
 801794a:	2301      	movne	r3, #1
 801794c:	2300      	moveq	r3, #0
 801794e:	b2db      	uxtb	r3, r3
}
 8017950:	4618      	mov	r0, r3
 8017952:	3710      	adds	r7, #16
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	6a1b      	ldr	r3, [r3, #32]
 8017966:	6839      	ldr	r1, [r7, #0]
 8017968:	4618      	mov	r0, r3
 801796a:	f004 fc45 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801796e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	2b00      	cmp	r3, #0
 8017974:	bf14      	ite	ne
 8017976:	2301      	movne	r3, #1
 8017978:	2300      	moveq	r3, #0
 801797a:	b2db      	uxtb	r3, r3
}
 801797c:	4618      	mov	r0, r3
 801797e:	3710      	adds	r7, #16
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8017984:	b590      	push	{r4, r7, lr}
 8017986:	b089      	sub	sp, #36	; 0x24
 8017988:	af00      	add	r7, sp, #0
 801798a:	60f8      	str	r0, [r7, #12]
 801798c:	60b9      	str	r1, [r7, #8]
 801798e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	69db      	ldr	r3, [r3, #28]
 8017994:	6879      	ldr	r1, [r7, #4]
 8017996:	4618      	mov	r0, r3
 8017998:	f004 fc2e 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801799c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801799e:	2400      	movs	r4, #0
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d004      	beq.n	80179b0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 80179a6:	69f9      	ldr	r1, [r7, #28]
 80179a8:	68f8      	ldr	r0, [r7, #12]
 80179aa:	f7f0 f829 	bl	8007a00 <_ZN14MockNamedValueC1ERKS_>
 80179ae:	e00c      	b.n	80179ca <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 80179b0:	f107 0314 	add.w	r3, r7, #20
 80179b4:	490a      	ldr	r1, [pc, #40]	; (80179e0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7f1 ff7d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80179bc:	2401      	movs	r4, #1
 80179be:	f107 0314 	add.w	r3, r7, #20
 80179c2:	4619      	mov	r1, r3
 80179c4:	68f8      	ldr	r0, [r7, #12]
 80179c6:	f002 fc9b 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 80179ca:	2c00      	cmp	r4, #0
 80179cc:	d004      	beq.n	80179d8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 80179ce:	f107 0314 	add.w	r3, r7, #20
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7f2 fb27 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 80179d8:	68f8      	ldr	r0, [r7, #12]
 80179da:	3724      	adds	r7, #36	; 0x24
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd90      	pop	{r4, r7, pc}
 80179e0:	08022574 	.word	0x08022574

080179e4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 80179e4:	b590      	push	{r4, r7, lr}
 80179e6:	b089      	sub	sp, #36	; 0x24
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	60b9      	str	r1, [r7, #8]
 80179ee:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	6a1b      	ldr	r3, [r3, #32]
 80179f4:	6879      	ldr	r1, [r7, #4]
 80179f6:	4618      	mov	r0, r3
 80179f8:	f004 fbfe 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80179fc:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 80179fe:	2400      	movs	r4, #0
 8017a00:	69fb      	ldr	r3, [r7, #28]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d004      	beq.n	8017a10 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 8017a06:	69f9      	ldr	r1, [r7, #28]
 8017a08:	68f8      	ldr	r0, [r7, #12]
 8017a0a:	f7ef fff9 	bl	8007a00 <_ZN14MockNamedValueC1ERKS_>
 8017a0e:	e00c      	b.n	8017a2a <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8017a10:	f107 0314 	add.w	r3, r7, #20
 8017a14:	490a      	ldr	r1, [pc, #40]	; (8017a40 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f1 ff4d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8017a1c:	2401      	movs	r4, #1
 8017a1e:	f107 0314 	add.w	r3, r7, #20
 8017a22:	4619      	mov	r1, r3
 8017a24:	68f8      	ldr	r0, [r7, #12]
 8017a26:	f002 fc6b 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017a2a:	2c00      	cmp	r4, #0
 8017a2c:	d004      	beq.n	8017a38 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8017a2e:	f107 0314 	add.w	r3, r7, #20
 8017a32:	4618      	mov	r0, r3
 8017a34:	f7f2 faf7 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 8017a38:	68f8      	ldr	r0, [r7, #12]
 8017a3a:	3724      	adds	r7, #36	; 0x24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd90      	pop	{r4, r7, pc}
 8017a40:	08022574 	.word	0x08022574

08017a44 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b084      	sub	sp, #16
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	69db      	ldr	r3, [r3, #28]
 8017a50:	4618      	mov	r0, r3
 8017a52:	f004 fc00 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017a56:	60f8      	str	r0, [r7, #12]
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d014      	beq.n	8017a88 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8017a5e:	68f9      	ldr	r1, [r7, #12]
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	f000 fced 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017a66:	4603      	mov	r3, r0
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f000 fd1f 	bl	80184ac <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8017a6e:	4603      	mov	r3, r0
 8017a70:	f083 0301 	eor.w	r3, r3, #1
 8017a74:	b2db      	uxtb	r3, r3
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d001      	beq.n	8017a7e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	e023      	b.n	8017ac6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8017a7e:	68f8      	ldr	r0, [r7, #12]
 8017a80:	f004 faf2 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8017a84:	60f8      	str	r0, [r7, #12]
 8017a86:	e7e7      	b.n	8017a58 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6a1b      	ldr	r3, [r3, #32]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f004 fbe2 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d014      	beq.n	8017ac4 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 8017a9a:	68f9      	ldr	r1, [r7, #12]
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f000 fccf 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f000 fd01 	bl	80184ac <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	f083 0301 	eor.w	r3, r3, #1
 8017ab0:	b2db      	uxtb	r3, r3
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d001      	beq.n	8017aba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	e005      	b.n	8017ac6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 8017aba:	68f8      	ldr	r0, [r7, #12]
 8017abc:	f004 fad4 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8017ac0:	60f8      	str	r0, [r7, #12]
 8017ac2:	e7e7      	b.n	8017a94 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8017ac4:	2301      	movs	r3, #1
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3710      	adds	r7, #16
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}

08017ace <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8017ace:	b480      	push	{r7}
 8017ad0:	b083      	sub	sp, #12
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	2201      	movs	r2, #1
 8017ada:	731a      	strb	r2, [r3, #12]
    return *this;
 8017adc:	687b      	ldr	r3, [r7, #4]
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	370c      	adds	r7, #12
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae8:	4770      	bx	lr

08017aea <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 8017aea:	b480      	push	{r7}
 8017aec:	b083      	sub	sp, #12
 8017aee:	af00      	add	r7, sp, #0
 8017af0:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017afa:	429a      	cmp	r2, r3
 8017afc:	bf0c      	ite	eq
 8017afe:	2301      	moveq	r3, #1
 8017b00:	2300      	movne	r3, #0
 8017b02:	b2db      	uxtb	r3, r3
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	370c      	adds	r7, #12
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr

08017b10 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8017b10:	b480      	push	{r7}
 8017b12:	b083      	sub	sp, #12
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b20:	429a      	cmp	r2, r3
 8017b22:	bf34      	ite	cc
 8017b24:	2301      	movcc	r3, #1
 8017b26:	2300      	movcs	r3, #0
 8017b28:	b2db      	uxtb	r3, r3
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	370c      	adds	r7, #12
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b34:	4770      	bx	lr

08017b36 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 8017b36:	b580      	push	{r7, lr}
 8017b38:	b082      	sub	sp, #8
 8017b3a:	af00      	add	r7, sp, #0
 8017b3c:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	33cc      	adds	r3, #204	; 0xcc
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	4798      	blx	r3
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d00c      	beq.n	8017b6a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	7b1b      	ldrb	r3, [r3, #12]
 8017b54:	f083 0301 	eor.w	r3, r3, #1
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d103      	bne.n	8017b66 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	7b5b      	ldrb	r3, [r3, #13]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d001      	beq.n	8017b6a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8017b66:	2301      	movs	r3, #1
 8017b68:	e000      	b.n	8017b6c <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 8017b6a:	2300      	movs	r3, #0
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3708      	adds	r7, #8
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	33d0      	adds	r3, #208	; 0xd0
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	4798      	blx	r3
 8017b88:	4603      	mov	r3, r0
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d006      	beq.n	8017b9c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d001      	beq.n	8017b9c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e000      	b.n	8017b9e <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8017b9c:	2300      	movs	r3, #0
}
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	3708      	adds	r7, #8
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	bd80      	pop	{r7, pc}

08017ba6 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 8017ba6:	b580      	push	{r7, lr}
 8017ba8:	b082      	sub	sp, #8
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	6078      	str	r0, [r7, #4]
 8017bae:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017bb4:	1c5a      	adds	r2, r3, #1
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	691b      	ldr	r3, [r3, #16]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d00c      	beq.n	8017bdc <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8017bc6:	683a      	ldr	r2, [r7, #0]
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	d304      	bcc.n	8017bd6 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	695b      	ldr	r3, [r3, #20]
 8017bd0:	683a      	ldr	r2, [r7, #0]
 8017bd2:	429a      	cmp	r2, r3
 8017bd4:	d902      	bls.n	8017bdc <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	2201      	movs	r2, #1
 8017bda:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	33ec      	adds	r3, #236	; 0xec
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	4798      	blx	r3
}
 8017be8:	bf00      	nop
 8017bea:	3708      	adds	r7, #8
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8017bf0:	b480      	push	{r7}
 8017bf2:	b083      	sub	sp, #12
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2201      	movs	r2, #1
 8017bfc:	735a      	strb	r2, [r3, #13]
}
 8017bfe:	bf00      	nop
 8017c00:	370c      	adds	r7, #12
 8017c02:	46bd      	mov	sp, r7
 8017c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c08:	4770      	bx	lr

08017c0a <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 8017c0a:	b480      	push	{r7}
 8017c0c:	b083      	sub	sp, #12
 8017c0e:	af00      	add	r7, sp, #0
 8017c10:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2201      	movs	r2, #1
 8017c16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8017c1a:	bf00      	nop
 8017c1c:	370c      	adds	r7, #12
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c24:	4770      	bx	lr

08017c26 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b084      	sub	sp, #16
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8017c34:	f083 0301 	eor.w	r3, r3, #1
 8017c38:	b2da      	uxtb	r2, r3
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2200      	movs	r2, #0
 8017c44:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	69db      	ldr	r3, [r3, #28]
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f004 fb03 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017c50:	60f8      	str	r0, [r7, #12]
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d00d      	beq.n	8017c74 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 8017c58:	68f9      	ldr	r1, [r7, #12]
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f000 fbf0 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017c60:	4603      	mov	r3, r0
 8017c62:	2100      	movs	r1, #0
 8017c64:	4618      	mov	r0, r3
 8017c66:	f000 fc11 	bl	801848c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 8017c6a:	68f8      	ldr	r0, [r7, #12]
 8017c6c:	f004 f9fc 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8017c70:	60f8      	str	r0, [r7, #12]
 8017c72:	e7ee      	b.n	8017c52 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6a1b      	ldr	r3, [r3, #32]
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f004 faec 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d00d      	beq.n	8017ca2 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 8017c86:	68f9      	ldr	r1, [r7, #12]
 8017c88:	6878      	ldr	r0, [r7, #4]
 8017c8a:	f000 fbd9 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	2100      	movs	r1, #0
 8017c92:	4618      	mov	r0, r3
 8017c94:	f000 fbfa 	bl	801848c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 8017c98:	68f8      	ldr	r0, [r7, #12]
 8017c9a:	f004 f9e5 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8017c9e:	60f8      	str	r0, [r7, #12]
 8017ca0:	e7ee      	b.n	8017c80 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8017ca2:	bf00      	nop
 8017ca4:	3710      	adds	r7, #16
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 8017caa:	b590      	push	{r4, r7, lr}
 8017cac:	b087      	sub	sp, #28
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
 8017cb2:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	69db      	ldr	r3, [r3, #28]
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f004 facc 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017cbe:	6178      	str	r0, [r7, #20]
 8017cc0:	697b      	ldr	r3, [r7, #20]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d022      	beq.n	8017d0c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8017cc6:	f107 030c 	add.w	r3, r7, #12
 8017cca:	6979      	ldr	r1, [r7, #20]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f004 fa06 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 8017cd2:	f107 030c 	add.w	r3, r7, #12
 8017cd6:	6839      	ldr	r1, [r7, #0]
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7f2 f9b0 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	461c      	mov	r4, r3
 8017ce2:	f107 030c 	add.w	r3, r7, #12
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f7f2 f99d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8017cec:	2c00      	cmp	r4, #0
 8017cee:	d008      	beq.n	8017d02 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8017cf0:	6979      	ldr	r1, [r7, #20]
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f000 fba4 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2101      	movs	r1, #1
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f000 fbc5 	bl	801848c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8017d02:	6978      	ldr	r0, [r7, #20]
 8017d04:	f004 f9b0 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8017d08:	6178      	str	r0, [r7, #20]
 8017d0a:	e7d9      	b.n	8017cc0 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8017d0c:	bf00      	nop
 8017d0e:	371c      	adds	r7, #28
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd90      	pop	{r4, r7, pc}

08017d14 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8017d14:	b590      	push	{r4, r7, lr}
 8017d16:	b087      	sub	sp, #28
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
 8017d1c:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6a1b      	ldr	r3, [r3, #32]
 8017d22:	4618      	mov	r0, r3
 8017d24:	f004 fa97 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017d28:	6178      	str	r0, [r7, #20]
 8017d2a:	697b      	ldr	r3, [r7, #20]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d022      	beq.n	8017d76 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8017d30:	f107 030c 	add.w	r3, r7, #12
 8017d34:	6979      	ldr	r1, [r7, #20]
 8017d36:	4618      	mov	r0, r3
 8017d38:	f004 f9d1 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 8017d3c:	f107 030c 	add.w	r3, r7, #12
 8017d40:	6839      	ldr	r1, [r7, #0]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7f2 f97b 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	461c      	mov	r4, r3
 8017d4c:	f107 030c 	add.w	r3, r7, #12
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7f2 f968 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8017d56:	2c00      	cmp	r4, #0
 8017d58:	d008      	beq.n	8017d6c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8017d5a:	6979      	ldr	r1, [r7, #20]
 8017d5c:	6878      	ldr	r0, [r7, #4]
 8017d5e:	f000 fb6f 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2101      	movs	r1, #1
 8017d66:	4618      	mov	r0, r3
 8017d68:	f000 fb90 	bl	801848c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8017d6c:	6978      	ldr	r0, [r7, #20]
 8017d6e:	f004 f97b 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8017d72:	6178      	str	r0, [r7, #20]
 8017d74:	e7d9      	b.n	8017d2a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8017d76:	bf00      	nop
 8017d78:	371c      	adds	r7, #28
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd90      	pop	{r4, r7, pc}
	...

08017d80 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b086      	sub	sp, #24
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	60f8      	str	r0, [r7, #12]
 8017d88:	60b9      	str	r1, [r7, #8]
 8017d8a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	69db      	ldr	r3, [r3, #28]
 8017d90:	6879      	ldr	r1, [r7, #4]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f004 fa30 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017d98:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d005      	beq.n	8017dac <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	6979      	ldr	r1, [r7, #20]
 8017da4:	4618      	mov	r0, r3
 8017da6:	f7ff fa0b 	bl	80171c0 <_Z10StringFromRK14MockNamedValue>
 8017daa:	e003      	b.n	8017db4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8017dac:	4903      	ldr	r1, [pc, #12]	; (8017dbc <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8017dae:	68f8      	ldr	r0, [r7, #12]
 8017db0:	f7f1 fd81 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
}
 8017db4:	68f8      	ldr	r0, [r7, #12]
 8017db6:	3718      	adds	r7, #24
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	080225e0 	.word	0x080225e0

08017dc0 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8017dc0:	b590      	push	{r4, r7, lr}
 8017dc2:	b087      	sub	sp, #28
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	69dc      	ldr	r4, [r3, #28]
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	335c      	adds	r3, #92	; 0x5c
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	f107 020c 	add.w	r2, r7, #12
 8017dda:	6839      	ldr	r1, [r7, #0]
 8017ddc:	4610      	mov	r0, r2
 8017dde:	4798      	blx	r3
 8017de0:	f107 030c 	add.w	r3, r7, #12
 8017de4:	4619      	mov	r1, r3
 8017de6:	4620      	mov	r0, r4
 8017de8:	f004 fa06 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017dec:	6178      	str	r0, [r7, #20]
 8017dee:	f107 030c 	add.w	r3, r7, #12
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7f2 f917 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 8017df8:	697b      	ldr	r3, [r7, #20]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d00d      	beq.n	8017e1a <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8017dfe:	697b      	ldr	r3, [r7, #20]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	3350      	adds	r3, #80	; 0x50
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	6839      	ldr	r1, [r7, #0]
 8017e08:	6978      	ldr	r0, [r7, #20]
 8017e0a:	4798      	blx	r3
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	bf14      	ite	ne
 8017e12:	2301      	movne	r3, #1
 8017e14:	2300      	moveq	r3, #0
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	e006      	b.n	8017e28 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	7b1b      	ldrb	r3, [r3, #12]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	bf14      	ite	ne
 8017e22:	2301      	movne	r3, #1
 8017e24:	2300      	moveq	r3, #0
 8017e26:	b2db      	uxtb	r3, r3
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	371c      	adds	r7, #28
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd90      	pop	{r4, r7, pc}

08017e30 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8017e30:	b590      	push	{r4, r7, lr}
 8017e32:	b087      	sub	sp, #28
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
 8017e38:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	6a1c      	ldr	r4, [r3, #32]
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	335c      	adds	r3, #92	; 0x5c
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f107 020c 	add.w	r2, r7, #12
 8017e4a:	6839      	ldr	r1, [r7, #0]
 8017e4c:	4610      	mov	r0, r2
 8017e4e:	4798      	blx	r3
 8017e50:	f107 030c 	add.w	r3, r7, #12
 8017e54:	4619      	mov	r1, r3
 8017e56:	4620      	mov	r0, r4
 8017e58:	f004 f9ce 	bl	801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8017e5c:	6178      	str	r0, [r7, #20]
 8017e5e:	f107 030c 	add.w	r3, r7, #12
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7f2 f8df 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d00d      	beq.n	8017e8a <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8017e6e:	697b      	ldr	r3, [r7, #20]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	3354      	adds	r3, #84	; 0x54
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	6839      	ldr	r1, [r7, #0]
 8017e78:	6978      	ldr	r0, [r7, #20]
 8017e7a:	4798      	blx	r3
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	bf14      	ite	ne
 8017e82:	2301      	movne	r3, #1
 8017e84:	2300      	moveq	r3, #0
 8017e86:	b2db      	uxtb	r3, r3
 8017e88:	e006      	b.n	8017e98 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	7b1b      	ldrb	r3, [r3, #12]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	bf14      	ite	ne
 8017e92:	2301      	movne	r3, #1
 8017e94:	2300      	moveq	r3, #0
 8017e96:	b2db      	uxtb	r3, r3
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	371c      	adds	r7, #28
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd90      	pop	{r4, r7, pc}

08017ea0 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8017ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ea2:	b0a1      	sub	sp, #132	; 0x84
 8017ea4:	af02      	add	r7, sp, #8
 8017ea6:	6078      	str	r0, [r7, #4]
 8017ea8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8017eaa:	49bc      	ldr	r1, [pc, #752]	; (801819c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	f7f1 fd02 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8017eb2:	683b      	ldr	r3, [r7, #0]
 8017eb4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d012      	beq.n	8017ee2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8017ec0:	f107 030c 	add.w	r3, r7, #12
 8017ec4:	49b6      	ldr	r1, [pc, #728]	; (80181a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7f2 fdb4 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8017ecc:	f107 030c 	add.w	r3, r7, #12
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f7f1 fd5b 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8017ed8:	f107 030c 	add.w	r3, r7, #12
 8017edc:	4618      	mov	r0, r3
 8017ede:	f7f2 f8a2 	bl	800a026 <_ZN12SimpleStringD1Ev>

    str += getName();
 8017ee2:	f107 0314 	add.w	r3, r7, #20
 8017ee6:	6839      	ldr	r1, [r7, #0]
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7ff f989 	bl	8017200 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8017eee:	f107 0314 	add.w	r3, r7, #20
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	6878      	ldr	r0, [r7, #4]
 8017ef6:	f7f2 f913 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8017efa:	f107 0314 	add.w	r3, r7, #20
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7f2 f891 	bl	800a026 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8017f04:	49a7      	ldr	r1, [pc, #668]	; (80181a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f7f2 f91c 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	691b      	ldr	r3, [r3, #16]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d02d      	beq.n	8017f70 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	691a      	ldr	r2, [r3, #16]
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	695b      	ldr	r3, [r3, #20]
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	d113      	bne.n	8017f48 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	691a      	ldr	r2, [r3, #16]
 8017f24:	f107 031c 	add.w	r3, r7, #28
 8017f28:	499f      	ldr	r1, [pc, #636]	; (80181a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f7f2 fd82 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8017f30:	f107 031c 	add.w	r3, r7, #28
 8017f34:	4619      	mov	r1, r3
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f7f2 f8f2 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8017f3c:	f107 031c 	add.w	r3, r7, #28
 8017f40:	4618      	mov	r0, r3
 8017f42:	f7f2 f870 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8017f46:	e013      	b.n	8017f70 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	691a      	ldr	r2, [r3, #16]
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	695b      	ldr	r3, [r3, #20]
 8017f50:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8017f54:	4995      	ldr	r1, [pc, #596]	; (80181ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 8017f56:	f7f2 fd6d 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8017f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017f5e:	4619      	mov	r1, r3
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f7f2 f8dd 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8017f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7f2 f85b 	bl	800a026 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	69db      	ldr	r3, [r3, #28]
 8017f74:	4618      	mov	r0, r3
 8017f76:	f004 f96e 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d109      	bne.n	8017f94 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	6a1b      	ldr	r3, [r3, #32]
 8017f84:	4618      	mov	r0, r3
 8017f86:	f004 f966 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d101      	bne.n	8017f94 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8017f90:	2301      	movs	r3, #1
 8017f92:	e000      	b.n	8017f96 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8017f94:	2300      	movs	r3, #0
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d00b      	beq.n	8017fb2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	7b1b      	ldrb	r3, [r3, #12]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d001      	beq.n	8017fa6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 8017fa2:	4b83      	ldr	r3, [pc, #524]	; (80181b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 8017fa4:	e000      	b.n	8017fa8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 8017fa6:	4b83      	ldr	r3, [pc, #524]	; (80181b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 8017fa8:	4619      	mov	r1, r3
 8017faa:	6878      	ldr	r0, [r7, #4]
 8017fac:	f7f2 f8ca 	bl	800a144 <_ZN12SimpleStringpLEPKc>
 8017fb0:	e0e3      	b.n	801817a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	69db      	ldr	r3, [r3, #28]
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f004 f94d 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8017fbc:	6778      	str	r0, [r7, #116]	; 0x74
 8017fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d069      	beq.n	8018098 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8017fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017fc8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f004 f89a 	bl	801c104 <_ZNK22MockNamedValueListNode7getTypeEv>
 8017fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f7f1 fff9 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8017fda:	4605      	mov	r5, r0
 8017fdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017fe0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f004 f87b 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 8017fe8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017fec:	4618      	mov	r0, r3
 8017fee:	f7f1 ffed 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8017ff2:	4606      	mov	r6, r0
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	33a4      	adds	r3, #164	; 0xa4
 8017ffa:	681c      	ldr	r4, [r3, #0]
 8017ffc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018000:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018002:	4618      	mov	r0, r3
 8018004:	f004 f86b 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 8018008:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801800c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018010:	6839      	ldr	r1, [r7, #0]
 8018012:	4618      	mov	r0, r3
 8018014:	47a0      	blx	r4
 8018016:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801801a:	4618      	mov	r0, r3
 801801c:	f7f1 ffd6 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8018020:	4603      	mov	r3, r0
 8018022:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018026:	9300      	str	r3, [sp, #0]
 8018028:	4633      	mov	r3, r6
 801802a:	462a      	mov	r2, r5
 801802c:	4962      	ldr	r1, [pc, #392]	; (80181b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801802e:	f7f2 fd01 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8018032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018036:	4619      	mov	r1, r3
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7f2 f871 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801803e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018042:	4618      	mov	r0, r3
 8018044:	f7f1 ffef 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8018048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801804c:	4618      	mov	r0, r3
 801804e:	f7f1 ffea 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8018052:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018056:	4618      	mov	r0, r3
 8018058:	f7f1 ffe5 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801805c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018060:	4618      	mov	r0, r3
 8018062:	f7f1 ffe0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8018066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801806a:	4618      	mov	r0, r3
 801806c:	f7f1 ffdb 	bl	800a026 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018070:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018072:	f003 fff9 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	bf14      	ite	ne
 801807c:	2301      	movne	r3, #1
 801807e:	2300      	moveq	r3, #0
 8018080:	b2db      	uxtb	r3, r3
 8018082:	2b00      	cmp	r3, #0
 8018084:	d003      	beq.n	801808e <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 8018086:	494d      	ldr	r1, [pc, #308]	; (80181bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8018088:	6878      	ldr	r0, [r7, #4]
 801808a:	f7f2 f85b 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801808e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018090:	f003 ffea 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8018094:	6778      	str	r0, [r7, #116]	; 0x74
 8018096:	e792      	b.n	8017fbe <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	69db      	ldr	r3, [r3, #28]
 801809c:	4618      	mov	r0, r3
 801809e:	f004 f8da 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80180a2:	4603      	mov	r3, r0
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d009      	beq.n	80180bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	6a1b      	ldr	r3, [r3, #32]
 80180ac:	4618      	mov	r0, r3
 80180ae:	f004 f8d2 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80180b2:	4603      	mov	r3, r0
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d001      	beq.n	80180bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80180b8:	2301      	movs	r3, #1
 80180ba:	e000      	b.n	80180be <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 80180bc:	2300      	movs	r3, #0
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d003      	beq.n	80180ca <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 80180c2:	493e      	ldr	r1, [pc, #248]	; (80181bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f7f2 f83d 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	6a1b      	ldr	r3, [r3, #32]
 80180ce:	4618      	mov	r0, r3
 80180d0:	f004 f8c1 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80180d4:	6778      	str	r0, [r7, #116]	; 0x74
 80180d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d046      	beq.n	801816a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 80180dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80180e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80180e2:	4618      	mov	r0, r3
 80180e4:	f004 f80e 	bl	801c104 <_ZNK22MockNamedValueListNode7getTypeEv>
 80180e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7f1 ff6d 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80180f2:	4604      	mov	r4, r0
 80180f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80180f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80180fa:	4618      	mov	r0, r3
 80180fc:	f003 ffef 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 8018100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018104:	4618      	mov	r0, r3
 8018106:	f7f1 ff61 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801810a:	4603      	mov	r3, r0
 801810c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8018110:	4622      	mov	r2, r4
 8018112:	492b      	ldr	r1, [pc, #172]	; (80181c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8018114:	f7f2 fc8e 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8018118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801811c:	4619      	mov	r1, r3
 801811e:	6878      	ldr	r0, [r7, #4]
 8018120:	f7f1 fffe 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8018124:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018128:	4618      	mov	r0, r3
 801812a:	f7f1 ff7c 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801812e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018132:	4618      	mov	r0, r3
 8018134:	f7f1 ff77 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8018138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801813c:	4618      	mov	r0, r3
 801813e:	f7f1 ff72 	bl	800a026 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018142:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018144:	f003 ff90 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8018148:	4603      	mov	r3, r0
 801814a:	2b00      	cmp	r3, #0
 801814c:	bf14      	ite	ne
 801814e:	2301      	movne	r3, #1
 8018150:	2300      	moveq	r3, #0
 8018152:	b2db      	uxtb	r3, r3
 8018154:	2b00      	cmp	r3, #0
 8018156:	d003      	beq.n	8018160 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8018158:	4918      	ldr	r1, [pc, #96]	; (80181bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f7f1 fff2 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8018160:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018162:	f003 ff81 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 8018166:	6778      	str	r0, [r7, #116]	; 0x74
 8018168:	e7b5      	b.n	80180d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	7b1b      	ldrb	r3, [r3, #12]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d003      	beq.n	801817a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8018172:	4914      	ldr	r1, [pc, #80]	; (80181c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8018174:	6878      	ldr	r0, [r7, #4]
 8018176:	f7f1 ffe5 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018182:	2b01      	cmp	r3, #1
 8018184:	d101      	bne.n	801818a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 8018186:	4c05      	ldr	r4, [pc, #20]	; (801819c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018188:	e000      	b.n	801818c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801818a:	4c0f      	ldr	r4, [pc, #60]	; (80181c8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018190:	683a      	ldr	r2, [r7, #0]
 8018192:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018194:	2a01      	cmp	r2, #1
 8018196:	d119      	bne.n	80181cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 8018198:	4a00      	ldr	r2, [pc, #0]	; (801819c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801819a:	e018      	b.n	80181ce <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801819c:	08022574 	.word	0x08022574
 80181a0:	080225e8 	.word	0x080225e8
 80181a4:	08022600 	.word	0x08022600
 80181a8:	08022608 	.word	0x08022608
 80181ac:	08022628 	.word	0x08022628
 80181b0:	0802264c 	.word	0x0802264c
 80181b4:	08022664 	.word	0x08022664
 80181b8:	08022674 	.word	0x08022674
 80181bc:	08022680 	.word	0x08022680
 80181c0:	08022684 	.word	0x08022684
 80181c4:	08022694 	.word	0x08022694
 80181c8:	080226b4 	.word	0x080226b4
 80181cc:	4a0c      	ldr	r2, [pc, #48]	; (8018200 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 80181ce:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80181d2:	9201      	str	r2, [sp, #4]
 80181d4:	9300      	str	r3, [sp, #0]
 80181d6:	4623      	mov	r3, r4
 80181d8:	460a      	mov	r2, r1
 80181da:	490a      	ldr	r1, [pc, #40]	; (8018204 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 80181dc:	f7f2 fc2a 	bl	800aa34 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 80181e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80181e4:	4619      	mov	r1, r3
 80181e6:	6878      	ldr	r0, [r7, #4]
 80181e8:	f7f1 ff9a 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80181ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7f1 ff18 	bl	800a026 <_ZN12SimpleStringD1Ev>

    return str;
 80181f6:	bf00      	nop
}
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	377c      	adds	r7, #124	; 0x7c
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018200:	080226b4 	.word	0x080226b4
 8018204:	080226b8 	.word	0x080226b8

08018208 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 8018208:	b590      	push	{r4, r7, lr}
 801820a:	b095      	sub	sp, #84	; 0x54
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
 8018210:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8018212:	496c      	ldr	r1, [pc, #432]	; (80183c4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f7f1 fb4e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	69db      	ldr	r3, [r3, #28]
 801821e:	4618      	mov	r0, r3
 8018220:	f004 f819 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 8018224:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018228:	2b00      	cmp	r3, #0
 801822a:	d05e      	beq.n	80182ea <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801822c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801822e:	6838      	ldr	r0, [r7, #0]
 8018230:	f000 f906 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018234:	4603      	mov	r3, r0
 8018236:	4618      	mov	r0, r3
 8018238:	f000 f938 	bl	80184ac <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801823c:	4603      	mov	r3, r0
 801823e:	f083 0301 	eor.w	r3, r3, #1
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b00      	cmp	r3, #0
 8018246:	d04b      	beq.n	80182e0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8018248:	f107 030c 	add.w	r3, r7, #12
 801824c:	495d      	ldr	r1, [pc, #372]	; (80183c4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801824e:	4618      	mov	r0, r3
 8018250:	f7f1 fb31 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8018254:	f107 030c 	add.w	r3, r7, #12
 8018258:	4619      	mov	r1, r3
 801825a:	6878      	ldr	r0, [r7, #4]
 801825c:	f7f1 ff34 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 8018260:	4603      	mov	r3, r0
 8018262:	461c      	mov	r4, r3
 8018264:	f107 030c 	add.w	r3, r7, #12
 8018268:	4618      	mov	r0, r3
 801826a:	f7f1 fedc 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801826e:	2c00      	cmp	r4, #0
 8018270:	d003      	beq.n	801827a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8018272:	4955      	ldr	r1, [pc, #340]	; (80183c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018274:	6878      	ldr	r0, [r7, #4]
 8018276:	f7f1 ff65 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801827a:	f107 031c 	add.w	r3, r7, #28
 801827e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018280:	4618      	mov	r0, r3
 8018282:	f003 ff3f 	bl	801c104 <_ZNK22MockNamedValueListNode7getTypeEv>
 8018286:	f107 031c 	add.w	r3, r7, #28
 801828a:	4618      	mov	r0, r3
 801828c:	f7f1 fe9e 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8018290:	4604      	mov	r4, r0
 8018292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018296:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018298:	4618      	mov	r0, r3
 801829a:	f003 ff20 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 801829e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7f1 fe92 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80182a8:	4603      	mov	r3, r0
 80182aa:	f107 0014 	add.w	r0, r7, #20
 80182ae:	4622      	mov	r2, r4
 80182b0:	4946      	ldr	r1, [pc, #280]	; (80183cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 80182b2:	f7f2 fbbf 	bl	800aa34 <_Z16StringFromFormatPKcz>
 80182b6:	f107 0314 	add.w	r3, r7, #20
 80182ba:	4619      	mov	r1, r3
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f7f1 ff2f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80182c2:	f107 0314 	add.w	r3, r7, #20
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7f1 fead 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80182cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7f1 fea8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80182d6:	f107 031c 	add.w	r3, r7, #28
 80182da:	4618      	mov	r0, r3
 80182dc:	f7f1 fea3 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 80182e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80182e2:	f003 fec1 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 80182e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80182e8:	e79d      	b.n	8018226 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	6a1b      	ldr	r3, [r3, #32]
 80182ee:	4618      	mov	r0, r3
 80182f0:	f003 ffb1 	bl	801c256 <_ZN18MockNamedValueList5beginEv>
 80182f4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80182f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d05e      	beq.n	80183ba <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 80182fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80182fe:	6838      	ldr	r0, [r7, #0]
 8018300:	f000 f89e 	bl	8018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018304:	4603      	mov	r3, r0
 8018306:	4618      	mov	r0, r3
 8018308:	f000 f8d0 	bl	80184ac <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801830c:	4603      	mov	r3, r0
 801830e:	f083 0301 	eor.w	r3, r3, #1
 8018312:	b2db      	uxtb	r3, r3
 8018314:	2b00      	cmp	r3, #0
 8018316:	d04b      	beq.n	80183b0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 8018318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801831c:	4929      	ldr	r1, [pc, #164]	; (80183c4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801831e:	4618      	mov	r0, r3
 8018320:	f7f1 fac9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8018324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f7f1 fecc 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 8018330:	4603      	mov	r3, r0
 8018332:	461c      	mov	r4, r3
 8018334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018338:	4618      	mov	r0, r3
 801833a:	f7f1 fe74 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801833e:	2c00      	cmp	r4, #0
 8018340:	d003      	beq.n	801834a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8018342:	4921      	ldr	r1, [pc, #132]	; (80183c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018344:	6878      	ldr	r0, [r7, #4]
 8018346:	f7f1 fefd 	bl	800a144 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801834a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801834e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018350:	4618      	mov	r0, r3
 8018352:	f003 fed7 	bl	801c104 <_ZNK22MockNamedValueListNode7getTypeEv>
 8018356:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801835a:	4618      	mov	r0, r3
 801835c:	f7f1 fe36 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8018360:	4604      	mov	r4, r0
 8018362:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018366:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018368:	4618      	mov	r0, r3
 801836a:	f003 feb8 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 801836e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018372:	4618      	mov	r0, r3
 8018374:	f7f1 fe2a 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 8018378:	4603      	mov	r3, r0
 801837a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801837e:	4622      	mov	r2, r4
 8018380:	4912      	ldr	r1, [pc, #72]	; (80183cc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018382:	f7f2 fb57 	bl	800aa34 <_Z16StringFromFormatPKcz>
 8018386:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801838a:	4619      	mov	r1, r3
 801838c:	6878      	ldr	r0, [r7, #4]
 801838e:	f7f1 fec7 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8018392:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018396:	4618      	mov	r0, r3
 8018398:	f7f1 fe45 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801839c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7f1 fe40 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80183a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7f1 fe3b 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80183b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80183b2:	f003 fe59 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 80183b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80183b8:	e79d      	b.n	80182f6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 80183ba:	bf00      	nop
}
 80183bc:	6878      	ldr	r0, [r7, #4]
 80183be:	3754      	adds	r7, #84	; 0x54
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd90      	pop	{r4, r7, pc}
 80183c4:	08022574 	.word	0x08022574
 80183c8:	08022680 	.word	0x08022680
 80183cc:	080226e0 	.word	0x080226e0

080183d0 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 80183d0:	b590      	push	{r4, r7, lr}
 80183d2:	b085      	sub	sp, #20
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 80183da:	f107 0308 	add.w	r3, r7, #8
 80183de:	6879      	ldr	r1, [r7, #4]
 80183e0:	4618      	mov	r0, r3
 80183e2:	f7fe ff0d 	bl	8017200 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80183e6:	f107 0308 	add.w	r3, r7, #8
 80183ea:	4619      	mov	r1, r3
 80183ec:	6838      	ldr	r0, [r7, #0]
 80183ee:	f7f1 fe26 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 80183f2:	4603      	mov	r3, r0
 80183f4:	461c      	mov	r4, r3
 80183f6:	f107 0308 	add.w	r3, r7, #8
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7f1 fe13 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8018400:	4623      	mov	r3, r4
}
 8018402:	4618      	mov	r0, r3
 8018404:	3714      	adds	r7, #20
 8018406:	46bd      	mov	sp, r7
 8018408:	bd90      	pop	{r4, r7, pc}

0801840a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801840a:	b480      	push	{r7}
 801840c:	b083      	sub	sp, #12
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
 8018412:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801841a:	f083 0301 	eor.w	r3, r3, #1
 801841e:	b2db      	uxtb	r3, r3
 8018420:	2b00      	cmp	r3, #0
 8018422:	d104      	bne.n	801842e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018428:	683a      	ldr	r2, [r7, #0]
 801842a:	429a      	cmp	r2, r3
 801842c:	d101      	bne.n	8018432 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801842e:	2301      	movs	r3, #1
 8018430:	e000      	b.n	8018434 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 8018432:	2300      	movs	r3, #0
}
 8018434:	4618      	mov	r0, r3
 8018436:	370c      	adds	r7, #12
 8018438:	46bd      	mov	sp, r7
 801843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843e:	4770      	bx	lr

08018440 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b082      	sub	sp, #8
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801844a:	6838      	ldr	r0, [r7, #0]
 801844c:	f003 fe18 	bl	801c080 <_ZN22MockNamedValueListNode4itemEv>
 8018450:	4603      	mov	r3, r0
}
 8018452:	4618      	mov	r0, r3
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
	...

0801845c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801845c:	b580      	push	{r7, lr}
 801845e:	b082      	sub	sp, #8
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
 8018464:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	6839      	ldr	r1, [r7, #0]
 801846a:	4618      	mov	r0, r3
 801846c:	f001 ff48 	bl	801a300 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018470:	4a05      	ldr	r2, [pc, #20]	; (8018488 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	601a      	str	r2, [r3, #0]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	2200      	movs	r2, #0
 801847a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	4618      	mov	r0, r3
 8018482:	3708      	adds	r7, #8
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}
 8018488:	08024848 	.word	0x08024848

0801848c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801848c:	b480      	push	{r7}
 801848e:	b083      	sub	sp, #12
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	460b      	mov	r3, r1
 8018496:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	78fa      	ldrb	r2, [r7, #3]
 801849c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80184a0:	bf00      	nop
 80184a2:	370c      	adds	r7, #12
 80184a4:	46bd      	mov	sp, r7
 80184a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184aa:	4770      	bx	lr

080184ac <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 80184ac:	b480      	push	{r7}
 80184ae:	b083      	sub	sp, #12
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 80184ba:	4618      	mov	r0, r3
 80184bc:	370c      	adds	r7, #12
 80184be:	46bd      	mov	sp, r7
 80184c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c4:	4770      	bx	lr
	...

080184c8 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
 80184d0:	460b      	mov	r3, r1
 80184d2:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	3328      	adds	r3, #40	; 0x28
 80184d8:	4907      	ldr	r1, [pc, #28]	; (80184f8 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 80184da:	4618      	mov	r0, r3
 80184dc:	f002 f9b4 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	3328      	adds	r3, #40	; 0x28
 80184e4:	78fa      	ldrb	r2, [r7, #3]
 80184e6:	4611      	mov	r1, r2
 80184e8:	4618      	mov	r0, r3
 80184ea:	f001 ff5b 	bl	801a3a4 <_ZN14MockNamedValue8setValueEb>
    return *this;
 80184ee:	687b      	ldr	r3, [r7, #4]
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	3708      	adds	r7, #8
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}
 80184f8:	080226e8 	.word	0x080226e8

080184fc <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b082      	sub	sp, #8
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
 8018504:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	3328      	adds	r3, #40	; 0x28
 801850a:	4907      	ldr	r1, [pc, #28]	; (8018528 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801850c:	4618      	mov	r0, r3
 801850e:	f002 f99b 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	3328      	adds	r3, #40	; 0x28
 8018516:	6839      	ldr	r1, [r7, #0]
 8018518:	4618      	mov	r0, r3
 801851a:	f001 ff67 	bl	801a3ec <_ZN14MockNamedValue8setValueEj>
    return *this;
 801851e:	687b      	ldr	r3, [r7, #4]
}
 8018520:	4618      	mov	r0, r3
 8018522:	3708      	adds	r7, #8
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}
 8018528:	080226e8 	.word	0x080226e8

0801852c <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b082      	sub	sp, #8
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
 8018534:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	3328      	adds	r3, #40	; 0x28
 801853a:	4907      	ldr	r1, [pc, #28]	; (8018558 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801853c:	4618      	mov	r0, r3
 801853e:	f002 f983 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	3328      	adds	r3, #40	; 0x28
 8018546:	6839      	ldr	r1, [r7, #0]
 8018548:	4618      	mov	r0, r3
 801854a:	f001 ff71 	bl	801a430 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801854e:	687b      	ldr	r3, [r7, #4]
}
 8018550:	4618      	mov	r0, r3
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}
 8018558:	080226e8 	.word	0x080226e8

0801855c <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b082      	sub	sp, #8
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	3328      	adds	r3, #40	; 0x28
 801856a:	4907      	ldr	r1, [pc, #28]	; (8018588 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801856c:	4618      	mov	r0, r3
 801856e:	f002 f96b 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	3328      	adds	r3, #40	; 0x28
 8018576:	6839      	ldr	r1, [r7, #0]
 8018578:	4618      	mov	r0, r3
 801857a:	f001 ff7b 	bl	801a474 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801857e:	687b      	ldr	r3, [r7, #4]
}
 8018580:	4618      	mov	r0, r3
 8018582:	3708      	adds	r7, #8
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}
 8018588:	080226e8 	.word	0x080226e8

0801858c <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b082      	sub	sp, #8
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
 8018594:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	3328      	adds	r3, #40	; 0x28
 801859a:	4907      	ldr	r1, [pc, #28]	; (80185b8 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801859c:	4618      	mov	r0, r3
 801859e:	f002 f953 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	3328      	adds	r3, #40	; 0x28
 80185a6:	6839      	ldr	r1, [r7, #0]
 80185a8:	4618      	mov	r0, r3
 80185aa:	f001 ff85 	bl	801a4b8 <_ZN14MockNamedValue8setValueEm>
    return *this;
 80185ae:	687b      	ldr	r3, [r7, #4]
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3708      	adds	r7, #8
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}
 80185b8:	080226e8 	.word	0x080226e8

080185bc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 80185bc:	b5b0      	push	{r4, r5, r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af02      	add	r7, sp, #8
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	1d3b      	adds	r3, r7, #4
 80185c6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 80185ca:	f7f8 fd57 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80185ce:	4604      	mov	r4, r0
 80185d0:	6823      	ldr	r3, [r4, #0]
 80185d2:	3368      	adds	r3, #104	; 0x68
 80185d4:	681d      	ldr	r5, [r3, #0]
 80185d6:	f7f8 fd61 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80185da:	4603      	mov	r3, r0
 80185dc:	9300      	str	r3, [sp, #0]
 80185de:	f240 2319 	movw	r3, #537	; 0x219
 80185e2:	4a04      	ldr	r2, [pc, #16]	; (80185f4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 80185e4:	4904      	ldr	r1, [pc, #16]	; (80185f8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 80185e6:	4620      	mov	r0, r4
 80185e8:	47a8      	blx	r5
    return *this;
 80185ea:	68fb      	ldr	r3, [r7, #12]
}
 80185ec:	4618      	mov	r0, r3
 80185ee:	3710      	adds	r7, #16
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bdb0      	pop	{r4, r5, r7, pc}
 80185f4:	08022578 	.word	0x08022578
 80185f8:	08022594 	.word	0x08022594

080185fc <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 80185fc:	b5b0      	push	{r4, r5, r7, lr}
 80185fe:	b086      	sub	sp, #24
 8018600:	af02      	add	r7, sp, #8
 8018602:	60f8      	str	r0, [r7, #12]
 8018604:	1d3b      	adds	r3, r7, #4
 8018606:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801860a:	f7f8 fd37 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801860e:	4604      	mov	r4, r0
 8018610:	6823      	ldr	r3, [r4, #0]
 8018612:	3368      	adds	r3, #104	; 0x68
 8018614:	681d      	ldr	r5, [r3, #0]
 8018616:	f7f8 fd41 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801861a:	4603      	mov	r3, r0
 801861c:	9300      	str	r3, [sp, #0]
 801861e:	f240 231f 	movw	r3, #543	; 0x21f
 8018622:	4a04      	ldr	r2, [pc, #16]	; (8018634 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 8018624:	4904      	ldr	r1, [pc, #16]	; (8018638 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 8018626:	4620      	mov	r0, r4
 8018628:	47a8      	blx	r5
    return *this;
 801862a:	68fb      	ldr	r3, [r7, #12]
}
 801862c:	4618      	mov	r0, r3
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bdb0      	pop	{r4, r5, r7, pc}
 8018634:	08022578 	.word	0x08022578
 8018638:	080225b4 	.word	0x080225b4

0801863c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b082      	sub	sp, #8
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	3328      	adds	r3, #40	; 0x28
 801864a:	4907      	ldr	r1, [pc, #28]	; (8018668 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801864c:	4618      	mov	r0, r3
 801864e:	f002 f8fb 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	3328      	adds	r3, #40	; 0x28
 8018656:	6839      	ldr	r1, [r7, #0]
 8018658:	4618      	mov	r0, r3
 801865a:	f002 f837 	bl	801a6cc <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801865e:	687b      	ldr	r3, [r7, #4]
}
 8018660:	4618      	mov	r0, r3
 8018662:	3708      	adds	r7, #8
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}
 8018668:	080226e8 	.word	0x080226e8

0801866c <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b084      	sub	sp, #16
 8018670:	af00      	add	r7, sp, #0
 8018672:	60f8      	str	r0, [r7, #12]
 8018674:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	3328      	adds	r3, #40	; 0x28
 801867c:	4907      	ldr	r1, [pc, #28]	; (801869c <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801867e:	4618      	mov	r0, r3
 8018680:	f002 f8e2 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	3328      	adds	r3, #40	; 0x28
 8018688:	ed97 0b00 	vldr	d0, [r7]
 801868c:	4618      	mov	r0, r3
 801868e:	f001 ff73 	bl	801a578 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8018692:	68fb      	ldr	r3, [r7, #12]
}
 8018694:	4618      	mov	r0, r3
 8018696:	3710      	adds	r7, #16
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}
 801869c:	080226e8 	.word	0x080226e8

080186a0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b082      	sub	sp, #8
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	3328      	adds	r3, #40	; 0x28
 80186ae:	4907      	ldr	r1, [pc, #28]	; (80186cc <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 80186b0:	4618      	mov	r0, r3
 80186b2:	f002 f8c9 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	3328      	adds	r3, #40	; 0x28
 80186ba:	6839      	ldr	r1, [r7, #0]
 80186bc:	4618      	mov	r0, r3
 80186be:	f001 ff9f 	bl	801a600 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 80186c2:	687b      	ldr	r3, [r7, #4]
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3708      	adds	r7, #8
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	080226e8 	.word	0x080226e8

080186d0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
 80186d8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	3328      	adds	r3, #40	; 0x28
 80186de:	4907      	ldr	r1, [pc, #28]	; (80186fc <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 80186e0:	4618      	mov	r0, r3
 80186e2:	f002 f8b1 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	3328      	adds	r3, #40	; 0x28
 80186ea:	6839      	ldr	r1, [r7, #0]
 80186ec:	4618      	mov	r0, r3
 80186ee:	f001 ffa9 	bl	801a644 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 80186f2:	687b      	ldr	r3, [r7, #4]
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3708      	adds	r7, #8
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	080226e8 	.word	0x080226e8

08018700 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b082      	sub	sp, #8
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	3328      	adds	r3, #40	; 0x28
 801870e:	4907      	ldr	r1, [pc, #28]	; (801872c <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8018710:	4618      	mov	r0, r3
 8018712:	f002 f899 	bl	801a848 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	3328      	adds	r3, #40	; 0x28
 801871a:	6839      	ldr	r1, [r7, #0]
 801871c:	4618      	mov	r0, r3
 801871e:	f001 ffb3 	bl	801a688 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 8018722:	687b      	ldr	r3, [r7, #4]
}
 8018724:	4618      	mov	r0, r3
 8018726:	3708      	adds	r7, #8
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}
 801872c:	080226e8 	.word	0x080226e8

08018730 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8018730:	b480      	push	{r7}
 8018732:	b083      	sub	sp, #12
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2201      	movs	r2, #1
 801873e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2200      	movs	r2, #0
 8018746:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8018750:	687b      	ldr	r3, [r7, #4]
}
 8018752:	4618      	mov	r0, r3
 8018754:	370c      	adds	r7, #12
 8018756:	46bd      	mov	sp, r7
 8018758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875c:	4770      	bx	lr

0801875e <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801875e:	b580      	push	{r7, lr}
 8018760:	b082      	sub	sp, #8
 8018762:	af00      	add	r7, sp, #0
 8018764:	6078      	str	r0, [r7, #4]
 8018766:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	3328      	adds	r3, #40	; 0x28
 801876c:	4619      	mov	r1, r3
 801876e:	6878      	ldr	r0, [r7, #4]
 8018770:	f7ef f946 	bl	8007a00 <_ZN14MockNamedValueC1ERKS_>
}
 8018774:	6878      	ldr	r0, [r7, #4]
 8018776:	3708      	adds	r7, #8
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}

0801877c <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801877c:	b480      	push	{r7}
 801877e:	b085      	sub	sp, #20
 8018780:	af00      	add	r7, sp, #0
 8018782:	60f8      	str	r0, [r7, #12]
 8018784:	60b9      	str	r1, [r7, #8]
 8018786:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	68ba      	ldr	r2, [r7, #8]
 801878c:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	687a      	ldr	r2, [r7, #4]
 8018792:	615a      	str	r2, [r3, #20]
    return *this;
 8018794:	68fb      	ldr	r3, [r7, #12]
}
 8018796:	4618      	mov	r0, r3
 8018798:	3714      	adds	r7, #20
 801879a:	46bd      	mov	sp, r7
 801879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a0:	4770      	bx	lr

080187a2 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 80187a2:	b480      	push	{r7}
 80187a4:	b083      	sub	sp, #12
 80187a6:	af00      	add	r7, sp, #0
 80187a8:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	7e1b      	ldrb	r3, [r3, #24]
}
 80187ae:	4618      	mov	r0, r3
 80187b0:	370c      	adds	r7, #12
 80187b2:	46bd      	mov	sp, r7
 80187b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b8:	4770      	bx	lr

080187ba <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 80187ba:	b480      	push	{r7}
 80187bc:	b083      	sub	sp, #12
 80187be:	af00      	add	r7, sp, #0
 80187c0:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	370c      	adds	r7, #12
 80187ca:	46bd      	mov	sp, r7
 80187cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d0:	4770      	bx	lr
	...

080187d4 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b082      	sub	sp, #8
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	4618      	mov	r0, r3
 80187e0:	f7fe fcce 	bl	8017180 <_ZN16MockExpectedCallC1Ev>
 80187e4:	4a03      	ldr	r2, [pc, #12]	; (80187f4 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	601a      	str	r2, [r3, #0]
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	4618      	mov	r0, r3
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	080246a8 	.word	0x080246a8

080187f8 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 80187f8:	b580      	push	{r7, lr}
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	4801      	ldr	r0, [pc, #4]	; (8018804 <__tcf_0+0xc>)
 80187fe:	f000 f831 	bl	8018864 <_ZN23MockIgnoredExpectedCallD1Ev>
 8018802:	bd80      	pop	{r7, pc}
 8018804:	20000c68 	.word	0x20000c68

08018808 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8018808:	b580      	push	{r7, lr}
 801880a:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801880c:	4b12      	ldr	r3, [pc, #72]	; (8018858 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	f3bf 8f5b 	dmb	ish
 8018814:	b2db      	uxtb	r3, r3
 8018816:	f003 0301 	and.w	r3, r3, #1
 801881a:	2b00      	cmp	r3, #0
 801881c:	bf0c      	ite	eq
 801881e:	2301      	moveq	r3, #1
 8018820:	2300      	movne	r3, #0
 8018822:	b2db      	uxtb	r3, r3
 8018824:	2b00      	cmp	r3, #0
 8018826:	d013      	beq.n	8018850 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8018828:	480b      	ldr	r0, [pc, #44]	; (8018858 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801882a:	f003 ff05 	bl	801c638 <__cxa_guard_acquire>
 801882e:	4603      	mov	r3, r0
 8018830:	2b00      	cmp	r3, #0
 8018832:	bf14      	ite	ne
 8018834:	2301      	movne	r3, #1
 8018836:	2300      	moveq	r3, #0
 8018838:	b2db      	uxtb	r3, r3
 801883a:	2b00      	cmp	r3, #0
 801883c:	d008      	beq.n	8018850 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801883e:	4807      	ldr	r0, [pc, #28]	; (801885c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8018840:	f7ff ffc8 	bl	80187d4 <_ZN23MockIgnoredExpectedCallC1Ev>
 8018844:	4804      	ldr	r0, [pc, #16]	; (8018858 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8018846:	f003 ff03 	bl	801c650 <__cxa_guard_release>
 801884a:	4805      	ldr	r0, [pc, #20]	; (8018860 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801884c:	f003 ff27 	bl	801c69e <atexit>
    return call;
 8018850:	4b02      	ldr	r3, [pc, #8]	; (801885c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 8018852:	4618      	mov	r0, r3
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	20000c6c 	.word	0x20000c6c
 801885c:	20000c68 	.word	0x20000c68
 8018860:	080187f9 	.word	0x080187f9

08018864 <_ZN23MockIgnoredExpectedCallD1Ev>:
 8018864:	b580      	push	{r7, lr}
 8018866:	b082      	sub	sp, #8
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	4a05      	ldr	r2, [pc, #20]	; (8018884 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	601a      	str	r2, [r3, #0]
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	4618      	mov	r0, r3
 8018876:	f7fe fc93 	bl	80171a0 <_ZN16MockExpectedCallD1Ev>
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	4618      	mov	r0, r3
 801887e:	3708      	adds	r7, #8
 8018880:	46bd      	mov	sp, r7
 8018882:	bd80      	pop	{r7, pc}
 8018884:	080246a8 	.word	0x080246a8

08018888 <_ZN23MockIgnoredExpectedCallD0Ev>:
 8018888:	b580      	push	{r7, lr}
 801888a:	b082      	sub	sp, #8
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
 8018890:	6878      	ldr	r0, [r7, #4]
 8018892:	f7ff ffe7 	bl	8018864 <_ZN23MockIgnoredExpectedCallD1Ev>
 8018896:	2104      	movs	r1, #4
 8018898:	6878      	ldr	r0, [r7, #4]
 801889a:	f7ee fc5d 	bl	8007158 <_ZdlPvj>
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	4618      	mov	r0, r3
 80188a2:	3708      	adds	r7, #8
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	4a05      	ldr	r2, [pc, #20]	; (80188c8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	601a      	str	r2, [r3, #0]
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	4618      	mov	r0, r3
 80188ba:	f001 fd4b 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	4618      	mov	r0, r3
 80188c2:	3708      	adds	r7, #8
 80188c4:	46bd      	mov	sp, r7
 80188c6:	bd80      	pop	{r7, pc}
 80188c8:	08024848 	.word	0x08024848

080188cc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b082      	sub	sp, #8
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	6878      	ldr	r0, [r7, #4]
 80188d6:	f7ff ffe7 	bl	80188a8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 80188da:	2138      	movs	r1, #56	; 0x38
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f7ee fc3b 	bl	8007158 <_ZdlPvj>
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	4618      	mov	r0, r3
 80188e6:	3708      	adds	r7, #8
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 80188ec:	b480      	push	{r7}
 80188ee:	b083      	sub	sp, #12
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
 80188f4:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	683a      	ldr	r2, [r7, #0]
 80188fa:	601a      	str	r2, [r3, #0]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2200      	movs	r2, #0
 8018900:	605a      	str	r2, [r3, #4]
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	4618      	mov	r0, r3
 8018906:	370c      	adds	r7, #12
 8018908:	46bd      	mov	sp, r7
 801890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890e:	4770      	bx	lr

08018910 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8018910:	b480      	push	{r7}
 8018912:	b083      	sub	sp, #12
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	4a06      	ldr	r2, [pc, #24]	; (8018934 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	601a      	str	r2, [r3, #0]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2200      	movs	r2, #0
 8018922:	605a      	str	r2, [r3, #4]
{
}
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	4618      	mov	r0, r3
 8018928:	370c      	adds	r7, #12
 801892a:	46bd      	mov	sp, r7
 801892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018930:	4770      	bx	lr
 8018932:	bf00      	nop
 8018934:	0802499c 	.word	0x0802499c

08018938 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
 8018940:	4a0d      	ldr	r2, [pc, #52]	; (8018978 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	685b      	ldr	r3, [r3, #4]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d00f      	beq.n	801896e <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	685b      	ldr	r3, [r3, #4]
 8018952:	685b      	ldr	r3, [r3, #4]
 8018954:	60fb      	str	r3, [r7, #12]
        delete head_;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	685b      	ldr	r3, [r3, #4]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d003      	beq.n	8018966 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801895e:	2108      	movs	r1, #8
 8018960:	4618      	mov	r0, r3
 8018962:	f7ee fbf9 	bl	8007158 <_ZdlPvj>
        head_ = next;
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	68fa      	ldr	r2, [r7, #12]
 801896a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801896c:	e7eb      	b.n	8018946 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	4618      	mov	r0, r3
 8018972:	3710      	adds	r7, #16
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}
 8018978:	0802499c 	.word	0x0802499c

0801897c <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
}
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f7ff ffd7 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
 801898a:	2108      	movs	r1, #8
 801898c:	6878      	ldr	r0, [r7, #4]
 801898e:	f7ee fbe3 	bl	8007158 <_ZdlPvj>
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	4618      	mov	r0, r3
 8018996:	3708      	adds	r7, #8
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}

0801899c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b084      	sub	sp, #16
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	60fb      	str	r3, [r7, #12]
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d011      	beq.n	80189d4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	681a      	ldr	r2, [r3, #0]
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	33d4      	adds	r3, #212	; 0xd4
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	4610      	mov	r0, r2
 80189c0:	4798      	blx	r3
 80189c2:	4603      	mov	r3, r0
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d001      	beq.n	80189cc <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 80189c8:	2301      	movs	r3, #1
 80189ca:	e004      	b.n	80189d6 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	685b      	ldr	r3, [r3, #4]
 80189d0:	60fb      	str	r3, [r7, #12]
 80189d2:	e7ea      	b.n	80189aa <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 80189d4:	2300      	movs	r3, #0
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3710      	adds	r7, #16
 80189da:	46bd      	mov	sp, r7
 80189dc:	bd80      	pop	{r7, pc}

080189de <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 80189de:	b480      	push	{r7}
 80189e0:	b085      	sub	sp, #20
 80189e2:	af00      	add	r7, sp, #0
 80189e4:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 80189e6:	2300      	movs	r3, #0
 80189e8:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	685b      	ldr	r3, [r3, #4]
 80189ee:	60bb      	str	r3, [r7, #8]
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d006      	beq.n	8018a04 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	3301      	adds	r3, #1
 80189fa:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	60bb      	str	r3, [r7, #8]
 8018a02:	e7f5      	b.n	80189f0 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 8018a04:	68fb      	ldr	r3, [r7, #12]
}
 8018a06:	4618      	mov	r0, r3
 8018a08:	3714      	adds	r7, #20
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a10:	4770      	bx	lr

08018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8018a12:	b480      	push	{r7}
 8018a14:	b083      	sub	sp, #12
 8018a16:	af00      	add	r7, sp, #0
 8018a18:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	685b      	ldr	r3, [r3, #4]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	bf0c      	ite	eq
 8018a22:	2301      	moveq	r3, #1
 8018a24:	2300      	movne	r3, #0
 8018a26:	b2db      	uxtb	r3, r3
}
 8018a28:	4618      	mov	r0, r3
 8018a2a:	370c      	adds	r7, #12
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a32:	4770      	bx	lr

08018a34 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b084      	sub	sp, #16
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
 8018a3c:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8018a3e:	2300      	movs	r3, #0
 8018a40:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	685b      	ldr	r3, [r3, #4]
 8018a46:	60bb      	str	r3, [r7, #8]
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d01d      	beq.n	8018a8a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8018a4e:	68bb      	ldr	r3, [r7, #8]
 8018a50:	681a      	ldr	r2, [r3, #0]
 8018a52:	68bb      	ldr	r3, [r7, #8]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	33b8      	adds	r3, #184	; 0xb8
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	6839      	ldr	r1, [r7, #0]
 8018a5e:	4610      	mov	r0, r2
 8018a60:	4798      	blx	r3
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d00c      	beq.n	8018a82 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 8018a68:	68bb      	ldr	r3, [r7, #8]
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	68bb      	ldr	r3, [r7, #8]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	33f8      	adds	r3, #248	; 0xf8
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	4610      	mov	r0, r2
 8018a78:	4798      	blx	r3
 8018a7a:	4602      	mov	r2, r0
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	4413      	add	r3, r2
 8018a80:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	685b      	ldr	r3, [r3, #4]
 8018a86:	60bb      	str	r3, [r7, #8]
 8018a88:	e7de      	b.n	8018a48 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
}
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	3710      	adds	r7, #16
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b084      	sub	sp, #16
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	685b      	ldr	r3, [r3, #4]
 8018aa4:	60bb      	str	r3, [r7, #8]
 8018aa6:	68bb      	ldr	r3, [r7, #8]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d015      	beq.n	8018ad8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	681a      	ldr	r2, [r3, #0]
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	33c0      	adds	r3, #192	; 0xc0
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	4610      	mov	r0, r2
 8018abc:	4798      	blx	r3
 8018abe:	4603      	mov	r3, r0
 8018ac0:	f083 0301 	eor.w	r3, r3, #1
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d002      	beq.n	8018ad0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	3301      	adds	r3, #1
 8018ace:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	685b      	ldr	r3, [r3, #4]
 8018ad4:	60bb      	str	r3, [r7, #8]
 8018ad6:	e7e6      	b.n	8018aa6 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 8018ad8:	68fb      	ldr	r3, [r7, #12]
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	3710      	adds	r7, #16
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}

08018ae2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 8018ae2:	b580      	push	{r7, lr}
 8018ae4:	b084      	sub	sp, #16
 8018ae6:	af00      	add	r7, sp, #0
 8018ae8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	685b      	ldr	r3, [r3, #4]
 8018aee:	60fb      	str	r3, [r7, #12]
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d011      	beq.n	8018b1a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	681a      	ldr	r2, [r3, #0]
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	33c8      	adds	r3, #200	; 0xc8
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	4610      	mov	r0, r2
 8018b06:	4798      	blx	r3
 8018b08:	4603      	mov	r3, r0
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d001      	beq.n	8018b12 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8018b0e:	2301      	movs	r3, #1
 8018b10:	e004      	b.n	8018b1c <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	685b      	ldr	r3, [r3, #4]
 8018b16:	60fb      	str	r3, [r7, #12]
 8018b18:	e7ea      	b.n	8018af0 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 8018b1a:	2300      	movs	r3, #0
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	3710      	adds	r7, #16
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}

08018b24 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b084      	sub	sp, #16
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	60fb      	str	r3, [r7, #12]
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d014      	beq.n	8018b62 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	681a      	ldr	r2, [r3, #0]
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	33c0      	adds	r3, #192	; 0xc0
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	4610      	mov	r0, r2
 8018b48:	4798      	blx	r3
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	f083 0301 	eor.w	r3, r3, #1
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d001      	beq.n	8018b5a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 8018b56:	2301      	movs	r3, #1
 8018b58:	e004      	b.n	8018b64 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	60fb      	str	r3, [r7, #12]
 8018b60:	e7e7      	b.n	8018b32 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 8018b62:	2300      	movs	r3, #0
}
 8018b64:	4618      	mov	r0, r3
 8018b66:	3710      	adds	r7, #16
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd80      	pop	{r7, pc}

08018b6c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b084      	sub	sp, #16
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
 8018b74:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	685b      	ldr	r3, [r3, #4]
 8018b7a:	60fb      	str	r3, [r7, #12]
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d012      	beq.n	8018ba8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	681a      	ldr	r2, [r3, #0]
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	33b8      	adds	r3, #184	; 0xb8
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	6839      	ldr	r1, [r7, #0]
 8018b92:	4610      	mov	r0, r2
 8018b94:	4798      	blx	r3
 8018b96:	4603      	mov	r3, r0
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d001      	beq.n	8018ba0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	e004      	b.n	8018baa <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	685b      	ldr	r3, [r3, #4]
 8018ba4:	60fb      	str	r3, [r7, #12]
 8018ba6:	e7e9      	b.n	8018b7c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 8018ba8:	2300      	movs	r3, #0
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	3710      	adds	r7, #16
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}
	...

08018bb4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 8018bb4:	b590      	push	{r4, r7, lr}
 8018bb6:	b085      	sub	sp, #20
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
 8018bbc:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 8018bbe:	2273      	movs	r2, #115	; 0x73
 8018bc0:	4911      	ldr	r1, [pc, #68]	; (8018c08 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 8018bc2:	2008      	movs	r0, #8
 8018bc4:	f7ee fab4 	bl	8007130 <_ZnwjPKci>
 8018bc8:	4604      	mov	r4, r0
 8018bca:	6839      	ldr	r1, [r7, #0]
 8018bcc:	4620      	mov	r0, r4
 8018bce:	f7ff fe8d 	bl	80188ec <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 8018bd2:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	685b      	ldr	r3, [r3, #4]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d103      	bne.n	8018be4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	68ba      	ldr	r2, [r7, #8]
 8018be0:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 8018be2:	e00d      	b.n	8018c00 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	685b      	ldr	r3, [r3, #4]
 8018be8:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	685b      	ldr	r3, [r3, #4]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d003      	beq.n	8018bfa <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	685b      	ldr	r3, [r3, #4]
 8018bf6:	60fb      	str	r3, [r7, #12]
 8018bf8:	e7f7      	b.n	8018bea <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	68ba      	ldr	r2, [r7, #8]
 8018bfe:	605a      	str	r2, [r3, #4]
}
 8018c00:	bf00      	nop
 8018c02:	3714      	adds	r7, #20
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd90      	pop	{r4, r7, pc}
 8018c08:	080226f4 	.word	0x080226f4

08018c0c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b084      	sub	sp, #16
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	60fb      	str	r3, [r7, #12]
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d018      	beq.n	8018c54 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	681a      	ldr	r2, [r3, #0]
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	33c4      	adds	r3, #196	; 0xc4
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	4610      	mov	r0, r2
 8018c32:	4798      	blx	r3
 8018c34:	4603      	mov	r3, r0
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d008      	beq.n	8018c4c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	3330      	adds	r3, #48	; 0x30
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	68fa      	ldr	r2, [r7, #12]
 8018c44:	6812      	ldr	r2, [r2, #0]
 8018c46:	4611      	mov	r1, r2
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	685b      	ldr	r3, [r3, #4]
 8018c50:	60fb      	str	r3, [r7, #12]
 8018c52:	e7e3      	b.n	8018c1c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 8018c54:	bf00      	nop
 8018c56:	3710      	adds	r7, #16
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b086      	sub	sp, #24
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	617b      	str	r3, [r7, #20]
 8018c6e:	697b      	ldr	r3, [r7, #20]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d019      	beq.n	8018ca8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	681a      	ldr	r2, [r3, #0]
 8018c78:	697b      	ldr	r3, [r7, #20]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	33b8      	adds	r3, #184	; 0xb8
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	68b9      	ldr	r1, [r7, #8]
 8018c84:	4610      	mov	r0, r2
 8018c86:	4798      	blx	r3
 8018c88:	4603      	mov	r3, r0
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d008      	beq.n	8018ca0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	3330      	adds	r3, #48	; 0x30
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	697a      	ldr	r2, [r7, #20]
 8018c98:	6812      	ldr	r2, [r2, #0]
 8018c9a:	4611      	mov	r1, r2
 8018c9c:	68f8      	ldr	r0, [r7, #12]
 8018c9e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	617b      	str	r3, [r7, #20]
 8018ca6:	e7e2      	b.n	8018c6e <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 8018ca8:	bf00      	nop
 8018caa:	3718      	adds	r7, #24
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b084      	sub	sp, #16
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	60fb      	str	r3, [r7, #12]
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d00c      	beq.n	8018ce0 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	3330      	adds	r3, #48	; 0x30
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	68fa      	ldr	r2, [r7, #12]
 8018cd0:	6812      	ldr	r2, [r2, #0]
 8018cd2:	4611      	mov	r1, r2
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	685b      	ldr	r3, [r3, #4]
 8018cdc:	60fb      	str	r3, [r7, #12]
 8018cde:	e7ef      	b.n	8018cc0 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 8018ce0:	bf00      	nop
 8018ce2:	3710      	adds	r7, #16
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	60fb      	str	r3, [r7, #12]
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d016      	beq.n	8018d2c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	681a      	ldr	r2, [r3, #0]
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	33b8      	adds	r3, #184	; 0xb8
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	6839      	ldr	r1, [r7, #0]
 8018d0e:	4610      	mov	r0, r2
 8018d10:	4798      	blx	r3
 8018d12:	4603      	mov	r3, r0
 8018d14:	f083 0301 	eor.w	r3, r3, #1
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d002      	beq.n	8018d24 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	2200      	movs	r2, #0
 8018d22:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	60fb      	str	r3, [r7, #12]
 8018d2a:	e7e5      	b.n	8018cf8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	3388      	adds	r3, #136	; 0x88
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	4798      	blx	r3
}
 8018d38:	bf00      	nop
 8018d3a:	3710      	adds	r7, #16
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}

08018d40 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	685b      	ldr	r3, [r3, #4]
 8018d4c:	60fb      	str	r3, [r7, #12]
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d015      	beq.n	8018d80 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	681a      	ldr	r2, [r3, #0]
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	33d4      	adds	r3, #212	; 0xd4
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	4610      	mov	r0, r2
 8018d64:	4798      	blx	r3
 8018d66:	4603      	mov	r3, r0
 8018d68:	f083 0301 	eor.w	r3, r3, #1
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d002      	beq.n	8018d78 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	2200      	movs	r2, #0
 8018d76:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	685b      	ldr	r3, [r3, #4]
 8018d7c:	60fb      	str	r3, [r7, #12]
 8018d7e:	e7e6      	b.n	8018d4e <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	3388      	adds	r3, #136	; 0x88
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	4798      	blx	r3
}
 8018d8c:	bf00      	nop
 8018d8e:	3710      	adds	r7, #16
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bd80      	pop	{r7, pc}

08018d94 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b084      	sub	sp, #16
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	685b      	ldr	r3, [r3, #4]
 8018da0:	60fb      	str	r3, [r7, #12]
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d01b      	beq.n	8018de0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	681a      	ldr	r2, [r3, #0]
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	33c8      	adds	r3, #200	; 0xc8
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	4610      	mov	r0, r2
 8018db8:	4798      	blx	r3
 8018dba:	4603      	mov	r3, r0
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d00b      	beq.n	8018dd8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	33ec      	adds	r3, #236	; 0xec
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	4610      	mov	r0, r2
 8018dd0:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	685b      	ldr	r3, [r3, #4]
 8018ddc:	60fb      	str	r3, [r7, #12]
 8018dde:	e7e0      	b.n	8018da2 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	3388      	adds	r3, #136	; 0x88
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	6878      	ldr	r0, [r7, #4]
 8018dea:	4798      	blx	r3
}
 8018dec:	bf00      	nop
 8018dee:	3710      	adds	r7, #16
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}

08018df4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b084      	sub	sp, #16
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
 8018dfc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	685b      	ldr	r3, [r3, #4]
 8018e02:	60fb      	str	r3, [r7, #12]
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d016      	beq.n	8018e38 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	681a      	ldr	r2, [r3, #0]
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	33a8      	adds	r3, #168	; 0xa8
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	6839      	ldr	r1, [r7, #0]
 8018e1a:	4610      	mov	r0, r2
 8018e1c:	4798      	blx	r3
 8018e1e:	4603      	mov	r3, r0
 8018e20:	f083 0301 	eor.w	r3, r3, #1
 8018e24:	b2db      	uxtb	r3, r3
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d002      	beq.n	8018e30 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	60fb      	str	r3, [r7, #12]
 8018e36:	e7e5      	b.n	8018e04 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	3388      	adds	r3, #136	; 0x88
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	6878      	ldr	r0, [r7, #4]
 8018e42:	4798      	blx	r3
}
 8018e44:	bf00      	nop
 8018e46:	3710      	adds	r7, #16
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}

08018e4c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	685b      	ldr	r3, [r3, #4]
 8018e5a:	60fb      	str	r3, [r7, #12]
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d016      	beq.n	8018e90 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	681a      	ldr	r2, [r3, #0]
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	33b0      	adds	r3, #176	; 0xb0
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	6839      	ldr	r1, [r7, #0]
 8018e72:	4610      	mov	r0, r2
 8018e74:	4798      	blx	r3
 8018e76:	4603      	mov	r3, r0
 8018e78:	f083 0301 	eor.w	r3, r3, #1
 8018e7c:	b2db      	uxtb	r3, r3
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d002      	beq.n	8018e88 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	2200      	movs	r2, #0
 8018e86:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	685b      	ldr	r3, [r3, #4]
 8018e8c:	60fb      	str	r3, [r7, #12]
 8018e8e:	e7e5      	b.n	8018e5c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	3388      	adds	r3, #136	; 0x88
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	6878      	ldr	r0, [r7, #4]
 8018e9a:	4798      	blx	r3
}
 8018e9c:	bf00      	nop
 8018e9e:	3710      	adds	r7, #16
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}

08018ea4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	60fb      	str	r3, [r7, #12]
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d016      	beq.n	8018ee8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	33ac      	adds	r3, #172	; 0xac
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	6839      	ldr	r1, [r7, #0]
 8018eca:	4610      	mov	r0, r2
 8018ecc:	4798      	blx	r3
 8018ece:	4603      	mov	r3, r0
 8018ed0:	f083 0301 	eor.w	r3, r3, #1
 8018ed4:	b2db      	uxtb	r3, r3
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d002      	beq.n	8018ee0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	2200      	movs	r2, #0
 8018ede:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	60fb      	str	r3, [r7, #12]
 8018ee6:	e7e5      	b.n	8018eb4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	3388      	adds	r3, #136	; 0x88
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	6878      	ldr	r0, [r7, #4]
 8018ef2:	4798      	blx	r3
}
 8018ef4:	bf00      	nop
 8018ef6:	3710      	adds	r7, #16
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	bd80      	pop	{r7, pc}

08018efc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b084      	sub	sp, #16
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
 8018f04:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	685b      	ldr	r3, [r3, #4]
 8018f0a:	60fb      	str	r3, [r7, #12]
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d016      	beq.n	8018f40 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	681a      	ldr	r2, [r3, #0]
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	33b4      	adds	r3, #180	; 0xb4
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	6839      	ldr	r1, [r7, #0]
 8018f22:	4610      	mov	r0, r2
 8018f24:	4798      	blx	r3
 8018f26:	4603      	mov	r3, r0
 8018f28:	f083 0301 	eor.w	r3, r3, #1
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d002      	beq.n	8018f38 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	2200      	movs	r2, #0
 8018f36:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	685b      	ldr	r3, [r3, #4]
 8018f3c:	60fb      	str	r3, [r7, #12]
 8018f3e:	e7e5      	b.n	8018f0c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	3388      	adds	r3, #136	; 0x88
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	4798      	blx	r3
}
 8018f4c:	bf00      	nop
 8018f4e:	3710      	adds	r7, #16
 8018f50:	46bd      	mov	sp, r7
 8018f52:	bd80      	pop	{r7, pc}

08018f54 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b084      	sub	sp, #16
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	685b      	ldr	r3, [r3, #4]
 8018f62:	60fb      	str	r3, [r7, #12]
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d016      	beq.n	8018f98 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	681a      	ldr	r2, [r3, #0]
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	33bc      	adds	r3, #188	; 0xbc
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	6839      	ldr	r1, [r7, #0]
 8018f7a:	4610      	mov	r0, r2
 8018f7c:	4798      	blx	r3
 8018f7e:	4603      	mov	r3, r0
 8018f80:	f083 0301 	eor.w	r3, r3, #1
 8018f84:	b2db      	uxtb	r3, r3
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d002      	beq.n	8018f90 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	685b      	ldr	r3, [r3, #4]
 8018f94:	60fb      	str	r3, [r7, #12]
 8018f96:	e7e5      	b.n	8018f64 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	3388      	adds	r3, #136	; 0x88
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	6878      	ldr	r0, [r7, #4]
 8018fa2:	4798      	blx	r3
}
 8018fa4:	bf00      	nop
 8018fa6:	3710      	adds	r7, #16
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}

08018fac <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b084      	sub	sp, #16
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	60fb      	str	r3, [r7, #12]
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d01d      	beq.n	8018ffc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	681a      	ldr	r2, [r3, #0]
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	33c8      	adds	r3, #200	; 0xc8
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	4610      	mov	r0, r2
 8018fd0:	4798      	blx	r3
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00d      	beq.n	8018ff4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	3388      	adds	r3, #136	; 0x88
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	6878      	ldr	r0, [r7, #4]
 8018fee:	4798      	blx	r3
            return matchingCall;
 8018ff0:	68bb      	ldr	r3, [r7, #8]
 8018ff2:	e004      	b.n	8018ffe <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	685b      	ldr	r3, [r3, #4]
 8018ff8:	60fb      	str	r3, [r7, #12]
 8018ffa:	e7de      	b.n	8018fba <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8018ffc:	2300      	movs	r3, #0
}
 8018ffe:	4618      	mov	r0, r3
 8019000:	3710      	adds	r7, #16
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}

08019006 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 8019006:	b580      	push	{r7, lr}
 8019008:	b084      	sub	sp, #16
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	685b      	ldr	r3, [r3, #4]
 8019012:	60fb      	str	r3, [r7, #12]
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d012      	beq.n	8019040 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	681a      	ldr	r2, [r3, #0]
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	33cc      	adds	r3, #204	; 0xcc
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	4610      	mov	r0, r2
 801902a:	4798      	blx	r3
 801902c:	4603      	mov	r3, r0
 801902e:	2b00      	cmp	r3, #0
 8019030:	d002      	beq.n	8019038 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	e004      	b.n	8019042 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	60fb      	str	r3, [r7, #12]
 801903e:	e7e9      	b.n	8019014 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019040:	2300      	movs	r3, #0
}
 8019042:	4618      	mov	r0, r3
 8019044:	3710      	adds	r7, #16
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}

0801904a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801904a:	b580      	push	{r7, lr}
 801904c:	b084      	sub	sp, #16
 801904e:	af00      	add	r7, sp, #0
 8019050:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	685b      	ldr	r3, [r3, #4]
 8019056:	60fb      	str	r3, [r7, #12]
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d01d      	beq.n	801909a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	681a      	ldr	r2, [r3, #0]
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	33cc      	adds	r3, #204	; 0xcc
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	4610      	mov	r0, r2
 801906e:	4798      	blx	r3
 8019070:	4603      	mov	r3, r0
 8019072:	2b00      	cmp	r3, #0
 8019074:	d00d      	beq.n	8019092 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	2200      	movs	r2, #0
 8019080:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	3388      	adds	r3, #136	; 0x88
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	6878      	ldr	r0, [r7, #4]
 801908c:	4798      	blx	r3
            return matchingCall;
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	e004      	b.n	801909c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	60fb      	str	r3, [r7, #12]
 8019098:	e7de      	b.n	8019058 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801909a:	2300      	movs	r3, #0
}
 801909c:	4618      	mov	r0, r3
 801909e:	3710      	adds	r7, #16
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b086      	sub	sp, #24
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	685b      	ldr	r3, [r3, #4]
 80190b0:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 80190b2:	2300      	movs	r3, #0
 80190b4:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 80190b6:	2300      	movs	r3, #0
 80190b8:	60fb      	str	r3, [r7, #12]

    while (current) {
 80190ba:	697b      	ldr	r3, [r7, #20]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d024      	beq.n	801910a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d11a      	bne.n	80190fe <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 80190c8:	697b      	ldr	r3, [r7, #20]
 80190ca:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 80190cc:	693b      	ldr	r3, [r7, #16]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d106      	bne.n	80190e0 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	617b      	str	r3, [r7, #20]
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	697a      	ldr	r2, [r7, #20]
 80190dc:	605a      	str	r2, [r3, #4]
 80190de:	e006      	b.n	80190ee <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	685a      	ldr	r2, [r3, #4]
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	605a      	str	r2, [r3, #4]
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d0e2      	beq.n	80190ba <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 80190f4:	2108      	movs	r1, #8
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7ee f82e 	bl	8007158 <_ZdlPvj>
 80190fc:	e7dd      	b.n	80190ba <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	613b      	str	r3, [r7, #16]
            current = current->next_;
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	685b      	ldr	r3, [r3, #4]
 8019106:	617b      	str	r3, [r7, #20]
    while (current) {
 8019108:	e7d7      	b.n	80190ba <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801910a:	bf00      	nop
 801910c:	3718      	adds	r7, #24
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}

08019112 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 8019112:	b580      	push	{r7, lr}
 8019114:	b084      	sub	sp, #16
 8019116:	af00      	add	r7, sp, #0
 8019118:	6078      	str	r0, [r7, #4]
    while (head_) {
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	685b      	ldr	r3, [r3, #4]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d019      	beq.n	8019156 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	685b      	ldr	r3, [r3, #4]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	685b      	ldr	r3, [r3, #4]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d004      	beq.n	801913e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 8019134:	681a      	ldr	r2, [r3, #0]
 8019136:	3204      	adds	r2, #4
 8019138:	6812      	ldr	r2, [r2, #0]
 801913a:	4618      	mov	r0, r3
 801913c:	4790      	blx	r2
        delete head_;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d003      	beq.n	801914e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 8019146:	2108      	movs	r1, #8
 8019148:	4618      	mov	r0, r3
 801914a:	f7ee f805 	bl	8007158 <_ZdlPvj>
        head_ = next;
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	68fa      	ldr	r2, [r7, #12]
 8019152:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019154:	e7e1      	b.n	801911a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 8019156:	bf00      	nop
 8019158:	3710      	adds	r7, #16
 801915a:	46bd      	mov	sp, r7
 801915c:	bd80      	pop	{r7, pc}

0801915e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801915e:	b580      	push	{r7, lr}
 8019160:	b084      	sub	sp, #16
 8019162:	af00      	add	r7, sp, #0
 8019164:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	60fb      	str	r3, [r7, #12]
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d00c      	beq.n	801918c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	681a      	ldr	r2, [r3, #0]
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	33ec      	adds	r3, #236	; 0xec
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	4610      	mov	r0, r2
 8019182:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	685b      	ldr	r3, [r3, #4]
 8019188:	60fb      	str	r3, [r7, #12]
 801918a:	e7ef      	b.n	801916c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801918c:	bf00      	nop
 801918e:	3710      	adds	r7, #16
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}

08019194 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b084      	sub	sp, #16
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	685b      	ldr	r3, [r3, #4]
 80191a0:	60fb      	str	r3, [r7, #12]
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d00c      	beq.n	80191c2 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	681a      	ldr	r2, [r3, #0]
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	33e8      	adds	r3, #232	; 0xe8
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	4610      	mov	r0, r2
 80191b8:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	60fb      	str	r3, [r7, #12]
 80191c0:	e7ef      	b.n	80191a2 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 80191c2:	bf00      	nop
 80191c4:	3710      	adds	r7, #16
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}

080191ca <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 80191ca:	b580      	push	{r7, lr}
 80191cc:	b084      	sub	sp, #16
 80191ce:	af00      	add	r7, sp, #0
 80191d0:	6078      	str	r0, [r7, #4]
 80191d2:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	685b      	ldr	r3, [r3, #4]
 80191d8:	60fb      	str	r3, [r7, #12]
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d00d      	beq.n	80191fc <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681a      	ldr	r2, [r3, #0]
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	33dc      	adds	r3, #220	; 0xdc
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	6839      	ldr	r1, [r7, #0]
 80191f0:	4610      	mov	r0, r2
 80191f2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	685b      	ldr	r3, [r3, #4]
 80191f8:	60fb      	str	r3, [r7, #12]
 80191fa:	e7ee      	b.n	80191da <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 80191fc:	bf00      	nop
 80191fe:	3710      	adds	r7, #16
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}

08019204 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b084      	sub	sp, #16
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	685b      	ldr	r3, [r3, #4]
 8019212:	60fb      	str	r3, [r7, #12]
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d00d      	beq.n	8019236 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681a      	ldr	r2, [r3, #0]
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	33e0      	adds	r3, #224	; 0xe0
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	6839      	ldr	r1, [r7, #0]
 801922a:	4610      	mov	r0, r2
 801922c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	685b      	ldr	r3, [r3, #4]
 8019232:	60fb      	str	r3, [r7, #12]
 8019234:	e7ee      	b.n	8019214 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 8019236:	bf00      	nop
 8019238:	3710      	adds	r7, #16
 801923a:	46bd      	mov	sp, r7
 801923c:	bd80      	pop	{r7, pc}
	...

08019240 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 8019240:	b590      	push	{r4, r7, lr}
 8019242:	b087      	sub	sp, #28
 8019244:	af00      	add	r7, sp, #0
 8019246:	60f8      	str	r0, [r7, #12]
 8019248:	60b9      	str	r1, [r7, #8]
 801924a:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801924c:	68b9      	ldr	r1, [r7, #8]
 801924e:	68f8      	ldr	r0, [r7, #12]
 8019250:	f7f0 fb85 	bl	800995e <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 8019254:	f107 0310 	add.w	r3, r7, #16
 8019258:	490f      	ldr	r1, [pc, #60]	; (8019298 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801925a:	4618      	mov	r0, r3
 801925c:	f7f0 fb2b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019260:	f107 0310 	add.w	r3, r7, #16
 8019264:	4619      	mov	r1, r3
 8019266:	68f8      	ldr	r0, [r7, #12]
 8019268:	f7f0 fee9 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801926c:	4603      	mov	r3, r0
 801926e:	461c      	mov	r4, r3
 8019270:	f107 0310 	add.w	r3, r7, #16
 8019274:	4618      	mov	r0, r3
 8019276:	f7f0 fed6 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801927a:	2c00      	cmp	r4, #0
 801927c:	d007      	beq.n	801928e <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801927e:	6879      	ldr	r1, [r7, #4]
 8019280:	68f8      	ldr	r0, [r7, #12]
 8019282:	f7f0 ff4d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 8019286:	4905      	ldr	r1, [pc, #20]	; (801929c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	f7f0 ff5b 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801928e:	bf00      	nop
}
 8019290:	68f8      	ldr	r0, [r7, #12]
 8019292:	371c      	adds	r7, #28
 8019294:	46bd      	mov	sp, r7
 8019296:	bd90      	pop	{r4, r7, pc}
 8019298:	08022718 	.word	0x08022718
 801929c:	0802271c 	.word	0x0802271c

080192a0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 80192a0:	b590      	push	{r4, r7, lr}
 80192a2:	b087      	sub	sp, #28
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	60f8      	str	r0, [r7, #12]
 80192a8:	60b9      	str	r1, [r7, #8]
 80192aa:	607a      	str	r2, [r7, #4]
 80192ac:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 80192ae:	68b9      	ldr	r1, [r7, #8]
 80192b0:	68f8      	ldr	r0, [r7, #12]
 80192b2:	f7f0 fb54 	bl	800995e <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 80192b6:	f107 0310 	add.w	r3, r7, #16
 80192ba:	4912      	ldr	r1, [pc, #72]	; (8019304 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 80192bc:	4618      	mov	r0, r3
 80192be:	f7f0 fafa 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80192c2:	f107 0310 	add.w	r3, r7, #16
 80192c6:	4619      	mov	r1, r3
 80192c8:	68f8      	ldr	r0, [r7, #12]
 80192ca:	f7f0 fefd 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 80192ce:	4603      	mov	r3, r0
 80192d0:	461c      	mov	r4, r3
 80192d2:	f107 0310 	add.w	r3, r7, #16
 80192d6:	4618      	mov	r0, r3
 80192d8:	f7f0 fea5 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80192dc:	2c00      	cmp	r4, #0
 80192de:	d003      	beq.n	80192e8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 80192e0:	4909      	ldr	r1, [pc, #36]	; (8019308 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 80192e2:	68f8      	ldr	r0, [r7, #12]
 80192e4:	f7f0 ff2e 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 80192e8:	6879      	ldr	r1, [r7, #4]
 80192ea:	68f8      	ldr	r0, [r7, #12]
 80192ec:	f7f0 ff18 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 80192f0:	6839      	ldr	r1, [r7, #0]
 80192f2:	68f8      	ldr	r0, [r7, #12]
 80192f4:	f7f0 ff14 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    return str;
 80192f8:	bf00      	nop
}
 80192fa:	68f8      	ldr	r0, [r7, #12]
 80192fc:	371c      	adds	r7, #28
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd90      	pop	{r4, r7, pc}
 8019302:	bf00      	nop
 8019304:	08022718 	.word	0x08022718
 8019308:	08022724 	.word	0x08022724

0801930c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b08c      	sub	sp, #48	; 0x30
 8019310:	af00      	add	r7, sp, #0
 8019312:	60f8      	str	r0, [r7, #12]
 8019314:	60b9      	str	r1, [r7, #8]
 8019316:	607a      	str	r2, [r7, #4]
    SimpleString str;
 8019318:	f107 0314 	add.w	r3, r7, #20
 801931c:	4929      	ldr	r1, [pc, #164]	; (80193c4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801931e:	4618      	mov	r0, r3
 8019320:	f7f0 fac9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	685b      	ldr	r3, [r3, #4]
 8019328:	62fb      	str	r3, [r7, #44]	; 0x2c
 801932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801932c:	2b00      	cmp	r3, #0
 801932e:	d038      	beq.n	80193a2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 8019330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019332:	681a      	ldr	r2, [r3, #0]
 8019334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	33c0      	adds	r3, #192	; 0xc0
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	4610      	mov	r0, r2
 8019340:	4798      	blx	r3
 8019342:	4603      	mov	r3, r0
 8019344:	f083 0301 	eor.w	r3, r3, #1
 8019348:	b2db      	uxtb	r3, r3
 801934a:	2b00      	cmp	r3, #0
 801934c:	d025      	beq.n	801939a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801934e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019350:	6819      	ldr	r1, [r3, #0]
 8019352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	33f0      	adds	r3, #240	; 0xf0
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019360:	4610      	mov	r0, r2
 8019362:	4798      	blx	r3
 8019364:	f107 001c 	add.w	r0, r7, #28
 8019368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801936c:	f107 0114 	add.w	r1, r7, #20
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	f7ff ff95 	bl	80192a0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 8019376:	f107 021c 	add.w	r2, r7, #28
 801937a:	f107 0314 	add.w	r3, r7, #20
 801937e:	4611      	mov	r1, r2
 8019380:	4618      	mov	r0, r3
 8019382:	f7f0 fb04 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019386:	f107 031c 	add.w	r3, r7, #28
 801938a:	4618      	mov	r0, r3
 801938c:	f7f0 fe4b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019394:	4618      	mov	r0, r3
 8019396:	f7f0 fe46 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193a0:	e7c3      	b.n	801932a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	f107 0114 	add.w	r1, r7, #20
 80193a8:	687a      	ldr	r2, [r7, #4]
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7ff ff48 	bl	8019240 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 80193b0:	f107 0314 	add.w	r3, r7, #20
 80193b4:	4618      	mov	r0, r3
 80193b6:	f7f0 fe36 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 80193ba:	bf00      	nop
}
 80193bc:	68f8      	ldr	r0, [r7, #12]
 80193be:	3730      	adds	r7, #48	; 0x30
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	08022718 	.word	0x08022718

080193c8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b08c      	sub	sp, #48	; 0x30
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	60f8      	str	r0, [r7, #12]
 80193d0:	60b9      	str	r1, [r7, #8]
 80193d2:	607a      	str	r2, [r7, #4]
    SimpleString str;
 80193d4:	f107 0314 	add.w	r3, r7, #20
 80193d8:	4928      	ldr	r1, [pc, #160]	; (801947c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 80193da:	4618      	mov	r0, r3
 80193dc:	f7f0 fa6b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d035      	beq.n	8019458 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 80193ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ee:	681a      	ldr	r2, [r3, #0]
 80193f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	33c0      	adds	r3, #192	; 0xc0
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	4610      	mov	r0, r2
 80193fc:	4798      	blx	r3
 80193fe:	4603      	mov	r3, r0
 8019400:	2b00      	cmp	r3, #0
 8019402:	d025      	beq.n	8019450 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 8019404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019406:	6819      	ldr	r1, [r3, #0]
 8019408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	33f0      	adds	r3, #240	; 0xf0
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019416:	4610      	mov	r0, r2
 8019418:	4798      	blx	r3
 801941a:	f107 001c 	add.w	r0, r7, #28
 801941e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019422:	f107 0114 	add.w	r1, r7, #20
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	f7ff ff3a 	bl	80192a0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801942c:	f107 021c 	add.w	r2, r7, #28
 8019430:	f107 0314 	add.w	r3, r7, #20
 8019434:	4611      	mov	r1, r2
 8019436:	4618      	mov	r0, r3
 8019438:	f7f0 faa9 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801943c:	f107 031c 	add.w	r3, r7, #28
 8019440:	4618      	mov	r0, r3
 8019442:	f7f0 fdf0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801944a:	4618      	mov	r0, r3
 801944c:	f7f0 fdeb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019452:	685b      	ldr	r3, [r3, #4]
 8019454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019456:	e7c6      	b.n	80193e6 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	f107 0114 	add.w	r1, r7, #20
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	4618      	mov	r0, r3
 8019462:	f7ff feed 	bl	8019240 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 8019466:	f107 0314 	add.w	r3, r7, #20
 801946a:	4618      	mov	r0, r3
 801946c:	f7f0 fddb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019470:	bf00      	nop
}
 8019472:	68f8      	ldr	r0, [r7, #12]
 8019474:	3730      	adds	r7, #48	; 0x30
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}
 801947a:	bf00      	nop
 801947c:	08022718 	.word	0x08022718

08019480 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b08e      	sub	sp, #56	; 0x38
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801948a:	f107 030c 	add.w	r3, r7, #12
 801948e:	4936      	ldr	r1, [pc, #216]	; (8019568 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019490:	4618      	mov	r0, r3
 8019492:	f7f0 fa10 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	685b      	ldr	r3, [r3, #4]
 801949a:	637b      	str	r3, [r7, #52]	; 0x34
 801949c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d044      	beq.n	801952c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 80194a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194a4:	681a      	ldr	r2, [r3, #0]
 80194a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	33cc      	adds	r3, #204	; 0xcc
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	4610      	mov	r0, r2
 80194b2:	4798      	blx	r3
 80194b4:	4603      	mov	r3, r0
 80194b6:	f083 0301 	eor.w	r3, r3, #1
 80194ba:	b2db      	uxtb	r3, r3
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d031      	beq.n	8019524 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 80194c0:	f107 031c 	add.w	r3, r7, #28
 80194c4:	4928      	ldr	r1, [pc, #160]	; (8019568 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7f0 f9f5 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80194cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194ce:	6819      	ldr	r1, [r3, #0]
 80194d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	33f4      	adds	r3, #244	; 0xf4
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80194de:	4610      	mov	r0, r2
 80194e0:	4798      	blx	r3
 80194e2:	f107 0014 	add.w	r0, r7, #20
 80194e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80194ea:	f107 021c 	add.w	r2, r7, #28
 80194ee:	f107 010c 	add.w	r1, r7, #12
 80194f2:	f7ff fed5 	bl	80192a0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 80194f6:	f107 0214 	add.w	r2, r7, #20
 80194fa:	f107 030c 	add.w	r3, r7, #12
 80194fe:	4611      	mov	r1, r2
 8019500:	4618      	mov	r0, r3
 8019502:	f7f0 fa44 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019506:	f107 0314 	add.w	r3, r7, #20
 801950a:	4618      	mov	r0, r3
 801950c:	f7f0 fd8b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019514:	4618      	mov	r0, r3
 8019516:	f7f0 fd86 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801951a:	f107 031c 	add.w	r3, r7, #28
 801951e:	4618      	mov	r0, r3
 8019520:	f7f0 fd81 	bl	800a026 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019526:	685b      	ldr	r3, [r3, #4]
 8019528:	637b      	str	r3, [r7, #52]	; 0x34
 801952a:	e7b7      	b.n	801949c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801952c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019530:	490d      	ldr	r1, [pc, #52]	; (8019568 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019532:	4618      	mov	r0, r3
 8019534:	f7f0 f9bf 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801953e:	f107 010c 	add.w	r1, r7, #12
 8019542:	4618      	mov	r0, r3
 8019544:	f7ff fe7c 	bl	8019240 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 8019548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801954c:	4618      	mov	r0, r3
 801954e:	f7f0 fd6a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 8019552:	f107 030c 	add.w	r3, r7, #12
 8019556:	4618      	mov	r0, r3
 8019558:	f7f0 fd65 	bl	800a026 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801955c:	bf00      	nop
}
 801955e:	6878      	ldr	r0, [r7, #4]
 8019560:	3738      	adds	r7, #56	; 0x38
 8019562:	46bd      	mov	sp, r7
 8019564:	bd80      	pop	{r7, pc}
 8019566:	bf00      	nop
 8019568:	08022718 	.word	0x08022718

0801956c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b084      	sub	sp, #16
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	60fb      	str	r3, [r7, #12]
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d014      	beq.n	80195aa <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	33d0      	adds	r3, #208	; 0xd0
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	4610      	mov	r0, r2
 8019590:	4798      	blx	r3
 8019592:	4603      	mov	r3, r0
 8019594:	f083 0301 	eor.w	r3, r3, #1
 8019598:	b2db      	uxtb	r3, r3
 801959a:	2b00      	cmp	r3, #0
 801959c:	d001      	beq.n	80195a2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801959e:	2301      	movs	r3, #1
 80195a0:	e004      	b.n	80195ac <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	685b      	ldr	r3, [r3, #4]
 80195a6:	60fb      	str	r3, [r7, #12]
 80195a8:	e7e7      	b.n	801957a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 80195aa:	2300      	movs	r3, #0
}
 80195ac:	4618      	mov	r0, r3
 80195ae:	3710      	adds	r7, #16
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}

080195b4 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 80195b4:	b480      	push	{r7}
 80195b6:	b083      	sub	sp, #12
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	460b      	mov	r3, r1
 80195be:	70fb      	strb	r3, [r7, #3]
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	78fa      	ldrb	r2, [r7, #3]
 80195c4:	711a      	strb	r2, [r3, #4]
 80195c6:	bf00      	nop
 80195c8:	370c      	adds	r7, #12
 80195ca:	46bd      	mov	sp, r7
 80195cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d0:	4770      	bx	lr
	...

080195d4 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b082      	sub	sp, #8
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
 80195dc:	460b      	mov	r3, r1
 80195de:	70fb      	strb	r3, [r7, #3]
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	4618      	mov	r0, r3
 80195e4:	f7ed ff6a 	bl	80074bc <_ZN14TestTerminatorC1Ev>
 80195e8:	4a05      	ldr	r2, [pc, #20]	; (8019600 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	601a      	str	r2, [r3, #0]
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	78fa      	ldrb	r2, [r7, #3]
 80195f2:	711a      	strb	r2, [r3, #4]
    {
    }
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	4618      	mov	r0, r3
 80195f8:	3708      	adds	r7, #8
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}
 80195fe:	bf00      	nop
 8019600:	08024a30 	.word	0x08024a30

08019604 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 8019604:	b580      	push	{r7, lr}
 8019606:	b082      	sub	sp, #8
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	791b      	ldrb	r3, [r3, #4]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d001      	beq.n	8019618 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 8019614:	f7f6 f9fe 	bl	800fa14 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 8019618:	f7f7 fd40 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801961c:	4603      	mov	r3, r0
 801961e:	681a      	ldr	r2, [r3, #0]
 8019620:	6812      	ldr	r2, [r2, #0]
 8019622:	4618      	mov	r0, r3
 8019624:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 8019626:	bf00      	nop
 8019628:	3708      	adds	r7, #8
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}
	...

08019630 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
    {
 8019638:	4a05      	ldr	r2, [pc, #20]	; (8019650 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	601a      	str	r2, [r3, #0]
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	4618      	mov	r0, r3
 8019642:	f7f7 fdbb 	bl	80111bc <_ZN14TestTerminatorD1Ev>
    }
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	4618      	mov	r0, r3
 801964a:	3708      	adds	r7, #8
 801964c:	46bd      	mov	sp, r7
 801964e:	bd80      	pop	{r7, pc}
 8019650:	08024a30 	.word	0x08024a30

08019654 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 8019654:	b580      	push	{r7, lr}
 8019656:	b082      	sub	sp, #8
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
    }
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	f7ff ffe7 	bl	8019630 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 8019662:	2108      	movs	r1, #8
 8019664:	6878      	ldr	r0, [r7, #4]
 8019666:	f7ed fd77 	bl	8007158 <_ZdlPvj>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	4618      	mov	r0, r3
 801966e:	3708      	adds	r7, #8
 8019670:	46bd      	mov	sp, r7
 8019672:	bd80      	pop	{r7, pc}

08019674 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 8019674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	330c      	adds	r3, #12
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	4798      	blx	r3
 801968a:	4603      	mov	r3, r0
 801968c:	681a      	ldr	r2, [r3, #0]
 801968e:	321c      	adds	r2, #28
 8019690:	6812      	ldr	r2, [r2, #0]
 8019692:	4618      	mov	r0, r3
 8019694:	4790      	blx	r2
 8019696:	4603      	mov	r3, r0
 8019698:	f083 0301 	eor.w	r3, r3, #1
 801969c:	b2db      	uxtb	r3, r3
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d01d      	beq.n	80196de <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	330c      	adds	r3, #12
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	6878      	ldr	r0, [r7, #4]
 80196ac:	4798      	blx	r3
 80196ae:	4604      	mov	r4, r0
 80196b0:	6823      	ldr	r3, [r4, #0]
 80196b2:	339c      	adds	r3, #156	; 0x9c
 80196b4:	681d      	ldr	r5, [r3, #0]
 80196b6:	683e      	ldr	r6, [r7, #0]
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	791a      	ldrb	r2, [r3, #4]
 80196bc:	f107 0308 	add.w	r3, r7, #8
 80196c0:	4611      	mov	r1, r2
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7ff ff86 	bl	80195d4 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 80196c8:	f107 0308 	add.w	r3, r7, #8
 80196cc:	461a      	mov	r2, r3
 80196ce:	4631      	mov	r1, r6
 80196d0:	4620      	mov	r0, r4
 80196d2:	47a8      	blx	r5
 80196d4:	f107 0308 	add.w	r3, r7, #8
 80196d8:	4618      	mov	r0, r3
 80196da:	f7ff ffa9 	bl	8019630 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 80196de:	bf00      	nop
 80196e0:	3714      	adds	r7, #20
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080196e6 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 80196e6:	b580      	push	{r7, lr}
 80196e8:	b082      	sub	sp, #8
 80196ea:	af00      	add	r7, sp, #0
 80196ec:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 80196ee:	f7f7 fcc5 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 80196f2:	4603      	mov	r3, r0
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3708      	adds	r7, #8
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 80196fc:	b590      	push	{r4, r7, lr}
 80196fe:	b085      	sub	sp, #20
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	6039      	str	r1, [r7, #0]
 8019706:	687c      	ldr	r4, [r7, #4]
 8019708:	f107 0308 	add.w	r3, r7, #8
 801970c:	490b      	ldr	r1, [pc, #44]	; (801973c <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801970e:	4618      	mov	r0, r3
 8019710:	f7f0 f8d1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019714:	f107 0308 	add.w	r3, r7, #8
 8019718:	461a      	mov	r2, r3
 801971a:	6839      	ldr	r1, [r7, #0]
 801971c:	4620      	mov	r0, r4
 801971e:	f7f1 ff29 	bl	800b574 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8019722:	f107 0308 	add.w	r3, r7, #8
 8019726:	4618      	mov	r0, r3
 8019728:	f7f0 fc7d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801972c:	4a04      	ldr	r2, [pc, #16]	; (8019740 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	601a      	str	r2, [r3, #0]
{
}
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	4618      	mov	r0, r3
 8019736:	3714      	adds	r7, #20
 8019738:	46bd      	mov	sp, r7
 801973a:	bd90      	pop	{r4, r7, pc}
 801973c:	08022728 	.word	0x08022728
 8019740:	080239bc 	.word	0x080239bc

08019744 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 8019744:	b5b0      	push	{r4, r5, r7, lr}
 8019746:	b08a      	sub	sp, #40	; 0x28
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
 801974c:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	332c      	adds	r3, #44	; 0x2c
 8019752:	492b      	ldr	r1, [pc, #172]	; (8019800 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 8019754:	4618      	mov	r0, r3
 8019756:	f7f0 fcf5 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8019760:	683b      	ldr	r3, [r7, #0]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	337c      	adds	r3, #124	; 0x7c
 8019766:	681c      	ldr	r4, [r3, #0]
 8019768:	f107 0310 	add.w	r3, r7, #16
 801976c:	4925      	ldr	r1, [pc, #148]	; (8019804 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801976e:	4618      	mov	r0, r3
 8019770:	f7f0 f8a1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019774:	f107 0308 	add.w	r3, r7, #8
 8019778:	f107 0210 	add.w	r2, r7, #16
 801977c:	6839      	ldr	r1, [r7, #0]
 801977e:	4618      	mov	r0, r3
 8019780:	47a0      	blx	r4
 8019782:	f107 0308 	add.w	r3, r7, #8
 8019786:	4619      	mov	r1, r3
 8019788:	4628      	mov	r0, r5
 801978a:	f7f0 fcc9 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801978e:	f107 0308 	add.w	r3, r7, #8
 8019792:	4618      	mov	r0, r3
 8019794:	f7f0 fc47 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019798:	f107 0310 	add.w	r3, r7, #16
 801979c:	4618      	mov	r0, r3
 801979e:	f7f0 fc42 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	332c      	adds	r3, #44	; 0x2c
 80197a6:	4918      	ldr	r1, [pc, #96]	; (8019808 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7f0 fccb 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	3380      	adds	r3, #128	; 0x80
 80197ba:	681c      	ldr	r4, [r3, #0]
 80197bc:	f107 0320 	add.w	r3, r7, #32
 80197c0:	4910      	ldr	r1, [pc, #64]	; (8019804 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7f0 f877 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80197c8:	f107 0318 	add.w	r3, r7, #24
 80197cc:	f107 0220 	add.w	r2, r7, #32
 80197d0:	6839      	ldr	r1, [r7, #0]
 80197d2:	4618      	mov	r0, r3
 80197d4:	47a0      	blx	r4
 80197d6:	f107 0318 	add.w	r3, r7, #24
 80197da:	4619      	mov	r1, r3
 80197dc:	4628      	mov	r0, r5
 80197de:	f7f0 fc9f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80197e2:	f107 0318 	add.w	r3, r7, #24
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7f0 fc1d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80197ec:	f107 0320 	add.w	r3, r7, #32
 80197f0:	4618      	mov	r0, r3
 80197f2:	f7f0 fc18 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 80197f6:	bf00      	nop
 80197f8:	3728      	adds	r7, #40	; 0x28
 80197fa:	46bd      	mov	sp, r7
 80197fc:	bdb0      	pop	{r4, r5, r7, pc}
 80197fe:	bf00      	nop
 8019800:	08022778 	.word	0x08022778
 8019804:	080227a4 	.word	0x080227a4
 8019808:	080227a8 	.word	0x080227a8

0801980c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801980c:	b590      	push	{r4, r7, lr}
 801980e:	b08f      	sub	sp, #60	; 0x3c
 8019810:	af00      	add	r7, sp, #0
 8019812:	60f8      	str	r0, [r7, #12]
 8019814:	60b9      	str	r1, [r7, #8]
 8019816:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 8019818:	f107 0310 	add.w	r3, r7, #16
 801981c:	4618      	mov	r0, r3
 801981e:	f7ff f877 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 8019822:	f107 0310 	add.w	r3, r7, #16
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	68b9      	ldr	r1, [r7, #8]
 801982a:	4618      	mov	r0, r3
 801982c:	f7ff fa16 	bl	8018c5c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	332c      	adds	r3, #44	; 0x2c
 8019834:	4937      	ldr	r1, [pc, #220]	; (8019914 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 8019836:	4618      	mov	r0, r3
 8019838:	f7f0 fc84 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	332c      	adds	r3, #44	; 0x2c
 8019840:	68b9      	ldr	r1, [r7, #8]
 8019842:	4618      	mov	r0, r3
 8019844:	f7f0 fc6c 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	332c      	adds	r3, #44	; 0x2c
 801984c:	4932      	ldr	r1, [pc, #200]	; (8019918 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801984e:	4618      	mov	r0, r3
 8019850:	f7f0 fc78 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801985a:	f107 0320 	add.w	r3, r7, #32
 801985e:	492f      	ldr	r1, [pc, #188]	; (801991c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 8019860:	4618      	mov	r0, r3
 8019862:	f7f0 f828 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019866:	f107 0318 	add.w	r3, r7, #24
 801986a:	f107 0220 	add.w	r2, r7, #32
 801986e:	f107 0110 	add.w	r1, r7, #16
 8019872:	4618      	mov	r0, r3
 8019874:	f7ff fd4a 	bl	801930c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 8019878:	f107 0318 	add.w	r3, r7, #24
 801987c:	4619      	mov	r1, r3
 801987e:	4620      	mov	r0, r4
 8019880:	f7f0 fc4e 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019884:	f107 0318 	add.w	r3, r7, #24
 8019888:	4618      	mov	r0, r3
 801988a:	f7f0 fbcc 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801988e:	f107 0320 	add.w	r3, r7, #32
 8019892:	4618      	mov	r0, r3
 8019894:	f7f0 fbc7 	bl	800a026 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	332c      	adds	r3, #44	; 0x2c
 801989c:	4920      	ldr	r1, [pc, #128]	; (8019920 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801989e:	4618      	mov	r0, r3
 80198a0:	f7f0 fc50 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	332c      	adds	r3, #44	; 0x2c
 80198a8:	68b9      	ldr	r1, [r7, #8]
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7f0 fc38 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	332c      	adds	r3, #44	; 0x2c
 80198b4:	4918      	ldr	r1, [pc, #96]	; (8019918 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 80198b6:	4618      	mov	r0, r3
 80198b8:	f7f0 fc44 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80198c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80198c6:	4915      	ldr	r1, [pc, #84]	; (801991c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 80198c8:	4618      	mov	r0, r3
 80198ca:	f7ef fff4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 80198ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80198d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80198d6:	f107 0110 	add.w	r1, r7, #16
 80198da:	4618      	mov	r0, r3
 80198dc:	f7ff fd74 	bl	80193c8 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 80198e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80198e4:	4619      	mov	r1, r3
 80198e6:	4620      	mov	r0, r4
 80198e8:	f7f0 fc1a 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 80198ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7f0 fb98 	bl	800a026 <_ZN12SimpleStringD1Ev>
 80198f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80198fa:	4618      	mov	r0, r3
 80198fc:	f7f0 fb93 	bl	800a026 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 8019900:	f107 0310 	add.w	r3, r7, #16
 8019904:	4618      	mov	r0, r3
 8019906:	f7ff f817 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 801990a:	bf00      	nop
 801990c:	373c      	adds	r7, #60	; 0x3c
 801990e:	46bd      	mov	sp, r7
 8019910:	bd90      	pop	{r4, r7, pc}
 8019912:	bf00      	nop
 8019914:	080227d0 	.word	0x080227d0
 8019918:	08022810 	.word	0x08022810
 801991c:	080227a4 	.word	0x080227a4
 8019920:	08022814 	.word	0x08022814

08019924 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019924:	b590      	push	{r4, r7, lr}
 8019926:	b087      	sub	sp, #28
 8019928:	af00      	add	r7, sp, #0
 801992a:	60f8      	str	r0, [r7, #12]
 801992c:	60b9      	str	r1, [r7, #8]
 801992e:	607a      	str	r2, [r7, #4]
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	68b9      	ldr	r1, [r7, #8]
 8019934:	4618      	mov	r0, r3
 8019936:	f7ff fee1 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801993a:	4a10      	ldr	r2, [pc, #64]	; (801997c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019946:	f107 0310 	add.w	r3, r7, #16
 801994a:	490d      	ldr	r1, [pc, #52]	; (8019980 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801994c:	4618      	mov	r0, r3
 801994e:	f7ef ffb2 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019952:	f107 0310 	add.w	r3, r7, #16
 8019956:	4619      	mov	r1, r3
 8019958:	4620      	mov	r0, r4
 801995a:	f7f0 f818 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801995e:	f107 0310 	add.w	r3, r7, #16
 8019962:	4618      	mov	r0, r3
 8019964:	f7f0 fb5f 	bl	800a026 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	6879      	ldr	r1, [r7, #4]
 801996c:	4618      	mov	r0, r3
 801996e:	f7ff fee9 	bl	8019744 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	4618      	mov	r0, r3
 8019976:	371c      	adds	r7, #28
 8019978:	46bd      	mov	sp, r7
 801997a:	bd90      	pop	{r4, r7, pc}
 801997c:	08023990 	.word	0x08023990
 8019980:	08022850 	.word	0x08022850

08019984 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019984:	b590      	push	{r4, r7, lr}
 8019986:	b08d      	sub	sp, #52	; 0x34
 8019988:	af00      	add	r7, sp, #0
 801998a:	60f8      	str	r0, [r7, #12]
 801998c:	60b9      	str	r1, [r7, #8]
 801998e:	607a      	str	r2, [r7, #4]
 8019990:	603b      	str	r3, [r7, #0]
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	68b9      	ldr	r1, [r7, #8]
 8019996:	4618      	mov	r0, r3
 8019998:	f7ff feb0 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801999c:	4a2f      	ldr	r2, [pc, #188]	; (8019a5c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	3310      	adds	r3, #16
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	6879      	ldr	r1, [r7, #4]
 80199ac:	6838      	ldr	r0, [r7, #0]
 80199ae:	4798      	blx	r3
 80199b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 80199b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d027      	beq.n	8019a08 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 80199b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ba:	1c5a      	adds	r2, r3, #1
 80199bc:	f107 0314 	add.w	r3, r7, #20
 80199c0:	4611      	mov	r1, r2
 80199c2:	4618      	mov	r0, r3
 80199c4:	f7f1 fa00 	bl	800adc8 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80199ce:	f107 0314 	add.w	r3, r7, #20
 80199d2:	4618      	mov	r0, r3
 80199d4:	f7f0 fafa 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 80199d8:	4602      	mov	r2, r0
 80199da:	f107 031c 	add.w	r3, r7, #28
 80199de:	4920      	ldr	r1, [pc, #128]	; (8019a60 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7f1 f827 	bl	800aa34 <_Z16StringFromFormatPKcz>
 80199e6:	f107 031c 	add.w	r3, r7, #28
 80199ea:	4619      	mov	r1, r3
 80199ec:	4620      	mov	r0, r4
 80199ee:	f7ef ffce 	bl	800998e <_ZN12SimpleStringaSERKS_>
 80199f2:	f107 031c 	add.w	r3, r7, #28
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7f0 fb15 	bl	800a026 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 80199fc:	f107 0314 	add.w	r3, r7, #20
 8019a00:	4618      	mov	r0, r3
 8019a02:	f7f0 fb10 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019a06:	e013      	b.n	8019a30 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a12:	4914      	ldr	r1, [pc, #80]	; (8019a64 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7ef ff4e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a1e:	4619      	mov	r1, r3
 8019a20:	4620      	mov	r0, r4
 8019a22:	f7ef ffb4 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7f0 fafb 	bl	800a026 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	332c      	adds	r3, #44	; 0x2c
 8019a34:	6879      	ldr	r1, [r7, #4]
 8019a36:	4618      	mov	r0, r3
 8019a38:	f7f0 fb72 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	332c      	adds	r3, #44	; 0x2c
 8019a40:	4909      	ldr	r1, [pc, #36]	; (8019a68 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 8019a42:	4618      	mov	r0, r3
 8019a44:	f7f0 fb7e 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	6839      	ldr	r1, [r7, #0]
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f7ff fe79 	bl	8019744 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	4618      	mov	r0, r3
 8019a56:	3734      	adds	r7, #52	; 0x34
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd90      	pop	{r4, r7, pc}
 8019a5c:	08024330 	.word	0x08024330
 8019a60:	08022880 	.word	0x08022880
 8019a64:	080228bc 	.word	0x080228bc
 8019a68:	08022810 	.word	0x08022810

08019a6c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 8019a6c:	b590      	push	{r4, r7, lr}
 8019a6e:	b089      	sub	sp, #36	; 0x24
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	60f8      	str	r0, [r7, #12]
 8019a74:	60b9      	str	r1, [r7, #8]
 8019a76:	607a      	str	r2, [r7, #4]
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	68b9      	ldr	r1, [r7, #8]
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	f7ff fe3d 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 8019a82:	4a1f      	ldr	r2, [pc, #124]	; (8019b00 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 8019a88:	f107 0310 	add.w	r3, r7, #16
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7fe ff3f 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 8019a92:	f107 0310 	add.w	r3, r7, #16
 8019a96:	6879      	ldr	r1, [r7, #4]
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7ff f909 	bl	8018cb0 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 8019a9e:	f107 0310 	add.w	r3, r7, #16
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f7ff f94c 	bl	8018d40 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019aae:	f107 0318 	add.w	r3, r7, #24
 8019ab2:	4914      	ldr	r1, [pc, #80]	; (8019b04 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7ef fefe 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019aba:	f107 0318 	add.w	r3, r7, #24
 8019abe:	4619      	mov	r1, r3
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f7ef ff64 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019ac6:	f107 0318 	add.w	r3, r7, #24
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7f0 faab 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	332c      	adds	r3, #44	; 0x2c
 8019ad4:	490c      	ldr	r1, [pc, #48]	; (8019b08 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f7f0 fb34 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	f107 0210 	add.w	r2, r7, #16
 8019ae2:	4611      	mov	r1, r2
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7ff fe2d 	bl	8019744 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 8019aea:	f107 0310 	add.w	r3, r7, #16
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7fe ff22 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	4618      	mov	r0, r3
 8019af8:	3724      	adds	r7, #36	; 0x24
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd90      	pop	{r4, r7, pc}
 8019afe:	bf00      	nop
 8019b00:	08023964 	.word	0x08023964
 8019b04:	080228e8 	.word	0x080228e8
 8019b08:	08022810 	.word	0x08022810

08019b0c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 8019b0c:	b590      	push	{r4, r7, lr}
 8019b0e:	b099      	sub	sp, #100	; 0x64
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	60f8      	str	r0, [r7, #12]
 8019b14:	60b9      	str	r1, [r7, #8]
 8019b16:	607a      	str	r2, [r7, #4]
 8019b18:	603b      	str	r3, [r7, #0]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	68b9      	ldr	r1, [r7, #8]
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f7ff fdec 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 8019b24:	4a9e      	ldr	r2, [pc, #632]	; (8019da0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 8019b2a:	f107 0310 	add.w	r3, r7, #16
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f7fe feee 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 8019b34:	f107 0310 	add.w	r3, r7, #16
 8019b38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019b3a:	6879      	ldr	r1, [r7, #4]
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f7ff f88d 	bl	8018c5c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	335c      	adds	r3, #92	; 0x5c
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	f107 0218 	add.w	r2, r7, #24
 8019b4e:	6839      	ldr	r1, [r7, #0]
 8019b50:	4610      	mov	r0, r2
 8019b52:	4798      	blx	r3
 8019b54:	f107 0218 	add.w	r2, r7, #24
 8019b58:	f107 0310 	add.w	r3, r7, #16
 8019b5c:	4611      	mov	r1, r2
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7ff f948 	bl	8018df4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 8019b64:	f107 0318 	add.w	r3, r7, #24
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f7f0 fa5c 	bl	800a026 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 8019b6e:	f107 0310 	add.w	r3, r7, #16
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7fe ff4d 	bl	8018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d037      	beq.n	8019bee <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019b84:	f107 0320 	add.w	r3, r7, #32
 8019b88:	4986      	ldr	r1, [pc, #536]	; (8019da4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7ef fe93 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019b90:	f107 0320 	add.w	r3, r7, #32
 8019b94:	4619      	mov	r1, r3
 8019b96:	4620      	mov	r0, r4
 8019b98:	f7ef fef9 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019b9c:	f107 0320 	add.w	r3, r7, #32
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7f0 fa40 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	332c      	adds	r3, #44	; 0x2c
 8019baa:	6879      	ldr	r1, [r7, #4]
 8019bac:	4618      	mov	r0, r3
 8019bae:	f7f0 fab7 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	332c      	adds	r3, #44	; 0x2c
 8019bb6:	497c      	ldr	r1, [pc, #496]	; (8019da8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 8019bb8:	4618      	mov	r0, r3
 8019bba:	f7f0 fac3 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	335c      	adds	r3, #92	; 0x5c
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019bd0:	6839      	ldr	r1, [r7, #0]
 8019bd2:	4610      	mov	r0, r2
 8019bd4:	4798      	blx	r3
 8019bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019bda:	4619      	mov	r1, r3
 8019bdc:	4620      	mov	r0, r4
 8019bde:	f7f0 fa9f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019be6:	4618      	mov	r0, r3
 8019be8:	f7f0 fa1d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019bec:	e056      	b.n	8019c9c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019bf8:	496c      	ldr	r1, [pc, #432]	; (8019dac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	f7ef fe5b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c04:	4619      	mov	r1, r3
 8019c06:	4620      	mov	r0, r4
 8019c08:	f7ef fec1 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019c0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7f0 fa08 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	335c      	adds	r3, #92	; 0x5c
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8019c28:	6839      	ldr	r1, [r7, #0]
 8019c2a:	4610      	mov	r0, r2
 8019c2c:	4798      	blx	r3
 8019c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019c32:	4619      	mov	r1, r3
 8019c34:	4620      	mov	r0, r4
 8019c36:	f7f0 fa73 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019c3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7f0 f9f1 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	332c      	adds	r3, #44	; 0x2c
 8019c48:	4959      	ldr	r1, [pc, #356]	; (8019db0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7f0 fa7a 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	332c      	adds	r3, #44	; 0x2c
 8019c54:	6879      	ldr	r1, [r7, #4]
 8019c56:	4618      	mov	r0, r3
 8019c58:	f7f0 fa62 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	332c      	adds	r3, #44	; 0x2c
 8019c60:	4954      	ldr	r1, [pc, #336]	; (8019db4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7f0 fa6e 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019c72:	6839      	ldr	r1, [r7, #0]
 8019c74:	4618      	mov	r0, r3
 8019c76:	f7fd faa3 	bl	80171c0 <_Z10StringFromRK14MockNamedValue>
 8019c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019c7e:	4619      	mov	r1, r3
 8019c80:	4620      	mov	r0, r4
 8019c82:	f7f0 fa4d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019c86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7f0 f9cb 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	332c      	adds	r3, #44	; 0x2c
 8019c94:	4948      	ldr	r1, [pc, #288]	; (8019db8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 8019c96:	4618      	mov	r0, r3
 8019c98:	f7f0 fa54 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	332c      	adds	r3, #44	; 0x2c
 8019ca0:	4946      	ldr	r1, [pc, #280]	; (8019dbc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7f0 fa4e 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019cac:	6879      	ldr	r1, [r7, #4]
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f7ff fdac 	bl	801980c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	332c      	adds	r3, #44	; 0x2c
 8019cb8:	4941      	ldr	r1, [pc, #260]	; (8019dc0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f7f0 fa42 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	332c      	adds	r3, #44	; 0x2c
 8019cc4:	6879      	ldr	r1, [r7, #4]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7f0 fa2a 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	332c      	adds	r3, #44	; 0x2c
 8019cd0:	493a      	ldr	r1, [pc, #232]	; (8019dbc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7f0 fa36 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	332c      	adds	r3, #44	; 0x2c
 8019cdc:	4939      	ldr	r1, [pc, #228]	; (8019dc4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7f0 fa30 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	3360      	adds	r3, #96	; 0x60
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019cf6:	6839      	ldr	r1, [r7, #0]
 8019cf8:	4610      	mov	r0, r2
 8019cfa:	4798      	blx	r3
 8019cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019d00:	4619      	mov	r1, r3
 8019d02:	4620      	mov	r0, r4
 8019d04:	f7f0 fa0c 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7f0 f98a 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	332c      	adds	r3, #44	; 0x2c
 8019d16:	492c      	ldr	r1, [pc, #176]	; (8019dc8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 8019d18:	4618      	mov	r0, r3
 8019d1a:	f7f0 fa13 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	335c      	adds	r3, #92	; 0x5c
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019d30:	6839      	ldr	r1, [r7, #0]
 8019d32:	4610      	mov	r0, r2
 8019d34:	4798      	blx	r3
 8019d36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019d3a:	4619      	mov	r1, r3
 8019d3c:	4620      	mov	r0, r4
 8019d3e:	f7f0 f9ef 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019d42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019d46:	4618      	mov	r0, r3
 8019d48:	f7f0 f96d 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	332c      	adds	r3, #44	; 0x2c
 8019d50:	491e      	ldr	r1, [pc, #120]	; (8019dcc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7f0 f9f6 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019d62:	6839      	ldr	r1, [r7, #0]
 8019d64:	4618      	mov	r0, r3
 8019d66:	f7fd fa2b 	bl	80171c0 <_Z10StringFromRK14MockNamedValue>
 8019d6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019d6e:	4619      	mov	r1, r3
 8019d70:	4620      	mov	r0, r4
 8019d72:	f7f0 f9d5 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019d76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	f7f0 f953 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	332c      	adds	r3, #44	; 0x2c
 8019d84:	490c      	ldr	r1, [pc, #48]	; (8019db8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 8019d86:	4618      	mov	r0, r3
 8019d88:	f7f0 f9dc 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 8019d8c:	f107 0310 	add.w	r3, r7, #16
 8019d90:	4618      	mov	r0, r3
 8019d92:	f7fe fdd1 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	4618      	mov	r0, r3
 8019d9a:	3764      	adds	r7, #100	; 0x64
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd90      	pop	{r4, r7, pc}
 8019da0:	08024304 	.word	0x08024304
 8019da4:	0802290c 	.word	0x0802290c
 8019da8:	08022944 	.word	0x08022944
 8019dac:	08022948 	.word	0x08022948
 8019db0:	08022980 	.word	0x08022980
 8019db4:	08022990 	.word	0x08022990
 8019db8:	08022998 	.word	0x08022998
 8019dbc:	08022810 	.word	0x08022810
 8019dc0:	0802299c 	.word	0x0802299c
 8019dc4:	080227a4 	.word	0x080227a4
 8019dc8:	080229d0 	.word	0x080229d0
 8019dcc:	080229d4 	.word	0x080229d4

08019dd0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 8019dd0:	b590      	push	{r4, r7, lr}
 8019dd2:	b097      	sub	sp, #92	; 0x5c
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	60f8      	str	r0, [r7, #12]
 8019dd8:	60b9      	str	r1, [r7, #8]
 8019dda:	607a      	str	r2, [r7, #4]
 8019ddc:	603b      	str	r3, [r7, #0]
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	68b9      	ldr	r1, [r7, #8]
 8019de2:	4618      	mov	r0, r3
 8019de4:	f7ff fc8a 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 8019de8:	4a90      	ldr	r2, [pc, #576]	; (801a02c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 8019dee:	f107 0310 	add.w	r3, r7, #16
 8019df2:	4618      	mov	r0, r3
 8019df4:	f7fe fd8c 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 8019df8:	f107 0310 	add.w	r3, r7, #16
 8019dfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019dfe:	6879      	ldr	r1, [r7, #4]
 8019e00:	4618      	mov	r0, r3
 8019e02:	f7fe ff2b 	bl	8018c5c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	335c      	adds	r3, #92	; 0x5c
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	f107 0218 	add.w	r2, r7, #24
 8019e12:	6839      	ldr	r1, [r7, #0]
 8019e14:	4610      	mov	r0, r2
 8019e16:	4798      	blx	r3
 8019e18:	f107 0218 	add.w	r2, r7, #24
 8019e1c:	f107 0310 	add.w	r3, r7, #16
 8019e20:	4611      	mov	r1, r2
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7ff f812 	bl	8018e4c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 8019e28:	f107 0318 	add.w	r3, r7, #24
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7f0 f8fa 	bl	800a026 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 8019e32:	f107 0310 	add.w	r3, r7, #16
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7fe fdeb 	bl	8018a12 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d037      	beq.n	8019eb2 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019e48:	f107 0320 	add.w	r3, r7, #32
 8019e4c:	4978      	ldr	r1, [pc, #480]	; (801a030 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 8019e4e:	4618      	mov	r0, r3
 8019e50:	f7ef fd31 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019e54:	f107 0320 	add.w	r3, r7, #32
 8019e58:	4619      	mov	r1, r3
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f7ef fd97 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019e60:	f107 0320 	add.w	r3, r7, #32
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7f0 f8de 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	332c      	adds	r3, #44	; 0x2c
 8019e6e:	6879      	ldr	r1, [r7, #4]
 8019e70:	4618      	mov	r0, r3
 8019e72:	f7f0 f955 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	332c      	adds	r3, #44	; 0x2c
 8019e7a:	496e      	ldr	r1, [pc, #440]	; (801a034 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 8019e7c:	4618      	mov	r0, r3
 8019e7e:	f7f0 f961 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019e88:	683b      	ldr	r3, [r7, #0]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	335c      	adds	r3, #92	; 0x5c
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019e94:	6839      	ldr	r1, [r7, #0]
 8019e96:	4610      	mov	r0, r2
 8019e98:	4798      	blx	r3
 8019e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	4620      	mov	r0, r4
 8019ea2:	f7f0 f93d 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7f0 f8bb 	bl	800a026 <_ZN12SimpleStringD1Ev>
 8019eb0:	e059      	b.n	8019f66 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ebc:	495e      	ldr	r1, [pc, #376]	; (801a038 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f7ef fcf9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 8019ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ec8:	4619      	mov	r1, r3
 8019eca:	4620      	mov	r0, r4
 8019ecc:	f7ef fd5f 	bl	800998e <_ZN12SimpleStringaSERKS_>
 8019ed0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7f0 f8a6 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019ee0:	683b      	ldr	r3, [r7, #0]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	3360      	adds	r3, #96	; 0x60
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8019eec:	6839      	ldr	r1, [r7, #0]
 8019eee:	4610      	mov	r0, r2
 8019ef0:	4798      	blx	r3
 8019ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019ef6:	4619      	mov	r1, r3
 8019ef8:	4620      	mov	r0, r4
 8019efa:	f7f0 f911 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019efe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019f02:	4618      	mov	r0, r3
 8019f04:	f7f0 f88f 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	332c      	adds	r3, #44	; 0x2c
 8019f0c:	494b      	ldr	r1, [pc, #300]	; (801a03c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7f0 f918 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	335c      	adds	r3, #92	; 0x5c
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019f26:	6839      	ldr	r1, [r7, #0]
 8019f28:	4610      	mov	r0, r2
 8019f2a:	4798      	blx	r3
 8019f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019f30:	4619      	mov	r1, r3
 8019f32:	4620      	mov	r0, r4
 8019f34:	f7f0 f8f4 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f7f0 f872 	bl	800a026 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	332c      	adds	r3, #44	; 0x2c
 8019f46:	493e      	ldr	r1, [pc, #248]	; (801a040 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f7f0 f8fb 	bl	800a144 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	332c      	adds	r3, #44	; 0x2c
 8019f52:	6879      	ldr	r1, [r7, #4]
 8019f54:	4618      	mov	r0, r3
 8019f56:	f7f0 f8e3 	bl	800a120 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	332c      	adds	r3, #44	; 0x2c
 8019f5e:	4939      	ldr	r1, [pc, #228]	; (801a044 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 8019f60:	4618      	mov	r0, r3
 8019f62:	f7f0 f8ef 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	332c      	adds	r3, #44	; 0x2c
 8019f6a:	4937      	ldr	r1, [pc, #220]	; (801a048 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7f0 f8e9 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019f76:	6879      	ldr	r1, [r7, #4]
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7ff fc47 	bl	801980c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	332c      	adds	r3, #44	; 0x2c
 8019f82:	4932      	ldr	r1, [pc, #200]	; (801a04c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 8019f84:	4618      	mov	r0, r3
 8019f86:	f7f0 f8dd 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	332c      	adds	r3, #44	; 0x2c
 8019f8e:	6879      	ldr	r1, [r7, #4]
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7f0 f8c5 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	332c      	adds	r3, #44	; 0x2c
 8019f9a:	492b      	ldr	r1, [pc, #172]	; (801a048 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7f0 f8d1 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	332c      	adds	r3, #44	; 0x2c
 8019fa6:	492a      	ldr	r1, [pc, #168]	; (801a050 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7f0 f8cb 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	3360      	adds	r3, #96	; 0x60
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019fc0:	6839      	ldr	r1, [r7, #0]
 8019fc2:	4610      	mov	r0, r2
 8019fc4:	4798      	blx	r3
 8019fc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019fca:	4619      	mov	r1, r3
 8019fcc:	4620      	mov	r0, r4
 8019fce:	f7f0 f8a7 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 8019fd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7f0 f825 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	332c      	adds	r3, #44	; 0x2c
 8019fe0:	491c      	ldr	r1, [pc, #112]	; (801a054 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f7f0 f8ae 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	335c      	adds	r3, #92	; 0x5c
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019ffa:	6839      	ldr	r1, [r7, #0]
 8019ffc:	4610      	mov	r0, r2
 8019ffe:	4798      	blx	r3
 801a000:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a004:	4619      	mov	r1, r3
 801a006:	4620      	mov	r0, r4
 801a008:	f7f0 f88a 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801a00c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a010:	4618      	mov	r0, r3
 801a012:	f7f0 f808 	bl	800a026 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a016:	f107 0310 	add.w	r3, r7, #16
 801a01a:	4618      	mov	r0, r3
 801a01c:	f7fe fc8c 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	4618      	mov	r0, r3
 801a024:	375c      	adds	r7, #92	; 0x5c
 801a026:	46bd      	mov	sp, r7
 801a028:	bd90      	pop	{r4, r7, pc}
 801a02a:	bf00      	nop
 801a02c:	080242d8 	.word	0x080242d8
 801a030:	080229d8 	.word	0x080229d8
 801a034:	08022944 	.word	0x08022944
 801a038:	08022a18 	.word	0x08022a18
 801a03c:	08022a44 	.word	0x08022a44
 801a040:	08022980 	.word	0x08022980
 801a044:	08022a5c 	.word	0x08022a5c
 801a048:	08022810 	.word	0x08022810
 801a04c:	08022a60 	.word	0x08022a60
 801a050:	080227a4 	.word	0x080227a4
 801a054:	080229d0 	.word	0x080229d0

0801a058 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a058:	b590      	push	{r4, r7, lr}
 801a05a:	b08b      	sub	sp, #44	; 0x2c
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	60f8      	str	r0, [r7, #12]
 801a060:	60b9      	str	r1, [r7, #8]
 801a062:	607a      	str	r2, [r7, #4]
 801a064:	603b      	str	r3, [r7, #0]
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	68b9      	ldr	r1, [r7, #8]
 801a06a:	4618      	mov	r0, r3
 801a06c:	f7ff fb46 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801a070:	4a30      	ldr	r2, [pc, #192]	; (801a134 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801a076:	f107 0310 	add.w	r3, r7, #16
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7fe fc48 	bl	8018910 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801a080:	f107 0310 	add.w	r3, r7, #16
 801a084:	683a      	ldr	r2, [r7, #0]
 801a086:	6879      	ldr	r1, [r7, #4]
 801a088:	4618      	mov	r0, r3
 801a08a:	f7fe fde7 	bl	8018c5c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a094:	f107 0318 	add.w	r3, r7, #24
 801a098:	4927      	ldr	r1, [pc, #156]	; (801a138 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a09a:	4618      	mov	r0, r3
 801a09c:	f7ef fc0b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a0a0:	f107 0318 	add.w	r3, r7, #24
 801a0a4:	4619      	mov	r1, r3
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	f7ef fc71 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a0ac:	f107 0318 	add.w	r3, r7, #24
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	f7ef ffb8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	332c      	adds	r3, #44	; 0x2c
 801a0ba:	6879      	ldr	r1, [r7, #4]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7f0 f82f 	bl	800a120 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	332c      	adds	r3, #44	; 0x2c
 801a0c6:	491d      	ldr	r1, [pc, #116]	; (801a13c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7f0 f83b 	bl	800a144 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	683a      	ldr	r2, [r7, #0]
 801a0d2:	6879      	ldr	r1, [r7, #4]
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f7ff fb99 	bl	801980c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	332c      	adds	r3, #44	; 0x2c
 801a0de:	4918      	ldr	r1, [pc, #96]	; (801a140 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f7f0 f82f 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	332c      	adds	r3, #44	; 0x2c
 801a0ea:	4916      	ldr	r1, [pc, #88]	; (801a144 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7f0 f829 	bl	800a144 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a0f8:	f107 0320 	add.w	r3, r7, #32
 801a0fc:	f107 0210 	add.w	r2, r7, #16
 801a100:	4611      	mov	r1, r2
 801a102:	4618      	mov	r0, r3
 801a104:	f7ff f9bc 	bl	8019480 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801a108:	f107 0320 	add.w	r3, r7, #32
 801a10c:	4619      	mov	r1, r3
 801a10e:	4620      	mov	r0, r4
 801a110:	f7f0 f806 	bl	800a120 <_ZN12SimpleStringpLERKS_>
 801a114:	f107 0320 	add.w	r3, r7, #32
 801a118:	4618      	mov	r0, r3
 801a11a:	f7ef ff84 	bl	800a026 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801a11e:	f107 0310 	add.w	r3, r7, #16
 801a122:	4618      	mov	r0, r3
 801a124:	f7fe fc08 	bl	8018938 <_ZN21MockExpectedCallsListD1Ev>
}
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	4618      	mov	r0, r3
 801a12c:	372c      	adds	r7, #44	; 0x2c
 801a12e:	46bd      	mov	sp, r7
 801a130:	bd90      	pop	{r4, r7, pc}
 801a132:	bf00      	nop
 801a134:	080242ac 	.word	0x080242ac
 801a138:	08022a9c 	.word	0x08022a9c
 801a13c:	08022acc 	.word	0x08022acc
 801a140:	08022ae0 	.word	0x08022ae0
 801a144:	080227a4 	.word	0x080227a4

0801a148 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801a148:	b590      	push	{r4, r7, lr}
 801a14a:	b087      	sub	sp, #28
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	60f8      	str	r0, [r7, #12]
 801a150:	60b9      	str	r1, [r7, #8]
 801a152:	607a      	str	r2, [r7, #4]
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	68b9      	ldr	r1, [r7, #8]
 801a158:	4618      	mov	r0, r3
 801a15a:	f7ff facf 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801a15e:	4a10      	ldr	r2, [pc, #64]	; (801a1a0 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f7ef ff2e 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a170:	4602      	mov	r2, r0
 801a172:	f107 0310 	add.w	r3, r7, #16
 801a176:	490b      	ldr	r1, [pc, #44]	; (801a1a4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801a178:	4618      	mov	r0, r3
 801a17a:	f7f0 fc5b 	bl	800aa34 <_Z16StringFromFormatPKcz>
 801a17e:	f107 0310 	add.w	r3, r7, #16
 801a182:	4619      	mov	r1, r3
 801a184:	4620      	mov	r0, r4
 801a186:	f7ef fc02 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a18a:	f107 0310 	add.w	r3, r7, #16
 801a18e:	4618      	mov	r0, r3
 801a190:	f7ef ff49 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	4618      	mov	r0, r3
 801a198:	371c      	adds	r7, #28
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd90      	pop	{r4, r7, pc}
 801a19e:	bf00      	nop
 801a1a0:	08024280 	.word	0x08024280
 801a1a4:	08022b0c 	.word	0x08022b0c

0801a1a8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801a1a8:	b590      	push	{r4, r7, lr}
 801a1aa:	b087      	sub	sp, #28
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	60f8      	str	r0, [r7, #12]
 801a1b0:	60b9      	str	r1, [r7, #8]
 801a1b2:	607a      	str	r2, [r7, #4]
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	68b9      	ldr	r1, [r7, #8]
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f7ff fa9f 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801a1be:	4a10      	ldr	r2, [pc, #64]	; (801a200 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a1ca:	6878      	ldr	r0, [r7, #4]
 801a1cc:	f7ef fefe 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	f107 0310 	add.w	r3, r7, #16
 801a1d6:	490b      	ldr	r1, [pc, #44]	; (801a204 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7f0 fc2b 	bl	800aa34 <_Z16StringFromFormatPKcz>
 801a1de:	f107 0310 	add.w	r3, r7, #16
 801a1e2:	4619      	mov	r1, r3
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	f7ef fbd2 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a1ea:	f107 0310 	add.w	r3, r7, #16
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f7ef ff19 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	371c      	adds	r7, #28
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd90      	pop	{r4, r7, pc}
 801a1fe:	bf00      	nop
 801a200:	08024254 	.word	0x08024254
 801a204:	08022b64 	.word	0x08022b64

0801a208 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a208:	b590      	push	{r4, r7, lr}
 801a20a:	b087      	sub	sp, #28
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	60f8      	str	r0, [r7, #12]
 801a210:	60b9      	str	r1, [r7, #8]
 801a212:	607a      	str	r2, [r7, #4]
 801a214:	603b      	str	r3, [r7, #0]
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	68b9      	ldr	r1, [r7, #8]
 801a21a:	4618      	mov	r0, r3
 801a21c:	f7ff fa6e 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801a220:	4a12      	ldr	r2, [pc, #72]	; (801a26c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f7ef fecd 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a232:	4602      	mov	r2, r0
 801a234:	f107 0010 	add.w	r0, r7, #16
 801a238:	683b      	ldr	r3, [r7, #0]
 801a23a:	490d      	ldr	r1, [pc, #52]	; (801a270 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801a23c:	f7f0 fbfa 	bl	800aa34 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801a240:	f107 0310 	add.w	r3, r7, #16
 801a244:	4619      	mov	r1, r3
 801a246:	4620      	mov	r0, r4
 801a248:	f7ef fba1 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a24c:	f107 0310 	add.w	r3, r7, #16
 801a250:	4618      	mov	r0, r3
 801a252:	f7ef fee8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a25a:	6879      	ldr	r1, [r7, #4]
 801a25c:	4618      	mov	r0, r3
 801a25e:	f7ff fad5 	bl	801980c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	4618      	mov	r0, r3
 801a266:	371c      	adds	r7, #28
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd90      	pop	{r4, r7, pc}
 801a26c:	08024228 	.word	0x08024228
 801a270:	08022bb4 	.word	0x08022bb4

0801a274 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a274:	b590      	push	{r4, r7, lr}
 801a276:	b087      	sub	sp, #28
 801a278:	af00      	add	r7, sp, #0
 801a27a:	60f8      	str	r0, [r7, #12]
 801a27c:	60b9      	str	r1, [r7, #8]
 801a27e:	607a      	str	r2, [r7, #4]
 801a280:	603b      	str	r3, [r7, #0]
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	68b9      	ldr	r1, [r7, #8]
 801a286:	4618      	mov	r0, r3
 801a288:	f7ff fa38 	bl	80196fc <_ZN11MockFailureC1EP10UtestShell>
 801a28c:	4a12      	ldr	r2, [pc, #72]	; (801a2d8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f7ef fe97 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a29e:	4602      	mov	r2, r0
 801a2a0:	f107 0310 	add.w	r3, r7, #16
 801a2a4:	490d      	ldr	r1, [pc, #52]	; (801a2dc <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	f7f0 fbc4 	bl	800aa34 <_Z16StringFromFormatPKcz>
 801a2ac:	f107 0310 	add.w	r3, r7, #16
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	f7ef fb6b 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a2b8:	f107 0310 	add.w	r3, r7, #16
 801a2bc:	4618      	mov	r0, r3
 801a2be:	f7ef feb2 	bl	800a026 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	683a      	ldr	r2, [r7, #0]
 801a2c6:	6879      	ldr	r1, [r7, #4]
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f7ff fa9f 	bl	801980c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	371c      	adds	r7, #28
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd90      	pop	{r4, r7, pc}
 801a2d8:	080241fc 	.word	0x080241fc
 801a2dc:	08022c18 	.word	0x08022c18

0801a2e0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801a2e0:	b480      	push	{r7}
 801a2e2:	b083      	sub	sp, #12
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801a2e8:	4a04      	ldr	r2, [pc, #16]	; (801a2fc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	6013      	str	r3, [r2, #0]
}
 801a2ee:	bf00      	nop
 801a2f0:	370c      	adds	r7, #12
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f8:	4770      	bx	lr
 801a2fa:	bf00      	nop
 801a2fc:	20000c70 	.word	0x20000c70

0801a300 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801a300:	b580      	push	{r7, lr}
 801a302:	b082      	sub	sp, #8
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
 801a308:	6039      	str	r1, [r7, #0]
 801a30a:	4a10      	ldr	r2, [pc, #64]	; (801a34c <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	601a      	str	r2, [r3, #0]
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	3304      	adds	r3, #4
 801a314:	6839      	ldr	r1, [r7, #0]
 801a316:	4618      	mov	r0, r3
 801a318:	f7ef fb21 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	330c      	adds	r3, #12
 801a320:	490b      	ldr	r1, [pc, #44]	; (801a350 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801a322:	4618      	mov	r0, r3
 801a324:	f7ef fac7 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	2200      	movs	r2, #0
 801a32c:	629a      	str	r2, [r3, #40]	; 0x28
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	2200      	movs	r2, #0
 801a332:	62da      	str	r2, [r3, #44]	; 0x2c
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2200      	movs	r2, #0
 801a338:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	2200      	movs	r2, #0
 801a33e:	619a      	str	r2, [r3, #24]
}
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	4618      	mov	r0, r3
 801a344:	3708      	adds	r7, #8
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
 801a34a:	bf00      	nop
 801a34c:	08024a84 	.word	0x08024a84
 801a350:	08022c68 	.word	0x08022c68

0801a354 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801a354:	b580      	push	{r7, lr}
 801a356:	b082      	sub	sp, #8
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
 801a35c:	4a08      	ldr	r2, [pc, #32]	; (801a380 <_ZN14MockNamedValueD1Ev+0x2c>)
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	601a      	str	r2, [r3, #0]
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	330c      	adds	r3, #12
 801a366:	4618      	mov	r0, r3
 801a368:	f7ef fe5d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	3304      	adds	r3, #4
 801a370:	4618      	mov	r0, r3
 801a372:	f7ef fe58 	bl	800a026 <_ZN12SimpleStringD1Ev>
{
}
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	4618      	mov	r0, r3
 801a37a:	3708      	adds	r7, #8
 801a37c:	46bd      	mov	sp, r7
 801a37e:	bd80      	pop	{r7, pc}
 801a380:	08024a84 	.word	0x08024a84

0801a384 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801a384:	b580      	push	{r7, lr}
 801a386:	b082      	sub	sp, #8
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
}
 801a38c:	6878      	ldr	r0, [r7, #4]
 801a38e:	f7ff ffe1 	bl	801a354 <_ZN14MockNamedValueD1Ev>
 801a392:	2138      	movs	r1, #56	; 0x38
 801a394:	6878      	ldr	r0, [r7, #4]
 801a396:	f7ec fedf 	bl	8007158 <_ZdlPvj>
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	4618      	mov	r0, r3
 801a39e:	3708      	adds	r7, #8
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd80      	pop	{r7, pc}

0801a3a4 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801a3a4:	b590      	push	{r4, r7, lr}
 801a3a6:	b085      	sub	sp, #20
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
 801a3ac:	460b      	mov	r3, r1
 801a3ae:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	f103 040c 	add.w	r4, r3, #12
 801a3b6:	f107 0308 	add.w	r3, r7, #8
 801a3ba:	490b      	ldr	r1, [pc, #44]	; (801a3e8 <_ZN14MockNamedValue8setValueEb+0x44>)
 801a3bc:	4618      	mov	r0, r3
 801a3be:	f7ef fa7a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a3c2:	f107 0308 	add.w	r3, r7, #8
 801a3c6:	4619      	mov	r1, r3
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	f7ef fae0 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a3ce:	f107 0308 	add.w	r3, r7, #8
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f7ef fe27 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	78fa      	ldrb	r2, [r7, #3]
 801a3dc:	761a      	strb	r2, [r3, #24]
}
 801a3de:	bf00      	nop
 801a3e0:	3714      	adds	r7, #20
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd90      	pop	{r4, r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	08022c6c 	.word	0x08022c6c

0801a3ec <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801a3ec:	b590      	push	{r4, r7, lr}
 801a3ee:	b085      	sub	sp, #20
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	f103 040c 	add.w	r4, r3, #12
 801a3fc:	f107 0308 	add.w	r3, r7, #8
 801a400:	490a      	ldr	r1, [pc, #40]	; (801a42c <_ZN14MockNamedValue8setValueEj+0x40>)
 801a402:	4618      	mov	r0, r3
 801a404:	f7ef fa57 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a408:	f107 0308 	add.w	r3, r7, #8
 801a40c:	4619      	mov	r1, r3
 801a40e:	4620      	mov	r0, r4
 801a410:	f7ef fabd 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a414:	f107 0308 	add.w	r3, r7, #8
 801a418:	4618      	mov	r0, r3
 801a41a:	f7ef fe04 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	683a      	ldr	r2, [r7, #0]
 801a422:	619a      	str	r2, [r3, #24]
}
 801a424:	bf00      	nop
 801a426:	3714      	adds	r7, #20
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd90      	pop	{r4, r7, pc}
 801a42c:	08022c74 	.word	0x08022c74

0801a430 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801a430:	b590      	push	{r4, r7, lr}
 801a432:	b085      	sub	sp, #20
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
 801a438:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	f103 040c 	add.w	r4, r3, #12
 801a440:	f107 0308 	add.w	r3, r7, #8
 801a444:	490a      	ldr	r1, [pc, #40]	; (801a470 <_ZN14MockNamedValue8setValueEi+0x40>)
 801a446:	4618      	mov	r0, r3
 801a448:	f7ef fa35 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a44c:	f107 0308 	add.w	r3, r7, #8
 801a450:	4619      	mov	r1, r3
 801a452:	4620      	mov	r0, r4
 801a454:	f7ef fa9b 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a458:	f107 0308 	add.w	r3, r7, #8
 801a45c:	4618      	mov	r0, r3
 801a45e:	f7ef fde2 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	683a      	ldr	r2, [r7, #0]
 801a466:	619a      	str	r2, [r3, #24]
}
 801a468:	bf00      	nop
 801a46a:	3714      	adds	r7, #20
 801a46c:	46bd      	mov	sp, r7
 801a46e:	bd90      	pop	{r4, r7, pc}
 801a470:	08022c68 	.word	0x08022c68

0801a474 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801a474:	b590      	push	{r4, r7, lr}
 801a476:	b085      	sub	sp, #20
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
 801a47c:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	f103 040c 	add.w	r4, r3, #12
 801a484:	f107 0308 	add.w	r3, r7, #8
 801a488:	490a      	ldr	r1, [pc, #40]	; (801a4b4 <_ZN14MockNamedValue8setValueEl+0x40>)
 801a48a:	4618      	mov	r0, r3
 801a48c:	f7ef fa13 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a490:	f107 0308 	add.w	r3, r7, #8
 801a494:	4619      	mov	r1, r3
 801a496:	4620      	mov	r0, r4
 801a498:	f7ef fa79 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a49c:	f107 0308 	add.w	r3, r7, #8
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7ef fdc0 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	683a      	ldr	r2, [r7, #0]
 801a4aa:	619a      	str	r2, [r3, #24]
}
 801a4ac:	bf00      	nop
 801a4ae:	3714      	adds	r7, #20
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd90      	pop	{r4, r7, pc}
 801a4b4:	08022c84 	.word	0x08022c84

0801a4b8 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801a4b8:	b590      	push	{r4, r7, lr}
 801a4ba:	b085      	sub	sp, #20
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	f103 040c 	add.w	r4, r3, #12
 801a4c8:	f107 0308 	add.w	r3, r7, #8
 801a4cc:	490a      	ldr	r1, [pc, #40]	; (801a4f8 <_ZN14MockNamedValue8setValueEm+0x40>)
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f7ef f9f1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a4d4:	f107 0308 	add.w	r3, r7, #8
 801a4d8:	4619      	mov	r1, r3
 801a4da:	4620      	mov	r0, r4
 801a4dc:	f7ef fa57 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a4e0:	f107 0308 	add.w	r3, r7, #8
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	f7ef fd9e 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	683a      	ldr	r2, [r7, #0]
 801a4ee:	619a      	str	r2, [r3, #24]
}
 801a4f0:	bf00      	nop
 801a4f2:	3714      	adds	r7, #20
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	bd90      	pop	{r4, r7, pc}
 801a4f8:	08022c90 	.word	0x08022c90

0801a4fc <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801a4fc:	b5b0      	push	{r4, r5, r7, lr}
 801a4fe:	b086      	sub	sp, #24
 801a500:	af02      	add	r7, sp, #8
 801a502:	60f8      	str	r0, [r7, #12]
 801a504:	1d3b      	adds	r3, r7, #4
 801a506:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801a50a:	f7f6 fdb7 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801a50e:	4604      	mov	r4, r0
 801a510:	6823      	ldr	r3, [r4, #0]
 801a512:	3368      	adds	r3, #104	; 0x68
 801a514:	681d      	ldr	r5, [r3, #0]
 801a516:	f7f6 fdc1 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a51a:	4603      	mov	r3, r0
 801a51c:	9300      	str	r3, [sp, #0]
 801a51e:	2367      	movs	r3, #103	; 0x67
 801a520:	4a03      	ldr	r2, [pc, #12]	; (801a530 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801a522:	4904      	ldr	r1, [pc, #16]	; (801a534 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801a524:	4620      	mov	r0, r4
 801a526:	47a8      	blx	r5
}
 801a528:	bf00      	nop
 801a52a:	3710      	adds	r7, #16
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bdb0      	pop	{r4, r5, r7, pc}
 801a530:	08022ca4 	.word	0x08022ca4
 801a534:	08022cc0 	.word	0x08022cc0

0801a538 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801a538:	b5b0      	push	{r4, r5, r7, lr}
 801a53a:	b086      	sub	sp, #24
 801a53c:	af02      	add	r7, sp, #8
 801a53e:	60f8      	str	r0, [r7, #12]
 801a540:	1d3b      	adds	r3, r7, #4
 801a542:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801a546:	f7f6 fd99 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801a54a:	4604      	mov	r4, r0
 801a54c:	6823      	ldr	r3, [r4, #0]
 801a54e:	3368      	adds	r3, #104	; 0x68
 801a550:	681d      	ldr	r5, [r3, #0]
 801a552:	f7f6 fda3 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a556:	4603      	mov	r3, r0
 801a558:	9300      	str	r3, [sp, #0]
 801a55a:	236c      	movs	r3, #108	; 0x6c
 801a55c:	4a03      	ldr	r2, [pc, #12]	; (801a56c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801a55e:	4904      	ldr	r1, [pc, #16]	; (801a570 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801a560:	4620      	mov	r0, r4
 801a562:	47a8      	blx	r5
}
 801a564:	bf00      	nop
 801a566:	3710      	adds	r7, #16
 801a568:	46bd      	mov	sp, r7
 801a56a:	bdb0      	pop	{r4, r5, r7, pc}
 801a56c:	08022ca4 	.word	0x08022ca4
 801a570:	08022ce0 	.word	0x08022ce0
 801a574:	00000000 	.word	0x00000000

0801a578 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801a578:	b580      	push	{r7, lr}
 801a57a:	b084      	sub	sp, #16
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	60f8      	str	r0, [r7, #12]
 801a580:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	3328      	adds	r3, #40	; 0x28
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801a5a0 <_ZN14MockNamedValue8setValueEd+0x28>
 801a590:	ed97 0b00 	vldr	d0, [r7]
 801a594:	68f8      	ldr	r0, [r7, #12]
 801a596:	4798      	blx	r3
}
 801a598:	bf00      	nop
 801a59a:	3710      	adds	r7, #16
 801a59c:	46bd      	mov	sp, r7
 801a59e:	bd80      	pop	{r7, pc}
 801a5a0:	47ae147b 	.word	0x47ae147b
 801a5a4:	3f747ae1 	.word	0x3f747ae1

0801a5a8 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801a5a8:	b590      	push	{r4, r7, lr}
 801a5aa:	b089      	sub	sp, #36	; 0x24
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6178      	str	r0, [r7, #20]
 801a5b0:	ed87 0b02 	vstr	d0, [r7, #8]
 801a5b4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801a5b8:	697b      	ldr	r3, [r7, #20]
 801a5ba:	f103 040c 	add.w	r4, r3, #12
 801a5be:	f107 0318 	add.w	r3, r7, #24
 801a5c2:	490e      	ldr	r1, [pc, #56]	; (801a5fc <_ZN14MockNamedValue8setValueEdd+0x54>)
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f7ef f976 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a5ca:	f107 0318 	add.w	r3, r7, #24
 801a5ce:	4619      	mov	r1, r3
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	f7ef f9dc 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a5d6:	f107 0318 	add.w	r3, r7, #24
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f7ef fd23 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801a5e0:	6979      	ldr	r1, [r7, #20]
 801a5e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a5e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801a5ea:	6979      	ldr	r1, [r7, #20]
 801a5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a5f0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801a5f4:	bf00      	nop
 801a5f6:	3724      	adds	r7, #36	; 0x24
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd90      	pop	{r4, r7, pc}
 801a5fc:	08022d0c 	.word	0x08022d0c

0801a600 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801a600:	b590      	push	{r4, r7, lr}
 801a602:	b085      	sub	sp, #20
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
 801a608:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	f103 040c 	add.w	r4, r3, #12
 801a610:	f107 0308 	add.w	r3, r7, #8
 801a614:	490a      	ldr	r1, [pc, #40]	; (801a640 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801a616:	4618      	mov	r0, r3
 801a618:	f7ef f94d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a61c:	f107 0308 	add.w	r3, r7, #8
 801a620:	4619      	mov	r1, r3
 801a622:	4620      	mov	r0, r4
 801a624:	f7ef f9b3 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a628:	f107 0308 	add.w	r3, r7, #8
 801a62c:	4618      	mov	r0, r3
 801a62e:	f7ef fcfa 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	683a      	ldr	r2, [r7, #0]
 801a636:	619a      	str	r2, [r3, #24]
}
 801a638:	bf00      	nop
 801a63a:	3714      	adds	r7, #20
 801a63c:	46bd      	mov	sp, r7
 801a63e:	bd90      	pop	{r4, r7, pc}
 801a640:	08022d14 	.word	0x08022d14

0801a644 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801a644:	b590      	push	{r4, r7, lr}
 801a646:	b085      	sub	sp, #20
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
 801a64c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	f103 040c 	add.w	r4, r3, #12
 801a654:	f107 0308 	add.w	r3, r7, #8
 801a658:	490a      	ldr	r1, [pc, #40]	; (801a684 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801a65a:	4618      	mov	r0, r3
 801a65c:	f7ef f92b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a660:	f107 0308 	add.w	r3, r7, #8
 801a664:	4619      	mov	r1, r3
 801a666:	4620      	mov	r0, r4
 801a668:	f7ef f991 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a66c:	f107 0308 	add.w	r3, r7, #8
 801a670:	4618      	mov	r0, r3
 801a672:	f7ef fcd8 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	683a      	ldr	r2, [r7, #0]
 801a67a:	619a      	str	r2, [r3, #24]
}
 801a67c:	bf00      	nop
 801a67e:	3714      	adds	r7, #20
 801a680:	46bd      	mov	sp, r7
 801a682:	bd90      	pop	{r4, r7, pc}
 801a684:	08022d1c 	.word	0x08022d1c

0801a688 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801a688:	b590      	push	{r4, r7, lr}
 801a68a:	b085      	sub	sp, #20
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
 801a690:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	f103 040c 	add.w	r4, r3, #12
 801a698:	f107 0308 	add.w	r3, r7, #8
 801a69c:	490a      	ldr	r1, [pc, #40]	; (801a6c8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7ef f909 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a6a4:	f107 0308 	add.w	r3, r7, #8
 801a6a8:	4619      	mov	r1, r3
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f7ef f96f 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a6b0:	f107 0308 	add.w	r3, r7, #8
 801a6b4:	4618      	mov	r0, r3
 801a6b6:	f7ef fcb6 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	683a      	ldr	r2, [r7, #0]
 801a6be:	619a      	str	r2, [r3, #24]
}
 801a6c0:	bf00      	nop
 801a6c2:	3714      	adds	r7, #20
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd90      	pop	{r4, r7, pc}
 801a6c8:	08022d28 	.word	0x08022d28

0801a6cc <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801a6cc:	b590      	push	{r4, r7, lr}
 801a6ce:	b085      	sub	sp, #20
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
 801a6d4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	f103 040c 	add.w	r4, r3, #12
 801a6dc:	f107 0308 	add.w	r3, r7, #8
 801a6e0:	490a      	ldr	r1, [pc, #40]	; (801a70c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f7ef f8e7 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a6e8:	f107 0308 	add.w	r3, r7, #8
 801a6ec:	4619      	mov	r1, r3
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	f7ef f94d 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a6f4:	f107 0308 	add.w	r3, r7, #8
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	f7ef fc94 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	683a      	ldr	r2, [r7, #0]
 801a702:	619a      	str	r2, [r3, #24]
}
 801a704:	bf00      	nop
 801a706:	3714      	adds	r7, #20
 801a708:	46bd      	mov	sp, r7
 801a70a:	bd90      	pop	{r4, r7, pc}
 801a70c:	08022d34 	.word	0x08022d34

0801a710 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801a710:	b590      	push	{r4, r7, lr}
 801a712:	b087      	sub	sp, #28
 801a714:	af00      	add	r7, sp, #0
 801a716:	60f8      	str	r0, [r7, #12]
 801a718:	60b9      	str	r1, [r7, #8]
 801a71a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	f103 040c 	add.w	r4, r3, #12
 801a722:	f107 0310 	add.w	r3, r7, #16
 801a726:	490c      	ldr	r1, [pc, #48]	; (801a758 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801a728:	4618      	mov	r0, r3
 801a72a:	f7ef f8c4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a72e:	f107 0310 	add.w	r3, r7, #16
 801a732:	4619      	mov	r1, r3
 801a734:	4620      	mov	r0, r4
 801a736:	f7ef f92a 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a73a:	f107 0310 	add.w	r3, r7, #16
 801a73e:	4618      	mov	r0, r3
 801a740:	f7ef fc71 	bl	800a026 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	68ba      	ldr	r2, [r7, #8]
 801a748:	619a      	str	r2, [r3, #24]
    size_ = size;
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	687a      	ldr	r2, [r7, #4]
 801a74e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801a750:	bf00      	nop
 801a752:	371c      	adds	r7, #28
 801a754:	46bd      	mov	sp, r7
 801a756:	bd90      	pop	{r4, r7, pc}
 801a758:	08022d40 	.word	0x08022d40

0801a75c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b084      	sub	sp, #16
 801a760:	af00      	add	r7, sp, #0
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
    type_ = type;
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	330c      	adds	r3, #12
 801a76c:	68b9      	ldr	r1, [r7, #8]
 801a76e:	4618      	mov	r0, r3
 801a770:	f7ef f90d 	bl	800998e <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	687a      	ldr	r2, [r7, #4]
 801a778:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801a77a:	4b11      	ldr	r3, [pc, #68]	; (801a7c0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d019      	beq.n	801a7b6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801a782:	4b0f      	ldr	r3, [pc, #60]	; (801a7c0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801a784:	681a      	ldr	r2, [r3, #0]
 801a786:	4b0e      	ldr	r3, [pc, #56]	; (801a7c0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	3314      	adds	r3, #20
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	68b9      	ldr	r1, [r7, #8]
 801a792:	4610      	mov	r0, r2
 801a794:	4798      	blx	r3
 801a796:	4602      	mov	r2, r0
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801a79c:	4b08      	ldr	r3, [pc, #32]	; (801a7c0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801a79e:	681a      	ldr	r2, [r3, #0]
 801a7a0:	4b07      	ldr	r3, [pc, #28]	; (801a7c0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	3318      	adds	r3, #24
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	68b9      	ldr	r1, [r7, #8]
 801a7ac:	4610      	mov	r0, r2
 801a7ae:	4798      	blx	r3
 801a7b0:	4602      	mov	r2, r0
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801a7b6:	bf00      	nop
 801a7b8:	3710      	adds	r7, #16
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	bd80      	pop	{r7, pc}
 801a7be:	bf00      	nop
 801a7c0:	20000c70 	.word	0x20000c70

0801a7c4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b084      	sub	sp, #16
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	607a      	str	r2, [r7, #4]
    type_ = type;
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	330c      	adds	r3, #12
 801a7d4:	68b9      	ldr	r1, [r7, #8]
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	f7ef f8d9 	bl	800998e <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	687a      	ldr	r2, [r7, #4]
 801a7e0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801a7e2:	4b11      	ldr	r3, [pc, #68]	; (801a828 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d019      	beq.n	801a81e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801a7ea:	4b0f      	ldr	r3, [pc, #60]	; (801a828 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801a7ec:	681a      	ldr	r2, [r3, #0]
 801a7ee:	4b0e      	ldr	r3, [pc, #56]	; (801a828 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	3314      	adds	r3, #20
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	68b9      	ldr	r1, [r7, #8]
 801a7fa:	4610      	mov	r0, r2
 801a7fc:	4798      	blx	r3
 801a7fe:	4602      	mov	r2, r0
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801a804:	4b08      	ldr	r3, [pc, #32]	; (801a828 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	4b07      	ldr	r3, [pc, #28]	; (801a828 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	3318      	adds	r3, #24
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	68b9      	ldr	r1, [r7, #8]
 801a814:	4610      	mov	r0, r2
 801a816:	4798      	blx	r3
 801a818:	4602      	mov	r2, r0
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801a81e:	bf00      	nop
 801a820:	3710      	adds	r7, #16
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	20000c70 	.word	0x20000c70

0801a82c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801a82c:	b480      	push	{r7}
 801a82e:	b083      	sub	sp, #12
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	6039      	str	r1, [r7, #0]
    size_ = size;
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	683a      	ldr	r2, [r7, #0]
 801a83a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801a83c:	bf00      	nop
 801a83e:	370c      	adds	r7, #12
 801a840:	46bd      	mov	sp, r7
 801a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a846:	4770      	bx	lr

0801a848 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801a848:	b590      	push	{r4, r7, lr}
 801a84a:	b085      	sub	sp, #20
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	6039      	str	r1, [r7, #0]
    name_ = name;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	1d1c      	adds	r4, r3, #4
 801a856:	f107 0308 	add.w	r3, r7, #8
 801a85a:	6839      	ldr	r1, [r7, #0]
 801a85c:	4618      	mov	r0, r3
 801a85e:	f7ef f82a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a862:	f107 0308 	add.w	r3, r7, #8
 801a866:	4619      	mov	r1, r3
 801a868:	4620      	mov	r0, r4
 801a86a:	f7ef f890 	bl	800998e <_ZN12SimpleStringaSERKS_>
 801a86e:	f107 0308 	add.w	r3, r7, #8
 801a872:	4618      	mov	r0, r3
 801a874:	f7ef fbd7 	bl	800a026 <_ZN12SimpleStringD1Ev>
}
 801a878:	bf00      	nop
 801a87a:	3714      	adds	r7, #20
 801a87c:	46bd      	mov	sp, r7
 801a87e:	bd90      	pop	{r4, r7, pc}

0801a880 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
 801a888:	6039      	str	r1, [r7, #0]
    return name_;
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	3304      	adds	r3, #4
 801a88e:	4619      	mov	r1, r3
 801a890:	6878      	ldr	r0, [r7, #4]
 801a892:	f7ef f864 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	3708      	adds	r7, #8
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd80      	pop	{r7, pc}

0801a89e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801a89e:	b580      	push	{r7, lr}
 801a8a0:	b082      	sub	sp, #8
 801a8a2:	af00      	add	r7, sp, #0
 801a8a4:	6078      	str	r0, [r7, #4]
 801a8a6:	6039      	str	r1, [r7, #0]
    return type_;
 801a8a8:	683b      	ldr	r3, [r7, #0]
 801a8aa:	330c      	adds	r3, #12
 801a8ac:	4619      	mov	r1, r3
 801a8ae:	6878      	ldr	r0, [r7, #4]
 801a8b0:	f7ef f855 	bl	800995e <_ZN12SimpleStringC1ERKS_>
}
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	3708      	adds	r7, #8
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}

0801a8bc <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8be:	b087      	sub	sp, #28
 801a8c0:	af04      	add	r7, sp, #16
 801a8c2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801a8c4:	f7f6 fbda 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801a8c8:	4604      	mov	r4, r0
 801a8ca:	6823      	ldr	r3, [r4, #0]
 801a8cc:	3324      	adds	r3, #36	; 0x24
 801a8ce:	681d      	ldr	r5, [r3, #0]
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	330c      	adds	r3, #12
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f7ef fb79 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a8da:	4606      	mov	r6, r0
 801a8dc:	f7f6 fbde 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	9302      	str	r3, [sp, #8]
 801a8e4:	23c8      	movs	r3, #200	; 0xc8
 801a8e6:	9301      	str	r3, [sp, #4]
 801a8e8:	4b06      	ldr	r3, [pc, #24]	; (801a904 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801a8ea:	9300      	str	r3, [sp, #0]
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	4632      	mov	r2, r6
 801a8f0:	4905      	ldr	r1, [pc, #20]	; (801a908 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801a8f2:	4620      	mov	r0, r4
 801a8f4:	47a8      	blx	r5
    return value_.boolValue_;
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	7e1b      	ldrb	r3, [r3, #24]
}
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	370c      	adds	r7, #12
 801a8fe:	46bd      	mov	sp, r7
 801a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a902:	bf00      	nop
 801a904:	08022ca4 	.word	0x08022ca4
 801a908:	08022c6c 	.word	0x08022c6c

0801a90c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801a90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a90e:	b089      	sub	sp, #36	; 0x24
 801a910:	af04      	add	r7, sp, #16
 801a912:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	f103 040c 	add.w	r4, r3, #12
 801a91a:	f107 0308 	add.w	r3, r7, #8
 801a91e:	4920      	ldr	r1, [pc, #128]	; (801a9a0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801a920:	4618      	mov	r0, r3
 801a922:	f7ee ffc8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801a926:	2501      	movs	r5, #1
 801a928:	f107 0308 	add.w	r3, r7, #8
 801a92c:	4619      	mov	r1, r3
 801a92e:	4620      	mov	r0, r4
 801a930:	f7ef fb85 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801a934:	4603      	mov	r3, r0
 801a936:	2b00      	cmp	r3, #0
 801a938:	d005      	beq.n	801a946 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	699b      	ldr	r3, [r3, #24]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	db01      	blt.n	801a946 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801a942:	2401      	movs	r4, #1
 801a944:	e000      	b.n	801a948 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801a946:	2400      	movs	r4, #0
 801a948:	2d00      	cmp	r5, #0
 801a94a:	d004      	beq.n	801a956 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801a94c:	f107 0308 	add.w	r3, r7, #8
 801a950:	4618      	mov	r0, r3
 801a952:	f7ef fb68 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801a956:	2c00      	cmp	r4, #0
 801a958:	d002      	beq.n	801a960 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	699b      	ldr	r3, [r3, #24]
 801a95e:	e01a      	b.n	801a996 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801a960:	f7f6 fb8c 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801a964:	4604      	mov	r4, r0
 801a966:	6823      	ldr	r3, [r4, #0]
 801a968:	3324      	adds	r3, #36	; 0x24
 801a96a:	681d      	ldr	r5, [r3, #0]
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	330c      	adds	r3, #12
 801a970:	4618      	mov	r0, r3
 801a972:	f7ef fb2b 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a976:	4606      	mov	r6, r0
 801a978:	f7f6 fb90 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a97c:	4603      	mov	r3, r0
 801a97e:	9302      	str	r3, [sp, #8]
 801a980:	23d2      	movs	r3, #210	; 0xd2
 801a982:	9301      	str	r3, [sp, #4]
 801a984:	4b07      	ldr	r3, [pc, #28]	; (801a9a4 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801a986:	9300      	str	r3, [sp, #0]
 801a988:	2300      	movs	r3, #0
 801a98a:	4632      	mov	r2, r6
 801a98c:	4906      	ldr	r1, [pc, #24]	; (801a9a8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801a98e:	4620      	mov	r0, r4
 801a990:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	699b      	ldr	r3, [r3, #24]
    }
}
 801a996:	4618      	mov	r0, r3
 801a998:	3714      	adds	r7, #20
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	08022c68 	.word	0x08022c68
 801a9a4:	08022ca4 	.word	0x08022ca4
 801a9a8:	08022c74 	.word	0x08022c74

0801a9ac <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9ae:	b087      	sub	sp, #28
 801a9b0:	af04      	add	r7, sp, #16
 801a9b2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801a9b4:	f7f6 fb62 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801a9b8:	4604      	mov	r4, r0
 801a9ba:	6823      	ldr	r3, [r4, #0]
 801a9bc:	3324      	adds	r3, #36	; 0x24
 801a9be:	681d      	ldr	r5, [r3, #0]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	330c      	adds	r3, #12
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	f7ef fb01 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801a9ca:	4606      	mov	r6, r0
 801a9cc:	f7f6 fb66 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	9302      	str	r3, [sp, #8]
 801a9d4:	23d9      	movs	r3, #217	; 0xd9
 801a9d6:	9301      	str	r3, [sp, #4]
 801a9d8:	4b06      	ldr	r3, [pc, #24]	; (801a9f4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	2300      	movs	r3, #0
 801a9de:	4632      	mov	r2, r6
 801a9e0:	4905      	ldr	r1, [pc, #20]	; (801a9f8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801a9e2:	4620      	mov	r0, r4
 801a9e4:	47a8      	blx	r5
    return value_.intValue_;
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	699b      	ldr	r3, [r3, #24]
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	370c      	adds	r7, #12
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9f2:	bf00      	nop
 801a9f4:	08022ca4 	.word	0x08022ca4
 801a9f8:	08022c68 	.word	0x08022c68

0801a9fc <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9fe:	b08b      	sub	sp, #44	; 0x2c
 801aa00:	af04      	add	r7, sp, #16
 801aa02:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	f103 040c 	add.w	r4, r3, #12
 801aa0a:	f107 0308 	add.w	r3, r7, #8
 801aa0e:	4928      	ldr	r1, [pc, #160]	; (801aab0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801aa10:	4618      	mov	r0, r3
 801aa12:	f7ee ff50 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801aa16:	f107 0308 	add.w	r3, r7, #8
 801aa1a:	4619      	mov	r1, r3
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	f7ef fb0e 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801aa22:	4603      	mov	r3, r0
 801aa24:	461c      	mov	r4, r3
 801aa26:	f107 0308 	add.w	r3, r7, #8
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	f7ef fafb 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801aa30:	2c00      	cmp	r4, #0
 801aa32:	d002      	beq.n	801aa3a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	699b      	ldr	r3, [r3, #24]
 801aa38:	e035      	b.n	801aaa6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	f103 040c 	add.w	r4, r3, #12
 801aa40:	f107 0310 	add.w	r3, r7, #16
 801aa44:	491b      	ldr	r1, [pc, #108]	; (801aab4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801aa46:	4618      	mov	r0, r3
 801aa48:	f7ee ff35 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801aa4c:	f107 0310 	add.w	r3, r7, #16
 801aa50:	4619      	mov	r1, r3
 801aa52:	4620      	mov	r0, r4
 801aa54:	f7ef faf3 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	461c      	mov	r4, r3
 801aa5c:	f107 0310 	add.w	r3, r7, #16
 801aa60:	4618      	mov	r0, r3
 801aa62:	f7ef fae0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801aa66:	2c00      	cmp	r4, #0
 801aa68:	d002      	beq.n	801aa70 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	699b      	ldr	r3, [r3, #24]
 801aa6e:	e01a      	b.n	801aaa6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801aa70:	f7f6 fb04 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801aa74:	4604      	mov	r4, r0
 801aa76:	6823      	ldr	r3, [r4, #0]
 801aa78:	3324      	adds	r3, #36	; 0x24
 801aa7a:	681d      	ldr	r5, [r3, #0]
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	330c      	adds	r3, #12
 801aa80:	4618      	mov	r0, r3
 801aa82:	f7ef faa3 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801aa86:	4606      	mov	r6, r0
 801aa88:	f7f6 fb08 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801aa8c:	4603      	mov	r3, r0
 801aa8e:	9302      	str	r3, [sp, #8]
 801aa90:	23e5      	movs	r3, #229	; 0xe5
 801aa92:	9301      	str	r3, [sp, #4]
 801aa94:	4b08      	ldr	r3, [pc, #32]	; (801aab8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	2300      	movs	r3, #0
 801aa9a:	4632      	mov	r2, r6
 801aa9c:	4907      	ldr	r1, [pc, #28]	; (801aabc <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	47a8      	blx	r5
        return value_.longIntValue_;
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	699b      	ldr	r3, [r3, #24]
    }
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	371c      	adds	r7, #28
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaae:	bf00      	nop
 801aab0:	08022c68 	.word	0x08022c68
 801aab4:	08022c74 	.word	0x08022c74
 801aab8:	08022ca4 	.word	0x08022ca4
 801aabc:	08022c84 	.word	0x08022c84

0801aac0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801aac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aac2:	b08d      	sub	sp, #52	; 0x34
 801aac4:	af04      	add	r7, sp, #16
 801aac6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	f103 040c 	add.w	r4, r3, #12
 801aace:	f107 0308 	add.w	r3, r7, #8
 801aad2:	4940      	ldr	r1, [pc, #256]	; (801abd4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801aad4:	4618      	mov	r0, r3
 801aad6:	f7ee feee 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801aada:	f107 0308 	add.w	r3, r7, #8
 801aade:	4619      	mov	r1, r3
 801aae0:	4620      	mov	r0, r4
 801aae2:	f7ef faac 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801aae6:	4603      	mov	r3, r0
 801aae8:	461c      	mov	r4, r3
 801aaea:	f107 0308 	add.w	r3, r7, #8
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f7ef fa99 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801aaf4:	2c00      	cmp	r4, #0
 801aaf6:	d002      	beq.n	801aafe <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	699b      	ldr	r3, [r3, #24]
 801aafc:	e066      	b.n	801abcc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	f103 040c 	add.w	r4, r3, #12
 801ab04:	f107 0310 	add.w	r3, r7, #16
 801ab08:	4933      	ldr	r1, [pc, #204]	; (801abd8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	f7ee fed3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801ab10:	2501      	movs	r5, #1
 801ab12:	f107 0310 	add.w	r3, r7, #16
 801ab16:	4619      	mov	r1, r3
 801ab18:	4620      	mov	r0, r4
 801ab1a:	f7ef fa90 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d005      	beq.n	801ab30 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	699b      	ldr	r3, [r3, #24]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	db01      	blt.n	801ab30 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801ab2c:	2401      	movs	r4, #1
 801ab2e:	e000      	b.n	801ab32 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801ab30:	2400      	movs	r4, #0
 801ab32:	2d00      	cmp	r5, #0
 801ab34:	d004      	beq.n	801ab40 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801ab36:	f107 0310 	add.w	r3, r7, #16
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	f7ef fa73 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801ab40:	2c00      	cmp	r4, #0
 801ab42:	d002      	beq.n	801ab4a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	699b      	ldr	r3, [r3, #24]
 801ab48:	e040      	b.n	801abcc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	f103 040c 	add.w	r4, r3, #12
 801ab50:	f107 0318 	add.w	r3, r7, #24
 801ab54:	4921      	ldr	r1, [pc, #132]	; (801abdc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801ab56:	4618      	mov	r0, r3
 801ab58:	f7ee fead 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801ab5c:	2501      	movs	r5, #1
 801ab5e:	f107 0318 	add.w	r3, r7, #24
 801ab62:	4619      	mov	r1, r3
 801ab64:	4620      	mov	r0, r4
 801ab66:	f7ef fa6a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d005      	beq.n	801ab7c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	699b      	ldr	r3, [r3, #24]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	db01      	blt.n	801ab7c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801ab78:	2401      	movs	r4, #1
 801ab7a:	e000      	b.n	801ab7e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801ab7c:	2400      	movs	r4, #0
 801ab7e:	2d00      	cmp	r5, #0
 801ab80:	d004      	beq.n	801ab8c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801ab82:	f107 0318 	add.w	r3, r7, #24
 801ab86:	4618      	mov	r0, r3
 801ab88:	f7ef fa4d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801ab8c:	2c00      	cmp	r4, #0
 801ab8e:	d002      	beq.n	801ab96 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	699b      	ldr	r3, [r3, #24]
 801ab94:	e01a      	b.n	801abcc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801ab96:	f7f6 fa71 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	6823      	ldr	r3, [r4, #0]
 801ab9e:	3324      	adds	r3, #36	; 0x24
 801aba0:	681d      	ldr	r5, [r3, #0]
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	330c      	adds	r3, #12
 801aba6:	4618      	mov	r0, r3
 801aba8:	f7ef fa10 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801abac:	4606      	mov	r6, r0
 801abae:	f7f6 fa75 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801abb2:	4603      	mov	r3, r0
 801abb4:	9302      	str	r3, [sp, #8]
 801abb6:	23f4      	movs	r3, #244	; 0xf4
 801abb8:	9301      	str	r3, [sp, #4]
 801abba:	4b09      	ldr	r3, [pc, #36]	; (801abe0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801abbc:	9300      	str	r3, [sp, #0]
 801abbe:	2300      	movs	r3, #0
 801abc0:	4632      	mov	r2, r6
 801abc2:	4908      	ldr	r1, [pc, #32]	; (801abe4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801abc4:	4620      	mov	r0, r4
 801abc6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	699b      	ldr	r3, [r3, #24]
    }
}
 801abcc:	4618      	mov	r0, r3
 801abce:	3724      	adds	r7, #36	; 0x24
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abd4:	08022c74 	.word	0x08022c74
 801abd8:	08022c68 	.word	0x08022c68
 801abdc:	08022c84 	.word	0x08022c84
 801abe0:	08022ca4 	.word	0x08022ca4
 801abe4:	08022c90 	.word	0x08022c90

0801abe8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801abe8:	b5b0      	push	{r4, r5, r7, lr}
 801abea:	b084      	sub	sp, #16
 801abec:	af02      	add	r7, sp, #8
 801abee:	6078      	str	r0, [r7, #4]
 801abf0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801abf2:	f7f6 fa43 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801abf6:	4604      	mov	r4, r0
 801abf8:	6823      	ldr	r3, [r4, #0]
 801abfa:	3368      	adds	r3, #104	; 0x68
 801abfc:	681d      	ldr	r5, [r3, #0]
 801abfe:	f7f6 fa4d 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac02:	4603      	mov	r3, r0
 801ac04:	9300      	str	r3, [sp, #0]
 801ac06:	f240 1323 	movw	r3, #291	; 0x123
 801ac0a:	4a06      	ldr	r2, [pc, #24]	; (801ac24 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801ac0c:	4906      	ldr	r1, [pc, #24]	; (801ac28 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801ac0e:	4620      	mov	r0, r4
 801ac10:	47a8      	blx	r5
    return cpputest_longlong(0);
 801ac12:	2100      	movs	r1, #0
 801ac14:	6878      	ldr	r0, [r7, #4]
 801ac16:	f7ec fe85 	bl	8007924 <_ZN17cpputest_longlongC1Ei>
}
 801ac1a:	6878      	ldr	r0, [r7, #4]
 801ac1c:	3708      	adds	r7, #8
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bdb0      	pop	{r4, r5, r7, pc}
 801ac22:	bf00      	nop
 801ac24:	08022ca4 	.word	0x08022ca4
 801ac28:	08022cc0 	.word	0x08022cc0

0801ac2c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801ac2c:	b5b0      	push	{r4, r5, r7, lr}
 801ac2e:	b084      	sub	sp, #16
 801ac30:	af02      	add	r7, sp, #8
 801ac32:	6078      	str	r0, [r7, #4]
 801ac34:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801ac36:	f7f6 fa21 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ac3a:	4604      	mov	r4, r0
 801ac3c:	6823      	ldr	r3, [r4, #0]
 801ac3e:	3368      	adds	r3, #104	; 0x68
 801ac40:	681d      	ldr	r5, [r3, #0]
 801ac42:	f7f6 fa2b 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac46:	4603      	mov	r3, r0
 801ac48:	9300      	str	r3, [sp, #0]
 801ac4a:	f240 1329 	movw	r3, #297	; 0x129
 801ac4e:	4a06      	ldr	r2, [pc, #24]	; (801ac68 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801ac50:	4906      	ldr	r1, [pc, #24]	; (801ac6c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801ac52:	4620      	mov	r0, r4
 801ac54:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801ac56:	2100      	movs	r1, #0
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f7ec fe6f 	bl	800793c <_ZN18cpputest_ulonglongC1Ei>
}
 801ac5e:	6878      	ldr	r0, [r7, #4]
 801ac60:	3708      	adds	r7, #8
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bdb0      	pop	{r4, r5, r7, pc}
 801ac66:	bf00      	nop
 801ac68:	08022ca4 	.word	0x08022ca4
 801ac6c:	08022ce0 	.word	0x08022ce0

0801ac70 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac72:	b087      	sub	sp, #28
 801ac74:	af04      	add	r7, sp, #16
 801ac76:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801ac78:	f7f6 fa00 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ac7c:	4604      	mov	r4, r0
 801ac7e:	6823      	ldr	r3, [r4, #0]
 801ac80:	3324      	adds	r3, #36	; 0x24
 801ac82:	681d      	ldr	r5, [r3, #0]
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	330c      	adds	r3, #12
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f7ef f99f 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801ac8e:	4606      	mov	r6, r0
 801ac90:	f7f6 fa04 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac94:	4603      	mov	r3, r0
 801ac96:	9302      	str	r3, [sp, #8]
 801ac98:	f240 1331 	movw	r3, #305	; 0x131
 801ac9c:	9301      	str	r3, [sp, #4]
 801ac9e:	4b09      	ldr	r3, [pc, #36]	; (801acc4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801aca0:	9300      	str	r3, [sp, #0]
 801aca2:	2300      	movs	r3, #0
 801aca4:	4632      	mov	r2, r6
 801aca6:	4908      	ldr	r1, [pc, #32]	; (801acc8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801aca8:	4620      	mov	r0, r4
 801acaa:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801acb2:	ec43 2b17 	vmov	d7, r2, r3
}
 801acb6:	eeb0 0a47 	vmov.f32	s0, s14
 801acba:	eef0 0a67 	vmov.f32	s1, s15
 801acbe:	370c      	adds	r7, #12
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acc4:	08022ca4 	.word	0x08022ca4
 801acc8:	08022d0c 	.word	0x08022d0c

0801accc <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801accc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acce:	b087      	sub	sp, #28
 801acd0:	af04      	add	r7, sp, #16
 801acd2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801acd4:	f7f6 f9d2 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801acd8:	4604      	mov	r4, r0
 801acda:	6823      	ldr	r3, [r4, #0]
 801acdc:	3324      	adds	r3, #36	; 0x24
 801acde:	681d      	ldr	r5, [r3, #0]
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	330c      	adds	r3, #12
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7ef f971 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801acea:	4606      	mov	r6, r0
 801acec:	f7f6 f9d6 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801acf0:	4603      	mov	r3, r0
 801acf2:	9302      	str	r3, [sp, #8]
 801acf4:	f240 1337 	movw	r3, #311	; 0x137
 801acf8:	9301      	str	r3, [sp, #4]
 801acfa:	4b09      	ldr	r3, [pc, #36]	; (801ad20 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801acfc:	9300      	str	r3, [sp, #0]
 801acfe:	2300      	movs	r3, #0
 801ad00:	4632      	mov	r2, r6
 801ad02:	4908      	ldr	r1, [pc, #32]	; (801ad24 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801ad04:	4620      	mov	r0, r4
 801ad06:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ad0e:	ec43 2b17 	vmov	d7, r2, r3
}
 801ad12:	eeb0 0a47 	vmov.f32	s0, s14
 801ad16:	eef0 0a67 	vmov.f32	s1, s15
 801ad1a:	370c      	adds	r7, #12
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad20:	08022ca4 	.word	0x08022ca4
 801ad24:	08022d0c 	.word	0x08022d0c

0801ad28 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad2a:	b087      	sub	sp, #28
 801ad2c:	af04      	add	r7, sp, #16
 801ad2e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801ad30:	f7f6 f9a4 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ad34:	4604      	mov	r4, r0
 801ad36:	6823      	ldr	r3, [r4, #0]
 801ad38:	3324      	adds	r3, #36	; 0x24
 801ad3a:	681d      	ldr	r5, [r3, #0]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	330c      	adds	r3, #12
 801ad40:	4618      	mov	r0, r3
 801ad42:	f7ef f943 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801ad46:	4606      	mov	r6, r0
 801ad48:	f7f6 f9a8 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	9302      	str	r3, [sp, #8]
 801ad50:	f240 133d 	movw	r3, #317	; 0x13d
 801ad54:	9301      	str	r3, [sp, #4]
 801ad56:	4b06      	ldr	r3, [pc, #24]	; (801ad70 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801ad58:	9300      	str	r3, [sp, #0]
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	4632      	mov	r2, r6
 801ad5e:	4905      	ldr	r1, [pc, #20]	; (801ad74 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801ad60:	4620      	mov	r0, r4
 801ad62:	47a8      	blx	r5
    return value_.stringValue_;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	699b      	ldr	r3, [r3, #24]
}
 801ad68:	4618      	mov	r0, r3
 801ad6a:	370c      	adds	r7, #12
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad70:	08022ca4 	.word	0x08022ca4
 801ad74:	08022d34 	.word	0x08022d34

0801ad78 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad7a:	b087      	sub	sp, #28
 801ad7c:	af04      	add	r7, sp, #16
 801ad7e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801ad80:	f7f6 f97c 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ad84:	4604      	mov	r4, r0
 801ad86:	6823      	ldr	r3, [r4, #0]
 801ad88:	3324      	adds	r3, #36	; 0x24
 801ad8a:	681d      	ldr	r5, [r3, #0]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	330c      	adds	r3, #12
 801ad90:	4618      	mov	r0, r3
 801ad92:	f7ef f91b 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801ad96:	4606      	mov	r6, r0
 801ad98:	f7f6 f980 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	9302      	str	r3, [sp, #8]
 801ada0:	f240 1343 	movw	r3, #323	; 0x143
 801ada4:	9301      	str	r3, [sp, #4]
 801ada6:	4b06      	ldr	r3, [pc, #24]	; (801adc0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801ada8:	9300      	str	r3, [sp, #0]
 801adaa:	2300      	movs	r3, #0
 801adac:	4632      	mov	r2, r6
 801adae:	4905      	ldr	r1, [pc, #20]	; (801adc4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801adb0:	4620      	mov	r0, r4
 801adb2:	47a8      	blx	r5
    return value_.pointerValue_;
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	699b      	ldr	r3, [r3, #24]
}
 801adb8:	4618      	mov	r0, r3
 801adba:	370c      	adds	r7, #12
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adc0:	08022ca4 	.word	0x08022ca4
 801adc4:	08022d14 	.word	0x08022d14

0801adc8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adca:	b087      	sub	sp, #28
 801adcc:	af04      	add	r7, sp, #16
 801adce:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801add0:	f7f6 f954 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801add4:	4604      	mov	r4, r0
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	3324      	adds	r3, #36	; 0x24
 801adda:	681d      	ldr	r5, [r3, #0]
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	330c      	adds	r3, #12
 801ade0:	4618      	mov	r0, r3
 801ade2:	f7ef f8f3 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801ade6:	4606      	mov	r6, r0
 801ade8:	f7f6 f958 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801adec:	4603      	mov	r3, r0
 801adee:	9302      	str	r3, [sp, #8]
 801adf0:	f240 1349 	movw	r3, #329	; 0x149
 801adf4:	9301      	str	r3, [sp, #4]
 801adf6:	4b06      	ldr	r3, [pc, #24]	; (801ae10 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801adf8:	9300      	str	r3, [sp, #0]
 801adfa:	2300      	movs	r3, #0
 801adfc:	4632      	mov	r2, r6
 801adfe:	4905      	ldr	r1, [pc, #20]	; (801ae14 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801ae00:	4620      	mov	r0, r4
 801ae02:	47a8      	blx	r5
    return value_.pointerValue_;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	699b      	ldr	r3, [r3, #24]
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	370c      	adds	r7, #12
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae10:	08022ca4 	.word	0x08022ca4
 801ae14:	08022d1c 	.word	0x08022d1c

0801ae18 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801ae18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae1a:	b087      	sub	sp, #28
 801ae1c:	af04      	add	r7, sp, #16
 801ae1e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801ae20:	f7f6 f92c 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ae24:	4604      	mov	r4, r0
 801ae26:	6823      	ldr	r3, [r4, #0]
 801ae28:	3324      	adds	r3, #36	; 0x24
 801ae2a:	681d      	ldr	r5, [r3, #0]
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	330c      	adds	r3, #12
 801ae30:	4618      	mov	r0, r3
 801ae32:	f7ef f8cb 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801ae36:	4606      	mov	r6, r0
 801ae38:	f7f6 f930 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae3c:	4603      	mov	r3, r0
 801ae3e:	9302      	str	r3, [sp, #8]
 801ae40:	f240 134f 	movw	r3, #335	; 0x14f
 801ae44:	9301      	str	r3, [sp, #4]
 801ae46:	4b06      	ldr	r3, [pc, #24]	; (801ae60 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801ae48:	9300      	str	r3, [sp, #0]
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	4632      	mov	r2, r6
 801ae4e:	4905      	ldr	r1, [pc, #20]	; (801ae64 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801ae50:	4620      	mov	r0, r4
 801ae52:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	699b      	ldr	r3, [r3, #24]
}
 801ae58:	4618      	mov	r0, r3
 801ae5a:	370c      	adds	r7, #12
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae60:	08022ca4 	.word	0x08022ca4
 801ae64:	08022d28 	.word	0x08022d28

0801ae68 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae6a:	b087      	sub	sp, #28
 801ae6c:	af04      	add	r7, sp, #16
 801ae6e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801ae70:	f7f6 f904 	bl	801107c <_ZN10UtestShell10getCurrentEv>
 801ae74:	4604      	mov	r4, r0
 801ae76:	6823      	ldr	r3, [r4, #0]
 801ae78:	3324      	adds	r3, #36	; 0x24
 801ae7a:	681d      	ldr	r5, [r3, #0]
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	330c      	adds	r3, #12
 801ae80:	4618      	mov	r0, r3
 801ae82:	f7ef f8a3 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801ae86:	4606      	mov	r6, r0
 801ae88:	f7f6 f908 	bl	801109c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	9302      	str	r3, [sp, #8]
 801ae90:	f240 1355 	movw	r3, #341	; 0x155
 801ae94:	9301      	str	r3, [sp, #4]
 801ae96:	4b06      	ldr	r3, [pc, #24]	; (801aeb0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801ae98:	9300      	str	r3, [sp, #0]
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	4632      	mov	r2, r6
 801ae9e:	4905      	ldr	r1, [pc, #20]	; (801aeb4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801aea0:	4620      	mov	r0, r4
 801aea2:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	699b      	ldr	r3, [r3, #24]
}
 801aea8:	4618      	mov	r0, r3
 801aeaa:	370c      	adds	r7, #12
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeb0:	08022ca4 	.word	0x08022ca4
 801aeb4:	08022d40 	.word	0x08022d40

0801aeb8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801aeb8:	b480      	push	{r7}
 801aeba:	b083      	sub	sp, #12
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	699b      	ldr	r3, [r3, #24]
}
 801aec4:	4618      	mov	r0, r3
 801aec6:	370c      	adds	r7, #12
 801aec8:	46bd      	mov	sp, r7
 801aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aece:	4770      	bx	lr

0801aed0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801aed0:	b480      	push	{r7}
 801aed2:	b083      	sub	sp, #12
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	699b      	ldr	r3, [r3, #24]
}
 801aedc:	4618      	mov	r0, r3
 801aede:	370c      	adds	r7, #12
 801aee0:	46bd      	mov	sp, r7
 801aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee6:	4770      	bx	lr

0801aee8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801aee8:	b480      	push	{r7}
 801aeea:	b083      	sub	sp, #12
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	6078      	str	r0, [r7, #4]
    return size_;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	370c      	adds	r7, #12
 801aef8:	46bd      	mov	sp, r7
 801aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefe:	4770      	bx	lr

0801af00 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801af00:	b480      	push	{r7}
 801af02:	b083      	sub	sp, #12
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
    return comparator_;
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801af0c:	4618      	mov	r0, r3
 801af0e:	370c      	adds	r7, #12
 801af10:	46bd      	mov	sp, r7
 801af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af16:	4770      	bx	lr

0801af18 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801af18:	b480      	push	{r7}
 801af1a:	b083      	sub	sp, #12
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
    return copier_;
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801af24:	4618      	mov	r0, r3
 801af26:	370c      	adds	r7, #12
 801af28:	46bd      	mov	sp, r7
 801af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2e:	4770      	bx	lr

0801af30 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801af30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af32:	b0cd      	sub	sp, #308	; 0x134
 801af34:	af00      	add	r7, sp, #0
 801af36:	1d3b      	adds	r3, r7, #4
 801af38:	6018      	str	r0, [r3, #0]
 801af3a:	463b      	mov	r3, r7
 801af3c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801af3e:	2500      	movs	r5, #0
 801af40:	1d3b      	adds	r3, r7, #4
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	f103 040c 	add.w	r4, r3, #12
 801af48:	f107 0308 	add.w	r3, r7, #8
 801af4c:	49bb      	ldr	r1, [pc, #748]	; (801b23c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801af4e:	4618      	mov	r0, r3
 801af50:	f7ee fcb1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801af54:	2601      	movs	r6, #1
 801af56:	f107 0308 	add.w	r3, r7, #8
 801af5a:	4619      	mov	r1, r3
 801af5c:	4620      	mov	r0, r4
 801af5e:	f7ef f86e 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801af62:	4603      	mov	r3, r0
 801af64:	2b00      	cmp	r3, #0
 801af66:	d015      	beq.n	801af94 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801af68:	463b      	mov	r3, r7
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	f103 040c 	add.w	r4, r3, #12
 801af70:	f107 0310 	add.w	r3, r7, #16
 801af74:	49b2      	ldr	r1, [pc, #712]	; (801b240 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801af76:	4618      	mov	r0, r3
 801af78:	f7ee fc9d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801af7c:	2501      	movs	r5, #1
 801af7e:	f107 0310 	add.w	r3, r7, #16
 801af82:	4619      	mov	r1, r3
 801af84:	4620      	mov	r0, r4
 801af86:	f7ef f85a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801af8a:	4603      	mov	r3, r0
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d001      	beq.n	801af94 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801af90:	2401      	movs	r4, #1
 801af92:	e000      	b.n	801af96 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801af94:	2400      	movs	r4, #0
 801af96:	2d00      	cmp	r5, #0
 801af98:	d004      	beq.n	801afa4 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801af9a:	f107 0310 	add.w	r3, r7, #16
 801af9e:	4618      	mov	r0, r3
 801afa0:	f7ef f841 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801afa4:	2e00      	cmp	r6, #0
 801afa6:	d004      	beq.n	801afb2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801afa8:	f107 0308 	add.w	r3, r7, #8
 801afac:	4618      	mov	r0, r3
 801afae:	f7ef f83a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801afb2:	2c00      	cmp	r4, #0
 801afb4:	d00c      	beq.n	801afd0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801afb6:	1d3b      	adds	r3, r7, #4
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	699a      	ldr	r2, [r3, #24]
 801afbc:	463b      	mov	r3, r7
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	699b      	ldr	r3, [r3, #24]
 801afc2:	429a      	cmp	r2, r3
 801afc4:	bf0c      	ite	eq
 801afc6:	2301      	moveq	r3, #1
 801afc8:	2300      	movne	r3, #0
 801afca:	b2dc      	uxtb	r4, r3
 801afcc:	f000 bd60 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801afd0:	2500      	movs	r5, #0
 801afd2:	1d3b      	adds	r3, r7, #4
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	f103 040c 	add.w	r4, r3, #12
 801afda:	f107 0318 	add.w	r3, r7, #24
 801afde:	4998      	ldr	r1, [pc, #608]	; (801b240 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801afe0:	4618      	mov	r0, r3
 801afe2:	f7ee fc68 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801afe6:	2601      	movs	r6, #1
 801afe8:	f107 0318 	add.w	r3, r7, #24
 801afec:	4619      	mov	r1, r3
 801afee:	4620      	mov	r0, r4
 801aff0:	f7ef f825 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801aff4:	4603      	mov	r3, r0
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d015      	beq.n	801b026 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801affa:	463b      	mov	r3, r7
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	f103 040c 	add.w	r4, r3, #12
 801b002:	f107 0320 	add.w	r3, r7, #32
 801b006:	498d      	ldr	r1, [pc, #564]	; (801b23c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b008:	4618      	mov	r0, r3
 801b00a:	f7ee fc54 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b00e:	2501      	movs	r5, #1
 801b010:	f107 0320 	add.w	r3, r7, #32
 801b014:	4619      	mov	r1, r3
 801b016:	4620      	mov	r0, r4
 801b018:	f7ef f811 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b01c:	4603      	mov	r3, r0
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d001      	beq.n	801b026 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b022:	2401      	movs	r4, #1
 801b024:	e000      	b.n	801b028 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801b026:	2400      	movs	r4, #0
 801b028:	2d00      	cmp	r5, #0
 801b02a:	d004      	beq.n	801b036 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801b02c:	f107 0320 	add.w	r3, r7, #32
 801b030:	4618      	mov	r0, r3
 801b032:	f7ee fff8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b036:	2e00      	cmp	r6, #0
 801b038:	d004      	beq.n	801b044 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801b03a:	f107 0318 	add.w	r3, r7, #24
 801b03e:	4618      	mov	r0, r3
 801b040:	f7ee fff1 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b044:	2c00      	cmp	r4, #0
 801b046:	d00c      	beq.n	801b062 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801b048:	1d3b      	adds	r3, r7, #4
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	699a      	ldr	r2, [r3, #24]
 801b04e:	463b      	mov	r3, r7
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	699b      	ldr	r3, [r3, #24]
 801b054:	429a      	cmp	r2, r3
 801b056:	bf0c      	ite	eq
 801b058:	2301      	moveq	r3, #1
 801b05a:	2300      	movne	r3, #0
 801b05c:	b2dc      	uxtb	r4, r3
 801b05e:	f000 bd17 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801b062:	2500      	movs	r5, #0
 801b064:	1d3b      	adds	r3, r7, #4
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	f103 040c 	add.w	r4, r3, #12
 801b06c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b070:	4974      	ldr	r1, [pc, #464]	; (801b244 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b072:	4618      	mov	r0, r3
 801b074:	f7ee fc1f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b078:	2601      	movs	r6, #1
 801b07a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b07e:	4619      	mov	r1, r3
 801b080:	4620      	mov	r0, r4
 801b082:	f7ee ffdc 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b086:	4603      	mov	r3, r0
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d015      	beq.n	801b0b8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b08c:	463b      	mov	r3, r7
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	f103 040c 	add.w	r4, r3, #12
 801b094:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b098:	4969      	ldr	r1, [pc, #420]	; (801b240 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b09a:	4618      	mov	r0, r3
 801b09c:	f7ee fc0b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b0a0:	2501      	movs	r5, #1
 801b0a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0a6:	4619      	mov	r1, r3
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	f7ee ffc8 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d001      	beq.n	801b0b8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b0b4:	2401      	movs	r4, #1
 801b0b6:	e000      	b.n	801b0ba <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801b0b8:	2400      	movs	r4, #0
 801b0ba:	2d00      	cmp	r5, #0
 801b0bc:	d004      	beq.n	801b0c8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801b0be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f7ee ffaf 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b0c8:	2e00      	cmp	r6, #0
 801b0ca:	d004      	beq.n	801b0d6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801b0cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	f7ee ffa8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b0d6:	2c00      	cmp	r4, #0
 801b0d8:	d012      	beq.n	801b100 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801b0da:	463b      	mov	r3, r7
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	699b      	ldr	r3, [r3, #24]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	db0a      	blt.n	801b0fa <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b0e4:	1d3b      	adds	r3, r7, #4
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	699b      	ldr	r3, [r3, #24]
 801b0ea:	463a      	mov	r2, r7
 801b0ec:	6812      	ldr	r2, [r2, #0]
 801b0ee:	6992      	ldr	r2, [r2, #24]
 801b0f0:	4293      	cmp	r3, r2
 801b0f2:	d102      	bne.n	801b0fa <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b0f4:	2401      	movs	r4, #1
 801b0f6:	f000 bccb 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b0fa:	2400      	movs	r4, #0
 801b0fc:	f000 bcc8 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801b100:	2500      	movs	r5, #0
 801b102:	1d3b      	adds	r3, r7, #4
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	f103 040c 	add.w	r4, r3, #12
 801b10a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b10e:	494c      	ldr	r1, [pc, #304]	; (801b240 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b110:	4618      	mov	r0, r3
 801b112:	f7ee fbd0 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b116:	2601      	movs	r6, #1
 801b118:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b11c:	4619      	mov	r1, r3
 801b11e:	4620      	mov	r0, r4
 801b120:	f7ee ff8d 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b124:	4603      	mov	r3, r0
 801b126:	2b00      	cmp	r3, #0
 801b128:	d015      	beq.n	801b156 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801b12a:	463b      	mov	r3, r7
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f103 040c 	add.w	r4, r3, #12
 801b132:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b136:	4943      	ldr	r1, [pc, #268]	; (801b244 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b138:	4618      	mov	r0, r3
 801b13a:	f7ee fbbc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b13e:	2501      	movs	r5, #1
 801b140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b144:	4619      	mov	r1, r3
 801b146:	4620      	mov	r0, r4
 801b148:	f7ee ff79 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b14c:	4603      	mov	r3, r0
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d001      	beq.n	801b156 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801b152:	2401      	movs	r4, #1
 801b154:	e000      	b.n	801b158 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801b156:	2400      	movs	r4, #0
 801b158:	2d00      	cmp	r5, #0
 801b15a:	d004      	beq.n	801b166 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801b15c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b160:	4618      	mov	r0, r3
 801b162:	f7ee ff60 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b166:	2e00      	cmp	r6, #0
 801b168:	d004      	beq.n	801b174 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801b16a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b16e:	4618      	mov	r0, r3
 801b170:	f7ee ff59 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b174:	2c00      	cmp	r4, #0
 801b176:	d012      	beq.n	801b19e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801b178:	1d3b      	adds	r3, r7, #4
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	699b      	ldr	r3, [r3, #24]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	db0a      	blt.n	801b198 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801b182:	1d3b      	adds	r3, r7, #4
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	699b      	ldr	r3, [r3, #24]
 801b188:	463a      	mov	r2, r7
 801b18a:	6812      	ldr	r2, [r2, #0]
 801b18c:	6992      	ldr	r2, [r2, #24]
 801b18e:	4293      	cmp	r3, r2
 801b190:	d102      	bne.n	801b198 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801b192:	2401      	movs	r4, #1
 801b194:	f000 bc7c 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b198:	2400      	movs	r4, #0
 801b19a:	f000 bc79 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801b19e:	2500      	movs	r5, #0
 801b1a0:	1d3b      	adds	r3, r7, #4
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	f103 040c 	add.w	r4, r3, #12
 801b1a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b1ac:	4926      	ldr	r1, [pc, #152]	; (801b248 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7ee fb81 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b1b4:	2601      	movs	r6, #1
 801b1b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b1ba:	4619      	mov	r1, r3
 801b1bc:	4620      	mov	r0, r4
 801b1be:	f7ee ff3e 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b1c2:	4603      	mov	r3, r0
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d015      	beq.n	801b1f4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801b1c8:	463b      	mov	r3, r7
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	f103 040c 	add.w	r4, r3, #12
 801b1d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1d4:	491a      	ldr	r1, [pc, #104]	; (801b240 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7ee fb6d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b1dc:	2501      	movs	r5, #1
 801b1de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1e2:	4619      	mov	r1, r3
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	f7ee ff2a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d001      	beq.n	801b1f4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801b1f0:	2401      	movs	r4, #1
 801b1f2:	e000      	b.n	801b1f6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801b1f4:	2400      	movs	r4, #0
 801b1f6:	2d00      	cmp	r5, #0
 801b1f8:	d004      	beq.n	801b204 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801b1fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7ee ff11 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b204:	2e00      	cmp	r6, #0
 801b206:	d004      	beq.n	801b212 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801b208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b20c:	4618      	mov	r0, r3
 801b20e:	f7ee ff0a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b212:	2c00      	cmp	r4, #0
 801b214:	d01a      	beq.n	801b24c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801b216:	463b      	mov	r3, r7
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	699b      	ldr	r3, [r3, #24]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	db0a      	blt.n	801b236 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801b220:	1d3b      	adds	r3, r7, #4
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	699b      	ldr	r3, [r3, #24]
 801b226:	463a      	mov	r2, r7
 801b228:	6812      	ldr	r2, [r2, #0]
 801b22a:	6992      	ldr	r2, [r2, #24]
 801b22c:	4293      	cmp	r3, r2
 801b22e:	d102      	bne.n	801b236 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801b230:	2401      	movs	r4, #1
 801b232:	f000 bc2d 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b236:	2400      	movs	r4, #0
 801b238:	f000 bc2a 	b.w	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b23c:	08022c84 	.word	0x08022c84
 801b240:	08022c68 	.word	0x08022c68
 801b244:	08022c74 	.word	0x08022c74
 801b248:	08022c90 	.word	0x08022c90
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801b24c:	2500      	movs	r5, #0
 801b24e:	1d3b      	adds	r3, r7, #4
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	f103 040c 	add.w	r4, r3, #12
 801b256:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b25a:	49b8      	ldr	r1, [pc, #736]	; (801b53c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801b25c:	4618      	mov	r0, r3
 801b25e:	f7ee fb2a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b262:	2601      	movs	r6, #1
 801b264:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b268:	4619      	mov	r1, r3
 801b26a:	4620      	mov	r0, r4
 801b26c:	f7ee fee7 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b270:	4603      	mov	r3, r0
 801b272:	2b00      	cmp	r3, #0
 801b274:	d015      	beq.n	801b2a2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801b276:	463b      	mov	r3, r7
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	f103 040c 	add.w	r4, r3, #12
 801b27e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b282:	49af      	ldr	r1, [pc, #700]	; (801b540 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b284:	4618      	mov	r0, r3
 801b286:	f7ee fb16 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b28a:	2501      	movs	r5, #1
 801b28c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b290:	4619      	mov	r1, r3
 801b292:	4620      	mov	r0, r4
 801b294:	f7ee fed3 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b298:	4603      	mov	r3, r0
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d001      	beq.n	801b2a2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801b29e:	2401      	movs	r4, #1
 801b2a0:	e000      	b.n	801b2a4 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801b2a2:	2400      	movs	r4, #0
 801b2a4:	2d00      	cmp	r5, #0
 801b2a6:	d004      	beq.n	801b2b2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801b2a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	f7ee feba 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b2b2:	2e00      	cmp	r6, #0
 801b2b4:	d004      	beq.n	801b2c0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801b2b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7ee feb3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b2c0:	2c00      	cmp	r4, #0
 801b2c2:	d010      	beq.n	801b2e6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801b2c4:	1d3b      	adds	r3, r7, #4
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	699b      	ldr	r3, [r3, #24]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	db09      	blt.n	801b2e2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801b2ce:	1d3b      	adds	r3, r7, #4
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	699b      	ldr	r3, [r3, #24]
 801b2d4:	463a      	mov	r2, r7
 801b2d6:	6812      	ldr	r2, [r2, #0]
 801b2d8:	6992      	ldr	r2, [r2, #24]
 801b2da:	4293      	cmp	r3, r2
 801b2dc:	d101      	bne.n	801b2e2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801b2de:	2401      	movs	r4, #1
 801b2e0:	e3d6      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b2e2:	2400      	movs	r4, #0
 801b2e4:	e3d4      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801b2e6:	2500      	movs	r5, #0
 801b2e8:	1d3b      	adds	r3, r7, #4
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	f103 040c 	add.w	r4, r3, #12
 801b2f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b2f4:	4993      	ldr	r1, [pc, #588]	; (801b544 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7ee fadd 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b2fc:	2601      	movs	r6, #1
 801b2fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b302:	4619      	mov	r1, r3
 801b304:	4620      	mov	r0, r4
 801b306:	f7ee fe9a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b30a:	4603      	mov	r3, r0
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d015      	beq.n	801b33c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801b310:	463b      	mov	r3, r7
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	f103 040c 	add.w	r4, r3, #12
 801b318:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b31c:	498a      	ldr	r1, [pc, #552]	; (801b548 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801b31e:	4618      	mov	r0, r3
 801b320:	f7ee fac9 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b324:	2501      	movs	r5, #1
 801b326:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b32a:	4619      	mov	r1, r3
 801b32c:	4620      	mov	r0, r4
 801b32e:	f7ee fe86 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b332:	4603      	mov	r3, r0
 801b334:	2b00      	cmp	r3, #0
 801b336:	d001      	beq.n	801b33c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801b338:	2401      	movs	r4, #1
 801b33a:	e000      	b.n	801b33e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801b33c:	2400      	movs	r4, #0
 801b33e:	2d00      	cmp	r5, #0
 801b340:	d004      	beq.n	801b34c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801b342:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801b346:	4618      	mov	r0, r3
 801b348:	f7ee fe6d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b34c:	2e00      	cmp	r6, #0
 801b34e:	d004      	beq.n	801b35a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801b350:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801b354:	4618      	mov	r0, r3
 801b356:	f7ee fe66 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b35a:	2c00      	cmp	r4, #0
 801b35c:	d010      	beq.n	801b380 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801b35e:	463b      	mov	r3, r7
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	699b      	ldr	r3, [r3, #24]
 801b364:	2b00      	cmp	r3, #0
 801b366:	db09      	blt.n	801b37c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801b368:	1d3b      	adds	r3, r7, #4
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	699b      	ldr	r3, [r3, #24]
 801b36e:	463a      	mov	r2, r7
 801b370:	6812      	ldr	r2, [r2, #0]
 801b372:	6992      	ldr	r2, [r2, #24]
 801b374:	4293      	cmp	r3, r2
 801b376:	d101      	bne.n	801b37c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801b378:	2401      	movs	r4, #1
 801b37a:	e389      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b37c:	2400      	movs	r4, #0
 801b37e:	e387      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801b380:	2500      	movs	r5, #0
 801b382:	1d3b      	adds	r3, r7, #4
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	f103 040c 	add.w	r4, r3, #12
 801b38a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b38e:	496e      	ldr	r1, [pc, #440]	; (801b548 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801b390:	4618      	mov	r0, r3
 801b392:	f7ee fa90 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b396:	2601      	movs	r6, #1
 801b398:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b39c:	4619      	mov	r1, r3
 801b39e:	4620      	mov	r0, r4
 801b3a0:	f7ee fe4d 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d015      	beq.n	801b3d6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801b3aa:	463b      	mov	r3, r7
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	f103 040c 	add.w	r4, r3, #12
 801b3b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b3b6:	4963      	ldr	r1, [pc, #396]	; (801b544 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7ee fa7c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b3be:	2501      	movs	r5, #1
 801b3c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b3c4:	4619      	mov	r1, r3
 801b3c6:	4620      	mov	r0, r4
 801b3c8:	f7ee fe39 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b3cc:	4603      	mov	r3, r0
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d001      	beq.n	801b3d6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801b3d2:	2401      	movs	r4, #1
 801b3d4:	e000      	b.n	801b3d8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801b3d6:	2400      	movs	r4, #0
 801b3d8:	2d00      	cmp	r5, #0
 801b3da:	d004      	beq.n	801b3e6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801b3dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	f7ee fe20 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b3e6:	2e00      	cmp	r6, #0
 801b3e8:	d004      	beq.n	801b3f4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801b3ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7ee fe19 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b3f4:	2c00      	cmp	r4, #0
 801b3f6:	d010      	beq.n	801b41a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801b3f8:	1d3b      	adds	r3, r7, #4
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	699b      	ldr	r3, [r3, #24]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	db09      	blt.n	801b416 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801b402:	1d3b      	adds	r3, r7, #4
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	699b      	ldr	r3, [r3, #24]
 801b408:	463a      	mov	r2, r7
 801b40a:	6812      	ldr	r2, [r2, #0]
 801b40c:	6992      	ldr	r2, [r2, #24]
 801b40e:	4293      	cmp	r3, r2
 801b410:	d101      	bne.n	801b416 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801b412:	2401      	movs	r4, #1
 801b414:	e33c      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b416:	2400      	movs	r4, #0
 801b418:	e33a      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801b41a:	2500      	movs	r5, #0
 801b41c:	1d3b      	adds	r3, r7, #4
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	f103 040c 	add.w	r4, r3, #12
 801b424:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b428:	4946      	ldr	r1, [pc, #280]	; (801b544 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7ee fa43 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b430:	2601      	movs	r6, #1
 801b432:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b436:	4619      	mov	r1, r3
 801b438:	4620      	mov	r0, r4
 801b43a:	f7ee fe00 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	d015      	beq.n	801b470 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801b444:	463b      	mov	r3, r7
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	f103 040c 	add.w	r4, r3, #12
 801b44c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b450:	493b      	ldr	r1, [pc, #236]	; (801b540 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b452:	4618      	mov	r0, r3
 801b454:	f7ee fa2f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b458:	2501      	movs	r5, #1
 801b45a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b45e:	4619      	mov	r1, r3
 801b460:	4620      	mov	r0, r4
 801b462:	f7ee fdec 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b466:	4603      	mov	r3, r0
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d001      	beq.n	801b470 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801b46c:	2401      	movs	r4, #1
 801b46e:	e000      	b.n	801b472 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801b470:	2400      	movs	r4, #0
 801b472:	2d00      	cmp	r5, #0
 801b474:	d004      	beq.n	801b480 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801b476:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b47a:	4618      	mov	r0, r3
 801b47c:	f7ee fdd3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b480:	2e00      	cmp	r6, #0
 801b482:	d004      	beq.n	801b48e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801b484:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801b488:	4618      	mov	r0, r3
 801b48a:	f7ee fdcc 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b48e:	2c00      	cmp	r4, #0
 801b490:	d00b      	beq.n	801b4aa <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801b492:	1d3b      	adds	r3, r7, #4
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	699a      	ldr	r2, [r3, #24]
 801b498:	463b      	mov	r3, r7
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	699b      	ldr	r3, [r3, #24]
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	bf0c      	ite	eq
 801b4a2:	2301      	moveq	r3, #1
 801b4a4:	2300      	movne	r3, #0
 801b4a6:	b2dc      	uxtb	r4, r3
 801b4a8:	e2f2      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801b4aa:	2500      	movs	r5, #0
 801b4ac:	1d3b      	adds	r3, r7, #4
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	f103 040c 	add.w	r4, r3, #12
 801b4b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b4b8:	4921      	ldr	r1, [pc, #132]	; (801b540 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	f7ee f9fb 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b4c0:	2601      	movs	r6, #1
 801b4c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b4c6:	4619      	mov	r1, r3
 801b4c8:	4620      	mov	r0, r4
 801b4ca:	f7ee fdb8 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d015      	beq.n	801b500 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801b4d4:	463b      	mov	r3, r7
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	f103 040c 	add.w	r4, r3, #12
 801b4dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b4e0:	4918      	ldr	r1, [pc, #96]	; (801b544 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801b4e2:	4618      	mov	r0, r3
 801b4e4:	f7ee f9e7 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b4e8:	2501      	movs	r5, #1
 801b4ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b4ee:	4619      	mov	r1, r3
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	f7ee fda4 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d001      	beq.n	801b500 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801b4fc:	2401      	movs	r4, #1
 801b4fe:	e000      	b.n	801b502 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801b500:	2400      	movs	r4, #0
 801b502:	2d00      	cmp	r5, #0
 801b504:	d004      	beq.n	801b510 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801b506:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b50a:	4618      	mov	r0, r3
 801b50c:	f7ee fd8b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b510:	2e00      	cmp	r6, #0
 801b512:	d004      	beq.n	801b51e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801b514:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b518:	4618      	mov	r0, r3
 801b51a:	f7ee fd84 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b51e:	2c00      	cmp	r4, #0
 801b520:	d014      	beq.n	801b54c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801b522:	1d3b      	adds	r3, r7, #4
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	699a      	ldr	r2, [r3, #24]
 801b528:	463b      	mov	r3, r7
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	699b      	ldr	r3, [r3, #24]
 801b52e:	429a      	cmp	r2, r3
 801b530:	bf0c      	ite	eq
 801b532:	2301      	moveq	r3, #1
 801b534:	2300      	movne	r3, #0
 801b536:	b2dc      	uxtb	r4, r3
 801b538:	e2aa      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b53a:	bf00      	nop
 801b53c:	08022c68 	.word	0x08022c68
 801b540:	08022c90 	.word	0x08022c90
 801b544:	08022c74 	.word	0x08022c74
 801b548:	08022c84 	.word	0x08022c84
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801b54c:	2500      	movs	r5, #0
 801b54e:	1d3b      	adds	r3, r7, #4
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	f103 040c 	add.w	r4, r3, #12
 801b556:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b55a:	49ae      	ldr	r1, [pc, #696]	; (801b814 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801b55c:	4618      	mov	r0, r3
 801b55e:	f7ee f9aa 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b562:	2601      	movs	r6, #1
 801b564:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b568:	4619      	mov	r1, r3
 801b56a:	4620      	mov	r0, r4
 801b56c:	f7ee fd67 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b570:	4603      	mov	r3, r0
 801b572:	2b00      	cmp	r3, #0
 801b574:	d015      	beq.n	801b5a2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801b576:	463b      	mov	r3, r7
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	f103 040c 	add.w	r4, r3, #12
 801b57e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b582:	49a5      	ldr	r1, [pc, #660]	; (801b818 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801b584:	4618      	mov	r0, r3
 801b586:	f7ee f996 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b58a:	2501      	movs	r5, #1
 801b58c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b590:	4619      	mov	r1, r3
 801b592:	4620      	mov	r0, r4
 801b594:	f7ee fd53 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b598:	4603      	mov	r3, r0
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d001      	beq.n	801b5a2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801b59e:	2401      	movs	r4, #1
 801b5a0:	e000      	b.n	801b5a4 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801b5a2:	2400      	movs	r4, #0
 801b5a4:	2d00      	cmp	r5, #0
 801b5a6:	d004      	beq.n	801b5b2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801b5a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f7ee fd3a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b5b2:	2e00      	cmp	r6, #0
 801b5b4:	d004      	beq.n	801b5c0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801b5b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f7ee fd33 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b5c0:	2c00      	cmp	r4, #0
 801b5c2:	d010      	beq.n	801b5e6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801b5c4:	1d3b      	adds	r3, r7, #4
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	699b      	ldr	r3, [r3, #24]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	db09      	blt.n	801b5e2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801b5ce:	1d3b      	adds	r3, r7, #4
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	699b      	ldr	r3, [r3, #24]
 801b5d4:	463a      	mov	r2, r7
 801b5d6:	6812      	ldr	r2, [r2, #0]
 801b5d8:	6992      	ldr	r2, [r2, #24]
 801b5da:	4293      	cmp	r3, r2
 801b5dc:	d101      	bne.n	801b5e2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801b5de:	2401      	movs	r4, #1
 801b5e0:	e256      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b5e2:	2400      	movs	r4, #0
 801b5e4:	e254      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801b5e6:	2500      	movs	r5, #0
 801b5e8:	1d3b      	adds	r3, r7, #4
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	f103 040c 	add.w	r4, r3, #12
 801b5f0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801b5f4:	4988      	ldr	r1, [pc, #544]	; (801b818 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7ee f95d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b5fc:	2601      	movs	r6, #1
 801b5fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801b602:	4619      	mov	r1, r3
 801b604:	4620      	mov	r0, r4
 801b606:	f7ee fd1a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b60a:	4603      	mov	r3, r0
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d015      	beq.n	801b63c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801b610:	463b      	mov	r3, r7
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	f103 040c 	add.w	r4, r3, #12
 801b618:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b61c:	497d      	ldr	r1, [pc, #500]	; (801b814 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801b61e:	4618      	mov	r0, r3
 801b620:	f7ee f949 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b624:	2501      	movs	r5, #1
 801b626:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b62a:	4619      	mov	r1, r3
 801b62c:	4620      	mov	r0, r4
 801b62e:	f7ee fd06 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b632:	4603      	mov	r3, r0
 801b634:	2b00      	cmp	r3, #0
 801b636:	d001      	beq.n	801b63c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801b638:	2401      	movs	r4, #1
 801b63a:	e000      	b.n	801b63e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801b63c:	2400      	movs	r4, #0
 801b63e:	2d00      	cmp	r5, #0
 801b640:	d004      	beq.n	801b64c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801b642:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801b646:	4618      	mov	r0, r3
 801b648:	f7ee fced 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b64c:	2e00      	cmp	r6, #0
 801b64e:	d004      	beq.n	801b65a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801b650:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801b654:	4618      	mov	r0, r3
 801b656:	f7ee fce6 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b65a:	2c00      	cmp	r4, #0
 801b65c:	d010      	beq.n	801b680 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801b65e:	463b      	mov	r3, r7
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	699b      	ldr	r3, [r3, #24]
 801b664:	2b00      	cmp	r3, #0
 801b666:	db09      	blt.n	801b67c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801b668:	1d3b      	adds	r3, r7, #4
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	699b      	ldr	r3, [r3, #24]
 801b66e:	463a      	mov	r2, r7
 801b670:	6812      	ldr	r2, [r2, #0]
 801b672:	6992      	ldr	r2, [r2, #24]
 801b674:	4293      	cmp	r3, r2
 801b676:	d101      	bne.n	801b67c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801b678:	2401      	movs	r4, #1
 801b67a:	e209      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b67c:	2400      	movs	r4, #0
 801b67e:	e207      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801b680:	1d3b      	adds	r3, r7, #4
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	f103 020c 	add.w	r2, r3, #12
 801b688:	463b      	mov	r3, r7
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	330c      	adds	r3, #12
 801b68e:	4619      	mov	r1, r3
 801b690:	4610      	mov	r0, r2
 801b692:	f7ee fd19 	bl	800a0c8 <_ZneRK12SimpleStringS1_>
 801b696:	4603      	mov	r3, r0
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d001      	beq.n	801b6a0 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801b69c:	2400      	movs	r4, #0
 801b69e:	e1f7      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801b6a0:	1d3b      	adds	r3, r7, #4
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	f103 040c 	add.w	r4, r3, #12
 801b6a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b6ac:	495b      	ldr	r1, [pc, #364]	; (801b81c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	f7ee f901 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b6b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b6b8:	4619      	mov	r1, r3
 801b6ba:	4620      	mov	r0, r4
 801b6bc:	f7ee fcbf 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	461c      	mov	r4, r3
 801b6c4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7ee fcac 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b6ce:	2c00      	cmp	r4, #0
 801b6d0:	d00b      	beq.n	801b6ea <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801b6d2:	1d3b      	adds	r3, r7, #4
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	7e1a      	ldrb	r2, [r3, #24]
 801b6d8:	463b      	mov	r3, r7
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	7e1b      	ldrb	r3, [r3, #24]
 801b6de:	429a      	cmp	r2, r3
 801b6e0:	bf0c      	ite	eq
 801b6e2:	2301      	moveq	r3, #1
 801b6e4:	2300      	movne	r3, #0
 801b6e6:	b2dc      	uxtb	r4, r3
 801b6e8:	e1d2      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801b6ea:	1d3b      	adds	r3, r7, #4
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	f103 040c 	add.w	r4, r3, #12
 801b6f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801b6f6:	494a      	ldr	r1, [pc, #296]	; (801b820 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f7ee f8dc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b6fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801b702:	4619      	mov	r1, r3
 801b704:	4620      	mov	r0, r4
 801b706:	f7ee fc9a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b70a:	4603      	mov	r3, r0
 801b70c:	461c      	mov	r4, r3
 801b70e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801b712:	4618      	mov	r0, r3
 801b714:	f7ee fc87 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b718:	2c00      	cmp	r4, #0
 801b71a:	d00b      	beq.n	801b734 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801b71c:	1d3b      	adds	r3, r7, #4
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	699a      	ldr	r2, [r3, #24]
 801b722:	463b      	mov	r3, r7
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	699b      	ldr	r3, [r3, #24]
 801b728:	429a      	cmp	r2, r3
 801b72a:	bf0c      	ite	eq
 801b72c:	2301      	moveq	r3, #1
 801b72e:	2300      	movne	r3, #0
 801b730:	b2dc      	uxtb	r4, r3
 801b732:	e1ad      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801b734:	1d3b      	adds	r3, r7, #4
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	f103 040c 	add.w	r4, r3, #12
 801b73c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801b740:	4938      	ldr	r1, [pc, #224]	; (801b824 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801b742:	4618      	mov	r0, r3
 801b744:	f7ee f8b7 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b748:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801b74c:	4619      	mov	r1, r3
 801b74e:	4620      	mov	r0, r4
 801b750:	f7ee fc75 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b754:	4603      	mov	r3, r0
 801b756:	461c      	mov	r4, r3
 801b758:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801b75c:	4618      	mov	r0, r3
 801b75e:	f7ee fc62 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b762:	2c00      	cmp	r4, #0
 801b764:	d00b      	beq.n	801b77e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801b766:	1d3b      	adds	r3, r7, #4
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	699a      	ldr	r2, [r3, #24]
 801b76c:	463b      	mov	r3, r7
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	699b      	ldr	r3, [r3, #24]
 801b772:	429a      	cmp	r2, r3
 801b774:	bf0c      	ite	eq
 801b776:	2301      	moveq	r3, #1
 801b778:	2300      	movne	r3, #0
 801b77a:	b2dc      	uxtb	r4, r3
 801b77c:	e188      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801b77e:	1d3b      	adds	r3, r7, #4
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	f103 040c 	add.w	r4, r3, #12
 801b786:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b78a:	4922      	ldr	r1, [pc, #136]	; (801b814 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801b78c:	4618      	mov	r0, r3
 801b78e:	f7ee f892 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b792:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b796:	4619      	mov	r1, r3
 801b798:	4620      	mov	r0, r4
 801b79a:	f7ee fc50 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	461c      	mov	r4, r3
 801b7a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7ee fc3d 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b7ac:	2c00      	cmp	r4, #0
 801b7ae:	d00b      	beq.n	801b7c8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801b7b0:	1d3b      	adds	r3, r7, #4
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	699a      	ldr	r2, [r3, #24]
 801b7b6:	463b      	mov	r3, r7
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	699b      	ldr	r3, [r3, #24]
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	bf0c      	ite	eq
 801b7c0:	2301      	moveq	r3, #1
 801b7c2:	2300      	movne	r3, #0
 801b7c4:	b2dc      	uxtb	r4, r3
 801b7c6:	e163      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801b7c8:	1d3b      	adds	r3, r7, #4
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	f103 040c 	add.w	r4, r3, #12
 801b7d0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801b7d4:	4910      	ldr	r1, [pc, #64]	; (801b818 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7ee f86d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b7dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801b7e0:	4619      	mov	r1, r3
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f7ee fc2b 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b7e8:	4603      	mov	r3, r0
 801b7ea:	461c      	mov	r4, r3
 801b7ec:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f7ee fc18 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b7f6:	2c00      	cmp	r4, #0
 801b7f8:	d016      	beq.n	801b828 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801b7fa:	1d3b      	adds	r3, r7, #4
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	699a      	ldr	r2, [r3, #24]
 801b800:	463b      	mov	r3, r7
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	699b      	ldr	r3, [r3, #24]
 801b806:	429a      	cmp	r2, r3
 801b808:	bf0c      	ite	eq
 801b80a:	2301      	moveq	r3, #1
 801b80c:	2300      	movne	r3, #0
 801b80e:	b2dc      	uxtb	r4, r3
 801b810:	e13e      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801b812:	bf00      	nop
 801b814:	08022c84 	.word	0x08022c84
 801b818:	08022c90 	.word	0x08022c90
 801b81c:	08022c6c 	.word	0x08022c6c
 801b820:	08022c68 	.word	0x08022c68
 801b824:	08022c74 	.word	0x08022c74
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801b828:	1d3b      	adds	r3, r7, #4
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	f103 040c 	add.w	r4, r3, #12
 801b830:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801b834:	4999      	ldr	r1, [pc, #612]	; (801ba9c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801b836:	4618      	mov	r0, r3
 801b838:	f7ee f83d 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b83c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801b840:	4619      	mov	r1, r3
 801b842:	4620      	mov	r0, r4
 801b844:	f7ee fbfb 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b848:	4603      	mov	r3, r0
 801b84a:	461c      	mov	r4, r3
 801b84c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801b850:	4618      	mov	r0, r3
 801b852:	f7ee fbe8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b856:	2c00      	cmp	r4, #0
 801b858:	d026      	beq.n	801b8a8 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801b85a:	1d3b      	adds	r3, r7, #4
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	699a      	ldr	r2, [r3, #24]
 801b860:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b864:	4611      	mov	r1, r2
 801b866:	4618      	mov	r0, r3
 801b868:	f7ee f825 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b86c:	463b      	mov	r3, r7
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	699a      	ldr	r2, [r3, #24]
 801b872:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801b876:	4611      	mov	r1, r2
 801b878:	4618      	mov	r0, r3
 801b87a:	f7ee f81c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b87e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801b882:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b886:	4611      	mov	r1, r2
 801b888:	4618      	mov	r0, r3
 801b88a:	f7ee fbd8 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b88e:	4603      	mov	r3, r0
 801b890:	461c      	mov	r4, r3
 801b892:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801b896:	4618      	mov	r0, r3
 801b898:	f7ee fbc5 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b89c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7ee fbc0 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b8a6:	e0f3      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801b8a8:	1d3b      	adds	r3, r7, #4
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	f103 040c 	add.w	r4, r3, #12
 801b8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801b8b4:	497a      	ldr	r1, [pc, #488]	; (801baa0 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7ed fffd 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801b8c0:	4619      	mov	r1, r3
 801b8c2:	4620      	mov	r0, r4
 801b8c4:	f7ee fbbb 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	461c      	mov	r4, r3
 801b8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7ee fba8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b8d6:	2c00      	cmp	r4, #0
 801b8d8:	d00b      	beq.n	801b8f2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801b8da:	1d3b      	adds	r3, r7, #4
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	699a      	ldr	r2, [r3, #24]
 801b8e0:	463b      	mov	r3, r7
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	699b      	ldr	r3, [r3, #24]
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	bf0c      	ite	eq
 801b8ea:	2301      	moveq	r3, #1
 801b8ec:	2300      	movne	r3, #0
 801b8ee:	b2dc      	uxtb	r4, r3
 801b8f0:	e0ce      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801b8f2:	1d3b      	adds	r3, r7, #4
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	f103 040c 	add.w	r4, r3, #12
 801b8fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b8fe:	4969      	ldr	r1, [pc, #420]	; (801baa4 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801b900:	4618      	mov	r0, r3
 801b902:	f7ed ffd8 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b90a:	4619      	mov	r1, r3
 801b90c:	4620      	mov	r0, r4
 801b90e:	f7ee fb96 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b912:	4603      	mov	r3, r0
 801b914:	461c      	mov	r4, r3
 801b916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801b91a:	4618      	mov	r0, r3
 801b91c:	f7ee fb83 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b920:	2c00      	cmp	r4, #0
 801b922:	d00b      	beq.n	801b93c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801b924:	1d3b      	adds	r3, r7, #4
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	699a      	ldr	r2, [r3, #24]
 801b92a:	463b      	mov	r3, r7
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	699b      	ldr	r3, [r3, #24]
 801b930:	429a      	cmp	r2, r3
 801b932:	bf0c      	ite	eq
 801b934:	2301      	moveq	r3, #1
 801b936:	2300      	movne	r3, #0
 801b938:	b2dc      	uxtb	r4, r3
 801b93a:	e0a9      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801b93c:	1d3b      	adds	r3, r7, #4
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	f103 040c 	add.w	r4, r3, #12
 801b944:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801b948:	4957      	ldr	r1, [pc, #348]	; (801baa8 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7ed ffb3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801b954:	4619      	mov	r1, r3
 801b956:	4620      	mov	r0, r4
 801b958:	f7ee fb71 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b95c:	4603      	mov	r3, r0
 801b95e:	461c      	mov	r4, r3
 801b960:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801b964:	4618      	mov	r0, r3
 801b966:	f7ee fb5e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b96a:	2c00      	cmp	r4, #0
 801b96c:	d00b      	beq.n	801b986 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801b96e:	1d3b      	adds	r3, r7, #4
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	699a      	ldr	r2, [r3, #24]
 801b974:	463b      	mov	r3, r7
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	699b      	ldr	r3, [r3, #24]
 801b97a:	429a      	cmp	r2, r3
 801b97c:	bf0c      	ite	eq
 801b97e:	2301      	moveq	r3, #1
 801b980:	2300      	movne	r3, #0
 801b982:	b2dc      	uxtb	r4, r3
 801b984:	e084      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801b986:	1d3b      	adds	r3, r7, #4
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	f103 040c 	add.w	r4, r3, #12
 801b98e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801b992:	4946      	ldr	r1, [pc, #280]	; (801baac <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801b994:	4618      	mov	r0, r3
 801b996:	f7ed ff8e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801b99a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801b99e:	4619      	mov	r1, r3
 801b9a0:	4620      	mov	r0, r4
 801b9a2:	f7ee fb4c 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801b9a6:	4603      	mov	r3, r0
 801b9a8:	461c      	mov	r4, r3
 801b9aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7ee fb39 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801b9b4:	2c00      	cmp	r4, #0
 801b9b6:	d01c      	beq.n	801b9f2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801b9b8:	1d3b      	adds	r3, r7, #4
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	ed93 7b06 	vldr	d7, [r3, #24]
 801b9c0:	463b      	mov	r3, r7
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	ed93 6b06 	vldr	d6, [r3, #24]
 801b9c8:	1d3b      	adds	r3, r7, #4
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	ed93 5b08 	vldr	d5, [r3, #32]
 801b9d0:	eeb0 2a45 	vmov.f32	s4, s10
 801b9d4:	eef0 2a65 	vmov.f32	s5, s11
 801b9d8:	eeb0 1a46 	vmov.f32	s2, s12
 801b9dc:	eef0 1a66 	vmov.f32	s3, s13
 801b9e0:	eeb0 0a47 	vmov.f32	s0, s14
 801b9e4:	eef0 0a67 	vmov.f32	s1, s15
 801b9e8:	f7f3 fe18 	bl	800f61c <_Z13doubles_equalddd>
 801b9ec:	4603      	mov	r3, r0
 801b9ee:	461c      	mov	r4, r3
 801b9f0:	e04e      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801b9f2:	1d3b      	adds	r3, r7, #4
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	f103 040c 	add.w	r4, r3, #12
 801b9fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801b9fe:	492c      	ldr	r1, [pc, #176]	; (801bab0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7ed ff58 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801ba06:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ba0a:	4619      	mov	r1, r3
 801ba0c:	4620      	mov	r0, r4
 801ba0e:	f7ee fb16 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801ba12:	4603      	mov	r3, r0
 801ba14:	461c      	mov	r4, r3
 801ba16:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	f7ee fb03 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801ba20:	2c00      	cmp	r4, #0
 801ba22:	d01c      	beq.n	801ba5e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801ba24:	1d3b      	adds	r3, r7, #4
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ba2a:	463b      	mov	r3, r7
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba30:	429a      	cmp	r2, r3
 801ba32:	d001      	beq.n	801ba38 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801ba34:	2400      	movs	r4, #0
 801ba36:	e02b      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801ba38:	1d3b      	adds	r3, r7, #4
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	6998      	ldr	r0, [r3, #24]
 801ba3e:	463b      	mov	r3, r7
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	6999      	ldr	r1, [r3, #24]
 801ba44:	1d3b      	adds	r3, r7, #4
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba4a:	461a      	mov	r2, r3
 801ba4c:	f7ed fe52 	bl	80096f4 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801ba50:	4603      	mov	r3, r0
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	bf0c      	ite	eq
 801ba56:	2301      	moveq	r3, #1
 801ba58:	2300      	movne	r3, #0
 801ba5a:	b2dc      	uxtb	r4, r3
 801ba5c:	e018      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801ba5e:	1d3b      	adds	r3, r7, #4
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d012      	beq.n	801ba8e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801ba68:	1d3b      	adds	r3, r7, #4
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801ba6e:	1d3b      	adds	r3, r7, #4
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	3308      	adds	r3, #8
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	1d3a      	adds	r2, r7, #4
 801ba7c:	6812      	ldr	r2, [r2, #0]
 801ba7e:	6991      	ldr	r1, [r2, #24]
 801ba80:	463a      	mov	r2, r7
 801ba82:	6812      	ldr	r2, [r2, #0]
 801ba84:	6992      	ldr	r2, [r2, #24]
 801ba86:	4798      	blx	r3
 801ba88:	4603      	mov	r3, r0
 801ba8a:	461c      	mov	r4, r3
 801ba8c:	e000      	b.n	801ba90 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801ba8e:	2400      	movs	r4, #0
 801ba90:	4623      	mov	r3, r4
}
 801ba92:	4618      	mov	r0, r3
 801ba94:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba9c:	08022d34 	.word	0x08022d34
 801baa0:	08022d14 	.word	0x08022d14
 801baa4:	08022d1c 	.word	0x08022d1c
 801baa8:	08022d28 	.word	0x08022d28
 801baac:	08022d0c 	.word	0x08022d0c
 801bab0:	08022d40 	.word	0x08022d40

0801bab4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bab6:	b087      	sub	sp, #28
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
 801babc:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	f103 020c 	add.w	r2, r3, #12
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	330c      	adds	r3, #12
 801bac8:	4619      	mov	r1, r3
 801baca:	4610      	mov	r0, r2
 801bacc:	f7ee fab7 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bad0:	4603      	mov	r3, r0
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d001      	beq.n	801bada <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801bad6:	2301      	movs	r3, #1
 801bad8:	e03c      	b.n	801bb54 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801bada:	2500      	movs	r5, #0
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	f103 040c 	add.w	r4, r3, #12
 801bae2:	f107 0308 	add.w	r3, r7, #8
 801bae6:	491d      	ldr	r1, [pc, #116]	; (801bb5c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801bae8:	4618      	mov	r0, r3
 801baea:	f7ed fee4 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801baee:	2601      	movs	r6, #1
 801baf0:	f107 0308 	add.w	r3, r7, #8
 801baf4:	4619      	mov	r1, r3
 801baf6:	4620      	mov	r0, r4
 801baf8:	f7ee faa1 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bafc:	4603      	mov	r3, r0
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d014      	beq.n	801bb2c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801bb02:	683b      	ldr	r3, [r7, #0]
 801bb04:	f103 040c 	add.w	r4, r3, #12
 801bb08:	f107 0310 	add.w	r3, r7, #16
 801bb0c:	4914      	ldr	r1, [pc, #80]	; (801bb60 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801bb0e:	4618      	mov	r0, r3
 801bb10:	f7ed fed1 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bb14:	2501      	movs	r5, #1
 801bb16:	f107 0310 	add.w	r3, r7, #16
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	f7ee fa8e 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bb22:	4603      	mov	r3, r0
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d001      	beq.n	801bb2c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801bb28:	2401      	movs	r4, #1
 801bb2a:	e000      	b.n	801bb2e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801bb2c:	2400      	movs	r4, #0
 801bb2e:	2d00      	cmp	r5, #0
 801bb30:	d004      	beq.n	801bb3c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801bb32:	f107 0310 	add.w	r3, r7, #16
 801bb36:	4618      	mov	r0, r3
 801bb38:	f7ee fa75 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bb3c:	2e00      	cmp	r6, #0
 801bb3e:	d004      	beq.n	801bb4a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801bb40:	f107 0308 	add.w	r3, r7, #8
 801bb44:	4618      	mov	r0, r3
 801bb46:	f7ee fa6e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bb4a:	2c00      	cmp	r4, #0
 801bb4c:	d001      	beq.n	801bb52 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801bb4e:	2301      	movs	r3, #1
 801bb50:	e000      	b.n	801bb54 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801bb52:	2300      	movs	r3, #0
}
 801bb54:	4618      	mov	r0, r3
 801bb56:	371c      	adds	r7, #28
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb5c:	08022d1c 	.word	0x08022d1c
 801bb60:	08022d14 	.word	0x08022d14

0801bb64 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801bb64:	b590      	push	{r4, r7, lr}
 801bb66:	b0b9      	sub	sp, #228	; 0xe4
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
 801bb6c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801bb6e:	683b      	ldr	r3, [r7, #0]
 801bb70:	f103 040c 	add.w	r4, r3, #12
 801bb74:	f107 0308 	add.w	r3, r7, #8
 801bb78:	49d4      	ldr	r1, [pc, #848]	; (801becc <_ZNK14MockNamedValue8toStringEv+0x368>)
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	f7ed fe9b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bb80:	f107 0308 	add.w	r3, r7, #8
 801bb84:	4619      	mov	r1, r3
 801bb86:	4620      	mov	r0, r4
 801bb88:	f7ee fa59 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bb8c:	4603      	mov	r3, r0
 801bb8e:	461c      	mov	r4, r3
 801bb90:	f107 0308 	add.w	r3, r7, #8
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7ee fa46 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bb9a:	2c00      	cmp	r4, #0
 801bb9c:	d007      	beq.n	801bbae <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801bb9e:	683b      	ldr	r3, [r7, #0]
 801bba0:	7e1a      	ldrb	r2, [r3, #24]
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	4611      	mov	r1, r2
 801bba6:	4618      	mov	r0, r3
 801bba8:	f7ee fcae 	bl	800a508 <_Z10StringFromb>
 801bbac:	e23f      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	f103 040c 	add.w	r4, r3, #12
 801bbb4:	f107 0310 	add.w	r3, r7, #16
 801bbb8:	49c5      	ldr	r1, [pc, #788]	; (801bed0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f7ed fe7b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bbc0:	f107 0310 	add.w	r3, r7, #16
 801bbc4:	4619      	mov	r1, r3
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	f7ee fa39 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bbcc:	4603      	mov	r3, r0
 801bbce:	461c      	mov	r4, r3
 801bbd0:	f107 0310 	add.w	r3, r7, #16
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	f7ee fa26 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bbda:	2c00      	cmp	r4, #0
 801bbdc:	d03b      	beq.n	801bc56 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	699a      	ldr	r2, [r3, #24]
 801bbe2:	f107 0320 	add.w	r3, r7, #32
 801bbe6:	4611      	mov	r1, r2
 801bbe8:	4618      	mov	r0, r3
 801bbea:	f7ee fce3 	bl	800a5b4 <_Z10StringFromi>
 801bbee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bbf2:	49b8      	ldr	r1, [pc, #736]	; (801bed4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	f7ed fe5e 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bbfa:	f107 0318 	add.w	r3, r7, #24
 801bbfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bc02:	f107 0120 	add.w	r1, r7, #32
 801bc06:	4618      	mov	r0, r3
 801bc08:	f7ee fa6f 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801bc0c:	683b      	ldr	r3, [r7, #0]
 801bc0e:	699a      	ldr	r2, [r3, #24]
 801bc10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc14:	4611      	mov	r1, r2
 801bc16:	4618      	mov	r0, r3
 801bc18:	f7ee fdbc 	bl	800a794 <_Z30BracketsFormattedHexStringFromi>
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bc22:	f107 0118 	add.w	r1, r7, #24
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7ee fa5f 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801bc2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7ee f9f8 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bc36:	f107 0318 	add.w	r3, r7, #24
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	f7ee f9f3 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bc40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bc44:	4618      	mov	r0, r3
 801bc46:	f7ee f9ee 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bc4a:	f107 0320 	add.w	r3, r7, #32
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7ee f9e9 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bc54:	e1eb      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801bc56:	683b      	ldr	r3, [r7, #0]
 801bc58:	f103 040c 	add.w	r4, r3, #12
 801bc5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc60:	499d      	ldr	r1, [pc, #628]	; (801bed8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801bc62:	4618      	mov	r0, r3
 801bc64:	f7ed fe27 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bc68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc6c:	4619      	mov	r1, r3
 801bc6e:	4620      	mov	r0, r4
 801bc70:	f7ee f9e5 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bc74:	4603      	mov	r3, r0
 801bc76:	461c      	mov	r4, r3
 801bc78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	f7ee f9d2 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bc82:	2c00      	cmp	r4, #0
 801bc84:	d03b      	beq.n	801bcfe <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	699a      	ldr	r2, [r3, #24]
 801bc8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bc8e:	4611      	mov	r1, r2
 801bc90:	4618      	mov	r0, r3
 801bc92:	f7ee fef7 	bl	800aa84 <_Z10StringFromj>
 801bc96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc9a:	498e      	ldr	r1, [pc, #568]	; (801bed4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	f7ed fe0a 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bca6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bcaa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7ee fa1b 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	699a      	ldr	r2, [r3, #24]
 801bcb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bcbc:	4611      	mov	r1, r2
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f7ee fd84 	bl	800a7cc <_Z30BracketsFormattedHexStringFromj>
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801bcca:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7ee fa0b 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801bcd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7ee f9a4 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bcde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bce2:	4618      	mov	r0, r3
 801bce4:	f7ee f99f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bce8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bcec:	4618      	mov	r0, r3
 801bcee:	f7ee f99a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bcf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	f7ee f995 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bcfc:	e197      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801bcfe:	683b      	ldr	r3, [r7, #0]
 801bd00:	f103 040c 	add.w	r4, r3, #12
 801bd04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bd08:	4974      	ldr	r1, [pc, #464]	; (801bedc <_ZNK14MockNamedValue8toStringEv+0x378>)
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	f7ed fdd3 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bd10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bd14:	4619      	mov	r1, r3
 801bd16:	4620      	mov	r0, r4
 801bd18:	f7ee f991 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bd1c:	4603      	mov	r3, r0
 801bd1e:	461c      	mov	r4, r3
 801bd20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bd24:	4618      	mov	r0, r3
 801bd26:	f7ee f97e 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bd2a:	2c00      	cmp	r4, #0
 801bd2c:	d03b      	beq.n	801bda6 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	699a      	ldr	r2, [r3, #24]
 801bd32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bd36:	4611      	mov	r1, r2
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7ee fc4d 	bl	800a5d8 <_Z10StringFroml>
 801bd3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801bd42:	4964      	ldr	r1, [pc, #400]	; (801bed4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801bd44:	4618      	mov	r0, r3
 801bd46:	f7ed fdb6 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bd4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bd4e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801bd52:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801bd56:	4618      	mov	r0, r3
 801bd58:	f7ee f9c7 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801bd5c:	683b      	ldr	r3, [r7, #0]
 801bd5e:	699a      	ldr	r2, [r3, #24]
 801bd60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bd64:	4611      	mov	r1, r2
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7ee fd4c 	bl	800a804 <_Z30BracketsFormattedHexStringFroml>
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801bd72:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801bd76:	4618      	mov	r0, r3
 801bd78:	f7ee f9b7 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801bd7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bd80:	4618      	mov	r0, r3
 801bd82:	f7ee f950 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bd86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7ee f94b 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bd90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801bd94:	4618      	mov	r0, r3
 801bd96:	f7ee f946 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bd9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bd9e:	4618      	mov	r0, r3
 801bda0:	f7ee f941 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bda4:	e143      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801bda6:	683b      	ldr	r3, [r7, #0]
 801bda8:	f103 040c 	add.w	r4, r3, #12
 801bdac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801bdb0:	494b      	ldr	r1, [pc, #300]	; (801bee0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f7ed fd7f 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bdb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801bdbc:	4619      	mov	r1, r3
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	f7ee f93d 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bdc4:	4603      	mov	r3, r0
 801bdc6:	461c      	mov	r4, r3
 801bdc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801bdcc:	4618      	mov	r0, r3
 801bdce:	f7ee f92a 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bdd2:	2c00      	cmp	r4, #0
 801bdd4:	d03b      	beq.n	801be4e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801bdd6:	683b      	ldr	r3, [r7, #0]
 801bdd8:	699a      	ldr	r2, [r3, #24]
 801bdda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bdde:	4611      	mov	r1, r2
 801bde0:	4618      	mov	r0, r3
 801bde2:	f7ee fe61 	bl	800aaa8 <_Z10StringFromm>
 801bde6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801bdea:	493a      	ldr	r1, [pc, #232]	; (801bed4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801bdec:	4618      	mov	r0, r3
 801bdee:	f7ed fd62 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bdf2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bdf6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801bdfa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801bdfe:	4618      	mov	r0, r3
 801be00:	f7ee f973 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801be04:	683b      	ldr	r3, [r7, #0]
 801be06:	699a      	ldr	r2, [r3, #24]
 801be08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801be0c:	4611      	mov	r1, r2
 801be0e:	4618      	mov	r0, r3
 801be10:	f7ee fd14 	bl	800a83c <_Z30BracketsFormattedHexStringFromm>
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801be1a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801be1e:	4618      	mov	r0, r3
 801be20:	f7ee f963 	bl	800a0ea <_ZNK12SimpleStringplERKS_>
 801be24:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801be28:	4618      	mov	r0, r3
 801be2a:	f7ee f8fc 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801be2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801be32:	4618      	mov	r0, r3
 801be34:	f7ee f8f7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801be38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801be3c:	4618      	mov	r0, r3
 801be3e:	f7ee f8f2 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801be42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801be46:	4618      	mov	r0, r3
 801be48:	f7ee f8ed 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801be4c:	e0ef      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	f103 040c 	add.w	r4, r3, #12
 801be54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801be58:	4922      	ldr	r1, [pc, #136]	; (801bee4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801be5a:	4618      	mov	r0, r3
 801be5c:	f7ed fd2b 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801be60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801be64:	4619      	mov	r1, r3
 801be66:	4620      	mov	r0, r4
 801be68:	f7ee f8e9 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801be6c:	4603      	mov	r3, r0
 801be6e:	461c      	mov	r4, r3
 801be70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801be74:	4618      	mov	r0, r3
 801be76:	f7ee f8d6 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801be7a:	2c00      	cmp	r4, #0
 801be7c:	d006      	beq.n	801be8c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801be7e:	683b      	ldr	r3, [r7, #0]
 801be80:	699b      	ldr	r3, [r3, #24]
 801be82:	4619      	mov	r1, r3
 801be84:	6878      	ldr	r0, [r7, #4]
 801be86:	f7ed fd16 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801be8a:	e0d0      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801be8c:	683b      	ldr	r3, [r7, #0]
 801be8e:	f103 040c 	add.w	r4, r3, #12
 801be92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801be96:	4914      	ldr	r1, [pc, #80]	; (801bee8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801be98:	4618      	mov	r0, r3
 801be9a:	f7ed fd0c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801be9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bea2:	4619      	mov	r1, r3
 801bea4:	4620      	mov	r0, r4
 801bea6:	f7ee f8ca 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801beaa:	4603      	mov	r3, r0
 801beac:	461c      	mov	r4, r3
 801beae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801beb2:	4618      	mov	r0, r3
 801beb4:	f7ee f8b7 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801beb8:	2c00      	cmp	r4, #0
 801beba:	d017      	beq.n	801beec <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801bebc:	683b      	ldr	r3, [r7, #0]
 801bebe:	699a      	ldr	r2, [r3, #24]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	4611      	mov	r1, r2
 801bec4:	4618      	mov	r0, r3
 801bec6:	f7ee fb99 	bl	800a5fc <_Z10StringFromPKv>
 801beca:	e0b0      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801becc:	08022c6c 	.word	0x08022c6c
 801bed0:	08022c68 	.word	0x08022c68
 801bed4:	08022d58 	.word	0x08022d58
 801bed8:	08022c74 	.word	0x08022c74
 801bedc:	08022c84 	.word	0x08022c84
 801bee0:	08022c90 	.word	0x08022c90
 801bee4:	08022d34 	.word	0x08022d34
 801bee8:	08022d14 	.word	0x08022d14
    else if (type_ == "void (*)()")
 801beec:	683b      	ldr	r3, [r7, #0]
 801beee:	f103 040c 	add.w	r4, r3, #12
 801bef2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bef6:	4950      	ldr	r1, [pc, #320]	; (801c038 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801bef8:	4618      	mov	r0, r3
 801befa:	f7ed fcdc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801befe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bf02:	4619      	mov	r1, r3
 801bf04:	4620      	mov	r0, r4
 801bf06:	f7ee f89a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bf0a:	4603      	mov	r3, r0
 801bf0c:	461c      	mov	r4, r3
 801bf0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bf12:	4618      	mov	r0, r3
 801bf14:	f7ee f887 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bf18:	2c00      	cmp	r4, #0
 801bf1a:	d007      	beq.n	801bf2c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801bf1c:	683b      	ldr	r3, [r7, #0]
 801bf1e:	699a      	ldr	r2, [r3, #24]
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	4611      	mov	r1, r2
 801bf24:	4618      	mov	r0, r3
 801bf26:	f7ee fb93 	bl	800a650 <_Z10StringFromPFvvE>
 801bf2a:	e080      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801bf2c:	683b      	ldr	r3, [r7, #0]
 801bf2e:	f103 040c 	add.w	r4, r3, #12
 801bf32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bf36:	4941      	ldr	r1, [pc, #260]	; (801c03c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7ed fcbc 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bf3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bf42:	4619      	mov	r1, r3
 801bf44:	4620      	mov	r0, r4
 801bf46:	f7ee f87a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bf4a:	4603      	mov	r3, r0
 801bf4c:	461c      	mov	r4, r3
 801bf4e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bf52:	4618      	mov	r0, r3
 801bf54:	f7ee f867 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bf58:	2c00      	cmp	r4, #0
 801bf5a:	d007      	beq.n	801bf6c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801bf5c:	683b      	ldr	r3, [r7, #0]
 801bf5e:	699a      	ldr	r2, [r3, #24]
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	4611      	mov	r1, r2
 801bf64:	4618      	mov	r0, r3
 801bf66:	f7ee fb49 	bl	800a5fc <_Z10StringFromPKv>
 801bf6a:	e060      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801bf6c:	683b      	ldr	r3, [r7, #0]
 801bf6e:	f103 040c 	add.w	r4, r3, #12
 801bf72:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bf76:	4932      	ldr	r1, [pc, #200]	; (801c040 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801bf78:	4618      	mov	r0, r3
 801bf7a:	f7ed fc9c 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bf7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bf82:	4619      	mov	r1, r3
 801bf84:	4620      	mov	r0, r4
 801bf86:	f7ee f85a 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bf8a:	4603      	mov	r3, r0
 801bf8c:	461c      	mov	r4, r3
 801bf8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bf92:	4618      	mov	r0, r3
 801bf94:	f7ee f847 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bf98:	2c00      	cmp	r4, #0
 801bf9a:	d00c      	beq.n	801bfb6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801bf9c:	683b      	ldr	r3, [r7, #0]
 801bf9e:	ed93 7b06 	vldr	d7, [r3, #24]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	2106      	movs	r1, #6
 801bfa6:	eeb0 0a47 	vmov.f32	s0, s14
 801bfaa:	eef0 0a67 	vmov.f32	s1, s15
 801bfae:	4618      	mov	r0, r3
 801bfb0:	f7ee fcfe 	bl	800a9b0 <_Z10StringFromdi>
 801bfb4:	e03b      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801bfb6:	683b      	ldr	r3, [r7, #0]
 801bfb8:	f103 040c 	add.w	r4, r3, #12
 801bfbc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bfc0:	4920      	ldr	r1, [pc, #128]	; (801c044 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	f7ed fc77 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801bfc8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bfcc:	4619      	mov	r1, r3
 801bfce:	4620      	mov	r0, r4
 801bfd0:	f7ee f835 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801bfd4:	4603      	mov	r3, r0
 801bfd6:	461c      	mov	r4, r3
 801bfd8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f7ee f822 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801bfe2:	2c00      	cmp	r4, #0
 801bfe4:	d008      	beq.n	801bff8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	6999      	ldr	r1, [r3, #24]
 801bfea:	683b      	ldr	r3, [r7, #0]
 801bfec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	4618      	mov	r0, r3
 801bff2:	f7ee fe71 	bl	800acd8 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801bff6:	e01a      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801bff8:	683b      	ldr	r3, [r7, #0]
 801bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d00b      	beq.n	801c018 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801c000:	683b      	ldr	r3, [r7, #0]
 801c002:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c004:	683b      	ldr	r3, [r7, #0]
 801c006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	330c      	adds	r3, #12
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	683a      	ldr	r2, [r7, #0]
 801c010:	6992      	ldr	r2, [r2, #24]
 801c012:	6878      	ldr	r0, [r7, #4]
 801c014:	4798      	blx	r3
 801c016:	e00a      	b.n	801c02e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801c018:	683b      	ldr	r3, [r7, #0]
 801c01a:	330c      	adds	r3, #12
 801c01c:	4618      	mov	r0, r3
 801c01e:	f7ed ffd5 	bl	8009fcc <_ZNK12SimpleString12asCharStringEv>
 801c022:	4602      	mov	r2, r0
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	4908      	ldr	r1, [pc, #32]	; (801c048 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801c028:	4618      	mov	r0, r3
 801c02a:	f7ee fd03 	bl	800aa34 <_Z16StringFromFormatPKcz>

}
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	37e4      	adds	r7, #228	; 0xe4
 801c032:	46bd      	mov	sp, r7
 801c034:	bd90      	pop	{r4, r7, pc}
 801c036:	bf00      	nop
 801c038:	08022d28 	.word	0x08022d28
 801c03c:	08022d1c 	.word	0x08022d1c
 801c040:	08022d0c 	.word	0x08022d0c
 801c044:	08022d40 	.word	0x08022d40
 801c048:	08022d5c 	.word	0x08022d5c

0801c04c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801c04c:	b480      	push	{r7}
 801c04e:	b083      	sub	sp, #12
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	6039      	str	r1, [r7, #0]
    next_ = node;
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	683a      	ldr	r2, [r7, #0]
 801c05a:	605a      	str	r2, [r3, #4]
}
 801c05c:	bf00      	nop
 801c05e:	370c      	adds	r7, #12
 801c060:	46bd      	mov	sp, r7
 801c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c066:	4770      	bx	lr

0801c068 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801c068:	b480      	push	{r7}
 801c06a:	b083      	sub	sp, #12
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
    return next_;
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	685b      	ldr	r3, [r3, #4]
}
 801c074:	4618      	mov	r0, r3
 801c076:	370c      	adds	r7, #12
 801c078:	46bd      	mov	sp, r7
 801c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07e:	4770      	bx	lr

0801c080 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801c080:	b480      	push	{r7}
 801c082:	b083      	sub	sp, #12
 801c084:	af00      	add	r7, sp, #0
 801c086:	6078      	str	r0, [r7, #4]
    return data_;
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	681b      	ldr	r3, [r3, #0]
}
 801c08c:	4618      	mov	r0, r3
 801c08e:	370c      	adds	r7, #12
 801c090:	46bd      	mov	sp, r7
 801c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c096:	4770      	bx	lr

0801c098 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801c098:	b580      	push	{r7, lr}
 801c09a:	b082      	sub	sp, #8
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
    delete data_;
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d004      	beq.n	801c0b2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801c0a8:	681a      	ldr	r2, [r3, #0]
 801c0aa:	3204      	adds	r2, #4
 801c0ac:	6812      	ldr	r2, [r2, #0]
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	4790      	blx	r2
}
 801c0b2:	bf00      	nop
 801c0b4:	3708      	adds	r7, #8
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	bd80      	pop	{r7, pc}

0801c0ba <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801c0ba:	b480      	push	{r7}
 801c0bc:	b083      	sub	sp, #12
 801c0be:	af00      	add	r7, sp, #0
 801c0c0:	6078      	str	r0, [r7, #4]
 801c0c2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	683a      	ldr	r2, [r7, #0]
 801c0c8:	601a      	str	r2, [r3, #0]
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	605a      	str	r2, [r3, #4]
{
}
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	370c      	adds	r7, #12
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0dc:	4770      	bx	lr

0801c0de <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801c0de:	b580      	push	{r7, lr}
 801c0e0:	b082      	sub	sp, #8
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	6078      	str	r0, [r7, #4]
 801c0e6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	6819      	ldr	r1, [r3, #0]
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	335c      	adds	r3, #92	; 0x5c
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	4610      	mov	r0, r2
 801c0fa:	4798      	blx	r3
}
 801c0fc:	6878      	ldr	r0, [r7, #4]
 801c0fe:	3708      	adds	r7, #8
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}

0801c104 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b082      	sub	sp, #8
 801c108:	af00      	add	r7, sp, #0
 801c10a:	6078      	str	r0, [r7, #4]
 801c10c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	6819      	ldr	r1, [r3, #0]
 801c112:	683b      	ldr	r3, [r7, #0]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	3360      	adds	r3, #96	; 0x60
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	687a      	ldr	r2, [r7, #4]
 801c11e:	4610      	mov	r0, r2
 801c120:	4798      	blx	r3
}
 801c122:	6878      	ldr	r0, [r7, #4]
 801c124:	3708      	adds	r7, #8
 801c126:	46bd      	mov	sp, r7
 801c128:	bd80      	pop	{r7, pc}

0801c12a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801c12a:	b480      	push	{r7}
 801c12c:	b083      	sub	sp, #12
 801c12e:	af00      	add	r7, sp, #0
 801c130:	6078      	str	r0, [r7, #4]
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	2200      	movs	r2, #0
 801c136:	601a      	str	r2, [r3, #0]
{
}
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	4618      	mov	r0, r3
 801c13c:	370c      	adds	r7, #12
 801c13e:	46bd      	mov	sp, r7
 801c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c144:	4770      	bx	lr

0801c146 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801c146:	b580      	push	{r7, lr}
 801c148:	b084      	sub	sp, #16
 801c14a:	af00      	add	r7, sp, #0
 801c14c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d016      	beq.n	801c184 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7ff ff84 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 801c160:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	4618      	mov	r0, r3
 801c168:	f7ff ff96 	bl	801c098 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d003      	beq.n	801c17c <_ZN18MockNamedValueList5clearEv+0x36>
 801c174:	2108      	movs	r1, #8
 801c176:	4618      	mov	r0, r3
 801c178:	f7ea ffee 	bl	8007158 <_ZdlPvj>
        head_ = n;
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	68fa      	ldr	r2, [r7, #12]
 801c180:	601a      	str	r2, [r3, #0]
    while (head_) {
 801c182:	e7e4      	b.n	801c14e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801c184:	bf00      	nop
 801c186:	3710      	adds	r7, #16
 801c188:	46bd      	mov	sp, r7
 801c18a:	bd80      	pop	{r7, pc}

0801c18c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801c18c:	b590      	push	{r4, r7, lr}
 801c18e:	b085      	sub	sp, #20
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
 801c194:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801c196:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c19a:	4916      	ldr	r1, [pc, #88]	; (801c1f4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801c19c:	2008      	movs	r0, #8
 801c19e:	f7ea ffc7 	bl	8007130 <_ZnwjPKci>
 801c1a2:	4604      	mov	r4, r0
 801c1a4:	6839      	ldr	r1, [r7, #0]
 801c1a6:	4620      	mov	r0, r4
 801c1a8:	f7ff ff87 	bl	801c0ba <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801c1ac:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d103      	bne.n	801c1be <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	68ba      	ldr	r2, [r7, #8]
 801c1ba:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801c1bc:	e016      	b.n	801c1ec <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801c1c4:	68f8      	ldr	r0, [r7, #12]
 801c1c6:	f7ff ff4f 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	bf14      	ite	ne
 801c1d0:	2301      	movne	r3, #1
 801c1d2:	2300      	moveq	r3, #0
 801c1d4:	b2db      	uxtb	r3, r3
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d004      	beq.n	801c1e4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801c1da:	68f8      	ldr	r0, [r7, #12]
 801c1dc:	f7ff ff44 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 801c1e0:	60f8      	str	r0, [r7, #12]
 801c1e2:	e7ef      	b.n	801c1c4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801c1e4:	68b9      	ldr	r1, [r7, #8]
 801c1e6:	68f8      	ldr	r0, [r7, #12]
 801c1e8:	f7ff ff30 	bl	801c04c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801c1ec:	bf00      	nop
 801c1ee:	3714      	adds	r7, #20
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	bd90      	pop	{r4, r7, pc}
 801c1f4:	08022ca4 	.word	0x08022ca4

0801c1f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801c1f8:	b590      	push	{r4, r7, lr}
 801c1fa:	b087      	sub	sp, #28
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
 801c200:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	617b      	str	r3, [r7, #20]
 801c208:	697b      	ldr	r3, [r7, #20]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d01e      	beq.n	801c24c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801c20e:	f107 030c 	add.w	r3, r7, #12
 801c212:	6979      	ldr	r1, [r7, #20]
 801c214:	4618      	mov	r0, r3
 801c216:	f7ff ff62 	bl	801c0de <_ZNK22MockNamedValueListNode7getNameEv>
 801c21a:	f107 030c 	add.w	r3, r7, #12
 801c21e:	6839      	ldr	r1, [r7, #0]
 801c220:	4618      	mov	r0, r3
 801c222:	f7ed ff0c 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801c226:	4603      	mov	r3, r0
 801c228:	461c      	mov	r4, r3
 801c22a:	f107 030c 	add.w	r3, r7, #12
 801c22e:	4618      	mov	r0, r3
 801c230:	f7ed fef9 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801c234:	2c00      	cmp	r4, #0
 801c236:	d004      	beq.n	801c242 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801c238:	6978      	ldr	r0, [r7, #20]
 801c23a:	f7ff ff21 	bl	801c080 <_ZN22MockNamedValueListNode4itemEv>
 801c23e:	4603      	mov	r3, r0
 801c240:	e005      	b.n	801c24e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801c242:	6978      	ldr	r0, [r7, #20]
 801c244:	f7ff ff10 	bl	801c068 <_ZN22MockNamedValueListNode4nextEv>
 801c248:	6178      	str	r0, [r7, #20]
 801c24a:	e7dd      	b.n	801c208 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801c24c:	2300      	movs	r3, #0
}
 801c24e:	4618      	mov	r0, r3
 801c250:	371c      	adds	r7, #28
 801c252:	46bd      	mov	sp, r7
 801c254:	bd90      	pop	{r4, r7, pc}

0801c256 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801c256:	b480      	push	{r7}
 801c258:	b083      	sub	sp, #12
 801c25a:	af00      	add	r7, sp, #0
 801c25c:	6078      	str	r0, [r7, #4]
    return head_;
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
}
 801c262:	4618      	mov	r0, r3
 801c264:	370c      	adds	r7, #12
 801c266:	46bd      	mov	sp, r7
 801c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c26c:	4770      	bx	lr

0801c26e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c26e:	b580      	push	{r7, lr}
 801c270:	b084      	sub	sp, #16
 801c272:	af00      	add	r7, sp, #0
 801c274:	60f8      	str	r0, [r7, #12]
 801c276:	60b9      	str	r1, [r7, #8]
 801c278:	607a      	str	r2, [r7, #4]
 801c27a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	68b9      	ldr	r1, [r7, #8]
 801c280:	4618      	mov	r0, r3
 801c282:	f7ed fb6c 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	687a      	ldr	r2, [r7, #4]
 801c28a:	609a      	str	r2, [r3, #8]
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	2200      	movs	r2, #0
 801c290:	60da      	str	r2, [r3, #12]
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	683a      	ldr	r2, [r7, #0]
 801c296:	611a      	str	r2, [r3, #16]
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	4618      	mov	r0, r3
 801c29c:	3710      	adds	r7, #16
 801c29e:	46bd      	mov	sp, r7
 801c2a0:	bd80      	pop	{r7, pc}

0801c2a2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c2a2:	b580      	push	{r7, lr}
 801c2a4:	b084      	sub	sp, #16
 801c2a6:	af00      	add	r7, sp, #0
 801c2a8:	60f8      	str	r0, [r7, #12]
 801c2aa:	60b9      	str	r1, [r7, #8]
 801c2ac:	607a      	str	r2, [r7, #4]
 801c2ae:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	68b9      	ldr	r1, [r7, #8]
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	f7ed fb52 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	2200      	movs	r2, #0
 801c2be:	609a      	str	r2, [r3, #8]
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	687a      	ldr	r2, [r7, #4]
 801c2c4:	60da      	str	r2, [r3, #12]
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	683a      	ldr	r2, [r7, #0]
 801c2ca:	611a      	str	r2, [r3, #16]
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	3710      	adds	r7, #16
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}

0801c2d6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801c2d6:	b580      	push	{r7, lr}
 801c2d8:	b084      	sub	sp, #16
 801c2da:	af00      	add	r7, sp, #0
 801c2dc:	60f8      	str	r0, [r7, #12]
 801c2de:	60b9      	str	r1, [r7, #8]
 801c2e0:	607a      	str	r2, [r7, #4]
 801c2e2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	68b9      	ldr	r1, [r7, #8]
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	f7ed fb38 	bl	800995e <_ZN12SimpleStringC1ERKS_>
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	687a      	ldr	r2, [r7, #4]
 801c2f2:	609a      	str	r2, [r3, #8]
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	683a      	ldr	r2, [r7, #0]
 801c2f8:	60da      	str	r2, [r3, #12]
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	69ba      	ldr	r2, [r7, #24]
 801c2fe:	611a      	str	r2, [r3, #16]
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	4618      	mov	r0, r3
 801c304:	3710      	adds	r7, #16
 801c306:	46bd      	mov	sp, r7
 801c308:	bd80      	pop	{r7, pc}
	...

0801c30c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801c30c:	b480      	push	{r7}
 801c30e:	b083      	sub	sp, #12
 801c310:	af00      	add	r7, sp, #0
 801c312:	6078      	str	r0, [r7, #4]
 801c314:	4a06      	ldr	r2, [pc, #24]	; (801c330 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	601a      	str	r2, [r3, #0]
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	2200      	movs	r2, #0
 801c31e:	605a      	str	r2, [r3, #4]
{

}
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	4618      	mov	r0, r3
 801c324:	370c      	adds	r7, #12
 801c326:	46bd      	mov	sp, r7
 801c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c32c:	4770      	bx	lr
 801c32e:	bf00      	nop
 801c330:	08024a60 	.word	0x08024a60

0801c334 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801c334:	b580      	push	{r7, lr}
 801c336:	b082      	sub	sp, #8
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
 801c33c:	4a05      	ldr	r2, [pc, #20]	; (801c354 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	601a      	str	r2, [r3, #0]
{
    clear();
 801c342:	6878      	ldr	r0, [r7, #4]
 801c344:	f000 f825 	bl	801c392 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	4618      	mov	r0, r3
 801c34c:	3708      	adds	r7, #8
 801c34e:	46bd      	mov	sp, r7
 801c350:	bd80      	pop	{r7, pc}
 801c352:	bf00      	nop
 801c354:	08024a60 	.word	0x08024a60

0801c358 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801c358:	b580      	push	{r7, lr}
 801c35a:	b082      	sub	sp, #8
 801c35c:	af00      	add	r7, sp, #0
 801c35e:	6078      	str	r0, [r7, #4]
}
 801c360:	6878      	ldr	r0, [r7, #4]
 801c362:	f7ff ffe7 	bl	801c334 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801c366:	2108      	movs	r1, #8
 801c368:	6878      	ldr	r0, [r7, #4]
 801c36a:	f7ea fef5 	bl	8007158 <_ZdlPvj>
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	4618      	mov	r0, r3
 801c372:	3708      	adds	r7, #8
 801c374:	46bd      	mov	sp, r7
 801c376:	bd80      	pop	{r7, pc}

0801c378 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801c378:	b580      	push	{r7, lr}
 801c37a:	b082      	sub	sp, #8
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	4618      	mov	r0, r3
 801c384:	f7ed fe4f 	bl	800a026 <_ZN12SimpleStringD1Ev>
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	4618      	mov	r0, r3
 801c38c:	3708      	adds	r7, #8
 801c38e:	46bd      	mov	sp, r7
 801c390:	bd80      	pop	{r7, pc}

0801c392 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801c392:	b590      	push	{r4, r7, lr}
 801c394:	b085      	sub	sp, #20
 801c396:	af00      	add	r7, sp, #0
 801c398:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	685b      	ldr	r3, [r3, #4]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d012      	beq.n	801c3c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	685b      	ldr	r3, [r3, #4]
 801c3a6:	691b      	ldr	r3, [r3, #16]
 801c3a8:	60fb      	str	r3, [r7, #12]
        delete head_;
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	685c      	ldr	r4, [r3, #4]
 801c3ae:	2c00      	cmp	r4, #0
 801c3b0:	d006      	beq.n	801c3c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801c3b2:	4620      	mov	r0, r4
 801c3b4:	f7ff ffe0 	bl	801c378 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801c3b8:	2114      	movs	r1, #20
 801c3ba:	4620      	mov	r0, r4
 801c3bc:	f7ea fecc 	bl	8007158 <_ZdlPvj>
        head_ = next;
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	68fa      	ldr	r2, [r7, #12]
 801c3c4:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c3c6:	e7e8      	b.n	801c39a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801c3c8:	bf00      	nop
 801c3ca:	3714      	adds	r7, #20
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bd90      	pop	{r4, r7, pc}

0801c3d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801c3d0:	b590      	push	{r4, r7, lr}
 801c3d2:	b085      	sub	sp, #20
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	60f8      	str	r0, [r7, #12]
 801c3d8:	60b9      	str	r1, [r7, #8]
 801c3da:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801c3dc:	f240 227a 	movw	r2, #634	; 0x27a
 801c3e0:	4908      	ldr	r1, [pc, #32]	; (801c404 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801c3e2:	2014      	movs	r0, #20
 801c3e4:	f7ea fea4 	bl	8007130 <_ZnwjPKci>
 801c3e8:	4604      	mov	r4, r0
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	685b      	ldr	r3, [r3, #4]
 801c3ee:	687a      	ldr	r2, [r7, #4]
 801c3f0:	68b9      	ldr	r1, [r7, #8]
 801c3f2:	4620      	mov	r0, r4
 801c3f4:	f7ff ff3b 	bl	801c26e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	605c      	str	r4, [r3, #4]
}
 801c3fc:	bf00      	nop
 801c3fe:	3714      	adds	r7, #20
 801c400:	46bd      	mov	sp, r7
 801c402:	bd90      	pop	{r4, r7, pc}
 801c404:	08022ca4 	.word	0x08022ca4

0801c408 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801c408:	b590      	push	{r4, r7, lr}
 801c40a:	b085      	sub	sp, #20
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	60f8      	str	r0, [r7, #12]
 801c410:	60b9      	str	r1, [r7, #8]
 801c412:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801c414:	f240 227f 	movw	r2, #639	; 0x27f
 801c418:	4908      	ldr	r1, [pc, #32]	; (801c43c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801c41a:	2014      	movs	r0, #20
 801c41c:	f7ea fe88 	bl	8007130 <_ZnwjPKci>
 801c420:	4604      	mov	r4, r0
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	687a      	ldr	r2, [r7, #4]
 801c428:	68b9      	ldr	r1, [r7, #8]
 801c42a:	4620      	mov	r0, r4
 801c42c:	f7ff ff39 	bl	801c2a2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	605c      	str	r4, [r3, #4]
}
 801c434:	bf00      	nop
 801c436:	3714      	adds	r7, #20
 801c438:	46bd      	mov	sp, r7
 801c43a:	bd90      	pop	{r4, r7, pc}
 801c43c:	08022ca4 	.word	0x08022ca4

0801c440 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b084      	sub	sp, #16
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
 801c448:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	685b      	ldr	r3, [r3, #4]
 801c44e:	60fb      	str	r3, [r7, #12]
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d017      	beq.n	801c486 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	6839      	ldr	r1, [r7, #0]
 801c45a:	4618      	mov	r0, r3
 801c45c:	f7ed fdef 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801c460:	4603      	mov	r3, r0
 801c462:	2b00      	cmp	r3, #0
 801c464:	d005      	beq.n	801c472 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	689b      	ldr	r3, [r3, #8]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d001      	beq.n	801c472 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801c46e:	2301      	movs	r3, #1
 801c470:	e000      	b.n	801c474 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801c472:	2300      	movs	r3, #0
 801c474:	2b00      	cmp	r3, #0
 801c476:	d002      	beq.n	801c47e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	689b      	ldr	r3, [r3, #8]
 801c47c:	e004      	b.n	801c488 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c47e:	68fb      	ldr	r3, [r7, #12]
 801c480:	691b      	ldr	r3, [r3, #16]
 801c482:	60fb      	str	r3, [r7, #12]
 801c484:	e7e4      	b.n	801c450 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801c486:	2300      	movs	r3, #0
}
 801c488:	4618      	mov	r0, r3
 801c48a:	3710      	adds	r7, #16
 801c48c:	46bd      	mov	sp, r7
 801c48e:	bd80      	pop	{r7, pc}

0801c490 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801c490:	b580      	push	{r7, lr}
 801c492:	b084      	sub	sp, #16
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
 801c498:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	685b      	ldr	r3, [r3, #4]
 801c49e:	60fb      	str	r3, [r7, #12]
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d017      	beq.n	801c4d6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	6839      	ldr	r1, [r7, #0]
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f7ed fdc7 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d005      	beq.n	801c4c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	68db      	ldr	r3, [r3, #12]
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d001      	beq.n	801c4c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801c4be:	2301      	movs	r3, #1
 801c4c0:	e000      	b.n	801c4c4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d002      	beq.n	801c4ce <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	68db      	ldr	r3, [r3, #12]
 801c4cc:	e004      	b.n	801c4d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801c4ce:	68fb      	ldr	r3, [r7, #12]
 801c4d0:	691b      	ldr	r3, [r3, #16]
 801c4d2:	60fb      	str	r3, [r7, #12]
 801c4d4:	e7e4      	b.n	801c4a0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801c4d6:	2300      	movs	r3, #0
}
 801c4d8:	4618      	mov	r0, r3
 801c4da:	3710      	adds	r7, #16
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bd80      	pop	{r7, pc}

0801c4e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801c4e0:	b590      	push	{r4, r7, lr}
 801c4e2:	b087      	sub	sp, #28
 801c4e4:	af02      	add	r7, sp, #8
 801c4e6:	6078      	str	r0, [r7, #4]
 801c4e8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801c4ea:	683b      	ldr	r3, [r7, #0]
 801c4ec:	685b      	ldr	r3, [r3, #4]
 801c4ee:	60fb      	str	r3, [r7, #12]
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d018      	beq.n	801c528 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801c4f6:	f240 2293 	movw	r2, #659	; 0x293
 801c4fa:	490d      	ldr	r1, [pc, #52]	; (801c530 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801c4fc:	2014      	movs	r0, #20
 801c4fe:	f7ea fe17 	bl	8007130 <_ZnwjPKci>
 801c502:	4604      	mov	r4, r0
 801c504:	68f9      	ldr	r1, [r7, #12]
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	689a      	ldr	r2, [r3, #8]
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	68d8      	ldr	r0, [r3, #12]
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	685b      	ldr	r3, [r3, #4]
 801c512:	9300      	str	r3, [sp, #0]
 801c514:	4603      	mov	r3, r0
 801c516:	4620      	mov	r0, r4
 801c518:	f7ff fedd 	bl	801c2d6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	691b      	ldr	r3, [r3, #16]
 801c524:	60fb      	str	r3, [r7, #12]
 801c526:	e7e3      	b.n	801c4f0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801c528:	bf00      	nop
 801c52a:	3714      	adds	r7, #20
 801c52c:	46bd      	mov	sp, r7
 801c52e:	bd90      	pop	{r4, r7, pc}
 801c530:	08022ca4 	.word	0x08022ca4

0801c534 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801c534:	b580      	push	{r7, lr}
 801c536:	b082      	sub	sp, #8
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
 801c53c:	6039      	str	r1, [r7, #0]
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	490b      	ldr	r1, [pc, #44]	; (801c570 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801c542:	4618      	mov	r0, r3
 801c544:	f7ed f9b7 	bl	80098b6 <_ZN12SimpleStringC1EPKc>
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	2200      	movs	r2, #0
 801c54c:	721a      	strb	r2, [r3, #8]
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	2200      	movs	r2, #0
 801c552:	725a      	strb	r2, [r3, #9]
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	2200      	movs	r2, #0
 801c558:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	6839      	ldr	r1, [r7, #0]
 801c55e:	4618      	mov	r0, r3
 801c560:	f7ed fa15 	bl	800998e <_ZN12SimpleStringaSERKS_>
}
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	4618      	mov	r0, r3
 801c568:	3708      	adds	r7, #8
 801c56a:	46bd      	mov	sp, r7
 801c56c:	bd80      	pop	{r7, pc}
 801c56e:	bf00      	nop
 801c570:	08022d80 	.word	0x08022d80

0801c574 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801c574:	b480      	push	{r7}
 801c576:	b083      	sub	sp, #12
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
 801c57c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	683a      	ldr	r2, [r7, #0]
 801c582:	60da      	str	r2, [r3, #12]
    return this;
 801c584:	687b      	ldr	r3, [r7, #4]
}
 801c586:	4618      	mov	r0, r3
 801c588:	370c      	adds	r7, #12
 801c58a:	46bd      	mov	sp, r7
 801c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c590:	4770      	bx	lr

0801c592 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801c592:	b480      	push	{r7}
 801c594:	b083      	sub	sp, #12
 801c596:	af00      	add	r7, sp, #0
 801c598:	6078      	str	r0, [r7, #4]
    return next_;
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	68db      	ldr	r3, [r3, #12]
}
 801c59e:	4618      	mov	r0, r3
 801c5a0:	370c      	adds	r7, #12
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a8:	4770      	bx	lr

0801c5aa <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801c5aa:	b480      	push	{r7}
 801c5ac:	b083      	sub	sp, #12
 801c5ae:	af00      	add	r7, sp, #0
 801c5b0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	2201      	movs	r2, #1
 801c5b6:	721a      	strb	r2, [r3, #8]
}
 801c5b8:	bf00      	nop
 801c5ba:	370c      	adds	r7, #12
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5c2:	4770      	bx	lr

0801c5c4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801c5c4:	b480      	push	{r7}
 801c5c6:	b083      	sub	sp, #12
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	2201      	movs	r2, #1
 801c5d0:	725a      	strb	r2, [r3, #9]
}
 801c5d2:	bf00      	nop
 801c5d4:	370c      	adds	r7, #12
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5dc:	4770      	bx	lr

0801c5de <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801c5de:	b580      	push	{r7, lr}
 801c5e0:	b084      	sub	sp, #16
 801c5e2:	af00      	add	r7, sp, #0
 801c5e4:	6078      	str	r0, [r7, #4]
 801c5e6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	7a1b      	ldrb	r3, [r3, #8]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d007      	beq.n	801c604 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	6838      	ldr	r0, [r7, #0]
 801c5fa:	f7ed fd20 	bl	800a03e <_ZeqRK12SimpleStringS1_>
 801c5fe:	4603      	mov	r3, r0
 801c600:	73fb      	strb	r3, [r7, #15]
 801c602:	e006      	b.n	801c612 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	4619      	mov	r1, r3
 801c608:	6838      	ldr	r0, [r7, #0]
 801c60a:	f7ed f9d2 	bl	80099b2 <_ZNK12SimpleString8containsERKS_>
 801c60e:	4603      	mov	r3, r0
 801c610:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	7a5b      	ldrb	r3, [r3, #9]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d004      	beq.n	801c624 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801c61a:	7bfb      	ldrb	r3, [r7, #15]
 801c61c:	f083 0301 	eor.w	r3, r3, #1
 801c620:	b2db      	uxtb	r3, r3
 801c622:	e005      	b.n	801c630 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801c624:	7bfb      	ldrb	r3, [r7, #15]
 801c626:	2b00      	cmp	r3, #0
 801c628:	bf14      	ite	ne
 801c62a:	2301      	movne	r3, #1
 801c62c:	2300      	moveq	r3, #0
 801c62e:	b2db      	uxtb	r3, r3
}
 801c630:	4618      	mov	r0, r3
 801c632:	3710      	adds	r7, #16
 801c634:	46bd      	mov	sp, r7
 801c636:	bd80      	pop	{r7, pc}

0801c638 <__cxa_guard_acquire>:
 801c638:	6803      	ldr	r3, [r0, #0]
 801c63a:	07db      	lsls	r3, r3, #31
 801c63c:	d406      	bmi.n	801c64c <__cxa_guard_acquire+0x14>
 801c63e:	7843      	ldrb	r3, [r0, #1]
 801c640:	b103      	cbz	r3, 801c644 <__cxa_guard_acquire+0xc>
 801c642:	deff      	udf	#255	; 0xff
 801c644:	2301      	movs	r3, #1
 801c646:	7043      	strb	r3, [r0, #1]
 801c648:	4618      	mov	r0, r3
 801c64a:	4770      	bx	lr
 801c64c:	2000      	movs	r0, #0
 801c64e:	4770      	bx	lr

0801c650 <__cxa_guard_release>:
 801c650:	2301      	movs	r3, #1
 801c652:	6003      	str	r3, [r0, #0]
 801c654:	4770      	bx	lr

0801c656 <__cxa_pure_virtual>:
 801c656:	b508      	push	{r3, lr}
 801c658:	f000 f80c 	bl	801c674 <_ZSt9terminatev>

0801c65c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c65c:	b508      	push	{r3, lr}
 801c65e:	4780      	blx	r0
 801c660:	f000 f816 	bl	801c690 <abort>

0801c664 <_ZSt13get_terminatev>:
 801c664:	4b02      	ldr	r3, [pc, #8]	; (801c670 <_ZSt13get_terminatev+0xc>)
 801c666:	6818      	ldr	r0, [r3, #0]
 801c668:	f3bf 8f5b 	dmb	ish
 801c66c:	4770      	bx	lr
 801c66e:	bf00      	nop
 801c670:	20000100 	.word	0x20000100

0801c674 <_ZSt9terminatev>:
 801c674:	b508      	push	{r3, lr}
 801c676:	f7ff fff5 	bl	801c664 <_ZSt13get_terminatev>
 801c67a:	f7ff ffef 	bl	801c65c <_ZN10__cxxabiv111__terminateEPFvvE>

0801c67e <fabs>:
 801c67e:	ec51 0b10 	vmov	r0, r1, d0
 801c682:	ee10 2a10 	vmov	r2, s0
 801c686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c68a:	ec43 2b10 	vmov	d0, r2, r3
 801c68e:	4770      	bx	lr

0801c690 <abort>:
 801c690:	b508      	push	{r3, lr}
 801c692:	2006      	movs	r0, #6
 801c694:	f000 ff88 	bl	801d5a8 <raise>
 801c698:	2001      	movs	r0, #1
 801c69a:	f7e4 fb72 	bl	8000d82 <_exit>

0801c69e <atexit>:
 801c69e:	2300      	movs	r3, #0
 801c6a0:	4601      	mov	r1, r0
 801c6a2:	461a      	mov	r2, r3
 801c6a4:	4618      	mov	r0, r3
 801c6a6:	f002 b939 	b.w	801e91c <__register_exitproc>
	...

0801c6ac <calloc>:
 801c6ac:	4b02      	ldr	r3, [pc, #8]	; (801c6b8 <calloc+0xc>)
 801c6ae:	460a      	mov	r2, r1
 801c6b0:	4601      	mov	r1, r0
 801c6b2:	6818      	ldr	r0, [r3, #0]
 801c6b4:	f000 bde8 	b.w	801d288 <_calloc_r>
 801c6b8:	20000104 	.word	0x20000104

0801c6bc <__errno>:
 801c6bc:	4b01      	ldr	r3, [pc, #4]	; (801c6c4 <__errno+0x8>)
 801c6be:	6818      	ldr	r0, [r3, #0]
 801c6c0:	4770      	bx	lr
 801c6c2:	bf00      	nop
 801c6c4:	20000104 	.word	0x20000104

0801c6c8 <_fclose_r>:
 801c6c8:	b570      	push	{r4, r5, r6, lr}
 801c6ca:	4605      	mov	r5, r0
 801c6cc:	460c      	mov	r4, r1
 801c6ce:	b911      	cbnz	r1, 801c6d6 <_fclose_r+0xe>
 801c6d0:	2600      	movs	r6, #0
 801c6d2:	4630      	mov	r0, r6
 801c6d4:	bd70      	pop	{r4, r5, r6, pc}
 801c6d6:	b118      	cbz	r0, 801c6e0 <_fclose_r+0x18>
 801c6d8:	6983      	ldr	r3, [r0, #24]
 801c6da:	b90b      	cbnz	r3, 801c6e0 <_fclose_r+0x18>
 801c6dc:	f000 f994 	bl	801ca08 <__sinit>
 801c6e0:	4b2c      	ldr	r3, [pc, #176]	; (801c794 <_fclose_r+0xcc>)
 801c6e2:	429c      	cmp	r4, r3
 801c6e4:	d114      	bne.n	801c710 <_fclose_r+0x48>
 801c6e6:	686c      	ldr	r4, [r5, #4]
 801c6e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c6ea:	07d8      	lsls	r0, r3, #31
 801c6ec:	d405      	bmi.n	801c6fa <_fclose_r+0x32>
 801c6ee:	89a3      	ldrh	r3, [r4, #12]
 801c6f0:	0599      	lsls	r1, r3, #22
 801c6f2:	d402      	bmi.n	801c6fa <_fclose_r+0x32>
 801c6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c6f6:	f000 fd3a 	bl	801d16e <__retarget_lock_acquire_recursive>
 801c6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c6fe:	b98b      	cbnz	r3, 801c724 <_fclose_r+0x5c>
 801c700:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801c702:	f016 0601 	ands.w	r6, r6, #1
 801c706:	d1e3      	bne.n	801c6d0 <_fclose_r+0x8>
 801c708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c70a:	f000 fd32 	bl	801d172 <__retarget_lock_release_recursive>
 801c70e:	e7e0      	b.n	801c6d2 <_fclose_r+0xa>
 801c710:	4b21      	ldr	r3, [pc, #132]	; (801c798 <_fclose_r+0xd0>)
 801c712:	429c      	cmp	r4, r3
 801c714:	d101      	bne.n	801c71a <_fclose_r+0x52>
 801c716:	68ac      	ldr	r4, [r5, #8]
 801c718:	e7e6      	b.n	801c6e8 <_fclose_r+0x20>
 801c71a:	4b20      	ldr	r3, [pc, #128]	; (801c79c <_fclose_r+0xd4>)
 801c71c:	429c      	cmp	r4, r3
 801c71e:	bf08      	it	eq
 801c720:	68ec      	ldreq	r4, [r5, #12]
 801c722:	e7e1      	b.n	801c6e8 <_fclose_r+0x20>
 801c724:	4621      	mov	r1, r4
 801c726:	4628      	mov	r0, r5
 801c728:	f000 f842 	bl	801c7b0 <__sflush_r>
 801c72c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c72e:	4606      	mov	r6, r0
 801c730:	b133      	cbz	r3, 801c740 <_fclose_r+0x78>
 801c732:	6a21      	ldr	r1, [r4, #32]
 801c734:	4628      	mov	r0, r5
 801c736:	4798      	blx	r3
 801c738:	2800      	cmp	r0, #0
 801c73a:	bfb8      	it	lt
 801c73c:	f04f 36ff 	movlt.w	r6, #4294967295
 801c740:	89a3      	ldrh	r3, [r4, #12]
 801c742:	061a      	lsls	r2, r3, #24
 801c744:	d503      	bpl.n	801c74e <_fclose_r+0x86>
 801c746:	6921      	ldr	r1, [r4, #16]
 801c748:	4628      	mov	r0, r5
 801c74a:	f000 fdad 	bl	801d2a8 <_free_r>
 801c74e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c750:	b141      	cbz	r1, 801c764 <_fclose_r+0x9c>
 801c752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c756:	4299      	cmp	r1, r3
 801c758:	d002      	beq.n	801c760 <_fclose_r+0x98>
 801c75a:	4628      	mov	r0, r5
 801c75c:	f000 fda4 	bl	801d2a8 <_free_r>
 801c760:	2300      	movs	r3, #0
 801c762:	6363      	str	r3, [r4, #52]	; 0x34
 801c764:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c766:	b121      	cbz	r1, 801c772 <_fclose_r+0xaa>
 801c768:	4628      	mov	r0, r5
 801c76a:	f000 fd9d 	bl	801d2a8 <_free_r>
 801c76e:	2300      	movs	r3, #0
 801c770:	64a3      	str	r3, [r4, #72]	; 0x48
 801c772:	f000 f931 	bl	801c9d8 <__sfp_lock_acquire>
 801c776:	2300      	movs	r3, #0
 801c778:	81a3      	strh	r3, [r4, #12]
 801c77a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c77c:	07db      	lsls	r3, r3, #31
 801c77e:	d402      	bmi.n	801c786 <_fclose_r+0xbe>
 801c780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c782:	f000 fcf6 	bl	801d172 <__retarget_lock_release_recursive>
 801c786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c788:	f000 fcef 	bl	801d16a <__retarget_lock_close_recursive>
 801c78c:	f000 f92a 	bl	801c9e4 <__sfp_lock_release>
 801c790:	e79f      	b.n	801c6d2 <_fclose_r+0xa>
 801c792:	bf00      	nop
 801c794:	08024b54 	.word	0x08024b54
 801c798:	08024b74 	.word	0x08024b74
 801c79c:	08024b34 	.word	0x08024b34

0801c7a0 <fclose>:
 801c7a0:	4b02      	ldr	r3, [pc, #8]	; (801c7ac <fclose+0xc>)
 801c7a2:	4601      	mov	r1, r0
 801c7a4:	6818      	ldr	r0, [r3, #0]
 801c7a6:	f7ff bf8f 	b.w	801c6c8 <_fclose_r>
 801c7aa:	bf00      	nop
 801c7ac:	20000104 	.word	0x20000104

0801c7b0 <__sflush_r>:
 801c7b0:	898a      	ldrh	r2, [r1, #12]
 801c7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7b6:	4605      	mov	r5, r0
 801c7b8:	0710      	lsls	r0, r2, #28
 801c7ba:	460c      	mov	r4, r1
 801c7bc:	d458      	bmi.n	801c870 <__sflush_r+0xc0>
 801c7be:	684b      	ldr	r3, [r1, #4]
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	dc05      	bgt.n	801c7d0 <__sflush_r+0x20>
 801c7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	dc02      	bgt.n	801c7d0 <__sflush_r+0x20>
 801c7ca:	2000      	movs	r0, #0
 801c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c7d2:	2e00      	cmp	r6, #0
 801c7d4:	d0f9      	beq.n	801c7ca <__sflush_r+0x1a>
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c7dc:	682f      	ldr	r7, [r5, #0]
 801c7de:	602b      	str	r3, [r5, #0]
 801c7e0:	d032      	beq.n	801c848 <__sflush_r+0x98>
 801c7e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c7e4:	89a3      	ldrh	r3, [r4, #12]
 801c7e6:	075a      	lsls	r2, r3, #29
 801c7e8:	d505      	bpl.n	801c7f6 <__sflush_r+0x46>
 801c7ea:	6863      	ldr	r3, [r4, #4]
 801c7ec:	1ac0      	subs	r0, r0, r3
 801c7ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c7f0:	b10b      	cbz	r3, 801c7f6 <__sflush_r+0x46>
 801c7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c7f4:	1ac0      	subs	r0, r0, r3
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	4602      	mov	r2, r0
 801c7fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c7fc:	6a21      	ldr	r1, [r4, #32]
 801c7fe:	4628      	mov	r0, r5
 801c800:	47b0      	blx	r6
 801c802:	1c43      	adds	r3, r0, #1
 801c804:	89a3      	ldrh	r3, [r4, #12]
 801c806:	d106      	bne.n	801c816 <__sflush_r+0x66>
 801c808:	6829      	ldr	r1, [r5, #0]
 801c80a:	291d      	cmp	r1, #29
 801c80c:	d82c      	bhi.n	801c868 <__sflush_r+0xb8>
 801c80e:	4a2a      	ldr	r2, [pc, #168]	; (801c8b8 <__sflush_r+0x108>)
 801c810:	40ca      	lsrs	r2, r1
 801c812:	07d6      	lsls	r6, r2, #31
 801c814:	d528      	bpl.n	801c868 <__sflush_r+0xb8>
 801c816:	2200      	movs	r2, #0
 801c818:	6062      	str	r2, [r4, #4]
 801c81a:	04d9      	lsls	r1, r3, #19
 801c81c:	6922      	ldr	r2, [r4, #16]
 801c81e:	6022      	str	r2, [r4, #0]
 801c820:	d504      	bpl.n	801c82c <__sflush_r+0x7c>
 801c822:	1c42      	adds	r2, r0, #1
 801c824:	d101      	bne.n	801c82a <__sflush_r+0x7a>
 801c826:	682b      	ldr	r3, [r5, #0]
 801c828:	b903      	cbnz	r3, 801c82c <__sflush_r+0x7c>
 801c82a:	6560      	str	r0, [r4, #84]	; 0x54
 801c82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c82e:	602f      	str	r7, [r5, #0]
 801c830:	2900      	cmp	r1, #0
 801c832:	d0ca      	beq.n	801c7ca <__sflush_r+0x1a>
 801c834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c838:	4299      	cmp	r1, r3
 801c83a:	d002      	beq.n	801c842 <__sflush_r+0x92>
 801c83c:	4628      	mov	r0, r5
 801c83e:	f000 fd33 	bl	801d2a8 <_free_r>
 801c842:	2000      	movs	r0, #0
 801c844:	6360      	str	r0, [r4, #52]	; 0x34
 801c846:	e7c1      	b.n	801c7cc <__sflush_r+0x1c>
 801c848:	6a21      	ldr	r1, [r4, #32]
 801c84a:	2301      	movs	r3, #1
 801c84c:	4628      	mov	r0, r5
 801c84e:	47b0      	blx	r6
 801c850:	1c41      	adds	r1, r0, #1
 801c852:	d1c7      	bne.n	801c7e4 <__sflush_r+0x34>
 801c854:	682b      	ldr	r3, [r5, #0]
 801c856:	2b00      	cmp	r3, #0
 801c858:	d0c4      	beq.n	801c7e4 <__sflush_r+0x34>
 801c85a:	2b1d      	cmp	r3, #29
 801c85c:	d001      	beq.n	801c862 <__sflush_r+0xb2>
 801c85e:	2b16      	cmp	r3, #22
 801c860:	d101      	bne.n	801c866 <__sflush_r+0xb6>
 801c862:	602f      	str	r7, [r5, #0]
 801c864:	e7b1      	b.n	801c7ca <__sflush_r+0x1a>
 801c866:	89a3      	ldrh	r3, [r4, #12]
 801c868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c86c:	81a3      	strh	r3, [r4, #12]
 801c86e:	e7ad      	b.n	801c7cc <__sflush_r+0x1c>
 801c870:	690f      	ldr	r7, [r1, #16]
 801c872:	2f00      	cmp	r7, #0
 801c874:	d0a9      	beq.n	801c7ca <__sflush_r+0x1a>
 801c876:	0793      	lsls	r3, r2, #30
 801c878:	680e      	ldr	r6, [r1, #0]
 801c87a:	bf08      	it	eq
 801c87c:	694b      	ldreq	r3, [r1, #20]
 801c87e:	600f      	str	r7, [r1, #0]
 801c880:	bf18      	it	ne
 801c882:	2300      	movne	r3, #0
 801c884:	eba6 0807 	sub.w	r8, r6, r7
 801c888:	608b      	str	r3, [r1, #8]
 801c88a:	f1b8 0f00 	cmp.w	r8, #0
 801c88e:	dd9c      	ble.n	801c7ca <__sflush_r+0x1a>
 801c890:	6a21      	ldr	r1, [r4, #32]
 801c892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c894:	4643      	mov	r3, r8
 801c896:	463a      	mov	r2, r7
 801c898:	4628      	mov	r0, r5
 801c89a:	47b0      	blx	r6
 801c89c:	2800      	cmp	r0, #0
 801c89e:	dc06      	bgt.n	801c8ae <__sflush_r+0xfe>
 801c8a0:	89a3      	ldrh	r3, [r4, #12]
 801c8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8a6:	81a3      	strh	r3, [r4, #12]
 801c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c8ac:	e78e      	b.n	801c7cc <__sflush_r+0x1c>
 801c8ae:	4407      	add	r7, r0
 801c8b0:	eba8 0800 	sub.w	r8, r8, r0
 801c8b4:	e7e9      	b.n	801c88a <__sflush_r+0xda>
 801c8b6:	bf00      	nop
 801c8b8:	20400001 	.word	0x20400001

0801c8bc <_fflush_r>:
 801c8bc:	b538      	push	{r3, r4, r5, lr}
 801c8be:	690b      	ldr	r3, [r1, #16]
 801c8c0:	4605      	mov	r5, r0
 801c8c2:	460c      	mov	r4, r1
 801c8c4:	b913      	cbnz	r3, 801c8cc <_fflush_r+0x10>
 801c8c6:	2500      	movs	r5, #0
 801c8c8:	4628      	mov	r0, r5
 801c8ca:	bd38      	pop	{r3, r4, r5, pc}
 801c8cc:	b118      	cbz	r0, 801c8d6 <_fflush_r+0x1a>
 801c8ce:	6983      	ldr	r3, [r0, #24]
 801c8d0:	b90b      	cbnz	r3, 801c8d6 <_fflush_r+0x1a>
 801c8d2:	f000 f899 	bl	801ca08 <__sinit>
 801c8d6:	4b14      	ldr	r3, [pc, #80]	; (801c928 <_fflush_r+0x6c>)
 801c8d8:	429c      	cmp	r4, r3
 801c8da:	d11b      	bne.n	801c914 <_fflush_r+0x58>
 801c8dc:	686c      	ldr	r4, [r5, #4]
 801c8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d0ef      	beq.n	801c8c6 <_fflush_r+0xa>
 801c8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c8e8:	07d0      	lsls	r0, r2, #31
 801c8ea:	d404      	bmi.n	801c8f6 <_fflush_r+0x3a>
 801c8ec:	0599      	lsls	r1, r3, #22
 801c8ee:	d402      	bmi.n	801c8f6 <_fflush_r+0x3a>
 801c8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c8f2:	f000 fc3c 	bl	801d16e <__retarget_lock_acquire_recursive>
 801c8f6:	4628      	mov	r0, r5
 801c8f8:	4621      	mov	r1, r4
 801c8fa:	f7ff ff59 	bl	801c7b0 <__sflush_r>
 801c8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c900:	07da      	lsls	r2, r3, #31
 801c902:	4605      	mov	r5, r0
 801c904:	d4e0      	bmi.n	801c8c8 <_fflush_r+0xc>
 801c906:	89a3      	ldrh	r3, [r4, #12]
 801c908:	059b      	lsls	r3, r3, #22
 801c90a:	d4dd      	bmi.n	801c8c8 <_fflush_r+0xc>
 801c90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c90e:	f000 fc30 	bl	801d172 <__retarget_lock_release_recursive>
 801c912:	e7d9      	b.n	801c8c8 <_fflush_r+0xc>
 801c914:	4b05      	ldr	r3, [pc, #20]	; (801c92c <_fflush_r+0x70>)
 801c916:	429c      	cmp	r4, r3
 801c918:	d101      	bne.n	801c91e <_fflush_r+0x62>
 801c91a:	68ac      	ldr	r4, [r5, #8]
 801c91c:	e7df      	b.n	801c8de <_fflush_r+0x22>
 801c91e:	4b04      	ldr	r3, [pc, #16]	; (801c930 <_fflush_r+0x74>)
 801c920:	429c      	cmp	r4, r3
 801c922:	bf08      	it	eq
 801c924:	68ec      	ldreq	r4, [r5, #12]
 801c926:	e7da      	b.n	801c8de <_fflush_r+0x22>
 801c928:	08024b54 	.word	0x08024b54
 801c92c:	08024b74 	.word	0x08024b74
 801c930:	08024b34 	.word	0x08024b34

0801c934 <fflush>:
 801c934:	4601      	mov	r1, r0
 801c936:	b920      	cbnz	r0, 801c942 <fflush+0xe>
 801c938:	4b04      	ldr	r3, [pc, #16]	; (801c94c <fflush+0x18>)
 801c93a:	4905      	ldr	r1, [pc, #20]	; (801c950 <fflush+0x1c>)
 801c93c:	6818      	ldr	r0, [r3, #0]
 801c93e:	f000 babb 	b.w	801ceb8 <_fwalk_reent>
 801c942:	4b04      	ldr	r3, [pc, #16]	; (801c954 <fflush+0x20>)
 801c944:	6818      	ldr	r0, [r3, #0]
 801c946:	f7ff bfb9 	b.w	801c8bc <_fflush_r>
 801c94a:	bf00      	nop
 801c94c:	08024b94 	.word	0x08024b94
 801c950:	0801c8bd 	.word	0x0801c8bd
 801c954:	20000104 	.word	0x20000104

0801c958 <std>:
 801c958:	2300      	movs	r3, #0
 801c95a:	b510      	push	{r4, lr}
 801c95c:	4604      	mov	r4, r0
 801c95e:	e9c0 3300 	strd	r3, r3, [r0]
 801c962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c966:	6083      	str	r3, [r0, #8]
 801c968:	8181      	strh	r1, [r0, #12]
 801c96a:	6643      	str	r3, [r0, #100]	; 0x64
 801c96c:	81c2      	strh	r2, [r0, #14]
 801c96e:	6183      	str	r3, [r0, #24]
 801c970:	4619      	mov	r1, r3
 801c972:	2208      	movs	r2, #8
 801c974:	305c      	adds	r0, #92	; 0x5c
 801c976:	f000 fc7f 	bl	801d278 <memset>
 801c97a:	4b05      	ldr	r3, [pc, #20]	; (801c990 <std+0x38>)
 801c97c:	6263      	str	r3, [r4, #36]	; 0x24
 801c97e:	4b05      	ldr	r3, [pc, #20]	; (801c994 <std+0x3c>)
 801c980:	62a3      	str	r3, [r4, #40]	; 0x28
 801c982:	4b05      	ldr	r3, [pc, #20]	; (801c998 <std+0x40>)
 801c984:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c986:	4b05      	ldr	r3, [pc, #20]	; (801c99c <std+0x44>)
 801c988:	6224      	str	r4, [r4, #32]
 801c98a:	6323      	str	r3, [r4, #48]	; 0x30
 801c98c:	bd10      	pop	{r4, pc}
 801c98e:	bf00      	nop
 801c990:	0801d5e1 	.word	0x0801d5e1
 801c994:	0801d607 	.word	0x0801d607
 801c998:	0801d63f 	.word	0x0801d63f
 801c99c:	0801d663 	.word	0x0801d663

0801c9a0 <_cleanup_r>:
 801c9a0:	4901      	ldr	r1, [pc, #4]	; (801c9a8 <_cleanup_r+0x8>)
 801c9a2:	f000 ba89 	b.w	801ceb8 <_fwalk_reent>
 801c9a6:	bf00      	nop
 801c9a8:	0801c8bd 	.word	0x0801c8bd

0801c9ac <__sfmoreglue>:
 801c9ac:	b570      	push	{r4, r5, r6, lr}
 801c9ae:	1e4a      	subs	r2, r1, #1
 801c9b0:	2568      	movs	r5, #104	; 0x68
 801c9b2:	4355      	muls	r5, r2
 801c9b4:	460e      	mov	r6, r1
 801c9b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c9ba:	f000 fcc5 	bl	801d348 <_malloc_r>
 801c9be:	4604      	mov	r4, r0
 801c9c0:	b140      	cbz	r0, 801c9d4 <__sfmoreglue+0x28>
 801c9c2:	2100      	movs	r1, #0
 801c9c4:	e9c0 1600 	strd	r1, r6, [r0]
 801c9c8:	300c      	adds	r0, #12
 801c9ca:	60a0      	str	r0, [r4, #8]
 801c9cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c9d0:	f000 fc52 	bl	801d278 <memset>
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	bd70      	pop	{r4, r5, r6, pc}

0801c9d8 <__sfp_lock_acquire>:
 801c9d8:	4801      	ldr	r0, [pc, #4]	; (801c9e0 <__sfp_lock_acquire+0x8>)
 801c9da:	f000 bbc8 	b.w	801d16e <__retarget_lock_acquire_recursive>
 801c9de:	bf00      	nop
 801c9e0:	20000d3c 	.word	0x20000d3c

0801c9e4 <__sfp_lock_release>:
 801c9e4:	4801      	ldr	r0, [pc, #4]	; (801c9ec <__sfp_lock_release+0x8>)
 801c9e6:	f000 bbc4 	b.w	801d172 <__retarget_lock_release_recursive>
 801c9ea:	bf00      	nop
 801c9ec:	20000d3c 	.word	0x20000d3c

0801c9f0 <__sinit_lock_acquire>:
 801c9f0:	4801      	ldr	r0, [pc, #4]	; (801c9f8 <__sinit_lock_acquire+0x8>)
 801c9f2:	f000 bbbc 	b.w	801d16e <__retarget_lock_acquire_recursive>
 801c9f6:	bf00      	nop
 801c9f8:	20000d37 	.word	0x20000d37

0801c9fc <__sinit_lock_release>:
 801c9fc:	4801      	ldr	r0, [pc, #4]	; (801ca04 <__sinit_lock_release+0x8>)
 801c9fe:	f000 bbb8 	b.w	801d172 <__retarget_lock_release_recursive>
 801ca02:	bf00      	nop
 801ca04:	20000d37 	.word	0x20000d37

0801ca08 <__sinit>:
 801ca08:	b510      	push	{r4, lr}
 801ca0a:	4604      	mov	r4, r0
 801ca0c:	f7ff fff0 	bl	801c9f0 <__sinit_lock_acquire>
 801ca10:	69a3      	ldr	r3, [r4, #24]
 801ca12:	b11b      	cbz	r3, 801ca1c <__sinit+0x14>
 801ca14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca18:	f7ff bff0 	b.w	801c9fc <__sinit_lock_release>
 801ca1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ca20:	6523      	str	r3, [r4, #80]	; 0x50
 801ca22:	4b13      	ldr	r3, [pc, #76]	; (801ca70 <__sinit+0x68>)
 801ca24:	4a13      	ldr	r2, [pc, #76]	; (801ca74 <__sinit+0x6c>)
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	62a2      	str	r2, [r4, #40]	; 0x28
 801ca2a:	42a3      	cmp	r3, r4
 801ca2c:	bf04      	itt	eq
 801ca2e:	2301      	moveq	r3, #1
 801ca30:	61a3      	streq	r3, [r4, #24]
 801ca32:	4620      	mov	r0, r4
 801ca34:	f000 f820 	bl	801ca78 <__sfp>
 801ca38:	6060      	str	r0, [r4, #4]
 801ca3a:	4620      	mov	r0, r4
 801ca3c:	f000 f81c 	bl	801ca78 <__sfp>
 801ca40:	60a0      	str	r0, [r4, #8]
 801ca42:	4620      	mov	r0, r4
 801ca44:	f000 f818 	bl	801ca78 <__sfp>
 801ca48:	2200      	movs	r2, #0
 801ca4a:	60e0      	str	r0, [r4, #12]
 801ca4c:	2104      	movs	r1, #4
 801ca4e:	6860      	ldr	r0, [r4, #4]
 801ca50:	f7ff ff82 	bl	801c958 <std>
 801ca54:	68a0      	ldr	r0, [r4, #8]
 801ca56:	2201      	movs	r2, #1
 801ca58:	2109      	movs	r1, #9
 801ca5a:	f7ff ff7d 	bl	801c958 <std>
 801ca5e:	68e0      	ldr	r0, [r4, #12]
 801ca60:	2202      	movs	r2, #2
 801ca62:	2112      	movs	r1, #18
 801ca64:	f7ff ff78 	bl	801c958 <std>
 801ca68:	2301      	movs	r3, #1
 801ca6a:	61a3      	str	r3, [r4, #24]
 801ca6c:	e7d2      	b.n	801ca14 <__sinit+0xc>
 801ca6e:	bf00      	nop
 801ca70:	08024b94 	.word	0x08024b94
 801ca74:	0801c9a1 	.word	0x0801c9a1

0801ca78 <__sfp>:
 801ca78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca7a:	4607      	mov	r7, r0
 801ca7c:	f7ff ffac 	bl	801c9d8 <__sfp_lock_acquire>
 801ca80:	4b1e      	ldr	r3, [pc, #120]	; (801cafc <__sfp+0x84>)
 801ca82:	681e      	ldr	r6, [r3, #0]
 801ca84:	69b3      	ldr	r3, [r6, #24]
 801ca86:	b913      	cbnz	r3, 801ca8e <__sfp+0x16>
 801ca88:	4630      	mov	r0, r6
 801ca8a:	f7ff ffbd 	bl	801ca08 <__sinit>
 801ca8e:	3648      	adds	r6, #72	; 0x48
 801ca90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ca94:	3b01      	subs	r3, #1
 801ca96:	d503      	bpl.n	801caa0 <__sfp+0x28>
 801ca98:	6833      	ldr	r3, [r6, #0]
 801ca9a:	b30b      	cbz	r3, 801cae0 <__sfp+0x68>
 801ca9c:	6836      	ldr	r6, [r6, #0]
 801ca9e:	e7f7      	b.n	801ca90 <__sfp+0x18>
 801caa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801caa4:	b9d5      	cbnz	r5, 801cadc <__sfp+0x64>
 801caa6:	4b16      	ldr	r3, [pc, #88]	; (801cb00 <__sfp+0x88>)
 801caa8:	60e3      	str	r3, [r4, #12]
 801caaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801caae:	6665      	str	r5, [r4, #100]	; 0x64
 801cab0:	f000 fb5a 	bl	801d168 <__retarget_lock_init_recursive>
 801cab4:	f7ff ff96 	bl	801c9e4 <__sfp_lock_release>
 801cab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cabc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cac0:	6025      	str	r5, [r4, #0]
 801cac2:	61a5      	str	r5, [r4, #24]
 801cac4:	2208      	movs	r2, #8
 801cac6:	4629      	mov	r1, r5
 801cac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cacc:	f000 fbd4 	bl	801d278 <memset>
 801cad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cad8:	4620      	mov	r0, r4
 801cada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cadc:	3468      	adds	r4, #104	; 0x68
 801cade:	e7d9      	b.n	801ca94 <__sfp+0x1c>
 801cae0:	2104      	movs	r1, #4
 801cae2:	4638      	mov	r0, r7
 801cae4:	f7ff ff62 	bl	801c9ac <__sfmoreglue>
 801cae8:	4604      	mov	r4, r0
 801caea:	6030      	str	r0, [r6, #0]
 801caec:	2800      	cmp	r0, #0
 801caee:	d1d5      	bne.n	801ca9c <__sfp+0x24>
 801caf0:	f7ff ff78 	bl	801c9e4 <__sfp_lock_release>
 801caf4:	230c      	movs	r3, #12
 801caf6:	603b      	str	r3, [r7, #0]
 801caf8:	e7ee      	b.n	801cad8 <__sfp+0x60>
 801cafa:	bf00      	nop
 801cafc:	08024b94 	.word	0x08024b94
 801cb00:	ffff0001 	.word	0xffff0001

0801cb04 <_fopen_r>:
 801cb04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb06:	460f      	mov	r7, r1
 801cb08:	4611      	mov	r1, r2
 801cb0a:	aa01      	add	r2, sp, #4
 801cb0c:	4605      	mov	r5, r0
 801cb0e:	f001 ff99 	bl	801ea44 <__sflags>
 801cb12:	4606      	mov	r6, r0
 801cb14:	b918      	cbnz	r0, 801cb1e <_fopen_r+0x1a>
 801cb16:	2400      	movs	r4, #0
 801cb18:	4620      	mov	r0, r4
 801cb1a:	b003      	add	sp, #12
 801cb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb1e:	4628      	mov	r0, r5
 801cb20:	f7ff ffaa 	bl	801ca78 <__sfp>
 801cb24:	4604      	mov	r4, r0
 801cb26:	2800      	cmp	r0, #0
 801cb28:	d0f5      	beq.n	801cb16 <_fopen_r+0x12>
 801cb2a:	4639      	mov	r1, r7
 801cb2c:	9a01      	ldr	r2, [sp, #4]
 801cb2e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801cb32:	4628      	mov	r0, r5
 801cb34:	f000 fc62 	bl	801d3fc <_open_r>
 801cb38:	1e07      	subs	r7, r0, #0
 801cb3a:	da09      	bge.n	801cb50 <_fopen_r+0x4c>
 801cb3c:	2500      	movs	r5, #0
 801cb3e:	f7ff ff4b 	bl	801c9d8 <__sfp_lock_acquire>
 801cb42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb44:	81a5      	strh	r5, [r4, #12]
 801cb46:	f000 fb10 	bl	801d16a <__retarget_lock_close_recursive>
 801cb4a:	f7ff ff4b 	bl	801c9e4 <__sfp_lock_release>
 801cb4e:	e7e2      	b.n	801cb16 <_fopen_r+0x12>
 801cb50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb52:	07db      	lsls	r3, r3, #31
 801cb54:	d405      	bmi.n	801cb62 <_fopen_r+0x5e>
 801cb56:	89a3      	ldrh	r3, [r4, #12]
 801cb58:	0598      	lsls	r0, r3, #22
 801cb5a:	d402      	bmi.n	801cb62 <_fopen_r+0x5e>
 801cb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb5e:	f000 fb06 	bl	801d16e <__retarget_lock_acquire_recursive>
 801cb62:	4b0e      	ldr	r3, [pc, #56]	; (801cb9c <_fopen_r+0x98>)
 801cb64:	6263      	str	r3, [r4, #36]	; 0x24
 801cb66:	4b0e      	ldr	r3, [pc, #56]	; (801cba0 <_fopen_r+0x9c>)
 801cb68:	62a3      	str	r3, [r4, #40]	; 0x28
 801cb6a:	4b0e      	ldr	r3, [pc, #56]	; (801cba4 <_fopen_r+0xa0>)
 801cb6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cb6e:	05f1      	lsls	r1, r6, #23
 801cb70:	4b0d      	ldr	r3, [pc, #52]	; (801cba8 <_fopen_r+0xa4>)
 801cb72:	81e7      	strh	r7, [r4, #14]
 801cb74:	81a6      	strh	r6, [r4, #12]
 801cb76:	6224      	str	r4, [r4, #32]
 801cb78:	6323      	str	r3, [r4, #48]	; 0x30
 801cb7a:	d505      	bpl.n	801cb88 <_fopen_r+0x84>
 801cb7c:	2302      	movs	r3, #2
 801cb7e:	2200      	movs	r2, #0
 801cb80:	4621      	mov	r1, r4
 801cb82:	4628      	mov	r0, r5
 801cb84:	f000 f888 	bl	801cc98 <_fseek_r>
 801cb88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb8a:	07da      	lsls	r2, r3, #31
 801cb8c:	d4c4      	bmi.n	801cb18 <_fopen_r+0x14>
 801cb8e:	89a3      	ldrh	r3, [r4, #12]
 801cb90:	059b      	lsls	r3, r3, #22
 801cb92:	d4c1      	bmi.n	801cb18 <_fopen_r+0x14>
 801cb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb96:	f000 faec 	bl	801d172 <__retarget_lock_release_recursive>
 801cb9a:	e7bd      	b.n	801cb18 <_fopen_r+0x14>
 801cb9c:	0801d5e1 	.word	0x0801d5e1
 801cba0:	0801d607 	.word	0x0801d607
 801cba4:	0801d63f 	.word	0x0801d63f
 801cba8:	0801d663 	.word	0x0801d663

0801cbac <fopen>:
 801cbac:	4b02      	ldr	r3, [pc, #8]	; (801cbb8 <fopen+0xc>)
 801cbae:	460a      	mov	r2, r1
 801cbb0:	4601      	mov	r1, r0
 801cbb2:	6818      	ldr	r0, [r3, #0]
 801cbb4:	f7ff bfa6 	b.w	801cb04 <_fopen_r>
 801cbb8:	20000104 	.word	0x20000104

0801cbbc <_fputs_r>:
 801cbbc:	b570      	push	{r4, r5, r6, lr}
 801cbbe:	460e      	mov	r6, r1
 801cbc0:	4614      	mov	r4, r2
 801cbc2:	4605      	mov	r5, r0
 801cbc4:	b118      	cbz	r0, 801cbce <_fputs_r+0x12>
 801cbc6:	6983      	ldr	r3, [r0, #24]
 801cbc8:	b90b      	cbnz	r3, 801cbce <_fputs_r+0x12>
 801cbca:	f7ff ff1d 	bl	801ca08 <__sinit>
 801cbce:	4b2b      	ldr	r3, [pc, #172]	; (801cc7c <_fputs_r+0xc0>)
 801cbd0:	429c      	cmp	r4, r3
 801cbd2:	d11e      	bne.n	801cc12 <_fputs_r+0x56>
 801cbd4:	686c      	ldr	r4, [r5, #4]
 801cbd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbd8:	07da      	lsls	r2, r3, #31
 801cbda:	d405      	bmi.n	801cbe8 <_fputs_r+0x2c>
 801cbdc:	89a3      	ldrh	r3, [r4, #12]
 801cbde:	059b      	lsls	r3, r3, #22
 801cbe0:	d402      	bmi.n	801cbe8 <_fputs_r+0x2c>
 801cbe2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbe4:	f000 fac3 	bl	801d16e <__retarget_lock_acquire_recursive>
 801cbe8:	89a3      	ldrh	r3, [r4, #12]
 801cbea:	0718      	lsls	r0, r3, #28
 801cbec:	d51b      	bpl.n	801cc26 <_fputs_r+0x6a>
 801cbee:	6923      	ldr	r3, [r4, #16]
 801cbf0:	b1cb      	cbz	r3, 801cc26 <_fputs_r+0x6a>
 801cbf2:	3e01      	subs	r6, #1
 801cbf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801cbf8:	bb39      	cbnz	r1, 801cc4a <_fputs_r+0x8e>
 801cbfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801cbfc:	f015 0501 	ands.w	r5, r5, #1
 801cc00:	d139      	bne.n	801cc76 <_fputs_r+0xba>
 801cc02:	89a3      	ldrh	r3, [r4, #12]
 801cc04:	0599      	lsls	r1, r3, #22
 801cc06:	d402      	bmi.n	801cc0e <_fputs_r+0x52>
 801cc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc0a:	f000 fab2 	bl	801d172 <__retarget_lock_release_recursive>
 801cc0e:	4628      	mov	r0, r5
 801cc10:	bd70      	pop	{r4, r5, r6, pc}
 801cc12:	4b1b      	ldr	r3, [pc, #108]	; (801cc80 <_fputs_r+0xc4>)
 801cc14:	429c      	cmp	r4, r3
 801cc16:	d101      	bne.n	801cc1c <_fputs_r+0x60>
 801cc18:	68ac      	ldr	r4, [r5, #8]
 801cc1a:	e7dc      	b.n	801cbd6 <_fputs_r+0x1a>
 801cc1c:	4b19      	ldr	r3, [pc, #100]	; (801cc84 <_fputs_r+0xc8>)
 801cc1e:	429c      	cmp	r4, r3
 801cc20:	bf08      	it	eq
 801cc22:	68ec      	ldreq	r4, [r5, #12]
 801cc24:	e7d7      	b.n	801cbd6 <_fputs_r+0x1a>
 801cc26:	4621      	mov	r1, r4
 801cc28:	4628      	mov	r0, r5
 801cc2a:	f001 fe09 	bl	801e840 <__swsetup_r>
 801cc2e:	2800      	cmp	r0, #0
 801cc30:	d0df      	beq.n	801cbf2 <_fputs_r+0x36>
 801cc32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cc34:	07da      	lsls	r2, r3, #31
 801cc36:	d405      	bmi.n	801cc44 <_fputs_r+0x88>
 801cc38:	89a3      	ldrh	r3, [r4, #12]
 801cc3a:	059b      	lsls	r3, r3, #22
 801cc3c:	d402      	bmi.n	801cc44 <_fputs_r+0x88>
 801cc3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc40:	f000 fa97 	bl	801d172 <__retarget_lock_release_recursive>
 801cc44:	f04f 35ff 	mov.w	r5, #4294967295
 801cc48:	e7e1      	b.n	801cc0e <_fputs_r+0x52>
 801cc4a:	68a3      	ldr	r3, [r4, #8]
 801cc4c:	3b01      	subs	r3, #1
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	60a3      	str	r3, [r4, #8]
 801cc52:	da04      	bge.n	801cc5e <_fputs_r+0xa2>
 801cc54:	69a2      	ldr	r2, [r4, #24]
 801cc56:	4293      	cmp	r3, r2
 801cc58:	db06      	blt.n	801cc68 <_fputs_r+0xac>
 801cc5a:	290a      	cmp	r1, #10
 801cc5c:	d004      	beq.n	801cc68 <_fputs_r+0xac>
 801cc5e:	6823      	ldr	r3, [r4, #0]
 801cc60:	1c5a      	adds	r2, r3, #1
 801cc62:	6022      	str	r2, [r4, #0]
 801cc64:	7019      	strb	r1, [r3, #0]
 801cc66:	e7c5      	b.n	801cbf4 <_fputs_r+0x38>
 801cc68:	4622      	mov	r2, r4
 801cc6a:	4628      	mov	r0, r5
 801cc6c:	f001 fd84 	bl	801e778 <__swbuf_r>
 801cc70:	3001      	adds	r0, #1
 801cc72:	d1bf      	bne.n	801cbf4 <_fputs_r+0x38>
 801cc74:	e7dd      	b.n	801cc32 <_fputs_r+0x76>
 801cc76:	460d      	mov	r5, r1
 801cc78:	e7c9      	b.n	801cc0e <_fputs_r+0x52>
 801cc7a:	bf00      	nop
 801cc7c:	08024b54 	.word	0x08024b54
 801cc80:	08024b74 	.word	0x08024b74
 801cc84:	08024b34 	.word	0x08024b34

0801cc88 <fputs>:
 801cc88:	4b02      	ldr	r3, [pc, #8]	; (801cc94 <fputs+0xc>)
 801cc8a:	460a      	mov	r2, r1
 801cc8c:	4601      	mov	r1, r0
 801cc8e:	6818      	ldr	r0, [r3, #0]
 801cc90:	f7ff bf94 	b.w	801cbbc <_fputs_r>
 801cc94:	20000104 	.word	0x20000104

0801cc98 <_fseek_r>:
 801cc98:	f000 b800 	b.w	801cc9c <_fseeko_r>

0801cc9c <_fseeko_r>:
 801cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cca0:	460c      	mov	r4, r1
 801cca2:	4617      	mov	r7, r2
 801cca4:	461e      	mov	r6, r3
 801cca6:	4605      	mov	r5, r0
 801cca8:	b118      	cbz	r0, 801ccb2 <_fseeko_r+0x16>
 801ccaa:	6983      	ldr	r3, [r0, #24]
 801ccac:	b90b      	cbnz	r3, 801ccb2 <_fseeko_r+0x16>
 801ccae:	f7ff feab 	bl	801ca08 <__sinit>
 801ccb2:	4b44      	ldr	r3, [pc, #272]	; (801cdc4 <_fseeko_r+0x128>)
 801ccb4:	429c      	cmp	r4, r3
 801ccb6:	d122      	bne.n	801ccfe <_fseeko_r+0x62>
 801ccb8:	686c      	ldr	r4, [r5, #4]
 801ccba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ccbc:	07d9      	lsls	r1, r3, #31
 801ccbe:	d405      	bmi.n	801cccc <_fseeko_r+0x30>
 801ccc0:	89a3      	ldrh	r3, [r4, #12]
 801ccc2:	059a      	lsls	r2, r3, #22
 801ccc4:	d402      	bmi.n	801cccc <_fseeko_r+0x30>
 801ccc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ccc8:	f000 fa51 	bl	801d16e <__retarget_lock_acquire_recursive>
 801cccc:	89a3      	ldrh	r3, [r4, #12]
 801ccce:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801ccd2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801ccd6:	d103      	bne.n	801cce0 <_fseeko_r+0x44>
 801ccd8:	4621      	mov	r1, r4
 801ccda:	4628      	mov	r0, r5
 801ccdc:	f7ff fdee 	bl	801c8bc <_fflush_r>
 801cce0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801cce4:	f1b8 0f00 	cmp.w	r8, #0
 801cce8:	d113      	bne.n	801cd12 <_fseeko_r+0x76>
 801ccea:	231d      	movs	r3, #29
 801ccec:	602b      	str	r3, [r5, #0]
 801ccee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ccf0:	07d9      	lsls	r1, r3, #31
 801ccf2:	d55d      	bpl.n	801cdb0 <_fseeko_r+0x114>
 801ccf4:	f04f 36ff 	mov.w	r6, #4294967295
 801ccf8:	4630      	mov	r0, r6
 801ccfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccfe:	4b32      	ldr	r3, [pc, #200]	; (801cdc8 <_fseeko_r+0x12c>)
 801cd00:	429c      	cmp	r4, r3
 801cd02:	d101      	bne.n	801cd08 <_fseeko_r+0x6c>
 801cd04:	68ac      	ldr	r4, [r5, #8]
 801cd06:	e7d8      	b.n	801ccba <_fseeko_r+0x1e>
 801cd08:	4b30      	ldr	r3, [pc, #192]	; (801cdcc <_fseeko_r+0x130>)
 801cd0a:	429c      	cmp	r4, r3
 801cd0c:	bf08      	it	eq
 801cd0e:	68ec      	ldreq	r4, [r5, #12]
 801cd10:	e7d3      	b.n	801ccba <_fseeko_r+0x1e>
 801cd12:	2e01      	cmp	r6, #1
 801cd14:	d036      	beq.n	801cd84 <_fseeko_r+0xe8>
 801cd16:	f036 0302 	bics.w	r3, r6, #2
 801cd1a:	d147      	bne.n	801cdac <_fseeko_r+0x110>
 801cd1c:	6923      	ldr	r3, [r4, #16]
 801cd1e:	b91b      	cbnz	r3, 801cd28 <_fseeko_r+0x8c>
 801cd20:	4621      	mov	r1, r4
 801cd22:	4628      	mov	r0, r5
 801cd24:	f000 fa4a 	bl	801d1bc <__smakebuf_r>
 801cd28:	4621      	mov	r1, r4
 801cd2a:	4628      	mov	r0, r5
 801cd2c:	f7ff fdc6 	bl	801c8bc <_fflush_r>
 801cd30:	2800      	cmp	r0, #0
 801cd32:	d1dc      	bne.n	801ccee <_fseeko_r+0x52>
 801cd34:	6a21      	ldr	r1, [r4, #32]
 801cd36:	4633      	mov	r3, r6
 801cd38:	463a      	mov	r2, r7
 801cd3a:	4628      	mov	r0, r5
 801cd3c:	47c0      	blx	r8
 801cd3e:	3001      	adds	r0, #1
 801cd40:	d0d5      	beq.n	801ccee <_fseeko_r+0x52>
 801cd42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd44:	b141      	cbz	r1, 801cd58 <_fseeko_r+0xbc>
 801cd46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cd4a:	4299      	cmp	r1, r3
 801cd4c:	d002      	beq.n	801cd54 <_fseeko_r+0xb8>
 801cd4e:	4628      	mov	r0, r5
 801cd50:	f000 faaa 	bl	801d2a8 <_free_r>
 801cd54:	2300      	movs	r3, #0
 801cd56:	6363      	str	r3, [r4, #52]	; 0x34
 801cd58:	6923      	ldr	r3, [r4, #16]
 801cd5a:	6023      	str	r3, [r4, #0]
 801cd5c:	89a3      	ldrh	r3, [r4, #12]
 801cd5e:	2500      	movs	r5, #0
 801cd60:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801cd64:	6065      	str	r5, [r4, #4]
 801cd66:	81a3      	strh	r3, [r4, #12]
 801cd68:	2208      	movs	r2, #8
 801cd6a:	4629      	mov	r1, r5
 801cd6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cd70:	f000 fa82 	bl	801d278 <memset>
 801cd74:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801cd76:	f016 0601 	ands.w	r6, r6, #1
 801cd7a:	d120      	bne.n	801cdbe <_fseeko_r+0x122>
 801cd7c:	89a3      	ldrh	r3, [r4, #12]
 801cd7e:	059b      	lsls	r3, r3, #22
 801cd80:	d4ba      	bmi.n	801ccf8 <_fseeko_r+0x5c>
 801cd82:	e00c      	b.n	801cd9e <_fseeko_r+0x102>
 801cd84:	4621      	mov	r1, r4
 801cd86:	4628      	mov	r0, r5
 801cd88:	f000 f822 	bl	801cdd0 <_ftello_r>
 801cd8c:	1c43      	adds	r3, r0, #1
 801cd8e:	4606      	mov	r6, r0
 801cd90:	d109      	bne.n	801cda6 <_fseeko_r+0x10a>
 801cd92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd94:	07dd      	lsls	r5, r3, #31
 801cd96:	d4ad      	bmi.n	801ccf4 <_fseeko_r+0x58>
 801cd98:	89a3      	ldrh	r3, [r4, #12]
 801cd9a:	0598      	lsls	r0, r3, #22
 801cd9c:	d4aa      	bmi.n	801ccf4 <_fseeko_r+0x58>
 801cd9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cda0:	f000 f9e7 	bl	801d172 <__retarget_lock_release_recursive>
 801cda4:	e7a8      	b.n	801ccf8 <_fseeko_r+0x5c>
 801cda6:	4407      	add	r7, r0
 801cda8:	2600      	movs	r6, #0
 801cdaa:	e7b7      	b.n	801cd1c <_fseeko_r+0x80>
 801cdac:	2316      	movs	r3, #22
 801cdae:	e79d      	b.n	801ccec <_fseeko_r+0x50>
 801cdb0:	89a3      	ldrh	r3, [r4, #12]
 801cdb2:	059a      	lsls	r2, r3, #22
 801cdb4:	d49e      	bmi.n	801ccf4 <_fseeko_r+0x58>
 801cdb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cdb8:	f000 f9db 	bl	801d172 <__retarget_lock_release_recursive>
 801cdbc:	e79a      	b.n	801ccf4 <_fseeko_r+0x58>
 801cdbe:	462e      	mov	r6, r5
 801cdc0:	e79a      	b.n	801ccf8 <_fseeko_r+0x5c>
 801cdc2:	bf00      	nop
 801cdc4:	08024b54 	.word	0x08024b54
 801cdc8:	08024b74 	.word	0x08024b74
 801cdcc:	08024b34 	.word	0x08024b34

0801cdd0 <_ftello_r>:
 801cdd0:	b570      	push	{r4, r5, r6, lr}
 801cdd2:	460c      	mov	r4, r1
 801cdd4:	4605      	mov	r5, r0
 801cdd6:	b118      	cbz	r0, 801cde0 <_ftello_r+0x10>
 801cdd8:	6983      	ldr	r3, [r0, #24]
 801cdda:	b90b      	cbnz	r3, 801cde0 <_ftello_r+0x10>
 801cddc:	f7ff fe14 	bl	801ca08 <__sinit>
 801cde0:	4b32      	ldr	r3, [pc, #200]	; (801ceac <_ftello_r+0xdc>)
 801cde2:	429c      	cmp	r4, r3
 801cde4:	d114      	bne.n	801ce10 <_ftello_r+0x40>
 801cde6:	686c      	ldr	r4, [r5, #4]
 801cde8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cdea:	07da      	lsls	r2, r3, #31
 801cdec:	d405      	bmi.n	801cdfa <_ftello_r+0x2a>
 801cdee:	89a3      	ldrh	r3, [r4, #12]
 801cdf0:	059b      	lsls	r3, r3, #22
 801cdf2:	d402      	bmi.n	801cdfa <_ftello_r+0x2a>
 801cdf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cdf6:	f000 f9ba 	bl	801d16e <__retarget_lock_acquire_recursive>
 801cdfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdfc:	b9ce      	cbnz	r6, 801ce32 <_ftello_r+0x62>
 801cdfe:	231d      	movs	r3, #29
 801ce00:	602b      	str	r3, [r5, #0]
 801ce02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce04:	07de      	lsls	r6, r3, #31
 801ce06:	d50d      	bpl.n	801ce24 <_ftello_r+0x54>
 801ce08:	f04f 35ff 	mov.w	r5, #4294967295
 801ce0c:	4628      	mov	r0, r5
 801ce0e:	bd70      	pop	{r4, r5, r6, pc}
 801ce10:	4b27      	ldr	r3, [pc, #156]	; (801ceb0 <_ftello_r+0xe0>)
 801ce12:	429c      	cmp	r4, r3
 801ce14:	d101      	bne.n	801ce1a <_ftello_r+0x4a>
 801ce16:	68ac      	ldr	r4, [r5, #8]
 801ce18:	e7e6      	b.n	801cde8 <_ftello_r+0x18>
 801ce1a:	4b26      	ldr	r3, [pc, #152]	; (801ceb4 <_ftello_r+0xe4>)
 801ce1c:	429c      	cmp	r4, r3
 801ce1e:	bf08      	it	eq
 801ce20:	68ec      	ldreq	r4, [r5, #12]
 801ce22:	e7e1      	b.n	801cde8 <_ftello_r+0x18>
 801ce24:	89a3      	ldrh	r3, [r4, #12]
 801ce26:	059d      	lsls	r5, r3, #22
 801ce28:	d4ee      	bmi.n	801ce08 <_ftello_r+0x38>
 801ce2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce2c:	f000 f9a1 	bl	801d172 <__retarget_lock_release_recursive>
 801ce30:	e7ea      	b.n	801ce08 <_ftello_r+0x38>
 801ce32:	89a2      	ldrh	r2, [r4, #12]
 801ce34:	f002 030c 	and.w	r3, r2, #12
 801ce38:	2b08      	cmp	r3, #8
 801ce3a:	d119      	bne.n	801ce70 <_ftello_r+0xa0>
 801ce3c:	6823      	ldr	r3, [r4, #0]
 801ce3e:	b1bb      	cbz	r3, 801ce70 <_ftello_r+0xa0>
 801ce40:	6921      	ldr	r1, [r4, #16]
 801ce42:	1a5b      	subs	r3, r3, r1
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	dd13      	ble.n	801ce70 <_ftello_r+0xa0>
 801ce48:	05d0      	lsls	r0, r2, #23
 801ce4a:	d511      	bpl.n	801ce70 <_ftello_r+0xa0>
 801ce4c:	2302      	movs	r3, #2
 801ce4e:	2200      	movs	r2, #0
 801ce50:	6a21      	ldr	r1, [r4, #32]
 801ce52:	4628      	mov	r0, r5
 801ce54:	47b0      	blx	r6
 801ce56:	1c41      	adds	r1, r0, #1
 801ce58:	4605      	mov	r5, r0
 801ce5a:	d10d      	bne.n	801ce78 <_ftello_r+0xa8>
 801ce5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce5e:	07da      	lsls	r2, r3, #31
 801ce60:	d4d2      	bmi.n	801ce08 <_ftello_r+0x38>
 801ce62:	89a3      	ldrh	r3, [r4, #12]
 801ce64:	059b      	lsls	r3, r3, #22
 801ce66:	d4cf      	bmi.n	801ce08 <_ftello_r+0x38>
 801ce68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce6a:	f000 f982 	bl	801d172 <__retarget_lock_release_recursive>
 801ce6e:	e7cd      	b.n	801ce0c <_ftello_r+0x3c>
 801ce70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ce74:	d00f      	beq.n	801ce96 <_ftello_r+0xc6>
 801ce76:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801ce78:	89a2      	ldrh	r2, [r4, #12]
 801ce7a:	0756      	lsls	r6, r2, #29
 801ce7c:	d50d      	bpl.n	801ce9a <_ftello_r+0xca>
 801ce7e:	6863      	ldr	r3, [r4, #4]
 801ce80:	1aed      	subs	r5, r5, r3
 801ce82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce84:	b10b      	cbz	r3, 801ce8a <_ftello_r+0xba>
 801ce86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce88:	1aed      	subs	r5, r5, r3
 801ce8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce8c:	07d9      	lsls	r1, r3, #31
 801ce8e:	d4bd      	bmi.n	801ce0c <_ftello_r+0x3c>
 801ce90:	0593      	lsls	r3, r2, #22
 801ce92:	d4bb      	bmi.n	801ce0c <_ftello_r+0x3c>
 801ce94:	e7e8      	b.n	801ce68 <_ftello_r+0x98>
 801ce96:	2301      	movs	r3, #1
 801ce98:	e7da      	b.n	801ce50 <_ftello_r+0x80>
 801ce9a:	0710      	lsls	r0, r2, #28
 801ce9c:	d5f5      	bpl.n	801ce8a <_ftello_r+0xba>
 801ce9e:	6823      	ldr	r3, [r4, #0]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d0f2      	beq.n	801ce8a <_ftello_r+0xba>
 801cea4:	6921      	ldr	r1, [r4, #16]
 801cea6:	1a5b      	subs	r3, r3, r1
 801cea8:	441d      	add	r5, r3
 801ceaa:	e7ee      	b.n	801ce8a <_ftello_r+0xba>
 801ceac:	08024b54 	.word	0x08024b54
 801ceb0:	08024b74 	.word	0x08024b74
 801ceb4:	08024b34 	.word	0x08024b34

0801ceb8 <_fwalk_reent>:
 801ceb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cebc:	4606      	mov	r6, r0
 801cebe:	4688      	mov	r8, r1
 801cec0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cec4:	2700      	movs	r7, #0
 801cec6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ceca:	f1b9 0901 	subs.w	r9, r9, #1
 801cece:	d505      	bpl.n	801cedc <_fwalk_reent+0x24>
 801ced0:	6824      	ldr	r4, [r4, #0]
 801ced2:	2c00      	cmp	r4, #0
 801ced4:	d1f7      	bne.n	801cec6 <_fwalk_reent+0xe>
 801ced6:	4638      	mov	r0, r7
 801ced8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cedc:	89ab      	ldrh	r3, [r5, #12]
 801cede:	2b01      	cmp	r3, #1
 801cee0:	d907      	bls.n	801cef2 <_fwalk_reent+0x3a>
 801cee2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cee6:	3301      	adds	r3, #1
 801cee8:	d003      	beq.n	801cef2 <_fwalk_reent+0x3a>
 801ceea:	4629      	mov	r1, r5
 801ceec:	4630      	mov	r0, r6
 801ceee:	47c0      	blx	r8
 801cef0:	4307      	orrs	r7, r0
 801cef2:	3568      	adds	r5, #104	; 0x68
 801cef4:	e7e9      	b.n	801ceca <_fwalk_reent+0x12>
	...

0801cef8 <__libc_init_array>:
 801cef8:	b570      	push	{r4, r5, r6, lr}
 801cefa:	4d0d      	ldr	r5, [pc, #52]	; (801cf30 <__libc_init_array+0x38>)
 801cefc:	4c0d      	ldr	r4, [pc, #52]	; (801cf34 <__libc_init_array+0x3c>)
 801cefe:	1b64      	subs	r4, r4, r5
 801cf00:	10a4      	asrs	r4, r4, #2
 801cf02:	2600      	movs	r6, #0
 801cf04:	42a6      	cmp	r6, r4
 801cf06:	d109      	bne.n	801cf1c <__libc_init_array+0x24>
 801cf08:	4d0b      	ldr	r5, [pc, #44]	; (801cf38 <__libc_init_array+0x40>)
 801cf0a:	4c0c      	ldr	r4, [pc, #48]	; (801cf3c <__libc_init_array+0x44>)
 801cf0c:	f003 f8e0 	bl	80200d0 <_init>
 801cf10:	1b64      	subs	r4, r4, r5
 801cf12:	10a4      	asrs	r4, r4, #2
 801cf14:	2600      	movs	r6, #0
 801cf16:	42a6      	cmp	r6, r4
 801cf18:	d105      	bne.n	801cf26 <__libc_init_array+0x2e>
 801cf1a:	bd70      	pop	{r4, r5, r6, pc}
 801cf1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf20:	4798      	blx	r3
 801cf22:	3601      	adds	r6, #1
 801cf24:	e7ee      	b.n	801cf04 <__libc_init_array+0xc>
 801cf26:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf2a:	4798      	blx	r3
 801cf2c:	3601      	adds	r6, #1
 801cf2e:	e7f2      	b.n	801cf16 <__libc_init_array+0x1e>
 801cf30:	0802512c 	.word	0x0802512c
 801cf34:	0802512c 	.word	0x0802512c
 801cf38:	0802512c 	.word	0x0802512c
 801cf3c:	0802513c 	.word	0x0802513c

0801cf40 <localtime>:
 801cf40:	b538      	push	{r3, r4, r5, lr}
 801cf42:	4b0b      	ldr	r3, [pc, #44]	; (801cf70 <localtime+0x30>)
 801cf44:	681d      	ldr	r5, [r3, #0]
 801cf46:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801cf48:	4604      	mov	r4, r0
 801cf4a:	b953      	cbnz	r3, 801cf62 <localtime+0x22>
 801cf4c:	2024      	movs	r0, #36	; 0x24
 801cf4e:	f000 f975 	bl	801d23c <malloc>
 801cf52:	4602      	mov	r2, r0
 801cf54:	63e8      	str	r0, [r5, #60]	; 0x3c
 801cf56:	b920      	cbnz	r0, 801cf62 <localtime+0x22>
 801cf58:	4b06      	ldr	r3, [pc, #24]	; (801cf74 <localtime+0x34>)
 801cf5a:	4807      	ldr	r0, [pc, #28]	; (801cf78 <localtime+0x38>)
 801cf5c:	2132      	movs	r1, #50	; 0x32
 801cf5e:	f001 fd43 	bl	801e9e8 <__assert_func>
 801cf62:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801cf64:	4620      	mov	r0, r4
 801cf66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf6a:	f000 b807 	b.w	801cf7c <localtime_r>
 801cf6e:	bf00      	nop
 801cf70:	20000104 	.word	0x20000104
 801cf74:	08024b98 	.word	0x08024b98
 801cf78:	08024baf 	.word	0x08024baf

0801cf7c <localtime_r>:
 801cf7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801cf80:	4607      	mov	r7, r0
 801cf82:	9101      	str	r1, [sp, #4]
 801cf84:	f001 fe0c 	bl	801eba0 <__gettzinfo>
 801cf88:	9901      	ldr	r1, [sp, #4]
 801cf8a:	4680      	mov	r8, r0
 801cf8c:	4638      	mov	r0, r7
 801cf8e:	f001 fe0b 	bl	801eba8 <gmtime_r>
 801cf92:	6943      	ldr	r3, [r0, #20]
 801cf94:	079a      	lsls	r2, r3, #30
 801cf96:	4604      	mov	r4, r0
 801cf98:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801cf9c:	d105      	bne.n	801cfaa <localtime_r+0x2e>
 801cf9e:	2264      	movs	r2, #100	; 0x64
 801cfa0:	fb96 f3f2 	sdiv	r3, r6, r2
 801cfa4:	fb02 6313 	mls	r3, r2, r3, r6
 801cfa8:	bb7b      	cbnz	r3, 801d00a <localtime_r+0x8e>
 801cfaa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801cfae:	fb96 f5f3 	sdiv	r5, r6, r3
 801cfb2:	fb03 6515 	mls	r5, r3, r5, r6
 801cfb6:	fab5 f585 	clz	r5, r5
 801cfba:	096d      	lsrs	r5, r5, #5
 801cfbc:	4b68      	ldr	r3, [pc, #416]	; (801d160 <localtime_r+0x1e4>)
 801cfbe:	2230      	movs	r2, #48	; 0x30
 801cfc0:	fb02 3505 	mla	r5, r2, r5, r3
 801cfc4:	f001 fa10 	bl	801e3e8 <__tz_lock>
 801cfc8:	f001 fa1a 	bl	801e400 <_tzset_unlocked>
 801cfcc:	4b65      	ldr	r3, [pc, #404]	; (801d164 <localtime_r+0x1e8>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	b353      	cbz	r3, 801d028 <localtime_r+0xac>
 801cfd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cfd6:	42b3      	cmp	r3, r6
 801cfd8:	d119      	bne.n	801d00e <localtime_r+0x92>
 801cfda:	f8d8 1000 	ldr.w	r1, [r8]
 801cfde:	e9d7 6700 	ldrd	r6, r7, [r7]
 801cfe2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801cfe6:	b9d1      	cbnz	r1, 801d01e <localtime_r+0xa2>
 801cfe8:	4296      	cmp	r6, r2
 801cfea:	eb77 0303 	sbcs.w	r3, r7, r3
 801cfee:	da23      	bge.n	801d038 <localtime_r+0xbc>
 801cff0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801cff4:	4296      	cmp	r6, r2
 801cff6:	eb77 0303 	sbcs.w	r3, r7, r3
 801cffa:	bfb4      	ite	lt
 801cffc:	2301      	movlt	r3, #1
 801cffe:	2300      	movge	r3, #0
 801d000:	6223      	str	r3, [r4, #32]
 801d002:	db1b      	blt.n	801d03c <localtime_r+0xc0>
 801d004:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801d008:	e01a      	b.n	801d040 <localtime_r+0xc4>
 801d00a:	2501      	movs	r5, #1
 801d00c:	e7d6      	b.n	801cfbc <localtime_r+0x40>
 801d00e:	4630      	mov	r0, r6
 801d010:	f001 f942 	bl	801e298 <__tzcalc_limits>
 801d014:	2800      	cmp	r0, #0
 801d016:	d1e0      	bne.n	801cfda <localtime_r+0x5e>
 801d018:	f04f 33ff 	mov.w	r3, #4294967295
 801d01c:	e004      	b.n	801d028 <localtime_r+0xac>
 801d01e:	4296      	cmp	r6, r2
 801d020:	eb77 0303 	sbcs.w	r3, r7, r3
 801d024:	da02      	bge.n	801d02c <localtime_r+0xb0>
 801d026:	2300      	movs	r3, #0
 801d028:	6223      	str	r3, [r4, #32]
 801d02a:	e7eb      	b.n	801d004 <localtime_r+0x88>
 801d02c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d030:	4296      	cmp	r6, r2
 801d032:	eb77 0303 	sbcs.w	r3, r7, r3
 801d036:	daf6      	bge.n	801d026 <localtime_r+0xaa>
 801d038:	2301      	movs	r3, #1
 801d03a:	6223      	str	r3, [r4, #32]
 801d03c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801d040:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d044:	203c      	movs	r0, #60	; 0x3c
 801d046:	fb91 f6f3 	sdiv	r6, r1, r3
 801d04a:	fb03 1316 	mls	r3, r3, r6, r1
 801d04e:	6861      	ldr	r1, [r4, #4]
 801d050:	fb93 f2f0 	sdiv	r2, r3, r0
 801d054:	fb00 3012 	mls	r0, r0, r2, r3
 801d058:	6823      	ldr	r3, [r4, #0]
 801d05a:	1a89      	subs	r1, r1, r2
 801d05c:	68a2      	ldr	r2, [r4, #8]
 801d05e:	6061      	str	r1, [r4, #4]
 801d060:	1a1b      	subs	r3, r3, r0
 801d062:	1b92      	subs	r2, r2, r6
 801d064:	2b3b      	cmp	r3, #59	; 0x3b
 801d066:	6023      	str	r3, [r4, #0]
 801d068:	60a2      	str	r2, [r4, #8]
 801d06a:	dd35      	ble.n	801d0d8 <localtime_r+0x15c>
 801d06c:	3101      	adds	r1, #1
 801d06e:	6061      	str	r1, [r4, #4]
 801d070:	3b3c      	subs	r3, #60	; 0x3c
 801d072:	6023      	str	r3, [r4, #0]
 801d074:	6863      	ldr	r3, [r4, #4]
 801d076:	2b3b      	cmp	r3, #59	; 0x3b
 801d078:	dd34      	ble.n	801d0e4 <localtime_r+0x168>
 801d07a:	3201      	adds	r2, #1
 801d07c:	60a2      	str	r2, [r4, #8]
 801d07e:	3b3c      	subs	r3, #60	; 0x3c
 801d080:	6063      	str	r3, [r4, #4]
 801d082:	68a3      	ldr	r3, [r4, #8]
 801d084:	2b17      	cmp	r3, #23
 801d086:	dd33      	ble.n	801d0f0 <localtime_r+0x174>
 801d088:	69e2      	ldr	r2, [r4, #28]
 801d08a:	3201      	adds	r2, #1
 801d08c:	61e2      	str	r2, [r4, #28]
 801d08e:	69a2      	ldr	r2, [r4, #24]
 801d090:	3201      	adds	r2, #1
 801d092:	2a06      	cmp	r2, #6
 801d094:	bfc8      	it	gt
 801d096:	2200      	movgt	r2, #0
 801d098:	61a2      	str	r2, [r4, #24]
 801d09a:	68e2      	ldr	r2, [r4, #12]
 801d09c:	3b18      	subs	r3, #24
 801d09e:	3201      	adds	r2, #1
 801d0a0:	60a3      	str	r3, [r4, #8]
 801d0a2:	6923      	ldr	r3, [r4, #16]
 801d0a4:	60e2      	str	r2, [r4, #12]
 801d0a6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801d0aa:	428a      	cmp	r2, r1
 801d0ac:	dd0e      	ble.n	801d0cc <localtime_r+0x150>
 801d0ae:	2b0b      	cmp	r3, #11
 801d0b0:	eba2 0201 	sub.w	r2, r2, r1
 801d0b4:	60e2      	str	r2, [r4, #12]
 801d0b6:	f103 0201 	add.w	r2, r3, #1
 801d0ba:	bf09      	itett	eq
 801d0bc:	6963      	ldreq	r3, [r4, #20]
 801d0be:	6122      	strne	r2, [r4, #16]
 801d0c0:	2200      	moveq	r2, #0
 801d0c2:	3301      	addeq	r3, #1
 801d0c4:	bf02      	ittt	eq
 801d0c6:	6122      	streq	r2, [r4, #16]
 801d0c8:	6163      	streq	r3, [r4, #20]
 801d0ca:	61e2      	streq	r2, [r4, #28]
 801d0cc:	f001 f992 	bl	801e3f4 <__tz_unlock>
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	b002      	add	sp, #8
 801d0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	dacb      	bge.n	801d074 <localtime_r+0xf8>
 801d0dc:	3901      	subs	r1, #1
 801d0de:	6061      	str	r1, [r4, #4]
 801d0e0:	333c      	adds	r3, #60	; 0x3c
 801d0e2:	e7c6      	b.n	801d072 <localtime_r+0xf6>
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	dacc      	bge.n	801d082 <localtime_r+0x106>
 801d0e8:	3a01      	subs	r2, #1
 801d0ea:	60a2      	str	r2, [r4, #8]
 801d0ec:	333c      	adds	r3, #60	; 0x3c
 801d0ee:	e7c7      	b.n	801d080 <localtime_r+0x104>
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	daeb      	bge.n	801d0cc <localtime_r+0x150>
 801d0f4:	69e2      	ldr	r2, [r4, #28]
 801d0f6:	3a01      	subs	r2, #1
 801d0f8:	61e2      	str	r2, [r4, #28]
 801d0fa:	69a2      	ldr	r2, [r4, #24]
 801d0fc:	3a01      	subs	r2, #1
 801d0fe:	bf48      	it	mi
 801d100:	2206      	movmi	r2, #6
 801d102:	61a2      	str	r2, [r4, #24]
 801d104:	68e2      	ldr	r2, [r4, #12]
 801d106:	3318      	adds	r3, #24
 801d108:	3a01      	subs	r2, #1
 801d10a:	60e2      	str	r2, [r4, #12]
 801d10c:	60a3      	str	r3, [r4, #8]
 801d10e:	2a00      	cmp	r2, #0
 801d110:	d1dc      	bne.n	801d0cc <localtime_r+0x150>
 801d112:	6923      	ldr	r3, [r4, #16]
 801d114:	3b01      	subs	r3, #1
 801d116:	d405      	bmi.n	801d124 <localtime_r+0x1a8>
 801d118:	6123      	str	r3, [r4, #16]
 801d11a:	6923      	ldr	r3, [r4, #16]
 801d11c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d120:	60e3      	str	r3, [r4, #12]
 801d122:	e7d3      	b.n	801d0cc <localtime_r+0x150>
 801d124:	230b      	movs	r3, #11
 801d126:	6123      	str	r3, [r4, #16]
 801d128:	6963      	ldr	r3, [r4, #20]
 801d12a:	1e5a      	subs	r2, r3, #1
 801d12c:	6162      	str	r2, [r4, #20]
 801d12e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801d132:	0793      	lsls	r3, r2, #30
 801d134:	d105      	bne.n	801d142 <localtime_r+0x1c6>
 801d136:	2164      	movs	r1, #100	; 0x64
 801d138:	fb92 f3f1 	sdiv	r3, r2, r1
 801d13c:	fb01 2313 	mls	r3, r1, r3, r2
 801d140:	b963      	cbnz	r3, 801d15c <localtime_r+0x1e0>
 801d142:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d146:	fb92 f3f1 	sdiv	r3, r2, r1
 801d14a:	fb01 2313 	mls	r3, r1, r3, r2
 801d14e:	fab3 f383 	clz	r3, r3
 801d152:	095b      	lsrs	r3, r3, #5
 801d154:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801d158:	61e3      	str	r3, [r4, #28]
 801d15a:	e7de      	b.n	801d11a <localtime_r+0x19e>
 801d15c:	2301      	movs	r3, #1
 801d15e:	e7f9      	b.n	801d154 <localtime_r+0x1d8>
 801d160:	08024c10 	.word	0x08024c10
 801d164:	20000c98 	.word	0x20000c98

0801d168 <__retarget_lock_init_recursive>:
 801d168:	4770      	bx	lr

0801d16a <__retarget_lock_close_recursive>:
 801d16a:	4770      	bx	lr

0801d16c <__retarget_lock_acquire>:
 801d16c:	4770      	bx	lr

0801d16e <__retarget_lock_acquire_recursive>:
 801d16e:	4770      	bx	lr

0801d170 <__retarget_lock_release>:
 801d170:	4770      	bx	lr

0801d172 <__retarget_lock_release_recursive>:
 801d172:	4770      	bx	lr

0801d174 <__swhatbuf_r>:
 801d174:	b570      	push	{r4, r5, r6, lr}
 801d176:	460e      	mov	r6, r1
 801d178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d17c:	2900      	cmp	r1, #0
 801d17e:	b096      	sub	sp, #88	; 0x58
 801d180:	4614      	mov	r4, r2
 801d182:	461d      	mov	r5, r3
 801d184:	da07      	bge.n	801d196 <__swhatbuf_r+0x22>
 801d186:	2300      	movs	r3, #0
 801d188:	602b      	str	r3, [r5, #0]
 801d18a:	89b3      	ldrh	r3, [r6, #12]
 801d18c:	061a      	lsls	r2, r3, #24
 801d18e:	d410      	bmi.n	801d1b2 <__swhatbuf_r+0x3e>
 801d190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d194:	e00e      	b.n	801d1b4 <__swhatbuf_r+0x40>
 801d196:	466a      	mov	r2, sp
 801d198:	f001 fc9c 	bl	801ead4 <_fstat_r>
 801d19c:	2800      	cmp	r0, #0
 801d19e:	dbf2      	blt.n	801d186 <__swhatbuf_r+0x12>
 801d1a0:	9a01      	ldr	r2, [sp, #4]
 801d1a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d1a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d1aa:	425a      	negs	r2, r3
 801d1ac:	415a      	adcs	r2, r3
 801d1ae:	602a      	str	r2, [r5, #0]
 801d1b0:	e7ee      	b.n	801d190 <__swhatbuf_r+0x1c>
 801d1b2:	2340      	movs	r3, #64	; 0x40
 801d1b4:	2000      	movs	r0, #0
 801d1b6:	6023      	str	r3, [r4, #0]
 801d1b8:	b016      	add	sp, #88	; 0x58
 801d1ba:	bd70      	pop	{r4, r5, r6, pc}

0801d1bc <__smakebuf_r>:
 801d1bc:	898b      	ldrh	r3, [r1, #12]
 801d1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d1c0:	079d      	lsls	r5, r3, #30
 801d1c2:	4606      	mov	r6, r0
 801d1c4:	460c      	mov	r4, r1
 801d1c6:	d507      	bpl.n	801d1d8 <__smakebuf_r+0x1c>
 801d1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d1cc:	6023      	str	r3, [r4, #0]
 801d1ce:	6123      	str	r3, [r4, #16]
 801d1d0:	2301      	movs	r3, #1
 801d1d2:	6163      	str	r3, [r4, #20]
 801d1d4:	b002      	add	sp, #8
 801d1d6:	bd70      	pop	{r4, r5, r6, pc}
 801d1d8:	ab01      	add	r3, sp, #4
 801d1da:	466a      	mov	r2, sp
 801d1dc:	f7ff ffca 	bl	801d174 <__swhatbuf_r>
 801d1e0:	9900      	ldr	r1, [sp, #0]
 801d1e2:	4605      	mov	r5, r0
 801d1e4:	4630      	mov	r0, r6
 801d1e6:	f000 f8af 	bl	801d348 <_malloc_r>
 801d1ea:	b948      	cbnz	r0, 801d200 <__smakebuf_r+0x44>
 801d1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1f0:	059a      	lsls	r2, r3, #22
 801d1f2:	d4ef      	bmi.n	801d1d4 <__smakebuf_r+0x18>
 801d1f4:	f023 0303 	bic.w	r3, r3, #3
 801d1f8:	f043 0302 	orr.w	r3, r3, #2
 801d1fc:	81a3      	strh	r3, [r4, #12]
 801d1fe:	e7e3      	b.n	801d1c8 <__smakebuf_r+0xc>
 801d200:	4b0d      	ldr	r3, [pc, #52]	; (801d238 <__smakebuf_r+0x7c>)
 801d202:	62b3      	str	r3, [r6, #40]	; 0x28
 801d204:	89a3      	ldrh	r3, [r4, #12]
 801d206:	6020      	str	r0, [r4, #0]
 801d208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d20c:	81a3      	strh	r3, [r4, #12]
 801d20e:	9b00      	ldr	r3, [sp, #0]
 801d210:	6163      	str	r3, [r4, #20]
 801d212:	9b01      	ldr	r3, [sp, #4]
 801d214:	6120      	str	r0, [r4, #16]
 801d216:	b15b      	cbz	r3, 801d230 <__smakebuf_r+0x74>
 801d218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d21c:	4630      	mov	r0, r6
 801d21e:	f001 fd73 	bl	801ed08 <_isatty_r>
 801d222:	b128      	cbz	r0, 801d230 <__smakebuf_r+0x74>
 801d224:	89a3      	ldrh	r3, [r4, #12]
 801d226:	f023 0303 	bic.w	r3, r3, #3
 801d22a:	f043 0301 	orr.w	r3, r3, #1
 801d22e:	81a3      	strh	r3, [r4, #12]
 801d230:	89a0      	ldrh	r0, [r4, #12]
 801d232:	4305      	orrs	r5, r0
 801d234:	81a5      	strh	r5, [r4, #12]
 801d236:	e7cd      	b.n	801d1d4 <__smakebuf_r+0x18>
 801d238:	0801c9a1 	.word	0x0801c9a1

0801d23c <malloc>:
 801d23c:	4b02      	ldr	r3, [pc, #8]	; (801d248 <malloc+0xc>)
 801d23e:	4601      	mov	r1, r0
 801d240:	6818      	ldr	r0, [r3, #0]
 801d242:	f000 b881 	b.w	801d348 <_malloc_r>
 801d246:	bf00      	nop
 801d248:	20000104 	.word	0x20000104

0801d24c <free>:
 801d24c:	4b02      	ldr	r3, [pc, #8]	; (801d258 <free+0xc>)
 801d24e:	4601      	mov	r1, r0
 801d250:	6818      	ldr	r0, [r3, #0]
 801d252:	f000 b829 	b.w	801d2a8 <_free_r>
 801d256:	bf00      	nop
 801d258:	20000104 	.word	0x20000104

0801d25c <memcpy>:
 801d25c:	440a      	add	r2, r1
 801d25e:	4291      	cmp	r1, r2
 801d260:	f100 33ff 	add.w	r3, r0, #4294967295
 801d264:	d100      	bne.n	801d268 <memcpy+0xc>
 801d266:	4770      	bx	lr
 801d268:	b510      	push	{r4, lr}
 801d26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d272:	4291      	cmp	r1, r2
 801d274:	d1f9      	bne.n	801d26a <memcpy+0xe>
 801d276:	bd10      	pop	{r4, pc}

0801d278 <memset>:
 801d278:	4402      	add	r2, r0
 801d27a:	4603      	mov	r3, r0
 801d27c:	4293      	cmp	r3, r2
 801d27e:	d100      	bne.n	801d282 <memset+0xa>
 801d280:	4770      	bx	lr
 801d282:	f803 1b01 	strb.w	r1, [r3], #1
 801d286:	e7f9      	b.n	801d27c <memset+0x4>

0801d288 <_calloc_r>:
 801d288:	b513      	push	{r0, r1, r4, lr}
 801d28a:	434a      	muls	r2, r1
 801d28c:	4611      	mov	r1, r2
 801d28e:	9201      	str	r2, [sp, #4]
 801d290:	f000 f85a 	bl	801d348 <_malloc_r>
 801d294:	4604      	mov	r4, r0
 801d296:	b118      	cbz	r0, 801d2a0 <_calloc_r+0x18>
 801d298:	9a01      	ldr	r2, [sp, #4]
 801d29a:	2100      	movs	r1, #0
 801d29c:	f7ff ffec 	bl	801d278 <memset>
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	b002      	add	sp, #8
 801d2a4:	bd10      	pop	{r4, pc}
	...

0801d2a8 <_free_r>:
 801d2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d2aa:	2900      	cmp	r1, #0
 801d2ac:	d048      	beq.n	801d340 <_free_r+0x98>
 801d2ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d2b2:	9001      	str	r0, [sp, #4]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	f1a1 0404 	sub.w	r4, r1, #4
 801d2ba:	bfb8      	it	lt
 801d2bc:	18e4      	addlt	r4, r4, r3
 801d2be:	f001 fd5b 	bl	801ed78 <__malloc_lock>
 801d2c2:	4a20      	ldr	r2, [pc, #128]	; (801d344 <_free_r+0x9c>)
 801d2c4:	9801      	ldr	r0, [sp, #4]
 801d2c6:	6813      	ldr	r3, [r2, #0]
 801d2c8:	4615      	mov	r5, r2
 801d2ca:	b933      	cbnz	r3, 801d2da <_free_r+0x32>
 801d2cc:	6063      	str	r3, [r4, #4]
 801d2ce:	6014      	str	r4, [r2, #0]
 801d2d0:	b003      	add	sp, #12
 801d2d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d2d6:	f001 bd55 	b.w	801ed84 <__malloc_unlock>
 801d2da:	42a3      	cmp	r3, r4
 801d2dc:	d90b      	bls.n	801d2f6 <_free_r+0x4e>
 801d2de:	6821      	ldr	r1, [r4, #0]
 801d2e0:	1862      	adds	r2, r4, r1
 801d2e2:	4293      	cmp	r3, r2
 801d2e4:	bf04      	itt	eq
 801d2e6:	681a      	ldreq	r2, [r3, #0]
 801d2e8:	685b      	ldreq	r3, [r3, #4]
 801d2ea:	6063      	str	r3, [r4, #4]
 801d2ec:	bf04      	itt	eq
 801d2ee:	1852      	addeq	r2, r2, r1
 801d2f0:	6022      	streq	r2, [r4, #0]
 801d2f2:	602c      	str	r4, [r5, #0]
 801d2f4:	e7ec      	b.n	801d2d0 <_free_r+0x28>
 801d2f6:	461a      	mov	r2, r3
 801d2f8:	685b      	ldr	r3, [r3, #4]
 801d2fa:	b10b      	cbz	r3, 801d300 <_free_r+0x58>
 801d2fc:	42a3      	cmp	r3, r4
 801d2fe:	d9fa      	bls.n	801d2f6 <_free_r+0x4e>
 801d300:	6811      	ldr	r1, [r2, #0]
 801d302:	1855      	adds	r5, r2, r1
 801d304:	42a5      	cmp	r5, r4
 801d306:	d10b      	bne.n	801d320 <_free_r+0x78>
 801d308:	6824      	ldr	r4, [r4, #0]
 801d30a:	4421      	add	r1, r4
 801d30c:	1854      	adds	r4, r2, r1
 801d30e:	42a3      	cmp	r3, r4
 801d310:	6011      	str	r1, [r2, #0]
 801d312:	d1dd      	bne.n	801d2d0 <_free_r+0x28>
 801d314:	681c      	ldr	r4, [r3, #0]
 801d316:	685b      	ldr	r3, [r3, #4]
 801d318:	6053      	str	r3, [r2, #4]
 801d31a:	4421      	add	r1, r4
 801d31c:	6011      	str	r1, [r2, #0]
 801d31e:	e7d7      	b.n	801d2d0 <_free_r+0x28>
 801d320:	d902      	bls.n	801d328 <_free_r+0x80>
 801d322:	230c      	movs	r3, #12
 801d324:	6003      	str	r3, [r0, #0]
 801d326:	e7d3      	b.n	801d2d0 <_free_r+0x28>
 801d328:	6825      	ldr	r5, [r4, #0]
 801d32a:	1961      	adds	r1, r4, r5
 801d32c:	428b      	cmp	r3, r1
 801d32e:	bf04      	itt	eq
 801d330:	6819      	ldreq	r1, [r3, #0]
 801d332:	685b      	ldreq	r3, [r3, #4]
 801d334:	6063      	str	r3, [r4, #4]
 801d336:	bf04      	itt	eq
 801d338:	1949      	addeq	r1, r1, r5
 801d33a:	6021      	streq	r1, [r4, #0]
 801d33c:	6054      	str	r4, [r2, #4]
 801d33e:	e7c7      	b.n	801d2d0 <_free_r+0x28>
 801d340:	b003      	add	sp, #12
 801d342:	bd30      	pop	{r4, r5, pc}
 801d344:	20000c74 	.word	0x20000c74

0801d348 <_malloc_r>:
 801d348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d34a:	1ccd      	adds	r5, r1, #3
 801d34c:	f025 0503 	bic.w	r5, r5, #3
 801d350:	3508      	adds	r5, #8
 801d352:	2d0c      	cmp	r5, #12
 801d354:	bf38      	it	cc
 801d356:	250c      	movcc	r5, #12
 801d358:	2d00      	cmp	r5, #0
 801d35a:	4606      	mov	r6, r0
 801d35c:	db01      	blt.n	801d362 <_malloc_r+0x1a>
 801d35e:	42a9      	cmp	r1, r5
 801d360:	d903      	bls.n	801d36a <_malloc_r+0x22>
 801d362:	230c      	movs	r3, #12
 801d364:	6033      	str	r3, [r6, #0]
 801d366:	2000      	movs	r0, #0
 801d368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d36a:	f001 fd05 	bl	801ed78 <__malloc_lock>
 801d36e:	4921      	ldr	r1, [pc, #132]	; (801d3f4 <_malloc_r+0xac>)
 801d370:	680a      	ldr	r2, [r1, #0]
 801d372:	4614      	mov	r4, r2
 801d374:	b99c      	cbnz	r4, 801d39e <_malloc_r+0x56>
 801d376:	4f20      	ldr	r7, [pc, #128]	; (801d3f8 <_malloc_r+0xb0>)
 801d378:	683b      	ldr	r3, [r7, #0]
 801d37a:	b923      	cbnz	r3, 801d386 <_malloc_r+0x3e>
 801d37c:	4621      	mov	r1, r4
 801d37e:	4630      	mov	r0, r6
 801d380:	f000 f8da 	bl	801d538 <_sbrk_r>
 801d384:	6038      	str	r0, [r7, #0]
 801d386:	4629      	mov	r1, r5
 801d388:	4630      	mov	r0, r6
 801d38a:	f000 f8d5 	bl	801d538 <_sbrk_r>
 801d38e:	1c43      	adds	r3, r0, #1
 801d390:	d123      	bne.n	801d3da <_malloc_r+0x92>
 801d392:	230c      	movs	r3, #12
 801d394:	6033      	str	r3, [r6, #0]
 801d396:	4630      	mov	r0, r6
 801d398:	f001 fcf4 	bl	801ed84 <__malloc_unlock>
 801d39c:	e7e3      	b.n	801d366 <_malloc_r+0x1e>
 801d39e:	6823      	ldr	r3, [r4, #0]
 801d3a0:	1b5b      	subs	r3, r3, r5
 801d3a2:	d417      	bmi.n	801d3d4 <_malloc_r+0x8c>
 801d3a4:	2b0b      	cmp	r3, #11
 801d3a6:	d903      	bls.n	801d3b0 <_malloc_r+0x68>
 801d3a8:	6023      	str	r3, [r4, #0]
 801d3aa:	441c      	add	r4, r3
 801d3ac:	6025      	str	r5, [r4, #0]
 801d3ae:	e004      	b.n	801d3ba <_malloc_r+0x72>
 801d3b0:	6863      	ldr	r3, [r4, #4]
 801d3b2:	42a2      	cmp	r2, r4
 801d3b4:	bf0c      	ite	eq
 801d3b6:	600b      	streq	r3, [r1, #0]
 801d3b8:	6053      	strne	r3, [r2, #4]
 801d3ba:	4630      	mov	r0, r6
 801d3bc:	f001 fce2 	bl	801ed84 <__malloc_unlock>
 801d3c0:	f104 000b 	add.w	r0, r4, #11
 801d3c4:	1d23      	adds	r3, r4, #4
 801d3c6:	f020 0007 	bic.w	r0, r0, #7
 801d3ca:	1ac2      	subs	r2, r0, r3
 801d3cc:	d0cc      	beq.n	801d368 <_malloc_r+0x20>
 801d3ce:	1a1b      	subs	r3, r3, r0
 801d3d0:	50a3      	str	r3, [r4, r2]
 801d3d2:	e7c9      	b.n	801d368 <_malloc_r+0x20>
 801d3d4:	4622      	mov	r2, r4
 801d3d6:	6864      	ldr	r4, [r4, #4]
 801d3d8:	e7cc      	b.n	801d374 <_malloc_r+0x2c>
 801d3da:	1cc4      	adds	r4, r0, #3
 801d3dc:	f024 0403 	bic.w	r4, r4, #3
 801d3e0:	42a0      	cmp	r0, r4
 801d3e2:	d0e3      	beq.n	801d3ac <_malloc_r+0x64>
 801d3e4:	1a21      	subs	r1, r4, r0
 801d3e6:	4630      	mov	r0, r6
 801d3e8:	f000 f8a6 	bl	801d538 <_sbrk_r>
 801d3ec:	3001      	adds	r0, #1
 801d3ee:	d1dd      	bne.n	801d3ac <_malloc_r+0x64>
 801d3f0:	e7cf      	b.n	801d392 <_malloc_r+0x4a>
 801d3f2:	bf00      	nop
 801d3f4:	20000c74 	.word	0x20000c74
 801d3f8:	20000c78 	.word	0x20000c78

0801d3fc <_open_r>:
 801d3fc:	b538      	push	{r3, r4, r5, lr}
 801d3fe:	4d07      	ldr	r5, [pc, #28]	; (801d41c <_open_r+0x20>)
 801d400:	4604      	mov	r4, r0
 801d402:	4608      	mov	r0, r1
 801d404:	4611      	mov	r1, r2
 801d406:	2200      	movs	r2, #0
 801d408:	602a      	str	r2, [r5, #0]
 801d40a:	461a      	mov	r2, r3
 801d40c:	f7e3 fd30 	bl	8000e70 <_open>
 801d410:	1c43      	adds	r3, r0, #1
 801d412:	d102      	bne.n	801d41a <_open_r+0x1e>
 801d414:	682b      	ldr	r3, [r5, #0]
 801d416:	b103      	cbz	r3, 801d41a <_open_r+0x1e>
 801d418:	6023      	str	r3, [r4, #0]
 801d41a:	bd38      	pop	{r3, r4, r5, pc}
 801d41c:	20000d40 	.word	0x20000d40

0801d420 <putchar>:
 801d420:	4b09      	ldr	r3, [pc, #36]	; (801d448 <putchar+0x28>)
 801d422:	b513      	push	{r0, r1, r4, lr}
 801d424:	681c      	ldr	r4, [r3, #0]
 801d426:	4601      	mov	r1, r0
 801d428:	b134      	cbz	r4, 801d438 <putchar+0x18>
 801d42a:	69a3      	ldr	r3, [r4, #24]
 801d42c:	b923      	cbnz	r3, 801d438 <putchar+0x18>
 801d42e:	9001      	str	r0, [sp, #4]
 801d430:	4620      	mov	r0, r4
 801d432:	f7ff fae9 	bl	801ca08 <__sinit>
 801d436:	9901      	ldr	r1, [sp, #4]
 801d438:	68a2      	ldr	r2, [r4, #8]
 801d43a:	4620      	mov	r0, r4
 801d43c:	b002      	add	sp, #8
 801d43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d442:	f002 b915 	b.w	801f670 <_putc_r>
 801d446:	bf00      	nop
 801d448:	20000104 	.word	0x20000104

0801d44c <srand>:
 801d44c:	b538      	push	{r3, r4, r5, lr}
 801d44e:	4b10      	ldr	r3, [pc, #64]	; (801d490 <srand+0x44>)
 801d450:	681d      	ldr	r5, [r3, #0]
 801d452:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801d454:	4604      	mov	r4, r0
 801d456:	b9b3      	cbnz	r3, 801d486 <srand+0x3a>
 801d458:	2018      	movs	r0, #24
 801d45a:	f7ff feef 	bl	801d23c <malloc>
 801d45e:	4602      	mov	r2, r0
 801d460:	63a8      	str	r0, [r5, #56]	; 0x38
 801d462:	b920      	cbnz	r0, 801d46e <srand+0x22>
 801d464:	4b0b      	ldr	r3, [pc, #44]	; (801d494 <srand+0x48>)
 801d466:	480c      	ldr	r0, [pc, #48]	; (801d498 <srand+0x4c>)
 801d468:	2142      	movs	r1, #66	; 0x42
 801d46a:	f001 fabd 	bl	801e9e8 <__assert_func>
 801d46e:	490b      	ldr	r1, [pc, #44]	; (801d49c <srand+0x50>)
 801d470:	4b0b      	ldr	r3, [pc, #44]	; (801d4a0 <srand+0x54>)
 801d472:	e9c0 1300 	strd	r1, r3, [r0]
 801d476:	4b0b      	ldr	r3, [pc, #44]	; (801d4a4 <srand+0x58>)
 801d478:	6083      	str	r3, [r0, #8]
 801d47a:	230b      	movs	r3, #11
 801d47c:	8183      	strh	r3, [r0, #12]
 801d47e:	2100      	movs	r1, #0
 801d480:	2001      	movs	r0, #1
 801d482:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d486:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801d488:	2200      	movs	r2, #0
 801d48a:	611c      	str	r4, [r3, #16]
 801d48c:	615a      	str	r2, [r3, #20]
 801d48e:	bd38      	pop	{r3, r4, r5, pc}
 801d490:	20000104 	.word	0x20000104
 801d494:	08024b98 	.word	0x08024b98
 801d498:	08024c70 	.word	0x08024c70
 801d49c:	abcd330e 	.word	0xabcd330e
 801d4a0:	e66d1234 	.word	0xe66d1234
 801d4a4:	0005deec 	.word	0x0005deec

0801d4a8 <rand>:
 801d4a8:	4b17      	ldr	r3, [pc, #92]	; (801d508 <rand+0x60>)
 801d4aa:	b510      	push	{r4, lr}
 801d4ac:	681c      	ldr	r4, [r3, #0]
 801d4ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d4b0:	b9b3      	cbnz	r3, 801d4e0 <rand+0x38>
 801d4b2:	2018      	movs	r0, #24
 801d4b4:	f7ff fec2 	bl	801d23c <malloc>
 801d4b8:	63a0      	str	r0, [r4, #56]	; 0x38
 801d4ba:	b928      	cbnz	r0, 801d4c8 <rand+0x20>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	4b13      	ldr	r3, [pc, #76]	; (801d50c <rand+0x64>)
 801d4c0:	4813      	ldr	r0, [pc, #76]	; (801d510 <rand+0x68>)
 801d4c2:	214e      	movs	r1, #78	; 0x4e
 801d4c4:	f001 fa90 	bl	801e9e8 <__assert_func>
 801d4c8:	4a12      	ldr	r2, [pc, #72]	; (801d514 <rand+0x6c>)
 801d4ca:	4b13      	ldr	r3, [pc, #76]	; (801d518 <rand+0x70>)
 801d4cc:	e9c0 2300 	strd	r2, r3, [r0]
 801d4d0:	4b12      	ldr	r3, [pc, #72]	; (801d51c <rand+0x74>)
 801d4d2:	6083      	str	r3, [r0, #8]
 801d4d4:	230b      	movs	r3, #11
 801d4d6:	8183      	strh	r3, [r0, #12]
 801d4d8:	2201      	movs	r2, #1
 801d4da:	2300      	movs	r3, #0
 801d4dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d4e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d4e2:	480f      	ldr	r0, [pc, #60]	; (801d520 <rand+0x78>)
 801d4e4:	690a      	ldr	r2, [r1, #16]
 801d4e6:	694b      	ldr	r3, [r1, #20]
 801d4e8:	4c0e      	ldr	r4, [pc, #56]	; (801d524 <rand+0x7c>)
 801d4ea:	4350      	muls	r0, r2
 801d4ec:	fb04 0003 	mla	r0, r4, r3, r0
 801d4f0:	fba2 3404 	umull	r3, r4, r2, r4
 801d4f4:	1c5a      	adds	r2, r3, #1
 801d4f6:	4404      	add	r4, r0
 801d4f8:	f144 0000 	adc.w	r0, r4, #0
 801d4fc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801d500:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d504:	bd10      	pop	{r4, pc}
 801d506:	bf00      	nop
 801d508:	20000104 	.word	0x20000104
 801d50c:	08024b98 	.word	0x08024b98
 801d510:	08024c70 	.word	0x08024c70
 801d514:	abcd330e 	.word	0xabcd330e
 801d518:	e66d1234 	.word	0xe66d1234
 801d51c:	0005deec 	.word	0x0005deec
 801d520:	5851f42d 	.word	0x5851f42d
 801d524:	4c957f2d 	.word	0x4c957f2d

0801d528 <realloc>:
 801d528:	4b02      	ldr	r3, [pc, #8]	; (801d534 <realloc+0xc>)
 801d52a:	460a      	mov	r2, r1
 801d52c:	4601      	mov	r1, r0
 801d52e:	6818      	ldr	r0, [r3, #0]
 801d530:	f001 bc2e 	b.w	801ed90 <_realloc_r>
 801d534:	20000104 	.word	0x20000104

0801d538 <_sbrk_r>:
 801d538:	b538      	push	{r3, r4, r5, lr}
 801d53a:	4d06      	ldr	r5, [pc, #24]	; (801d554 <_sbrk_r+0x1c>)
 801d53c:	2300      	movs	r3, #0
 801d53e:	4604      	mov	r4, r0
 801d540:	4608      	mov	r0, r1
 801d542:	602b      	str	r3, [r5, #0]
 801d544:	f7e3 fca2 	bl	8000e8c <_sbrk>
 801d548:	1c43      	adds	r3, r0, #1
 801d54a:	d102      	bne.n	801d552 <_sbrk_r+0x1a>
 801d54c:	682b      	ldr	r3, [r5, #0]
 801d54e:	b103      	cbz	r3, 801d552 <_sbrk_r+0x1a>
 801d550:	6023      	str	r3, [r4, #0]
 801d552:	bd38      	pop	{r3, r4, r5, pc}
 801d554:	20000d40 	.word	0x20000d40

0801d558 <_raise_r>:
 801d558:	291f      	cmp	r1, #31
 801d55a:	b538      	push	{r3, r4, r5, lr}
 801d55c:	4604      	mov	r4, r0
 801d55e:	460d      	mov	r5, r1
 801d560:	d904      	bls.n	801d56c <_raise_r+0x14>
 801d562:	2316      	movs	r3, #22
 801d564:	6003      	str	r3, [r0, #0]
 801d566:	f04f 30ff 	mov.w	r0, #4294967295
 801d56a:	bd38      	pop	{r3, r4, r5, pc}
 801d56c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d56e:	b112      	cbz	r2, 801d576 <_raise_r+0x1e>
 801d570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d574:	b94b      	cbnz	r3, 801d58a <_raise_r+0x32>
 801d576:	4620      	mov	r0, r4
 801d578:	f000 f830 	bl	801d5dc <_getpid_r>
 801d57c:	462a      	mov	r2, r5
 801d57e:	4601      	mov	r1, r0
 801d580:	4620      	mov	r0, r4
 801d582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d586:	f000 b817 	b.w	801d5b8 <_kill_r>
 801d58a:	2b01      	cmp	r3, #1
 801d58c:	d00a      	beq.n	801d5a4 <_raise_r+0x4c>
 801d58e:	1c59      	adds	r1, r3, #1
 801d590:	d103      	bne.n	801d59a <_raise_r+0x42>
 801d592:	2316      	movs	r3, #22
 801d594:	6003      	str	r3, [r0, #0]
 801d596:	2001      	movs	r0, #1
 801d598:	e7e7      	b.n	801d56a <_raise_r+0x12>
 801d59a:	2400      	movs	r4, #0
 801d59c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d5a0:	4628      	mov	r0, r5
 801d5a2:	4798      	blx	r3
 801d5a4:	2000      	movs	r0, #0
 801d5a6:	e7e0      	b.n	801d56a <_raise_r+0x12>

0801d5a8 <raise>:
 801d5a8:	4b02      	ldr	r3, [pc, #8]	; (801d5b4 <raise+0xc>)
 801d5aa:	4601      	mov	r1, r0
 801d5ac:	6818      	ldr	r0, [r3, #0]
 801d5ae:	f7ff bfd3 	b.w	801d558 <_raise_r>
 801d5b2:	bf00      	nop
 801d5b4:	20000104 	.word	0x20000104

0801d5b8 <_kill_r>:
 801d5b8:	b538      	push	{r3, r4, r5, lr}
 801d5ba:	4d07      	ldr	r5, [pc, #28]	; (801d5d8 <_kill_r+0x20>)
 801d5bc:	2300      	movs	r3, #0
 801d5be:	4604      	mov	r4, r0
 801d5c0:	4608      	mov	r0, r1
 801d5c2:	4611      	mov	r1, r2
 801d5c4:	602b      	str	r3, [r5, #0]
 801d5c6:	f7e3 fbcc 	bl	8000d62 <_kill>
 801d5ca:	1c43      	adds	r3, r0, #1
 801d5cc:	d102      	bne.n	801d5d4 <_kill_r+0x1c>
 801d5ce:	682b      	ldr	r3, [r5, #0]
 801d5d0:	b103      	cbz	r3, 801d5d4 <_kill_r+0x1c>
 801d5d2:	6023      	str	r3, [r4, #0]
 801d5d4:	bd38      	pop	{r3, r4, r5, pc}
 801d5d6:	bf00      	nop
 801d5d8:	20000d40 	.word	0x20000d40

0801d5dc <_getpid_r>:
 801d5dc:	f7e3 bbb9 	b.w	8000d52 <_getpid>

0801d5e0 <__sread>:
 801d5e0:	b510      	push	{r4, lr}
 801d5e2:	460c      	mov	r4, r1
 801d5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5e8:	f002 f88a 	bl	801f700 <_read_r>
 801d5ec:	2800      	cmp	r0, #0
 801d5ee:	bfab      	itete	ge
 801d5f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d5f2:	89a3      	ldrhlt	r3, [r4, #12]
 801d5f4:	181b      	addge	r3, r3, r0
 801d5f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d5fa:	bfac      	ite	ge
 801d5fc:	6563      	strge	r3, [r4, #84]	; 0x54
 801d5fe:	81a3      	strhlt	r3, [r4, #12]
 801d600:	bd10      	pop	{r4, pc}

0801d602 <__seofread>:
 801d602:	2000      	movs	r0, #0
 801d604:	4770      	bx	lr

0801d606 <__swrite>:
 801d606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d60a:	461f      	mov	r7, r3
 801d60c:	898b      	ldrh	r3, [r1, #12]
 801d60e:	05db      	lsls	r3, r3, #23
 801d610:	4605      	mov	r5, r0
 801d612:	460c      	mov	r4, r1
 801d614:	4616      	mov	r6, r2
 801d616:	d505      	bpl.n	801d624 <__swrite+0x1e>
 801d618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d61c:	2302      	movs	r3, #2
 801d61e:	2200      	movs	r2, #0
 801d620:	f001 fb86 	bl	801ed30 <_lseek_r>
 801d624:	89a3      	ldrh	r3, [r4, #12]
 801d626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d62e:	81a3      	strh	r3, [r4, #12]
 801d630:	4632      	mov	r2, r6
 801d632:	463b      	mov	r3, r7
 801d634:	4628      	mov	r0, r5
 801d636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d63a:	f001 b8ef 	b.w	801e81c <_write_r>

0801d63e <__sseek>:
 801d63e:	b510      	push	{r4, lr}
 801d640:	460c      	mov	r4, r1
 801d642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d646:	f001 fb73 	bl	801ed30 <_lseek_r>
 801d64a:	1c43      	adds	r3, r0, #1
 801d64c:	89a3      	ldrh	r3, [r4, #12]
 801d64e:	bf15      	itete	ne
 801d650:	6560      	strne	r0, [r4, #84]	; 0x54
 801d652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d65a:	81a3      	strheq	r3, [r4, #12]
 801d65c:	bf18      	it	ne
 801d65e:	81a3      	strhne	r3, [r4, #12]
 801d660:	bd10      	pop	{r4, pc}

0801d662 <__sclose>:
 801d662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d666:	f001 b9dd 	b.w	801ea24 <_close_r>
	...

0801d66c <iso_year_adjust>:
 801d66c:	6941      	ldr	r1, [r0, #20]
 801d66e:	2900      	cmp	r1, #0
 801d670:	f240 736c 	movw	r3, #1900	; 0x76c
 801d674:	bfa8      	it	ge
 801d676:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801d67a:	18ca      	adds	r2, r1, r3
 801d67c:	078b      	lsls	r3, r1, #30
 801d67e:	d105      	bne.n	801d68c <iso_year_adjust+0x20>
 801d680:	2164      	movs	r1, #100	; 0x64
 801d682:	fb92 f3f1 	sdiv	r3, r2, r1
 801d686:	fb01 2313 	mls	r3, r1, r3, r2
 801d68a:	b9db      	cbnz	r3, 801d6c4 <iso_year_adjust+0x58>
 801d68c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d690:	fb92 f3f1 	sdiv	r3, r2, r1
 801d694:	fb01 2313 	mls	r3, r1, r3, r2
 801d698:	fab3 f383 	clz	r3, r3
 801d69c:	095b      	lsrs	r3, r3, #5
 801d69e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801d6a2:	0040      	lsls	r0, r0, #1
 801d6a4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801d6a8:	4418      	add	r0, r3
 801d6aa:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801d6ae:	4298      	cmp	r0, r3
 801d6b0:	d03a      	beq.n	801d728 <iso_year_adjust+0xbc>
 801d6b2:	dc21      	bgt.n	801d6f8 <iso_year_adjust+0x8c>
 801d6b4:	2801      	cmp	r0, #1
 801d6b6:	dc1a      	bgt.n	801d6ee <iso_year_adjust+0x82>
 801d6b8:	2800      	cmp	r0, #0
 801d6ba:	bfb4      	ite	lt
 801d6bc:	2000      	movlt	r0, #0
 801d6be:	f04f 30ff 	movge.w	r0, #4294967295
 801d6c2:	4770      	bx	lr
 801d6c4:	2301      	movs	r3, #1
 801d6c6:	e7ea      	b.n	801d69e <iso_year_adjust+0x32>
 801d6c8:	2817      	cmp	r0, #23
 801d6ca:	d813      	bhi.n	801d6f4 <iso_year_adjust+0x88>
 801d6cc:	e8df f000 	tbb	[pc, r0]
 801d6d0:	0c0c0c0c 	.word	0x0c0c0c0c
 801d6d4:	0c0c1212 	.word	0x0c0c1212
 801d6d8:	12121212 	.word	0x12121212
 801d6dc:	12121212 	.word	0x12121212
 801d6e0:	0c0c1212 	.word	0x0c0c1212
 801d6e4:	0c0c1212 	.word	0x0c0c1212
 801d6e8:	f04f 30ff 	mov.w	r0, #4294967295
 801d6ec:	4770      	bx	lr
 801d6ee:	380a      	subs	r0, #10
 801d6f0:	2817      	cmp	r0, #23
 801d6f2:	d9e9      	bls.n	801d6c8 <iso_year_adjust+0x5c>
 801d6f4:	2000      	movs	r0, #0
 801d6f6:	4770      	bx	lr
 801d6f8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801d6fc:	4298      	cmp	r0, r3
 801d6fe:	dc06      	bgt.n	801d70e <iso_year_adjust+0xa2>
 801d700:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801d704:	4298      	cmp	r0, r3
 801d706:	bfd4      	ite	le
 801d708:	2000      	movle	r0, #0
 801d70a:	2001      	movgt	r0, #1
 801d70c:	4770      	bx	lr
 801d70e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801d712:	3802      	subs	r0, #2
 801d714:	2815      	cmp	r0, #21
 801d716:	d8ed      	bhi.n	801d6f4 <iso_year_adjust+0x88>
 801d718:	2301      	movs	r3, #1
 801d71a:	4083      	lsls	r3, r0
 801d71c:	4803      	ldr	r0, [pc, #12]	; (801d72c <iso_year_adjust+0xc0>)
 801d71e:	4018      	ands	r0, r3
 801d720:	3800      	subs	r0, #0
 801d722:	bf18      	it	ne
 801d724:	2001      	movne	r0, #1
 801d726:	4770      	bx	lr
 801d728:	2001      	movs	r0, #1
 801d72a:	4770      	bx	lr
 801d72c:	002a001f 	.word	0x002a001f

0801d730 <__strftime>:
 801d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d734:	b091      	sub	sp, #68	; 0x44
 801d736:	461d      	mov	r5, r3
 801d738:	2300      	movs	r3, #0
 801d73a:	4681      	mov	r9, r0
 801d73c:	4688      	mov	r8, r1
 801d73e:	9304      	str	r3, [sp, #16]
 801d740:	461c      	mov	r4, r3
 801d742:	7813      	ldrb	r3, [r2, #0]
 801d744:	2b00      	cmp	r3, #0
 801d746:	f000 84d1 	beq.w	801e0ec <__strftime+0x9bc>
 801d74a:	2b25      	cmp	r3, #37	; 0x25
 801d74c:	d11b      	bne.n	801d786 <__strftime+0x56>
 801d74e:	7857      	ldrb	r7, [r2, #1]
 801d750:	2f30      	cmp	r7, #48	; 0x30
 801d752:	d024      	beq.n	801d79e <__strftime+0x6e>
 801d754:	2f2b      	cmp	r7, #43	; 0x2b
 801d756:	d022      	beq.n	801d79e <__strftime+0x6e>
 801d758:	f102 0b01 	add.w	fp, r2, #1
 801d75c:	2700      	movs	r7, #0
 801d75e:	f89b 3000 	ldrb.w	r3, [fp]
 801d762:	3b31      	subs	r3, #49	; 0x31
 801d764:	2b08      	cmp	r3, #8
 801d766:	d81d      	bhi.n	801d7a4 <__strftime+0x74>
 801d768:	4658      	mov	r0, fp
 801d76a:	220a      	movs	r2, #10
 801d76c:	a908      	add	r1, sp, #32
 801d76e:	f000 fd6f 	bl	801e250 <strtoul>
 801d772:	f8dd b020 	ldr.w	fp, [sp, #32]
 801d776:	4606      	mov	r6, r0
 801d778:	f89b 3000 	ldrb.w	r3, [fp]
 801d77c:	2b45      	cmp	r3, #69	; 0x45
 801d77e:	d113      	bne.n	801d7a8 <__strftime+0x78>
 801d780:	f10b 0b01 	add.w	fp, fp, #1
 801d784:	e012      	b.n	801d7ac <__strftime+0x7c>
 801d786:	f108 31ff 	add.w	r1, r8, #4294967295
 801d78a:	42a1      	cmp	r1, r4
 801d78c:	d802      	bhi.n	801d794 <__strftime+0x64>
 801d78e:	2400      	movs	r4, #0
 801d790:	f000 bcb2 	b.w	801e0f8 <__strftime+0x9c8>
 801d794:	f809 3004 	strb.w	r3, [r9, r4]
 801d798:	3201      	adds	r2, #1
 801d79a:	3401      	adds	r4, #1
 801d79c:	e7d1      	b.n	801d742 <__strftime+0x12>
 801d79e:	f102 0b02 	add.w	fp, r2, #2
 801d7a2:	e7dc      	b.n	801d75e <__strftime+0x2e>
 801d7a4:	2600      	movs	r6, #0
 801d7a6:	e7e7      	b.n	801d778 <__strftime+0x48>
 801d7a8:	2b4f      	cmp	r3, #79	; 0x4f
 801d7aa:	d0e9      	beq.n	801d780 <__strftime+0x50>
 801d7ac:	f89b 0000 	ldrb.w	r0, [fp]
 801d7b0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801d7b4:	2b55      	cmp	r3, #85	; 0x55
 801d7b6:	d8ea      	bhi.n	801d78e <__strftime+0x5e>
 801d7b8:	a201      	add	r2, pc, #4	; (adr r2, 801d7c0 <__strftime+0x90>)
 801d7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7be:	bf00      	nop
 801d7c0:	0801e0df 	.word	0x0801e0df
 801d7c4:	0801d78f 	.word	0x0801d78f
 801d7c8:	0801d78f 	.word	0x0801d78f
 801d7cc:	0801d78f 	.word	0x0801d78f
 801d7d0:	0801d78f 	.word	0x0801d78f
 801d7d4:	0801d78f 	.word	0x0801d78f
 801d7d8:	0801d78f 	.word	0x0801d78f
 801d7dc:	0801d78f 	.word	0x0801d78f
 801d7e0:	0801d78f 	.word	0x0801d78f
 801d7e4:	0801d78f 	.word	0x0801d78f
 801d7e8:	0801d78f 	.word	0x0801d78f
 801d7ec:	0801d78f 	.word	0x0801d78f
 801d7f0:	0801d78f 	.word	0x0801d78f
 801d7f4:	0801d78f 	.word	0x0801d78f
 801d7f8:	0801d78f 	.word	0x0801d78f
 801d7fc:	0801d78f 	.word	0x0801d78f
 801d800:	0801d78f 	.word	0x0801d78f
 801d804:	0801d78f 	.word	0x0801d78f
 801d808:	0801d78f 	.word	0x0801d78f
 801d80c:	0801d78f 	.word	0x0801d78f
 801d810:	0801d78f 	.word	0x0801d78f
 801d814:	0801d78f 	.word	0x0801d78f
 801d818:	0801d78f 	.word	0x0801d78f
 801d81c:	0801d78f 	.word	0x0801d78f
 801d820:	0801d78f 	.word	0x0801d78f
 801d824:	0801d78f 	.word	0x0801d78f
 801d828:	0801d78f 	.word	0x0801d78f
 801d82c:	0801d78f 	.word	0x0801d78f
 801d830:	0801d957 	.word	0x0801d957
 801d834:	0801d9b1 	.word	0x0801d9b1
 801d838:	0801da27 	.word	0x0801da27
 801d83c:	0801dac1 	.word	0x0801dac1
 801d840:	0801d78f 	.word	0x0801d78f
 801d844:	0801db0d 	.word	0x0801db0d
 801d848:	0801dbed 	.word	0x0801dbed
 801d84c:	0801dcef 	.word	0x0801dcef
 801d850:	0801dcfd 	.word	0x0801dcfd
 801d854:	0801d78f 	.word	0x0801d78f
 801d858:	0801d78f 	.word	0x0801d78f
 801d85c:	0801d78f 	.word	0x0801d78f
 801d860:	0801dd2d 	.word	0x0801dd2d
 801d864:	0801d78f 	.word	0x0801d78f
 801d868:	0801d78f 	.word	0x0801d78f
 801d86c:	0801dd45 	.word	0x0801dd45
 801d870:	0801d78f 	.word	0x0801d78f
 801d874:	0801dd93 	.word	0x0801dd93
 801d878:	0801dea9 	.word	0x0801dea9
 801d87c:	0801debb 	.word	0x0801debb
 801d880:	0801df13 	.word	0x0801df13
 801d884:	0801df23 	.word	0x0801df23
 801d888:	0801df99 	.word	0x0801df99
 801d88c:	0801da1f 	.word	0x0801da1f
 801d890:	0801dfcd 	.word	0x0801dfcd
 801d894:	0801e08b 	.word	0x0801e08b
 801d898:	0801d78f 	.word	0x0801d78f
 801d89c:	0801d78f 	.word	0x0801d78f
 801d8a0:	0801d78f 	.word	0x0801d78f
 801d8a4:	0801d78f 	.word	0x0801d78f
 801d8a8:	0801d78f 	.word	0x0801d78f
 801d8ac:	0801d78f 	.word	0x0801d78f
 801d8b0:	0801d919 	.word	0x0801d919
 801d8b4:	0801d985 	.word	0x0801d985
 801d8b8:	0801d9df 	.word	0x0801d9df
 801d8bc:	0801da99 	.word	0x0801da99
 801d8c0:	0801da99 	.word	0x0801da99
 801d8c4:	0801d78f 	.word	0x0801d78f
 801d8c8:	0801db55 	.word	0x0801db55
 801d8cc:	0801d985 	.word	0x0801d985
 801d8d0:	0801d78f 	.word	0x0801d78f
 801d8d4:	0801dd1f 	.word	0x0801dd1f
 801d8d8:	0801dcef 	.word	0x0801dcef
 801d8dc:	0801dcfd 	.word	0x0801dcfd
 801d8e0:	0801dd27 	.word	0x0801dd27
 801d8e4:	0801dd31 	.word	0x0801dd31
 801d8e8:	0801d78f 	.word	0x0801d78f
 801d8ec:	0801dd45 	.word	0x0801dd45
 801d8f0:	0801d78f 	.word	0x0801d78f
 801d8f4:	0801da0f 	.word	0x0801da0f
 801d8f8:	0801dda9 	.word	0x0801dda9
 801d8fc:	0801dead 	.word	0x0801dead
 801d900:	0801def5 	.word	0x0801def5
 801d904:	0801d78f 	.word	0x0801d78f
 801d908:	0801df89 	.word	0x0801df89
 801d90c:	0801da17 	.word	0x0801da17
 801d910:	0801dfb1 	.word	0x0801dfb1
 801d914:	0801e01d 	.word	0x0801e01d
 801d918:	69ab      	ldr	r3, [r5, #24]
 801d91a:	4aa7      	ldr	r2, [pc, #668]	; (801dbb8 <__strftime+0x488>)
 801d91c:	3318      	adds	r3, #24
 801d91e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801d922:	4630      	mov	r0, r6
 801d924:	f7e2 fc8a 	bl	800023c <strlen>
 801d928:	3e01      	subs	r6, #1
 801d92a:	4420      	add	r0, r4
 801d92c:	f108 33ff 	add.w	r3, r8, #4294967295
 801d930:	42a0      	cmp	r0, r4
 801d932:	d107      	bne.n	801d944 <__strftime+0x214>
 801d934:	f89b 3000 	ldrb.w	r3, [fp]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	f000 83d7 	beq.w	801e0ec <__strftime+0x9bc>
 801d93e:	f10b 0201 	add.w	r2, fp, #1
 801d942:	e6fe      	b.n	801d742 <__strftime+0x12>
 801d944:	42a3      	cmp	r3, r4
 801d946:	f67f af22 	bls.w	801d78e <__strftime+0x5e>
 801d94a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d94e:	f809 2004 	strb.w	r2, [r9, r4]
 801d952:	3401      	adds	r4, #1
 801d954:	e7ec      	b.n	801d930 <__strftime+0x200>
 801d956:	69aa      	ldr	r2, [r5, #24]
 801d958:	4b97      	ldr	r3, [pc, #604]	; (801dbb8 <__strftime+0x488>)
 801d95a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d95e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801d960:	4630      	mov	r0, r6
 801d962:	f7e2 fc6b 	bl	800023c <strlen>
 801d966:	3e01      	subs	r6, #1
 801d968:	4420      	add	r0, r4
 801d96a:	f108 33ff 	add.w	r3, r8, #4294967295
 801d96e:	42a0      	cmp	r0, r4
 801d970:	d0e0      	beq.n	801d934 <__strftime+0x204>
 801d972:	42a3      	cmp	r3, r4
 801d974:	f67f af0b 	bls.w	801d78e <__strftime+0x5e>
 801d978:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d97c:	f809 2004 	strb.w	r2, [r9, r4]
 801d980:	3401      	adds	r4, #1
 801d982:	e7f4      	b.n	801d96e <__strftime+0x23e>
 801d984:	4b8c      	ldr	r3, [pc, #560]	; (801dbb8 <__strftime+0x488>)
 801d986:	692a      	ldr	r2, [r5, #16]
 801d988:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d98c:	4630      	mov	r0, r6
 801d98e:	f7e2 fc55 	bl	800023c <strlen>
 801d992:	3e01      	subs	r6, #1
 801d994:	4420      	add	r0, r4
 801d996:	f108 33ff 	add.w	r3, r8, #4294967295
 801d99a:	42a0      	cmp	r0, r4
 801d99c:	d0ca      	beq.n	801d934 <__strftime+0x204>
 801d99e:	42a3      	cmp	r3, r4
 801d9a0:	f67f aef5 	bls.w	801d78e <__strftime+0x5e>
 801d9a4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d9a8:	f809 2004 	strb.w	r2, [r9, r4]
 801d9ac:	3401      	adds	r4, #1
 801d9ae:	e7f4      	b.n	801d99a <__strftime+0x26a>
 801d9b0:	692b      	ldr	r3, [r5, #16]
 801d9b2:	4a81      	ldr	r2, [pc, #516]	; (801dbb8 <__strftime+0x488>)
 801d9b4:	330c      	adds	r3, #12
 801d9b6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801d9ba:	4630      	mov	r0, r6
 801d9bc:	f7e2 fc3e 	bl	800023c <strlen>
 801d9c0:	3e01      	subs	r6, #1
 801d9c2:	4420      	add	r0, r4
 801d9c4:	f108 33ff 	add.w	r3, r8, #4294967295
 801d9c8:	42a0      	cmp	r0, r4
 801d9ca:	d0b3      	beq.n	801d934 <__strftime+0x204>
 801d9cc:	42a3      	cmp	r3, r4
 801d9ce:	f67f aede 	bls.w	801d78e <__strftime+0x5e>
 801d9d2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801d9d6:	f809 2004 	strb.w	r2, [r9, r4]
 801d9da:	3401      	adds	r4, #1
 801d9dc:	e7f4      	b.n	801d9c8 <__strftime+0x298>
 801d9de:	4b76      	ldr	r3, [pc, #472]	; (801dbb8 <__strftime+0x488>)
 801d9e0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801d9e4:	4630      	mov	r0, r6
 801d9e6:	f7e2 fc29 	bl	800023c <strlen>
 801d9ea:	7833      	ldrb	r3, [r6, #0]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d0a1      	beq.n	801d934 <__strftime+0x204>
 801d9f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d9f2:	9300      	str	r3, [sp, #0]
 801d9f4:	4632      	mov	r2, r6
 801d9f6:	462b      	mov	r3, r5
 801d9f8:	eba8 0104 	sub.w	r1, r8, r4
 801d9fc:	eb09 0004 	add.w	r0, r9, r4
 801da00:	f7ff fe96 	bl	801d730 <__strftime>
 801da04:	2800      	cmp	r0, #0
 801da06:	f77f aec2 	ble.w	801d78e <__strftime+0x5e>
 801da0a:	4404      	add	r4, r0
 801da0c:	e792      	b.n	801d934 <__strftime+0x204>
 801da0e:	4b6a      	ldr	r3, [pc, #424]	; (801dbb8 <__strftime+0x488>)
 801da10:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801da14:	e7e6      	b.n	801d9e4 <__strftime+0x2b4>
 801da16:	4b68      	ldr	r3, [pc, #416]	; (801dbb8 <__strftime+0x488>)
 801da18:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801da1c:	e7e2      	b.n	801d9e4 <__strftime+0x2b4>
 801da1e:	4b66      	ldr	r3, [pc, #408]	; (801dbb8 <__strftime+0x488>)
 801da20:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801da24:	e7de      	b.n	801d9e4 <__strftime+0x2b4>
 801da26:	4965      	ldr	r1, [pc, #404]	; (801dbbc <__strftime+0x48c>)
 801da28:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801da2c:	458a      	cmp	sl, r1
 801da2e:	bfac      	ite	ge
 801da30:	2100      	movge	r1, #0
 801da32:	2101      	movlt	r1, #1
 801da34:	f1ba 0f00 	cmp.w	sl, #0
 801da38:	db0e      	blt.n	801da58 <__strftime+0x328>
 801da3a:	2064      	movs	r0, #100	; 0x64
 801da3c:	fb9a f0f0 	sdiv	r0, sl, r0
 801da40:	3013      	adds	r0, #19
 801da42:	b19f      	cbz	r7, 801da6c <__strftime+0x33c>
 801da44:	2863      	cmp	r0, #99	; 0x63
 801da46:	dd25      	ble.n	801da94 <__strftime+0x364>
 801da48:	4a5d      	ldr	r2, [pc, #372]	; (801dbc0 <__strftime+0x490>)
 801da4a:	4b5e      	ldr	r3, [pc, #376]	; (801dbc4 <__strftime+0x494>)
 801da4c:	2f2b      	cmp	r7, #43	; 0x2b
 801da4e:	bf14      	ite	ne
 801da50:	4617      	movne	r7, r2
 801da52:	461f      	moveq	r7, r3
 801da54:	4a5c      	ldr	r2, [pc, #368]	; (801dbc8 <__strftime+0x498>)
 801da56:	e00b      	b.n	801da70 <__strftime+0x340>
 801da58:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801da5c:	9105      	str	r1, [sp, #20]
 801da5e:	f000 ffbf 	bl	801e9e0 <abs>
 801da62:	2364      	movs	r3, #100	; 0x64
 801da64:	9905      	ldr	r1, [sp, #20]
 801da66:	fb90 f0f3 	sdiv	r0, r0, r3
 801da6a:	e7ea      	b.n	801da42 <__strftime+0x312>
 801da6c:	4f54      	ldr	r7, [pc, #336]	; (801dbc0 <__strftime+0x490>)
 801da6e:	4a57      	ldr	r2, [pc, #348]	; (801dbcc <__strftime+0x49c>)
 801da70:	4b57      	ldr	r3, [pc, #348]	; (801dbd0 <__strftime+0x4a0>)
 801da72:	9001      	str	r0, [sp, #4]
 801da74:	2e02      	cmp	r6, #2
 801da76:	bf2c      	ite	cs
 801da78:	ebc1 0606 	rsbcs	r6, r1, r6
 801da7c:	f1c1 0602 	rsbcc	r6, r1, #2
 801da80:	494e      	ldr	r1, [pc, #312]	; (801dbbc <__strftime+0x48c>)
 801da82:	9600      	str	r6, [sp, #0]
 801da84:	458a      	cmp	sl, r1
 801da86:	bfa8      	it	ge
 801da88:	463b      	movge	r3, r7
 801da8a:	eba8 0104 	sub.w	r1, r8, r4
 801da8e:	eb09 0004 	add.w	r0, r9, r4
 801da92:	e02a      	b.n	801daea <__strftime+0x3ba>
 801da94:	4f4a      	ldr	r7, [pc, #296]	; (801dbc0 <__strftime+0x490>)
 801da96:	e7dd      	b.n	801da54 <__strftime+0x324>
 801da98:	494e      	ldr	r1, [pc, #312]	; (801dbd4 <__strftime+0x4a4>)
 801da9a:	4a4f      	ldr	r2, [pc, #316]	; (801dbd8 <__strftime+0x4a8>)
 801da9c:	68eb      	ldr	r3, [r5, #12]
 801da9e:	2864      	cmp	r0, #100	; 0x64
 801daa0:	bf08      	it	eq
 801daa2:	460a      	moveq	r2, r1
 801daa4:	eba8 0104 	sub.w	r1, r8, r4
 801daa8:	eb09 0004 	add.w	r0, r9, r4
 801daac:	f001 fe3a 	bl	801f724 <sniprintf>
 801dab0:	2800      	cmp	r0, #0
 801dab2:	f6ff ae6c 	blt.w	801d78e <__strftime+0x5e>
 801dab6:	4404      	add	r4, r0
 801dab8:	45a0      	cmp	r8, r4
 801daba:	f63f af3b 	bhi.w	801d934 <__strftime+0x204>
 801dabe:	e666      	b.n	801d78e <__strftime+0x5e>
 801dac0:	6968      	ldr	r0, [r5, #20]
 801dac2:	692b      	ldr	r3, [r5, #16]
 801dac4:	68ef      	ldr	r7, [r5, #12]
 801dac6:	2800      	cmp	r0, #0
 801dac8:	eb09 0604 	add.w	r6, r9, r4
 801dacc:	eba8 0104 	sub.w	r1, r8, r4
 801dad0:	f103 0301 	add.w	r3, r3, #1
 801dad4:	db0c      	blt.n	801daf0 <__strftime+0x3c0>
 801dad6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801dada:	fb90 f2fc 	sdiv	r2, r0, ip
 801dade:	fb0c 0212 	mls	r2, ip, r2, r0
 801dae2:	e9cd 7200 	strd	r7, r2, [sp]
 801dae6:	4a3d      	ldr	r2, [pc, #244]	; (801dbdc <__strftime+0x4ac>)
 801dae8:	4630      	mov	r0, r6
 801daea:	f001 fe1b 	bl	801f724 <sniprintf>
 801daee:	e7df      	b.n	801dab0 <__strftime+0x380>
 801daf0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801daf4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801daf8:	f000 ff72 	bl	801e9e0 <abs>
 801dafc:	2264      	movs	r2, #100	; 0x64
 801dafe:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801db02:	fb90 fcf2 	sdiv	ip, r0, r2
 801db06:	fb0c 0212 	mls	r2, ip, r2, r0
 801db0a:	e7ea      	b.n	801dae2 <__strftime+0x3b2>
 801db0c:	2325      	movs	r3, #37	; 0x25
 801db0e:	f88d 3020 	strb.w	r3, [sp, #32]
 801db12:	b187      	cbz	r7, 801db36 <__strftime+0x406>
 801db14:	2e06      	cmp	r6, #6
 801db16:	bf38      	it	cc
 801db18:	2606      	movcc	r6, #6
 801db1a:	1fb3      	subs	r3, r6, #6
 801db1c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801db20:	d10c      	bne.n	801db3c <__strftime+0x40c>
 801db22:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801db26:	492e      	ldr	r1, [pc, #184]	; (801dbe0 <__strftime+0x4b0>)
 801db28:	f001 fe5c 	bl	801f7e4 <strcpy>
 801db2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801db2e:	9300      	str	r3, [sp, #0]
 801db30:	aa08      	add	r2, sp, #32
 801db32:	462b      	mov	r3, r5
 801db34:	e760      	b.n	801d9f8 <__strftime+0x2c8>
 801db36:	272b      	movs	r7, #43	; 0x2b
 801db38:	260a      	movs	r6, #10
 801db3a:	e7ee      	b.n	801db1a <__strftime+0x3ea>
 801db3c:	4a29      	ldr	r2, [pc, #164]	; (801dbe4 <__strftime+0x4b4>)
 801db3e:	211e      	movs	r1, #30
 801db40:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801db44:	f001 fdee 	bl	801f724 <sniprintf>
 801db48:	2800      	cmp	r0, #0
 801db4a:	ddea      	ble.n	801db22 <__strftime+0x3f2>
 801db4c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801db50:	4418      	add	r0, r3
 801db52:	e7e8      	b.n	801db26 <__strftime+0x3f6>
 801db54:	4628      	mov	r0, r5
 801db56:	f7ff fd89 	bl	801d66c <iso_year_adjust>
 801db5a:	4606      	mov	r6, r0
 801db5c:	6968      	ldr	r0, [r5, #20]
 801db5e:	2800      	cmp	r0, #0
 801db60:	db11      	blt.n	801db86 <__strftime+0x456>
 801db62:	2264      	movs	r2, #100	; 0x64
 801db64:	fb90 f3f2 	sdiv	r3, r0, r2
 801db68:	fb02 0313 	mls	r3, r2, r3, r0
 801db6c:	441e      	add	r6, r3
 801db6e:	2364      	movs	r3, #100	; 0x64
 801db70:	fb96 f0f3 	sdiv	r0, r6, r3
 801db74:	fb03 6610 	mls	r6, r3, r0, r6
 801db78:	441e      	add	r6, r3
 801db7a:	fbb6 f2f3 	udiv	r2, r6, r3
 801db7e:	fb03 6312 	mls	r3, r3, r2, r6
 801db82:	4a14      	ldr	r2, [pc, #80]	; (801dbd4 <__strftime+0x4a4>)
 801db84:	e78e      	b.n	801daa4 <__strftime+0x374>
 801db86:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801db8a:	f000 ff29 	bl	801e9e0 <abs>
 801db8e:	2364      	movs	r3, #100	; 0x64
 801db90:	2e00      	cmp	r6, #0
 801db92:	fb90 f2f3 	sdiv	r2, r0, r3
 801db96:	fb02 0313 	mls	r3, r2, r3, r0
 801db9a:	da05      	bge.n	801dba8 <__strftime+0x478>
 801db9c:	6969      	ldr	r1, [r5, #20]
 801db9e:	4a12      	ldr	r2, [pc, #72]	; (801dbe8 <__strftime+0x4b8>)
 801dba0:	4291      	cmp	r1, r2
 801dba2:	bfb8      	it	lt
 801dba4:	2601      	movlt	r6, #1
 801dba6:	e7e1      	b.n	801db6c <__strftime+0x43c>
 801dba8:	d0e0      	beq.n	801db6c <__strftime+0x43c>
 801dbaa:	6969      	ldr	r1, [r5, #20]
 801dbac:	4a03      	ldr	r2, [pc, #12]	; (801dbbc <__strftime+0x48c>)
 801dbae:	4291      	cmp	r1, r2
 801dbb0:	bfb8      	it	lt
 801dbb2:	f04f 36ff 	movlt.w	r6, #4294967295
 801dbb6:	e7d9      	b.n	801db6c <__strftime+0x43c>
 801dbb8:	08024e54 	.word	0x08024e54
 801dbbc:	fffff894 	.word	0xfffff894
 801dbc0:	08024fc7 	.word	0x08024fc7
 801dbc4:	08024cde 	.word	0x08024cde
 801dbc8:	08024cd6 	.word	0x08024cd6
 801dbcc:	08024ccf 	.word	0x08024ccf
 801dbd0:	08025107 	.word	0x08025107
 801dbd4:	08024cee 	.word	0x08024cee
 801dbd8:	08024ce0 	.word	0x08024ce0
 801dbdc:	08024ce4 	.word	0x08024ce4
 801dbe0:	08024cf7 	.word	0x08024cf7
 801dbe4:	08024cf3 	.word	0x08024cf3
 801dbe8:	fffff895 	.word	0xfffff895
 801dbec:	4bb6      	ldr	r3, [pc, #728]	; (801dec8 <__strftime+0x798>)
 801dbee:	6969      	ldr	r1, [r5, #20]
 801dbf0:	4299      	cmp	r1, r3
 801dbf2:	bfac      	ite	ge
 801dbf4:	2300      	movge	r3, #0
 801dbf6:	2301      	movlt	r3, #1
 801dbf8:	4628      	mov	r0, r5
 801dbfa:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801dbfe:	f7ff fd35 	bl	801d66c <iso_year_adjust>
 801dc02:	9906      	ldr	r1, [sp, #24]
 801dc04:	2900      	cmp	r1, #0
 801dc06:	4682      	mov	sl, r0
 801dc08:	db27      	blt.n	801dc5a <__strftime+0x52a>
 801dc0a:	2264      	movs	r2, #100	; 0x64
 801dc0c:	fb91 f2f2 	sdiv	r2, r1, r2
 801dc10:	3213      	adds	r2, #19
 801dc12:	6968      	ldr	r0, [r5, #20]
 801dc14:	2800      	cmp	r0, #0
 801dc16:	db2b      	blt.n	801dc70 <__strftime+0x540>
 801dc18:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801dc1c:	fb90 fefc 	sdiv	lr, r0, ip
 801dc20:	fb0c 001e 	mls	r0, ip, lr, r0
 801dc24:	f1ba 0f00 	cmp.w	sl, #0
 801dc28:	da31      	bge.n	801dc8e <__strftime+0x55e>
 801dc2a:	6969      	ldr	r1, [r5, #20]
 801dc2c:	4ba7      	ldr	r3, [pc, #668]	; (801decc <__strftime+0x79c>)
 801dc2e:	4299      	cmp	r1, r3
 801dc30:	db38      	blt.n	801dca4 <__strftime+0x574>
 801dc32:	eb0a 0300 	add.w	r3, sl, r0
 801dc36:	1c59      	adds	r1, r3, #1
 801dc38:	d139      	bne.n	801dcae <__strftime+0x57e>
 801dc3a:	3a01      	subs	r2, #1
 801dc3c:	2363      	movs	r3, #99	; 0x63
 801dc3e:	2064      	movs	r0, #100	; 0x64
 801dc40:	fb00 3202 	mla	r2, r0, r2, r3
 801dc44:	9b05      	ldr	r3, [sp, #20]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d036      	beq.n	801dcb8 <__strftime+0x588>
 801dc4a:	232d      	movs	r3, #45	; 0x2d
 801dc4c:	f88d 3020 	strb.w	r3, [sp, #32]
 801dc50:	b106      	cbz	r6, 801dc54 <__strftime+0x524>
 801dc52:	3e01      	subs	r6, #1
 801dc54:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801dc58:	e038      	b.n	801dccc <__strftime+0x59c>
 801dc5a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801dc5e:	9106      	str	r1, [sp, #24]
 801dc60:	f000 febe 	bl	801e9e0 <abs>
 801dc64:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801dc68:	9906      	ldr	r1, [sp, #24]
 801dc6a:	fb90 f2fc 	sdiv	r2, r0, ip
 801dc6e:	e7d0      	b.n	801dc12 <__strftime+0x4e2>
 801dc70:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801dc74:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801dc78:	f000 feb2 	bl	801e9e0 <abs>
 801dc7c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801dc80:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801dc84:	fb90 fefc 	sdiv	lr, r0, ip
 801dc88:	fb0e 001c 	mls	r0, lr, ip, r0
 801dc8c:	e7ca      	b.n	801dc24 <__strftime+0x4f4>
 801dc8e:	d0d0      	beq.n	801dc32 <__strftime+0x502>
 801dc90:	4b8d      	ldr	r3, [pc, #564]	; (801dec8 <__strftime+0x798>)
 801dc92:	4299      	cmp	r1, r3
 801dc94:	bfb4      	ite	lt
 801dc96:	2301      	movlt	r3, #1
 801dc98:	2300      	movge	r3, #0
 801dc9a:	9305      	str	r3, [sp, #20]
 801dc9c:	bfb8      	it	lt
 801dc9e:	f04f 3aff 	movlt.w	sl, #4294967295
 801dca2:	e7c6      	b.n	801dc32 <__strftime+0x502>
 801dca4:	f04f 0a01 	mov.w	sl, #1
 801dca8:	f8cd a014 	str.w	sl, [sp, #20]
 801dcac:	e7c1      	b.n	801dc32 <__strftime+0x502>
 801dcae:	2b64      	cmp	r3, #100	; 0x64
 801dcb0:	bf04      	itt	eq
 801dcb2:	3201      	addeq	r2, #1
 801dcb4:	2300      	moveq	r3, #0
 801dcb6:	e7c2      	b.n	801dc3e <__strftime+0x50e>
 801dcb8:	2f2b      	cmp	r7, #43	; 0x2b
 801dcba:	d106      	bne.n	801dcca <__strftime+0x59a>
 801dcbc:	f242 730f 	movw	r3, #9999	; 0x270f
 801dcc0:	429a      	cmp	r2, r3
 801dcc2:	d902      	bls.n	801dcca <__strftime+0x59a>
 801dcc4:	f88d 7020 	strb.w	r7, [sp, #32]
 801dcc8:	e7c2      	b.n	801dc50 <__strftime+0x520>
 801dcca:	ab08      	add	r3, sp, #32
 801dccc:	2125      	movs	r1, #37	; 0x25
 801dcce:	7019      	strb	r1, [r3, #0]
 801dcd0:	b94f      	cbnz	r7, 801dce6 <__strftime+0x5b6>
 801dcd2:	1c58      	adds	r0, r3, #1
 801dcd4:	497e      	ldr	r1, [pc, #504]	; (801ded0 <__strftime+0x7a0>)
 801dcd6:	9205      	str	r2, [sp, #20]
 801dcd8:	f001 fd84 	bl	801f7e4 <strcpy>
 801dcdc:	9a05      	ldr	r2, [sp, #20]
 801dcde:	9200      	str	r2, [sp, #0]
 801dce0:	4633      	mov	r3, r6
 801dce2:	aa08      	add	r2, sp, #32
 801dce4:	e059      	b.n	801dd9a <__strftime+0x66a>
 801dce6:	2130      	movs	r1, #48	; 0x30
 801dce8:	1c98      	adds	r0, r3, #2
 801dcea:	7059      	strb	r1, [r3, #1]
 801dcec:	e7f2      	b.n	801dcd4 <__strftime+0x5a4>
 801dcee:	4979      	ldr	r1, [pc, #484]	; (801ded4 <__strftime+0x7a4>)
 801dcf0:	4a79      	ldr	r2, [pc, #484]	; (801ded8 <__strftime+0x7a8>)
 801dcf2:	68ab      	ldr	r3, [r5, #8]
 801dcf4:	286b      	cmp	r0, #107	; 0x6b
 801dcf6:	bf08      	it	eq
 801dcf8:	460a      	moveq	r2, r1
 801dcfa:	e6d3      	b.n	801daa4 <__strftime+0x374>
 801dcfc:	68ab      	ldr	r3, [r5, #8]
 801dcfe:	b163      	cbz	r3, 801dd1a <__strftime+0x5ea>
 801dd00:	2b0c      	cmp	r3, #12
 801dd02:	d004      	beq.n	801dd0e <__strftime+0x5de>
 801dd04:	210c      	movs	r1, #12
 801dd06:	fb93 f2f1 	sdiv	r2, r3, r1
 801dd0a:	fb01 3312 	mls	r3, r1, r2, r3
 801dd0e:	4972      	ldr	r1, [pc, #456]	; (801ded8 <__strftime+0x7a8>)
 801dd10:	4a70      	ldr	r2, [pc, #448]	; (801ded4 <__strftime+0x7a4>)
 801dd12:	2849      	cmp	r0, #73	; 0x49
 801dd14:	bf08      	it	eq
 801dd16:	460a      	moveq	r2, r1
 801dd18:	e6c4      	b.n	801daa4 <__strftime+0x374>
 801dd1a:	230c      	movs	r3, #12
 801dd1c:	e7f7      	b.n	801dd0e <__strftime+0x5de>
 801dd1e:	69eb      	ldr	r3, [r5, #28]
 801dd20:	4a6e      	ldr	r2, [pc, #440]	; (801dedc <__strftime+0x7ac>)
 801dd22:	3301      	adds	r3, #1
 801dd24:	e6be      	b.n	801daa4 <__strftime+0x374>
 801dd26:	692b      	ldr	r3, [r5, #16]
 801dd28:	3301      	adds	r3, #1
 801dd2a:	e72a      	b.n	801db82 <__strftime+0x452>
 801dd2c:	686b      	ldr	r3, [r5, #4]
 801dd2e:	e728      	b.n	801db82 <__strftime+0x452>
 801dd30:	f108 33ff 	add.w	r3, r8, #4294967295
 801dd34:	42a3      	cmp	r3, r4
 801dd36:	f67f ad2a 	bls.w	801d78e <__strftime+0x5e>
 801dd3a:	230a      	movs	r3, #10
 801dd3c:	f809 3004 	strb.w	r3, [r9, r4]
 801dd40:	3401      	adds	r4, #1
 801dd42:	e5f7      	b.n	801d934 <__strftime+0x204>
 801dd44:	68ab      	ldr	r3, [r5, #8]
 801dd46:	2b0b      	cmp	r3, #11
 801dd48:	bfcc      	ite	gt
 801dd4a:	22a4      	movgt	r2, #164	; 0xa4
 801dd4c:	22a0      	movle	r2, #160	; 0xa0
 801dd4e:	4b64      	ldr	r3, [pc, #400]	; (801dee0 <__strftime+0x7b0>)
 801dd50:	4413      	add	r3, r2
 801dd52:	685e      	ldr	r6, [r3, #4]
 801dd54:	4630      	mov	r0, r6
 801dd56:	f7e2 fa71 	bl	800023c <strlen>
 801dd5a:	1e72      	subs	r2, r6, #1
 801dd5c:	4420      	add	r0, r4
 801dd5e:	f108 36ff 	add.w	r6, r8, #4294967295
 801dd62:	42a0      	cmp	r0, r4
 801dd64:	f43f ade6 	beq.w	801d934 <__strftime+0x204>
 801dd68:	42a6      	cmp	r6, r4
 801dd6a:	f67f ad10 	bls.w	801d78e <__strftime+0x5e>
 801dd6e:	f89b 1000 	ldrb.w	r1, [fp]
 801dd72:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dd76:	2950      	cmp	r1, #80	; 0x50
 801dd78:	d107      	bne.n	801dd8a <__strftime+0x65a>
 801dd7a:	495a      	ldr	r1, [pc, #360]	; (801dee4 <__strftime+0x7b4>)
 801dd7c:	5cc9      	ldrb	r1, [r1, r3]
 801dd7e:	f001 0103 	and.w	r1, r1, #3
 801dd82:	2901      	cmp	r1, #1
 801dd84:	bf08      	it	eq
 801dd86:	3320      	addeq	r3, #32
 801dd88:	b2db      	uxtb	r3, r3
 801dd8a:	f809 3004 	strb.w	r3, [r9, r4]
 801dd8e:	3401      	adds	r4, #1
 801dd90:	e7e7      	b.n	801dd62 <__strftime+0x632>
 801dd92:	686b      	ldr	r3, [r5, #4]
 801dd94:	9300      	str	r3, [sp, #0]
 801dd96:	4a54      	ldr	r2, [pc, #336]	; (801dee8 <__strftime+0x7b8>)
 801dd98:	68ab      	ldr	r3, [r5, #8]
 801dd9a:	eba8 0104 	sub.w	r1, r8, r4
 801dd9e:	eb09 0004 	add.w	r0, r9, r4
 801dda2:	f001 fcbf 	bl	801f724 <sniprintf>
 801dda6:	e683      	b.n	801dab0 <__strftime+0x380>
 801dda8:	6a2b      	ldr	r3, [r5, #32]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	db79      	blt.n	801dea2 <__strftime+0x772>
 801ddae:	f000 fb1b 	bl	801e3e8 <__tz_lock>
 801ddb2:	9b04      	ldr	r3, [sp, #16]
 801ddb4:	b90b      	cbnz	r3, 801ddba <__strftime+0x68a>
 801ddb6:	f000 fb23 	bl	801e400 <_tzset_unlocked>
 801ddba:	f000 fef1 	bl	801eba0 <__gettzinfo>
 801ddbe:	6a2b      	ldr	r3, [r5, #32]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	bfcc      	ite	gt
 801ddc4:	2350      	movgt	r3, #80	; 0x50
 801ddc6:	2328      	movle	r3, #40	; 0x28
 801ddc8:	58c3      	ldr	r3, [r0, r3]
 801ddca:	f1c3 0a00 	rsb	sl, r3, #0
 801ddce:	f000 fb11 	bl	801e3f4 <__tz_unlock>
 801ddd2:	2301      	movs	r3, #1
 801ddd4:	9304      	str	r3, [sp, #16]
 801ddd6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801ddda:	4662      	mov	r2, ip
 801dddc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801dde0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801dde4:	9602      	str	r6, [sp, #8]
 801dde6:	f143 36ff 	adc.w	r6, r3, #4294967295
 801ddea:	9603      	str	r6, [sp, #12]
 801ddec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ddf0:	2e00      	cmp	r6, #0
 801ddf2:	f177 0600 	sbcs.w	r6, r7, #0
 801ddf6:	eba8 0104 	sub.w	r1, r8, r4
 801ddfa:	eb09 0004 	add.w	r0, r9, r4
 801ddfe:	da05      	bge.n	801de0c <__strftime+0x6dc>
 801de00:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801de04:	f143 33ff 	adc.w	r3, r3, #4294967295
 801de08:	9602      	str	r6, [sp, #8]
 801de0a:	9303      	str	r3, [sp, #12]
 801de0c:	9b02      	ldr	r3, [sp, #8]
 801de0e:	089e      	lsrs	r6, r3, #2
 801de10:	9b03      	ldr	r3, [sp, #12]
 801de12:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801de16:	f10c 32ff 	add.w	r2, ip, #4294967295
 801de1a:	109f      	asrs	r7, r3, #2
 801de1c:	2364      	movs	r3, #100	; 0x64
 801de1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801de22:	1af6      	subs	r6, r6, r3
 801de24:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801de28:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801de2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801de30:	fb92 f3f3 	sdiv	r3, r2, r3
 801de34:	18f6      	adds	r6, r6, r3
 801de36:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801de3a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801de3e:	f240 136d 	movw	r3, #365	; 0x16d
 801de42:	fb03 fc0c 	mul.w	ip, r3, ip
 801de46:	69eb      	ldr	r3, [r5, #28]
 801de48:	eb16 060c 	adds.w	r6, r6, ip
 801de4c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801de50:	18f6      	adds	r6, r6, r3
 801de52:	f04f 0c18 	mov.w	ip, #24
 801de56:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801de5a:	fba6 230c 	umull	r2, r3, r6, ip
 801de5e:	68ae      	ldr	r6, [r5, #8]
 801de60:	fb0c 3307 	mla	r3, ip, r7, r3
 801de64:	1992      	adds	r2, r2, r6
 801de66:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801de6a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801de6e:	fba2 670c 	umull	r6, r7, r2, ip
 801de72:	fb0c 7703 	mla	r7, ip, r3, r7
 801de76:	686b      	ldr	r3, [r5, #4]
 801de78:	18f6      	adds	r6, r6, r3
 801de7a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801de7e:	fba6 230c 	umull	r2, r3, r6, ip
 801de82:	682e      	ldr	r6, [r5, #0]
 801de84:	fb0c 3307 	mla	r3, ip, r7, r3
 801de88:	1992      	adds	r2, r2, r6
 801de8a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801de8e:	ebb2 020a 	subs.w	r2, r2, sl
 801de92:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801de96:	e9cd 2300 	strd	r2, r3, [sp]
 801de9a:	4a14      	ldr	r2, [pc, #80]	; (801deec <__strftime+0x7bc>)
 801de9c:	f001 fc42 	bl	801f724 <sniprintf>
 801dea0:	e606      	b.n	801dab0 <__strftime+0x380>
 801dea2:	f04f 0a00 	mov.w	sl, #0
 801dea6:	e796      	b.n	801ddd6 <__strftime+0x6a6>
 801dea8:	682b      	ldr	r3, [r5, #0]
 801deaa:	e66a      	b.n	801db82 <__strftime+0x452>
 801deac:	f108 33ff 	add.w	r3, r8, #4294967295
 801deb0:	42a3      	cmp	r3, r4
 801deb2:	f67f ac6c 	bls.w	801d78e <__strftime+0x5e>
 801deb6:	2309      	movs	r3, #9
 801deb8:	e740      	b.n	801dd3c <__strftime+0x60c>
 801deba:	682b      	ldr	r3, [r5, #0]
 801debc:	9301      	str	r3, [sp, #4]
 801debe:	686b      	ldr	r3, [r5, #4]
 801dec0:	9300      	str	r3, [sp, #0]
 801dec2:	4a0b      	ldr	r2, [pc, #44]	; (801def0 <__strftime+0x7c0>)
 801dec4:	68ab      	ldr	r3, [r5, #8]
 801dec6:	e5e0      	b.n	801da8a <__strftime+0x35a>
 801dec8:	fffff894 	.word	0xfffff894
 801decc:	fffff895 	.word	0xfffff895
 801ded0:	08024cff 	.word	0x08024cff
 801ded4:	08024ce0 	.word	0x08024ce0
 801ded8:	08024cee 	.word	0x08024cee
 801dedc:	08024d03 	.word	0x08024d03
 801dee0:	08024e54 	.word	0x08024e54
 801dee4:	08024fc9 	.word	0x08024fc9
 801dee8:	08024d12 	.word	0x08024d12
 801deec:	08024d08 	.word	0x08024d08
 801def0:	08024d0d 	.word	0x08024d0d
 801def4:	f108 33ff 	add.w	r3, r8, #4294967295
 801def8:	42a3      	cmp	r3, r4
 801defa:	f67f ac48 	bls.w	801d78e <__strftime+0x5e>
 801defe:	69ab      	ldr	r3, [r5, #24]
 801df00:	eb09 0204 	add.w	r2, r9, r4
 801df04:	3401      	adds	r4, #1
 801df06:	b913      	cbnz	r3, 801df0e <__strftime+0x7de>
 801df08:	2337      	movs	r3, #55	; 0x37
 801df0a:	7013      	strb	r3, [r2, #0]
 801df0c:	e512      	b.n	801d934 <__strftime+0x204>
 801df0e:	3330      	adds	r3, #48	; 0x30
 801df10:	e7fb      	b.n	801df0a <__strftime+0x7da>
 801df12:	69eb      	ldr	r3, [r5, #28]
 801df14:	69aa      	ldr	r2, [r5, #24]
 801df16:	3307      	adds	r3, #7
 801df18:	1a9b      	subs	r3, r3, r2
 801df1a:	2207      	movs	r2, #7
 801df1c:	fb93 f3f2 	sdiv	r3, r3, r2
 801df20:	e62f      	b.n	801db82 <__strftime+0x452>
 801df22:	4628      	mov	r0, r5
 801df24:	f7ff fba2 	bl	801d66c <iso_year_adjust>
 801df28:	69aa      	ldr	r2, [r5, #24]
 801df2a:	b132      	cbz	r2, 801df3a <__strftime+0x80a>
 801df2c:	3a01      	subs	r2, #1
 801df2e:	2800      	cmp	r0, #0
 801df30:	dc28      	bgt.n	801df84 <__strftime+0x854>
 801df32:	69eb      	ldr	r3, [r5, #28]
 801df34:	d103      	bne.n	801df3e <__strftime+0x80e>
 801df36:	330a      	adds	r3, #10
 801df38:	e7ee      	b.n	801df18 <__strftime+0x7e8>
 801df3a:	2206      	movs	r2, #6
 801df3c:	e7f7      	b.n	801df2e <__strftime+0x7fe>
 801df3e:	6968      	ldr	r0, [r5, #20]
 801df40:	2800      	cmp	r0, #0
 801df42:	eba2 0303 	sub.w	r3, r2, r3
 801df46:	f240 726b 	movw	r2, #1899	; 0x76b
 801df4a:	bfa8      	it	ge
 801df4c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801df50:	4410      	add	r0, r2
 801df52:	0782      	lsls	r2, r0, #30
 801df54:	d105      	bne.n	801df62 <__strftime+0x832>
 801df56:	2264      	movs	r2, #100	; 0x64
 801df58:	fb90 f1f2 	sdiv	r1, r0, r2
 801df5c:	fb02 0111 	mls	r1, r2, r1, r0
 801df60:	b971      	cbnz	r1, 801df80 <__strftime+0x850>
 801df62:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801df66:	fb90 f2f1 	sdiv	r2, r0, r1
 801df6a:	fb01 0212 	mls	r2, r1, r2, r0
 801df6e:	fab2 f282 	clz	r2, r2
 801df72:	0952      	lsrs	r2, r2, #5
 801df74:	1a9a      	subs	r2, r3, r2
 801df76:	2a05      	cmp	r2, #5
 801df78:	bfb4      	ite	lt
 801df7a:	2335      	movlt	r3, #53	; 0x35
 801df7c:	2334      	movge	r3, #52	; 0x34
 801df7e:	e600      	b.n	801db82 <__strftime+0x452>
 801df80:	2201      	movs	r2, #1
 801df82:	e7f7      	b.n	801df74 <__strftime+0x844>
 801df84:	2301      	movs	r3, #1
 801df86:	e5fc      	b.n	801db82 <__strftime+0x452>
 801df88:	f108 33ff 	add.w	r3, r8, #4294967295
 801df8c:	42a3      	cmp	r3, r4
 801df8e:	f67f abfe 	bls.w	801d78e <__strftime+0x5e>
 801df92:	69ab      	ldr	r3, [r5, #24]
 801df94:	3330      	adds	r3, #48	; 0x30
 801df96:	e6d1      	b.n	801dd3c <__strftime+0x60c>
 801df98:	69ab      	ldr	r3, [r5, #24]
 801df9a:	b13b      	cbz	r3, 801dfac <__strftime+0x87c>
 801df9c:	3b01      	subs	r3, #1
 801df9e:	69ea      	ldr	r2, [r5, #28]
 801dfa0:	3207      	adds	r2, #7
 801dfa2:	1ad2      	subs	r2, r2, r3
 801dfa4:	2307      	movs	r3, #7
 801dfa6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfaa:	e5ea      	b.n	801db82 <__strftime+0x452>
 801dfac:	2306      	movs	r3, #6
 801dfae:	e7f6      	b.n	801df9e <__strftime+0x86e>
 801dfb0:	6968      	ldr	r0, [r5, #20]
 801dfb2:	2800      	cmp	r0, #0
 801dfb4:	db05      	blt.n	801dfc2 <__strftime+0x892>
 801dfb6:	2264      	movs	r2, #100	; 0x64
 801dfb8:	fb90 f3f2 	sdiv	r3, r0, r2
 801dfbc:	fb03 0312 	mls	r3, r3, r2, r0
 801dfc0:	e5df      	b.n	801db82 <__strftime+0x452>
 801dfc2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801dfc6:	f000 fd0b 	bl	801e9e0 <abs>
 801dfca:	e7f4      	b.n	801dfb6 <__strftime+0x886>
 801dfcc:	696b      	ldr	r3, [r5, #20]
 801dfce:	4a4c      	ldr	r2, [pc, #304]	; (801e100 <__strftime+0x9d0>)
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	da09      	bge.n	801dfe8 <__strftime+0x8b8>
 801dfd4:	212d      	movs	r1, #45	; 0x2d
 801dfd6:	f88d 1020 	strb.w	r1, [sp, #32]
 801dfda:	eba2 0a03 	sub.w	sl, r2, r3
 801dfde:	b106      	cbz	r6, 801dfe2 <__strftime+0x8b2>
 801dfe0:	3e01      	subs	r6, #1
 801dfe2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801dfe6:	e00b      	b.n	801e000 <__strftime+0x8d0>
 801dfe8:	2f2b      	cmp	r7, #43	; 0x2b
 801dfea:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801dfee:	d106      	bne.n	801dffe <__strftime+0x8ce>
 801dff0:	f242 730f 	movw	r3, #9999	; 0x270f
 801dff4:	459a      	cmp	sl, r3
 801dff6:	d902      	bls.n	801dffe <__strftime+0x8ce>
 801dff8:	f88d 7020 	strb.w	r7, [sp, #32]
 801dffc:	e7ef      	b.n	801dfde <__strftime+0x8ae>
 801dffe:	ab08      	add	r3, sp, #32
 801e000:	2225      	movs	r2, #37	; 0x25
 801e002:	701a      	strb	r2, [r3, #0]
 801e004:	b937      	cbnz	r7, 801e014 <__strftime+0x8e4>
 801e006:	1c58      	adds	r0, r3, #1
 801e008:	493e      	ldr	r1, [pc, #248]	; (801e104 <__strftime+0x9d4>)
 801e00a:	f001 fbeb 	bl	801f7e4 <strcpy>
 801e00e:	f8cd a000 	str.w	sl, [sp]
 801e012:	e665      	b.n	801dce0 <__strftime+0x5b0>
 801e014:	2230      	movs	r2, #48	; 0x30
 801e016:	1c98      	adds	r0, r3, #2
 801e018:	705a      	strb	r2, [r3, #1]
 801e01a:	e7f5      	b.n	801e008 <__strftime+0x8d8>
 801e01c:	6a2b      	ldr	r3, [r5, #32]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	f6ff ac88 	blt.w	801d934 <__strftime+0x204>
 801e024:	f000 f9e0 	bl	801e3e8 <__tz_lock>
 801e028:	9b04      	ldr	r3, [sp, #16]
 801e02a:	b90b      	cbnz	r3, 801e030 <__strftime+0x900>
 801e02c:	f000 f9e8 	bl	801e400 <_tzset_unlocked>
 801e030:	f000 fdb6 	bl	801eba0 <__gettzinfo>
 801e034:	6a2b      	ldr	r3, [r5, #32]
 801e036:	2b00      	cmp	r3, #0
 801e038:	bfcc      	ite	gt
 801e03a:	2350      	movgt	r3, #80	; 0x50
 801e03c:	2328      	movle	r3, #40	; 0x28
 801e03e:	eb09 0704 	add.w	r7, r9, r4
 801e042:	58c6      	ldr	r6, [r0, r3]
 801e044:	f000 f9d6 	bl	801e3f4 <__tz_unlock>
 801e048:	4276      	negs	r6, r6
 801e04a:	233c      	movs	r3, #60	; 0x3c
 801e04c:	fb96 f0f3 	sdiv	r0, r6, r3
 801e050:	f000 fe6a 	bl	801ed28 <labs>
 801e054:	233c      	movs	r3, #60	; 0x3c
 801e056:	eba8 0a04 	sub.w	sl, r8, r4
 801e05a:	fb90 f2f3 	sdiv	r2, r0, r3
 801e05e:	fb02 0013 	mls	r0, r2, r3, r0
 801e062:	9000      	str	r0, [sp, #0]
 801e064:	4a28      	ldr	r2, [pc, #160]	; (801e108 <__strftime+0x9d8>)
 801e066:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e06a:	4651      	mov	r1, sl
 801e06c:	4638      	mov	r0, r7
 801e06e:	fb96 f3f3 	sdiv	r3, r6, r3
 801e072:	f001 fb57 	bl	801f724 <sniprintf>
 801e076:	2800      	cmp	r0, #0
 801e078:	f6ff ab89 	blt.w	801d78e <__strftime+0x5e>
 801e07c:	4404      	add	r4, r0
 801e07e:	45a0      	cmp	r8, r4
 801e080:	f67f ab85 	bls.w	801d78e <__strftime+0x5e>
 801e084:	2301      	movs	r3, #1
 801e086:	9304      	str	r3, [sp, #16]
 801e088:	e454      	b.n	801d934 <__strftime+0x204>
 801e08a:	6a2b      	ldr	r3, [r5, #32]
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	f6ff ac51 	blt.w	801d934 <__strftime+0x204>
 801e092:	f000 f9a9 	bl	801e3e8 <__tz_lock>
 801e096:	9b04      	ldr	r3, [sp, #16]
 801e098:	b90b      	cbnz	r3, 801e09e <__strftime+0x96e>
 801e09a:	f000 f9b1 	bl	801e400 <_tzset_unlocked>
 801e09e:	6a2b      	ldr	r3, [r5, #32]
 801e0a0:	4a1a      	ldr	r2, [pc, #104]	; (801e10c <__strftime+0x9dc>)
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	bfd4      	ite	le
 801e0a6:	2300      	movle	r3, #0
 801e0a8:	2301      	movgt	r3, #1
 801e0aa:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e0ae:	4630      	mov	r0, r6
 801e0b0:	f7e2 f8c4 	bl	800023c <strlen>
 801e0b4:	3e01      	subs	r6, #1
 801e0b6:	4420      	add	r0, r4
 801e0b8:	f108 33ff 	add.w	r3, r8, #4294967295
 801e0bc:	42a0      	cmp	r0, r4
 801e0be:	d102      	bne.n	801e0c6 <__strftime+0x996>
 801e0c0:	f000 f998 	bl	801e3f4 <__tz_unlock>
 801e0c4:	e7de      	b.n	801e084 <__strftime+0x954>
 801e0c6:	42a3      	cmp	r3, r4
 801e0c8:	d905      	bls.n	801e0d6 <__strftime+0x9a6>
 801e0ca:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e0ce:	f809 2004 	strb.w	r2, [r9, r4]
 801e0d2:	3401      	adds	r4, #1
 801e0d4:	e7f2      	b.n	801e0bc <__strftime+0x98c>
 801e0d6:	f000 f98d 	bl	801e3f4 <__tz_unlock>
 801e0da:	f7ff bb58 	b.w	801d78e <__strftime+0x5e>
 801e0de:	f108 33ff 	add.w	r3, r8, #4294967295
 801e0e2:	42a3      	cmp	r3, r4
 801e0e4:	f67f ab53 	bls.w	801d78e <__strftime+0x5e>
 801e0e8:	2325      	movs	r3, #37	; 0x25
 801e0ea:	e627      	b.n	801dd3c <__strftime+0x60c>
 801e0ec:	f1b8 0f00 	cmp.w	r8, #0
 801e0f0:	d002      	beq.n	801e0f8 <__strftime+0x9c8>
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	f809 3004 	strb.w	r3, [r9, r4]
 801e0f8:	4620      	mov	r0, r4
 801e0fa:	b011      	add	sp, #68	; 0x44
 801e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e100:	fffff894 	.word	0xfffff894
 801e104:	08024cff 	.word	0x08024cff
 801e108:	08024d1c 	.word	0x08024d1c
 801e10c:	20000168 	.word	0x20000168

0801e110 <strftime>:
 801e110:	b513      	push	{r0, r1, r4, lr}
 801e112:	4c03      	ldr	r4, [pc, #12]	; (801e120 <strftime+0x10>)
 801e114:	9400      	str	r4, [sp, #0]
 801e116:	f7ff fb0b 	bl	801d730 <__strftime>
 801e11a:	b002      	add	sp, #8
 801e11c:	bd10      	pop	{r4, pc}
 801e11e:	bf00      	nop
 801e120:	200001d0 	.word	0x200001d0

0801e124 <strstr>:
 801e124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e126:	780c      	ldrb	r4, [r1, #0]
 801e128:	b164      	cbz	r4, 801e144 <strstr+0x20>
 801e12a:	4603      	mov	r3, r0
 801e12c:	781a      	ldrb	r2, [r3, #0]
 801e12e:	4618      	mov	r0, r3
 801e130:	1c5e      	adds	r6, r3, #1
 801e132:	b90a      	cbnz	r2, 801e138 <strstr+0x14>
 801e134:	4610      	mov	r0, r2
 801e136:	e005      	b.n	801e144 <strstr+0x20>
 801e138:	4294      	cmp	r4, r2
 801e13a:	d108      	bne.n	801e14e <strstr+0x2a>
 801e13c:	460d      	mov	r5, r1
 801e13e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801e142:	b902      	cbnz	r2, 801e146 <strstr+0x22>
 801e144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e146:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801e14a:	4297      	cmp	r7, r2
 801e14c:	d0f7      	beq.n	801e13e <strstr+0x1a>
 801e14e:	4633      	mov	r3, r6
 801e150:	e7ec      	b.n	801e12c <strstr+0x8>
	...

0801e154 <_strtoul_l.isra.0>:
 801e154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e158:	4e3b      	ldr	r6, [pc, #236]	; (801e248 <_strtoul_l.isra.0+0xf4>)
 801e15a:	4686      	mov	lr, r0
 801e15c:	468c      	mov	ip, r1
 801e15e:	4660      	mov	r0, ip
 801e160:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e164:	5da5      	ldrb	r5, [r4, r6]
 801e166:	f015 0508 	ands.w	r5, r5, #8
 801e16a:	d1f8      	bne.n	801e15e <_strtoul_l.isra.0+0xa>
 801e16c:	2c2d      	cmp	r4, #45	; 0x2d
 801e16e:	d134      	bne.n	801e1da <_strtoul_l.isra.0+0x86>
 801e170:	f89c 4000 	ldrb.w	r4, [ip]
 801e174:	f04f 0801 	mov.w	r8, #1
 801e178:	f100 0c02 	add.w	ip, r0, #2
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d05e      	beq.n	801e23e <_strtoul_l.isra.0+0xea>
 801e180:	2b10      	cmp	r3, #16
 801e182:	d10c      	bne.n	801e19e <_strtoul_l.isra.0+0x4a>
 801e184:	2c30      	cmp	r4, #48	; 0x30
 801e186:	d10a      	bne.n	801e19e <_strtoul_l.isra.0+0x4a>
 801e188:	f89c 0000 	ldrb.w	r0, [ip]
 801e18c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e190:	2858      	cmp	r0, #88	; 0x58
 801e192:	d14f      	bne.n	801e234 <_strtoul_l.isra.0+0xe0>
 801e194:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801e198:	2310      	movs	r3, #16
 801e19a:	f10c 0c02 	add.w	ip, ip, #2
 801e19e:	f04f 37ff 	mov.w	r7, #4294967295
 801e1a2:	2500      	movs	r5, #0
 801e1a4:	fbb7 f7f3 	udiv	r7, r7, r3
 801e1a8:	fb03 f907 	mul.w	r9, r3, r7
 801e1ac:	ea6f 0909 	mvn.w	r9, r9
 801e1b0:	4628      	mov	r0, r5
 801e1b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801e1b6:	2e09      	cmp	r6, #9
 801e1b8:	d818      	bhi.n	801e1ec <_strtoul_l.isra.0+0x98>
 801e1ba:	4634      	mov	r4, r6
 801e1bc:	42a3      	cmp	r3, r4
 801e1be:	dd24      	ble.n	801e20a <_strtoul_l.isra.0+0xb6>
 801e1c0:	2d00      	cmp	r5, #0
 801e1c2:	db1f      	blt.n	801e204 <_strtoul_l.isra.0+0xb0>
 801e1c4:	4287      	cmp	r7, r0
 801e1c6:	d31d      	bcc.n	801e204 <_strtoul_l.isra.0+0xb0>
 801e1c8:	d101      	bne.n	801e1ce <_strtoul_l.isra.0+0x7a>
 801e1ca:	45a1      	cmp	r9, r4
 801e1cc:	db1a      	blt.n	801e204 <_strtoul_l.isra.0+0xb0>
 801e1ce:	fb00 4003 	mla	r0, r0, r3, r4
 801e1d2:	2501      	movs	r5, #1
 801e1d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e1d8:	e7eb      	b.n	801e1b2 <_strtoul_l.isra.0+0x5e>
 801e1da:	2c2b      	cmp	r4, #43	; 0x2b
 801e1dc:	bf08      	it	eq
 801e1de:	f89c 4000 	ldrbeq.w	r4, [ip]
 801e1e2:	46a8      	mov	r8, r5
 801e1e4:	bf08      	it	eq
 801e1e6:	f100 0c02 	addeq.w	ip, r0, #2
 801e1ea:	e7c7      	b.n	801e17c <_strtoul_l.isra.0+0x28>
 801e1ec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801e1f0:	2e19      	cmp	r6, #25
 801e1f2:	d801      	bhi.n	801e1f8 <_strtoul_l.isra.0+0xa4>
 801e1f4:	3c37      	subs	r4, #55	; 0x37
 801e1f6:	e7e1      	b.n	801e1bc <_strtoul_l.isra.0+0x68>
 801e1f8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801e1fc:	2e19      	cmp	r6, #25
 801e1fe:	d804      	bhi.n	801e20a <_strtoul_l.isra.0+0xb6>
 801e200:	3c57      	subs	r4, #87	; 0x57
 801e202:	e7db      	b.n	801e1bc <_strtoul_l.isra.0+0x68>
 801e204:	f04f 35ff 	mov.w	r5, #4294967295
 801e208:	e7e4      	b.n	801e1d4 <_strtoul_l.isra.0+0x80>
 801e20a:	2d00      	cmp	r5, #0
 801e20c:	da07      	bge.n	801e21e <_strtoul_l.isra.0+0xca>
 801e20e:	2322      	movs	r3, #34	; 0x22
 801e210:	f8ce 3000 	str.w	r3, [lr]
 801e214:	f04f 30ff 	mov.w	r0, #4294967295
 801e218:	b942      	cbnz	r2, 801e22c <_strtoul_l.isra.0+0xd8>
 801e21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e21e:	f1b8 0f00 	cmp.w	r8, #0
 801e222:	d000      	beq.n	801e226 <_strtoul_l.isra.0+0xd2>
 801e224:	4240      	negs	r0, r0
 801e226:	2a00      	cmp	r2, #0
 801e228:	d0f7      	beq.n	801e21a <_strtoul_l.isra.0+0xc6>
 801e22a:	b10d      	cbz	r5, 801e230 <_strtoul_l.isra.0+0xdc>
 801e22c:	f10c 31ff 	add.w	r1, ip, #4294967295
 801e230:	6011      	str	r1, [r2, #0]
 801e232:	e7f2      	b.n	801e21a <_strtoul_l.isra.0+0xc6>
 801e234:	2430      	movs	r4, #48	; 0x30
 801e236:	2b00      	cmp	r3, #0
 801e238:	d1b1      	bne.n	801e19e <_strtoul_l.isra.0+0x4a>
 801e23a:	2308      	movs	r3, #8
 801e23c:	e7af      	b.n	801e19e <_strtoul_l.isra.0+0x4a>
 801e23e:	2c30      	cmp	r4, #48	; 0x30
 801e240:	d0a2      	beq.n	801e188 <_strtoul_l.isra.0+0x34>
 801e242:	230a      	movs	r3, #10
 801e244:	e7ab      	b.n	801e19e <_strtoul_l.isra.0+0x4a>
 801e246:	bf00      	nop
 801e248:	08024fc9 	.word	0x08024fc9

0801e24c <_strtoul_r>:
 801e24c:	f7ff bf82 	b.w	801e154 <_strtoul_l.isra.0>

0801e250 <strtoul>:
 801e250:	4613      	mov	r3, r2
 801e252:	460a      	mov	r2, r1
 801e254:	4601      	mov	r1, r0
 801e256:	4802      	ldr	r0, [pc, #8]	; (801e260 <strtoul+0x10>)
 801e258:	6800      	ldr	r0, [r0, #0]
 801e25a:	f7ff bf7b 	b.w	801e154 <_strtoul_l.isra.0>
 801e25e:	bf00      	nop
 801e260:	20000104 	.word	0x20000104

0801e264 <time>:
 801e264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e266:	4b0b      	ldr	r3, [pc, #44]	; (801e294 <time+0x30>)
 801e268:	2200      	movs	r2, #0
 801e26a:	4669      	mov	r1, sp
 801e26c:	4604      	mov	r4, r0
 801e26e:	6818      	ldr	r0, [r3, #0]
 801e270:	f000 fc84 	bl	801eb7c <_gettimeofday_r>
 801e274:	2800      	cmp	r0, #0
 801e276:	bfbe      	ittt	lt
 801e278:	f04f 32ff 	movlt.w	r2, #4294967295
 801e27c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e280:	e9cd 2300 	strdlt	r2, r3, [sp]
 801e284:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e288:	b10c      	cbz	r4, 801e28e <time+0x2a>
 801e28a:	e9c4 0100 	strd	r0, r1, [r4]
 801e28e:	b004      	add	sp, #16
 801e290:	bd10      	pop	{r4, pc}
 801e292:	bf00      	nop
 801e294:	20000104 	.word	0x20000104

0801e298 <__tzcalc_limits>:
 801e298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e29c:	4680      	mov	r8, r0
 801e29e:	f000 fc7f 	bl	801eba0 <__gettzinfo>
 801e2a2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801e2a6:	4598      	cmp	r8, r3
 801e2a8:	f340 8098 	ble.w	801e3dc <__tzcalc_limits+0x144>
 801e2ac:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801e2b0:	4443      	add	r3, r8
 801e2b2:	109b      	asrs	r3, r3, #2
 801e2b4:	f240 126d 	movw	r2, #365	; 0x16d
 801e2b8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801e2bc:	fb02 3505 	mla	r5, r2, r5, r3
 801e2c0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801e2c4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801e2c8:	fb93 f3f2 	sdiv	r3, r3, r2
 801e2cc:	441d      	add	r5, r3
 801e2ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e2d2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801e2d6:	fb98 f7f3 	sdiv	r7, r8, r3
 801e2da:	fb03 8717 	mls	r7, r3, r7, r8
 801e2de:	4442      	add	r2, r8
 801e2e0:	fab7 fc87 	clz	ip, r7
 801e2e4:	fbb2 f2f3 	udiv	r2, r2, r3
 801e2e8:	f008 0303 	and.w	r3, r8, #3
 801e2ec:	4415      	add	r5, r2
 801e2ee:	2264      	movs	r2, #100	; 0x64
 801e2f0:	f8c0 8004 	str.w	r8, [r0, #4]
 801e2f4:	fb98 f6f2 	sdiv	r6, r8, r2
 801e2f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e2fc:	fb02 8616 	mls	r6, r2, r6, r8
 801e300:	4604      	mov	r4, r0
 801e302:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801e306:	9300      	str	r3, [sp, #0]
 801e308:	f04f 0e07 	mov.w	lr, #7
 801e30c:	7a22      	ldrb	r2, [r4, #8]
 801e30e:	6963      	ldr	r3, [r4, #20]
 801e310:	2a4a      	cmp	r2, #74	; 0x4a
 801e312:	d128      	bne.n	801e366 <__tzcalc_limits+0xce>
 801e314:	9900      	ldr	r1, [sp, #0]
 801e316:	18ea      	adds	r2, r5, r3
 801e318:	b901      	cbnz	r1, 801e31c <__tzcalc_limits+0x84>
 801e31a:	b906      	cbnz	r6, 801e31e <__tzcalc_limits+0x86>
 801e31c:	bb0f      	cbnz	r7, 801e362 <__tzcalc_limits+0xca>
 801e31e:	2b3b      	cmp	r3, #59	; 0x3b
 801e320:	bfd4      	ite	le
 801e322:	2300      	movle	r3, #0
 801e324:	2301      	movgt	r3, #1
 801e326:	4413      	add	r3, r2
 801e328:	1e5a      	subs	r2, r3, #1
 801e32a:	69a3      	ldr	r3, [r4, #24]
 801e32c:	492c      	ldr	r1, [pc, #176]	; (801e3e0 <__tzcalc_limits+0x148>)
 801e32e:	fb01 3202 	mla	r2, r1, r2, r3
 801e332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e334:	4413      	add	r3, r2
 801e336:	461a      	mov	r2, r3
 801e338:	17db      	asrs	r3, r3, #31
 801e33a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801e33e:	3428      	adds	r4, #40	; 0x28
 801e340:	45a3      	cmp	fp, r4
 801e342:	d1e3      	bne.n	801e30c <__tzcalc_limits+0x74>
 801e344:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801e348:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801e34c:	4294      	cmp	r4, r2
 801e34e:	eb75 0303 	sbcs.w	r3, r5, r3
 801e352:	bfb4      	ite	lt
 801e354:	2301      	movlt	r3, #1
 801e356:	2300      	movge	r3, #0
 801e358:	6003      	str	r3, [r0, #0]
 801e35a:	2001      	movs	r0, #1
 801e35c:	b003      	add	sp, #12
 801e35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e362:	2300      	movs	r3, #0
 801e364:	e7df      	b.n	801e326 <__tzcalc_limits+0x8e>
 801e366:	2a44      	cmp	r2, #68	; 0x44
 801e368:	d101      	bne.n	801e36e <__tzcalc_limits+0xd6>
 801e36a:	18ea      	adds	r2, r5, r3
 801e36c:	e7dd      	b.n	801e32a <__tzcalc_limits+0x92>
 801e36e:	9a00      	ldr	r2, [sp, #0]
 801e370:	bb72      	cbnz	r2, 801e3d0 <__tzcalc_limits+0x138>
 801e372:	2e00      	cmp	r6, #0
 801e374:	bf0c      	ite	eq
 801e376:	46e0      	moveq	r8, ip
 801e378:	f04f 0801 	movne.w	r8, #1
 801e37c:	4919      	ldr	r1, [pc, #100]	; (801e3e4 <__tzcalc_limits+0x14c>)
 801e37e:	68e2      	ldr	r2, [r4, #12]
 801e380:	9201      	str	r2, [sp, #4]
 801e382:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801e386:	fb0a 1808 	mla	r8, sl, r8, r1
 801e38a:	462a      	mov	r2, r5
 801e38c:	f04f 0900 	mov.w	r9, #0
 801e390:	f1a8 0804 	sub.w	r8, r8, #4
 801e394:	9901      	ldr	r1, [sp, #4]
 801e396:	f109 0901 	add.w	r9, r9, #1
 801e39a:	4549      	cmp	r1, r9
 801e39c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801e3a0:	dc18      	bgt.n	801e3d4 <__tzcalc_limits+0x13c>
 801e3a2:	f102 0804 	add.w	r8, r2, #4
 801e3a6:	fb98 f9fe 	sdiv	r9, r8, lr
 801e3aa:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801e3ae:	eba8 0909 	sub.w	r9, r8, r9
 801e3b2:	ebb3 0909 	subs.w	r9, r3, r9
 801e3b6:	6923      	ldr	r3, [r4, #16]
 801e3b8:	f103 33ff 	add.w	r3, r3, #4294967295
 801e3bc:	bf48      	it	mi
 801e3be:	f109 0907 	addmi.w	r9, r9, #7
 801e3c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801e3c6:	444b      	add	r3, r9
 801e3c8:	4553      	cmp	r3, sl
 801e3ca:	da05      	bge.n	801e3d8 <__tzcalc_limits+0x140>
 801e3cc:	441a      	add	r2, r3
 801e3ce:	e7ac      	b.n	801e32a <__tzcalc_limits+0x92>
 801e3d0:	46e0      	mov	r8, ip
 801e3d2:	e7d3      	b.n	801e37c <__tzcalc_limits+0xe4>
 801e3d4:	4452      	add	r2, sl
 801e3d6:	e7dd      	b.n	801e394 <__tzcalc_limits+0xfc>
 801e3d8:	3b07      	subs	r3, #7
 801e3da:	e7f5      	b.n	801e3c8 <__tzcalc_limits+0x130>
 801e3dc:	2000      	movs	r0, #0
 801e3de:	e7bd      	b.n	801e35c <__tzcalc_limits+0xc4>
 801e3e0:	00015180 	.word	0x00015180
 801e3e4:	08024c10 	.word	0x08024c10

0801e3e8 <__tz_lock>:
 801e3e8:	4801      	ldr	r0, [pc, #4]	; (801e3f0 <__tz_lock+0x8>)
 801e3ea:	f7fe bebf 	b.w	801d16c <__retarget_lock_acquire>
 801e3ee:	bf00      	nop
 801e3f0:	20000d3b 	.word	0x20000d3b

0801e3f4 <__tz_unlock>:
 801e3f4:	4801      	ldr	r0, [pc, #4]	; (801e3fc <__tz_unlock+0x8>)
 801e3f6:	f7fe bebb 	b.w	801d170 <__retarget_lock_release>
 801e3fa:	bf00      	nop
 801e3fc:	20000d3b 	.word	0x20000d3b

0801e400 <_tzset_unlocked>:
 801e400:	4b01      	ldr	r3, [pc, #4]	; (801e408 <_tzset_unlocked+0x8>)
 801e402:	6818      	ldr	r0, [r3, #0]
 801e404:	f000 b802 	b.w	801e40c <_tzset_unlocked_r>
 801e408:	20000104 	.word	0x20000104

0801e40c <_tzset_unlocked_r>:
 801e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e410:	b08d      	sub	sp, #52	; 0x34
 801e412:	4607      	mov	r7, r0
 801e414:	f000 fbc4 	bl	801eba0 <__gettzinfo>
 801e418:	49ae      	ldr	r1, [pc, #696]	; (801e6d4 <_tzset_unlocked_r+0x2c8>)
 801e41a:	4eaf      	ldr	r6, [pc, #700]	; (801e6d8 <_tzset_unlocked_r+0x2cc>)
 801e41c:	4605      	mov	r5, r0
 801e41e:	4638      	mov	r0, r7
 801e420:	f000 fba4 	bl	801eb6c <_getenv_r>
 801e424:	4604      	mov	r4, r0
 801e426:	b970      	cbnz	r0, 801e446 <_tzset_unlocked_r+0x3a>
 801e428:	4bac      	ldr	r3, [pc, #688]	; (801e6dc <_tzset_unlocked_r+0x2d0>)
 801e42a:	4aad      	ldr	r2, [pc, #692]	; (801e6e0 <_tzset_unlocked_r+0x2d4>)
 801e42c:	6018      	str	r0, [r3, #0]
 801e42e:	4bad      	ldr	r3, [pc, #692]	; (801e6e4 <_tzset_unlocked_r+0x2d8>)
 801e430:	6018      	str	r0, [r3, #0]
 801e432:	4bad      	ldr	r3, [pc, #692]	; (801e6e8 <_tzset_unlocked_r+0x2dc>)
 801e434:	6830      	ldr	r0, [r6, #0]
 801e436:	e9c3 2200 	strd	r2, r2, [r3]
 801e43a:	f7fe ff07 	bl	801d24c <free>
 801e43e:	6034      	str	r4, [r6, #0]
 801e440:	b00d      	add	sp, #52	; 0x34
 801e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e446:	6831      	ldr	r1, [r6, #0]
 801e448:	2900      	cmp	r1, #0
 801e44a:	d15f      	bne.n	801e50c <_tzset_unlocked_r+0x100>
 801e44c:	6830      	ldr	r0, [r6, #0]
 801e44e:	f7fe fefd 	bl	801d24c <free>
 801e452:	4620      	mov	r0, r4
 801e454:	f7e1 fef2 	bl	800023c <strlen>
 801e458:	1c41      	adds	r1, r0, #1
 801e45a:	4638      	mov	r0, r7
 801e45c:	f7fe ff74 	bl	801d348 <_malloc_r>
 801e460:	6030      	str	r0, [r6, #0]
 801e462:	2800      	cmp	r0, #0
 801e464:	d157      	bne.n	801e516 <_tzset_unlocked_r+0x10a>
 801e466:	7823      	ldrb	r3, [r4, #0]
 801e468:	4aa0      	ldr	r2, [pc, #640]	; (801e6ec <_tzset_unlocked_r+0x2e0>)
 801e46a:	49a1      	ldr	r1, [pc, #644]	; (801e6f0 <_tzset_unlocked_r+0x2e4>)
 801e46c:	2b3a      	cmp	r3, #58	; 0x3a
 801e46e:	bf08      	it	eq
 801e470:	3401      	addeq	r4, #1
 801e472:	ae0a      	add	r6, sp, #40	; 0x28
 801e474:	4633      	mov	r3, r6
 801e476:	4620      	mov	r0, r4
 801e478:	f001 f988 	bl	801f78c <siscanf>
 801e47c:	2800      	cmp	r0, #0
 801e47e:	dddf      	ble.n	801e440 <_tzset_unlocked_r+0x34>
 801e480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e482:	18e7      	adds	r7, r4, r3
 801e484:	5ce3      	ldrb	r3, [r4, r3]
 801e486:	2b2d      	cmp	r3, #45	; 0x2d
 801e488:	d149      	bne.n	801e51e <_tzset_unlocked_r+0x112>
 801e48a:	3701      	adds	r7, #1
 801e48c:	f04f 34ff 	mov.w	r4, #4294967295
 801e490:	f10d 0a20 	add.w	sl, sp, #32
 801e494:	f10d 0b1e 	add.w	fp, sp, #30
 801e498:	f04f 0800 	mov.w	r8, #0
 801e49c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801e4a0:	4994      	ldr	r1, [pc, #592]	; (801e6f4 <_tzset_unlocked_r+0x2e8>)
 801e4a2:	9603      	str	r6, [sp, #12]
 801e4a4:	f8cd b000 	str.w	fp, [sp]
 801e4a8:	4633      	mov	r3, r6
 801e4aa:	aa07      	add	r2, sp, #28
 801e4ac:	4638      	mov	r0, r7
 801e4ae:	f8ad 801e 	strh.w	r8, [sp, #30]
 801e4b2:	f8ad 8020 	strh.w	r8, [sp, #32]
 801e4b6:	f001 f969 	bl	801f78c <siscanf>
 801e4ba:	4540      	cmp	r0, r8
 801e4bc:	ddc0      	ble.n	801e440 <_tzset_unlocked_r+0x34>
 801e4be:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e4c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e4c6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801e700 <_tzset_unlocked_r+0x2f4>
 801e4ca:	213c      	movs	r1, #60	; 0x3c
 801e4cc:	fb01 2203 	mla	r2, r1, r3, r2
 801e4d0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e4d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e4d8:	fb01 2303 	mla	r3, r1, r3, r2
 801e4dc:	435c      	muls	r4, r3
 801e4de:	62ac      	str	r4, [r5, #40]	; 0x28
 801e4e0:	4c81      	ldr	r4, [pc, #516]	; (801e6e8 <_tzset_unlocked_r+0x2dc>)
 801e4e2:	4b82      	ldr	r3, [pc, #520]	; (801e6ec <_tzset_unlocked_r+0x2e0>)
 801e4e4:	6023      	str	r3, [r4, #0]
 801e4e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4e8:	4981      	ldr	r1, [pc, #516]	; (801e6f0 <_tzset_unlocked_r+0x2e4>)
 801e4ea:	441f      	add	r7, r3
 801e4ec:	464a      	mov	r2, r9
 801e4ee:	4633      	mov	r3, r6
 801e4f0:	4638      	mov	r0, r7
 801e4f2:	f001 f94b 	bl	801f78c <siscanf>
 801e4f6:	4540      	cmp	r0, r8
 801e4f8:	dc16      	bgt.n	801e528 <_tzset_unlocked_r+0x11c>
 801e4fa:	6823      	ldr	r3, [r4, #0]
 801e4fc:	6063      	str	r3, [r4, #4]
 801e4fe:	4b77      	ldr	r3, [pc, #476]	; (801e6dc <_tzset_unlocked_r+0x2d0>)
 801e500:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e502:	601a      	str	r2, [r3, #0]
 801e504:	4b77      	ldr	r3, [pc, #476]	; (801e6e4 <_tzset_unlocked_r+0x2d8>)
 801e506:	f8c3 8000 	str.w	r8, [r3]
 801e50a:	e799      	b.n	801e440 <_tzset_unlocked_r+0x34>
 801e50c:	f7e1 fe9e 	bl	800024c <strcmp>
 801e510:	2800      	cmp	r0, #0
 801e512:	d19b      	bne.n	801e44c <_tzset_unlocked_r+0x40>
 801e514:	e794      	b.n	801e440 <_tzset_unlocked_r+0x34>
 801e516:	4621      	mov	r1, r4
 801e518:	f001 f964 	bl	801f7e4 <strcpy>
 801e51c:	e7a3      	b.n	801e466 <_tzset_unlocked_r+0x5a>
 801e51e:	2b2b      	cmp	r3, #43	; 0x2b
 801e520:	bf08      	it	eq
 801e522:	3701      	addeq	r7, #1
 801e524:	2401      	movs	r4, #1
 801e526:	e7b3      	b.n	801e490 <_tzset_unlocked_r+0x84>
 801e528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e52a:	f8c4 9004 	str.w	r9, [r4, #4]
 801e52e:	18fc      	adds	r4, r7, r3
 801e530:	5cfb      	ldrb	r3, [r7, r3]
 801e532:	2b2d      	cmp	r3, #45	; 0x2d
 801e534:	f040 808b 	bne.w	801e64e <_tzset_unlocked_r+0x242>
 801e538:	3401      	adds	r4, #1
 801e53a:	f04f 37ff 	mov.w	r7, #4294967295
 801e53e:	2300      	movs	r3, #0
 801e540:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e544:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e548:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e54c:	930a      	str	r3, [sp, #40]	; 0x28
 801e54e:	e9cd a602 	strd	sl, r6, [sp, #8]
 801e552:	e9cd b600 	strd	fp, r6, [sp]
 801e556:	4967      	ldr	r1, [pc, #412]	; (801e6f4 <_tzset_unlocked_r+0x2e8>)
 801e558:	4633      	mov	r3, r6
 801e55a:	aa07      	add	r2, sp, #28
 801e55c:	4620      	mov	r0, r4
 801e55e:	f001 f915 	bl	801f78c <siscanf>
 801e562:	2800      	cmp	r0, #0
 801e564:	dc78      	bgt.n	801e658 <_tzset_unlocked_r+0x24c>
 801e566:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801e568:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801e56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e56e:	652f      	str	r7, [r5, #80]	; 0x50
 801e570:	441c      	add	r4, r3
 801e572:	462f      	mov	r7, r5
 801e574:	f04f 0900 	mov.w	r9, #0
 801e578:	7823      	ldrb	r3, [r4, #0]
 801e57a:	2b2c      	cmp	r3, #44	; 0x2c
 801e57c:	bf08      	it	eq
 801e57e:	3401      	addeq	r4, #1
 801e580:	f894 8000 	ldrb.w	r8, [r4]
 801e584:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801e588:	d178      	bne.n	801e67c <_tzset_unlocked_r+0x270>
 801e58a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801e58e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801e592:	ab09      	add	r3, sp, #36	; 0x24
 801e594:	9300      	str	r3, [sp, #0]
 801e596:	4958      	ldr	r1, [pc, #352]	; (801e6f8 <_tzset_unlocked_r+0x2ec>)
 801e598:	9603      	str	r6, [sp, #12]
 801e59a:	4633      	mov	r3, r6
 801e59c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801e5a0:	4620      	mov	r0, r4
 801e5a2:	f001 f8f3 	bl	801f78c <siscanf>
 801e5a6:	2803      	cmp	r0, #3
 801e5a8:	f47f af4a 	bne.w	801e440 <_tzset_unlocked_r+0x34>
 801e5ac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801e5b0:	1e4b      	subs	r3, r1, #1
 801e5b2:	2b0b      	cmp	r3, #11
 801e5b4:	f63f af44 	bhi.w	801e440 <_tzset_unlocked_r+0x34>
 801e5b8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801e5bc:	1e53      	subs	r3, r2, #1
 801e5be:	2b04      	cmp	r3, #4
 801e5c0:	f63f af3e 	bhi.w	801e440 <_tzset_unlocked_r+0x34>
 801e5c4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801e5c8:	2b06      	cmp	r3, #6
 801e5ca:	f63f af39 	bhi.w	801e440 <_tzset_unlocked_r+0x34>
 801e5ce:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801e5d2:	f887 8008 	strb.w	r8, [r7, #8]
 801e5d6:	617b      	str	r3, [r7, #20]
 801e5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5da:	eb04 0803 	add.w	r8, r4, r3
 801e5de:	2302      	movs	r3, #2
 801e5e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801e5ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e5ee:	930a      	str	r3, [sp, #40]	; 0x28
 801e5f0:	f898 3000 	ldrb.w	r3, [r8]
 801e5f4:	2b2f      	cmp	r3, #47	; 0x2f
 801e5f6:	d109      	bne.n	801e60c <_tzset_unlocked_r+0x200>
 801e5f8:	e9cd a602 	strd	sl, r6, [sp, #8]
 801e5fc:	e9cd b600 	strd	fp, r6, [sp]
 801e600:	493e      	ldr	r1, [pc, #248]	; (801e6fc <_tzset_unlocked_r+0x2f0>)
 801e602:	4633      	mov	r3, r6
 801e604:	aa07      	add	r2, sp, #28
 801e606:	4640      	mov	r0, r8
 801e608:	f001 f8c0 	bl	801f78c <siscanf>
 801e60c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e610:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e614:	213c      	movs	r1, #60	; 0x3c
 801e616:	fb01 2203 	mla	r2, r1, r3, r2
 801e61a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e61e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e622:	fb01 2303 	mla	r3, r1, r3, r2
 801e626:	61bb      	str	r3, [r7, #24]
 801e628:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e62a:	3728      	adds	r7, #40	; 0x28
 801e62c:	4444      	add	r4, r8
 801e62e:	f1b9 0f00 	cmp.w	r9, #0
 801e632:	d020      	beq.n	801e676 <_tzset_unlocked_r+0x26a>
 801e634:	6868      	ldr	r0, [r5, #4]
 801e636:	f7ff fe2f 	bl	801e298 <__tzcalc_limits>
 801e63a:	4b28      	ldr	r3, [pc, #160]	; (801e6dc <_tzset_unlocked_r+0x2d0>)
 801e63c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e63e:	601a      	str	r2, [r3, #0]
 801e640:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e642:	1a9b      	subs	r3, r3, r2
 801e644:	4a27      	ldr	r2, [pc, #156]	; (801e6e4 <_tzset_unlocked_r+0x2d8>)
 801e646:	bf18      	it	ne
 801e648:	2301      	movne	r3, #1
 801e64a:	6013      	str	r3, [r2, #0]
 801e64c:	e6f8      	b.n	801e440 <_tzset_unlocked_r+0x34>
 801e64e:	2b2b      	cmp	r3, #43	; 0x2b
 801e650:	bf08      	it	eq
 801e652:	3401      	addeq	r4, #1
 801e654:	2701      	movs	r7, #1
 801e656:	e772      	b.n	801e53e <_tzset_unlocked_r+0x132>
 801e658:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801e65c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e660:	213c      	movs	r1, #60	; 0x3c
 801e662:	fb01 2203 	mla	r2, r1, r3, r2
 801e666:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801e66a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801e66e:	fb01 2303 	mla	r3, r1, r3, r2
 801e672:	435f      	muls	r7, r3
 801e674:	e77a      	b.n	801e56c <_tzset_unlocked_r+0x160>
 801e676:	f04f 0901 	mov.w	r9, #1
 801e67a:	e77d      	b.n	801e578 <_tzset_unlocked_r+0x16c>
 801e67c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801e680:	bf06      	itte	eq
 801e682:	3401      	addeq	r4, #1
 801e684:	4643      	moveq	r3, r8
 801e686:	2344      	movne	r3, #68	; 0x44
 801e688:	220a      	movs	r2, #10
 801e68a:	a90b      	add	r1, sp, #44	; 0x2c
 801e68c:	4620      	mov	r0, r4
 801e68e:	9305      	str	r3, [sp, #20]
 801e690:	f7ff fdde 	bl	801e250 <strtoul>
 801e694:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801e698:	9b05      	ldr	r3, [sp, #20]
 801e69a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801e69e:	45a0      	cmp	r8, r4
 801e6a0:	d114      	bne.n	801e6cc <_tzset_unlocked_r+0x2c0>
 801e6a2:	234d      	movs	r3, #77	; 0x4d
 801e6a4:	f1b9 0f00 	cmp.w	r9, #0
 801e6a8:	d107      	bne.n	801e6ba <_tzset_unlocked_r+0x2ae>
 801e6aa:	722b      	strb	r3, [r5, #8]
 801e6ac:	2103      	movs	r1, #3
 801e6ae:	2302      	movs	r3, #2
 801e6b0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801e6b4:	f8c5 9014 	str.w	r9, [r5, #20]
 801e6b8:	e791      	b.n	801e5de <_tzset_unlocked_r+0x1d2>
 801e6ba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801e6be:	220b      	movs	r2, #11
 801e6c0:	2301      	movs	r3, #1
 801e6c2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e6ca:	e788      	b.n	801e5de <_tzset_unlocked_r+0x1d2>
 801e6cc:	b280      	uxth	r0, r0
 801e6ce:	723b      	strb	r3, [r7, #8]
 801e6d0:	6178      	str	r0, [r7, #20]
 801e6d2:	e784      	b.n	801e5de <_tzset_unlocked_r+0x1d2>
 801e6d4:	08024f50 	.word	0x08024f50
 801e6d8:	20000c94 	.word	0x20000c94
 801e6dc:	20000c9c 	.word	0x20000c9c
 801e6e0:	08024f53 	.word	0x08024f53
 801e6e4:	20000c98 	.word	0x20000c98
 801e6e8:	20000168 	.word	0x20000168
 801e6ec:	20000c87 	.word	0x20000c87
 801e6f0:	08024f57 	.word	0x08024f57
 801e6f4:	08024f7a 	.word	0x08024f7a
 801e6f8:	08024f66 	.word	0x08024f66
 801e6fc:	08024f79 	.word	0x08024f79
 801e700:	20000c7c 	.word	0x20000c7c

0801e704 <_vsniprintf_r>:
 801e704:	b530      	push	{r4, r5, lr}
 801e706:	1e14      	subs	r4, r2, #0
 801e708:	4605      	mov	r5, r0
 801e70a:	b09b      	sub	sp, #108	; 0x6c
 801e70c:	4618      	mov	r0, r3
 801e70e:	da05      	bge.n	801e71c <_vsniprintf_r+0x18>
 801e710:	238b      	movs	r3, #139	; 0x8b
 801e712:	602b      	str	r3, [r5, #0]
 801e714:	f04f 30ff 	mov.w	r0, #4294967295
 801e718:	b01b      	add	sp, #108	; 0x6c
 801e71a:	bd30      	pop	{r4, r5, pc}
 801e71c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e720:	f8ad 300c 	strh.w	r3, [sp, #12]
 801e724:	bf14      	ite	ne
 801e726:	f104 33ff 	addne.w	r3, r4, #4294967295
 801e72a:	4623      	moveq	r3, r4
 801e72c:	9302      	str	r3, [sp, #8]
 801e72e:	9305      	str	r3, [sp, #20]
 801e730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e734:	9100      	str	r1, [sp, #0]
 801e736:	9104      	str	r1, [sp, #16]
 801e738:	f8ad 300e 	strh.w	r3, [sp, #14]
 801e73c:	4602      	mov	r2, r0
 801e73e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e740:	4669      	mov	r1, sp
 801e742:	4628      	mov	r0, r5
 801e744:	f000 fba6 	bl	801ee94 <_svfiprintf_r>
 801e748:	1c43      	adds	r3, r0, #1
 801e74a:	bfbc      	itt	lt
 801e74c:	238b      	movlt	r3, #139	; 0x8b
 801e74e:	602b      	strlt	r3, [r5, #0]
 801e750:	2c00      	cmp	r4, #0
 801e752:	d0e1      	beq.n	801e718 <_vsniprintf_r+0x14>
 801e754:	9b00      	ldr	r3, [sp, #0]
 801e756:	2200      	movs	r2, #0
 801e758:	701a      	strb	r2, [r3, #0]
 801e75a:	e7dd      	b.n	801e718 <_vsniprintf_r+0x14>

0801e75c <vsniprintf>:
 801e75c:	b507      	push	{r0, r1, r2, lr}
 801e75e:	9300      	str	r3, [sp, #0]
 801e760:	4613      	mov	r3, r2
 801e762:	460a      	mov	r2, r1
 801e764:	4601      	mov	r1, r0
 801e766:	4803      	ldr	r0, [pc, #12]	; (801e774 <vsniprintf+0x18>)
 801e768:	6800      	ldr	r0, [r0, #0]
 801e76a:	f7ff ffcb 	bl	801e704 <_vsniprintf_r>
 801e76e:	b003      	add	sp, #12
 801e770:	f85d fb04 	ldr.w	pc, [sp], #4
 801e774:	20000104 	.word	0x20000104

0801e778 <__swbuf_r>:
 801e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e77a:	460e      	mov	r6, r1
 801e77c:	4614      	mov	r4, r2
 801e77e:	4605      	mov	r5, r0
 801e780:	b118      	cbz	r0, 801e78a <__swbuf_r+0x12>
 801e782:	6983      	ldr	r3, [r0, #24]
 801e784:	b90b      	cbnz	r3, 801e78a <__swbuf_r+0x12>
 801e786:	f7fe f93f 	bl	801ca08 <__sinit>
 801e78a:	4b21      	ldr	r3, [pc, #132]	; (801e810 <__swbuf_r+0x98>)
 801e78c:	429c      	cmp	r4, r3
 801e78e:	d12b      	bne.n	801e7e8 <__swbuf_r+0x70>
 801e790:	686c      	ldr	r4, [r5, #4]
 801e792:	69a3      	ldr	r3, [r4, #24]
 801e794:	60a3      	str	r3, [r4, #8]
 801e796:	89a3      	ldrh	r3, [r4, #12]
 801e798:	071a      	lsls	r2, r3, #28
 801e79a:	d52f      	bpl.n	801e7fc <__swbuf_r+0x84>
 801e79c:	6923      	ldr	r3, [r4, #16]
 801e79e:	b36b      	cbz	r3, 801e7fc <__swbuf_r+0x84>
 801e7a0:	6923      	ldr	r3, [r4, #16]
 801e7a2:	6820      	ldr	r0, [r4, #0]
 801e7a4:	1ac0      	subs	r0, r0, r3
 801e7a6:	6963      	ldr	r3, [r4, #20]
 801e7a8:	b2f6      	uxtb	r6, r6
 801e7aa:	4283      	cmp	r3, r0
 801e7ac:	4637      	mov	r7, r6
 801e7ae:	dc04      	bgt.n	801e7ba <__swbuf_r+0x42>
 801e7b0:	4621      	mov	r1, r4
 801e7b2:	4628      	mov	r0, r5
 801e7b4:	f7fe f882 	bl	801c8bc <_fflush_r>
 801e7b8:	bb30      	cbnz	r0, 801e808 <__swbuf_r+0x90>
 801e7ba:	68a3      	ldr	r3, [r4, #8]
 801e7bc:	3b01      	subs	r3, #1
 801e7be:	60a3      	str	r3, [r4, #8]
 801e7c0:	6823      	ldr	r3, [r4, #0]
 801e7c2:	1c5a      	adds	r2, r3, #1
 801e7c4:	6022      	str	r2, [r4, #0]
 801e7c6:	701e      	strb	r6, [r3, #0]
 801e7c8:	6963      	ldr	r3, [r4, #20]
 801e7ca:	3001      	adds	r0, #1
 801e7cc:	4283      	cmp	r3, r0
 801e7ce:	d004      	beq.n	801e7da <__swbuf_r+0x62>
 801e7d0:	89a3      	ldrh	r3, [r4, #12]
 801e7d2:	07db      	lsls	r3, r3, #31
 801e7d4:	d506      	bpl.n	801e7e4 <__swbuf_r+0x6c>
 801e7d6:	2e0a      	cmp	r6, #10
 801e7d8:	d104      	bne.n	801e7e4 <__swbuf_r+0x6c>
 801e7da:	4621      	mov	r1, r4
 801e7dc:	4628      	mov	r0, r5
 801e7de:	f7fe f86d 	bl	801c8bc <_fflush_r>
 801e7e2:	b988      	cbnz	r0, 801e808 <__swbuf_r+0x90>
 801e7e4:	4638      	mov	r0, r7
 801e7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7e8:	4b0a      	ldr	r3, [pc, #40]	; (801e814 <__swbuf_r+0x9c>)
 801e7ea:	429c      	cmp	r4, r3
 801e7ec:	d101      	bne.n	801e7f2 <__swbuf_r+0x7a>
 801e7ee:	68ac      	ldr	r4, [r5, #8]
 801e7f0:	e7cf      	b.n	801e792 <__swbuf_r+0x1a>
 801e7f2:	4b09      	ldr	r3, [pc, #36]	; (801e818 <__swbuf_r+0xa0>)
 801e7f4:	429c      	cmp	r4, r3
 801e7f6:	bf08      	it	eq
 801e7f8:	68ec      	ldreq	r4, [r5, #12]
 801e7fa:	e7ca      	b.n	801e792 <__swbuf_r+0x1a>
 801e7fc:	4621      	mov	r1, r4
 801e7fe:	4628      	mov	r0, r5
 801e800:	f000 f81e 	bl	801e840 <__swsetup_r>
 801e804:	2800      	cmp	r0, #0
 801e806:	d0cb      	beq.n	801e7a0 <__swbuf_r+0x28>
 801e808:	f04f 37ff 	mov.w	r7, #4294967295
 801e80c:	e7ea      	b.n	801e7e4 <__swbuf_r+0x6c>
 801e80e:	bf00      	nop
 801e810:	08024b54 	.word	0x08024b54
 801e814:	08024b74 	.word	0x08024b74
 801e818:	08024b34 	.word	0x08024b34

0801e81c <_write_r>:
 801e81c:	b538      	push	{r3, r4, r5, lr}
 801e81e:	4d07      	ldr	r5, [pc, #28]	; (801e83c <_write_r+0x20>)
 801e820:	4604      	mov	r4, r0
 801e822:	4608      	mov	r0, r1
 801e824:	4611      	mov	r1, r2
 801e826:	2200      	movs	r2, #0
 801e828:	602a      	str	r2, [r5, #0]
 801e82a:	461a      	mov	r2, r3
 801e82c:	f7e2 fad0 	bl	8000dd0 <_write>
 801e830:	1c43      	adds	r3, r0, #1
 801e832:	d102      	bne.n	801e83a <_write_r+0x1e>
 801e834:	682b      	ldr	r3, [r5, #0]
 801e836:	b103      	cbz	r3, 801e83a <_write_r+0x1e>
 801e838:	6023      	str	r3, [r4, #0]
 801e83a:	bd38      	pop	{r3, r4, r5, pc}
 801e83c:	20000d40 	.word	0x20000d40

0801e840 <__swsetup_r>:
 801e840:	4b32      	ldr	r3, [pc, #200]	; (801e90c <__swsetup_r+0xcc>)
 801e842:	b570      	push	{r4, r5, r6, lr}
 801e844:	681d      	ldr	r5, [r3, #0]
 801e846:	4606      	mov	r6, r0
 801e848:	460c      	mov	r4, r1
 801e84a:	b125      	cbz	r5, 801e856 <__swsetup_r+0x16>
 801e84c:	69ab      	ldr	r3, [r5, #24]
 801e84e:	b913      	cbnz	r3, 801e856 <__swsetup_r+0x16>
 801e850:	4628      	mov	r0, r5
 801e852:	f7fe f8d9 	bl	801ca08 <__sinit>
 801e856:	4b2e      	ldr	r3, [pc, #184]	; (801e910 <__swsetup_r+0xd0>)
 801e858:	429c      	cmp	r4, r3
 801e85a:	d10f      	bne.n	801e87c <__swsetup_r+0x3c>
 801e85c:	686c      	ldr	r4, [r5, #4]
 801e85e:	89a3      	ldrh	r3, [r4, #12]
 801e860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e864:	0719      	lsls	r1, r3, #28
 801e866:	d42c      	bmi.n	801e8c2 <__swsetup_r+0x82>
 801e868:	06dd      	lsls	r5, r3, #27
 801e86a:	d411      	bmi.n	801e890 <__swsetup_r+0x50>
 801e86c:	2309      	movs	r3, #9
 801e86e:	6033      	str	r3, [r6, #0]
 801e870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e874:	81a3      	strh	r3, [r4, #12]
 801e876:	f04f 30ff 	mov.w	r0, #4294967295
 801e87a:	e03e      	b.n	801e8fa <__swsetup_r+0xba>
 801e87c:	4b25      	ldr	r3, [pc, #148]	; (801e914 <__swsetup_r+0xd4>)
 801e87e:	429c      	cmp	r4, r3
 801e880:	d101      	bne.n	801e886 <__swsetup_r+0x46>
 801e882:	68ac      	ldr	r4, [r5, #8]
 801e884:	e7eb      	b.n	801e85e <__swsetup_r+0x1e>
 801e886:	4b24      	ldr	r3, [pc, #144]	; (801e918 <__swsetup_r+0xd8>)
 801e888:	429c      	cmp	r4, r3
 801e88a:	bf08      	it	eq
 801e88c:	68ec      	ldreq	r4, [r5, #12]
 801e88e:	e7e6      	b.n	801e85e <__swsetup_r+0x1e>
 801e890:	0758      	lsls	r0, r3, #29
 801e892:	d512      	bpl.n	801e8ba <__swsetup_r+0x7a>
 801e894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e896:	b141      	cbz	r1, 801e8aa <__swsetup_r+0x6a>
 801e898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e89c:	4299      	cmp	r1, r3
 801e89e:	d002      	beq.n	801e8a6 <__swsetup_r+0x66>
 801e8a0:	4630      	mov	r0, r6
 801e8a2:	f7fe fd01 	bl	801d2a8 <_free_r>
 801e8a6:	2300      	movs	r3, #0
 801e8a8:	6363      	str	r3, [r4, #52]	; 0x34
 801e8aa:	89a3      	ldrh	r3, [r4, #12]
 801e8ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e8b0:	81a3      	strh	r3, [r4, #12]
 801e8b2:	2300      	movs	r3, #0
 801e8b4:	6063      	str	r3, [r4, #4]
 801e8b6:	6923      	ldr	r3, [r4, #16]
 801e8b8:	6023      	str	r3, [r4, #0]
 801e8ba:	89a3      	ldrh	r3, [r4, #12]
 801e8bc:	f043 0308 	orr.w	r3, r3, #8
 801e8c0:	81a3      	strh	r3, [r4, #12]
 801e8c2:	6923      	ldr	r3, [r4, #16]
 801e8c4:	b94b      	cbnz	r3, 801e8da <__swsetup_r+0x9a>
 801e8c6:	89a3      	ldrh	r3, [r4, #12]
 801e8c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e8cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e8d0:	d003      	beq.n	801e8da <__swsetup_r+0x9a>
 801e8d2:	4621      	mov	r1, r4
 801e8d4:	4630      	mov	r0, r6
 801e8d6:	f7fe fc71 	bl	801d1bc <__smakebuf_r>
 801e8da:	89a0      	ldrh	r0, [r4, #12]
 801e8dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8e0:	f010 0301 	ands.w	r3, r0, #1
 801e8e4:	d00a      	beq.n	801e8fc <__swsetup_r+0xbc>
 801e8e6:	2300      	movs	r3, #0
 801e8e8:	60a3      	str	r3, [r4, #8]
 801e8ea:	6963      	ldr	r3, [r4, #20]
 801e8ec:	425b      	negs	r3, r3
 801e8ee:	61a3      	str	r3, [r4, #24]
 801e8f0:	6923      	ldr	r3, [r4, #16]
 801e8f2:	b943      	cbnz	r3, 801e906 <__swsetup_r+0xc6>
 801e8f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e8f8:	d1ba      	bne.n	801e870 <__swsetup_r+0x30>
 801e8fa:	bd70      	pop	{r4, r5, r6, pc}
 801e8fc:	0781      	lsls	r1, r0, #30
 801e8fe:	bf58      	it	pl
 801e900:	6963      	ldrpl	r3, [r4, #20]
 801e902:	60a3      	str	r3, [r4, #8]
 801e904:	e7f4      	b.n	801e8f0 <__swsetup_r+0xb0>
 801e906:	2000      	movs	r0, #0
 801e908:	e7f7      	b.n	801e8fa <__swsetup_r+0xba>
 801e90a:	bf00      	nop
 801e90c:	20000104 	.word	0x20000104
 801e910:	08024b54 	.word	0x08024b54
 801e914:	08024b74 	.word	0x08024b74
 801e918:	08024b34 	.word	0x08024b34

0801e91c <__register_exitproc>:
 801e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e920:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801e9dc <__register_exitproc+0xc0>
 801e924:	4606      	mov	r6, r0
 801e926:	f8d8 0000 	ldr.w	r0, [r8]
 801e92a:	461f      	mov	r7, r3
 801e92c:	460d      	mov	r5, r1
 801e92e:	4691      	mov	r9, r2
 801e930:	f7fe fc1d 	bl	801d16e <__retarget_lock_acquire_recursive>
 801e934:	4b25      	ldr	r3, [pc, #148]	; (801e9cc <__register_exitproc+0xb0>)
 801e936:	681c      	ldr	r4, [r3, #0]
 801e938:	b934      	cbnz	r4, 801e948 <__register_exitproc+0x2c>
 801e93a:	4c25      	ldr	r4, [pc, #148]	; (801e9d0 <__register_exitproc+0xb4>)
 801e93c:	601c      	str	r4, [r3, #0]
 801e93e:	4b25      	ldr	r3, [pc, #148]	; (801e9d4 <__register_exitproc+0xb8>)
 801e940:	b113      	cbz	r3, 801e948 <__register_exitproc+0x2c>
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801e948:	6863      	ldr	r3, [r4, #4]
 801e94a:	2b1f      	cmp	r3, #31
 801e94c:	dd07      	ble.n	801e95e <__register_exitproc+0x42>
 801e94e:	f8d8 0000 	ldr.w	r0, [r8]
 801e952:	f7fe fc0e 	bl	801d172 <__retarget_lock_release_recursive>
 801e956:	f04f 30ff 	mov.w	r0, #4294967295
 801e95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e95e:	b34e      	cbz	r6, 801e9b4 <__register_exitproc+0x98>
 801e960:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801e964:	b988      	cbnz	r0, 801e98a <__register_exitproc+0x6e>
 801e966:	4b1c      	ldr	r3, [pc, #112]	; (801e9d8 <__register_exitproc+0xbc>)
 801e968:	b923      	cbnz	r3, 801e974 <__register_exitproc+0x58>
 801e96a:	f8d8 0000 	ldr.w	r0, [r8]
 801e96e:	f7fe fbff 	bl	801d170 <__retarget_lock_release>
 801e972:	e7f0      	b.n	801e956 <__register_exitproc+0x3a>
 801e974:	f44f 7084 	mov.w	r0, #264	; 0x108
 801e978:	f7fe fc60 	bl	801d23c <malloc>
 801e97c:	2800      	cmp	r0, #0
 801e97e:	d0f4      	beq.n	801e96a <__register_exitproc+0x4e>
 801e980:	2300      	movs	r3, #0
 801e982:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801e986:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801e98a:	6863      	ldr	r3, [r4, #4]
 801e98c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801e990:	2201      	movs	r2, #1
 801e992:	409a      	lsls	r2, r3
 801e994:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801e998:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801e99c:	4313      	orrs	r3, r2
 801e99e:	2e02      	cmp	r6, #2
 801e9a0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801e9a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801e9a8:	bf02      	ittt	eq
 801e9aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801e9ae:	431a      	orreq	r2, r3
 801e9b0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801e9b4:	6863      	ldr	r3, [r4, #4]
 801e9b6:	f8d8 0000 	ldr.w	r0, [r8]
 801e9ba:	1c5a      	adds	r2, r3, #1
 801e9bc:	3302      	adds	r3, #2
 801e9be:	6062      	str	r2, [r4, #4]
 801e9c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801e9c4:	f7fe fbd5 	bl	801d172 <__retarget_lock_release_recursive>
 801e9c8:	2000      	movs	r0, #0
 801e9ca:	e7c6      	b.n	801e95a <__register_exitproc+0x3e>
 801e9cc:	20000d2c 	.word	0x20000d2c
 801e9d0:	20000ca0 	.word	0x20000ca0
 801e9d4:	00000000 	.word	0x00000000
 801e9d8:	0801d23d 	.word	0x0801d23d
 801e9dc:	20000170 	.word	0x20000170

0801e9e0 <abs>:
 801e9e0:	2800      	cmp	r0, #0
 801e9e2:	bfb8      	it	lt
 801e9e4:	4240      	neglt	r0, r0
 801e9e6:	4770      	bx	lr

0801e9e8 <__assert_func>:
 801e9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e9ea:	4614      	mov	r4, r2
 801e9ec:	461a      	mov	r2, r3
 801e9ee:	4b09      	ldr	r3, [pc, #36]	; (801ea14 <__assert_func+0x2c>)
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	4605      	mov	r5, r0
 801e9f4:	68d8      	ldr	r0, [r3, #12]
 801e9f6:	b14c      	cbz	r4, 801ea0c <__assert_func+0x24>
 801e9f8:	4b07      	ldr	r3, [pc, #28]	; (801ea18 <__assert_func+0x30>)
 801e9fa:	9100      	str	r1, [sp, #0]
 801e9fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ea00:	4906      	ldr	r1, [pc, #24]	; (801ea1c <__assert_func+0x34>)
 801ea02:	462b      	mov	r3, r5
 801ea04:	f000 f854 	bl	801eab0 <fiprintf>
 801ea08:	f7fd fe42 	bl	801c690 <abort>
 801ea0c:	4b04      	ldr	r3, [pc, #16]	; (801ea20 <__assert_func+0x38>)
 801ea0e:	461c      	mov	r4, r3
 801ea10:	e7f3      	b.n	801e9fa <__assert_func+0x12>
 801ea12:	bf00      	nop
 801ea14:	20000104 	.word	0x20000104
 801ea18:	08024f8c 	.word	0x08024f8c
 801ea1c:	08024f99 	.word	0x08024f99
 801ea20:	08024fc7 	.word	0x08024fc7

0801ea24 <_close_r>:
 801ea24:	b538      	push	{r3, r4, r5, lr}
 801ea26:	4d06      	ldr	r5, [pc, #24]	; (801ea40 <_close_r+0x1c>)
 801ea28:	2300      	movs	r3, #0
 801ea2a:	4604      	mov	r4, r0
 801ea2c:	4608      	mov	r0, r1
 801ea2e:	602b      	str	r3, [r5, #0]
 801ea30:	f7e2 f9ea 	bl	8000e08 <_close>
 801ea34:	1c43      	adds	r3, r0, #1
 801ea36:	d102      	bne.n	801ea3e <_close_r+0x1a>
 801ea38:	682b      	ldr	r3, [r5, #0]
 801ea3a:	b103      	cbz	r3, 801ea3e <_close_r+0x1a>
 801ea3c:	6023      	str	r3, [r4, #0]
 801ea3e:	bd38      	pop	{r3, r4, r5, pc}
 801ea40:	20000d40 	.word	0x20000d40

0801ea44 <__sflags>:
 801ea44:	780b      	ldrb	r3, [r1, #0]
 801ea46:	2b72      	cmp	r3, #114	; 0x72
 801ea48:	b530      	push	{r4, r5, lr}
 801ea4a:	d022      	beq.n	801ea92 <__sflags+0x4e>
 801ea4c:	2b77      	cmp	r3, #119	; 0x77
 801ea4e:	d024      	beq.n	801ea9a <__sflags+0x56>
 801ea50:	2b61      	cmp	r3, #97	; 0x61
 801ea52:	d027      	beq.n	801eaa4 <__sflags+0x60>
 801ea54:	2316      	movs	r3, #22
 801ea56:	6003      	str	r3, [r0, #0]
 801ea58:	2000      	movs	r0, #0
 801ea5a:	bd30      	pop	{r4, r5, pc}
 801ea5c:	2d62      	cmp	r5, #98	; 0x62
 801ea5e:	d012      	beq.n	801ea86 <__sflags+0x42>
 801ea60:	2d78      	cmp	r5, #120	; 0x78
 801ea62:	d013      	beq.n	801ea8c <__sflags+0x48>
 801ea64:	2d2b      	cmp	r5, #43	; 0x2b
 801ea66:	d107      	bne.n	801ea78 <__sflags+0x34>
 801ea68:	f020 001c 	bic.w	r0, r0, #28
 801ea6c:	f023 0303 	bic.w	r3, r3, #3
 801ea70:	f040 0010 	orr.w	r0, r0, #16
 801ea74:	f043 0302 	orr.w	r3, r3, #2
 801ea78:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801ea7c:	2d00      	cmp	r5, #0
 801ea7e:	d1ed      	bne.n	801ea5c <__sflags+0x18>
 801ea80:	4323      	orrs	r3, r4
 801ea82:	6013      	str	r3, [r2, #0]
 801ea84:	e7e9      	b.n	801ea5a <__sflags+0x16>
 801ea86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ea8a:	e7f5      	b.n	801ea78 <__sflags+0x34>
 801ea8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ea90:	e7f2      	b.n	801ea78 <__sflags+0x34>
 801ea92:	2400      	movs	r4, #0
 801ea94:	4623      	mov	r3, r4
 801ea96:	2004      	movs	r0, #4
 801ea98:	e7ee      	b.n	801ea78 <__sflags+0x34>
 801ea9a:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801ea9e:	2301      	movs	r3, #1
 801eaa0:	2008      	movs	r0, #8
 801eaa2:	e7e9      	b.n	801ea78 <__sflags+0x34>
 801eaa4:	f44f 7402 	mov.w	r4, #520	; 0x208
 801eaa8:	2301      	movs	r3, #1
 801eaaa:	f44f 7084 	mov.w	r0, #264	; 0x108
 801eaae:	e7e3      	b.n	801ea78 <__sflags+0x34>

0801eab0 <fiprintf>:
 801eab0:	b40e      	push	{r1, r2, r3}
 801eab2:	b503      	push	{r0, r1, lr}
 801eab4:	4601      	mov	r1, r0
 801eab6:	ab03      	add	r3, sp, #12
 801eab8:	4805      	ldr	r0, [pc, #20]	; (801ead0 <fiprintf+0x20>)
 801eaba:	f853 2b04 	ldr.w	r2, [r3], #4
 801eabe:	6800      	ldr	r0, [r0, #0]
 801eac0:	9301      	str	r3, [sp, #4]
 801eac2:	f000 fb11 	bl	801f0e8 <_vfiprintf_r>
 801eac6:	b002      	add	sp, #8
 801eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 801eacc:	b003      	add	sp, #12
 801eace:	4770      	bx	lr
 801ead0:	20000104 	.word	0x20000104

0801ead4 <_fstat_r>:
 801ead4:	b538      	push	{r3, r4, r5, lr}
 801ead6:	4d07      	ldr	r5, [pc, #28]	; (801eaf4 <_fstat_r+0x20>)
 801ead8:	2300      	movs	r3, #0
 801eada:	4604      	mov	r4, r0
 801eadc:	4608      	mov	r0, r1
 801eade:	4611      	mov	r1, r2
 801eae0:	602b      	str	r3, [r5, #0]
 801eae2:	f7e2 f99d 	bl	8000e20 <_fstat>
 801eae6:	1c43      	adds	r3, r0, #1
 801eae8:	d102      	bne.n	801eaf0 <_fstat_r+0x1c>
 801eaea:	682b      	ldr	r3, [r5, #0]
 801eaec:	b103      	cbz	r3, 801eaf0 <_fstat_r+0x1c>
 801eaee:	6023      	str	r3, [r4, #0]
 801eaf0:	bd38      	pop	{r3, r4, r5, pc}
 801eaf2:	bf00      	nop
 801eaf4:	20000d40 	.word	0x20000d40

0801eaf8 <_findenv_r>:
 801eaf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eafc:	4607      	mov	r7, r0
 801eafe:	4689      	mov	r9, r1
 801eb00:	4616      	mov	r6, r2
 801eb02:	f000 fe97 	bl	801f834 <__env_lock>
 801eb06:	4b18      	ldr	r3, [pc, #96]	; (801eb68 <_findenv_r+0x70>)
 801eb08:	681c      	ldr	r4, [r3, #0]
 801eb0a:	469a      	mov	sl, r3
 801eb0c:	b134      	cbz	r4, 801eb1c <_findenv_r+0x24>
 801eb0e:	464b      	mov	r3, r9
 801eb10:	4698      	mov	r8, r3
 801eb12:	f813 1b01 	ldrb.w	r1, [r3], #1
 801eb16:	b139      	cbz	r1, 801eb28 <_findenv_r+0x30>
 801eb18:	293d      	cmp	r1, #61	; 0x3d
 801eb1a:	d1f9      	bne.n	801eb10 <_findenv_r+0x18>
 801eb1c:	4638      	mov	r0, r7
 801eb1e:	f000 fe8f 	bl	801f840 <__env_unlock>
 801eb22:	2000      	movs	r0, #0
 801eb24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb28:	eba8 0809 	sub.w	r8, r8, r9
 801eb2c:	46a3      	mov	fp, r4
 801eb2e:	f854 0b04 	ldr.w	r0, [r4], #4
 801eb32:	2800      	cmp	r0, #0
 801eb34:	d0f2      	beq.n	801eb1c <_findenv_r+0x24>
 801eb36:	4642      	mov	r2, r8
 801eb38:	4649      	mov	r1, r9
 801eb3a:	f000 fe5b 	bl	801f7f4 <strncmp>
 801eb3e:	2800      	cmp	r0, #0
 801eb40:	d1f4      	bne.n	801eb2c <_findenv_r+0x34>
 801eb42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801eb46:	eb03 0508 	add.w	r5, r3, r8
 801eb4a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801eb4e:	2b3d      	cmp	r3, #61	; 0x3d
 801eb50:	d1ec      	bne.n	801eb2c <_findenv_r+0x34>
 801eb52:	f8da 3000 	ldr.w	r3, [sl]
 801eb56:	ebab 0303 	sub.w	r3, fp, r3
 801eb5a:	109b      	asrs	r3, r3, #2
 801eb5c:	4638      	mov	r0, r7
 801eb5e:	6033      	str	r3, [r6, #0]
 801eb60:	f000 fe6e 	bl	801f840 <__env_unlock>
 801eb64:	1c68      	adds	r0, r5, #1
 801eb66:	e7dd      	b.n	801eb24 <_findenv_r+0x2c>
 801eb68:	20000000 	.word	0x20000000

0801eb6c <_getenv_r>:
 801eb6c:	b507      	push	{r0, r1, r2, lr}
 801eb6e:	aa01      	add	r2, sp, #4
 801eb70:	f7ff ffc2 	bl	801eaf8 <_findenv_r>
 801eb74:	b003      	add	sp, #12
 801eb76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801eb7c <_gettimeofday_r>:
 801eb7c:	b538      	push	{r3, r4, r5, lr}
 801eb7e:	4d07      	ldr	r5, [pc, #28]	; (801eb9c <_gettimeofday_r+0x20>)
 801eb80:	2300      	movs	r3, #0
 801eb82:	4604      	mov	r4, r0
 801eb84:	4608      	mov	r0, r1
 801eb86:	4611      	mov	r1, r2
 801eb88:	602b      	str	r3, [r5, #0]
 801eb8a:	f001 fa99 	bl	80200c0 <_gettimeofday>
 801eb8e:	1c43      	adds	r3, r0, #1
 801eb90:	d102      	bne.n	801eb98 <_gettimeofday_r+0x1c>
 801eb92:	682b      	ldr	r3, [r5, #0]
 801eb94:	b103      	cbz	r3, 801eb98 <_gettimeofday_r+0x1c>
 801eb96:	6023      	str	r3, [r4, #0]
 801eb98:	bd38      	pop	{r3, r4, r5, pc}
 801eb9a:	bf00      	nop
 801eb9c:	20000d40 	.word	0x20000d40

0801eba0 <__gettzinfo>:
 801eba0:	4800      	ldr	r0, [pc, #0]	; (801eba4 <__gettzinfo+0x4>)
 801eba2:	4770      	bx	lr
 801eba4:	20000178 	.word	0x20000178

0801eba8 <gmtime_r>:
 801eba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebac:	e9d0 6700 	ldrd	r6, r7, [r0]
 801ebb0:	460c      	mov	r4, r1
 801ebb2:	4a51      	ldr	r2, [pc, #324]	; (801ecf8 <gmtime_r+0x150>)
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	4630      	mov	r0, r6
 801ebb8:	4639      	mov	r1, r7
 801ebba:	f7e1 fdfb 	bl	80007b4 <__aeabi_ldivmod>
 801ebbe:	4639      	mov	r1, r7
 801ebc0:	4605      	mov	r5, r0
 801ebc2:	4a4d      	ldr	r2, [pc, #308]	; (801ecf8 <gmtime_r+0x150>)
 801ebc4:	4630      	mov	r0, r6
 801ebc6:	2300      	movs	r3, #0
 801ebc8:	f7e1 fdf4 	bl	80007b4 <__aeabi_ldivmod>
 801ebcc:	2a00      	cmp	r2, #0
 801ebce:	bfbc      	itt	lt
 801ebd0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801ebd4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801ebd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ebdc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801ebe0:	fbb2 f3f1 	udiv	r3, r2, r1
 801ebe4:	fb01 2213 	mls	r2, r1, r3, r2
 801ebe8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801ebec:	bfac      	ite	ge
 801ebee:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801ebf2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801ebf6:	60a3      	str	r3, [r4, #8]
 801ebf8:	fbb2 f3f1 	udiv	r3, r2, r1
 801ebfc:	fb01 2213 	mls	r2, r1, r3, r2
 801ec00:	6063      	str	r3, [r4, #4]
 801ec02:	6022      	str	r2, [r4, #0]
 801ec04:	1cc3      	adds	r3, r0, #3
 801ec06:	2207      	movs	r2, #7
 801ec08:	fb93 f2f2 	sdiv	r2, r3, r2
 801ec0c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801ec10:	1a9b      	subs	r3, r3, r2
 801ec12:	bf48      	it	mi
 801ec14:	3307      	addmi	r3, #7
 801ec16:	2800      	cmp	r0, #0
 801ec18:	61a3      	str	r3, [r4, #24]
 801ec1a:	bfb8      	it	lt
 801ec1c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801ec20:	4936      	ldr	r1, [pc, #216]	; (801ecfc <gmtime_r+0x154>)
 801ec22:	bfae      	itee	ge
 801ec24:	fb90 f1f1 	sdivge	r1, r0, r1
 801ec28:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801ec2c:	fb93 f1f1 	sdivlt	r1, r3, r1
 801ec30:	4b33      	ldr	r3, [pc, #204]	; (801ed00 <gmtime_r+0x158>)
 801ec32:	fb03 0001 	mla	r0, r3, r1, r0
 801ec36:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801ec3a:	fbb0 f2f2 	udiv	r2, r0, r2
 801ec3e:	4402      	add	r2, r0
 801ec40:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801ec44:	fbb0 f3fc 	udiv	r3, r0, ip
 801ec48:	1ad2      	subs	r2, r2, r3
 801ec4a:	f240 176d 	movw	r7, #365	; 0x16d
 801ec4e:	4b2d      	ldr	r3, [pc, #180]	; (801ed04 <gmtime_r+0x15c>)
 801ec50:	fbb0 f3f3 	udiv	r3, r0, r3
 801ec54:	2664      	movs	r6, #100	; 0x64
 801ec56:	1ad3      	subs	r3, r2, r3
 801ec58:	fbb3 f5f7 	udiv	r5, r3, r7
 801ec5c:	fbb3 f3fc 	udiv	r3, r3, ip
 801ec60:	fbb5 f2f6 	udiv	r2, r5, r6
 801ec64:	1ad3      	subs	r3, r2, r3
 801ec66:	4403      	add	r3, r0
 801ec68:	fb07 3315 	mls	r3, r7, r5, r3
 801ec6c:	2099      	movs	r0, #153	; 0x99
 801ec6e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801ec72:	f10c 0c02 	add.w	ip, ip, #2
 801ec76:	f103 0e01 	add.w	lr, r3, #1
 801ec7a:	fbbc f7f0 	udiv	r7, ip, r0
 801ec7e:	4378      	muls	r0, r7
 801ec80:	3002      	adds	r0, #2
 801ec82:	f04f 0805 	mov.w	r8, #5
 801ec86:	fbb0 f0f8 	udiv	r0, r0, r8
 801ec8a:	ebae 0000 	sub.w	r0, lr, r0
 801ec8e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801ec92:	45f4      	cmp	ip, lr
 801ec94:	bf94      	ite	ls
 801ec96:	f04f 0c02 	movls.w	ip, #2
 801ec9a:	f06f 0c09 	mvnhi.w	ip, #9
 801ec9e:	4467      	add	r7, ip
 801eca0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801eca4:	fb0c 5101 	mla	r1, ip, r1, r5
 801eca8:	2f01      	cmp	r7, #1
 801ecaa:	bf98      	it	ls
 801ecac:	3101      	addls	r1, #1
 801ecae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801ecb2:	d30c      	bcc.n	801ecce <gmtime_r+0x126>
 801ecb4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801ecb8:	61e3      	str	r3, [r4, #28]
 801ecba:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	60e0      	str	r0, [r4, #12]
 801ecc2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801ecc6:	6223      	str	r3, [r4, #32]
 801ecc8:	4620      	mov	r0, r4
 801ecca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecce:	f015 0f03 	tst.w	r5, #3
 801ecd2:	d102      	bne.n	801ecda <gmtime_r+0x132>
 801ecd4:	fb06 5212 	mls	r2, r6, r2, r5
 801ecd8:	b95a      	cbnz	r2, 801ecf2 <gmtime_r+0x14a>
 801ecda:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801ecde:	fbb5 f2f6 	udiv	r2, r5, r6
 801ece2:	fb06 5212 	mls	r2, r6, r2, r5
 801ece6:	fab2 f282 	clz	r2, r2
 801ecea:	0952      	lsrs	r2, r2, #5
 801ecec:	333b      	adds	r3, #59	; 0x3b
 801ecee:	4413      	add	r3, r2
 801ecf0:	e7e2      	b.n	801ecb8 <gmtime_r+0x110>
 801ecf2:	2201      	movs	r2, #1
 801ecf4:	e7fa      	b.n	801ecec <gmtime_r+0x144>
 801ecf6:	bf00      	nop
 801ecf8:	00015180 	.word	0x00015180
 801ecfc:	00023ab1 	.word	0x00023ab1
 801ed00:	fffdc54f 	.word	0xfffdc54f
 801ed04:	00023ab0 	.word	0x00023ab0

0801ed08 <_isatty_r>:
 801ed08:	b538      	push	{r3, r4, r5, lr}
 801ed0a:	4d06      	ldr	r5, [pc, #24]	; (801ed24 <_isatty_r+0x1c>)
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	4604      	mov	r4, r0
 801ed10:	4608      	mov	r0, r1
 801ed12:	602b      	str	r3, [r5, #0]
 801ed14:	f7e2 f894 	bl	8000e40 <_isatty>
 801ed18:	1c43      	adds	r3, r0, #1
 801ed1a:	d102      	bne.n	801ed22 <_isatty_r+0x1a>
 801ed1c:	682b      	ldr	r3, [r5, #0]
 801ed1e:	b103      	cbz	r3, 801ed22 <_isatty_r+0x1a>
 801ed20:	6023      	str	r3, [r4, #0]
 801ed22:	bd38      	pop	{r3, r4, r5, pc}
 801ed24:	20000d40 	.word	0x20000d40

0801ed28 <labs>:
 801ed28:	2800      	cmp	r0, #0
 801ed2a:	bfb8      	it	lt
 801ed2c:	4240      	neglt	r0, r0
 801ed2e:	4770      	bx	lr

0801ed30 <_lseek_r>:
 801ed30:	b538      	push	{r3, r4, r5, lr}
 801ed32:	4d07      	ldr	r5, [pc, #28]	; (801ed50 <_lseek_r+0x20>)
 801ed34:	4604      	mov	r4, r0
 801ed36:	4608      	mov	r0, r1
 801ed38:	4611      	mov	r1, r2
 801ed3a:	2200      	movs	r2, #0
 801ed3c:	602a      	str	r2, [r5, #0]
 801ed3e:	461a      	mov	r2, r3
 801ed40:	f7e2 f889 	bl	8000e56 <_lseek>
 801ed44:	1c43      	adds	r3, r0, #1
 801ed46:	d102      	bne.n	801ed4e <_lseek_r+0x1e>
 801ed48:	682b      	ldr	r3, [r5, #0]
 801ed4a:	b103      	cbz	r3, 801ed4e <_lseek_r+0x1e>
 801ed4c:	6023      	str	r3, [r4, #0]
 801ed4e:	bd38      	pop	{r3, r4, r5, pc}
 801ed50:	20000d40 	.word	0x20000d40

0801ed54 <__ascii_mbtowc>:
 801ed54:	b082      	sub	sp, #8
 801ed56:	b901      	cbnz	r1, 801ed5a <__ascii_mbtowc+0x6>
 801ed58:	a901      	add	r1, sp, #4
 801ed5a:	b142      	cbz	r2, 801ed6e <__ascii_mbtowc+0x1a>
 801ed5c:	b14b      	cbz	r3, 801ed72 <__ascii_mbtowc+0x1e>
 801ed5e:	7813      	ldrb	r3, [r2, #0]
 801ed60:	600b      	str	r3, [r1, #0]
 801ed62:	7812      	ldrb	r2, [r2, #0]
 801ed64:	1e10      	subs	r0, r2, #0
 801ed66:	bf18      	it	ne
 801ed68:	2001      	movne	r0, #1
 801ed6a:	b002      	add	sp, #8
 801ed6c:	4770      	bx	lr
 801ed6e:	4610      	mov	r0, r2
 801ed70:	e7fb      	b.n	801ed6a <__ascii_mbtowc+0x16>
 801ed72:	f06f 0001 	mvn.w	r0, #1
 801ed76:	e7f8      	b.n	801ed6a <__ascii_mbtowc+0x16>

0801ed78 <__malloc_lock>:
 801ed78:	4801      	ldr	r0, [pc, #4]	; (801ed80 <__malloc_lock+0x8>)
 801ed7a:	f7fe b9f8 	b.w	801d16e <__retarget_lock_acquire_recursive>
 801ed7e:	bf00      	nop
 801ed80:	20000d38 	.word	0x20000d38

0801ed84 <__malloc_unlock>:
 801ed84:	4801      	ldr	r0, [pc, #4]	; (801ed8c <__malloc_unlock+0x8>)
 801ed86:	f7fe b9f4 	b.w	801d172 <__retarget_lock_release_recursive>
 801ed8a:	bf00      	nop
 801ed8c:	20000d38 	.word	0x20000d38

0801ed90 <_realloc_r>:
 801ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed92:	4607      	mov	r7, r0
 801ed94:	4614      	mov	r4, r2
 801ed96:	460e      	mov	r6, r1
 801ed98:	b921      	cbnz	r1, 801eda4 <_realloc_r+0x14>
 801ed9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ed9e:	4611      	mov	r1, r2
 801eda0:	f7fe bad2 	b.w	801d348 <_malloc_r>
 801eda4:	b922      	cbnz	r2, 801edb0 <_realloc_r+0x20>
 801eda6:	f7fe fa7f 	bl	801d2a8 <_free_r>
 801edaa:	4625      	mov	r5, r4
 801edac:	4628      	mov	r0, r5
 801edae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edb0:	f000 fd66 	bl	801f880 <_malloc_usable_size_r>
 801edb4:	42a0      	cmp	r0, r4
 801edb6:	d20f      	bcs.n	801edd8 <_realloc_r+0x48>
 801edb8:	4621      	mov	r1, r4
 801edba:	4638      	mov	r0, r7
 801edbc:	f7fe fac4 	bl	801d348 <_malloc_r>
 801edc0:	4605      	mov	r5, r0
 801edc2:	2800      	cmp	r0, #0
 801edc4:	d0f2      	beq.n	801edac <_realloc_r+0x1c>
 801edc6:	4631      	mov	r1, r6
 801edc8:	4622      	mov	r2, r4
 801edca:	f7fe fa47 	bl	801d25c <memcpy>
 801edce:	4631      	mov	r1, r6
 801edd0:	4638      	mov	r0, r7
 801edd2:	f7fe fa69 	bl	801d2a8 <_free_r>
 801edd6:	e7e9      	b.n	801edac <_realloc_r+0x1c>
 801edd8:	4635      	mov	r5, r6
 801edda:	e7e7      	b.n	801edac <_realloc_r+0x1c>

0801eddc <__ssputs_r>:
 801eddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ede0:	688e      	ldr	r6, [r1, #8]
 801ede2:	429e      	cmp	r6, r3
 801ede4:	4682      	mov	sl, r0
 801ede6:	460c      	mov	r4, r1
 801ede8:	4690      	mov	r8, r2
 801edea:	461f      	mov	r7, r3
 801edec:	d838      	bhi.n	801ee60 <__ssputs_r+0x84>
 801edee:	898a      	ldrh	r2, [r1, #12]
 801edf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801edf4:	d032      	beq.n	801ee5c <__ssputs_r+0x80>
 801edf6:	6825      	ldr	r5, [r4, #0]
 801edf8:	6909      	ldr	r1, [r1, #16]
 801edfa:	eba5 0901 	sub.w	r9, r5, r1
 801edfe:	6965      	ldr	r5, [r4, #20]
 801ee00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ee08:	3301      	adds	r3, #1
 801ee0a:	444b      	add	r3, r9
 801ee0c:	106d      	asrs	r5, r5, #1
 801ee0e:	429d      	cmp	r5, r3
 801ee10:	bf38      	it	cc
 801ee12:	461d      	movcc	r5, r3
 801ee14:	0553      	lsls	r3, r2, #21
 801ee16:	d531      	bpl.n	801ee7c <__ssputs_r+0xa0>
 801ee18:	4629      	mov	r1, r5
 801ee1a:	f7fe fa95 	bl	801d348 <_malloc_r>
 801ee1e:	4606      	mov	r6, r0
 801ee20:	b950      	cbnz	r0, 801ee38 <__ssputs_r+0x5c>
 801ee22:	230c      	movs	r3, #12
 801ee24:	f8ca 3000 	str.w	r3, [sl]
 801ee28:	89a3      	ldrh	r3, [r4, #12]
 801ee2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee2e:	81a3      	strh	r3, [r4, #12]
 801ee30:	f04f 30ff 	mov.w	r0, #4294967295
 801ee34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee38:	6921      	ldr	r1, [r4, #16]
 801ee3a:	464a      	mov	r2, r9
 801ee3c:	f7fe fa0e 	bl	801d25c <memcpy>
 801ee40:	89a3      	ldrh	r3, [r4, #12]
 801ee42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ee46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee4a:	81a3      	strh	r3, [r4, #12]
 801ee4c:	6126      	str	r6, [r4, #16]
 801ee4e:	6165      	str	r5, [r4, #20]
 801ee50:	444e      	add	r6, r9
 801ee52:	eba5 0509 	sub.w	r5, r5, r9
 801ee56:	6026      	str	r6, [r4, #0]
 801ee58:	60a5      	str	r5, [r4, #8]
 801ee5a:	463e      	mov	r6, r7
 801ee5c:	42be      	cmp	r6, r7
 801ee5e:	d900      	bls.n	801ee62 <__ssputs_r+0x86>
 801ee60:	463e      	mov	r6, r7
 801ee62:	4632      	mov	r2, r6
 801ee64:	6820      	ldr	r0, [r4, #0]
 801ee66:	4641      	mov	r1, r8
 801ee68:	f000 fcf0 	bl	801f84c <memmove>
 801ee6c:	68a3      	ldr	r3, [r4, #8]
 801ee6e:	6822      	ldr	r2, [r4, #0]
 801ee70:	1b9b      	subs	r3, r3, r6
 801ee72:	4432      	add	r2, r6
 801ee74:	60a3      	str	r3, [r4, #8]
 801ee76:	6022      	str	r2, [r4, #0]
 801ee78:	2000      	movs	r0, #0
 801ee7a:	e7db      	b.n	801ee34 <__ssputs_r+0x58>
 801ee7c:	462a      	mov	r2, r5
 801ee7e:	f7ff ff87 	bl	801ed90 <_realloc_r>
 801ee82:	4606      	mov	r6, r0
 801ee84:	2800      	cmp	r0, #0
 801ee86:	d1e1      	bne.n	801ee4c <__ssputs_r+0x70>
 801ee88:	6921      	ldr	r1, [r4, #16]
 801ee8a:	4650      	mov	r0, sl
 801ee8c:	f7fe fa0c 	bl	801d2a8 <_free_r>
 801ee90:	e7c7      	b.n	801ee22 <__ssputs_r+0x46>
	...

0801ee94 <_svfiprintf_r>:
 801ee94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee98:	4698      	mov	r8, r3
 801ee9a:	898b      	ldrh	r3, [r1, #12]
 801ee9c:	061b      	lsls	r3, r3, #24
 801ee9e:	b09d      	sub	sp, #116	; 0x74
 801eea0:	4607      	mov	r7, r0
 801eea2:	460d      	mov	r5, r1
 801eea4:	4614      	mov	r4, r2
 801eea6:	d50e      	bpl.n	801eec6 <_svfiprintf_r+0x32>
 801eea8:	690b      	ldr	r3, [r1, #16]
 801eeaa:	b963      	cbnz	r3, 801eec6 <_svfiprintf_r+0x32>
 801eeac:	2140      	movs	r1, #64	; 0x40
 801eeae:	f7fe fa4b 	bl	801d348 <_malloc_r>
 801eeb2:	6028      	str	r0, [r5, #0]
 801eeb4:	6128      	str	r0, [r5, #16]
 801eeb6:	b920      	cbnz	r0, 801eec2 <_svfiprintf_r+0x2e>
 801eeb8:	230c      	movs	r3, #12
 801eeba:	603b      	str	r3, [r7, #0]
 801eebc:	f04f 30ff 	mov.w	r0, #4294967295
 801eec0:	e0d1      	b.n	801f066 <_svfiprintf_r+0x1d2>
 801eec2:	2340      	movs	r3, #64	; 0x40
 801eec4:	616b      	str	r3, [r5, #20]
 801eec6:	2300      	movs	r3, #0
 801eec8:	9309      	str	r3, [sp, #36]	; 0x24
 801eeca:	2320      	movs	r3, #32
 801eecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eed0:	f8cd 800c 	str.w	r8, [sp, #12]
 801eed4:	2330      	movs	r3, #48	; 0x30
 801eed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f080 <_svfiprintf_r+0x1ec>
 801eeda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eede:	f04f 0901 	mov.w	r9, #1
 801eee2:	4623      	mov	r3, r4
 801eee4:	469a      	mov	sl, r3
 801eee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eeea:	b10a      	cbz	r2, 801eef0 <_svfiprintf_r+0x5c>
 801eeec:	2a25      	cmp	r2, #37	; 0x25
 801eeee:	d1f9      	bne.n	801eee4 <_svfiprintf_r+0x50>
 801eef0:	ebba 0b04 	subs.w	fp, sl, r4
 801eef4:	d00b      	beq.n	801ef0e <_svfiprintf_r+0x7a>
 801eef6:	465b      	mov	r3, fp
 801eef8:	4622      	mov	r2, r4
 801eefa:	4629      	mov	r1, r5
 801eefc:	4638      	mov	r0, r7
 801eefe:	f7ff ff6d 	bl	801eddc <__ssputs_r>
 801ef02:	3001      	adds	r0, #1
 801ef04:	f000 80aa 	beq.w	801f05c <_svfiprintf_r+0x1c8>
 801ef08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef0a:	445a      	add	r2, fp
 801ef0c:	9209      	str	r2, [sp, #36]	; 0x24
 801ef0e:	f89a 3000 	ldrb.w	r3, [sl]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	f000 80a2 	beq.w	801f05c <_svfiprintf_r+0x1c8>
 801ef18:	2300      	movs	r3, #0
 801ef1a:	f04f 32ff 	mov.w	r2, #4294967295
 801ef1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef22:	f10a 0a01 	add.w	sl, sl, #1
 801ef26:	9304      	str	r3, [sp, #16]
 801ef28:	9307      	str	r3, [sp, #28]
 801ef2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ef2e:	931a      	str	r3, [sp, #104]	; 0x68
 801ef30:	4654      	mov	r4, sl
 801ef32:	2205      	movs	r2, #5
 801ef34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef38:	4851      	ldr	r0, [pc, #324]	; (801f080 <_svfiprintf_r+0x1ec>)
 801ef3a:	f7e1 f991 	bl	8000260 <memchr>
 801ef3e:	9a04      	ldr	r2, [sp, #16]
 801ef40:	b9d8      	cbnz	r0, 801ef7a <_svfiprintf_r+0xe6>
 801ef42:	06d0      	lsls	r0, r2, #27
 801ef44:	bf44      	itt	mi
 801ef46:	2320      	movmi	r3, #32
 801ef48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef4c:	0711      	lsls	r1, r2, #28
 801ef4e:	bf44      	itt	mi
 801ef50:	232b      	movmi	r3, #43	; 0x2b
 801ef52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ef56:	f89a 3000 	ldrb.w	r3, [sl]
 801ef5a:	2b2a      	cmp	r3, #42	; 0x2a
 801ef5c:	d015      	beq.n	801ef8a <_svfiprintf_r+0xf6>
 801ef5e:	9a07      	ldr	r2, [sp, #28]
 801ef60:	4654      	mov	r4, sl
 801ef62:	2000      	movs	r0, #0
 801ef64:	f04f 0c0a 	mov.w	ip, #10
 801ef68:	4621      	mov	r1, r4
 801ef6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef6e:	3b30      	subs	r3, #48	; 0x30
 801ef70:	2b09      	cmp	r3, #9
 801ef72:	d94e      	bls.n	801f012 <_svfiprintf_r+0x17e>
 801ef74:	b1b0      	cbz	r0, 801efa4 <_svfiprintf_r+0x110>
 801ef76:	9207      	str	r2, [sp, #28]
 801ef78:	e014      	b.n	801efa4 <_svfiprintf_r+0x110>
 801ef7a:	eba0 0308 	sub.w	r3, r0, r8
 801ef7e:	fa09 f303 	lsl.w	r3, r9, r3
 801ef82:	4313      	orrs	r3, r2
 801ef84:	9304      	str	r3, [sp, #16]
 801ef86:	46a2      	mov	sl, r4
 801ef88:	e7d2      	b.n	801ef30 <_svfiprintf_r+0x9c>
 801ef8a:	9b03      	ldr	r3, [sp, #12]
 801ef8c:	1d19      	adds	r1, r3, #4
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	9103      	str	r1, [sp, #12]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	bfbb      	ittet	lt
 801ef96:	425b      	neglt	r3, r3
 801ef98:	f042 0202 	orrlt.w	r2, r2, #2
 801ef9c:	9307      	strge	r3, [sp, #28]
 801ef9e:	9307      	strlt	r3, [sp, #28]
 801efa0:	bfb8      	it	lt
 801efa2:	9204      	strlt	r2, [sp, #16]
 801efa4:	7823      	ldrb	r3, [r4, #0]
 801efa6:	2b2e      	cmp	r3, #46	; 0x2e
 801efa8:	d10c      	bne.n	801efc4 <_svfiprintf_r+0x130>
 801efaa:	7863      	ldrb	r3, [r4, #1]
 801efac:	2b2a      	cmp	r3, #42	; 0x2a
 801efae:	d135      	bne.n	801f01c <_svfiprintf_r+0x188>
 801efb0:	9b03      	ldr	r3, [sp, #12]
 801efb2:	1d1a      	adds	r2, r3, #4
 801efb4:	681b      	ldr	r3, [r3, #0]
 801efb6:	9203      	str	r2, [sp, #12]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	bfb8      	it	lt
 801efbc:	f04f 33ff 	movlt.w	r3, #4294967295
 801efc0:	3402      	adds	r4, #2
 801efc2:	9305      	str	r3, [sp, #20]
 801efc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f090 <_svfiprintf_r+0x1fc>
 801efc8:	7821      	ldrb	r1, [r4, #0]
 801efca:	2203      	movs	r2, #3
 801efcc:	4650      	mov	r0, sl
 801efce:	f7e1 f947 	bl	8000260 <memchr>
 801efd2:	b140      	cbz	r0, 801efe6 <_svfiprintf_r+0x152>
 801efd4:	2340      	movs	r3, #64	; 0x40
 801efd6:	eba0 000a 	sub.w	r0, r0, sl
 801efda:	fa03 f000 	lsl.w	r0, r3, r0
 801efde:	9b04      	ldr	r3, [sp, #16]
 801efe0:	4303      	orrs	r3, r0
 801efe2:	3401      	adds	r4, #1
 801efe4:	9304      	str	r3, [sp, #16]
 801efe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efea:	4826      	ldr	r0, [pc, #152]	; (801f084 <_svfiprintf_r+0x1f0>)
 801efec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eff0:	2206      	movs	r2, #6
 801eff2:	f7e1 f935 	bl	8000260 <memchr>
 801eff6:	2800      	cmp	r0, #0
 801eff8:	d038      	beq.n	801f06c <_svfiprintf_r+0x1d8>
 801effa:	4b23      	ldr	r3, [pc, #140]	; (801f088 <_svfiprintf_r+0x1f4>)
 801effc:	bb1b      	cbnz	r3, 801f046 <_svfiprintf_r+0x1b2>
 801effe:	9b03      	ldr	r3, [sp, #12]
 801f000:	3307      	adds	r3, #7
 801f002:	f023 0307 	bic.w	r3, r3, #7
 801f006:	3308      	adds	r3, #8
 801f008:	9303      	str	r3, [sp, #12]
 801f00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f00c:	4433      	add	r3, r6
 801f00e:	9309      	str	r3, [sp, #36]	; 0x24
 801f010:	e767      	b.n	801eee2 <_svfiprintf_r+0x4e>
 801f012:	fb0c 3202 	mla	r2, ip, r2, r3
 801f016:	460c      	mov	r4, r1
 801f018:	2001      	movs	r0, #1
 801f01a:	e7a5      	b.n	801ef68 <_svfiprintf_r+0xd4>
 801f01c:	2300      	movs	r3, #0
 801f01e:	3401      	adds	r4, #1
 801f020:	9305      	str	r3, [sp, #20]
 801f022:	4619      	mov	r1, r3
 801f024:	f04f 0c0a 	mov.w	ip, #10
 801f028:	4620      	mov	r0, r4
 801f02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f02e:	3a30      	subs	r2, #48	; 0x30
 801f030:	2a09      	cmp	r2, #9
 801f032:	d903      	bls.n	801f03c <_svfiprintf_r+0x1a8>
 801f034:	2b00      	cmp	r3, #0
 801f036:	d0c5      	beq.n	801efc4 <_svfiprintf_r+0x130>
 801f038:	9105      	str	r1, [sp, #20]
 801f03a:	e7c3      	b.n	801efc4 <_svfiprintf_r+0x130>
 801f03c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f040:	4604      	mov	r4, r0
 801f042:	2301      	movs	r3, #1
 801f044:	e7f0      	b.n	801f028 <_svfiprintf_r+0x194>
 801f046:	ab03      	add	r3, sp, #12
 801f048:	9300      	str	r3, [sp, #0]
 801f04a:	462a      	mov	r2, r5
 801f04c:	4b0f      	ldr	r3, [pc, #60]	; (801f08c <_svfiprintf_r+0x1f8>)
 801f04e:	a904      	add	r1, sp, #16
 801f050:	4638      	mov	r0, r7
 801f052:	f3af 8000 	nop.w
 801f056:	1c42      	adds	r2, r0, #1
 801f058:	4606      	mov	r6, r0
 801f05a:	d1d6      	bne.n	801f00a <_svfiprintf_r+0x176>
 801f05c:	89ab      	ldrh	r3, [r5, #12]
 801f05e:	065b      	lsls	r3, r3, #25
 801f060:	f53f af2c 	bmi.w	801eebc <_svfiprintf_r+0x28>
 801f064:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f066:	b01d      	add	sp, #116	; 0x74
 801f068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f06c:	ab03      	add	r3, sp, #12
 801f06e:	9300      	str	r3, [sp, #0]
 801f070:	462a      	mov	r2, r5
 801f072:	4b06      	ldr	r3, [pc, #24]	; (801f08c <_svfiprintf_r+0x1f8>)
 801f074:	a904      	add	r1, sp, #16
 801f076:	4638      	mov	r0, r7
 801f078:	f000 f9d4 	bl	801f424 <_printf_i>
 801f07c:	e7eb      	b.n	801f056 <_svfiprintf_r+0x1c2>
 801f07e:	bf00      	nop
 801f080:	080250d3 	.word	0x080250d3
 801f084:	080250dd 	.word	0x080250dd
 801f088:	00000000 	.word	0x00000000
 801f08c:	0801eddd 	.word	0x0801eddd
 801f090:	080250d9 	.word	0x080250d9

0801f094 <__sfputc_r>:
 801f094:	6893      	ldr	r3, [r2, #8]
 801f096:	3b01      	subs	r3, #1
 801f098:	2b00      	cmp	r3, #0
 801f09a:	b410      	push	{r4}
 801f09c:	6093      	str	r3, [r2, #8]
 801f09e:	da08      	bge.n	801f0b2 <__sfputc_r+0x1e>
 801f0a0:	6994      	ldr	r4, [r2, #24]
 801f0a2:	42a3      	cmp	r3, r4
 801f0a4:	db01      	blt.n	801f0aa <__sfputc_r+0x16>
 801f0a6:	290a      	cmp	r1, #10
 801f0a8:	d103      	bne.n	801f0b2 <__sfputc_r+0x1e>
 801f0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0ae:	f7ff bb63 	b.w	801e778 <__swbuf_r>
 801f0b2:	6813      	ldr	r3, [r2, #0]
 801f0b4:	1c58      	adds	r0, r3, #1
 801f0b6:	6010      	str	r0, [r2, #0]
 801f0b8:	7019      	strb	r1, [r3, #0]
 801f0ba:	4608      	mov	r0, r1
 801f0bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0c0:	4770      	bx	lr

0801f0c2 <__sfputs_r>:
 801f0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0c4:	4606      	mov	r6, r0
 801f0c6:	460f      	mov	r7, r1
 801f0c8:	4614      	mov	r4, r2
 801f0ca:	18d5      	adds	r5, r2, r3
 801f0cc:	42ac      	cmp	r4, r5
 801f0ce:	d101      	bne.n	801f0d4 <__sfputs_r+0x12>
 801f0d0:	2000      	movs	r0, #0
 801f0d2:	e007      	b.n	801f0e4 <__sfputs_r+0x22>
 801f0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0d8:	463a      	mov	r2, r7
 801f0da:	4630      	mov	r0, r6
 801f0dc:	f7ff ffda 	bl	801f094 <__sfputc_r>
 801f0e0:	1c43      	adds	r3, r0, #1
 801f0e2:	d1f3      	bne.n	801f0cc <__sfputs_r+0xa>
 801f0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f0e8 <_vfiprintf_r>:
 801f0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0ec:	460d      	mov	r5, r1
 801f0ee:	b09d      	sub	sp, #116	; 0x74
 801f0f0:	4614      	mov	r4, r2
 801f0f2:	4698      	mov	r8, r3
 801f0f4:	4606      	mov	r6, r0
 801f0f6:	b118      	cbz	r0, 801f100 <_vfiprintf_r+0x18>
 801f0f8:	6983      	ldr	r3, [r0, #24]
 801f0fa:	b90b      	cbnz	r3, 801f100 <_vfiprintf_r+0x18>
 801f0fc:	f7fd fc84 	bl	801ca08 <__sinit>
 801f100:	4b89      	ldr	r3, [pc, #548]	; (801f328 <_vfiprintf_r+0x240>)
 801f102:	429d      	cmp	r5, r3
 801f104:	d11b      	bne.n	801f13e <_vfiprintf_r+0x56>
 801f106:	6875      	ldr	r5, [r6, #4]
 801f108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f10a:	07d9      	lsls	r1, r3, #31
 801f10c:	d405      	bmi.n	801f11a <_vfiprintf_r+0x32>
 801f10e:	89ab      	ldrh	r3, [r5, #12]
 801f110:	059a      	lsls	r2, r3, #22
 801f112:	d402      	bmi.n	801f11a <_vfiprintf_r+0x32>
 801f114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f116:	f7fe f82a 	bl	801d16e <__retarget_lock_acquire_recursive>
 801f11a:	89ab      	ldrh	r3, [r5, #12]
 801f11c:	071b      	lsls	r3, r3, #28
 801f11e:	d501      	bpl.n	801f124 <_vfiprintf_r+0x3c>
 801f120:	692b      	ldr	r3, [r5, #16]
 801f122:	b9eb      	cbnz	r3, 801f160 <_vfiprintf_r+0x78>
 801f124:	4629      	mov	r1, r5
 801f126:	4630      	mov	r0, r6
 801f128:	f7ff fb8a 	bl	801e840 <__swsetup_r>
 801f12c:	b1c0      	cbz	r0, 801f160 <_vfiprintf_r+0x78>
 801f12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f130:	07dc      	lsls	r4, r3, #31
 801f132:	d50e      	bpl.n	801f152 <_vfiprintf_r+0x6a>
 801f134:	f04f 30ff 	mov.w	r0, #4294967295
 801f138:	b01d      	add	sp, #116	; 0x74
 801f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f13e:	4b7b      	ldr	r3, [pc, #492]	; (801f32c <_vfiprintf_r+0x244>)
 801f140:	429d      	cmp	r5, r3
 801f142:	d101      	bne.n	801f148 <_vfiprintf_r+0x60>
 801f144:	68b5      	ldr	r5, [r6, #8]
 801f146:	e7df      	b.n	801f108 <_vfiprintf_r+0x20>
 801f148:	4b79      	ldr	r3, [pc, #484]	; (801f330 <_vfiprintf_r+0x248>)
 801f14a:	429d      	cmp	r5, r3
 801f14c:	bf08      	it	eq
 801f14e:	68f5      	ldreq	r5, [r6, #12]
 801f150:	e7da      	b.n	801f108 <_vfiprintf_r+0x20>
 801f152:	89ab      	ldrh	r3, [r5, #12]
 801f154:	0598      	lsls	r0, r3, #22
 801f156:	d4ed      	bmi.n	801f134 <_vfiprintf_r+0x4c>
 801f158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f15a:	f7fe f80a 	bl	801d172 <__retarget_lock_release_recursive>
 801f15e:	e7e9      	b.n	801f134 <_vfiprintf_r+0x4c>
 801f160:	2300      	movs	r3, #0
 801f162:	9309      	str	r3, [sp, #36]	; 0x24
 801f164:	2320      	movs	r3, #32
 801f166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f16a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f16e:	2330      	movs	r3, #48	; 0x30
 801f170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f334 <_vfiprintf_r+0x24c>
 801f174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f178:	f04f 0901 	mov.w	r9, #1
 801f17c:	4623      	mov	r3, r4
 801f17e:	469a      	mov	sl, r3
 801f180:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f184:	b10a      	cbz	r2, 801f18a <_vfiprintf_r+0xa2>
 801f186:	2a25      	cmp	r2, #37	; 0x25
 801f188:	d1f9      	bne.n	801f17e <_vfiprintf_r+0x96>
 801f18a:	ebba 0b04 	subs.w	fp, sl, r4
 801f18e:	d00b      	beq.n	801f1a8 <_vfiprintf_r+0xc0>
 801f190:	465b      	mov	r3, fp
 801f192:	4622      	mov	r2, r4
 801f194:	4629      	mov	r1, r5
 801f196:	4630      	mov	r0, r6
 801f198:	f7ff ff93 	bl	801f0c2 <__sfputs_r>
 801f19c:	3001      	adds	r0, #1
 801f19e:	f000 80aa 	beq.w	801f2f6 <_vfiprintf_r+0x20e>
 801f1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f1a4:	445a      	add	r2, fp
 801f1a6:	9209      	str	r2, [sp, #36]	; 0x24
 801f1a8:	f89a 3000 	ldrb.w	r3, [sl]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	f000 80a2 	beq.w	801f2f6 <_vfiprintf_r+0x20e>
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	f04f 32ff 	mov.w	r2, #4294967295
 801f1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f1bc:	f10a 0a01 	add.w	sl, sl, #1
 801f1c0:	9304      	str	r3, [sp, #16]
 801f1c2:	9307      	str	r3, [sp, #28]
 801f1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f1c8:	931a      	str	r3, [sp, #104]	; 0x68
 801f1ca:	4654      	mov	r4, sl
 801f1cc:	2205      	movs	r2, #5
 801f1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f1d2:	4858      	ldr	r0, [pc, #352]	; (801f334 <_vfiprintf_r+0x24c>)
 801f1d4:	f7e1 f844 	bl	8000260 <memchr>
 801f1d8:	9a04      	ldr	r2, [sp, #16]
 801f1da:	b9d8      	cbnz	r0, 801f214 <_vfiprintf_r+0x12c>
 801f1dc:	06d1      	lsls	r1, r2, #27
 801f1de:	bf44      	itt	mi
 801f1e0:	2320      	movmi	r3, #32
 801f1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f1e6:	0713      	lsls	r3, r2, #28
 801f1e8:	bf44      	itt	mi
 801f1ea:	232b      	movmi	r3, #43	; 0x2b
 801f1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f1f0:	f89a 3000 	ldrb.w	r3, [sl]
 801f1f4:	2b2a      	cmp	r3, #42	; 0x2a
 801f1f6:	d015      	beq.n	801f224 <_vfiprintf_r+0x13c>
 801f1f8:	9a07      	ldr	r2, [sp, #28]
 801f1fa:	4654      	mov	r4, sl
 801f1fc:	2000      	movs	r0, #0
 801f1fe:	f04f 0c0a 	mov.w	ip, #10
 801f202:	4621      	mov	r1, r4
 801f204:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f208:	3b30      	subs	r3, #48	; 0x30
 801f20a:	2b09      	cmp	r3, #9
 801f20c:	d94e      	bls.n	801f2ac <_vfiprintf_r+0x1c4>
 801f20e:	b1b0      	cbz	r0, 801f23e <_vfiprintf_r+0x156>
 801f210:	9207      	str	r2, [sp, #28]
 801f212:	e014      	b.n	801f23e <_vfiprintf_r+0x156>
 801f214:	eba0 0308 	sub.w	r3, r0, r8
 801f218:	fa09 f303 	lsl.w	r3, r9, r3
 801f21c:	4313      	orrs	r3, r2
 801f21e:	9304      	str	r3, [sp, #16]
 801f220:	46a2      	mov	sl, r4
 801f222:	e7d2      	b.n	801f1ca <_vfiprintf_r+0xe2>
 801f224:	9b03      	ldr	r3, [sp, #12]
 801f226:	1d19      	adds	r1, r3, #4
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	9103      	str	r1, [sp, #12]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	bfbb      	ittet	lt
 801f230:	425b      	neglt	r3, r3
 801f232:	f042 0202 	orrlt.w	r2, r2, #2
 801f236:	9307      	strge	r3, [sp, #28]
 801f238:	9307      	strlt	r3, [sp, #28]
 801f23a:	bfb8      	it	lt
 801f23c:	9204      	strlt	r2, [sp, #16]
 801f23e:	7823      	ldrb	r3, [r4, #0]
 801f240:	2b2e      	cmp	r3, #46	; 0x2e
 801f242:	d10c      	bne.n	801f25e <_vfiprintf_r+0x176>
 801f244:	7863      	ldrb	r3, [r4, #1]
 801f246:	2b2a      	cmp	r3, #42	; 0x2a
 801f248:	d135      	bne.n	801f2b6 <_vfiprintf_r+0x1ce>
 801f24a:	9b03      	ldr	r3, [sp, #12]
 801f24c:	1d1a      	adds	r2, r3, #4
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	9203      	str	r2, [sp, #12]
 801f252:	2b00      	cmp	r3, #0
 801f254:	bfb8      	it	lt
 801f256:	f04f 33ff 	movlt.w	r3, #4294967295
 801f25a:	3402      	adds	r4, #2
 801f25c:	9305      	str	r3, [sp, #20]
 801f25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f344 <_vfiprintf_r+0x25c>
 801f262:	7821      	ldrb	r1, [r4, #0]
 801f264:	2203      	movs	r2, #3
 801f266:	4650      	mov	r0, sl
 801f268:	f7e0 fffa 	bl	8000260 <memchr>
 801f26c:	b140      	cbz	r0, 801f280 <_vfiprintf_r+0x198>
 801f26e:	2340      	movs	r3, #64	; 0x40
 801f270:	eba0 000a 	sub.w	r0, r0, sl
 801f274:	fa03 f000 	lsl.w	r0, r3, r0
 801f278:	9b04      	ldr	r3, [sp, #16]
 801f27a:	4303      	orrs	r3, r0
 801f27c:	3401      	adds	r4, #1
 801f27e:	9304      	str	r3, [sp, #16]
 801f280:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f284:	482c      	ldr	r0, [pc, #176]	; (801f338 <_vfiprintf_r+0x250>)
 801f286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f28a:	2206      	movs	r2, #6
 801f28c:	f7e0 ffe8 	bl	8000260 <memchr>
 801f290:	2800      	cmp	r0, #0
 801f292:	d03f      	beq.n	801f314 <_vfiprintf_r+0x22c>
 801f294:	4b29      	ldr	r3, [pc, #164]	; (801f33c <_vfiprintf_r+0x254>)
 801f296:	bb1b      	cbnz	r3, 801f2e0 <_vfiprintf_r+0x1f8>
 801f298:	9b03      	ldr	r3, [sp, #12]
 801f29a:	3307      	adds	r3, #7
 801f29c:	f023 0307 	bic.w	r3, r3, #7
 801f2a0:	3308      	adds	r3, #8
 801f2a2:	9303      	str	r3, [sp, #12]
 801f2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f2a6:	443b      	add	r3, r7
 801f2a8:	9309      	str	r3, [sp, #36]	; 0x24
 801f2aa:	e767      	b.n	801f17c <_vfiprintf_r+0x94>
 801f2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801f2b0:	460c      	mov	r4, r1
 801f2b2:	2001      	movs	r0, #1
 801f2b4:	e7a5      	b.n	801f202 <_vfiprintf_r+0x11a>
 801f2b6:	2300      	movs	r3, #0
 801f2b8:	3401      	adds	r4, #1
 801f2ba:	9305      	str	r3, [sp, #20]
 801f2bc:	4619      	mov	r1, r3
 801f2be:	f04f 0c0a 	mov.w	ip, #10
 801f2c2:	4620      	mov	r0, r4
 801f2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f2c8:	3a30      	subs	r2, #48	; 0x30
 801f2ca:	2a09      	cmp	r2, #9
 801f2cc:	d903      	bls.n	801f2d6 <_vfiprintf_r+0x1ee>
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d0c5      	beq.n	801f25e <_vfiprintf_r+0x176>
 801f2d2:	9105      	str	r1, [sp, #20]
 801f2d4:	e7c3      	b.n	801f25e <_vfiprintf_r+0x176>
 801f2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f2da:	4604      	mov	r4, r0
 801f2dc:	2301      	movs	r3, #1
 801f2de:	e7f0      	b.n	801f2c2 <_vfiprintf_r+0x1da>
 801f2e0:	ab03      	add	r3, sp, #12
 801f2e2:	9300      	str	r3, [sp, #0]
 801f2e4:	462a      	mov	r2, r5
 801f2e6:	4b16      	ldr	r3, [pc, #88]	; (801f340 <_vfiprintf_r+0x258>)
 801f2e8:	a904      	add	r1, sp, #16
 801f2ea:	4630      	mov	r0, r6
 801f2ec:	f3af 8000 	nop.w
 801f2f0:	4607      	mov	r7, r0
 801f2f2:	1c78      	adds	r0, r7, #1
 801f2f4:	d1d6      	bne.n	801f2a4 <_vfiprintf_r+0x1bc>
 801f2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f2f8:	07d9      	lsls	r1, r3, #31
 801f2fa:	d405      	bmi.n	801f308 <_vfiprintf_r+0x220>
 801f2fc:	89ab      	ldrh	r3, [r5, #12]
 801f2fe:	059a      	lsls	r2, r3, #22
 801f300:	d402      	bmi.n	801f308 <_vfiprintf_r+0x220>
 801f302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f304:	f7fd ff35 	bl	801d172 <__retarget_lock_release_recursive>
 801f308:	89ab      	ldrh	r3, [r5, #12]
 801f30a:	065b      	lsls	r3, r3, #25
 801f30c:	f53f af12 	bmi.w	801f134 <_vfiprintf_r+0x4c>
 801f310:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f312:	e711      	b.n	801f138 <_vfiprintf_r+0x50>
 801f314:	ab03      	add	r3, sp, #12
 801f316:	9300      	str	r3, [sp, #0]
 801f318:	462a      	mov	r2, r5
 801f31a:	4b09      	ldr	r3, [pc, #36]	; (801f340 <_vfiprintf_r+0x258>)
 801f31c:	a904      	add	r1, sp, #16
 801f31e:	4630      	mov	r0, r6
 801f320:	f000 f880 	bl	801f424 <_printf_i>
 801f324:	e7e4      	b.n	801f2f0 <_vfiprintf_r+0x208>
 801f326:	bf00      	nop
 801f328:	08024b54 	.word	0x08024b54
 801f32c:	08024b74 	.word	0x08024b74
 801f330:	08024b34 	.word	0x08024b34
 801f334:	080250d3 	.word	0x080250d3
 801f338:	080250dd 	.word	0x080250dd
 801f33c:	00000000 	.word	0x00000000
 801f340:	0801f0c3 	.word	0x0801f0c3
 801f344:	080250d9 	.word	0x080250d9

0801f348 <_printf_common>:
 801f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f34c:	4616      	mov	r6, r2
 801f34e:	4699      	mov	r9, r3
 801f350:	688a      	ldr	r2, [r1, #8]
 801f352:	690b      	ldr	r3, [r1, #16]
 801f354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f358:	4293      	cmp	r3, r2
 801f35a:	bfb8      	it	lt
 801f35c:	4613      	movlt	r3, r2
 801f35e:	6033      	str	r3, [r6, #0]
 801f360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f364:	4607      	mov	r7, r0
 801f366:	460c      	mov	r4, r1
 801f368:	b10a      	cbz	r2, 801f36e <_printf_common+0x26>
 801f36a:	3301      	adds	r3, #1
 801f36c:	6033      	str	r3, [r6, #0]
 801f36e:	6823      	ldr	r3, [r4, #0]
 801f370:	0699      	lsls	r1, r3, #26
 801f372:	bf42      	ittt	mi
 801f374:	6833      	ldrmi	r3, [r6, #0]
 801f376:	3302      	addmi	r3, #2
 801f378:	6033      	strmi	r3, [r6, #0]
 801f37a:	6825      	ldr	r5, [r4, #0]
 801f37c:	f015 0506 	ands.w	r5, r5, #6
 801f380:	d106      	bne.n	801f390 <_printf_common+0x48>
 801f382:	f104 0a19 	add.w	sl, r4, #25
 801f386:	68e3      	ldr	r3, [r4, #12]
 801f388:	6832      	ldr	r2, [r6, #0]
 801f38a:	1a9b      	subs	r3, r3, r2
 801f38c:	42ab      	cmp	r3, r5
 801f38e:	dc26      	bgt.n	801f3de <_printf_common+0x96>
 801f390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f394:	1e13      	subs	r3, r2, #0
 801f396:	6822      	ldr	r2, [r4, #0]
 801f398:	bf18      	it	ne
 801f39a:	2301      	movne	r3, #1
 801f39c:	0692      	lsls	r2, r2, #26
 801f39e:	d42b      	bmi.n	801f3f8 <_printf_common+0xb0>
 801f3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f3a4:	4649      	mov	r1, r9
 801f3a6:	4638      	mov	r0, r7
 801f3a8:	47c0      	blx	r8
 801f3aa:	3001      	adds	r0, #1
 801f3ac:	d01e      	beq.n	801f3ec <_printf_common+0xa4>
 801f3ae:	6823      	ldr	r3, [r4, #0]
 801f3b0:	68e5      	ldr	r5, [r4, #12]
 801f3b2:	6832      	ldr	r2, [r6, #0]
 801f3b4:	f003 0306 	and.w	r3, r3, #6
 801f3b8:	2b04      	cmp	r3, #4
 801f3ba:	bf08      	it	eq
 801f3bc:	1aad      	subeq	r5, r5, r2
 801f3be:	68a3      	ldr	r3, [r4, #8]
 801f3c0:	6922      	ldr	r2, [r4, #16]
 801f3c2:	bf0c      	ite	eq
 801f3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f3c8:	2500      	movne	r5, #0
 801f3ca:	4293      	cmp	r3, r2
 801f3cc:	bfc4      	itt	gt
 801f3ce:	1a9b      	subgt	r3, r3, r2
 801f3d0:	18ed      	addgt	r5, r5, r3
 801f3d2:	2600      	movs	r6, #0
 801f3d4:	341a      	adds	r4, #26
 801f3d6:	42b5      	cmp	r5, r6
 801f3d8:	d11a      	bne.n	801f410 <_printf_common+0xc8>
 801f3da:	2000      	movs	r0, #0
 801f3dc:	e008      	b.n	801f3f0 <_printf_common+0xa8>
 801f3de:	2301      	movs	r3, #1
 801f3e0:	4652      	mov	r2, sl
 801f3e2:	4649      	mov	r1, r9
 801f3e4:	4638      	mov	r0, r7
 801f3e6:	47c0      	blx	r8
 801f3e8:	3001      	adds	r0, #1
 801f3ea:	d103      	bne.n	801f3f4 <_printf_common+0xac>
 801f3ec:	f04f 30ff 	mov.w	r0, #4294967295
 801f3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f3f4:	3501      	adds	r5, #1
 801f3f6:	e7c6      	b.n	801f386 <_printf_common+0x3e>
 801f3f8:	18e1      	adds	r1, r4, r3
 801f3fa:	1c5a      	adds	r2, r3, #1
 801f3fc:	2030      	movs	r0, #48	; 0x30
 801f3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f402:	4422      	add	r2, r4
 801f404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f40c:	3302      	adds	r3, #2
 801f40e:	e7c7      	b.n	801f3a0 <_printf_common+0x58>
 801f410:	2301      	movs	r3, #1
 801f412:	4622      	mov	r2, r4
 801f414:	4649      	mov	r1, r9
 801f416:	4638      	mov	r0, r7
 801f418:	47c0      	blx	r8
 801f41a:	3001      	adds	r0, #1
 801f41c:	d0e6      	beq.n	801f3ec <_printf_common+0xa4>
 801f41e:	3601      	adds	r6, #1
 801f420:	e7d9      	b.n	801f3d6 <_printf_common+0x8e>
	...

0801f424 <_printf_i>:
 801f424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f428:	460c      	mov	r4, r1
 801f42a:	4691      	mov	r9, r2
 801f42c:	7e27      	ldrb	r7, [r4, #24]
 801f42e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f430:	2f78      	cmp	r7, #120	; 0x78
 801f432:	4680      	mov	r8, r0
 801f434:	469a      	mov	sl, r3
 801f436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f43a:	d807      	bhi.n	801f44c <_printf_i+0x28>
 801f43c:	2f62      	cmp	r7, #98	; 0x62
 801f43e:	d80a      	bhi.n	801f456 <_printf_i+0x32>
 801f440:	2f00      	cmp	r7, #0
 801f442:	f000 80d8 	beq.w	801f5f6 <_printf_i+0x1d2>
 801f446:	2f58      	cmp	r7, #88	; 0x58
 801f448:	f000 80a3 	beq.w	801f592 <_printf_i+0x16e>
 801f44c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f454:	e03a      	b.n	801f4cc <_printf_i+0xa8>
 801f456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f45a:	2b15      	cmp	r3, #21
 801f45c:	d8f6      	bhi.n	801f44c <_printf_i+0x28>
 801f45e:	a001      	add	r0, pc, #4	; (adr r0, 801f464 <_printf_i+0x40>)
 801f460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f464:	0801f4bd 	.word	0x0801f4bd
 801f468:	0801f4d1 	.word	0x0801f4d1
 801f46c:	0801f44d 	.word	0x0801f44d
 801f470:	0801f44d 	.word	0x0801f44d
 801f474:	0801f44d 	.word	0x0801f44d
 801f478:	0801f44d 	.word	0x0801f44d
 801f47c:	0801f4d1 	.word	0x0801f4d1
 801f480:	0801f44d 	.word	0x0801f44d
 801f484:	0801f44d 	.word	0x0801f44d
 801f488:	0801f44d 	.word	0x0801f44d
 801f48c:	0801f44d 	.word	0x0801f44d
 801f490:	0801f5dd 	.word	0x0801f5dd
 801f494:	0801f501 	.word	0x0801f501
 801f498:	0801f5bf 	.word	0x0801f5bf
 801f49c:	0801f44d 	.word	0x0801f44d
 801f4a0:	0801f44d 	.word	0x0801f44d
 801f4a4:	0801f5ff 	.word	0x0801f5ff
 801f4a8:	0801f44d 	.word	0x0801f44d
 801f4ac:	0801f501 	.word	0x0801f501
 801f4b0:	0801f44d 	.word	0x0801f44d
 801f4b4:	0801f44d 	.word	0x0801f44d
 801f4b8:	0801f5c7 	.word	0x0801f5c7
 801f4bc:	680b      	ldr	r3, [r1, #0]
 801f4be:	1d1a      	adds	r2, r3, #4
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	600a      	str	r2, [r1, #0]
 801f4c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f4cc:	2301      	movs	r3, #1
 801f4ce:	e0a3      	b.n	801f618 <_printf_i+0x1f4>
 801f4d0:	6825      	ldr	r5, [r4, #0]
 801f4d2:	6808      	ldr	r0, [r1, #0]
 801f4d4:	062e      	lsls	r6, r5, #24
 801f4d6:	f100 0304 	add.w	r3, r0, #4
 801f4da:	d50a      	bpl.n	801f4f2 <_printf_i+0xce>
 801f4dc:	6805      	ldr	r5, [r0, #0]
 801f4de:	600b      	str	r3, [r1, #0]
 801f4e0:	2d00      	cmp	r5, #0
 801f4e2:	da03      	bge.n	801f4ec <_printf_i+0xc8>
 801f4e4:	232d      	movs	r3, #45	; 0x2d
 801f4e6:	426d      	negs	r5, r5
 801f4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f4ec:	485e      	ldr	r0, [pc, #376]	; (801f668 <_printf_i+0x244>)
 801f4ee:	230a      	movs	r3, #10
 801f4f0:	e019      	b.n	801f526 <_printf_i+0x102>
 801f4f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f4f6:	6805      	ldr	r5, [r0, #0]
 801f4f8:	600b      	str	r3, [r1, #0]
 801f4fa:	bf18      	it	ne
 801f4fc:	b22d      	sxthne	r5, r5
 801f4fe:	e7ef      	b.n	801f4e0 <_printf_i+0xbc>
 801f500:	680b      	ldr	r3, [r1, #0]
 801f502:	6825      	ldr	r5, [r4, #0]
 801f504:	1d18      	adds	r0, r3, #4
 801f506:	6008      	str	r0, [r1, #0]
 801f508:	0628      	lsls	r0, r5, #24
 801f50a:	d501      	bpl.n	801f510 <_printf_i+0xec>
 801f50c:	681d      	ldr	r5, [r3, #0]
 801f50e:	e002      	b.n	801f516 <_printf_i+0xf2>
 801f510:	0669      	lsls	r1, r5, #25
 801f512:	d5fb      	bpl.n	801f50c <_printf_i+0xe8>
 801f514:	881d      	ldrh	r5, [r3, #0]
 801f516:	4854      	ldr	r0, [pc, #336]	; (801f668 <_printf_i+0x244>)
 801f518:	2f6f      	cmp	r7, #111	; 0x6f
 801f51a:	bf0c      	ite	eq
 801f51c:	2308      	moveq	r3, #8
 801f51e:	230a      	movne	r3, #10
 801f520:	2100      	movs	r1, #0
 801f522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f526:	6866      	ldr	r6, [r4, #4]
 801f528:	60a6      	str	r6, [r4, #8]
 801f52a:	2e00      	cmp	r6, #0
 801f52c:	bfa2      	ittt	ge
 801f52e:	6821      	ldrge	r1, [r4, #0]
 801f530:	f021 0104 	bicge.w	r1, r1, #4
 801f534:	6021      	strge	r1, [r4, #0]
 801f536:	b90d      	cbnz	r5, 801f53c <_printf_i+0x118>
 801f538:	2e00      	cmp	r6, #0
 801f53a:	d04d      	beq.n	801f5d8 <_printf_i+0x1b4>
 801f53c:	4616      	mov	r6, r2
 801f53e:	fbb5 f1f3 	udiv	r1, r5, r3
 801f542:	fb03 5711 	mls	r7, r3, r1, r5
 801f546:	5dc7      	ldrb	r7, [r0, r7]
 801f548:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f54c:	462f      	mov	r7, r5
 801f54e:	42bb      	cmp	r3, r7
 801f550:	460d      	mov	r5, r1
 801f552:	d9f4      	bls.n	801f53e <_printf_i+0x11a>
 801f554:	2b08      	cmp	r3, #8
 801f556:	d10b      	bne.n	801f570 <_printf_i+0x14c>
 801f558:	6823      	ldr	r3, [r4, #0]
 801f55a:	07df      	lsls	r7, r3, #31
 801f55c:	d508      	bpl.n	801f570 <_printf_i+0x14c>
 801f55e:	6923      	ldr	r3, [r4, #16]
 801f560:	6861      	ldr	r1, [r4, #4]
 801f562:	4299      	cmp	r1, r3
 801f564:	bfde      	ittt	le
 801f566:	2330      	movle	r3, #48	; 0x30
 801f568:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f56c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f570:	1b92      	subs	r2, r2, r6
 801f572:	6122      	str	r2, [r4, #16]
 801f574:	f8cd a000 	str.w	sl, [sp]
 801f578:	464b      	mov	r3, r9
 801f57a:	aa03      	add	r2, sp, #12
 801f57c:	4621      	mov	r1, r4
 801f57e:	4640      	mov	r0, r8
 801f580:	f7ff fee2 	bl	801f348 <_printf_common>
 801f584:	3001      	adds	r0, #1
 801f586:	d14c      	bne.n	801f622 <_printf_i+0x1fe>
 801f588:	f04f 30ff 	mov.w	r0, #4294967295
 801f58c:	b004      	add	sp, #16
 801f58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f592:	4835      	ldr	r0, [pc, #212]	; (801f668 <_printf_i+0x244>)
 801f594:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f598:	6823      	ldr	r3, [r4, #0]
 801f59a:	680e      	ldr	r6, [r1, #0]
 801f59c:	061f      	lsls	r7, r3, #24
 801f59e:	f856 5b04 	ldr.w	r5, [r6], #4
 801f5a2:	600e      	str	r6, [r1, #0]
 801f5a4:	d514      	bpl.n	801f5d0 <_printf_i+0x1ac>
 801f5a6:	07d9      	lsls	r1, r3, #31
 801f5a8:	bf44      	itt	mi
 801f5aa:	f043 0320 	orrmi.w	r3, r3, #32
 801f5ae:	6023      	strmi	r3, [r4, #0]
 801f5b0:	b91d      	cbnz	r5, 801f5ba <_printf_i+0x196>
 801f5b2:	6823      	ldr	r3, [r4, #0]
 801f5b4:	f023 0320 	bic.w	r3, r3, #32
 801f5b8:	6023      	str	r3, [r4, #0]
 801f5ba:	2310      	movs	r3, #16
 801f5bc:	e7b0      	b.n	801f520 <_printf_i+0xfc>
 801f5be:	6823      	ldr	r3, [r4, #0]
 801f5c0:	f043 0320 	orr.w	r3, r3, #32
 801f5c4:	6023      	str	r3, [r4, #0]
 801f5c6:	2378      	movs	r3, #120	; 0x78
 801f5c8:	4828      	ldr	r0, [pc, #160]	; (801f66c <_printf_i+0x248>)
 801f5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f5ce:	e7e3      	b.n	801f598 <_printf_i+0x174>
 801f5d0:	065e      	lsls	r6, r3, #25
 801f5d2:	bf48      	it	mi
 801f5d4:	b2ad      	uxthmi	r5, r5
 801f5d6:	e7e6      	b.n	801f5a6 <_printf_i+0x182>
 801f5d8:	4616      	mov	r6, r2
 801f5da:	e7bb      	b.n	801f554 <_printf_i+0x130>
 801f5dc:	680b      	ldr	r3, [r1, #0]
 801f5de:	6826      	ldr	r6, [r4, #0]
 801f5e0:	6960      	ldr	r0, [r4, #20]
 801f5e2:	1d1d      	adds	r5, r3, #4
 801f5e4:	600d      	str	r5, [r1, #0]
 801f5e6:	0635      	lsls	r5, r6, #24
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	d501      	bpl.n	801f5f0 <_printf_i+0x1cc>
 801f5ec:	6018      	str	r0, [r3, #0]
 801f5ee:	e002      	b.n	801f5f6 <_printf_i+0x1d2>
 801f5f0:	0671      	lsls	r1, r6, #25
 801f5f2:	d5fb      	bpl.n	801f5ec <_printf_i+0x1c8>
 801f5f4:	8018      	strh	r0, [r3, #0]
 801f5f6:	2300      	movs	r3, #0
 801f5f8:	6123      	str	r3, [r4, #16]
 801f5fa:	4616      	mov	r6, r2
 801f5fc:	e7ba      	b.n	801f574 <_printf_i+0x150>
 801f5fe:	680b      	ldr	r3, [r1, #0]
 801f600:	1d1a      	adds	r2, r3, #4
 801f602:	600a      	str	r2, [r1, #0]
 801f604:	681e      	ldr	r6, [r3, #0]
 801f606:	6862      	ldr	r2, [r4, #4]
 801f608:	2100      	movs	r1, #0
 801f60a:	4630      	mov	r0, r6
 801f60c:	f7e0 fe28 	bl	8000260 <memchr>
 801f610:	b108      	cbz	r0, 801f616 <_printf_i+0x1f2>
 801f612:	1b80      	subs	r0, r0, r6
 801f614:	6060      	str	r0, [r4, #4]
 801f616:	6863      	ldr	r3, [r4, #4]
 801f618:	6123      	str	r3, [r4, #16]
 801f61a:	2300      	movs	r3, #0
 801f61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f620:	e7a8      	b.n	801f574 <_printf_i+0x150>
 801f622:	6923      	ldr	r3, [r4, #16]
 801f624:	4632      	mov	r2, r6
 801f626:	4649      	mov	r1, r9
 801f628:	4640      	mov	r0, r8
 801f62a:	47d0      	blx	sl
 801f62c:	3001      	adds	r0, #1
 801f62e:	d0ab      	beq.n	801f588 <_printf_i+0x164>
 801f630:	6823      	ldr	r3, [r4, #0]
 801f632:	079b      	lsls	r3, r3, #30
 801f634:	d413      	bmi.n	801f65e <_printf_i+0x23a>
 801f636:	68e0      	ldr	r0, [r4, #12]
 801f638:	9b03      	ldr	r3, [sp, #12]
 801f63a:	4298      	cmp	r0, r3
 801f63c:	bfb8      	it	lt
 801f63e:	4618      	movlt	r0, r3
 801f640:	e7a4      	b.n	801f58c <_printf_i+0x168>
 801f642:	2301      	movs	r3, #1
 801f644:	4632      	mov	r2, r6
 801f646:	4649      	mov	r1, r9
 801f648:	4640      	mov	r0, r8
 801f64a:	47d0      	blx	sl
 801f64c:	3001      	adds	r0, #1
 801f64e:	d09b      	beq.n	801f588 <_printf_i+0x164>
 801f650:	3501      	adds	r5, #1
 801f652:	68e3      	ldr	r3, [r4, #12]
 801f654:	9903      	ldr	r1, [sp, #12]
 801f656:	1a5b      	subs	r3, r3, r1
 801f658:	42ab      	cmp	r3, r5
 801f65a:	dcf2      	bgt.n	801f642 <_printf_i+0x21e>
 801f65c:	e7eb      	b.n	801f636 <_printf_i+0x212>
 801f65e:	2500      	movs	r5, #0
 801f660:	f104 0619 	add.w	r6, r4, #25
 801f664:	e7f5      	b.n	801f652 <_printf_i+0x22e>
 801f666:	bf00      	nop
 801f668:	080250e4 	.word	0x080250e4
 801f66c:	080250f5 	.word	0x080250f5

0801f670 <_putc_r>:
 801f670:	b570      	push	{r4, r5, r6, lr}
 801f672:	460d      	mov	r5, r1
 801f674:	4614      	mov	r4, r2
 801f676:	4606      	mov	r6, r0
 801f678:	b118      	cbz	r0, 801f682 <_putc_r+0x12>
 801f67a:	6983      	ldr	r3, [r0, #24]
 801f67c:	b90b      	cbnz	r3, 801f682 <_putc_r+0x12>
 801f67e:	f7fd f9c3 	bl	801ca08 <__sinit>
 801f682:	4b1c      	ldr	r3, [pc, #112]	; (801f6f4 <_putc_r+0x84>)
 801f684:	429c      	cmp	r4, r3
 801f686:	d124      	bne.n	801f6d2 <_putc_r+0x62>
 801f688:	6874      	ldr	r4, [r6, #4]
 801f68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f68c:	07d8      	lsls	r0, r3, #31
 801f68e:	d405      	bmi.n	801f69c <_putc_r+0x2c>
 801f690:	89a3      	ldrh	r3, [r4, #12]
 801f692:	0599      	lsls	r1, r3, #22
 801f694:	d402      	bmi.n	801f69c <_putc_r+0x2c>
 801f696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f698:	f7fd fd69 	bl	801d16e <__retarget_lock_acquire_recursive>
 801f69c:	68a3      	ldr	r3, [r4, #8]
 801f69e:	3b01      	subs	r3, #1
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	60a3      	str	r3, [r4, #8]
 801f6a4:	da05      	bge.n	801f6b2 <_putc_r+0x42>
 801f6a6:	69a2      	ldr	r2, [r4, #24]
 801f6a8:	4293      	cmp	r3, r2
 801f6aa:	db1c      	blt.n	801f6e6 <_putc_r+0x76>
 801f6ac:	b2eb      	uxtb	r3, r5
 801f6ae:	2b0a      	cmp	r3, #10
 801f6b0:	d019      	beq.n	801f6e6 <_putc_r+0x76>
 801f6b2:	6823      	ldr	r3, [r4, #0]
 801f6b4:	1c5a      	adds	r2, r3, #1
 801f6b6:	6022      	str	r2, [r4, #0]
 801f6b8:	701d      	strb	r5, [r3, #0]
 801f6ba:	b2ed      	uxtb	r5, r5
 801f6bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f6be:	07da      	lsls	r2, r3, #31
 801f6c0:	d405      	bmi.n	801f6ce <_putc_r+0x5e>
 801f6c2:	89a3      	ldrh	r3, [r4, #12]
 801f6c4:	059b      	lsls	r3, r3, #22
 801f6c6:	d402      	bmi.n	801f6ce <_putc_r+0x5e>
 801f6c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f6ca:	f7fd fd52 	bl	801d172 <__retarget_lock_release_recursive>
 801f6ce:	4628      	mov	r0, r5
 801f6d0:	bd70      	pop	{r4, r5, r6, pc}
 801f6d2:	4b09      	ldr	r3, [pc, #36]	; (801f6f8 <_putc_r+0x88>)
 801f6d4:	429c      	cmp	r4, r3
 801f6d6:	d101      	bne.n	801f6dc <_putc_r+0x6c>
 801f6d8:	68b4      	ldr	r4, [r6, #8]
 801f6da:	e7d6      	b.n	801f68a <_putc_r+0x1a>
 801f6dc:	4b07      	ldr	r3, [pc, #28]	; (801f6fc <_putc_r+0x8c>)
 801f6de:	429c      	cmp	r4, r3
 801f6e0:	bf08      	it	eq
 801f6e2:	68f4      	ldreq	r4, [r6, #12]
 801f6e4:	e7d1      	b.n	801f68a <_putc_r+0x1a>
 801f6e6:	4629      	mov	r1, r5
 801f6e8:	4622      	mov	r2, r4
 801f6ea:	4630      	mov	r0, r6
 801f6ec:	f7ff f844 	bl	801e778 <__swbuf_r>
 801f6f0:	4605      	mov	r5, r0
 801f6f2:	e7e3      	b.n	801f6bc <_putc_r+0x4c>
 801f6f4:	08024b54 	.word	0x08024b54
 801f6f8:	08024b74 	.word	0x08024b74
 801f6fc:	08024b34 	.word	0x08024b34

0801f700 <_read_r>:
 801f700:	b538      	push	{r3, r4, r5, lr}
 801f702:	4d07      	ldr	r5, [pc, #28]	; (801f720 <_read_r+0x20>)
 801f704:	4604      	mov	r4, r0
 801f706:	4608      	mov	r0, r1
 801f708:	4611      	mov	r1, r2
 801f70a:	2200      	movs	r2, #0
 801f70c:	602a      	str	r2, [r5, #0]
 801f70e:	461a      	mov	r2, r3
 801f710:	f7e1 fb41 	bl	8000d96 <_read>
 801f714:	1c43      	adds	r3, r0, #1
 801f716:	d102      	bne.n	801f71e <_read_r+0x1e>
 801f718:	682b      	ldr	r3, [r5, #0]
 801f71a:	b103      	cbz	r3, 801f71e <_read_r+0x1e>
 801f71c:	6023      	str	r3, [r4, #0]
 801f71e:	bd38      	pop	{r3, r4, r5, pc}
 801f720:	20000d40 	.word	0x20000d40

0801f724 <sniprintf>:
 801f724:	b40c      	push	{r2, r3}
 801f726:	b530      	push	{r4, r5, lr}
 801f728:	4b17      	ldr	r3, [pc, #92]	; (801f788 <sniprintf+0x64>)
 801f72a:	1e0c      	subs	r4, r1, #0
 801f72c:	681d      	ldr	r5, [r3, #0]
 801f72e:	b09d      	sub	sp, #116	; 0x74
 801f730:	da08      	bge.n	801f744 <sniprintf+0x20>
 801f732:	238b      	movs	r3, #139	; 0x8b
 801f734:	602b      	str	r3, [r5, #0]
 801f736:	f04f 30ff 	mov.w	r0, #4294967295
 801f73a:	b01d      	add	sp, #116	; 0x74
 801f73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f740:	b002      	add	sp, #8
 801f742:	4770      	bx	lr
 801f744:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f748:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f74c:	bf14      	ite	ne
 801f74e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f752:	4623      	moveq	r3, r4
 801f754:	9304      	str	r3, [sp, #16]
 801f756:	9307      	str	r3, [sp, #28]
 801f758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f75c:	9002      	str	r0, [sp, #8]
 801f75e:	9006      	str	r0, [sp, #24]
 801f760:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f764:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f766:	ab21      	add	r3, sp, #132	; 0x84
 801f768:	a902      	add	r1, sp, #8
 801f76a:	4628      	mov	r0, r5
 801f76c:	9301      	str	r3, [sp, #4]
 801f76e:	f7ff fb91 	bl	801ee94 <_svfiprintf_r>
 801f772:	1c43      	adds	r3, r0, #1
 801f774:	bfbc      	itt	lt
 801f776:	238b      	movlt	r3, #139	; 0x8b
 801f778:	602b      	strlt	r3, [r5, #0]
 801f77a:	2c00      	cmp	r4, #0
 801f77c:	d0dd      	beq.n	801f73a <sniprintf+0x16>
 801f77e:	9b02      	ldr	r3, [sp, #8]
 801f780:	2200      	movs	r2, #0
 801f782:	701a      	strb	r2, [r3, #0]
 801f784:	e7d9      	b.n	801f73a <sniprintf+0x16>
 801f786:	bf00      	nop
 801f788:	20000104 	.word	0x20000104

0801f78c <siscanf>:
 801f78c:	b40e      	push	{r1, r2, r3}
 801f78e:	b510      	push	{r4, lr}
 801f790:	b09f      	sub	sp, #124	; 0x7c
 801f792:	ac21      	add	r4, sp, #132	; 0x84
 801f794:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f798:	f854 2b04 	ldr.w	r2, [r4], #4
 801f79c:	9201      	str	r2, [sp, #4]
 801f79e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f7a2:	9004      	str	r0, [sp, #16]
 801f7a4:	9008      	str	r0, [sp, #32]
 801f7a6:	f7e0 fd49 	bl	800023c <strlen>
 801f7aa:	4b0c      	ldr	r3, [pc, #48]	; (801f7dc <siscanf+0x50>)
 801f7ac:	9005      	str	r0, [sp, #20]
 801f7ae:	9009      	str	r0, [sp, #36]	; 0x24
 801f7b0:	930d      	str	r3, [sp, #52]	; 0x34
 801f7b2:	480b      	ldr	r0, [pc, #44]	; (801f7e0 <siscanf+0x54>)
 801f7b4:	9a01      	ldr	r2, [sp, #4]
 801f7b6:	6800      	ldr	r0, [r0, #0]
 801f7b8:	9403      	str	r4, [sp, #12]
 801f7ba:	2300      	movs	r3, #0
 801f7bc:	9311      	str	r3, [sp, #68]	; 0x44
 801f7be:	9316      	str	r3, [sp, #88]	; 0x58
 801f7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f7c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f7c8:	a904      	add	r1, sp, #16
 801f7ca:	4623      	mov	r3, r4
 801f7cc:	f000 f8ba 	bl	801f944 <__ssvfiscanf_r>
 801f7d0:	b01f      	add	sp, #124	; 0x7c
 801f7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7d6:	b003      	add	sp, #12
 801f7d8:	4770      	bx	lr
 801f7da:	bf00      	nop
 801f7dc:	0801d603 	.word	0x0801d603
 801f7e0:	20000104 	.word	0x20000104

0801f7e4 <strcpy>:
 801f7e4:	4603      	mov	r3, r0
 801f7e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f7ea:	f803 2b01 	strb.w	r2, [r3], #1
 801f7ee:	2a00      	cmp	r2, #0
 801f7f0:	d1f9      	bne.n	801f7e6 <strcpy+0x2>
 801f7f2:	4770      	bx	lr

0801f7f4 <strncmp>:
 801f7f4:	b510      	push	{r4, lr}
 801f7f6:	b16a      	cbz	r2, 801f814 <strncmp+0x20>
 801f7f8:	3901      	subs	r1, #1
 801f7fa:	1884      	adds	r4, r0, r2
 801f7fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f800:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f804:	4293      	cmp	r3, r2
 801f806:	d103      	bne.n	801f810 <strncmp+0x1c>
 801f808:	42a0      	cmp	r0, r4
 801f80a:	d001      	beq.n	801f810 <strncmp+0x1c>
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d1f5      	bne.n	801f7fc <strncmp+0x8>
 801f810:	1a98      	subs	r0, r3, r2
 801f812:	bd10      	pop	{r4, pc}
 801f814:	4610      	mov	r0, r2
 801f816:	e7fc      	b.n	801f812 <strncmp+0x1e>

0801f818 <__ascii_wctomb>:
 801f818:	b149      	cbz	r1, 801f82e <__ascii_wctomb+0x16>
 801f81a:	2aff      	cmp	r2, #255	; 0xff
 801f81c:	bf85      	ittet	hi
 801f81e:	238a      	movhi	r3, #138	; 0x8a
 801f820:	6003      	strhi	r3, [r0, #0]
 801f822:	700a      	strbls	r2, [r1, #0]
 801f824:	f04f 30ff 	movhi.w	r0, #4294967295
 801f828:	bf98      	it	ls
 801f82a:	2001      	movls	r0, #1
 801f82c:	4770      	bx	lr
 801f82e:	4608      	mov	r0, r1
 801f830:	4770      	bx	lr
	...

0801f834 <__env_lock>:
 801f834:	4801      	ldr	r0, [pc, #4]	; (801f83c <__env_lock+0x8>)
 801f836:	f7fd bc9a 	b.w	801d16e <__retarget_lock_acquire_recursive>
 801f83a:	bf00      	nop
 801f83c:	20000d36 	.word	0x20000d36

0801f840 <__env_unlock>:
 801f840:	4801      	ldr	r0, [pc, #4]	; (801f848 <__env_unlock+0x8>)
 801f842:	f7fd bc96 	b.w	801d172 <__retarget_lock_release_recursive>
 801f846:	bf00      	nop
 801f848:	20000d36 	.word	0x20000d36

0801f84c <memmove>:
 801f84c:	4288      	cmp	r0, r1
 801f84e:	b510      	push	{r4, lr}
 801f850:	eb01 0402 	add.w	r4, r1, r2
 801f854:	d902      	bls.n	801f85c <memmove+0x10>
 801f856:	4284      	cmp	r4, r0
 801f858:	4623      	mov	r3, r4
 801f85a:	d807      	bhi.n	801f86c <memmove+0x20>
 801f85c:	1e43      	subs	r3, r0, #1
 801f85e:	42a1      	cmp	r1, r4
 801f860:	d008      	beq.n	801f874 <memmove+0x28>
 801f862:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f866:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f86a:	e7f8      	b.n	801f85e <memmove+0x12>
 801f86c:	4402      	add	r2, r0
 801f86e:	4601      	mov	r1, r0
 801f870:	428a      	cmp	r2, r1
 801f872:	d100      	bne.n	801f876 <memmove+0x2a>
 801f874:	bd10      	pop	{r4, pc}
 801f876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f87e:	e7f7      	b.n	801f870 <memmove+0x24>

0801f880 <_malloc_usable_size_r>:
 801f880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f884:	1f18      	subs	r0, r3, #4
 801f886:	2b00      	cmp	r3, #0
 801f888:	bfbc      	itt	lt
 801f88a:	580b      	ldrlt	r3, [r1, r0]
 801f88c:	18c0      	addlt	r0, r0, r3
 801f88e:	4770      	bx	lr

0801f890 <_sungetc_r>:
 801f890:	b538      	push	{r3, r4, r5, lr}
 801f892:	1c4b      	adds	r3, r1, #1
 801f894:	4614      	mov	r4, r2
 801f896:	d103      	bne.n	801f8a0 <_sungetc_r+0x10>
 801f898:	f04f 35ff 	mov.w	r5, #4294967295
 801f89c:	4628      	mov	r0, r5
 801f89e:	bd38      	pop	{r3, r4, r5, pc}
 801f8a0:	8993      	ldrh	r3, [r2, #12]
 801f8a2:	f023 0320 	bic.w	r3, r3, #32
 801f8a6:	8193      	strh	r3, [r2, #12]
 801f8a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f8aa:	6852      	ldr	r2, [r2, #4]
 801f8ac:	b2cd      	uxtb	r5, r1
 801f8ae:	b18b      	cbz	r3, 801f8d4 <_sungetc_r+0x44>
 801f8b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	dd08      	ble.n	801f8c8 <_sungetc_r+0x38>
 801f8b6:	6823      	ldr	r3, [r4, #0]
 801f8b8:	1e5a      	subs	r2, r3, #1
 801f8ba:	6022      	str	r2, [r4, #0]
 801f8bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 801f8c0:	6863      	ldr	r3, [r4, #4]
 801f8c2:	3301      	adds	r3, #1
 801f8c4:	6063      	str	r3, [r4, #4]
 801f8c6:	e7e9      	b.n	801f89c <_sungetc_r+0xc>
 801f8c8:	4621      	mov	r1, r4
 801f8ca:	f000 fbbf 	bl	802004c <__submore>
 801f8ce:	2800      	cmp	r0, #0
 801f8d0:	d0f1      	beq.n	801f8b6 <_sungetc_r+0x26>
 801f8d2:	e7e1      	b.n	801f898 <_sungetc_r+0x8>
 801f8d4:	6921      	ldr	r1, [r4, #16]
 801f8d6:	6823      	ldr	r3, [r4, #0]
 801f8d8:	b151      	cbz	r1, 801f8f0 <_sungetc_r+0x60>
 801f8da:	4299      	cmp	r1, r3
 801f8dc:	d208      	bcs.n	801f8f0 <_sungetc_r+0x60>
 801f8de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801f8e2:	42a9      	cmp	r1, r5
 801f8e4:	d104      	bne.n	801f8f0 <_sungetc_r+0x60>
 801f8e6:	3b01      	subs	r3, #1
 801f8e8:	3201      	adds	r2, #1
 801f8ea:	6023      	str	r3, [r4, #0]
 801f8ec:	6062      	str	r2, [r4, #4]
 801f8ee:	e7d5      	b.n	801f89c <_sungetc_r+0xc>
 801f8f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801f8f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f8f8:	6363      	str	r3, [r4, #52]	; 0x34
 801f8fa:	2303      	movs	r3, #3
 801f8fc:	63a3      	str	r3, [r4, #56]	; 0x38
 801f8fe:	4623      	mov	r3, r4
 801f900:	f803 5f46 	strb.w	r5, [r3, #70]!
 801f904:	6023      	str	r3, [r4, #0]
 801f906:	2301      	movs	r3, #1
 801f908:	e7dc      	b.n	801f8c4 <_sungetc_r+0x34>

0801f90a <__ssrefill_r>:
 801f90a:	b510      	push	{r4, lr}
 801f90c:	460c      	mov	r4, r1
 801f90e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f910:	b169      	cbz	r1, 801f92e <__ssrefill_r+0x24>
 801f912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f916:	4299      	cmp	r1, r3
 801f918:	d001      	beq.n	801f91e <__ssrefill_r+0x14>
 801f91a:	f7fd fcc5 	bl	801d2a8 <_free_r>
 801f91e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f920:	6063      	str	r3, [r4, #4]
 801f922:	2000      	movs	r0, #0
 801f924:	6360      	str	r0, [r4, #52]	; 0x34
 801f926:	b113      	cbz	r3, 801f92e <__ssrefill_r+0x24>
 801f928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f92a:	6023      	str	r3, [r4, #0]
 801f92c:	bd10      	pop	{r4, pc}
 801f92e:	6923      	ldr	r3, [r4, #16]
 801f930:	6023      	str	r3, [r4, #0]
 801f932:	2300      	movs	r3, #0
 801f934:	6063      	str	r3, [r4, #4]
 801f936:	89a3      	ldrh	r3, [r4, #12]
 801f938:	f043 0320 	orr.w	r3, r3, #32
 801f93c:	81a3      	strh	r3, [r4, #12]
 801f93e:	f04f 30ff 	mov.w	r0, #4294967295
 801f942:	e7f3      	b.n	801f92c <__ssrefill_r+0x22>

0801f944 <__ssvfiscanf_r>:
 801f944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f948:	460c      	mov	r4, r1
 801f94a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801f94e:	2100      	movs	r1, #0
 801f950:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801f954:	49b2      	ldr	r1, [pc, #712]	; (801fc20 <__ssvfiscanf_r+0x2dc>)
 801f956:	91a0      	str	r1, [sp, #640]	; 0x280
 801f958:	f10d 0804 	add.w	r8, sp, #4
 801f95c:	49b1      	ldr	r1, [pc, #708]	; (801fc24 <__ssvfiscanf_r+0x2e0>)
 801f95e:	4fb2      	ldr	r7, [pc, #712]	; (801fc28 <__ssvfiscanf_r+0x2e4>)
 801f960:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801fc2c <__ssvfiscanf_r+0x2e8>
 801f964:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801f968:	4606      	mov	r6, r0
 801f96a:	91a1      	str	r1, [sp, #644]	; 0x284
 801f96c:	9300      	str	r3, [sp, #0]
 801f96e:	f892 a000 	ldrb.w	sl, [r2]
 801f972:	f1ba 0f00 	cmp.w	sl, #0
 801f976:	f000 8151 	beq.w	801fc1c <__ssvfiscanf_r+0x2d8>
 801f97a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801f97e:	f013 0308 	ands.w	r3, r3, #8
 801f982:	f102 0501 	add.w	r5, r2, #1
 801f986:	d019      	beq.n	801f9bc <__ssvfiscanf_r+0x78>
 801f988:	6863      	ldr	r3, [r4, #4]
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	dd0f      	ble.n	801f9ae <__ssvfiscanf_r+0x6a>
 801f98e:	6823      	ldr	r3, [r4, #0]
 801f990:	781a      	ldrb	r2, [r3, #0]
 801f992:	5cba      	ldrb	r2, [r7, r2]
 801f994:	0712      	lsls	r2, r2, #28
 801f996:	d401      	bmi.n	801f99c <__ssvfiscanf_r+0x58>
 801f998:	462a      	mov	r2, r5
 801f99a:	e7e8      	b.n	801f96e <__ssvfiscanf_r+0x2a>
 801f99c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801f99e:	3201      	adds	r2, #1
 801f9a0:	9245      	str	r2, [sp, #276]	; 0x114
 801f9a2:	6862      	ldr	r2, [r4, #4]
 801f9a4:	3301      	adds	r3, #1
 801f9a6:	3a01      	subs	r2, #1
 801f9a8:	6062      	str	r2, [r4, #4]
 801f9aa:	6023      	str	r3, [r4, #0]
 801f9ac:	e7ec      	b.n	801f988 <__ssvfiscanf_r+0x44>
 801f9ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801f9b0:	4621      	mov	r1, r4
 801f9b2:	4630      	mov	r0, r6
 801f9b4:	4798      	blx	r3
 801f9b6:	2800      	cmp	r0, #0
 801f9b8:	d0e9      	beq.n	801f98e <__ssvfiscanf_r+0x4a>
 801f9ba:	e7ed      	b.n	801f998 <__ssvfiscanf_r+0x54>
 801f9bc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801f9c0:	f040 8083 	bne.w	801faca <__ssvfiscanf_r+0x186>
 801f9c4:	9341      	str	r3, [sp, #260]	; 0x104
 801f9c6:	9343      	str	r3, [sp, #268]	; 0x10c
 801f9c8:	7853      	ldrb	r3, [r2, #1]
 801f9ca:	2b2a      	cmp	r3, #42	; 0x2a
 801f9cc:	bf02      	ittt	eq
 801f9ce:	2310      	moveq	r3, #16
 801f9d0:	1c95      	addeq	r5, r2, #2
 801f9d2:	9341      	streq	r3, [sp, #260]	; 0x104
 801f9d4:	220a      	movs	r2, #10
 801f9d6:	46ab      	mov	fp, r5
 801f9d8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801f9dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801f9e0:	2b09      	cmp	r3, #9
 801f9e2:	d91d      	bls.n	801fa20 <__ssvfiscanf_r+0xdc>
 801f9e4:	4891      	ldr	r0, [pc, #580]	; (801fc2c <__ssvfiscanf_r+0x2e8>)
 801f9e6:	2203      	movs	r2, #3
 801f9e8:	f7e0 fc3a 	bl	8000260 <memchr>
 801f9ec:	b140      	cbz	r0, 801fa00 <__ssvfiscanf_r+0xbc>
 801f9ee:	2301      	movs	r3, #1
 801f9f0:	eba0 0009 	sub.w	r0, r0, r9
 801f9f4:	fa03 f000 	lsl.w	r0, r3, r0
 801f9f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801f9fa:	4318      	orrs	r0, r3
 801f9fc:	9041      	str	r0, [sp, #260]	; 0x104
 801f9fe:	465d      	mov	r5, fp
 801fa00:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fa04:	2b78      	cmp	r3, #120	; 0x78
 801fa06:	d806      	bhi.n	801fa16 <__ssvfiscanf_r+0xd2>
 801fa08:	2b57      	cmp	r3, #87	; 0x57
 801fa0a:	d810      	bhi.n	801fa2e <__ssvfiscanf_r+0xea>
 801fa0c:	2b25      	cmp	r3, #37	; 0x25
 801fa0e:	d05c      	beq.n	801faca <__ssvfiscanf_r+0x186>
 801fa10:	d856      	bhi.n	801fac0 <__ssvfiscanf_r+0x17c>
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d074      	beq.n	801fb00 <__ssvfiscanf_r+0x1bc>
 801fa16:	2303      	movs	r3, #3
 801fa18:	9347      	str	r3, [sp, #284]	; 0x11c
 801fa1a:	230a      	movs	r3, #10
 801fa1c:	9342      	str	r3, [sp, #264]	; 0x108
 801fa1e:	e081      	b.n	801fb24 <__ssvfiscanf_r+0x1e0>
 801fa20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801fa22:	fb02 1303 	mla	r3, r2, r3, r1
 801fa26:	3b30      	subs	r3, #48	; 0x30
 801fa28:	9343      	str	r3, [sp, #268]	; 0x10c
 801fa2a:	465d      	mov	r5, fp
 801fa2c:	e7d3      	b.n	801f9d6 <__ssvfiscanf_r+0x92>
 801fa2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801fa32:	2a20      	cmp	r2, #32
 801fa34:	d8ef      	bhi.n	801fa16 <__ssvfiscanf_r+0xd2>
 801fa36:	a101      	add	r1, pc, #4	; (adr r1, 801fa3c <__ssvfiscanf_r+0xf8>)
 801fa38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801fa3c:	0801fb0f 	.word	0x0801fb0f
 801fa40:	0801fa17 	.word	0x0801fa17
 801fa44:	0801fa17 	.word	0x0801fa17
 801fa48:	0801fb6d 	.word	0x0801fb6d
 801fa4c:	0801fa17 	.word	0x0801fa17
 801fa50:	0801fa17 	.word	0x0801fa17
 801fa54:	0801fa17 	.word	0x0801fa17
 801fa58:	0801fa17 	.word	0x0801fa17
 801fa5c:	0801fa17 	.word	0x0801fa17
 801fa60:	0801fa17 	.word	0x0801fa17
 801fa64:	0801fa17 	.word	0x0801fa17
 801fa68:	0801fb83 	.word	0x0801fb83
 801fa6c:	0801fb59 	.word	0x0801fb59
 801fa70:	0801fac7 	.word	0x0801fac7
 801fa74:	0801fac7 	.word	0x0801fac7
 801fa78:	0801fac7 	.word	0x0801fac7
 801fa7c:	0801fa17 	.word	0x0801fa17
 801fa80:	0801fb5d 	.word	0x0801fb5d
 801fa84:	0801fa17 	.word	0x0801fa17
 801fa88:	0801fa17 	.word	0x0801fa17
 801fa8c:	0801fa17 	.word	0x0801fa17
 801fa90:	0801fa17 	.word	0x0801fa17
 801fa94:	0801fb93 	.word	0x0801fb93
 801fa98:	0801fb65 	.word	0x0801fb65
 801fa9c:	0801fb07 	.word	0x0801fb07
 801faa0:	0801fa17 	.word	0x0801fa17
 801faa4:	0801fa17 	.word	0x0801fa17
 801faa8:	0801fb8f 	.word	0x0801fb8f
 801faac:	0801fa17 	.word	0x0801fa17
 801fab0:	0801fb59 	.word	0x0801fb59
 801fab4:	0801fa17 	.word	0x0801fa17
 801fab8:	0801fa17 	.word	0x0801fa17
 801fabc:	0801fb0f 	.word	0x0801fb0f
 801fac0:	3b45      	subs	r3, #69	; 0x45
 801fac2:	2b02      	cmp	r3, #2
 801fac4:	d8a7      	bhi.n	801fa16 <__ssvfiscanf_r+0xd2>
 801fac6:	2305      	movs	r3, #5
 801fac8:	e02b      	b.n	801fb22 <__ssvfiscanf_r+0x1de>
 801faca:	6863      	ldr	r3, [r4, #4]
 801facc:	2b00      	cmp	r3, #0
 801face:	dd0d      	ble.n	801faec <__ssvfiscanf_r+0x1a8>
 801fad0:	6823      	ldr	r3, [r4, #0]
 801fad2:	781a      	ldrb	r2, [r3, #0]
 801fad4:	4552      	cmp	r2, sl
 801fad6:	f040 80a1 	bne.w	801fc1c <__ssvfiscanf_r+0x2d8>
 801fada:	3301      	adds	r3, #1
 801fadc:	6862      	ldr	r2, [r4, #4]
 801fade:	6023      	str	r3, [r4, #0]
 801fae0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801fae2:	3a01      	subs	r2, #1
 801fae4:	3301      	adds	r3, #1
 801fae6:	6062      	str	r2, [r4, #4]
 801fae8:	9345      	str	r3, [sp, #276]	; 0x114
 801faea:	e755      	b.n	801f998 <__ssvfiscanf_r+0x54>
 801faec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801faee:	4621      	mov	r1, r4
 801faf0:	4630      	mov	r0, r6
 801faf2:	4798      	blx	r3
 801faf4:	2800      	cmp	r0, #0
 801faf6:	d0eb      	beq.n	801fad0 <__ssvfiscanf_r+0x18c>
 801faf8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801fafa:	2800      	cmp	r0, #0
 801fafc:	f040 8084 	bne.w	801fc08 <__ssvfiscanf_r+0x2c4>
 801fb00:	f04f 30ff 	mov.w	r0, #4294967295
 801fb04:	e086      	b.n	801fc14 <__ssvfiscanf_r+0x2d0>
 801fb06:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801fb08:	f042 0220 	orr.w	r2, r2, #32
 801fb0c:	9241      	str	r2, [sp, #260]	; 0x104
 801fb0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801fb10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fb14:	9241      	str	r2, [sp, #260]	; 0x104
 801fb16:	2210      	movs	r2, #16
 801fb18:	2b6f      	cmp	r3, #111	; 0x6f
 801fb1a:	9242      	str	r2, [sp, #264]	; 0x108
 801fb1c:	bf34      	ite	cc
 801fb1e:	2303      	movcc	r3, #3
 801fb20:	2304      	movcs	r3, #4
 801fb22:	9347      	str	r3, [sp, #284]	; 0x11c
 801fb24:	6863      	ldr	r3, [r4, #4]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	dd41      	ble.n	801fbae <__ssvfiscanf_r+0x26a>
 801fb2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fb2c:	0659      	lsls	r1, r3, #25
 801fb2e:	d404      	bmi.n	801fb3a <__ssvfiscanf_r+0x1f6>
 801fb30:	6823      	ldr	r3, [r4, #0]
 801fb32:	781a      	ldrb	r2, [r3, #0]
 801fb34:	5cba      	ldrb	r2, [r7, r2]
 801fb36:	0712      	lsls	r2, r2, #28
 801fb38:	d440      	bmi.n	801fbbc <__ssvfiscanf_r+0x278>
 801fb3a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801fb3c:	2b02      	cmp	r3, #2
 801fb3e:	dc4f      	bgt.n	801fbe0 <__ssvfiscanf_r+0x29c>
 801fb40:	466b      	mov	r3, sp
 801fb42:	4622      	mov	r2, r4
 801fb44:	a941      	add	r1, sp, #260	; 0x104
 801fb46:	4630      	mov	r0, r6
 801fb48:	f000 f874 	bl	801fc34 <_scanf_chars>
 801fb4c:	2801      	cmp	r0, #1
 801fb4e:	d065      	beq.n	801fc1c <__ssvfiscanf_r+0x2d8>
 801fb50:	2802      	cmp	r0, #2
 801fb52:	f47f af21 	bne.w	801f998 <__ssvfiscanf_r+0x54>
 801fb56:	e7cf      	b.n	801faf8 <__ssvfiscanf_r+0x1b4>
 801fb58:	220a      	movs	r2, #10
 801fb5a:	e7dd      	b.n	801fb18 <__ssvfiscanf_r+0x1d4>
 801fb5c:	2300      	movs	r3, #0
 801fb5e:	9342      	str	r3, [sp, #264]	; 0x108
 801fb60:	2303      	movs	r3, #3
 801fb62:	e7de      	b.n	801fb22 <__ssvfiscanf_r+0x1de>
 801fb64:	2308      	movs	r3, #8
 801fb66:	9342      	str	r3, [sp, #264]	; 0x108
 801fb68:	2304      	movs	r3, #4
 801fb6a:	e7da      	b.n	801fb22 <__ssvfiscanf_r+0x1de>
 801fb6c:	4629      	mov	r1, r5
 801fb6e:	4640      	mov	r0, r8
 801fb70:	f000 f9ac 	bl	801fecc <__sccl>
 801fb74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fb76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb7a:	9341      	str	r3, [sp, #260]	; 0x104
 801fb7c:	4605      	mov	r5, r0
 801fb7e:	2301      	movs	r3, #1
 801fb80:	e7cf      	b.n	801fb22 <__ssvfiscanf_r+0x1de>
 801fb82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fb84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb88:	9341      	str	r3, [sp, #260]	; 0x104
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	e7c9      	b.n	801fb22 <__ssvfiscanf_r+0x1de>
 801fb8e:	2302      	movs	r3, #2
 801fb90:	e7c7      	b.n	801fb22 <__ssvfiscanf_r+0x1de>
 801fb92:	9841      	ldr	r0, [sp, #260]	; 0x104
 801fb94:	06c3      	lsls	r3, r0, #27
 801fb96:	f53f aeff 	bmi.w	801f998 <__ssvfiscanf_r+0x54>
 801fb9a:	9b00      	ldr	r3, [sp, #0]
 801fb9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fb9e:	1d19      	adds	r1, r3, #4
 801fba0:	9100      	str	r1, [sp, #0]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	07c0      	lsls	r0, r0, #31
 801fba6:	bf4c      	ite	mi
 801fba8:	801a      	strhmi	r2, [r3, #0]
 801fbaa:	601a      	strpl	r2, [r3, #0]
 801fbac:	e6f4      	b.n	801f998 <__ssvfiscanf_r+0x54>
 801fbae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fbb0:	4621      	mov	r1, r4
 801fbb2:	4630      	mov	r0, r6
 801fbb4:	4798      	blx	r3
 801fbb6:	2800      	cmp	r0, #0
 801fbb8:	d0b7      	beq.n	801fb2a <__ssvfiscanf_r+0x1e6>
 801fbba:	e79d      	b.n	801faf8 <__ssvfiscanf_r+0x1b4>
 801fbbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fbbe:	3201      	adds	r2, #1
 801fbc0:	9245      	str	r2, [sp, #276]	; 0x114
 801fbc2:	6862      	ldr	r2, [r4, #4]
 801fbc4:	3a01      	subs	r2, #1
 801fbc6:	2a00      	cmp	r2, #0
 801fbc8:	6062      	str	r2, [r4, #4]
 801fbca:	dd02      	ble.n	801fbd2 <__ssvfiscanf_r+0x28e>
 801fbcc:	3301      	adds	r3, #1
 801fbce:	6023      	str	r3, [r4, #0]
 801fbd0:	e7ae      	b.n	801fb30 <__ssvfiscanf_r+0x1ec>
 801fbd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fbd4:	4621      	mov	r1, r4
 801fbd6:	4630      	mov	r0, r6
 801fbd8:	4798      	blx	r3
 801fbda:	2800      	cmp	r0, #0
 801fbdc:	d0a8      	beq.n	801fb30 <__ssvfiscanf_r+0x1ec>
 801fbde:	e78b      	b.n	801faf8 <__ssvfiscanf_r+0x1b4>
 801fbe0:	2b04      	cmp	r3, #4
 801fbe2:	dc06      	bgt.n	801fbf2 <__ssvfiscanf_r+0x2ae>
 801fbe4:	466b      	mov	r3, sp
 801fbe6:	4622      	mov	r2, r4
 801fbe8:	a941      	add	r1, sp, #260	; 0x104
 801fbea:	4630      	mov	r0, r6
 801fbec:	f000 f87a 	bl	801fce4 <_scanf_i>
 801fbf0:	e7ac      	b.n	801fb4c <__ssvfiscanf_r+0x208>
 801fbf2:	4b0f      	ldr	r3, [pc, #60]	; (801fc30 <__ssvfiscanf_r+0x2ec>)
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	f43f aecf 	beq.w	801f998 <__ssvfiscanf_r+0x54>
 801fbfa:	466b      	mov	r3, sp
 801fbfc:	4622      	mov	r2, r4
 801fbfe:	a941      	add	r1, sp, #260	; 0x104
 801fc00:	4630      	mov	r0, r6
 801fc02:	f3af 8000 	nop.w
 801fc06:	e7a1      	b.n	801fb4c <__ssvfiscanf_r+0x208>
 801fc08:	89a3      	ldrh	r3, [r4, #12]
 801fc0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801fc0e:	bf18      	it	ne
 801fc10:	f04f 30ff 	movne.w	r0, #4294967295
 801fc14:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801fc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801fc1e:	e7f9      	b.n	801fc14 <__ssvfiscanf_r+0x2d0>
 801fc20:	0801f891 	.word	0x0801f891
 801fc24:	0801f90b 	.word	0x0801f90b
 801fc28:	08024fc9 	.word	0x08024fc9
 801fc2c:	080250d9 	.word	0x080250d9
 801fc30:	00000000 	.word	0x00000000

0801fc34 <_scanf_chars>:
 801fc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc38:	4615      	mov	r5, r2
 801fc3a:	688a      	ldr	r2, [r1, #8]
 801fc3c:	4680      	mov	r8, r0
 801fc3e:	460c      	mov	r4, r1
 801fc40:	b932      	cbnz	r2, 801fc50 <_scanf_chars+0x1c>
 801fc42:	698a      	ldr	r2, [r1, #24]
 801fc44:	2a00      	cmp	r2, #0
 801fc46:	bf0c      	ite	eq
 801fc48:	2201      	moveq	r2, #1
 801fc4a:	f04f 32ff 	movne.w	r2, #4294967295
 801fc4e:	608a      	str	r2, [r1, #8]
 801fc50:	6822      	ldr	r2, [r4, #0]
 801fc52:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801fce0 <_scanf_chars+0xac>
 801fc56:	06d1      	lsls	r1, r2, #27
 801fc58:	bf5f      	itttt	pl
 801fc5a:	681a      	ldrpl	r2, [r3, #0]
 801fc5c:	1d11      	addpl	r1, r2, #4
 801fc5e:	6019      	strpl	r1, [r3, #0]
 801fc60:	6816      	ldrpl	r6, [r2, #0]
 801fc62:	2700      	movs	r7, #0
 801fc64:	69a0      	ldr	r0, [r4, #24]
 801fc66:	b188      	cbz	r0, 801fc8c <_scanf_chars+0x58>
 801fc68:	2801      	cmp	r0, #1
 801fc6a:	d107      	bne.n	801fc7c <_scanf_chars+0x48>
 801fc6c:	682b      	ldr	r3, [r5, #0]
 801fc6e:	781a      	ldrb	r2, [r3, #0]
 801fc70:	6963      	ldr	r3, [r4, #20]
 801fc72:	5c9b      	ldrb	r3, [r3, r2]
 801fc74:	b953      	cbnz	r3, 801fc8c <_scanf_chars+0x58>
 801fc76:	bb27      	cbnz	r7, 801fcc2 <_scanf_chars+0x8e>
 801fc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc7c:	2802      	cmp	r0, #2
 801fc7e:	d120      	bne.n	801fcc2 <_scanf_chars+0x8e>
 801fc80:	682b      	ldr	r3, [r5, #0]
 801fc82:	781b      	ldrb	r3, [r3, #0]
 801fc84:	f813 3009 	ldrb.w	r3, [r3, r9]
 801fc88:	071b      	lsls	r3, r3, #28
 801fc8a:	d41a      	bmi.n	801fcc2 <_scanf_chars+0x8e>
 801fc8c:	6823      	ldr	r3, [r4, #0]
 801fc8e:	06da      	lsls	r2, r3, #27
 801fc90:	bf5e      	ittt	pl
 801fc92:	682b      	ldrpl	r3, [r5, #0]
 801fc94:	781b      	ldrbpl	r3, [r3, #0]
 801fc96:	f806 3b01 	strbpl.w	r3, [r6], #1
 801fc9a:	682a      	ldr	r2, [r5, #0]
 801fc9c:	686b      	ldr	r3, [r5, #4]
 801fc9e:	3201      	adds	r2, #1
 801fca0:	602a      	str	r2, [r5, #0]
 801fca2:	68a2      	ldr	r2, [r4, #8]
 801fca4:	3b01      	subs	r3, #1
 801fca6:	3a01      	subs	r2, #1
 801fca8:	606b      	str	r3, [r5, #4]
 801fcaa:	3701      	adds	r7, #1
 801fcac:	60a2      	str	r2, [r4, #8]
 801fcae:	b142      	cbz	r2, 801fcc2 <_scanf_chars+0x8e>
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	dcd7      	bgt.n	801fc64 <_scanf_chars+0x30>
 801fcb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fcb8:	4629      	mov	r1, r5
 801fcba:	4640      	mov	r0, r8
 801fcbc:	4798      	blx	r3
 801fcbe:	2800      	cmp	r0, #0
 801fcc0:	d0d0      	beq.n	801fc64 <_scanf_chars+0x30>
 801fcc2:	6823      	ldr	r3, [r4, #0]
 801fcc4:	f013 0310 	ands.w	r3, r3, #16
 801fcc8:	d105      	bne.n	801fcd6 <_scanf_chars+0xa2>
 801fcca:	68e2      	ldr	r2, [r4, #12]
 801fccc:	3201      	adds	r2, #1
 801fcce:	60e2      	str	r2, [r4, #12]
 801fcd0:	69a2      	ldr	r2, [r4, #24]
 801fcd2:	b102      	cbz	r2, 801fcd6 <_scanf_chars+0xa2>
 801fcd4:	7033      	strb	r3, [r6, #0]
 801fcd6:	6923      	ldr	r3, [r4, #16]
 801fcd8:	441f      	add	r7, r3
 801fcda:	6127      	str	r7, [r4, #16]
 801fcdc:	2000      	movs	r0, #0
 801fcde:	e7cb      	b.n	801fc78 <_scanf_chars+0x44>
 801fce0:	08024fc9 	.word	0x08024fc9

0801fce4 <_scanf_i>:
 801fce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fce8:	4698      	mov	r8, r3
 801fcea:	4b74      	ldr	r3, [pc, #464]	; (801febc <_scanf_i+0x1d8>)
 801fcec:	460c      	mov	r4, r1
 801fcee:	4682      	mov	sl, r0
 801fcf0:	4616      	mov	r6, r2
 801fcf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801fcf6:	b087      	sub	sp, #28
 801fcf8:	ab03      	add	r3, sp, #12
 801fcfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801fcfe:	4b70      	ldr	r3, [pc, #448]	; (801fec0 <_scanf_i+0x1dc>)
 801fd00:	69a1      	ldr	r1, [r4, #24]
 801fd02:	4a70      	ldr	r2, [pc, #448]	; (801fec4 <_scanf_i+0x1e0>)
 801fd04:	2903      	cmp	r1, #3
 801fd06:	bf18      	it	ne
 801fd08:	461a      	movne	r2, r3
 801fd0a:	68a3      	ldr	r3, [r4, #8]
 801fd0c:	9201      	str	r2, [sp, #4]
 801fd0e:	1e5a      	subs	r2, r3, #1
 801fd10:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fd14:	bf88      	it	hi
 801fd16:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fd1a:	4627      	mov	r7, r4
 801fd1c:	bf82      	ittt	hi
 801fd1e:	eb03 0905 	addhi.w	r9, r3, r5
 801fd22:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fd26:	60a3      	strhi	r3, [r4, #8]
 801fd28:	f857 3b1c 	ldr.w	r3, [r7], #28
 801fd2c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801fd30:	bf98      	it	ls
 801fd32:	f04f 0900 	movls.w	r9, #0
 801fd36:	6023      	str	r3, [r4, #0]
 801fd38:	463d      	mov	r5, r7
 801fd3a:	f04f 0b00 	mov.w	fp, #0
 801fd3e:	6831      	ldr	r1, [r6, #0]
 801fd40:	ab03      	add	r3, sp, #12
 801fd42:	7809      	ldrb	r1, [r1, #0]
 801fd44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801fd48:	2202      	movs	r2, #2
 801fd4a:	f7e0 fa89 	bl	8000260 <memchr>
 801fd4e:	b328      	cbz	r0, 801fd9c <_scanf_i+0xb8>
 801fd50:	f1bb 0f01 	cmp.w	fp, #1
 801fd54:	d159      	bne.n	801fe0a <_scanf_i+0x126>
 801fd56:	6862      	ldr	r2, [r4, #4]
 801fd58:	b92a      	cbnz	r2, 801fd66 <_scanf_i+0x82>
 801fd5a:	6822      	ldr	r2, [r4, #0]
 801fd5c:	2308      	movs	r3, #8
 801fd5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd62:	6063      	str	r3, [r4, #4]
 801fd64:	6022      	str	r2, [r4, #0]
 801fd66:	6822      	ldr	r2, [r4, #0]
 801fd68:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801fd6c:	6022      	str	r2, [r4, #0]
 801fd6e:	68a2      	ldr	r2, [r4, #8]
 801fd70:	1e51      	subs	r1, r2, #1
 801fd72:	60a1      	str	r1, [r4, #8]
 801fd74:	b192      	cbz	r2, 801fd9c <_scanf_i+0xb8>
 801fd76:	6832      	ldr	r2, [r6, #0]
 801fd78:	1c51      	adds	r1, r2, #1
 801fd7a:	6031      	str	r1, [r6, #0]
 801fd7c:	7812      	ldrb	r2, [r2, #0]
 801fd7e:	f805 2b01 	strb.w	r2, [r5], #1
 801fd82:	6872      	ldr	r2, [r6, #4]
 801fd84:	3a01      	subs	r2, #1
 801fd86:	2a00      	cmp	r2, #0
 801fd88:	6072      	str	r2, [r6, #4]
 801fd8a:	dc07      	bgt.n	801fd9c <_scanf_i+0xb8>
 801fd8c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801fd90:	4631      	mov	r1, r6
 801fd92:	4650      	mov	r0, sl
 801fd94:	4790      	blx	r2
 801fd96:	2800      	cmp	r0, #0
 801fd98:	f040 8085 	bne.w	801fea6 <_scanf_i+0x1c2>
 801fd9c:	f10b 0b01 	add.w	fp, fp, #1
 801fda0:	f1bb 0f03 	cmp.w	fp, #3
 801fda4:	d1cb      	bne.n	801fd3e <_scanf_i+0x5a>
 801fda6:	6863      	ldr	r3, [r4, #4]
 801fda8:	b90b      	cbnz	r3, 801fdae <_scanf_i+0xca>
 801fdaa:	230a      	movs	r3, #10
 801fdac:	6063      	str	r3, [r4, #4]
 801fdae:	6863      	ldr	r3, [r4, #4]
 801fdb0:	4945      	ldr	r1, [pc, #276]	; (801fec8 <_scanf_i+0x1e4>)
 801fdb2:	6960      	ldr	r0, [r4, #20]
 801fdb4:	1ac9      	subs	r1, r1, r3
 801fdb6:	f000 f889 	bl	801fecc <__sccl>
 801fdba:	f04f 0b00 	mov.w	fp, #0
 801fdbe:	68a3      	ldr	r3, [r4, #8]
 801fdc0:	6822      	ldr	r2, [r4, #0]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d03d      	beq.n	801fe42 <_scanf_i+0x15e>
 801fdc6:	6831      	ldr	r1, [r6, #0]
 801fdc8:	6960      	ldr	r0, [r4, #20]
 801fdca:	f891 c000 	ldrb.w	ip, [r1]
 801fdce:	f810 000c 	ldrb.w	r0, [r0, ip]
 801fdd2:	2800      	cmp	r0, #0
 801fdd4:	d035      	beq.n	801fe42 <_scanf_i+0x15e>
 801fdd6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801fdda:	d124      	bne.n	801fe26 <_scanf_i+0x142>
 801fddc:	0510      	lsls	r0, r2, #20
 801fdde:	d522      	bpl.n	801fe26 <_scanf_i+0x142>
 801fde0:	f10b 0b01 	add.w	fp, fp, #1
 801fde4:	f1b9 0f00 	cmp.w	r9, #0
 801fde8:	d003      	beq.n	801fdf2 <_scanf_i+0x10e>
 801fdea:	3301      	adds	r3, #1
 801fdec:	f109 39ff 	add.w	r9, r9, #4294967295
 801fdf0:	60a3      	str	r3, [r4, #8]
 801fdf2:	6873      	ldr	r3, [r6, #4]
 801fdf4:	3b01      	subs	r3, #1
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	6073      	str	r3, [r6, #4]
 801fdfa:	dd1b      	ble.n	801fe34 <_scanf_i+0x150>
 801fdfc:	6833      	ldr	r3, [r6, #0]
 801fdfe:	3301      	adds	r3, #1
 801fe00:	6033      	str	r3, [r6, #0]
 801fe02:	68a3      	ldr	r3, [r4, #8]
 801fe04:	3b01      	subs	r3, #1
 801fe06:	60a3      	str	r3, [r4, #8]
 801fe08:	e7d9      	b.n	801fdbe <_scanf_i+0xda>
 801fe0a:	f1bb 0f02 	cmp.w	fp, #2
 801fe0e:	d1ae      	bne.n	801fd6e <_scanf_i+0x8a>
 801fe10:	6822      	ldr	r2, [r4, #0]
 801fe12:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801fe16:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801fe1a:	d1bf      	bne.n	801fd9c <_scanf_i+0xb8>
 801fe1c:	2310      	movs	r3, #16
 801fe1e:	6063      	str	r3, [r4, #4]
 801fe20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fe24:	e7a2      	b.n	801fd6c <_scanf_i+0x88>
 801fe26:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801fe2a:	6022      	str	r2, [r4, #0]
 801fe2c:	780b      	ldrb	r3, [r1, #0]
 801fe2e:	f805 3b01 	strb.w	r3, [r5], #1
 801fe32:	e7de      	b.n	801fdf2 <_scanf_i+0x10e>
 801fe34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fe38:	4631      	mov	r1, r6
 801fe3a:	4650      	mov	r0, sl
 801fe3c:	4798      	blx	r3
 801fe3e:	2800      	cmp	r0, #0
 801fe40:	d0df      	beq.n	801fe02 <_scanf_i+0x11e>
 801fe42:	6823      	ldr	r3, [r4, #0]
 801fe44:	05d9      	lsls	r1, r3, #23
 801fe46:	d50d      	bpl.n	801fe64 <_scanf_i+0x180>
 801fe48:	42bd      	cmp	r5, r7
 801fe4a:	d909      	bls.n	801fe60 <_scanf_i+0x17c>
 801fe4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801fe50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fe54:	4632      	mov	r2, r6
 801fe56:	4650      	mov	r0, sl
 801fe58:	4798      	blx	r3
 801fe5a:	f105 39ff 	add.w	r9, r5, #4294967295
 801fe5e:	464d      	mov	r5, r9
 801fe60:	42bd      	cmp	r5, r7
 801fe62:	d028      	beq.n	801feb6 <_scanf_i+0x1d2>
 801fe64:	6822      	ldr	r2, [r4, #0]
 801fe66:	f012 0210 	ands.w	r2, r2, #16
 801fe6a:	d113      	bne.n	801fe94 <_scanf_i+0x1b0>
 801fe6c:	702a      	strb	r2, [r5, #0]
 801fe6e:	6863      	ldr	r3, [r4, #4]
 801fe70:	9e01      	ldr	r6, [sp, #4]
 801fe72:	4639      	mov	r1, r7
 801fe74:	4650      	mov	r0, sl
 801fe76:	47b0      	blx	r6
 801fe78:	f8d8 3000 	ldr.w	r3, [r8]
 801fe7c:	6821      	ldr	r1, [r4, #0]
 801fe7e:	1d1a      	adds	r2, r3, #4
 801fe80:	f8c8 2000 	str.w	r2, [r8]
 801fe84:	f011 0f20 	tst.w	r1, #32
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	d00f      	beq.n	801feac <_scanf_i+0x1c8>
 801fe8c:	6018      	str	r0, [r3, #0]
 801fe8e:	68e3      	ldr	r3, [r4, #12]
 801fe90:	3301      	adds	r3, #1
 801fe92:	60e3      	str	r3, [r4, #12]
 801fe94:	1bed      	subs	r5, r5, r7
 801fe96:	44ab      	add	fp, r5
 801fe98:	6925      	ldr	r5, [r4, #16]
 801fe9a:	445d      	add	r5, fp
 801fe9c:	6125      	str	r5, [r4, #16]
 801fe9e:	2000      	movs	r0, #0
 801fea0:	b007      	add	sp, #28
 801fea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea6:	f04f 0b00 	mov.w	fp, #0
 801feaa:	e7ca      	b.n	801fe42 <_scanf_i+0x15e>
 801feac:	07ca      	lsls	r2, r1, #31
 801feae:	bf4c      	ite	mi
 801feb0:	8018      	strhmi	r0, [r3, #0]
 801feb2:	6018      	strpl	r0, [r3, #0]
 801feb4:	e7eb      	b.n	801fe8e <_scanf_i+0x1aa>
 801feb6:	2001      	movs	r0, #1
 801feb8:	e7f2      	b.n	801fea0 <_scanf_i+0x1bc>
 801feba:	bf00      	nop
 801febc:	08022de8 	.word	0x08022de8
 801fec0:	0801e24d 	.word	0x0801e24d
 801fec4:	08020049 	.word	0x08020049
 801fec8:	0802511f 	.word	0x0802511f

0801fecc <__sccl>:
 801fecc:	b570      	push	{r4, r5, r6, lr}
 801fece:	780b      	ldrb	r3, [r1, #0]
 801fed0:	4604      	mov	r4, r0
 801fed2:	2b5e      	cmp	r3, #94	; 0x5e
 801fed4:	bf0b      	itete	eq
 801fed6:	784b      	ldrbeq	r3, [r1, #1]
 801fed8:	1c48      	addne	r0, r1, #1
 801feda:	1c88      	addeq	r0, r1, #2
 801fedc:	2200      	movne	r2, #0
 801fede:	bf08      	it	eq
 801fee0:	2201      	moveq	r2, #1
 801fee2:	1e61      	subs	r1, r4, #1
 801fee4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801fee8:	f801 2f01 	strb.w	r2, [r1, #1]!
 801feec:	42a9      	cmp	r1, r5
 801feee:	d1fb      	bne.n	801fee8 <__sccl+0x1c>
 801fef0:	b90b      	cbnz	r3, 801fef6 <__sccl+0x2a>
 801fef2:	3801      	subs	r0, #1
 801fef4:	bd70      	pop	{r4, r5, r6, pc}
 801fef6:	f082 0101 	eor.w	r1, r2, #1
 801fefa:	54e1      	strb	r1, [r4, r3]
 801fefc:	1c42      	adds	r2, r0, #1
 801fefe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801ff02:	2d2d      	cmp	r5, #45	; 0x2d
 801ff04:	f102 36ff 	add.w	r6, r2, #4294967295
 801ff08:	4610      	mov	r0, r2
 801ff0a:	d006      	beq.n	801ff1a <__sccl+0x4e>
 801ff0c:	2d5d      	cmp	r5, #93	; 0x5d
 801ff0e:	d0f1      	beq.n	801fef4 <__sccl+0x28>
 801ff10:	b90d      	cbnz	r5, 801ff16 <__sccl+0x4a>
 801ff12:	4630      	mov	r0, r6
 801ff14:	e7ee      	b.n	801fef4 <__sccl+0x28>
 801ff16:	462b      	mov	r3, r5
 801ff18:	e7ef      	b.n	801fefa <__sccl+0x2e>
 801ff1a:	7816      	ldrb	r6, [r2, #0]
 801ff1c:	2e5d      	cmp	r6, #93	; 0x5d
 801ff1e:	d0fa      	beq.n	801ff16 <__sccl+0x4a>
 801ff20:	42b3      	cmp	r3, r6
 801ff22:	dcf8      	bgt.n	801ff16 <__sccl+0x4a>
 801ff24:	4618      	mov	r0, r3
 801ff26:	3001      	adds	r0, #1
 801ff28:	4286      	cmp	r6, r0
 801ff2a:	5421      	strb	r1, [r4, r0]
 801ff2c:	dcfb      	bgt.n	801ff26 <__sccl+0x5a>
 801ff2e:	43d8      	mvns	r0, r3
 801ff30:	4430      	add	r0, r6
 801ff32:	1c5d      	adds	r5, r3, #1
 801ff34:	42b3      	cmp	r3, r6
 801ff36:	bfa8      	it	ge
 801ff38:	2000      	movge	r0, #0
 801ff3a:	182b      	adds	r3, r5, r0
 801ff3c:	3202      	adds	r2, #2
 801ff3e:	e7de      	b.n	801fefe <__sccl+0x32>

0801ff40 <_strtol_l.isra.0>:
 801ff40:	2b01      	cmp	r3, #1
 801ff42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ff46:	d001      	beq.n	801ff4c <_strtol_l.isra.0+0xc>
 801ff48:	2b24      	cmp	r3, #36	; 0x24
 801ff4a:	d906      	bls.n	801ff5a <_strtol_l.isra.0+0x1a>
 801ff4c:	f7fc fbb6 	bl	801c6bc <__errno>
 801ff50:	2316      	movs	r3, #22
 801ff52:	6003      	str	r3, [r0, #0]
 801ff54:	2000      	movs	r0, #0
 801ff56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff5a:	4f3a      	ldr	r7, [pc, #232]	; (8020044 <_strtol_l.isra.0+0x104>)
 801ff5c:	468e      	mov	lr, r1
 801ff5e:	4676      	mov	r6, lr
 801ff60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ff64:	5de5      	ldrb	r5, [r4, r7]
 801ff66:	f015 0508 	ands.w	r5, r5, #8
 801ff6a:	d1f8      	bne.n	801ff5e <_strtol_l.isra.0+0x1e>
 801ff6c:	2c2d      	cmp	r4, #45	; 0x2d
 801ff6e:	d134      	bne.n	801ffda <_strtol_l.isra.0+0x9a>
 801ff70:	f89e 4000 	ldrb.w	r4, [lr]
 801ff74:	f04f 0801 	mov.w	r8, #1
 801ff78:	f106 0e02 	add.w	lr, r6, #2
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d05c      	beq.n	802003a <_strtol_l.isra.0+0xfa>
 801ff80:	2b10      	cmp	r3, #16
 801ff82:	d10c      	bne.n	801ff9e <_strtol_l.isra.0+0x5e>
 801ff84:	2c30      	cmp	r4, #48	; 0x30
 801ff86:	d10a      	bne.n	801ff9e <_strtol_l.isra.0+0x5e>
 801ff88:	f89e 4000 	ldrb.w	r4, [lr]
 801ff8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ff90:	2c58      	cmp	r4, #88	; 0x58
 801ff92:	d14d      	bne.n	8020030 <_strtol_l.isra.0+0xf0>
 801ff94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801ff98:	2310      	movs	r3, #16
 801ff9a:	f10e 0e02 	add.w	lr, lr, #2
 801ff9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801ffa2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ffa6:	2600      	movs	r6, #0
 801ffa8:	fbbc f9f3 	udiv	r9, ip, r3
 801ffac:	4635      	mov	r5, r6
 801ffae:	fb03 ca19 	mls	sl, r3, r9, ip
 801ffb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ffb6:	2f09      	cmp	r7, #9
 801ffb8:	d818      	bhi.n	801ffec <_strtol_l.isra.0+0xac>
 801ffba:	463c      	mov	r4, r7
 801ffbc:	42a3      	cmp	r3, r4
 801ffbe:	dd24      	ble.n	802000a <_strtol_l.isra.0+0xca>
 801ffc0:	2e00      	cmp	r6, #0
 801ffc2:	db1f      	blt.n	8020004 <_strtol_l.isra.0+0xc4>
 801ffc4:	45a9      	cmp	r9, r5
 801ffc6:	d31d      	bcc.n	8020004 <_strtol_l.isra.0+0xc4>
 801ffc8:	d101      	bne.n	801ffce <_strtol_l.isra.0+0x8e>
 801ffca:	45a2      	cmp	sl, r4
 801ffcc:	db1a      	blt.n	8020004 <_strtol_l.isra.0+0xc4>
 801ffce:	fb05 4503 	mla	r5, r5, r3, r4
 801ffd2:	2601      	movs	r6, #1
 801ffd4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ffd8:	e7eb      	b.n	801ffb2 <_strtol_l.isra.0+0x72>
 801ffda:	2c2b      	cmp	r4, #43	; 0x2b
 801ffdc:	bf08      	it	eq
 801ffde:	f89e 4000 	ldrbeq.w	r4, [lr]
 801ffe2:	46a8      	mov	r8, r5
 801ffe4:	bf08      	it	eq
 801ffe6:	f106 0e02 	addeq.w	lr, r6, #2
 801ffea:	e7c7      	b.n	801ff7c <_strtol_l.isra.0+0x3c>
 801ffec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801fff0:	2f19      	cmp	r7, #25
 801fff2:	d801      	bhi.n	801fff8 <_strtol_l.isra.0+0xb8>
 801fff4:	3c37      	subs	r4, #55	; 0x37
 801fff6:	e7e1      	b.n	801ffbc <_strtol_l.isra.0+0x7c>
 801fff8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801fffc:	2f19      	cmp	r7, #25
 801fffe:	d804      	bhi.n	802000a <_strtol_l.isra.0+0xca>
 8020000:	3c57      	subs	r4, #87	; 0x57
 8020002:	e7db      	b.n	801ffbc <_strtol_l.isra.0+0x7c>
 8020004:	f04f 36ff 	mov.w	r6, #4294967295
 8020008:	e7e4      	b.n	801ffd4 <_strtol_l.isra.0+0x94>
 802000a:	2e00      	cmp	r6, #0
 802000c:	da05      	bge.n	802001a <_strtol_l.isra.0+0xda>
 802000e:	2322      	movs	r3, #34	; 0x22
 8020010:	6003      	str	r3, [r0, #0]
 8020012:	4665      	mov	r5, ip
 8020014:	b942      	cbnz	r2, 8020028 <_strtol_l.isra.0+0xe8>
 8020016:	4628      	mov	r0, r5
 8020018:	e79d      	b.n	801ff56 <_strtol_l.isra.0+0x16>
 802001a:	f1b8 0f00 	cmp.w	r8, #0
 802001e:	d000      	beq.n	8020022 <_strtol_l.isra.0+0xe2>
 8020020:	426d      	negs	r5, r5
 8020022:	2a00      	cmp	r2, #0
 8020024:	d0f7      	beq.n	8020016 <_strtol_l.isra.0+0xd6>
 8020026:	b10e      	cbz	r6, 802002c <_strtol_l.isra.0+0xec>
 8020028:	f10e 31ff 	add.w	r1, lr, #4294967295
 802002c:	6011      	str	r1, [r2, #0]
 802002e:	e7f2      	b.n	8020016 <_strtol_l.isra.0+0xd6>
 8020030:	2430      	movs	r4, #48	; 0x30
 8020032:	2b00      	cmp	r3, #0
 8020034:	d1b3      	bne.n	801ff9e <_strtol_l.isra.0+0x5e>
 8020036:	2308      	movs	r3, #8
 8020038:	e7b1      	b.n	801ff9e <_strtol_l.isra.0+0x5e>
 802003a:	2c30      	cmp	r4, #48	; 0x30
 802003c:	d0a4      	beq.n	801ff88 <_strtol_l.isra.0+0x48>
 802003e:	230a      	movs	r3, #10
 8020040:	e7ad      	b.n	801ff9e <_strtol_l.isra.0+0x5e>
 8020042:	bf00      	nop
 8020044:	08024fc9 	.word	0x08024fc9

08020048 <_strtol_r>:
 8020048:	f7ff bf7a 	b.w	801ff40 <_strtol_l.isra.0>

0802004c <__submore>:
 802004c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020050:	460c      	mov	r4, r1
 8020052:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020058:	4299      	cmp	r1, r3
 802005a:	d11d      	bne.n	8020098 <__submore+0x4c>
 802005c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020060:	f7fd f972 	bl	801d348 <_malloc_r>
 8020064:	b918      	cbnz	r0, 802006e <__submore+0x22>
 8020066:	f04f 30ff 	mov.w	r0, #4294967295
 802006a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802006e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020072:	63a3      	str	r3, [r4, #56]	; 0x38
 8020074:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020078:	6360      	str	r0, [r4, #52]	; 0x34
 802007a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802007e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020082:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020086:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802008a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802008e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020092:	6020      	str	r0, [r4, #0]
 8020094:	2000      	movs	r0, #0
 8020096:	e7e8      	b.n	802006a <__submore+0x1e>
 8020098:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802009a:	0077      	lsls	r7, r6, #1
 802009c:	463a      	mov	r2, r7
 802009e:	f7fe fe77 	bl	801ed90 <_realloc_r>
 80200a2:	4605      	mov	r5, r0
 80200a4:	2800      	cmp	r0, #0
 80200a6:	d0de      	beq.n	8020066 <__submore+0x1a>
 80200a8:	eb00 0806 	add.w	r8, r0, r6
 80200ac:	4601      	mov	r1, r0
 80200ae:	4632      	mov	r2, r6
 80200b0:	4640      	mov	r0, r8
 80200b2:	f7fd f8d3 	bl	801d25c <memcpy>
 80200b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80200ba:	f8c4 8000 	str.w	r8, [r4]
 80200be:	e7e9      	b.n	8020094 <__submore+0x48>

080200c0 <_gettimeofday>:
 80200c0:	4b02      	ldr	r3, [pc, #8]	; (80200cc <_gettimeofday+0xc>)
 80200c2:	2258      	movs	r2, #88	; 0x58
 80200c4:	601a      	str	r2, [r3, #0]
 80200c6:	f04f 30ff 	mov.w	r0, #4294967295
 80200ca:	4770      	bx	lr
 80200cc:	20000d40 	.word	0x20000d40

080200d0 <_init>:
 80200d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200d2:	bf00      	nop
 80200d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200d6:	bc08      	pop	{r3}
 80200d8:	469e      	mov	lr, r3
 80200da:	4770      	bx	lr

080200dc <_fini>:
 80200dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80200de:	bf00      	nop
 80200e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80200e2:	bc08      	pop	{r3}
 80200e4:	469e      	mov	lr, r3
 80200e6:	4770      	bx	lr
