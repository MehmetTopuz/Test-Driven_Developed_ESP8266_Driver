
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020b98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000559c  08020d78  08020d78  00030d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026314  08026314  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08026314  08026314  00036314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802631c  0802631c  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802631c  0802631c  0003631c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0802632c  0802632c  0003632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802633c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab4  2000033c  08026678  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000df0  08026678  00040df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067538  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0a3  00000000  00000000  000a78a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004178  00000000  00000000  000b3948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003f58  00000000  00000000  000b7ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d849  00000000  00000000  000bba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c3d4  00000000  00000000  000e9261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ff96  00000000  00000000  00115635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002255cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013c7c  00000000  00000000  00225620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020d58 	.word	0x08020d58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08020d58 	.word	0x08020d58

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000404 	.word	0x20000404

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01c fb1e 	bl	801d3ac <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01c fa76 	bl	801d3ac <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000df0 	.word	0x20000df0

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01c fe4d 	bl	801dbe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fe73 	bl	8003c38 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	0802633c 	.word	0x0802633c
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000df0 	.word	0x20000df0

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000ddc 	.word	0x20000ddc
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000ddc 	.word	0x20000ddc

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08023be8 	.word	0x08023be8
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08023bf8 	.word	0x08023bf8

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08023bf8 	.word	0x08023bf8

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08023c00 	.word	0x08023c00
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08023c18 	.word	0x08023c18
 8003904:	08023c20 	.word	0x08023c20

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f896 	bl	8003a6c <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000494 	.word	0x20000494

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f8a8 	bl	8003aee <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000494 	.word	0x20000494

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f918 	bl	8003bf4 <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000494 	.word	0x20000494

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <Wait_Response+0x68>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <Wait_Response+0x6c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <Wait_Response+0x70>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <Wait_Response+0x68>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <Wait_Response+0x74>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f8f8 	bl	8003bf4 <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <Wait_Response+0x40>
	{
		firstCall = 0;
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <Wait_Response+0x68>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		return FOUND;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e00f      	b.n	8003a34 <Wait_Response+0x60>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <Wait_Response+0x6c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4798      	blx	r3
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <Wait_Response+0x70>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d804      	bhi.n	8003a32 <Wait_Response+0x5e>
	{
		firstCall = 0;
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <Wait_Response+0x68>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e000      	b.n	8003a34 <Wait_Response+0x60>
	}
	else
	{
		return IDLE;
 8003a32:	2305      	movs	r3, #5
	}

}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000036c 	.word	0x2000036c
 8003a40:	20000360 	.word	0x20000360
 8003a44:	20000370 	.word	0x20000370
 8003a48:	20000494 	.word	0x20000494

08003a4c <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
//	static Status response_state = IDLE;
//
//	static uint8_t commandCount = 0,firstCall = 1;


	Send_AT_Command(AT_CWMODE_STATION);
 8003a56:	4804      	ldr	r0, [pc, #16]	; (8003a68 <Connect_Wifi+0x1c>)
 8003a58:	f7ff ff82 	bl	8003960 <Send_AT_Command>





	return TIMEOUT_ERROR;
 8003a5c:	2302      	movs	r3, #2
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08020d78 	.word	0x08020d78

08003a6c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003a74:	2010      	movs	r0, #16
 8003a76:	f01a fa59 	bl	801df2c <malloc>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e017      	b.n	8003ab8 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f019 fc7d 	bl	801d39c <calloc>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e000      	b.n	8003ab8 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f01a fa2e 	bl	801df3c <free>
		}
		free(buffer);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f01a fa2b 	bl	801df3c <free>
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d00c      	beq.n	8003b22 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003b20:	e009      	b.n	8003b36 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d00d      	beq.n	8003b74 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	605a      	str	r2, [r3, #4]
		return data;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	e00a      	b.n	8003b8a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
		return data;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68d8      	ldr	r0, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2100      	movs	r1, #0
 8003baa:	f01a f9dd 	bl	801df68 <memset>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e00a      	b.n	8003bdc <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff8c 	bl	8003aee <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	6838      	ldr	r0, [r7, #0]
 8003bde:	f7fc fb2d 	bl	800023c <strlen>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d8ed      	bhi.n	8003bc6 <ringBuffer_pushArray+0x10>
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	6839      	ldr	r1, [r7, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f01b f905 	bl	801ee14 <strstr>
 8003c0a:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <ringBuffer_lookFor+0x22>
		return 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003c16:	2300      	movs	r3, #0

}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c3e:	f7fd f996 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c42:	f000 f81d 	bl	8003c80 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c46:	f000 f951 	bl	8003eec <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003c4a:	f000 f891 	bl	8003d70 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003c4e:	f000 f8ed 	bl	8003e2c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <main+0x44>)
 8003c54:	463b      	mov	r3, r7
 8003c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c5a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003c5e:	463b      	mov	r3, r7
 8003c60:	4619      	mov	r1, r3
 8003c62:	2002      	movs	r0, #2
 8003c64:	f002 fc10 	bl	8006488 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003c68:	2120      	movs	r1, #32
 8003c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6e:	f7fd fd7b 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f7fd f9ec 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003c78:	e7f6      	b.n	8003c68 <main+0x30>
 8003c7a:	bf00      	nop
 8003c7c:	08020d90 	.word	0x08020d90

08003c80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0a8      	sub	sp, #160	; 0xa0
 8003c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c8a:	2238      	movs	r2, #56	; 0x38
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f01a f96a 	bl	801df68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	2254      	movs	r2, #84	; 0x54
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f01a f95c 	bl	801df68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fd fd97 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cbe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003cd6:	2355      	movs	r3, #85	; 0x55
 8003cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fe2a 	bl	800194c <HAL_RCC_OscConfig>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003d08:	f000 f960 	bl	8003fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d10:	2303      	movs	r3, #3
 8003d12:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d24:	2104      	movs	r1, #4
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe f928 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003d3c:	f000 f946 	bl	8003fcc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003d40:	2321      	movs	r3, #33	; 0x21
 8003d42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d44:	2300      	movs	r3, #0
 8003d46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fb30 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003d64:	f000 f932 	bl	8003fcc <Error_Handler>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	37a0      	adds	r7, #160	; 0xa0
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003d78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d80:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d82:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003d8e:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9a:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003da0:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003da6:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003db2:	481c      	ldr	r0, [pc, #112]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003db4:	f7fe fd4a 	bl	800284c <HAL_UART_Init>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003dc8:	f000 f900 	bl	8003fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4815      	ldr	r0, [pc, #84]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dd0:	f7ff fcd0 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003de4:	f000 f8f2 	bl	8003fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003de8:	2100      	movs	r1, #0
 8003dea:	480e      	ldr	r0, [pc, #56]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dec:	f7ff fd00 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003e00:	f000 f8e4 	bl	8003fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003e04:	4807      	ldr	r0, [pc, #28]	; (8003e24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003e06:	f7ff fc7c 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003e1a:	f000 f8d7 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000374 	.word	0x20000374
 8003e28:	40008000 	.word	0x40008000

08003e2c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e30:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e32:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e36:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e3e:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e44:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e52:	220c      	movs	r2, #12
 8003e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e68:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e74:	481b      	ldr	r0, [pc, #108]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e76:	f7fe fce9 	bl	800284c <HAL_UART_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003e8a:	f000 f89f 	bl	8003fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4814      	ldr	r0, [pc, #80]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e92:	f7ff fc6f 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003ea6:	f000 f891 	bl	8003fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eaa:	2100      	movs	r1, #0
 8003eac:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003eae:	f7ff fc9f 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003ec2:	f000 f883 	bl	8003fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003ec6:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ec8:	f7ff fc1b 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003edc:	f000 f876 	bl	8003fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ee0:	bf00      	nop
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000404 	.word	0x20000404
 8003ee8:	40013800 	.word	0x40013800

08003eec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f02:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	4a2e      	ldr	r2, [pc, #184]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f0e:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f20:	f043 0320 	orr.w	r3, r3, #32
 8003f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2120      	movs	r1, #32
 8003f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f6a:	f7fd fbe5 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <_ZL12MX_GPIO_Initv+0xd8>)
 8003f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	4619      	mov	r1, r3
 8003f82:	4811      	ldr	r0, [pc, #68]	; (8003fc8 <_ZL12MX_GPIO_Initv+0xdc>)
 8003f84:	f7fd fa56 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f98:	f107 0314 	add.w	r3, r7, #20
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa2:	f7fd fa47 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	2028      	movs	r0, #40	; 0x28
 8003fac:	f7fd f94d 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fb0:	2028      	movs	r0, #40	; 0x28
 8003fb2:	f7fd f964 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003fb6:	bf00      	nop
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	10110000 	.word	0x10110000
 8003fc8:	48000800 	.word	0x48000800

08003fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd0:	b672      	cpsid	i
}
 8003fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <Error_Handler+0x8>

08003fd6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003fde:	2032      	movs	r0, #50	; 0x32
 8003fe0:	f7ff fd44 	bl	8003a6c <ringBuffer_init>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	605a      	str	r2, [r3, #4]

	}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fd5e 	bl	8003ac0 <ringBuffer_deInit>
	}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	f00d fed4 	bl	8011dc4 <_ZN5UtestC1Ev>
 800401c:	4a03      	ldr	r2, [pc, #12]	; (800402c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	08024910 	.word	0x08024910

08004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	4a05      	ldr	r2, [pc, #20]	; (8004050 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4618      	mov	r0, r3
 8004042:	f00d fecf 	bl	8011de4 <_ZN5UtestD1Ev>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	08024910 	.word	0x08024910

08004054 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff ffe7 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004062:	2108      	movs	r1, #8
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f003 fef1 	bl	8007e4c <_ZdlPvj>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff ffbe 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004090:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	080248f0 	.word	0x080248f0

080040a4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	2224      	movs	r2, #36	; 0x24
 80040ae:	4906      	ldr	r1, [pc, #24]	; (80040c8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80040b0:	2008      	movs	r0, #8
 80040b2:	f003 feb7 	bl	8007e24 <_ZnwjPKci>
 80040b6:	4604      	mov	r4, r0
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7ff ffdb 	bl	8004074 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80040be:	4623      	mov	r3, r4
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	08020d98 	.word	0x08020d98

080040cc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f00c fa92 	bl	8010600 <_ZN10UtestShellC1Ev>
 80040dc:	4a03      	ldr	r2, [pc, #12]	; (80040ec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	08024844 	.word	0x08024844

080040f0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80040f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af04      	add	r7, sp, #16
 80040f6:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 80040f8:	f00d fe3a 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80040fc:	4604      	mov	r4, r0
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	3338      	adds	r3, #56	; 0x38
 8004102:	681d      	ldr	r5, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	461e      	mov	r6, r3
 800410c:	f00d fe40 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004110:	4603      	mov	r3, r0
 8004112:	9302      	str	r3, [sp, #8]
 8004114:	2327      	movs	r3, #39	; 0x27
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800411e:	4632      	mov	r2, r6
 8004120:	2132      	movs	r1, #50	; 0x32
 8004122:	4620      	mov	r0, r4
 8004124:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004126:	f00d fe23 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 800412a:	4604      	mov	r4, r0
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	3320      	adds	r3, #32
 8004130:	681d      	ldr	r5, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2de      	uxtb	r6, r3
 8004142:	f00d fe25 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004146:	4603      	mov	r3, r0
 8004148:	9303      	str	r3, [sp, #12]
 800414a:	2328      	movs	r3, #40	; 0x28
 800414c:	9302      	str	r3, [sp, #8]
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2300      	movs	r3, #0
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800415a:	4631      	mov	r1, r6
 800415c:	4620      	mov	r0, r4
 800415e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004160:	f00d fe06 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004164:	4604      	mov	r4, r0
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	681d      	ldr	r5, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461e      	mov	r6, r3
 8004174:	f00d fe0c 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004178:	4603      	mov	r3, r0
 800417a:	9302      	str	r3, [sp, #8]
 800417c:	2329      	movs	r3, #41	; 0x29
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004186:	4632      	mov	r2, r6
 8004188:	2100      	movs	r1, #0
 800418a:	4620      	mov	r0, r4
 800418c:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800418e:	f00d fdef 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004192:	4604      	mov	r4, r0
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	3338      	adds	r3, #56	; 0x38
 8004198:	681d      	ldr	r5, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	461e      	mov	r6, r3
 80041a2:	f00d fdf5 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	232a      	movs	r3, #42	; 0x2a
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80041b4:	4632      	mov	r2, r6
 80041b6:	2100      	movs	r1, #0
 80041b8:	4620      	mov	r0, r4
 80041ba:	47a8      	blx	r5

}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c4:	08020d98 	.word	0x08020d98
 80041c8:	08020dac 	.word	0x08020dac
 80041cc:	08020dd4 	.word	0x08020dd4
 80041d0:	08020dec 	.word	0x08020dec
 80041d4:	08020df4 	.word	0x08020df4
 80041d8:	08020e1c 	.word	0x08020e1c

080041dc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff0a 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80041f8:	4a03      	ldr	r2, [pc, #12]	; (8004208 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08024824 	.word	0x08024824

0800420c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	222e      	movs	r2, #46	; 0x2e
 8004216:	4906      	ldr	r1, [pc, #24]	; (8004230 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004218:	2008      	movs	r0, #8
 800421a:	f003 fe03 	bl	8007e24 <_ZnwjPKci>
 800421e:	4604      	mov	r4, r0
 8004220:	4620      	mov	r0, r4
 8004222:	f7ff ffdb 	bl	80041dc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004226:	4623      	mov	r3, r4
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bd90      	pop	{r4, r7, pc}
 8004230:	08020d98 	.word	0x08020d98

08004234 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4618      	mov	r0, r3
 8004240:	f00c f9de 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004244:	4a03      	ldr	r2, [pc, #12]	; (8004254 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	08024778 	.word	0x08024778

08004258 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b087      	sub	sp, #28
 800425c:	af04      	add	r7, sp, #16
 800425e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2145      	movs	r1, #69	; 0x45
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fc41 	bl	8003aee <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800426c:	f00d fd80 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004270:	4604      	mov	r4, r0
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	3338      	adds	r3, #56	; 0x38
 8004276:	681d      	ldr	r5, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	461e      	mov	r6, r3
 8004282:	f00d fd85 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004286:	4603      	mov	r3, r0
 8004288:	9302      	str	r3, [sp, #8]
 800428a:	2331      	movs	r3, #49	; 0x31
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004294:	4632      	mov	r2, r6
 8004296:	2145      	movs	r1, #69	; 0x45
 8004298:	4620      	mov	r0, r4
 800429a:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2110      	movs	r1, #16
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fc23 	bl	8003aee <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80042a8:	f00d fd62 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80042ac:	4604      	mov	r4, r0
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	3338      	adds	r3, #56	; 0x38
 80042b2:	681d      	ldr	r5, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	461e      	mov	r6, r3
 80042c0:	f00d fd66 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042c4:	4603      	mov	r3, r0
 80042c6:	9302      	str	r3, [sp, #8]
 80042c8:	2334      	movs	r3, #52	; 0x34
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80042d2:	4632      	mov	r2, r6
 80042d4:	2110      	movs	r1, #16
 80042d6:	4620      	mov	r0, r4
 80042d8:	47a8      	blx	r5

}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e2:	bf00      	nop
 80042e4:	08020d98 	.word	0x08020d98
 80042e8:	08020e44 	.word	0x08020e44
 80042ec:	08020e74 	.word	0x08020e74

080042f0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fe80 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800430c:	4a03      	ldr	r2, [pc, #12]	; (800431c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08024758 	.word	0x08024758

08004320 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	2238      	movs	r2, #56	; 0x38
 800432a:	4906      	ldr	r1, [pc, #24]	; (8004344 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800432c:	2008      	movs	r0, #8
 800432e:	f003 fd79 	bl	8007e24 <_ZnwjPKci>
 8004332:	4604      	mov	r4, r0
 8004334:	4620      	mov	r0, r4
 8004336:	f7ff ffdb 	bl	80042f0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800433a:	4623      	mov	r3, r4
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bd90      	pop	{r4, r7, pc}
 8004344:	08020d98 	.word	0x08020d98

08004348 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	f00c f954 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004358:	4a03      	ldr	r2, [pc, #12]	; (8004368 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	080246ac 	.word	0x080246ac

0800436c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800436c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af04      	add	r7, sp, #16
 8004372:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	3b01      	subs	r3, #1
 800438a:	429a      	cmp	r2, r3
 800438c:	bf0c      	ite	eq
 800438e:	2301      	moveq	r3, #1
 8004390:	2300      	movne	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4293      	cmp	r3, r2
 800439a:	da0b      	bge.n	80043b4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fba1 	bl	8003aee <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e7e3      	b.n	800437c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	21ff      	movs	r1, #255	; 0xff
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fb97 	bl	8003aee <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80043c0:	f00d fcd6 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80043c4:	4604      	mov	r4, r0
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	3338      	adds	r3, #56	; 0x38
 80043ca:	681d      	ldr	r5, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	461e      	mov	r6, r3
 80043d6:	f00d fcdb 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043da:	4603      	mov	r3, r0
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	2340      	movs	r3, #64	; 0x40
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80043e8:	4632      	mov	r2, r6
 80043ea:	21ff      	movs	r1, #255	; 0xff
 80043ec:	4620      	mov	r0, r4
 80043ee:	47a8      	blx	r5
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f8:	08020d98 	.word	0x08020d98
 80043fc:	08020ea4 	.word	0x08020ea4

08004400 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fdf8 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800441c:	4a03      	ldr	r2, [pc, #12]	; (800442c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	0802468c 	.word	0x0802468c

08004430 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	2243      	movs	r2, #67	; 0x43
 800443a:	4906      	ldr	r1, [pc, #24]	; (8004454 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800443c:	2008      	movs	r0, #8
 800443e:	f003 fcf1 	bl	8007e24 <_ZnwjPKci>
 8004442:	4604      	mov	r4, r0
 8004444:	4620      	mov	r0, r4
 8004446:	f7ff ffdb 	bl	8004400 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800444a:	4623      	mov	r3, r4
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bd90      	pop	{r4, r7, pc}
 8004454:	08020d98 	.word	0x08020d98

08004458 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4618      	mov	r0, r3
 8004464:	f00c f8cc 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004468:	4a03      	ldr	r2, [pc, #12]	; (8004478 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080245e0 	.word	0x080245e0

0800447c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b089      	sub	sp, #36	; 0x24
 8004480:	af04      	add	r7, sp, #16
 8004482:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	21ff      	movs	r1, #255	; 0xff
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fb2f 	bl	8003aee <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fb54 	bl	8003b42 <ringBuffer_pop>
 800449a:	4603      	mov	r3, r0
 800449c:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800449e:	f00d fc67 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80044a2:	4604      	mov	r4, r0
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	3338      	adds	r3, #56	; 0x38
 80044a8:	681d      	ldr	r5, [r3, #0]
 80044aa:	7bfe      	ldrb	r6, [r7, #15]
 80044ac:	f00d fc70 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044b0:	4603      	mov	r3, r0
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	2348      	movs	r3, #72	; 0x48
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80044be:	4632      	mov	r2, r6
 80044c0:	21ff      	movs	r1, #255	; 0xff
 80044c2:	4620      	mov	r0, r4
 80044c4:	47a8      	blx	r5

}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ce:	bf00      	nop
 80044d0:	08020d98 	.word	0x08020d98
 80044d4:	08020ed4 	.word	0x08020ed4

080044d8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fd8c 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044f4:	4a03      	ldr	r2, [pc, #12]	; (8004504 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	080245c0 	.word	0x080245c0

08004508 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	224c      	movs	r2, #76	; 0x4c
 8004512:	4906      	ldr	r1, [pc, #24]	; (800452c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004514:	2008      	movs	r0, #8
 8004516:	f003 fc85 	bl	8007e24 <_ZnwjPKci>
 800451a:	4604      	mov	r4, r0
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ffdb 	bl	80044d8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004522:	4623      	mov	r3, r4
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bd90      	pop	{r4, r7, pc}
 800452c:	08020d98 	.word	0x08020d98

08004530 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4618      	mov	r0, r3
 800453c:	f00c f860 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004540:	4a03      	ldr	r2, [pc, #12]	; (8004550 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08024514 	.word	0x08024514

08004554 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	b089      	sub	sp, #36	; 0x24
 8004558:	af04      	add	r7, sp, #16
 800455a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	21aa      	movs	r1, #170	; 0xaa
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fac1 	bl	8003aee <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	3b01      	subs	r3, #1
 8004582:	429a      	cmp	r2, r3
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4293      	cmp	r3, r2
 8004592:	da0a      	bge.n	80045aa <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fad2 	bl	8003b42 <ringBuffer_pop>
 800459e:	4603      	mov	r3, r0
 80045a0:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e7e4      	b.n	8004574 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fac7 	bl	8003b42 <ringBuffer_pop>
 80045b4:	4603      	mov	r3, r0
 80045b6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80045b8:	f00d fbda 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80045bc:	4604      	mov	r4, r0
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	3338      	adds	r3, #56	; 0x38
 80045c2:	681d      	ldr	r5, [r3, #0]
 80045c4:	7afe      	ldrb	r6, [r7, #11]
 80045c6:	f00d fbe3 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045ca:	4603      	mov	r3, r0
 80045cc:	9302      	str	r3, [sp, #8]
 80045ce:	2359      	movs	r3, #89	; 0x59
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80045d8:	4632      	mov	r2, r6
 80045da:	21aa      	movs	r1, #170	; 0xaa
 80045dc:	4620      	mov	r0, r4
 80045de:	47a8      	blx	r5
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e8:	08020d98 	.word	0x08020d98
 80045ec:	08020ef4 	.word	0x08020ef4

080045f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fd00 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800460c:	4a03      	ldr	r2, [pc, #12]	; (800461c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	080244f4 	.word	0x080244f4

08004620 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	225c      	movs	r2, #92	; 0x5c
 800462a:	4906      	ldr	r1, [pc, #24]	; (8004644 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 800462c:	2008      	movs	r0, #8
 800462e:	f003 fbf9 	bl	8007e24 <_ZnwjPKci>
 8004632:	4604      	mov	r4, r0
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff ffdb 	bl	80045f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800463a:	4623      	mov	r3, r4
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	08020d98 	.word	0x08020d98

08004648 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f00b ffd4 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004658:	4a03      	ldr	r2, [pc, #12]	; (8004668 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	08024448 	.word	0x08024448

0800466c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af04      	add	r7, sp, #16
 8004672:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d20b      	bcs.n	800469c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	4611      	mov	r1, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fa2d 	bl	8003aee <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e7ed      	b.n	8004678 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 800469c:	f00d fb68 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80046a0:	4604      	mov	r4, r0
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	3338      	adds	r3, #56	; 0x38
 80046a6:	681d      	ldr	r5, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	461e      	mov	r6, r3
 80046bc:	f00d fb68 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046c0:	4603      	mov	r3, r0
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	2363      	movs	r3, #99	; 0x63
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80046ce:	4632      	mov	r2, r6
 80046d0:	2131      	movs	r1, #49	; 0x31
 80046d2:	4620      	mov	r0, r4
 80046d4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fa5b 	bl	8003b96 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80046e0:	f00d fb46 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80046e4:	4604      	mov	r4, r0
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	3338      	adds	r3, #56	; 0x38
 80046ea:	681d      	ldr	r5, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	461e      	mov	r6, r3
 8004700:	f00d fb46 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004704:	4603      	mov	r3, r0
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	2367      	movs	r3, #103	; 0x67
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004712:	4632      	mov	r2, r6
 8004714:	2100      	movs	r1, #0
 8004716:	4620      	mov	r0, r4
 8004718:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 800471a:	f00d fb29 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 800471e:	4604      	mov	r4, r0
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	3338      	adds	r3, #56	; 0x38
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461e      	mov	r6, r3
 800473a:	f00d fb29 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800473e:	4603      	mov	r3, r0
 8004740:	9302      	str	r3, [sp, #8]
 8004742:	2368      	movs	r3, #104	; 0x68
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 800474c:	4632      	mov	r2, r6
 800474e:	2100      	movs	r1, #0
 8004750:	4620      	mov	r0, r4
 8004752:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475c:	08020d98 	.word	0x08020d98
 8004760:	08020f14 	.word	0x08020f14
 8004764:	08020f50 	.word	0x08020f50
 8004768:	08020f8c 	.word	0x08020f8c

0800476c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fc42 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	08024428 	.word	0x08024428

0800479c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	2271      	movs	r2, #113	; 0x71
 80047a6:	4906      	ldr	r1, [pc, #24]	; (80047c0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 80047a8:	2008      	movs	r0, #8
 80047aa:	f003 fb3b 	bl	8007e24 <_ZnwjPKci>
 80047ae:	4604      	mov	r4, r0
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7ff ffdb 	bl	800476c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 80047b6:	4623      	mov	r3, r4
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}
 80047c0:	08020d98 	.word	0x08020d98

080047c4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f00b ff16 	bl	8010600 <_ZN10UtestShellC1Ev>
 80047d4:	4a03      	ldr	r2, [pc, #12]	; (80047e4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	0802437c 	.word	0x0802437c

080047e8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af04      	add	r7, sp, #16
 80047ee:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	490e      	ldr	r1, [pc, #56]	; (8004830 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff f9dd 	bl	8003bb6 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80047fc:	f00d fab8 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004800:	4604      	mov	r4, r0
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	3324      	adds	r3, #36	; 0x24
 8004806:	681d      	ldr	r5, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68de      	ldr	r6, [r3, #12]
 800480e:	f00d fabf 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004812:	4603      	mov	r3, r0
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	2375      	movs	r3, #117	; 0x75
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	4632      	mov	r2, r6
 8004822:	4903      	ldr	r1, [pc, #12]	; (8004830 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004824:	4620      	mov	r0, r4
 8004826:	47a8      	blx	r5
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004830:	08020fc4 	.word	0x08020fc4
 8004834:	08020d98 	.word	0x08020d98

08004838 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fbdc 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004854:	4a03      	ldr	r2, [pc, #12]	; (8004864 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	0802435c 	.word	0x0802435c

08004868 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	2278      	movs	r2, #120	; 0x78
 8004872:	4906      	ldr	r1, [pc, #24]	; (800488c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004874:	2008      	movs	r0, #8
 8004876:	f003 fad5 	bl	8007e24 <_ZnwjPKci>
 800487a:	4604      	mov	r4, r0
 800487c:	4620      	mov	r0, r4
 800487e:	f7ff ffdb 	bl	8004838 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004882:	4623      	mov	r3, r4
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	08020d98 	.word	0x08020d98

08004890 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f00b feb0 	bl	8010600 <_ZN10UtestShellC1Ev>
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	080242b0 	.word	0x080242b0

080048b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 80048b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b8:	b08a      	sub	sp, #40	; 0x28
 80048ba:	af04      	add	r7, sp, #16
 80048bc:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	494e      	ldr	r1, [pc, #312]	; (80049fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f976 	bl	8003bb6 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80048ca:	f00d fa51 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80048ce:	4604      	mov	r4, r0
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	3324      	adds	r3, #36	; 0x24
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68de      	ldr	r6, [r3, #12]
 80048dc:	f00d fa58 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048e0:	4603      	mov	r3, r0
 80048e2:	9302      	str	r3, [sp, #8]
 80048e4:	237c      	movs	r3, #124	; 0x7c
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	4632      	mov	r2, r6
 80048f0:	4942      	ldr	r1, [pc, #264]	; (80049fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80048f2:	4620      	mov	r0, r4
 80048f4:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4942      	ldr	r1, [pc, #264]	; (8004a04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff f979 	bl	8003bf4 <ringBuffer_lookFor>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d05c      	beq.n	80049cc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	493b      	ldr	r1, [pc, #236]	; (8004a04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff f96b 	bl	8003bf4 <ringBuffer_lookFor>
 800491e:	4604      	mov	r4, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4937      	ldr	r1, [pc, #220]	; (8004a04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f964 	bl	8003bf4 <ringBuffer_lookFor>
 800492c:	4603      	mov	r3, r0
 800492e:	429c      	cmp	r4, r3
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 800493c:	f00d fa18 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004940:	6803      	ldr	r3, [r0, #0]
 8004942:	3370      	adds	r3, #112	; 0x70
 8004944:	681c      	ldr	r4, [r3, #0]
 8004946:	237d      	movs	r3, #125	; 0x7d
 8004948:	4a2d      	ldr	r2, [pc, #180]	; (8004a00 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800494a:	492f      	ldr	r1, [pc, #188]	; (8004a08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 800494c:	47a0      	blx	r4
 800494e:	f00d fa0f 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004952:	4604      	mov	r4, r0
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	3358      	adds	r3, #88	; 0x58
 8004958:	681d      	ldr	r5, [r3, #0]
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	2101      	movs	r1, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f006 fca1 	bl	800b2a8 <_Z10StringFromi>
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f006 f9a8 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8004970:	4606      	mov	r6, r0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4923      	ldr	r1, [pc, #140]	; (8004a04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff f93b 	bl	8003bf4 <ringBuffer_lookFor>
 800497e:	4602      	mov	r2, r0
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f006 ff08 	bl	800b79c <_Z10StringFromm>
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	4618      	mov	r0, r3
 8004992:	f006 f995 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8004996:	4680      	mov	r8, r0
 8004998:	f00d f9fa 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800499c:	4603      	mov	r3, r0
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	237d      	movs	r3, #125	; 0x7d
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	2300      	movs	r3, #0
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4643      	mov	r3, r8
 80049ae:	4632      	mov	r2, r6
 80049b0:	2101      	movs	r1, #1
 80049b2:	4620      	mov	r0, r4
 80049b4:	47a8      	blx	r5
 80049b6:	f107 0310 	add.w	r3, r7, #16
 80049ba:	4618      	mov	r0, r3
 80049bc:	f006 f9ad 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80049c0:	f107 0308 	add.w	r3, r7, #8
 80049c4:	4618      	mov	r0, r3
 80049c6:	f006 f9a8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80049ca:	e012      	b.n	80049f2 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80049cc:	f00d f9d0 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80049d0:	4604      	mov	r4, r0
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	3338      	adds	r3, #56	; 0x38
 80049d6:	681d      	ldr	r5, [r3, #0]
 80049d8:	f00d f9da 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049dc:	4603      	mov	r3, r0
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	237d      	movs	r3, #125	; 0x7d
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	2200      	movs	r2, #0
 80049ec:	2100      	movs	r1, #0
 80049ee:	4620      	mov	r0, r4
 80049f0:	47a8      	blx	r5
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049fc:	08020fcc 	.word	0x08020fcc
 8004a00:	08020d98 	.word	0x08020d98
 8004a04:	08020fd8 	.word	0x08020fd8
 8004a08:	08020fe0 	.word	0x08020fe0

08004a0c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff faf2 	bl	800400c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a28:	4a03      	ldr	r2, [pc, #12]	; (8004a38 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08024290 	.word	0x08024290

08004a3c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	4906      	ldr	r1, [pc, #24]	; (8004a60 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004a48:	2008      	movs	r0, #8
 8004a4a:	f003 f9eb 	bl	8007e24 <_ZnwjPKci>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff ffdb 	bl	8004a0c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004a56:	4623      	mov	r3, r4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd90      	pop	{r4, r7, pc}
 8004a60:	08020d98 	.word	0x08020d98

08004a64 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f00b fdc6 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004a74:	4a03      	ldr	r2, [pc, #12]	; (8004a84 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	080241e4 	.word	0x080241e4

08004a88 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af04      	add	r7, sp, #16
 8004a8e:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004a90:	f00d f96e 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004a94:	4604      	mov	r4, r0
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	3338      	adds	r3, #56	; 0x38
 8004a9a:	681d      	ldr	r5, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f8bd 	bl	8003c20 <ringBuffer_capacity>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461e      	mov	r6, r3
 8004aaa:	f00d f971 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	2383      	movs	r3, #131	; 0x83
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004abc:	4632      	mov	r2, r6
 8004abe:	2132      	movs	r1, #50	; 0x32
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	47a8      	blx	r5

}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004acc:	08020d98 	.word	0x08020d98
 8004ad0:	08021084 	.word	0x08021084

08004ad4 <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004ad4:	b5b0      	push	{r4, r5, r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	491d      	ldr	r1, [pc, #116]	; (8004b58 <_Z18UART_Transmit_FakePh+0x84>)
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f005 fd61 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f003 fe34 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004af4:	4604      	mov	r4, r0
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	3318      	adds	r3, #24
 8004afa:	681d      	ldr	r5, [r3, #0]
 8004afc:	f107 0310 	add.w	r3, r7, #16
 8004b00:	4916      	ldr	r1, [pc, #88]	; (8004b5c <_Z18UART_Transmit_FakePh+0x88>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	f005 fd51 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4620      	mov	r0, r4
 8004b10:	47a8      	blx	r5
 8004b12:	4604      	mov	r4, r0
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	333c      	adds	r3, #60	; 0x3c
 8004b18:	681d      	ldr	r5, [r3, #0]
 8004b1a:	f107 0318 	add.w	r3, r7, #24
 8004b1e:	4910      	ldr	r1, [pc, #64]	; (8004b60 <_Z18UART_Transmit_FakePh+0x8c>)
 8004b20:	4618      	mov	r0, r3
 8004b22:	f005 fd42 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004b26:	f107 0318 	add.w	r3, r7, #24
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4620      	mov	r0, r4
 8004b30:	47a8      	blx	r5
 8004b32:	f107 0318 	add.w	r3, r7, #24
 8004b36:	4618      	mov	r0, r3
 8004b38:	f006 f8ef 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	4618      	mov	r0, r3
 8004b42:	f006 f8ea 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f006 f8e5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8004b50:	bf00      	nop
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bdb0      	pop	{r4, r5, r7, pc}
 8004b58:	080210bc 	.word	0x080210bc
 8004b5c:	080210c0 	.word	0x080210c0
 8004b60:	080210d4 	.word	0x080210d4

08004b64 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <_Z17UART_Receive_Fakev+0x64>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f005 fd1b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004b74:	463b      	mov	r3, r7
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 fdef 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	3318      	adds	r3, #24
 8004b84:	681d      	ldr	r5, [r3, #0]
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4910      	ldr	r1, [pc, #64]	; (8004bcc <_Z17UART_Receive_Fakev+0x68>)
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f005 fd0c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	4619      	mov	r1, r3
 8004b98:	4620      	mov	r0, r4
 8004b9a:	47a8      	blx	r5
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	3264      	adds	r2, #100	; 0x64
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4790      	blx	r2
 8004ba8:	4603      	mov	r3, r0
 8004baa:	b2dc      	uxtb	r4, r3
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f006 f8b2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f006 f8ae 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004bbe:	4623      	mov	r3, r4
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc8:	080210bc 	.word	0x080210bc
 8004bcc:	080210dc 	.word	0x080210dc

08004bd0 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <_Z12getTick_Fakev+0x30>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d103      	bne.n	8004be6 <_Z12getTick_Fakev+0x16>
		time = 0;
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <_Z12getTick_Fakev+0x30>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e004      	b.n	8004bf0 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <_Z12getTick_Fakev+0x30>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3301      	adds	r3, #1
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <_Z12getTick_Fakev+0x30>)
 8004bee:	6013      	str	r3, [r2, #0]
	return time;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <_Z12getTick_Fakev+0x30>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	200005b8 	.word	0x200005b8

08004c04 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004c0c:	2364      	movs	r3, #100	; 0x64
 8004c0e:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004c10:	4904      	ldr	r1, [pc, #16]	; (8004c24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004c12:	4805      	ldr	r0, [pc, #20]	; (8004c28 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004c14:	f7fe fe78 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	08004bd1 	.word	0x08004bd1
 8004c24:	08004b65 	.word	0x08004b65
 8004c28:	08004ad5 	.word	0x08004ad5

08004c2c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	490c      	ldr	r1, [pc, #48]	; (8004c6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f005 fcb5 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004c40:	f107 0308 	add.w	r3, r7, #8
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 fd88 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	329c      	adds	r2, #156	; 0x9c
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	4790      	blx	r2
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f006 f85c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	080210bc 	.word	0x080210bc

08004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f00d f8a2 	bl	8011dc4 <_ZN5UtestC1Ev>
 8004c80:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	080241c4 	.word	0x080241c4

08004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	4a05      	ldr	r2, [pc, #20]	; (8004cb4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f00d f89d 	bl	8011de4 <_ZN5UtestD1Ev>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	080241c4 	.word	0x080241c4

08004cb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ffe7 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f003 f8bf 	bl	8007e4c <_ZdlPvj>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ffc4 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004ce8:	4a03      	ldr	r2, [pc, #12]	; (8004cf8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	080241a4 	.word	0x080241a4

08004cfc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	22b7      	movs	r2, #183	; 0xb7
 8004d06:	4906      	ldr	r1, [pc, #24]	; (8004d20 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004d08:	2004      	movs	r0, #4
 8004d0a:	f003 f88b 	bl	8007e24 <_ZnwjPKci>
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7ff ffe1 	bl	8004cd8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004d16:	4623      	mov	r3, r4
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}
 8004d20:	08020d98 	.word	0x08020d98

08004d24 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f00b fc66 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004d34:	4a03      	ldr	r2, [pc, #12]	; (8004d44 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	080240f8 	.word	0x080240f8

08004d48 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004d48:	b5b0      	push	{r4, r5, r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af04      	add	r7, sp, #16
 8004d4e:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004d52:	4a11      	ldr	r2, [pc, #68]	; (8004d98 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004d54:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	2364      	movs	r3, #100	; 0x64
 8004d5c:	4a0f      	ldr	r2, [pc, #60]	; (8004d9c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004d5e:	4910      	ldr	r1, [pc, #64]	; (8004da0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004d60:	f7fe fdd2 	bl	8003908 <ESP_Init>
 8004d64:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004d66:	f00d f803 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	3338      	adds	r3, #56	; 0x38
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	f00d f80d 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d76:	4603      	mov	r3, r0
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	23c5      	movs	r3, #197	; 0xc5
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	2101      	movs	r1, #1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	47a8      	blx	r5

}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bdb0      	pop	{r4, r5, r7, pc}
 8004d94:	200005bc 	.word	0x200005bc
 8004d98:	08004ad5 	.word	0x08004ad5
 8004d9c:	08004bd1 	.word	0x08004bd1
 8004da0:	08004b65 	.word	0x08004b65
 8004da4:	08020d98 	.word	0x08020d98
 8004da8:	080210f0 	.word	0x080210f0

08004dac <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff5a 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004dbc:	4a03      	ldr	r2, [pc, #12]	; (8004dcc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	080240d8 	.word	0x080240d8

08004dd0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	22c9      	movs	r2, #201	; 0xc9
 8004dda:	4906      	ldr	r1, [pc, #24]	; (8004df4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004ddc:	2004      	movs	r0, #4
 8004dde:	f003 f821 	bl	8007e24 <_ZnwjPKci>
 8004de2:	4604      	mov	r4, r0
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7ff ffe1 	bl	8004dac <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004dea:	4623      	mov	r3, r4
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}
 8004df4:	08020d98 	.word	0x08020d98

08004df8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f00b fbfc 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004e08:	4a03      	ldr	r2, [pc, #12]	; (8004e18 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	0802402c 	.word	0x0802402c

08004e1c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b090      	sub	sp, #64	; 0x40
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8004e24:	f107 0308 	add.w	r3, r7, #8
 8004e28:	4949      	ldr	r1, [pc, #292]	; (8004f50 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f005 fbbd 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004e30:	f107 0308 	add.w	r3, r7, #8
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f003 fc90 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	681d      	ldr	r5, [r3, #0]
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	4942      	ldr	r1, [pc, #264]	; (8004f54 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f005 fbad 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004e50:	f107 0310 	add.w	r3, r7, #16
 8004e54:	4619      	mov	r1, r3
 8004e56:	4620      	mov	r0, r4
 8004e58:	47a8      	blx	r5
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	334c      	adds	r3, #76	; 0x4c
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	f107 0318 	add.w	r3, r7, #24
 8004e66:	493c      	ldr	r1, [pc, #240]	; (8004f58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f005 fb9e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004e6e:	f107 0318 	add.w	r3, r7, #24
 8004e72:	4a3a      	ldr	r2, [pc, #232]	; (8004f5c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x140>)
 8004e74:	4619      	mov	r1, r3
 8004e76:	4620      	mov	r0, r4
 8004e78:	47a8      	blx	r5
 8004e7a:	f107 0318 	add.w	r3, r7, #24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 ff4b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004e84:	f107 0310 	add.w	r3, r7, #16
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f005 ff46 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f005 ff41 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8004e98:	4830      	ldr	r0, [pc, #192]	; (8004f5c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x140>)
 8004e9a:	f7fe fd61 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 8004e9e:	f107 0320 	add.w	r3, r7, #32
 8004ea2:	492b      	ldr	r1, [pc, #172]	; (8004f50 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f005 fb80 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004eaa:	f107 0320 	add.w	r3, r7, #32
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 fc53 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec2:	4924      	ldr	r1, [pc, #144]	; (8004f54 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 fb70 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	47a8      	blx	r5
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	334c      	adds	r3, #76	; 0x4c
 8004eda:	681d      	ldr	r5, [r3, #0]
 8004edc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ee0:	491d      	ldr	r1, [pc, #116]	; (8004f58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f005 fb61 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eec:	4a1c      	ldr	r2, [pc, #112]	; (8004f60 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x144>)
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	47a8      	blx	r5
 8004ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f005 ff0e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 ff09 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8004f08:	f107 0320 	add.w	r3, r7, #32
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 ff04 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 8004f12:	4813      	ldr	r0, [pc, #76]	; (8004f60 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x144>)
 8004f14:	f7fe fd24 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 8004f18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f1c:	490c      	ldr	r1, [pc, #48]	; (8004f50 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f005 fb43 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f003 fc16 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f30:	4603      	mov	r3, r0
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	3294      	adds	r2, #148	; 0x94
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4790      	blx	r2
 8004f3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f40:	4618      	mov	r0, r3
 8004f42:	f005 feea 	bl	800ad1a <_ZN12SimpleStringD1Ev>

}
 8004f46:	bf00      	nop
 8004f48:	3740      	adds	r7, #64	; 0x40
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	080210bc 	.word	0x080210bc
 8004f54:	080210c0 	.word	0x080210c0
 8004f58:	080210d4 	.word	0x080210d4
 8004f5c:	08020fc4 	.word	0x08020fc4
 8004f60:	08021110 	.word	0x08021110

08004f64 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fe7e 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004f74:	4a03      	ldr	r2, [pc, #12]	; (8004f84 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	0802400c 	.word	0x0802400c

08004f88 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	22d4      	movs	r2, #212	; 0xd4
 8004f92:	4906      	ldr	r1, [pc, #24]	; (8004fac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004f94:	2004      	movs	r0, #4
 8004f96:	f002 ff45 	bl	8007e24 <_ZnwjPKci>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff ffe1 	bl	8004f64 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	08020d98 	.word	0x08020d98

08004fb0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f00b fb20 	bl	8010600 <_ZN10UtestShellC1Ev>
 8004fc0:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	08023f60 	.word	0x08023f60

08004fd4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8004fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd6:	b099      	sub	sp, #100	; 0x64
 8004fd8:	af04      	add	r7, sp, #16
 8004fda:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8004fdc:	f107 0308 	add.w	r3, r7, #8
 8004fe0:	4973      	ldr	r1, [pc, #460]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f005 fae1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 fbb4 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	681d      	ldr	r5, [r3, #0]
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	496c      	ldr	r1, [pc, #432]	; (80051b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8005002:	4618      	mov	r0, r3
 8005004:	f005 fad1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005008:	f107 0310 	add.w	r3, r7, #16
 800500c:	4619      	mov	r1, r3
 800500e:	4620      	mov	r0, r4
 8005010:	47a8      	blx	r5
 8005012:	4603      	mov	r3, r0
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	3264      	adds	r2, #100	; 0x64
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	214f      	movs	r1, #79	; 0x4f
 800501c:	4618      	mov	r0, r3
 800501e:	4790      	blx	r2
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	4618      	mov	r0, r3
 8005026:	f005 fe78 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800502a:	f107 0308 	add.w	r3, r7, #8
 800502e:	4618      	mov	r0, r3
 8005030:	f005 fe73 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005034:	f7fe fca2 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005038:	f107 0318 	add.w	r3, r7, #24
 800503c:	495c      	ldr	r1, [pc, #368]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800503e:	4618      	mov	r0, r3
 8005040:	f005 fab3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005044:	f107 0318 	add.w	r3, r7, #24
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f003 fb86 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005050:	4604      	mov	r4, r0
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	681d      	ldr	r5, [r3, #0]
 8005058:	f107 0320 	add.w	r3, r7, #32
 800505c:	4955      	ldr	r1, [pc, #340]	; (80051b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800505e:	4618      	mov	r0, r3
 8005060:	f005 faa3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005064:	f107 0320 	add.w	r3, r7, #32
 8005068:	4619      	mov	r1, r3
 800506a:	4620      	mov	r0, r4
 800506c:	47a8      	blx	r5
 800506e:	4603      	mov	r3, r0
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	3264      	adds	r2, #100	; 0x64
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	214b      	movs	r1, #75	; 0x4b
 8005078:	4618      	mov	r0, r3
 800507a:	4790      	blx	r2
 800507c:	f107 0320 	add.w	r3, r7, #32
 8005080:	4618      	mov	r0, r3
 8005082:	f005 fe4a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8005086:	f107 0318 	add.w	r3, r7, #24
 800508a:	4618      	mov	r0, r3
 800508c:	f005 fe45 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005090:	f7fe fc74 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005098:	4945      	ldr	r1, [pc, #276]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800509a:	4618      	mov	r0, r3
 800509c:	f005 fa85 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80050a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f003 fb58 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050ac:	4604      	mov	r4, r0
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	681d      	ldr	r5, [r3, #0]
 80050b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050b8:	493e      	ldr	r1, [pc, #248]	; (80051b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 80050ba:	4618      	mov	r0, r3
 80050bc:	f005 fa75 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80050c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050c4:	4619      	mov	r1, r3
 80050c6:	4620      	mov	r0, r4
 80050c8:	47a8      	blx	r5
 80050ca:	4603      	mov	r3, r0
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	3264      	adds	r2, #100	; 0x64
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	210d      	movs	r1, #13
 80050d4:	4618      	mov	r0, r3
 80050d6:	4790      	blx	r2
 80050d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050dc:	4618      	mov	r0, r3
 80050de:	f005 fe1c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80050e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 fe17 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80050ec:	f7fe fc46 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 80050f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050f4:	492e      	ldr	r1, [pc, #184]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80050f6:	4618      	mov	r0, r3
 80050f8:	f005 fa57 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80050fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f003 fb2a 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005108:	4604      	mov	r4, r0
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	681d      	ldr	r5, [r3, #0]
 8005110:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005114:	4927      	ldr	r1, [pc, #156]	; (80051b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8005116:	4618      	mov	r0, r3
 8005118:	f005 fa47 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800511c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005120:	4619      	mov	r1, r3
 8005122:	4620      	mov	r0, r4
 8005124:	47a8      	blx	r5
 8005126:	4603      	mov	r3, r0
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	3264      	adds	r2, #100	; 0x64
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	210a      	movs	r1, #10
 8005130:	4618      	mov	r0, r3
 8005132:	4790      	blx	r2
 8005134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005138:	4618      	mov	r0, r3
 800513a:	f005 fdee 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800513e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005142:	4618      	mov	r0, r3
 8005144:	f005 fde9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005148:	f7fe fc18 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 800514c:	f00c fe10 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8005150:	4604      	mov	r4, r0
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	3324      	adds	r3, #36	; 0x24
 8005156:	681d      	ldr	r5, [r3, #0]
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68de      	ldr	r6, [r3, #12]
 800515e:	f00c fe17 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005162:	4603      	mov	r3, r0
 8005164:	9302      	str	r3, [sp, #8]
 8005166:	23e0      	movs	r3, #224	; 0xe0
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	4b14      	ldr	r3, [pc, #80]	; (80051bc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e8>)
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2300      	movs	r3, #0
 8005170:	4632      	mov	r2, r6
 8005172:	4913      	ldr	r1, [pc, #76]	; (80051c0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ec>)
 8005174:	4620      	mov	r0, r4
 8005176:	47a8      	blx	r5
	mock().checkExpectations();
 8005178:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800517c:	490c      	ldr	r1, [pc, #48]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800517e:	4618      	mov	r0, r3
 8005180:	f005 fa13 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005184:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f003 fae6 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005190:	4603      	mov	r3, r0
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	3294      	adds	r2, #148	; 0x94
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	4790      	blx	r2
 800519c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051a0:	4618      	mov	r0, r3
 80051a2:	f005 fdba 	bl	800ad1a <_ZN12SimpleStringD1Ev>

}
 80051a6:	bf00      	nop
 80051a8:	3754      	adds	r7, #84	; 0x54
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	080210bc 	.word	0x080210bc
 80051b4:	080210dc 	.word	0x080210dc
 80051b8:	20000494 	.word	0x20000494
 80051bc:	08020d98 	.word	0x08020d98
 80051c0:	08021118 	.word	0x08021118

080051c4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fd4e 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80051d4:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08023f40 	.word	0x08023f40

080051e8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	22e5      	movs	r2, #229	; 0xe5
 80051f2:	4906      	ldr	r1, [pc, #24]	; (800520c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80051f4:	2004      	movs	r0, #4
 80051f6:	f002 fe15 	bl	8007e24 <_ZnwjPKci>
 80051fa:	4604      	mov	r4, r0
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7ff ffe1 	bl	80051c4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005202:	4623      	mov	r3, r4
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}
 800520c:	08020d98 	.word	0x08020d98

08005210 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4618      	mov	r0, r3
 800521c:	f00b f9f0 	bl	8010600 <_ZN10UtestShellC1Ev>
 8005220:	4a03      	ldr	r2, [pc, #12]	; (8005230 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	08023e94 	.word	0x08023e94

08005234 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005236:	b093      	sub	sp, #76	; 0x4c
 8005238:	af04      	add	r7, sp, #16
 800523a:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 800523c:	4a40      	ldr	r2, [pc, #256]	; (8005340 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x10c>)
 800523e:	f107 030c 	add.w	r3, r7, #12
 8005242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005246:	6018      	str	r0, [r3, #0]
 8005248:	3304      	adds	r3, #4
 800524a:	7019      	strb	r1, [r3, #0]
 800524c:	f107 0311 	add.w	r3, r7, #17
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 8005256:	2300      	movs	r3, #0
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	f107 030c 	add.w	r3, r7, #12
 800525e:	4618      	mov	r0, r3
 8005260:	f7fa ffec 	bl	800023c <strlen>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	4293      	cmp	r3, r2
 800526c:	da35      	bge.n	80052da <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800526e:	f107 0318 	add.w	r3, r7, #24
 8005272:	4934      	ldr	r1, [pc, #208]	; (8005344 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 8005274:	4618      	mov	r0, r3
 8005276:	f005 f998 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800527a:	f107 0318 	add.w	r3, r7, #24
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f003 fa6b 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005286:	4604      	mov	r4, r0
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	330c      	adds	r3, #12
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	f107 0320 	add.w	r3, r7, #32
 8005292:	492d      	ldr	r1, [pc, #180]	; (8005348 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x114>)
 8005294:	4618      	mov	r0, r3
 8005296:	f005 f988 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800529a:	f107 0320 	add.w	r3, r7, #32
 800529e:	4619      	mov	r1, r3
 80052a0:	4620      	mov	r0, r4
 80052a2:	47a8      	blx	r5
 80052a4:	4603      	mov	r3, r0
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	3264      	adds	r2, #100	; 0x64
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	f107 000c 	add.w	r0, r7, #12
 80052b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052b2:	4401      	add	r1, r0
 80052b4:	7809      	ldrb	r1, [r1, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	4790      	blx	r2
 80052ba:	f107 0320 	add.w	r3, r7, #32
 80052be:	4618      	mov	r0, r3
 80052c0:	f005 fd2b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80052c4:	f107 0318 	add.w	r3, r7, #24
 80052c8:	4618      	mov	r0, r3
 80052ca:	f005 fd26 	bl	800ad1a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80052ce:	f7fe fb55 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	3301      	adds	r3, #1
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
 80052d8:	e7bf      	b.n	800525a <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80052da:	481c      	ldr	r0, [pc, #112]	; (800534c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x118>)
 80052dc:	f7fe fb68 	bl	80039b0 <Read_Response>
 80052e0:	6338      	str	r0, [r7, #48]	; 0x30

	LONGS_EQUAL(1,result);
 80052e2:	f00c fd45 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80052e6:	4604      	mov	r4, r0
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	3338      	adds	r3, #56	; 0x38
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80052f0:	f00c fd4e 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80052f4:	4603      	mov	r3, r0
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	23f1      	movs	r3, #241	; 0xf1
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x11c>)
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x120>)
 8005302:	4632      	mov	r2, r6
 8005304:	2101      	movs	r1, #1
 8005306:	4620      	mov	r0, r4
 8005308:	47a8      	blx	r5
	mock().checkExpectations();
 800530a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530e:	490d      	ldr	r1, [pc, #52]	; (8005344 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 8005310:	4618      	mov	r0, r3
 8005312:	f005 f94a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f003 fa1d 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005322:	4603      	mov	r3, r0
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	3294      	adds	r2, #148	; 0x94
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	4790      	blx	r2
 800532e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005332:	4618      	mov	r0, r3
 8005334:	f005 fcf1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8005338:	bf00      	nop
 800533a:	373c      	adds	r7, #60	; 0x3c
 800533c:	46bd      	mov	sp, r7
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	08021124 	.word	0x08021124
 8005344:	080210bc 	.word	0x080210bc
 8005348:	080210dc 	.word	0x080210dc
 800534c:	08021120 	.word	0x08021120
 8005350:	08020d98 	.word	0x08020d98
 8005354:	080210f0 	.word	0x080210f0

08005358 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fc84 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005368:	4a03      	ldr	r2, [pc, #12]	; (8005378 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08023e74 	.word	0x08023e74

0800537c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	22f6      	movs	r2, #246	; 0xf6
 8005386:	4906      	ldr	r1, [pc, #24]	; (80053a0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005388:	2004      	movs	r0, #4
 800538a:	f002 fd4b 	bl	8007e24 <_ZnwjPKci>
 800538e:	4604      	mov	r4, r0
 8005390:	4620      	mov	r0, r4
 8005392:	f7ff ffe1 	bl	8005358 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005396:	4623      	mov	r3, r4
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bd90      	pop	{r4, r7, pc}
 80053a0:	08020d98 	.word	0x08020d98

080053a4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f00b f926 	bl	8010600 <_ZN10UtestShellC1Ev>
 80053b4:	4a03      	ldr	r2, [pc, #12]	; (80053c4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	08023dc8 	.word	0x08023dc8

080053c8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 80053c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ca:	b08b      	sub	sp, #44	; 0x2c
 80053cc:	af04      	add	r7, sp, #16
 80053ce:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 80053d0:	2305      	movs	r3, #5
 80053d2:	75fb      	strb	r3, [r7, #23]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80053d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053d8:	481c      	ldr	r0, [pc, #112]	; (800544c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x84>)
 80053da:	f7fe fafb 	bl	80039d4 <Wait_Response>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
		if(response_state != IDLE)
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b05      	cmp	r3, #5
 80053e6:	d100      	bne.n	80053ea <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80053e8:	e7f4      	b.n	80053d4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80053ea:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80053ec:	f00c fcc0 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80053f0:	4604      	mov	r4, r0
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	3338      	adds	r3, #56	; 0x38
 80053f6:	681d      	ldr	r5, [r3, #0]
 80053f8:	7dfe      	ldrb	r6, [r7, #23]
 80053fa:	f00c fcc9 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80053fe:	4603      	mov	r3, r0
 8005400:	9302      	str	r3, [sp, #8]
 8005402:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x88>)
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x8c>)
 800540e:	4632      	mov	r2, r6
 8005410:	2102      	movs	r1, #2
 8005412:	4620      	mov	r0, r4
 8005414:	47a8      	blx	r5
	mock().checkExpectations();
 8005416:	f107 030c 	add.w	r3, r7, #12
 800541a:	490f      	ldr	r1, [pc, #60]	; (8005458 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x90>)
 800541c:	4618      	mov	r0, r3
 800541e:	f005 f8c4 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f003 f997 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800542e:	4603      	mov	r3, r0
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	3294      	adds	r2, #148	; 0x94
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	4790      	blx	r2
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	4618      	mov	r0, r3
 8005440:	f005 fc6b 	bl	800ad1a <_ZN12SimpleStringD1Ev>

}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544c:	08021120 	.word	0x08021120
 8005450:	08020d98 	.word	0x08020d98
 8005454:	08021130 	.word	0x08021130
 8005458:	080210bc 	.word	0x080210bc

0800545c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff fc02 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800546c:	4a03      	ldr	r2, [pc, #12]	; (800547c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	08023da8 	.word	0x08023da8

08005480 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	f240 1207 	movw	r2, #263	; 0x107
 800548c:	4906      	ldr	r1, [pc, #24]	; (80054a8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800548e:	2004      	movs	r0, #4
 8005490:	f002 fcc8 	bl	8007e24 <_ZnwjPKci>
 8005494:	4604      	mov	r4, r0
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff ffe0 	bl	800545c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 800549c:	4623      	mov	r3, r4
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd90      	pop	{r4, r7, pc}
 80054a6:	bf00      	nop
 80054a8:	08020d98 	.word	0x08020d98

080054ac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f00b f8a2 	bl	8010600 <_ZN10UtestShellC1Ev>
 80054bc:	4a03      	ldr	r2, [pc, #12]	; (80054cc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	08023cfc 	.word	0x08023cfc

080054d0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	b093      	sub	sp, #76	; 0x4c
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80054d8:	2305      	movs	r3, #5
 80054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	char response[10] = "OK\r\n";
 80054de:	4a46      	ldr	r2, [pc, #280]	; (80055f8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x128>)
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e8:	6018      	str	r0, [r3, #0]
 80054ea:	3304      	adds	r3, #4
 80054ec:	7019      	strb	r1, [r3, #0]
 80054ee:	f107 0311 	add.w	r3, r7, #17
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 80054f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054fc:	483f      	ldr	r0, [pc, #252]	; (80055fc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x12c>)
 80054fe:	f7fe fa69 	bl	80039d4 <Wait_Response>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if(response_state != IDLE)
 8005508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800550c:	2b05      	cmp	r3, #5
 800550e:	d141      	bne.n	8005594 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005510:	2300      	movs	r3, #0
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	f107 030c 	add.w	r3, r7, #12
 8005518:	4618      	mov	r0, r3
 800551a:	f7fa fe8f 	bl	800023c <strlen>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005524:	4293      	cmp	r3, r2
 8005526:	dae7      	bge.n	80054f8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005528:	f107 0318 	add.w	r3, r7, #24
 800552c:	4934      	ldr	r1, [pc, #208]	; (8005600 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x130>)
 800552e:	4618      	mov	r0, r3
 8005530:	f005 f83b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005534:	f107 0318 	add.w	r3, r7, #24
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f003 f90e 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005540:	4604      	mov	r4, r0
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	681d      	ldr	r5, [r3, #0]
 8005548:	f107 0320 	add.w	r3, r7, #32
 800554c:	492d      	ldr	r1, [pc, #180]	; (8005604 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x134>)
 800554e:	4618      	mov	r0, r3
 8005550:	f005 f82b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005554:	f107 0320 	add.w	r3, r7, #32
 8005558:	4619      	mov	r1, r3
 800555a:	4620      	mov	r0, r4
 800555c:	47a8      	blx	r5
 800555e:	4603      	mov	r3, r0
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	3264      	adds	r2, #100	; 0x64
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	f107 000c 	add.w	r0, r7, #12
 800556a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800556c:	4401      	add	r1, r0
 800556e:	7809      	ldrb	r1, [r1, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	4790      	blx	r2
 8005574:	f107 0320 	add.w	r3, r7, #32
 8005578:	4618      	mov	r0, r3
 800557a:	f005 fbce 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800557e:	f107 0318 	add.w	r3, r7, #24
 8005582:	4618      	mov	r0, r3
 8005584:	f005 fbc9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005588:	f7fe f9f8 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	3301      	adds	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	e7bf      	b.n	8005514 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 8005594:	bf00      	nop
		}
	}
	mock().checkExpectations();
 8005596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800559a:	4919      	ldr	r1, [pc, #100]	; (8005600 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x130>)
 800559c:	4618      	mov	r0, r3
 800559e:	f005 f804 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80055a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f003 f8d7 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80055ae:	4603      	mov	r3, r0
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	3294      	adds	r2, #148	; 0x94
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	4790      	blx	r2
 80055ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 fbab 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	LONGS_EQUAL(FOUND,response_state);
 80055c4:	f00c fbd4 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80055c8:	4604      	mov	r4, r0
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	3338      	adds	r3, #56	; 0x38
 80055ce:	681d      	ldr	r5, [r3, #0]
 80055d0:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80055d4:	f00c fbdc 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055d8:	4603      	mov	r3, r0
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x138>)
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x13c>)
 80055e8:	4632      	mov	r2, r6
 80055ea:	2100      	movs	r1, #0
 80055ec:	4620      	mov	r0, r4
 80055ee:	47a8      	blx	r5
}
 80055f0:	bf00      	nop
 80055f2:	373c      	adds	r7, #60	; 0x3c
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f8:	08021124 	.word	0x08021124
 80055fc:	08021120 	.word	0x08021120
 8005600:	080210bc 	.word	0x080210bc
 8005604:	080210dc 	.word	0x080210dc
 8005608:	08020d98 	.word	0x08020d98
 800560c:	08021164 	.word	0x08021164

08005610 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fb28 	bl	8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005620:	4a03      	ldr	r2, [pc, #12]	; (8005630 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08023cdc 	.word	0x08023cdc

08005634 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	f240 121d 	movw	r2, #285	; 0x11d
 8005640:	4906      	ldr	r1, [pc, #24]	; (800565c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005642:	2004      	movs	r0, #4
 8005644:	f002 fbee 	bl	8007e24 <_ZnwjPKci>
 8005648:	4604      	mov	r4, r0
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff ffe0 	bl	8005610 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005650:	4623      	mov	r3, r4
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bd90      	pop	{r4, r7, pc}
 800565a:	bf00      	nop
 800565c:	08020d98 	.word	0x08020d98

08005660 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	f00a ffc8 	bl	8010600 <_ZN10UtestShellC1Ev>
 8005670:	4a03      	ldr	r2, [pc, #12]	; (8005680 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08023c30 	.word	0x08023c30

08005684 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005686:	b091      	sub	sp, #68	; 0x44
 8005688:	af04      	add	r7, sp, #16
 800568a:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 800568c:	2302      	movs	r3, #2
 800568e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

//	while(1)
//	{

		//mock().expectOneCall("UART_Transmit_Fake").withParameter("data",(uint8_t*)AT_CWMODE_STATION);
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 8005692:	f107 030c 	add.w	r3, r7, #12
 8005696:	4938      	ldr	r1, [pc, #224]	; (8005778 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xf4>)
 8005698:	4618      	mov	r0, r3
 800569a:	f004 ff86 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f003 f859 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80056aa:	4604      	mov	r4, r0
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	681d      	ldr	r5, [r3, #0]
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	4931      	ldr	r1, [pc, #196]	; (800577c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xf8>)
 80056b8:	4618      	mov	r0, r3
 80056ba:	f004 ff76 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80056be:	f107 0314 	add.w	r3, r7, #20
 80056c2:	4619      	mov	r1, r3
 80056c4:	4620      	mov	r0, r4
 80056c6:	47a8      	blx	r5
 80056c8:	4604      	mov	r4, r0
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	334c      	adds	r3, #76	; 0x4c
 80056ce:	681d      	ldr	r5, [r3, #0]
 80056d0:	f107 031c 	add.w	r3, r7, #28
 80056d4:	492a      	ldr	r1, [pc, #168]	; (8005780 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 80056d6:	4618      	mov	r0, r3
 80056d8:	f004 ff67 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80056dc:	f107 031c 	add.w	r3, r7, #28
 80056e0:	4a28      	ldr	r2, [pc, #160]	; (8005784 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 80056e2:	4619      	mov	r1, r3
 80056e4:	4620      	mov	r0, r4
 80056e6:	47a8      	blx	r5
 80056e8:	f107 031c 	add.w	r3, r7, #28
 80056ec:	4618      	mov	r0, r3
 80056ee:	f005 fb14 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80056f2:	f107 0314 	add.w	r3, r7, #20
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 fb0f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80056fc:	f107 030c 	add.w	r3, r7, #12
 8005700:	4618      	mov	r0, r3
 8005702:	f005 fb0a 	bl	800ad1a <_ZN12SimpleStringD1Ev>

	//	printf("%s",fake_tx_buffer[i]);
		response = Connect_Wifi("SSID","1234");
 8005706:	4920      	ldr	r1, [pc, #128]	; (8005788 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 8005708:	4820      	ldr	r0, [pc, #128]	; (800578c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x108>)
 800570a:	f7fe f99f 	bl	8003a4c <Connect_Wifi>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//			break;
//		}
//
//	}

	mock().checkExpectations();
 8005714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005718:	4917      	ldr	r1, [pc, #92]	; (8005778 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xf4>)
 800571a:	4618      	mov	r0, r3
 800571c:	f004 ff45 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8005720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f003 f818 	bl	800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800572c:	4603      	mov	r3, r0
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	3294      	adds	r2, #148	; 0x94
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	4790      	blx	r2
 8005738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573c:	4618      	mov	r0, r3
 800573e:	f005 faec 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005742:	f00c fb15 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8005746:	4604      	mov	r4, r0
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	3338      	adds	r3, #56	; 0x38
 800574c:	681d      	ldr	r5, [r3, #0]
 800574e:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8005752:	f00c fb1d 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005756:	4603      	mov	r3, r0
 8005758:	9302      	str	r3, [sp, #8]
 800575a:	f240 133d 	movw	r3, #317	; 0x13d
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x10c>)
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x110>)
 8005766:	4632      	mov	r2, r6
 8005768:	2102      	movs	r1, #2
 800576a:	4620      	mov	r0, r4
 800576c:	47a8      	blx	r5

}
 800576e:	bf00      	nop
 8005770:	3734      	adds	r7, #52	; 0x34
 8005772:	46bd      	mov	sp, r7
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005776:	bf00      	nop
 8005778:	080210bc 	.word	0x080210bc
 800577c:	080210c0 	.word	0x080210c0
 8005780:	080210d4 	.word	0x080210d4
 8005784:	08021190 	.word	0x08021190
 8005788:	080211a0 	.word	0x080211a0
 800578c:	080211a8 	.word	0x080211a8
 8005790:	08020d98 	.word	0x08020d98
 8005794:	080211b0 	.word	0x080211b0

08005798 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f00a ff7d 	bl	80106a8 <_ZN10UtestShellD1Ev>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	08023c30 	.word	0x08023c30

080057bc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ffe7 	bl	8005798 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 80057ca:	211c      	movs	r1, #28
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 fb3d 	bl	8007e4c <_ZdlPvj>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	4a05      	ldr	r2, [pc, #20]	; (80057fc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fa51 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08023cdc 	.word	0x08023cdc

08005800 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ffe7 	bl	80057dc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 800580e:	2104      	movs	r1, #4
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f002 fb1b 	bl	8007e4c <_ZdlPvj>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	4a05      	ldr	r2, [pc, #20]	; (8005840 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f00a ff39 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	08023cfc 	.word	0x08023cfc

08005844 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ffe7 	bl	8005820 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8005852:	211c      	movs	r1, #28
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f002 faf9 	bl	8007e4c <_ZdlPvj>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	4a05      	ldr	r2, [pc, #20]	; (8005884 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fa0d 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	08023da8 	.word	0x08023da8

08005888 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff ffe7 	bl	8005864 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8005896:	2104      	movs	r1, #4
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f002 fad7 	bl	8007e4c <_ZdlPvj>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f00a fef5 	bl	80106a8 <_ZN10UtestShellD1Ev>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	08023dc8 	.word	0x08023dc8

080058cc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ffe7 	bl	80058a8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 80058da:	211c      	movs	r1, #28
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f002 fab5 	bl	8007e4c <_ZdlPvj>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	4a05      	ldr	r2, [pc, #20]	; (800590c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff f9c9 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08023e74 	.word	0x08023e74

08005910 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ffe7 	bl	80058ec <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 800591e:	2104      	movs	r1, #4
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f002 fa93 	bl	8007e4c <_ZdlPvj>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	4a05      	ldr	r2, [pc, #20]	; (8005950 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	f00a feb1 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	08023e94 	.word	0x08023e94

08005954 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ffe7 	bl	8005930 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8005962:	211c      	movs	r1, #28
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 fa71 	bl	8007e4c <_ZdlPvj>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	4a05      	ldr	r2, [pc, #20]	; (8005994 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff f985 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	08023f40 	.word	0x08023f40

08005998 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffe7 	bl	8005974 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 80059a6:	2104      	movs	r1, #4
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 fa4f 	bl	8007e4c <_ZdlPvj>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f00a fe6d 	bl	80106a8 <_ZN10UtestShellD1Ev>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	08023f60 	.word	0x08023f60

080059dc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff ffe7 	bl	80059b8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 80059ea:	211c      	movs	r1, #28
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f002 fa2d 	bl	8007e4c <_ZdlPvj>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff f941 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	0802400c 	.word	0x0802400c

08005a20 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ffe7 	bl	80059fc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8005a2e:	2104      	movs	r1, #4
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f002 fa0b 	bl	8007e4c <_ZdlPvj>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	4a05      	ldr	r2, [pc, #20]	; (8005a60 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f00a fe29 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	0802402c 	.word	0x0802402c

08005a64 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffe7 	bl	8005a40 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8005a72:	211c      	movs	r1, #28
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 f9e9 	bl	8007e4c <_ZdlPvj>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff f8fd 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	080240d8 	.word	0x080240d8

08005aa8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ffe7 	bl	8005a84 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 f9c7 	bl	8007e4c <_ZdlPvj>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	4a05      	ldr	r2, [pc, #20]	; (8005ae8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f00a fde5 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	080240f8 	.word	0x080240f8

08005aec <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff ffe7 	bl	8005ac8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8005afa:	211c      	movs	r1, #28
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f002 f9a5 	bl	8007e4c <_ZdlPvj>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff f8b9 	bl	8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	080241a4 	.word	0x080241a4

08005b30 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ffe7 	bl	8005b0c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8005b3e:	2104      	movs	r1, #4
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f002 f983 	bl	8007e4c <_ZdlPvj>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f00a fda1 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	080241e4 	.word	0x080241e4

08005b74 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ffe7 	bl	8005b50 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8005b82:	211c      	movs	r1, #28
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f002 f961 	bl	8007e4c <_ZdlPvj>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fa43 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	08024290 	.word	0x08024290

08005bb8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ffe7 	bl	8005b94 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8005bc6:	2108      	movs	r1, #8
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 f93f 	bl	8007e4c <_ZdlPvj>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00a fd5d 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	080242b0 	.word	0x080242b0

08005bfc <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffe7 	bl	8005bd8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8005c0a:	211c      	movs	r1, #28
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f002 f91d 	bl	8007e4c <_ZdlPvj>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe f9ff 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	0802435c 	.word	0x0802435c

08005c40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ffe7 	bl	8005c1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8005c4e:	2108      	movs	r1, #8
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f002 f8fb 	bl	8007e4c <_ZdlPvj>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f00a fd19 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	0802437c 	.word	0x0802437c

08005c84 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ffe7 	bl	8005c60 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8005c92:	211c      	movs	r1, #28
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f002 f8d9 	bl	8007e4c <_ZdlPvj>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe f9bb 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	08024428 	.word	0x08024428

08005cc8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ffe7 	bl	8005ca4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8005cd6:	2108      	movs	r1, #8
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f002 f8b7 	bl	8007e4c <_ZdlPvj>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f00a fcd5 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	08024448 	.word	0x08024448

08005d0c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ffe7 	bl	8005ce8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8005d1a:	211c      	movs	r1, #28
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 f895 	bl	8007e4c <_ZdlPvj>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	4a05      	ldr	r2, [pc, #20]	; (8005d4c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe f977 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	080244f4 	.word	0x080244f4

08005d50 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ffe7 	bl	8005d2c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8005d5e:	2108      	movs	r1, #8
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f002 f873 	bl	8007e4c <_ZdlPvj>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f00a fc91 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	08024514 	.word	0x08024514

08005d94 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffe7 	bl	8005d70 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8005da2:	211c      	movs	r1, #28
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f002 f851 	bl	8007e4c <_ZdlPvj>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe f933 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	080245c0 	.word	0x080245c0

08005dd8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ffe7 	bl	8005db4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8005de6:	2108      	movs	r1, #8
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 f82f 	bl	8007e4c <_ZdlPvj>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	4a05      	ldr	r2, [pc, #20]	; (8005e18 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f00a fc4d 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	080245e0 	.word	0x080245e0

08005e1c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ffe7 	bl	8005df8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8005e2a:	211c      	movs	r1, #28
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f002 f80d 	bl	8007e4c <_ZdlPvj>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4a05      	ldr	r2, [pc, #20]	; (8005e5c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe f8ef 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	0802468c 	.word	0x0802468c

08005e60 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ffe7 	bl	8005e3c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8005e6e:	2108      	movs	r1, #8
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 ffeb 	bl	8007e4c <_ZdlPvj>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f00a fc09 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	080246ac 	.word	0x080246ac

08005ea4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ffe7 	bl	8005e80 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8005eb2:	211c      	movs	r1, #28
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 ffc9 	bl	8007e4c <_ZdlPvj>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	4a05      	ldr	r2, [pc, #20]	; (8005ee4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe f8ab 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	08024758 	.word	0x08024758

08005ee8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ffe7 	bl	8005ec4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8005ef6:	2108      	movs	r1, #8
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 ffa7 	bl	8007e4c <_ZdlPvj>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f00a fbc5 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	08024778 	.word	0x08024778

08005f2c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ffe7 	bl	8005f08 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8005f3a:	211c      	movs	r1, #28
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 ff85 	bl	8007e4c <_ZdlPvj>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe f867 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	08024824 	.word	0x08024824

08005f70 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff ffe7 	bl	8005f4c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8005f7e:	2108      	movs	r1, #8
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 ff63 	bl	8007e4c <_ZdlPvj>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	4a05      	ldr	r2, [pc, #20]	; (8005fb0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f00a fb81 	bl	80106a8 <_ZN10UtestShellD1Ev>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	08024844 	.word	0x08024844

08005fb4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ffe7 	bl	8005f90 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8005fc2:	211c      	movs	r1, #28
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 ff41 	bl	8007e4c <_ZdlPvj>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	4a05      	ldr	r2, [pc, #20]	; (8005ff4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe f823 	bl	8004030 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	080248f0 	.word	0x080248f0

08005ff8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ffe7 	bl	8005fd4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8006006:	2108      	movs	r1, #8
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 ff1f 	bl	8007e4c <_ZdlPvj>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <_Z41__static_initialization_and_destruction_0ii>:
}
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b01      	cmp	r3, #1
 8006026:	f040 80d8 	bne.w	80061da <_Z41__static_initialization_and_destruction_0ii+0x1c2>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006030:	4293      	cmp	r3, r2
 8006032:	f040 80d2 	bne.w	80061da <_Z41__static_initialization_and_destruction_0ii+0x1c2>
TEST(RingBuffer_Test_Group, InitTest)
 8006036:	489f      	ldr	r0, [pc, #636]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8006038:	f7fe f848 	bl	80040cc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 800603c:	2324      	movs	r3, #36	; 0x24
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	4b9d      	ldr	r3, [pc, #628]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4b9d      	ldr	r3, [pc, #628]	; (80062bc <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8006046:	4a9e      	ldr	r2, [pc, #632]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8006048:	499a      	ldr	r1, [pc, #616]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800604a:	489e      	ldr	r0, [pc, #632]	; (80062c4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800604c:	f00c f928 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006050:	489d      	ldr	r0, [pc, #628]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006052:	f7fe f8ef 	bl	8004234 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8006056:	232e      	movs	r3, #46	; 0x2e
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4b9b      	ldr	r3, [pc, #620]	; (80062cc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006060:	4a97      	ldr	r2, [pc, #604]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8006062:	4999      	ldr	r1, [pc, #612]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006064:	489a      	ldr	r0, [pc, #616]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006066:	f00c f91b 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800606a:	489a      	ldr	r0, [pc, #616]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800606c:	f7fe f96c 	bl	8004348 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8006070:	2338      	movs	r3, #56	; 0x38
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	4b90      	ldr	r3, [pc, #576]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4b97      	ldr	r3, [pc, #604]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800607a:	4a91      	ldr	r2, [pc, #580]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800607c:	4995      	ldr	r1, [pc, #596]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800607e:	4897      	ldr	r0, [pc, #604]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006080:	f00c f90e 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8006084:	4896      	ldr	r0, [pc, #600]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006086:	f7fe f9e7 	bl	8004458 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800608a:	2343      	movs	r3, #67	; 0x43
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	4b8a      	ldr	r3, [pc, #552]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4b94      	ldr	r3, [pc, #592]	; (80062e4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006094:	4a8a      	ldr	r2, [pc, #552]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8006096:	4992      	ldr	r1, [pc, #584]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006098:	4893      	ldr	r0, [pc, #588]	; (80062e8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800609a:	f00c f901 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800609e:	4893      	ldr	r0, [pc, #588]	; (80062ec <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80060a0:	f7fe fa46 	bl	8004530 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 80060a4:	234c      	movs	r3, #76	; 0x4c
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	4b83      	ldr	r3, [pc, #524]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4b90      	ldr	r3, [pc, #576]	; (80062f0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80060ae:	4a84      	ldr	r2, [pc, #528]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80060b0:	498e      	ldr	r1, [pc, #568]	; (80062ec <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80060b2:	4890      	ldr	r0, [pc, #576]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80060b4:	f00c f8f4 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80060b8:	488f      	ldr	r0, [pc, #572]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80060ba:	f7fe fac5 	bl	8004648 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 80060be:	235c      	movs	r3, #92	; 0x5c
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	4b7d      	ldr	r3, [pc, #500]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	4b8d      	ldr	r3, [pc, #564]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80060c8:	4a7d      	ldr	r2, [pc, #500]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80060ca:	498b      	ldr	r1, [pc, #556]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80060cc:	488c      	ldr	r0, [pc, #560]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80060ce:	f00c f8e7 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80060d2:	488c      	ldr	r0, [pc, #560]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80060d4:	f7fe fb76 	bl	80047c4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80060d8:	2371      	movs	r3, #113	; 0x71
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	4b89      	ldr	r3, [pc, #548]	; (8006308 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80060e2:	4a77      	ldr	r2, [pc, #476]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80060e4:	4987      	ldr	r1, [pc, #540]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80060e6:	4889      	ldr	r0, [pc, #548]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80060e8:	f00c f8da 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80060ec:	4888      	ldr	r0, [pc, #544]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80060ee:	f7fe fbcf 	bl	8004890 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80060f2:	2378      	movs	r3, #120	; 0x78
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	4b70      	ldr	r3, [pc, #448]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4b86      	ldr	r3, [pc, #536]	; (8006314 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80060fc:	4a70      	ldr	r2, [pc, #448]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80060fe:	4984      	ldr	r1, [pc, #528]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006100:	4885      	ldr	r0, [pc, #532]	; (8006318 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8006102:	f00c f8cd 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8006106:	4885      	ldr	r0, [pc, #532]	; (800631c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8006108:	f7fe fcac 	bl	8004a64 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	4b69      	ldr	r3, [pc, #420]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4b82      	ldr	r3, [pc, #520]	; (8006320 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8006116:	4a6a      	ldr	r2, [pc, #424]	; (80062c0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8006118:	4980      	ldr	r1, [pc, #512]	; (800631c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800611a:	4882      	ldr	r0, [pc, #520]	; (8006324 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800611c:	f00c f8c0 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006120:	4881      	ldr	r0, [pc, #516]	; (8006328 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006122:	f7fe fdff 	bl	8004d24 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8006126:	23b7      	movs	r3, #183	; 0xb7
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	4b63      	ldr	r3, [pc, #396]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	4b7f      	ldr	r3, [pc, #508]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006130:	4a7f      	ldr	r2, [pc, #508]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006132:	497d      	ldr	r1, [pc, #500]	; (8006328 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006134:	487f      	ldr	r0, [pc, #508]	; (8006334 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8006136:	f00c f8b3 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800613a:	487f      	ldr	r0, [pc, #508]	; (8006338 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800613c:	f7fe fe5c 	bl	8004df8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8006140:	23c9      	movs	r3, #201	; 0xc9
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	4b5c      	ldr	r3, [pc, #368]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4b7c      	ldr	r3, [pc, #496]	; (800633c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800614a:	4a79      	ldr	r2, [pc, #484]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800614c:	497a      	ldr	r1, [pc, #488]	; (8006338 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800614e:	487c      	ldr	r0, [pc, #496]	; (8006340 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006150:	f00c f8a6 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006154:	487b      	ldr	r0, [pc, #492]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006156:	f7fe ff2b 	bl	8004fb0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 800615a:	23d4      	movs	r3, #212	; 0xd4
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	4b56      	ldr	r3, [pc, #344]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	4b79      	ldr	r3, [pc, #484]	; (8006348 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006164:	4a72      	ldr	r2, [pc, #456]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006166:	4977      	ldr	r1, [pc, #476]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006168:	4878      	ldr	r0, [pc, #480]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800616a:	f00c f899 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800616e:	4878      	ldr	r0, [pc, #480]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006170:	f7ff f84e 	bl	8005210 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8006174:	23e5      	movs	r3, #229	; 0xe5
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	4b4f      	ldr	r3, [pc, #316]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	4b75      	ldr	r3, [pc, #468]	; (8006354 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800617e:	4a6c      	ldr	r2, [pc, #432]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8006180:	4973      	ldr	r1, [pc, #460]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006182:	4875      	ldr	r0, [pc, #468]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006184:	f00c f88c 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006188:	4874      	ldr	r0, [pc, #464]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800618a:	f7ff f90b 	bl	80053a4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800618e:	23f6      	movs	r3, #246	; 0xf6
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	4b49      	ldr	r3, [pc, #292]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4b72      	ldr	r3, [pc, #456]	; (8006360 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006198:	4a65      	ldr	r2, [pc, #404]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800619a:	4970      	ldr	r1, [pc, #448]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800619c:	4871      	ldr	r0, [pc, #452]	; (8006364 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800619e:	f00c f87f 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80061a2:	4871      	ldr	r0, [pc, #452]	; (8006368 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80061a4:	f7ff f982 	bl	80054ac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 80061a8:	f240 1307 	movw	r3, #263	; 0x107
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	4b42      	ldr	r3, [pc, #264]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	4b6e      	ldr	r3, [pc, #440]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80061b4:	4a5e      	ldr	r2, [pc, #376]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80061b6:	496c      	ldr	r1, [pc, #432]	; (8006368 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80061b8:	486d      	ldr	r0, [pc, #436]	; (8006370 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80061ba:	f00c f871 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80061be:	486d      	ldr	r0, [pc, #436]	; (8006374 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80061c0:	f7ff fa4e 	bl	8005660 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 80061c4:	f240 131d 	movw	r3, #285	; 0x11d
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	4b6a      	ldr	r3, [pc, #424]	; (8006378 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80061d0:	4a57      	ldr	r2, [pc, #348]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80061d2:	4968      	ldr	r1, [pc, #416]	; (8006374 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80061d4:	4869      	ldr	r0, [pc, #420]	; (800637c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80061d6:	f00c f863 	bl	80122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d164      	bne.n	80062aa <_Z41__static_initialization_and_destruction_0ii+0x292>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d15f      	bne.n	80062aa <_Z41__static_initialization_and_destruction_0ii+0x292>
 80061ea:	4864      	ldr	r0, [pc, #400]	; (800637c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80061ec:	f00c f882 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 80061f0:	4860      	ldr	r0, [pc, #384]	; (8006374 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80061f2:	f7ff fad1 	bl	8005798 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80061f6:	485e      	ldr	r0, [pc, #376]	; (8006370 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80061f8:	f00c f87c 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 80061fc:	485a      	ldr	r0, [pc, #360]	; (8006368 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80061fe:	f7ff fb0f 	bl	8005820 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006202:	4858      	ldr	r0, [pc, #352]	; (8006364 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8006204:	f00c f876 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006208:	4854      	ldr	r0, [pc, #336]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800620a:	f7ff fb4d 	bl	80058a8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800620e:	4852      	ldr	r0, [pc, #328]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8006210:	f00c f870 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006214:	484e      	ldr	r0, [pc, #312]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006216:	f7ff fb8b 	bl	8005930 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800621a:	484c      	ldr	r0, [pc, #304]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800621c:	f00c f86a 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006220:	4848      	ldr	r0, [pc, #288]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006222:	f7ff fbc9 	bl	80059b8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006226:	4846      	ldr	r0, [pc, #280]	; (8006340 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006228:	f00c f864 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 800622c:	4842      	ldr	r0, [pc, #264]	; (8006338 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800622e:	f7ff fc07 	bl	8005a40 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006232:	4840      	ldr	r0, [pc, #256]	; (8006334 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8006234:	f00c f85e 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006238:	483b      	ldr	r0, [pc, #236]	; (8006328 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800623a:	f7ff fc45 	bl	8005ac8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 800623e:	4839      	ldr	r0, [pc, #228]	; (8006324 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8006240:	f00c f858 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006244:	4835      	ldr	r0, [pc, #212]	; (800631c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8006246:	f7ff fc83 	bl	8005b50 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 800624a:	4833      	ldr	r0, [pc, #204]	; (8006318 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800624c:	f00c f852 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006250:	482f      	ldr	r0, [pc, #188]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006252:	f7ff fcc1 	bl	8005bd8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006256:	482d      	ldr	r0, [pc, #180]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006258:	f00c f84c 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 800625c:	4829      	ldr	r0, [pc, #164]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800625e:	f7ff fcff 	bl	8005c60 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006262:	4827      	ldr	r0, [pc, #156]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8006264:	f00c f846 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006268:	4823      	ldr	r0, [pc, #140]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800626a:	f7ff fd3d 	bl	8005ce8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800626e:	4821      	ldr	r0, [pc, #132]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8006270:	f00c f840 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006274:	481d      	ldr	r0, [pc, #116]	; (80062ec <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8006276:	f7ff fd7b 	bl	8005d70 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800627a:	481b      	ldr	r0, [pc, #108]	; (80062e8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800627c:	f00c f83a 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006280:	4817      	ldr	r0, [pc, #92]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006282:	f7ff fdb9 	bl	8005df8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006286:	4815      	ldr	r0, [pc, #84]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006288:	f00c f834 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 800628c:	4811      	ldr	r0, [pc, #68]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800628e:	f7ff fdf7 	bl	8005e80 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006292:	480f      	ldr	r0, [pc, #60]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8006294:	f00c f82e 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8006298:	480b      	ldr	r0, [pc, #44]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800629a:	f7ff fe35 	bl	8005f08 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 800629e:	4809      	ldr	r0, [pc, #36]	; (80062c4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80062a0:	f00c f828 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 80062a4:	4803      	ldr	r0, [pc, #12]	; (80062b4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80062a6:	f7ff fe73 	bl	8005f90 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000498 	.word	0x20000498
 80062b8:	08020d98 	.word	0x08020d98
 80062bc:	080211dc 	.word	0x080211dc
 80062c0:	080211e8 	.word	0x080211e8
 80062c4:	200004b4 	.word	0x200004b4
 80062c8:	200004b8 	.word	0x200004b8
 80062cc:	08021200 	.word	0x08021200
 80062d0:	200004d4 	.word	0x200004d4
 80062d4:	200004d8 	.word	0x200004d8
 80062d8:	08021210 	.word	0x08021210
 80062dc:	200004f4 	.word	0x200004f4
 80062e0:	200004f8 	.word	0x200004f8
 80062e4:	08021224 	.word	0x08021224
 80062e8:	20000514 	.word	0x20000514
 80062ec:	20000518 	.word	0x20000518
 80062f0:	08021234 	.word	0x08021234
 80062f4:	20000534 	.word	0x20000534
 80062f8:	20000538 	.word	0x20000538
 80062fc:	0802124c 	.word	0x0802124c
 8006300:	20000554 	.word	0x20000554
 8006304:	20000558 	.word	0x20000558
 8006308:	0802125c 	.word	0x0802125c
 800630c:	20000574 	.word	0x20000574
 8006310:	20000578 	.word	0x20000578
 8006314:	0802126c 	.word	0x0802126c
 8006318:	20000594 	.word	0x20000594
 800631c:	20000598 	.word	0x20000598
 8006320:	08021278 	.word	0x08021278
 8006324:	200005b4 	.word	0x200005b4
 8006328:	200005c0 	.word	0x200005c0
 800632c:	08021288 	.word	0x08021288
 8006330:	08021298 	.word	0x08021298
 8006334:	200005dc 	.word	0x200005dc
 8006338:	200005e0 	.word	0x200005e0
 800633c:	080212b0 	.word	0x080212b0
 8006340:	200005fc 	.word	0x200005fc
 8006344:	20000600 	.word	0x20000600
 8006348:	080212c8 	.word	0x080212c8
 800634c:	2000061c 	.word	0x2000061c
 8006350:	20000620 	.word	0x20000620
 8006354:	080212e4 	.word	0x080212e4
 8006358:	2000063c 	.word	0x2000063c
 800635c:	20000640 	.word	0x20000640
 8006360:	080212f8 	.word	0x080212f8
 8006364:	2000065c 	.word	0x2000065c
 8006368:	20000660 	.word	0x20000660
 800636c:	08021314 	.word	0x08021314
 8006370:	2000067c 	.word	0x2000067c
 8006374:	20000680 	.word	0x20000680
 8006378:	08021328 	.word	0x08021328
 800637c:	2000069c 	.word	0x2000069c

08006380 <_GLOBAL__sub_I_rx_buffer>:
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
 8006384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006388:	2001      	movs	r0, #1
 800638a:	f7ff fe45 	bl	8006018 <_Z41__static_initialization_and_destruction_0ii>
 800638e:	bd80      	pop	{r7, pc}

08006390 <_GLOBAL__sub_D_rx_buffer>:
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
 8006394:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006398:	2000      	movs	r0, #0
 800639a:	f7ff fe3d 	bl	8006018 <_Z41__static_initialization_and_destruction_0ii>
 800639e:	bd80      	pop	{r7, pc}

080063a0 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
    }
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
    }
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
    }
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ffed 	bl	80063d0 <_ZNK10TestResult15getFailureCountEv>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <_ZNK10TestResult9isFailureEv+0x2a>
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ffcf 	bl	80063a0 <_ZNK10TestResult11getRunCountEv>
 8006402:	4604      	mov	r4, r0
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff ffd7 	bl	80063b8 <_ZNK10TestResult15getIgnoredCountEv>
 800640a:	4603      	mov	r3, r0
 800640c:	4423      	add	r3, r4
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <_ZNK10TestResult9isFailureEv+0x2e>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <_ZNK10TestResult9isFailureEv+0x30>
 8006416:	2300      	movs	r3, #0
    }
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	bd90      	pop	{r4, r7, pc}

08006420 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	f007 fde6 	bl	800dffc <_ZN10TestOutputC1Ev>
 8006430:	4a03      	ldr	r2, [pc, #12]	; (8006440 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
    }
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	08024fa4 	.word	0x08024fa4

08006444 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
    {
 800644c:	4a05      	ldr	r2, [pc, #20]	; (8006464 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4618      	mov	r0, r3
 8006456:	f007 fdef 	bl	800e038 <_ZN10TestOutputD1Ev>
    }
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	08024fa4 	.word	0x08024fa4

08006468 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
    }
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff ffe7 	bl	8006444 <_ZN17ConsoleTestOutputD1Ev>
 8006476:	2110      	movs	r1, #16
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fce7 	bl	8007e4c <_ZdlPvj>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8006488:	b5b0      	push	{r4, r5, r7, lr}
 800648a:	b098      	sub	sp, #96	; 0x60
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
    int result = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8006496:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff ffc0 	bl	8006420 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80064a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80064a4:	4935      	ldr	r1, [pc, #212]	; (800657c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80064a6:	4618      	mov	r0, r3
 80064a8:	f004 f87f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80064ac:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80064b0:	f107 0318 	add.w	r3, r7, #24
 80064b4:	2200      	movs	r2, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 ff6a 	bl	8008390 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80064bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80064c0:	4618      	mov	r0, r3
 80064c2:	f004 fc2a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80064c6:	f107 0318 	add.w	r3, r7, #24
 80064ca:	2101      	movs	r1, #1
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 ff2f 	bl	8008330 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80064d2:	f009 fb21 	bl	800fb18 <_ZN12TestRegistry18getCurrentRegistryEv>
 80064d6:	4603      	mov	r3, r0
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	3234      	adds	r2, #52	; 0x34
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	f107 0118 	add.w	r1, r7, #24
 80064e2:	4618      	mov	r0, r3
 80064e4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80064e6:	f009 fb17 	bl	800fb18 <_ZN12TestRegistry18getCurrentRegistryEv>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f107 0008 	add.w	r0, r7, #8
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	f000 f844 	bl	8006580 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f899 	bl	8006634 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8006502:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006504:	f107 0308 	add.w	r3, r7, #8
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f863 	bl	80065d4 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800650e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10c      	bne.n	800652e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8006514:	f107 0318 	add.w	r3, r7, #24
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f002 f83a 	bl	8008594 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8006520:	4602      	mov	r2, r0
 8006522:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f007 fe27 	bl	800e17c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800652e:	f009 faf3 	bl	800fb18 <_ZN12TestRegistry18getCurrentRegistryEv>
 8006532:	4604      	mov	r4, r0
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	3344      	adds	r3, #68	; 0x44
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800653e:	490f      	ldr	r1, [pc, #60]	; (800657c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006540:	4618      	mov	r0, r3
 8006542:	f004 f832 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006546:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800654a:	4619      	mov	r1, r3
 800654c:	4620      	mov	r0, r4
 800654e:	47a8      	blx	r5
 8006550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006554:	4618      	mov	r0, r3
 8006556:	f004 fbe0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return result;
 800655a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800655c:	f107 0318 	add.w	r3, r7, #24
 8006560:	4618      	mov	r0, r3
 8006562:	f001 ff4d 	bl	8008400 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8006566:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff ff6a 	bl	8006444 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8006570:	4623      	mov	r3, r4
}
 8006572:	4618      	mov	r0, r3
 8006574:	3760      	adds	r7, #96	; 0x60
 8006576:	46bd      	mov	sp, r7
 8006578:	bdb0      	pop	{r4, r5, r7, pc}
 800657a:	bf00      	nop
 800657c:	08021344 	.word	0x08021344

08006580 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800658e:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 80065a6:	2241      	movs	r2, #65	; 0x41
 80065a8:	4909      	ldr	r1, [pc, #36]	; (80065d0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 80065aa:	2038      	movs	r0, #56	; 0x38
 80065ac:	f001 fc3a 	bl	8007e24 <_ZnwjPKci>
 80065b0:	4604      	mov	r4, r0
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4620      	mov	r0, r4
 80065b8:	f00c f84a 	bl	8012650 <_ZN20CommandLineArgumentsC1EiPKPKc>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	609c      	str	r4, [r3, #8]
}
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd90      	pop	{r4, r7, pc}
 80065ca:	bf00      	nop
 80065cc:	08024930 	.word	0x08024930
 80065d0:	08021358 	.word	0x08021358

080065d4 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	3204      	adds	r2, #4
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	4790      	blx	r2
    delete output_;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	3204      	adds	r2, #4
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	4790      	blx	r2
}
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	08024930 	.word	0x08024930

08006614 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
}
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ffd9 	bl	80065d4 <_ZN21CommandLineTestRunnerD1Ev>
 8006622:	2110      	movs	r1, #16
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 fc11 	bl	8007e4c <_ZdlPvj>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8006634:	b5b0      	push	{r4, r5, r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800663c:	2301      	movs	r3, #1
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006640:	f107 031c 	add.w	r3, r7, #28
 8006644:	4929      	ldr	r1, [pc, #164]	; (80066ec <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006646:	4618      	mov	r0, r3
 8006648:	f003 ffaf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800664c:	f107 021c 	add.w	r2, r7, #28
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f008 fe1c 	bl	800f294 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800665c:	f107 031c 	add.w	r3, r7, #28
 8006660:	4618      	mov	r0, r3
 8006662:	f004 fb5a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3334      	adds	r3, #52	; 0x34
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	333c      	adds	r3, #60	; 0x3c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4610      	mov	r0, r2
 800668c:	4798      	blx	r3
 800668e:	4603      	mov	r3, r0
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa3e 	bl	8006b14 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8ac 	bl	80067fc <_ZN21CommandLineTestRunner11runAllTestsEv>
 80066a4:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68dd      	ldr	r5, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3344      	adds	r3, #68	; 0x44
 80066b2:	681c      	ldr	r4, [r3, #0]
 80066b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b8:	490c      	ldr	r1, [pc, #48]	; (80066ec <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80066ba:	4618      	mov	r0, r3
 80066bc:	f003 ff75 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80066c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066c4:	4619      	mov	r1, r3
 80066c6:	4628      	mov	r0, r5
 80066c8:	47a0      	blx	r4
 80066ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f004 fb23 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return testResult;
 80066d4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80066d6:	f107 0308 	add.w	r3, r7, #8
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 faaa 	bl	8006c34 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80066e0:	4623      	mov	r3, r4
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3730      	adds	r7, #48	; 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bdb0      	pop	{r4, r5, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	0802137c 	.word	0x0802137c

080066f0 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80066f0:	b5b0      	push	{r4, r5, r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68dd      	ldr	r5, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3330      	adds	r3, #48	; 0x30
 8006704:	681c      	ldr	r4, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f00c fce0 	bl	80130d0 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8006710:	4603      	mov	r3, r0
 8006712:	4619      	mov	r1, r3
 8006714:	4628      	mov	r0, r5
 8006716:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68dd      	ldr	r5, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	332c      	adds	r3, #44	; 0x2c
 8006724:	681c      	ldr	r4, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f00c fcdc 	bl	80130e8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8006730:	4603      	mov	r3, r0
 8006732:	4619      	mov	r1, r3
 8006734:	4628      	mov	r0, r5
 8006736:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f00c fc2b 	bl	8012f98 <_ZNK20CommandLineArguments9isVerboseEv>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3320      	adds	r3, #32
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2101      	movs	r1, #1
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f00c fc25 	bl	8012fb0 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3320      	adds	r3, #32
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2102      	movs	r1, #2
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f00c fc1f 	bl	8012fc8 <_ZNK20CommandLineArguments7isColorEv>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d008      	beq.n	80067a2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3324      	adds	r3, #36	; 0x24
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4610      	mov	r0, r2
 80067a0:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f00c fc4a 	bl	8013040 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3360      	adds	r3, #96	; 0x60
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4610      	mov	r0, r2
 80067c2:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f00c fc2d 	bl	8013028 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4618      	mov	r0, r3
 80067da:	f009 fa19 	bl	800fc10 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f00c fc50 	bl	8013088 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80067ee:	f00b fadb 	bl	8011da8 <_ZN10UtestShell14setCrashOnFailEv>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067fc <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80067fc:	b5b0      	push	{r4, r5, r7, lr}
 80067fe:	b094      	sub	sp, #80	; 0x50
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff73 	bl	80066f0 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f00c fc1c 	bl	8013058 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8006820:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	4618      	mov	r0, r3
 8006828:	f00c fbda 	bl	8012fe0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d019      	beq.n	8006866 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	f107 0308 	add.w	r3, r7, #8
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f009 fbaf 	bl	800ffa0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3320      	adds	r3, #32
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f107 0108 	add.w	r1, r7, #8
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
        return 0;
 8006858:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800685a:	f107 0308 	add.w	r3, r7, #8
 800685e:	4618      	mov	r0, r3
 8006860:	f009 fbd6 	bl	8010010 <_ZN10TestResultD1Ev>
 8006864:	e0e1      	b.n	8006a2a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f00c fbc4 	bl	8012ff8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d019      	beq.n	80068aa <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	f107 0308 	add.w	r3, r7, #8
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f009 fb8d 	bl	800ffa0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3324      	adds	r3, #36	; 0x24
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f107 0108 	add.w	r1, r7, #8
 8006898:	4610      	mov	r0, r2
 800689a:	4798      	blx	r3
        return 0;
 800689c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800689e:	f107 0308 	add.w	r3, r7, #8
 80068a2:	4618      	mov	r0, r3
 80068a4:	f009 fbb4 	bl	8010010 <_ZN10TestResultD1Ev>
 80068a8:	e0bf      	b.n	8006a2a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f00c fbae 	bl	8013010 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d019      	beq.n	80068ee <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	f107 0308 	add.w	r3, r7, #8
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f009 fb6b 	bl	800ffa0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3328      	adds	r3, #40	; 0x28
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f107 0108 	add.w	r1, r7, #8
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
        return 0;
 80068e0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f009 fb92 	bl	8010010 <_ZN10TestResultD1Ev>
 80068ec:	e09d      	b.n	8006a2a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f00c fbbc 	bl	8013070 <_ZNK20CommandLineArguments11isReversingEv>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	331c      	adds	r3, #28
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3

    if (arguments_->isShuffling())
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f00c fbc3 	bl	80130a0 <_ZNK20CommandLineArguments11isShufflingEv>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d023      	beq.n	8006968 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	332c      	adds	r3, #44	; 0x2c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4941      	ldr	r1, [pc, #260]	; (8006a34 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685d      	ldr	r5, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3334      	adds	r3, #52	; 0x34
 8006940:	681c      	ldr	r4, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	4618      	mov	r0, r3
 8006948:	f00c fbb6 	bl	80130b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800694c:	4603      	mov	r3, r0
 800694e:	4619      	mov	r1, r3
 8006950:	4628      	mov	r0, r5
 8006952:	47a0      	blx	r4
        output_->print("\n");
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	332c      	adds	r3, #44	; 0x2c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4935      	ldr	r1, [pc, #212]	; (8006a38 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8006968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800696e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006970:	429a      	cmp	r2, r3
 8006972:	bf8c      	ite	hi
 8006974:	2301      	movhi	r3, #1
 8006976:	2300      	movls	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d04e      	beq.n	8006a1c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	4618      	mov	r0, r3
 8006984:	f00c fb8c 	bl	80130a0 <_ZNK20CommandLineArguments11isShufflingEv>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00f      	beq.n	80069ae <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68dd      	ldr	r5, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3318      	adds	r3, #24
 800699a:	681c      	ldr	r4, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f00c fb89 	bl	80130b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4619      	mov	r1, r3
 80069aa:	4628      	mov	r0, r5
 80069ac:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6858      	ldr	r0, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3340      	adds	r3, #64	; 0x40
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80069c0:	4798      	blx	r3
        TestResult tr(*output_);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f009 fae7 	bl	800ffa0 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3314      	adds	r3, #20
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80069e8:	f107 0308 	add.w	r3, r7, #8
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fcef 	bl	80063d0 <_ZNK10TestResult15getFailureCountEv>
 80069f2:	4602      	mov	r2, r0
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	4413      	add	r3, r2
 80069f8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fcf2 	bl	80063e8 <_ZNK10TestResult9isFailureEv>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8006a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	4618      	mov	r0, r3
 8006a16:	f009 fafb 	bl	8010010 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8006a1a:	e7a5      	b.n	8006968 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8006a22:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006a24:	e000      	b.n	8006a28 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8006a26:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006a28:	bf00      	nop
 8006a2a:	4623      	mov	r3, r4
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3750      	adds	r7, #80	; 0x50
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bdb0      	pop	{r4, r5, r7, pc}
 8006a34:	08021390 	.word	0x08021390
 8006a38:	080213bc 	.word	0x080213bc

08006a3c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8006a44:	229d      	movs	r2, #157	; 0x9d
 8006a46:	4906      	ldr	r1, [pc, #24]	; (8006a60 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8006a48:	201c      	movs	r0, #28
 8006a4a:	f001 f9eb 	bl	8007e24 <_ZnwjPKci>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4620      	mov	r0, r4
 8006a52:	f005 f955 	bl	800bd00 <_ZN18TeamCityTestOutputC1Ev>
 8006a56:	4623      	mov	r3, r4
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd90      	pop	{r4, r7, pc}
 8006a60:	08021358 	.word	0x08021358

08006a64 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8006a64:	b590      	push	{r4, r7, lr}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8006a6e:	22a2      	movs	r2, #162	; 0xa2
 8006a70:	490a      	ldr	r1, [pc, #40]	; (8006a9c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8006a72:	2014      	movs	r0, #20
 8006a74:	f001 f9d6 	bl	8007e24 <_ZnwjPKci>
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 f980 	bl	8006d80 <_ZN15JUnitTestOutputC1Ev>
 8006a80:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fbb2 	bl	80071f4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd90      	pop	{r4, r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08021358 	.word	0x08021358

08006aa0 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8006aa8:	22ab      	movs	r2, #171	; 0xab
 8006aaa:	4906      	ldr	r1, [pc, #24]	; (8006ac4 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8006aac:	2010      	movs	r0, #16
 8006aae:	f001 f9b9 	bl	8007e24 <_ZnwjPKci>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7ff fcb3 	bl	8006420 <_ZN17ConsoleTestOutputC1Ev>
 8006aba:	4623      	mov	r3, r4
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd90      	pop	{r4, r7, pc}
 8006ac4:	08021358 	.word	0x08021358

08006ac8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8006ad4:	22b0      	movs	r2, #176	; 0xb0
 8006ad6:	490e      	ldr	r1, [pc, #56]	; (8006b10 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8006ad8:	2018      	movs	r0, #24
 8006ada:	f001 f9a3 	bl	8007e24 <_ZnwjPKci>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f007 ff83 	bl	800e9ec <_ZN19CompositeTestOutputC1Ev>
 8006ae6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	335c      	adds	r3, #92	; 0x5c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	6978      	ldr	r0, [r7, #20]
 8006af4:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3360      	adds	r3, #96	; 0x60
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	6978      	ldr	r0, [r7, #20]
 8006b02:	4798      	blx	r3
  return composite;
 8006b04:	697b      	ldr	r3, [r7, #20]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd90      	pop	{r4, r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	08021358 	.word	0x08021358

08006b14 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8006b14:	b5b0      	push	{r4, r5, r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f00b fe4f 	bl	80127c8 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d029      	beq.n	8006b8a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3310      	adds	r3, #16
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
 8006b42:	4602      	mov	r2, r0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685d      	ldr	r5, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	332c      	adds	r3, #44	; 0x2c
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f00c fa10 	bl	8012f80 <_ZNK20CommandLineArguments8needHelpEv>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f00c f9fa 	bl	8012f64 <_ZNK20CommandLineArguments4helpEv>
 8006b70:	4603      	mov	r3, r0
 8006b72:	e005      	b.n	8006b80 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f00c f9e5 	bl	8012f48 <_ZNK20CommandLineArguments5usageEv>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4619      	mov	r1, r3
 8006b82:	4628      	mov	r0, r5
 8006b84:	47a0      	blx	r4
    return false;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e050      	b.n	8006c2c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f00d f84c 	bl	8013c2c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d02c      	beq.n	8006bf4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	681c      	ldr	r4, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f00d f864 	bl	8013c74 <_ZNK20CommandLineArguments14getPackageNameEv>
 8006bac:	4603      	mov	r3, r0
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	47a0      	blx	r4
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f00c f9ea 	bl	8012f98 <_ZNK20CommandLineArguments9isVerboseEv>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d02f      	beq.n	8006c2a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3314      	adds	r3, #20
 8006bd0:	681c      	ldr	r4, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685d      	ldr	r5, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3310      	adds	r3, #16
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	461a      	mov	r2, r3
 8006be6:	4629      	mov	r1, r5
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	47a0      	blx	r4
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	e01a      	b.n	8006c2a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f00d f829 	bl	8013c50 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
 8006c10:	4602      	mov	r2, r0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	e008      	b.n	8006c2a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3310      	adds	r3, #16
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
 8006c24:	4602      	mov	r2, r0
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
  return true;
 8006c2a:	2301      	movs	r3, #1
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bdb0      	pop	{r4, r5, r7, pc}

08006c34 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	4a05      	ldr	r2, [pc, #20]	; (8006c54 <_ZN16SetPointerPluginD1Ev+0x20>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f008 f9e7 	bl	800f018 <_ZN10TestPluginD1Ev>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	080250b0 	.word	0x080250b0

08006c58 <_ZN16SetPointerPluginD0Ev>:
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ffe7 	bl	8006c34 <_ZN16SetPointerPluginD1Ev>
 8006c66:	2114      	movs	r1, #20
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f8ef 	bl	8007e4c <_ZdlPvj>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
    }
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4910      	ldr	r1, [pc, #64]	; (8006cdc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f003 fc84 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	741a      	strb	r2, [r3, #16]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3314      	adds	r3, #20
 8006cb8:	4908      	ldr	r1, [pc, #32]	; (8006cdc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f003 fc75 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	61da      	str	r2, [r3, #28]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	621a      	str	r2, [r3, #32]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	080213c0 	.word	0x080213c0

08006ce0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	609a      	str	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	611a      	str	r2, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	4907      	ldr	r1, [pc, #28]	; (8006d28 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f003 fc4c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	61da      	str	r2, [r3, #28]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	621a      	str	r2, [r3, #32]
    {
    }
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	080213c0 	.word	0x080213c0

08006d2c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3314      	adds	r3, #20
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f003 ffee 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff ffc4 	bl	8006ce0 <_ZN20JUnitTestGroupResultC1Ev>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3328      	adds	r3, #40	; 0x28
 8006d5c:	4907      	ldr	r1, [pc, #28]	; (8006d7c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f003 fc23 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3330      	adds	r3, #48	; 0x30
 8006d68:	4904      	ldr	r1, [pc, #16]	; (8006d7c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f003 fc1d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	080213c0 	.word	0x080213c0

08006d80 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f007 f936 	bl	800dffc <_ZN10TestOutputC1Ev>
 8006d90:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	224d      	movs	r2, #77	; 0x4d
 8006d98:	4908      	ldr	r1, [pc, #32]	; (8006dbc <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8006d9a:	2038      	movs	r0, #56	; 0x38
 8006d9c:	f001 f842 	bl	8007e24 <_ZnwjPKci>
 8006da0:	4604      	mov	r4, r0
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff ffd0 	bl	8006d48 <_ZN19JUnitTestOutputImplC1Ev>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	611c      	str	r4, [r3, #16]
{
}
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd90      	pop	{r4, r7, pc}
 8006db6:	bf00      	nop
 8006db8:	08024950 	.word	0x08024950
 8006dbc:	080213c4 	.word	0x080213c4

08006dc0 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3330      	adds	r3, #48	; 0x30
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f003 ffa4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3328      	adds	r3, #40	; 0x28
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f003 ff9f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff ffa4 	bl	8006d2c <_ZN20JUnitTestGroupResultD1Ev>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8006df0:	b590      	push	{r4, r7, lr}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f838 	bl	8006e74 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691c      	ldr	r4, [r3, #16]
 8006e08:	2c00      	cmp	r4, #0
 8006e0a:	d006      	beq.n	8006e1a <_ZN15JUnitTestOutputD1Ev+0x2a>
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f7ff ffd7 	bl	8006dc0 <_ZN19JUnitTestOutputImplD1Ev>
 8006e12:	2138      	movs	r1, #56	; 0x38
 8006e14:	4620      	mov	r0, r4
 8006e16:	f001 f819 	bl	8007e4c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f007 f90b 	bl	800e038 <_ZN10TestOutputD1Ev>
}
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd90      	pop	{r4, r7, pc}
 8006e2c:	08024950 	.word	0x08024950

08006e30 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
}
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff ffd9 	bl	8006df0 <_ZN15JUnitTestOutputD1Ev>
 8006e3e:	2114      	movs	r1, #20
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f803 	bl	8007e4c <_ZdlPvj>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f003 ff5c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f003 ff58 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f103 0414 	add.w	r4, r3, #20
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	491d      	ldr	r1, [pc, #116]	; (8006f10 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f003 fb85 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8006ea0:	f107 0308 	add.w	r3, r7, #8
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f003 fbeb 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 8006eac:	f107 0308 	add.w	r3, r7, #8
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f003 ff32 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d018      	beq.n	8006ef6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	3204      	adds	r2, #4
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	4790      	blx	r2
        delete cur;
 8006edc:	697c      	ldr	r4, [r7, #20]
 8006ede:	2c00      	cmp	r4, #0
 8006ee0:	d006      	beq.n	8006ef0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f7ff ffb4 	bl	8006e50 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8006ee8:	2128      	movs	r1, #40	; 0x28
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 ffae 	bl	8007e4c <_ZdlPvj>
        cur = tmp;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006ef4:	e7e3      	b.n	8006ebe <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2200      	movs	r2, #0
 8006efc:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2200      	movs	r2, #0
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd90      	pop	{r4, r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	080213c0 	.word	0x080213c0

08006f14 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8006f3e:	b590      	push	{r4, r7, lr}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	6a1c      	ldr	r4, [r3, #32]
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f009 f9c6 	bl	80102e0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8006f54:	4603      	mov	r3, r0
 8006f56:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	6a1c      	ldr	r4, [r3, #32]
 8006f5e:	6838      	ldr	r0, [r7, #0]
 8006f60:	f7ff fe8a 	bl	8006c78 <_ZNK10TestResult13getCheckCountEv>
 8006f64:	4603      	mov	r3, r0
 8006f66:	6223      	str	r3, [r4, #32]
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd90      	pop	{r4, r7, pc}

08006f70 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8006f86:	b590      	push	{r4, r7, lr}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691c      	ldr	r4, [r3, #16]
 8006f94:	6838      	ldr	r0, [r7, #0]
 8006f96:	f009 f9af 	bl	80102f8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3364      	adds	r3, #100	; 0x64
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
    resetTestGroupResult();
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff ff62 	bl	8006e74 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd90      	pop	{r4, r7, pc}

08006fb8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	3201      	adds	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f103 0414 	add.w	r4, r3, #20
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f009 fcef 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 8006fe0:	f107 0308 	add.w	r3, r7, #8
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f003 fb4b 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 8006fec:	f107 0308 	add.w	r3, r7, #8
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f003 fe92 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8006ff6:	4b3c      	ldr	r3, [pc, #240]	; (80070e8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4798      	blx	r3
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d110      	bne.n	8007030 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800700e:	2288      	movs	r2, #136	; 0x88
 8007010:	4936      	ldr	r1, [pc, #216]	; (80070ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007012:	2028      	movs	r0, #40	; 0x28
 8007014:	f000 ff06 	bl	8007e24 <_ZnwjPKci>
 8007018:	4604      	mov	r4, r0
 800701a:	4620      	mov	r0, r4
 800701c:	f7ff fe38 	bl	8006c90 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8007024:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6912      	ldr	r2, [r2, #16]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	61d3      	str	r3, [r2, #28]
 800702e:	e013      	b.n	8007058 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8007030:	228b      	movs	r2, #139	; 0x8b
 8007032:	492e      	ldr	r1, [pc, #184]	; (80070ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007034:	2028      	movs	r0, #40	; 0x28
 8007036:	f000 fef5 	bl	8007e24 <_ZnwjPKci>
 800703a:	4604      	mov	r4, r0
 800703c:	4620      	mov	r0, r4
 800703e:	f7ff fe27 	bl	8006c90 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	6a1a      	ldr	r2, [r3, #32]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007056:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	461c      	mov	r4, r3
 8007060:	f107 0310 	add.w	r3, r7, #16
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f009 fc9a 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800706c:	f107 0310 	add.w	r3, r7, #16
 8007070:	4619      	mov	r1, r3
 8007072:	4620      	mov	r0, r4
 8007074:	f003 fb05 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 8007078:	f107 0310 	add.w	r3, r7, #16
 800707c:	4618      	mov	r0, r3
 800707e:	f003 fe4c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	f103 0414 	add.w	r4, r3, #20
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f009 fd55 	bl	8010b42 <_ZNK10UtestShell7getFileEv>
 8007098:	f107 0318 	add.w	r3, r7, #24
 800709c:	4619      	mov	r1, r3
 800709e:	4620      	mov	r0, r4
 80070a0:	f003 faef 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 80070a4:	f107 0318 	add.w	r3, r7, #24
 80070a8:	4618      	mov	r0, r3
 80070aa:	f003 fe36 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	6a1c      	ldr	r4, [r3, #32]
 80070b4:	6838      	ldr	r0, [r7, #0]
 80070b6:	f009 fd53 	bl	8010b60 <_ZNK10UtestShell13getLineNumberEv>
 80070ba:	4603      	mov	r3, r0
 80070bc:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3318      	adds	r3, #24
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6838      	ldr	r0, [r7, #0]
 80070c8:	4798      	blx	r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	f083 0301 	eor.w	r3, r3, #1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	2201      	movs	r2, #1
 80070de:	741a      	strb	r2, [r3, #16]
    }
}
 80070e0:	bf00      	nop
 80070e2:	3724      	adds	r7, #36	; 0x24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd90      	pop	{r4, r7, pc}
 80070e8:	200000a4 	.word	0x200000a4
 80070ec:	080213c4 	.word	0x080213c4

080070f0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 80070fc:	f107 0310 	add.w	r3, r7, #16
 8007100:	4928      	ldr	r1, [pc, #160]	; (80071a4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8007102:	4618      	mov	r0, r3
 8007104:	f003 fa51 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	3328      	adds	r3, #40	; 0x28
 800710e:	4618      	mov	r0, r3
 8007110:	f003 fdf2 	bl	800acf8 <_ZNK12SimpleString7isEmptyEv>
 8007114:	4603      	mov	r3, r0
 8007116:	f083 0301 	eor.w	r3, r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00f      	beq.n	8007140 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007128:	f107 0310 	add.w	r3, r7, #16
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f003 fe70 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8007134:	f107 0310 	add.w	r3, r7, #16
 8007138:	491b      	ldr	r1, [pc, #108]	; (80071a8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800713a:	4618      	mov	r0, r3
 800713c:	f003 fe7c 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8007140:	f107 0310 	add.w	r3, r7, #16
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4618      	mov	r0, r3
 8007148:	f003 fe64 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3384      	adds	r3, #132	; 0x84
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f107 0018 	add.w	r0, r7, #24
 8007158:	f107 0210 	add.w	r2, r7, #16
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	4798      	blx	r3
 8007160:	f107 0320 	add.w	r3, r7, #32
 8007164:	4911      	ldr	r1, [pc, #68]	; (80071ac <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8007166:	4618      	mov	r0, r3
 8007168:	f003 fa1f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f107 0220 	add.w	r2, r7, #32
 8007172:	f107 0118 	add.w	r1, r7, #24
 8007176:	4618      	mov	r0, r3
 8007178:	f003 fe31 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800717c:	f107 0320 	add.w	r3, r7, #32
 8007180:	4618      	mov	r0, r3
 8007182:	f003 fdca 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8007186:	f107 0318 	add.w	r3, r7, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f003 fdc5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8007190:	f107 0310 	add.w	r3, r7, #16
 8007194:	4618      	mov	r0, r3
 8007196:	f003 fdc0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800719a:	bf00      	nop
}
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	3728      	adds	r7, #40	; 0x28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	080213e0 	.word	0x080213e0
 80071a8:	080213ec 	.word	0x080213ec
 80071ac:	080213f0 	.word	0x080213f0

080071b0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f003 fa47 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	225f      	movs	r2, #95	; 0x5f
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f003 fbcc 	bl	800a976 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	3301      	adds	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	e7f0      	b.n	80071c8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80071e6:	bf00      	nop
}
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	080213f8 	.word	0x080213f8

080071f4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	3328      	adds	r3, #40	; 0x28
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f003 fa37 	bl	800a682 <_ZN12SimpleStringaSERKS_>
    }
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3368      	adds	r3, #104	; 0x68
 800722a:	681c      	ldr	r4, [r3, #0]
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	4908      	ldr	r1, [pc, #32]	; (8007254 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8007232:	4618      	mov	r0, r3
 8007234:	f003 f9b9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007238:	f107 0308 	add.w	r3, r7, #8
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	47a0      	blx	r4
 8007242:	f107 0308 	add.w	r3, r7, #8
 8007246:	4618      	mov	r0, r3
 8007248:	f003 fd67 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bd90      	pop	{r4, r7, pc}
 8007254:	08021404 	.word	0x08021404

08007258 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8007258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725c:	b08a      	sub	sp, #40	; 0x28
 800725e:	af04      	add	r7, sp, #16
 8007260:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8007268:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800726e:	3314      	adds	r3, #20
 8007270:	4618      	mov	r0, r3
 8007272:	f003 fd25 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8007276:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800727e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4a23      	ldr	r2, [pc, #140]	; (8007314 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8007288:	fba2 2303 	umull	r2, r3, r2, r3
 800728c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800728e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	4b1f      	ldr	r3, [pc, #124]	; (8007314 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8007298:	fba3 1302 	umull	r1, r3, r3, r2
 800729c:	099b      	lsrs	r3, r3, #6
 800729e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4798      	blx	r3
 80072b0:	4603      	mov	r3, r0
 80072b2:	f107 0008 	add.w	r0, r7, #8
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	9601      	str	r6, [sp, #4]
 80072be:	9500      	str	r5, [sp, #0]
 80072c0:	4623      	mov	r3, r4
 80072c2:	4642      	mov	r2, r8
 80072c4:	4915      	ldr	r1, [pc, #84]	; (800731c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80072c6:	f004 fa2f 	bl	800b728 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3368      	adds	r3, #104	; 0x68
 80072d0:	681c      	ldr	r4, [r3, #0]
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4618      	mov	r0, r3
 80072d8:	f003 fcf2 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 80072dc:	4602      	mov	r2, r0
 80072de:	f107 0310 	add.w	r3, r7, #16
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f003 f960 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	47a0      	blx	r4
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 fd0e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f003 fd09 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8007308:	bf00      	nop
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007312:	bf00      	nop
 8007314:	10624dd3 	.word	0x10624dd3
 8007318:	200000a8 	.word	0x200000a8
 800731c:	08021430 	.word	0x08021430

08007320 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3368      	adds	r3, #104	; 0x68
 800732e:	681c      	ldr	r4, [r3, #0]
 8007330:	f107 0308 	add.w	r3, r7, #8
 8007334:	4912      	ldr	r1, [pc, #72]	; (8007380 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8007336:	4618      	mov	r0, r3
 8007338:	f003 f937 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800733c:	f107 0308 	add.w	r3, r7, #8
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	47a0      	blx	r4
 8007346:	f107 0308 	add.w	r3, r7, #8
 800734a:	4618      	mov	r0, r3
 800734c:	f003 fce5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3368      	adds	r3, #104	; 0x68
 8007356:	681c      	ldr	r4, [r3, #0]
 8007358:	f107 0310 	add.w	r3, r7, #16
 800735c:	4909      	ldr	r1, [pc, #36]	; (8007384 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800735e:	4618      	mov	r0, r3
 8007360:	f003 f923 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007364:	f107 0310 	add.w	r3, r7, #16
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	47a0      	blx	r4
 800736e:	f107 0310 	add.w	r3, r7, #16
 8007372:	4618      	mov	r0, r3
 8007374:	f003 fcd1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8007378:	bf00      	nop
 800737a:	371c      	adds	r7, #28
 800737c:	46bd      	mov	sp, r7
 800737e:	bd90      	pop	{r4, r7, pc}
 8007380:	080214a0 	.word	0x080214a0
 8007384:	080214b0 	.word	0x080214b0

08007388 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f003 fc93 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800739a:	4603      	mov	r3, r0
 800739c:	4619      	mov	r1, r3
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f003 f903 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 80073a4:	4a0e      	ldr	r2, [pc, #56]	; (80073e0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 80073a6:	490f      	ldr	r1, [pc, #60]	; (80073e4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f003 fb13 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 80073ae:	4a0e      	ldr	r2, [pc, #56]	; (80073e8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80073b0:	490e      	ldr	r1, [pc, #56]	; (80073ec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f003 fb0e 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80073b8:	4a0d      	ldr	r2, [pc, #52]	; (80073f0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80073ba:	490e      	ldr	r1, [pc, #56]	; (80073f4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f003 fb09 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80073c2:	4a0d      	ldr	r2, [pc, #52]	; (80073f8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80073c4:	490d      	ldr	r1, [pc, #52]	; (80073fc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f003 fb04 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80073cc:	4a0c      	ldr	r2, [pc, #48]	; (8007400 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80073ce:	490d      	ldr	r1, [pc, #52]	; (8007404 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f003 faff 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80073d6:	bf00      	nop
}
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	080214c0 	.word	0x080214c0
 80073e4:	080214c8 	.word	0x080214c8
 80073e8:	080214cc 	.word	0x080214cc
 80073ec:	080214d4 	.word	0x080214d4
 80073f0:	080214d8 	.word	0x080214d8
 80073f4:	080214e0 	.word	0x080214e0
 80073f8:	080214e4 	.word	0x080214e4
 80073fc:	080214ec 	.word	0x080214ec
 8007400:	080214f0 	.word	0x080214f0
 8007404:	080214fc 	.word	0x080214fc

08007408 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8007408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740c:	b096      	sub	sp, #88	; 0x58
 800740e:	af08      	add	r7, sp, #32
 8007410:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80b2 	beq.w	8007586 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8007426:	3328      	adds	r3, #40	; 0x28
 8007428:	4618      	mov	r0, r3
 800742a:	f003 fc49 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800742e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3328      	adds	r3, #40	; 0x28
 8007436:	4618      	mov	r0, r3
 8007438:	f003 fc5e 	bl	800acf8 <_ZNK12SimpleString7isEmptyEv>
 800743c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8007442:	4c53      	ldr	r4, [pc, #332]	; (8007590 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8007444:	e000      	b.n	8007448 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8007446:	4c53      	ldr	r4, [pc, #332]	; (8007594 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800744c:	3314      	adds	r3, #20
 800744e:	4618      	mov	r0, r3
 8007450:	f003 fc36 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8007454:	4605      	mov	r5, r0
 8007456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007458:	4618      	mov	r0, r3
 800745a:	f003 fc31 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800745e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8007460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007462:	6a1a      	ldr	r2, [r3, #32]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800746c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	4a49      	ldr	r2, [pc, #292]	; (8007598 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800747a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	4b45      	ldr	r3, [pc, #276]	; (8007598 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007482:	fba3 1302 	umull	r1, r3, r3, r2
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	3314      	adds	r3, #20
 8007498:	4618      	mov	r0, r3
 800749a:	f003 fc11 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800749e:	4602      	mov	r2, r0
 80074a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f107 0014 	add.w	r0, r7, #20
 80074a8:	9306      	str	r3, [sp, #24]
 80074aa:	9205      	str	r2, [sp, #20]
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	9204      	str	r2, [sp, #16]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	9203      	str	r2, [sp, #12]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	9601      	str	r6, [sp, #4]
 80074ba:	9500      	str	r5, [sp, #0]
 80074bc:	4623      	mov	r3, r4
 80074be:	4642      	mov	r2, r8
 80074c0:	4936      	ldr	r1, [pc, #216]	; (800759c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80074c2:	f004 f931 	bl	800b728 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3368      	adds	r3, #104	; 0x68
 80074cc:	681c      	ldr	r4, [r3, #0]
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	4618      	mov	r0, r3
 80074d4:	f003 fbf4 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 80074d8:	4602      	mov	r2, r0
 80074da:	f107 031c 	add.w	r3, r7, #28
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f003 f862 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80074e6:	f107 031c 	add.w	r3, r7, #28
 80074ea:	4619      	mov	r1, r3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	47a0      	blx	r4
 80074f0:	f107 031c 	add.w	r3, r7, #28
 80074f4:	4618      	mov	r0, r3
 80074f6:	f003 fc10 	bl	800ad1a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007500:	6a12      	ldr	r2, [r2, #32]
 8007502:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3388      	adds	r3, #136	; 0x88
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4798      	blx	r3
 800751a:	e017      	b.n	800754c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800751c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751e:	7c1b      	ldrb	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3368      	adds	r3, #104	; 0x68
 800752a:	681c      	ldr	r4, [r3, #0]
 800752c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007530:	491b      	ldr	r1, [pc, #108]	; (80075a0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8007532:	4618      	mov	r0, r3
 8007534:	f003 f839 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800753c:	4619      	mov	r1, r3
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	47a0      	blx	r4
 8007542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007546:	4618      	mov	r0, r3
 8007548:	f003 fbe7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3368      	adds	r3, #104	; 0x68
 8007552:	681c      	ldr	r4, [r3, #0]
 8007554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007558:	4912      	ldr	r1, [pc, #72]	; (80075a4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800755a:	4618      	mov	r0, r3
 800755c:	f003 f825 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007564:	4619      	mov	r1, r3
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	47a0      	blx	r4
 800756a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800756e:	4618      	mov	r0, r3
 8007570:	f003 fbd3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800757a:	f107 0314 	add.w	r3, r7, #20
 800757e:	4618      	mov	r0, r3
 8007580:	f003 fbcb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    while (cur) {
 8007584:	e749      	b.n	800741a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8007586:	bf00      	nop
 8007588:	3738      	adds	r7, #56	; 0x38
 800758a:	46bd      	mov	sp, r7
 800758c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007590:	080213c0 	.word	0x080213c0
 8007594:	08021500 	.word	0x08021500
 8007598:	10624dd3 	.word	0x10624dd3
 800759c:	08021504 	.word	0x08021504
 80075a0:	08021560 	.word	0x08021560
 80075a4:	08021570 	.word	0x08021570

080075a8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 80075a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075aa:	b091      	sub	sp, #68	; 0x44
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68d9      	ldr	r1, [r3, #12]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3308      	adds	r3, #8
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f107 0210 	add.w	r2, r7, #16
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80075c8:	f107 0310 	add.w	r3, r7, #16
 80075cc:	4618      	mov	r0, r3
 80075ce:	f003 fb77 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 80075d2:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3314      	adds	r3, #20
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4610      	mov	r0, r2
 80075e4:	4798      	blx	r3
 80075e6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80075e8:	461e      	mov	r6, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3380      	adds	r3, #128	; 0x80
 80075f0:	681c      	ldr	r4, [r3, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68d9      	ldr	r1, [r3, #12]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3318      	adds	r3, #24
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f107 0220 	add.w	r2, r7, #32
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	f107 0220 	add.w	r2, r7, #32
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4618      	mov	r0, r3
 8007614:	47a0      	blx	r4
 8007616:	f107 0318 	add.w	r3, r7, #24
 800761a:	4618      	mov	r0, r3
 800761c:	f003 fb50 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8007620:	4603      	mov	r3, r0
 8007622:	f107 0008 	add.w	r0, r7, #8
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4633      	mov	r3, r6
 800762a:	462a      	mov	r2, r5
 800762c:	4924      	ldr	r1, [pc, #144]	; (80076c0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800762e:	f004 f87b 	bl	800b728 <_Z16StringFromFormatPKcz>
 8007632:	f107 0318 	add.w	r3, r7, #24
 8007636:	4618      	mov	r0, r3
 8007638:	f003 fb6f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800763c:	f107 0320 	add.w	r3, r7, #32
 8007640:	4618      	mov	r0, r3
 8007642:	f003 fb6a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8007646:	f107 0310 	add.w	r3, r7, #16
 800764a:	4618      	mov	r0, r3
 800764c:	f003 fb65 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3368      	adds	r3, #104	; 0x68
 8007656:	681c      	ldr	r4, [r3, #0]
 8007658:	f107 0308 	add.w	r3, r7, #8
 800765c:	4618      	mov	r0, r3
 800765e:	f003 fb2f 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8007662:	4602      	mov	r2, r0
 8007664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f002 ff9d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	47a0      	blx	r4
 800767a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800767e:	4618      	mov	r0, r3
 8007680:	f003 fb4b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3368      	adds	r3, #104	; 0x68
 800768a:	681c      	ldr	r4, [r3, #0]
 800768c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007690:	490c      	ldr	r1, [pc, #48]	; (80076c4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8007692:	4618      	mov	r0, r3
 8007694:	f002 ff89 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	47a0      	blx	r4
 80076a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076a6:	4618      	mov	r0, r3
 80076a8:	f003 fb37 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80076ac:	f107 0308 	add.w	r3, r7, #8
 80076b0:	4618      	mov	r0, r3
 80076b2:	f003 fb32 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80076b6:	bf00      	nop
 80076b8:	373c      	adds	r7, #60	; 0x3c
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076be:	bf00      	nop
 80076c0:	08021580 	.word	0x08021580
 80076c4:	080215bc 	.word	0x080215bc

080076c8 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b08d      	sub	sp, #52	; 0x34
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3368      	adds	r3, #104	; 0x68
 80076d6:	681c      	ldr	r4, [r3, #0]
 80076d8:	f107 0308 	add.w	r3, r7, #8
 80076dc:	4933      	ldr	r1, [pc, #204]	; (80077ac <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 ff63 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80076e4:	f107 0308 	add.w	r3, r7, #8
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	47a0      	blx	r4
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	4618      	mov	r0, r3
 80076f4:	f003 fb11 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3368      	adds	r3, #104	; 0x68
 80076fe:	681c      	ldr	r4, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3380      	adds	r3, #128	; 0x80
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6912      	ldr	r2, [r2, #16]
 800770c:	3230      	adds	r2, #48	; 0x30
 800770e:	f107 0010 	add.w	r0, r7, #16
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4798      	blx	r3
 8007716:	f107 0310 	add.w	r3, r7, #16
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	47a0      	blx	r4
 8007720:	f107 0310 	add.w	r3, r7, #16
 8007724:	4618      	mov	r0, r3
 8007726:	f003 faf8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3368      	adds	r3, #104	; 0x68
 8007730:	681c      	ldr	r4, [r3, #0]
 8007732:	f107 0318 	add.w	r3, r7, #24
 8007736:	491e      	ldr	r1, [pc, #120]	; (80077b0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8007738:	4618      	mov	r0, r3
 800773a:	f002 ff36 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800773e:	f107 0318 	add.w	r3, r7, #24
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	47a0      	blx	r4
 8007748:	f107 0318 	add.w	r3, r7, #24
 800774c:	4618      	mov	r0, r3
 800774e:	f003 fae4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3368      	adds	r3, #104	; 0x68
 8007758:	681c      	ldr	r4, [r3, #0]
 800775a:	f107 0320 	add.w	r3, r7, #32
 800775e:	4915      	ldr	r1, [pc, #84]	; (80077b4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8007760:	4618      	mov	r0, r3
 8007762:	f002 ff22 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8007766:	f107 0320 	add.w	r3, r7, #32
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	47a0      	blx	r4
 8007770:	f107 0320 	add.w	r3, r7, #32
 8007774:	4618      	mov	r0, r3
 8007776:	f003 fad0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3368      	adds	r3, #104	; 0x68
 8007780:	681c      	ldr	r4, [r3, #0]
 8007782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007786:	490c      	ldr	r1, [pc, #48]	; (80077b8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8007788:	4618      	mov	r0, r3
 800778a:	f002 ff0e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800778e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	47a0      	blx	r4
 8007798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800779c:	4618      	mov	r0, r3
 800779e:	f003 fabc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80077a2:	bf00      	nop
 80077a4:	3734      	adds	r7, #52	; 0x34
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd90      	pop	{r4, r7, pc}
 80077aa:	bf00      	nop
 80077ac:	080215c8 	.word	0x080215c8
 80077b0:	080215d8 	.word	0x080215d8
 80077b4:	080215e8 	.word	0x080215e8
 80077b8:	08021604 	.word	0x08021604

080077bc <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3360      	adds	r3, #96	; 0x60
 80077ca:	681c      	ldr	r4, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	335c      	adds	r3, #92	; 0x5c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6912      	ldr	r2, [r2, #16]
 80077d8:	3214      	adds	r2, #20
 80077da:	f107 0008 	add.w	r0, r7, #8
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	f107 0308 	add.w	r3, r7, #8
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	47a0      	blx	r4
 80077ec:	f107 0308 	add.w	r3, r7, #8
 80077f0:	4618      	mov	r0, r3
 80077f2:	f003 fa92 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3370      	adds	r3, #112	; 0x70
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4798      	blx	r3
    writeTestSuiteSummary();
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3374      	adds	r3, #116	; 0x74
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
    writeProperties();
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3378      	adds	r3, #120	; 0x78
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
    writeTestCases();
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	337c      	adds	r3, #124	; 0x7c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
    writeFileEnding();
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	338c      	adds	r3, #140	; 0x8c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
    closeFile();
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	336c      	adds	r3, #108	; 0x6c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	bd90      	pop	{r4, r7, pc}

08007846 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	3330      	adds	r3, #48	; 0x30
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f003 fae2 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d113      	bne.n	80078fa <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	3201      	adds	r2, #1
 80078da:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80078dc:	f240 1233 	movw	r2, #307	; 0x133
 80078e0:	4908      	ldr	r1, [pc, #32]	; (8007904 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80078e2:	2034      	movs	r0, #52	; 0x34
 80078e4:	f000 fa9e 	bl	8007e24 <_ZnwjPKci>
 80078e8:	4604      	mov	r4, r0
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	4620      	mov	r0, r4
 80078ee:	f004 fd37 	bl	800c360 <_ZN11TestFailureC1ERKS_>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	60dc      	str	r4, [r3, #12]
    }
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd90      	pop	{r4, r7, pc}
 8007902:	bf00      	nop
 8007904:	080213c4 	.word	0x080213c4

08007908 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8007908:	b5b0      	push	{r4, r5, r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8007912:	4b08      	ldr	r3, [pc, #32]	; (8007934 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8007914:	681d      	ldr	r5, [r3, #0]
 8007916:	6838      	ldr	r0, [r7, #0]
 8007918:	f003 f9d2 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800791c:	4602      	mov	r2, r0
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691c      	ldr	r4, [r3, #16]
 8007922:	4905      	ldr	r1, [pc, #20]	; (8007938 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8007924:	4610      	mov	r0, r2
 8007926:	47a8      	blx	r5
 8007928:	4603      	mov	r3, r0
 800792a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bdb0      	pop	{r4, r5, r7, pc}
 8007934:	200000b0 	.word	0x200000b0
 8007938:	08021614 	.word	0x08021614

0800793c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8007946:	4b08      	ldr	r3, [pc, #32]	; (8007968 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8007948:	681c      	ldr	r4, [r3, #0]
 800794a:	6838      	ldr	r0, [r7, #0]
 800794c:	f003 f9b8 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	47a0      	blx	r4
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	bd90      	pop	{r4, r7, pc}
 8007966:	bf00      	nop
 8007968:	200000b4 	.word	0x200000b4

0800796c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6912      	ldr	r2, [r2, #16]
 800797c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800797e:	4610      	mov	r0, r2
 8007980:	4798      	blx	r3
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	200000b8 	.word	0x200000b8

08007990 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
        return false;
 800799e:	2300      	movs	r3, #0
    }
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
    {
 80079b4:	4a04      	ldr	r2, [pc, #16]	; (80079c8 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
    }
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	080249fc 	.word	0x080249fc

080079cc <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
    }
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ffe9 	bl	80079ac <_ZN17MemoryLeakFailureD1Ev>
 80079da:	2104      	movs	r1, #4
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa35 	bl	8007e4c <_ZdlPvj>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80079ec:	b590      	push	{r4, r7, lr}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	687c      	ldr	r4, [r7, #4]
 80079f6:	f000 fc71 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80079fa:	4603      	mov	r3, r0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f00c ff6c 	bl	80148da <_ZN18MemoryLeakDetector8getMutexEv>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4619      	mov	r1, r3
 8007a06:	4620      	mov	r0, r4
 8007a08:	f002 fb24 	bl	800a054 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd90      	pop	{r4, r7, pc}

08007a16 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f002 fb29 	bl	800a078 <_ZN15ScopedMutexLockD1Ev>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8007a30:	b590      	push	{r4, r7, lr}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8007a3c:	f000 fc4e 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007a40:	4604      	mov	r4, r0
 8007a42:	f006 f8df 	bl	800dc04 <_Z25getCurrentMallocAllocatorv>
 8007a46:	4601      	mov	r1, r0
 8007a48:	2301      	movs	r3, #1
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4620      	mov	r0, r4
 8007a56:	f00d f983 	bl	8014d60 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8007a5a:	4603      	mov	r3, r0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd90      	pop	{r4, r7, pc}

08007a64 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8007a64:	b590      	push	{r4, r7, lr}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8007a70:	f000 fc34 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007a74:	4603      	mov	r3, r0
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f00c ffdd 	bl	8014a38 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8007a7e:	f000 fc2d 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007a82:	4604      	mov	r4, r0
 8007a84:	f006 f8be 	bl	800dc04 <_Z25getCurrentMallocAllocatorv>
 8007a88:	4601      	mov	r1, r0
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f00d f996 	bl	8014dc8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd90      	pop	{r4, r7, pc}

08007aa4 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b089      	sub	sp, #36	; 0x24
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8007ab2:	f000 fc13 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f006 f8a4 	bl	800dc04 <_Z25getCurrentMallocAllocatorv>
 8007abc:	4601      	mov	r1, r0
 8007abe:	2301      	movs	r3, #1
 8007ac0:	9302      	str	r3, [sp, #8]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f00d f9de 	bl	8014e90 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8007ad4:	4603      	mov	r3, r0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd90      	pop	{r4, r7, pc}
	...

08007ae0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <_ZL13normal_mallocjPKcj+0x20>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	4798      	blx	r3
 8007af4:	4603      	mov	r3, r0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	200000c4 	.word	0x200000c4

08007b04 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <_ZL14normal_reallocPvjPKcj+0x24>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	200000c8 	.word	0x200000c8

08007b2c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <_ZL11normal_freePvPKcj+0x1c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	4798      	blx	r3
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	200000cc 	.word	0x200000cc

08007b4c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007b4c:	b590      	push	{r4, r7, lr}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8007b54:	f107 0308 	add.w	r3, r7, #8
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff ff47 	bl	80079ec <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007b5e:	f000 fbbd 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007b62:	4604      	mov	r4, r0
 8007b64:	f005 ff9e 	bl	800daa4 <_Z22getCurrentNewAllocatorv>
 8007b68:	4601      	mov	r1, r0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f00d f864 	bl	8014c3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007b74:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007b76:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8007b78:	f107 0308 	add.w	r3, r7, #8
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ff4a 	bl	8007a16 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8007b82:	4623      	mov	r3, r4
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd90      	pop	{r4, r7, pc}

08007b8c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007b8c:	b590      	push	{r4, r7, lr}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007b94:	f000 fba2 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007b98:	4604      	mov	r4, r0
 8007b9a:	f005 ff83 	bl	800daa4 <_Z22getCurrentNewAllocatorv>
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f00d f849 	bl	8014c3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007baa:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007bac:	68fb      	ldr	r3, [r7, #12]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd90      	pop	{r4, r7, pc}

08007bb6 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007bb6:	b590      	push	{r4, r7, lr}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007bbe:	f000 fb8d 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f005 ff6e 	bl	800daa4 <_Z22getCurrentNewAllocatorv>
 8007bc8:	4601      	mov	r1, r0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f00d f834 	bl	8014c3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007bd4:	4603      	mov	r3, r0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd90      	pop	{r4, r7, pc}

08007bde <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8007bde:	b590      	push	{r4, r7, lr}
 8007be0:	b089      	sub	sp, #36	; 0x24
 8007be2:	af02      	add	r7, sp, #8
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8007bea:	f000 fb77 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	f005 ff58 	bl	800daa4 <_Z22getCurrentNewAllocatorv>
 8007bf4:	4601      	mov	r1, r0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4620      	mov	r0, r4
 8007c04:	f00d f8ac 	bl	8014d60 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8007c08:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007c0a:	697b      	ldr	r3, [r7, #20]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd90      	pop	{r4, r7, pc}

08007c14 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8007c1c:	f000 fb5e 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007c20:	4604      	mov	r4, r0
 8007c22:	f005 ff97 	bl	800db54 <_Z27getCurrentNewArrayAllocatorv>
 8007c26:	4601      	mov	r1, r0
 8007c28:	2300      	movs	r3, #0
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f00d f805 	bl	8014c3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007c32:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007c34:	68fb      	ldr	r3, [r7, #12]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd90      	pop	{r4, r7, pc}

08007c3e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8007c3e:	b590      	push	{r4, r7, lr}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8007c46:	f000 fb49 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	f005 ff82 	bl	800db54 <_Z27getCurrentNewArrayAllocatorv>
 8007c50:	4601      	mov	r1, r0
 8007c52:	2300      	movs	r3, #0
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4620      	mov	r0, r4
 8007c58:	f00c fff0 	bl	8014c3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007c5c:	4603      	mov	r3, r0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd90      	pop	{r4, r7, pc}

08007c66 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8007c66:	b590      	push	{r4, r7, lr}
 8007c68:	b089      	sub	sp, #36	; 0x24
 8007c6a:	af02      	add	r7, sp, #8
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8007c72:	f000 fb33 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007c76:	4604      	mov	r4, r0
 8007c78:	f005 ff6c 	bl	800db54 <_Z27getCurrentNewArrayAllocatorv>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f00d f868 	bl	8014d60 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8007c90:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007c92:	697b      	ldr	r3, [r7, #20]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd90      	pop	{r4, r7, pc}

08007c9c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8007c9c:	b590      	push	{r4, r7, lr}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8007ca4:	f000 fb1a 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f00c fec3 	bl	8014a38 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8007cb2:	f000 fb13 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	f005 fef4 	bl	800daa4 <_Z22getCurrentNewAllocatorv>
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f00d f8ca 	bl	8014e5c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd90      	pop	{r4, r7, pc}

08007cd0 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8007cd8:	f000 fb00 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f00c fea9 	bl	8014a38 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8007ce6:	f000 faf9 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007cea:	4604      	mov	r4, r0
 8007cec:	f005 ff32 	bl	800db54 <_Z27getCurrentNewArrayAllocatorv>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f00d f8b0 	bl	8014e5c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd90      	pop	{r4, r7, pc}

08007d04 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <_ZL19normal_operator_newj+0x1c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007d16:	68fb      	ldr	r3, [r7, #12]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	200000c4 	.word	0x200000c4

08007d24 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007d2c:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
 8007d34:	4603      	mov	r3, r0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200000c4 	.word	0x200000c4

08007d44 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007d50:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
 8007d58:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007d5a:	697b      	ldr	r3, [r7, #20]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	200000c4 	.word	0x200000c4

08007d68 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007d70:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <_ZL25normal_operator_new_arrayj+0x1c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	200000c4 	.word	0x200000c4

08007d88 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
 8007d98:	4603      	mov	r3, r0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200000c4 	.word	0x200000c4

08007da8 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007db4:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	4798      	blx	r3
 8007dbc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007dbe:	697b      	ldr	r3, [r7, #20]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200000c4 	.word	0x200000c4

08007dcc <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <_ZL22normal_operator_deletePv+0x18>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	200000cc 	.word	0x200000cc

08007de8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200000cc 	.word	0x200000cc

08007e04 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <_Znwj+0x1c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
 8007e14:	4603      	mov	r3, r0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000028 	.word	0x20000028

08007e24 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <_ZnwjPKci+0x24>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	4798      	blx	r3
 8007e3c:	4603      	mov	r3, r0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000030 	.word	0x20000030

08007e4c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8007e56:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <_ZdlPvj+0x1c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	4798      	blx	r3
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000040 	.word	0x20000040

08007e6c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <_ZnajPKci+0x24>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	2000003c 	.word	0x2000003c

08007e94 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8007e9c:	4b03      	ldr	r3, [pc, #12]	; (8007eac <_ZdaPv+0x18>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	4798      	blx	r3
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000044 	.word	0x20000044

08007eb0 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8007eba:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <_ZdaPvj+0x1c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000044 	.word	0x20000044

08007ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8007ed4:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8007ed6:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8007ed8:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8007eda:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8007edc:	4a13      	ldr	r2, [pc, #76]	; (8007f2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8007ede:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8007ee0:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8007ee2:	4a14      	ldr	r2, [pc, #80]	; (8007f34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8007ee4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8007ee8:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8007eea:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8007eec:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8007eee:	4a15      	ldr	r2, [pc, #84]	; (8007f44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8007ef0:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8007ef4:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8007ef6:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8007ef8:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8007efa:	4a16      	ldr	r2, [pc, #88]	; (8007f54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8007efc:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8007f00:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8007f02:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8007f04:	4b16      	ldr	r3, [pc, #88]	; (8007f60 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8007f06:	4a17      	ldr	r2, [pc, #92]	; (8007f64 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8007f08:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8007f0c:	4a17      	ldr	r2, [pc, #92]	; (8007f6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8007f0e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8007f12:	4a18      	ldr	r2, [pc, #96]	; (8007f74 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8007f14:	601a      	str	r2, [r3, #0]

#endif
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	20000028 	.word	0x20000028
 8007f24:	08007d05 	.word	0x08007d05
 8007f28:	2000002c 	.word	0x2000002c
 8007f2c:	08007d25 	.word	0x08007d25
 8007f30:	20000030 	.word	0x20000030
 8007f34:	08007d45 	.word	0x08007d45
 8007f38:	20000034 	.word	0x20000034
 8007f3c:	08007d69 	.word	0x08007d69
 8007f40:	20000038 	.word	0x20000038
 8007f44:	08007d89 	.word	0x08007d89
 8007f48:	2000003c 	.word	0x2000003c
 8007f4c:	08007da9 	.word	0x08007da9
 8007f50:	20000040 	.word	0x20000040
 8007f54:	08007dcd 	.word	0x08007dcd
 8007f58:	20000044 	.word	0x20000044
 8007f5c:	08007de9 	.word	0x08007de9
 8007f60:	20000010 	.word	0x20000010
 8007f64:	08007ae1 	.word	0x08007ae1
 8007f68:	20000018 	.word	0x20000018
 8007f6c:	08007b05 	.word	0x08007b05
 8007f70:	20000014 	.word	0x20000014
 8007f74:	08007b2d 	.word	0x08007b2d

08007f78 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a08      	ldr	r2, [pc, #32]	; (8007fa4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a07      	ldr	r2, [pc, #28]	; (8007fa8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d101      	bne.n	8007f94 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8007f94:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20000028 	.word	0x20000028
 8007fa4:	08007b8d 	.word	0x08007b8d
 8007fa8:	08007b4d 	.word	0x08007b4d

08007fac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	4a1e      	ldr	r2, [pc, #120]	; (8008030 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	bfcc      	ite	gt
 8007fc2:	2301      	movgt	r3, #1
 8007fc4:	2300      	movle	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d12e      	bne.n	800802a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8007fcc:	4b19      	ldr	r3, [pc, #100]	; (8008034 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a19      	ldr	r2, [pc, #100]	; (8008038 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8007fd2:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8007fd4:	4b19      	ldr	r3, [pc, #100]	; (800803c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a19      	ldr	r2, [pc, #100]	; (8008040 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8007fda:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8007fdc:	4b19      	ldr	r3, [pc, #100]	; (8008044 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a19      	ldr	r2, [pc, #100]	; (8008048 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8007fe2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8007fe4:	4b19      	ldr	r3, [pc, #100]	; (800804c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a19      	ldr	r2, [pc, #100]	; (8008050 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8007fea:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8007fec:	4b19      	ldr	r3, [pc, #100]	; (8008054 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a19      	ldr	r2, [pc, #100]	; (8008058 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8007ff2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8007ff4:	4b19      	ldr	r3, [pc, #100]	; (800805c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a19      	ldr	r2, [pc, #100]	; (8008060 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8007ffa:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8007ffc:	4b19      	ldr	r3, [pc, #100]	; (8008064 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a19      	ldr	r2, [pc, #100]	; (8008068 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8008002:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8008004:	4b19      	ldr	r3, [pc, #100]	; (800806c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a19      	ldr	r2, [pc, #100]	; (8008070 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800800a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800800c:	4b19      	ldr	r3, [pc, #100]	; (8008074 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a19      	ldr	r2, [pc, #100]	; (8008078 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8008012:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8008014:	4b19      	ldr	r3, [pc, #100]	; (800807c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a19      	ldr	r2, [pc, #100]	; (8008080 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800801a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800801c:	4b19      	ldr	r3, [pc, #100]	; (8008084 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a19      	ldr	r2, [pc, #100]	; (8008088 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8008022:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8008024:	f7ff ff54 	bl	8007ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8008028:	e000      	b.n	800802c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800802a:	bf00      	nop
#endif
}
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	200006a0 	.word	0x200006a0
 8008034:	20000028 	.word	0x20000028
 8008038:	20000048 	.word	0x20000048
 800803c:	2000002c 	.word	0x2000002c
 8008040:	2000004c 	.word	0x2000004c
 8008044:	20000030 	.word	0x20000030
 8008048:	20000050 	.word	0x20000050
 800804c:	20000034 	.word	0x20000034
 8008050:	20000054 	.word	0x20000054
 8008054:	20000038 	.word	0x20000038
 8008058:	20000058 	.word	0x20000058
 800805c:	2000003c 	.word	0x2000003c
 8008060:	2000005c 	.word	0x2000005c
 8008064:	20000040 	.word	0x20000040
 8008068:	20000060 	.word	0x20000060
 800806c:	20000044 	.word	0x20000044
 8008070:	20000064 	.word	0x20000064
 8008074:	20000010 	.word	0x20000010
 8008078:	2000001c 	.word	0x2000001c
 800807c:	20000018 	.word	0x20000018
 8008080:	20000024 	.word	0x20000024
 8008084:	20000014 	.word	0x20000014
 8008088:	20000020 	.word	0x20000020

0800808c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8008090:	4b1f      	ldr	r3, [pc, #124]	; (8008110 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3b01      	subs	r3, #1
 8008096:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bfcc      	ite	gt
 80080a2:	2301      	movgt	r3, #1
 80080a4:	2300      	movle	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d12c      	bne.n	8008106 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 80080ac:	4b19      	ldr	r3, [pc, #100]	; (8008114 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a19      	ldr	r2, [pc, #100]	; (8008118 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 80080b2:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 80080b4:	4b19      	ldr	r3, [pc, #100]	; (800811c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a19      	ldr	r2, [pc, #100]	; (8008120 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 80080ba:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a19      	ldr	r2, [pc, #100]	; (8008128 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 80080c2:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 80080c4:	4b19      	ldr	r3, [pc, #100]	; (800812c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 80080ca:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 80080cc:	4b19      	ldr	r3, [pc, #100]	; (8008134 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a19      	ldr	r2, [pc, #100]	; (8008138 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 80080d2:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 80080d4:	4b19      	ldr	r3, [pc, #100]	; (800813c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a19      	ldr	r2, [pc, #100]	; (8008140 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 80080da:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80080dc:	4b19      	ldr	r3, [pc, #100]	; (8008144 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a19      	ldr	r2, [pc, #100]	; (8008148 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80080e2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80080e4:	4b19      	ldr	r3, [pc, #100]	; (800814c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a19      	ldr	r2, [pc, #100]	; (8008150 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80080ea:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 80080ec:	4b19      	ldr	r3, [pc, #100]	; (8008154 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a19      	ldr	r2, [pc, #100]	; (8008158 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 80080f2:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 80080f4:	4b19      	ldr	r3, [pc, #100]	; (800815c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a19      	ldr	r2, [pc, #100]	; (8008160 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 80080fa:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a19      	ldr	r2, [pc, #100]	; (8008168 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e000      	b.n	8008108 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8008106:	bf00      	nop
#endif
}
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	200006a0 	.word	0x200006a0
 8008114:	20000048 	.word	0x20000048
 8008118:	20000028 	.word	0x20000028
 800811c:	2000004c 	.word	0x2000004c
 8008120:	2000002c 	.word	0x2000002c
 8008124:	20000050 	.word	0x20000050
 8008128:	20000030 	.word	0x20000030
 800812c:	20000054 	.word	0x20000054
 8008130:	20000034 	.word	0x20000034
 8008134:	20000058 	.word	0x20000058
 8008138:	20000038 	.word	0x20000038
 800813c:	2000005c 	.word	0x2000005c
 8008140:	2000003c 	.word	0x2000003c
 8008144:	20000060 	.word	0x20000060
 8008148:	20000040 	.word	0x20000040
 800814c:	20000064 	.word	0x20000064
 8008150:	20000044 	.word	0x20000044
 8008154:	2000001c 	.word	0x2000001c
 8008158:	20000010 	.word	0x20000010
 800815c:	20000024 	.word	0x20000024
 8008160:	20000018 	.word	0x20000018
 8008164:	20000020 	.word	0x20000020
 8008168:	20000014 	.word	0x20000014

0800816c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
    {
 8008174:	4a05      	ldr	r2, [pc, #20]	; (800818c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fc15 	bl	80079ac <_ZN17MemoryLeakFailureD1Ev>
    }
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	080249e8 	.word	0x080249e8

08008190 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    }
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff ffe7 	bl	800816c <_ZN25MemoryLeakWarningReporterD1Ev>
 800819e:	2104      	movs	r1, #4
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fe53 	bl	8007e4c <_ZdlPvj>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	4a04      	ldr	r2, [pc, #16]	; (80081cc <_ZN14TestTerminatorC1Ev+0x1c>)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	08025394 	.word	0x08025394

080081d0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff ffe8 	bl	80081b0 <_ZN14TestTerminatorC1Ev>
 80081e0:	4a03      	ldr	r2, [pc, #12]	; (80081f0 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	0802536c 	.word	0x0802536c

080081f4 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 80081f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f6:	b099      	sub	sp, #100	; 0x64
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 80081fe:	f009 fdb7 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8008202:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8008204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	339c      	adds	r3, #156	; 0x9c
 800820a:	681c      	ldr	r4, [r3, #0]
 800820c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008212:	4618      	mov	r0, r3
 8008214:	f008 fbc4 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 8008218:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800821c:	4618      	mov	r0, r3
 800821e:	f002 fd4f 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8008222:	4605      	mov	r5, r0
 8008224:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008226:	f008 fc9b 	bl	8010b60 <_ZNK10UtestShell13getLineNumberEv>
 800822a:	4606      	mov	r6, r0
 800822c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f002 f9b9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8008238:	f107 000c 	add.w	r0, r7, #12
 800823c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	4633      	mov	r3, r6
 8008244:	462a      	mov	r2, r5
 8008246:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008248:	f004 fd14 	bl	800cc74 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800824c:	2300      	movs	r3, #0
 800824e:	653b      	str	r3, [r7, #80]	; 0x50
 8008250:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff ffbb 	bl	80081d0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800825a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800825e:	f107 030c 	add.w	r3, r7, #12
 8008262:	4619      	mov	r1, r3
 8008264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008266:	47a0      	blx	r4
 8008268:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800826c:	4618      	mov	r0, r3
 800826e:	f009 fe79 	bl	8011f64 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8008272:	f107 030c 	add.w	r3, r7, #12
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f9ac 	bl	80085d4 <_ZN11FailFailureD1Ev>
 800827c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008280:	4618      	mov	r0, r3
 8008282:	f002 fd4a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8008286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800828a:	4618      	mov	r0, r3
 800828c:	f002 fd45 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8008290:	bf00      	nop
 8008292:	375c      	adds	r7, #92	; 0x5c
 8008294:	46bd      	mov	sp, r7
 8008296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008298 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	4a04      	ldr	r2, [pc, #16]	; (80082b4 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	080249fc 	.word	0x080249fc

080082b8 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff ffe8 	bl	8008298 <_ZN17MemoryLeakFailureC1Ev>
 80082c8:	4a03      	ldr	r2, [pc, #12]	; (80082d8 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	080249e8 	.word	0x080249e8

080082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 80082dc:	b598      	push	{r3, r4, r7, lr}
 80082de:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d11b      	bne.n	8008320 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 80082e8:	f7ff fe60 	bl	8007fac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 80082ec:	2004      	movs	r0, #4
 80082ee:	f7ff fd89 	bl	8007e04 <_Znwj>
 80082f2:	4603      	mov	r3, r0
 80082f4:	461c      	mov	r4, r3
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7ff ffde 	bl	80082b8 <_ZN25MemoryLeakWarningReporterC1Ev>
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80082fe:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8008300:	f241 1050 	movw	r0, #4432	; 0x1150
 8008304:	f7ff fd7e 	bl	8007e04 <_Znwj>
 8008308:	4603      	mov	r3, r0
 800830a:	461c      	mov	r4, r3
 800830c:	4b07      	ldr	r3, [pc, #28]	; (800832c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	4620      	mov	r0, r4
 8008314:	f00c fa3e 	bl	8014794 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8008318:	4b03      	ldr	r3, [pc, #12]	; (8008328 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800831a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800831c:	f7ff feb6 	bl	800808c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8008320:	4b01      	ldr	r3, [pc, #4]	; (8008328 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008322:	681b      	ldr	r3, [r3, #0]
}
 8008324:	4618      	mov	r0, r3
 8008326:	bd98      	pop	{r3, r4, r7, pc}
 8008328:	200006a8 	.word	0x200006a8
 800832c:	200006a4 	.word	0x200006a4

08008330 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	765a      	strb	r2, [r3, #25]
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
	...

08008350 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8008354:	f7ff fdbc 	bl	8007ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	3204      	adds	r2, #4
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	4790      	blx	r2
    delete globalReporter;
 800836a:	4b08      	ldr	r3, [pc, #32]	; (800838c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	3204      	adds	r2, #4
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	4618      	mov	r0, r3
 800837a:	4790      	blx	r2
    globalDetector = NULLPTR;
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	bf00      	nop
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	200006a8 	.word	0x200006a8
 800838c:	200006a4 	.word	0x200006a4

08008390 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f006 fdfd 	bl	800efa0 <_ZN10TestPluginC1ERK12SimpleString>
 80083a6:	4a14      	ldr	r2, [pc, #80]	; (80083f8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	761a      	strb	r2, [r3, #24]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	765a      	strb	r2, [r3, #25]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d102      	bne.n	80083cc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 80083c6:	4a0d      	ldr	r2, [pc, #52]	; (80083fc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	615a      	str	r2, [r3, #20]
 80083d8:	e004      	b.n	80083e4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 80083da:	f7ff ff7f 	bl	80082dc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80083de:	4602      	mov	r2, r0
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f00c fa69 	bl	80148c0 <_ZN18MemoryLeakDetector6enableEv>
}
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	08024a10 	.word	0x08024a10
 80083fc:	200006ac 	.word	0x200006ac

08008400 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	4a09      	ldr	r2, [pc, #36]	; (8008430 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7e5b      	ldrb	r3, [r3, #25]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8008416:	f7ff fd5b 	bl	8007ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800841a:	f7ff ff99 	bl	8008350 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4618      	mov	r0, r3
 8008422:	f006 fdf9 	bl	800f018 <_ZN10TestPluginD1Ev>
    }
}
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	08024a10 	.word	0x08024a10

08008434 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
}
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ffdf 	bl	8008400 <_ZN23MemoryLeakWarningPluginD1Ev>
 8008442:	2124      	movs	r1, #36	; 0x24
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff fd01 	bl	8007e4c <_ZdlPvj>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	4618      	mov	r0, r3
 8008466:	f00c fa0e 	bl	8014886 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fd ffb0 	bl	80063d0 <_ZNK10TestResult15getFailureCountEv>
 8008470:	4602      	mov	r2, r0
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b097      	sub	sp, #92	; 0x5c
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	4618      	mov	r0, r3
 8008492:	f00c fa08 	bl	80148a6 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	2103      	movs	r1, #3
 800849c:	4618      	mov	r0, r3
 800849e:	f00c fda5 	bl	8014fec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80084a2:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	7e1b      	ldrb	r3, [r3, #24]
 80084a8:	f083 0301 	eor.w	r3, r3, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00e      	beq.n	80084d0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d009      	beq.n	80084d0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a1c      	ldr	r4, [r3, #32]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7fd ff85 	bl	80063d0 <_ZNK10TestResult15getFailureCountEv>
 80084c6:	4603      	mov	r3, r0
 80084c8:	429c      	cmp	r4, r3
 80084ca:	d101      	bne.n	80084d0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80084d0:	2300      	movs	r3, #0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d04c      	beq.n	8008570 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80084d6:	f7ff fd4f 	bl	8007f78 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d028      	beq.n	8008532 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	2103      	movs	r1, #3
 80084e6:	4618      	mov	r0, r3
 80084e8:	f00c fd45 	bl	8014f76 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80084ec:	4602      	mov	r2, r0
 80084ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f002 f858 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80084fa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80084fe:	f107 0310 	add.w	r3, r7, #16
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	4618      	mov	r0, r3
 8008506:	f003 feaf 	bl	800c268 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800850a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800850e:	4618      	mov	r0, r3
 8008510:	f002 fc03 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3334      	adds	r3, #52	; 0x34
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f107 0210 	add.w	r2, r7, #16
 8008520:	4611      	mov	r1, r2
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8008526:	f107 0310 	add.w	r3, r7, #16
 800852a:	4618      	mov	r0, r3
 800852c:	f003 ff5c 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 8008530:	e01e      	b.n	8008570 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01a      	beq.n	8008570 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3338      	adds	r3, #56	; 0x38
 8008540:	681c      	ldr	r4, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	461a      	mov	r2, r3
 8008548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800854c:	4910      	ldr	r1, [pc, #64]	; (8008590 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800854e:	4618      	mov	r0, r3
 8008550:	f003 f8ea 	bl	800b728 <_Z16StringFromFormatPKcz>
 8008554:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008558:	4618      	mov	r0, r3
 800855a:	f002 fbb1 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800855e:	4603      	mov	r3, r0
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	47a0      	blx	r4
 8008566:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800856a:	4618      	mov	r0, r3
 800856c:	f002 fbd5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	4618      	mov	r0, r3
 8008576:	f00c fd13 	bl	8014fa0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	61da      	str	r2, [r3, #28]
}
 8008586:	bf00      	nop
 8008588:	375c      	adds	r7, #92	; 0x5c
 800858a:	46bd      	mov	sp, r7
 800858c:	bd90      	pop	{r4, r7, pc}
 800858e:	bf00      	nop
 8008590:	08021618 	.word	0x08021618

08008594 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	2102      	movs	r1, #2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f00c fd21 	bl	8014fec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80085aa:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d007      	beq.n	80085c4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	2102      	movs	r1, #2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f00c fcdb 	bl	8014f76 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80085c0:	4603      	mov	r3, r0
 80085c2:	e000      	b.n	80085c6 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80085c4:	4b02      	ldr	r3, [pc, #8]	; (80085d0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	08021658 	.word	0x08021658

080085d4 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	4a05      	ldr	r2, [pc, #20]	; (80085f4 <_ZN11FailFailureD1Ev+0x20>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f003 feff 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	08024a58 	.word	0x08024a58

080085f8 <_ZN11FailFailureD0Ev>:
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff ffe7 	bl	80085d4 <_ZN11FailFailureD1Ev>
 8008606:	2134      	movs	r1, #52	; 0x34
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff fc1f 	bl	8007e4c <_ZdlPvj>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	4a06      	ldr	r2, [pc, #24]	; (800866c <_ZN19MockFailureReporterC1Ev+0x24>)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	711a      	strb	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	08025c34 	.word	0x08025c34

08008670 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <_ZN19MockFailureReporterD1Ev+0x1c>)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4618      	mov	r0, r3
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	08025c34 	.word	0x08025c34

08008690 <_ZN19MockFailureReporterD0Ev>:
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff ffe9 	bl	8008670 <_ZN19MockFailureReporterD1Ev>
 800869e:	2108      	movs	r1, #8
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fbd3 	bl	8007e4c <_ZdlPvj>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	4a05      	ldr	r2, [pc, #20]	; (80086d0 <_ZN11MockFailureD1Ev+0x20>)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f003 fe91 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	08024bac 	.word	0x08024bac

080086d4 <_ZN11MockFailureD0Ev>:
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff ffe7 	bl	80086b0 <_ZN11MockFailureD1Ev>
 80086e2:	2134      	movs	r1, #52	; 0x34
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fbb1 	bl	8007e4c <_ZdlPvj>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	4a16      	ldr	r2, [pc, #88]	; (8008758 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	3304      	adds	r3, #4
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	f001 ff9f 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f103 020c 	add.w	r2, r3, #12
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	330c      	adds	r3, #12
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f001 ff96 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f102 0418 	add.w	r4, r2, #24
 800872e:	3318      	adds	r3, #24
 8008730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	629a      	str	r2, [r3, #40]	; 0x28
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	62da      	str	r2, [r3, #44]	; 0x2c
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	631a      	str	r2, [r3, #48]	; 0x30
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	bd90      	pop	{r4, r7, pc}
 8008758:	08025c74 	.word	0x08025c74

0800875c <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8008766:	f107 030c 	add.w	r3, r7, #12
 800876a:	4916      	ldr	r1, [pc, #88]	; (80087c4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800876c:	4618      	mov	r0, r3
 800876e:	f001 ff1c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8008772:	f107 030c 	add.w	r3, r7, #12
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f002 fb1f 	bl	800adbc <_ZneRK12SimpleStringS1_>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4810      	ldr	r0, [pc, #64]	; (80087c8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008788:	f000 ff70 	bl	800966c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800878c:	4603      	mov	r3, r0
 800878e:	e000      	b.n	8008792 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	4618      	mov	r0, r3
 800879a:	f002 fabe 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	33a8      	adds	r3, #168	; 0xa8
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	33ac      	adds	r3, #172	; 0xac
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	4798      	blx	r3
    return mock_support;
 80087b8:	697b      	ldr	r3, [r7, #20]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	0802165c 	.word	0x0802165c
 80087c8:	200006b0 	.word	0x200006b0

080087cc <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 80087d6:	4a21      	ldr	r2, [pc, #132]	; (800885c <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	609a      	str	r2, [r3, #8]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	731a      	strb	r2, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f103 0218 	add.w	r2, r3, #24
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	615a      	str	r2, [r3, #20]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff ff23 	bl	8008648 <_ZN19MockFailureReporterC1Ev>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3320      	adds	r3, #32
 8008806:	4618      	mov	r0, r3
 8008808:	f010 fefc 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	62da      	str	r2, [r3, #44]	; 0x2c
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3330      	adds	r3, #48	; 0x30
 8008826:	4618      	mov	r0, r3
 8008828:	f014 fbe8 	bl	801cffc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	3338      	adds	r3, #56	; 0x38
 8008830:	4618      	mov	r0, r3
 8008832:	f014 faf2 	bl	801ce1a <_ZN18MockNamedValueListC1Ev>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	333c      	adds	r3, #60	; 0x3c
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	4618      	mov	r0, r3
 800883e:	f001 ff08 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800884a:	2100      	movs	r1, #0
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f894 	bl	800897a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	08024a84 	.word	0x08024a84

08008860 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	4a0d      	ldr	r2, [pc, #52]	; (80088a0 <_ZN11MockSupportD1Ev+0x40>)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	333c      	adds	r3, #60	; 0x3c
 8008872:	4618      	mov	r0, r3
 8008874:	f002 fa51 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3330      	adds	r3, #48	; 0x30
 800887c:	4618      	mov	r0, r3
 800887e:	f014 fbd1 	bl	801d024 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3320      	adds	r3, #32
 8008886:	4618      	mov	r0, r3
 8008888:	f010 fed0 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3318      	adds	r3, #24
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff feed 	bl	8008670 <_ZN19MockFailureReporterD1Ev>
{
}
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	08024a84 	.word	0x08024a84

080088a4 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
}
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff ffd7 	bl	8008860 <_ZN11MockSupportD1Ev>
 80088b2:	2148      	movs	r1, #72	; 0x48
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff fac9 	bl	8007e4c <_ZdlPvj>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3310      	adds	r3, #16
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	78f9      	ldrb	r1, [r7, #3]
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3318      	adds	r3, #24
 8008900:	e000      	b.n	8008904 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	33c8      	adds	r3, #200	; 0xc8
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6952      	ldr	r2, [r2, #20]
 8008922:	4611      	mov	r1, r2
 8008924:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3338      	adds	r3, #56	; 0x38
 800892a:	4618      	mov	r0, r3
 800892c:	f014 fb0b 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01c      	beq.n	8008972 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8008938:	68f9      	ldr	r1, [r7, #12]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 ff26 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	bf14      	ite	ne
 8008946:	2301      	movne	r3, #1
 8008948:	2300      	moveq	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8008950:	68f9      	ldr	r1, [r7, #12]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 ff1a 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008958:	4603      	mov	r3, r0
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	32a4      	adds	r2, #164	; 0xa4
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	6949      	ldr	r1, [r1, #20]
 8008964:	4618      	mov	r0, r3
 8008966:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f014 f9f5 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	e7df      	b.n	8008932 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	e000      	b.n	8008992 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6113      	str	r3, [r2, #16]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3330      	adds	r3, #48	; 0x30
 80089ae:	4618      	mov	r0, r3
 80089b0:	f012 fb10 	bl	801afd4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3330      	adds	r3, #48	; 0x30
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	68b9      	ldr	r1, [r7, #8]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f014 fb75 	bl	801d0c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3338      	adds	r3, #56	; 0x38
 80089da:	4618      	mov	r0, r3
 80089dc:	f014 fab3 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 80089e0:	6178      	str	r0, [r7, #20]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01c      	beq.n	8008a22 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 80089e8:	6979      	ldr	r1, [r7, #20]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fece 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	bf14      	ite	ne
 80089f6:	2301      	movne	r3, #1
 80089f8:	2300      	moveq	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8008a00:	6979      	ldr	r1, [r7, #20]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fec2 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	32b0      	adds	r2, #176	; 0xb0
 8008a0e:	6814      	ldr	r4, [r2, #0]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008a18:	6978      	ldr	r0, [r7, #20]
 8008a1a:	f014 f99d 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008a1e:	6178      	str	r0, [r7, #20]
 8008a20:	e7df      	b.n	80089e2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd90      	pop	{r4, r7, pc}

08008a2a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 8008a2a:	b590      	push	{r4, r7, lr}
 8008a2c:	b087      	sub	sp, #28
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3330      	adds	r3, #48	; 0x30
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f014 fb5a 	bl	801d0f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3338      	adds	r3, #56	; 0x38
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f014 fa7c 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008a4e:	6178      	str	r0, [r7, #20]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d01c      	beq.n	8008a90 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 8008a56:	6979      	ldr	r1, [r7, #20]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fe97 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf14      	ite	ne
 8008a64:	2301      	movne	r3, #1
 8008a66:	2300      	moveq	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 8008a6e:	6979      	ldr	r1, [r7, #20]
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fe8b 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008a76:	4603      	mov	r3, r0
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	32b4      	adds	r2, #180	; 0xb4
 8008a7c:	6814      	ldr	r4, [r2, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	4618      	mov	r0, r3
 8008a84:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008a86:	6978      	ldr	r0, [r7, #20]
 8008a88:	f014 f966 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008a8c:	6178      	str	r0, [r7, #20]
 8008a8e:	e7df      	b.n	8008a50 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8008a90:	bf00      	nop
 8008a92:	371c      	adds	r7, #28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}

08008a98 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3330      	adds	r3, #48	; 0x30
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f014 fb91 	bl	801d1d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3338      	adds	r3, #56	; 0x38
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f014 fa47 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01b      	beq.n	8008af8 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8008ac0:	68f9      	ldr	r1, [r7, #12]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fe62 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bf14      	ite	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	2300      	moveq	r3, #0
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fe56 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	32b8      	adds	r2, #184	; 0xb8
 8008ae6:	6812      	ldr	r2, [r2, #0]
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f014 f932 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	e7e0      	b.n	8008aba <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3330      	adds	r3, #48	; 0x30
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f014 fab8 	bl	801d082 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3338      	adds	r3, #56	; 0x38
 8008b16:	4618      	mov	r0, r3
 8008b18:	f014 fa15 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01a      	beq.n	8008b5a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fe30 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bf14      	ite	ne
 8008b32:	2301      	movne	r3, #1
 8008b34:	2300      	moveq	r3, #0
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d009      	beq.n	8008b50 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8008b3c:	68f9      	ldr	r1, [r7, #12]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fe24 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008b44:	4603      	mov	r3, r0
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	32bc      	adds	r2, #188	; 0xbc
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f014 f901 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	e7e1      	b.n	8008b1e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <_ZN11MockSupport5clearEv+0x1a>
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	3204      	adds	r2, #4
 8008b76:	6812      	ldr	r2, [r2, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 8008b8a:	f00e fe0d 	bl	80177a8 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3320      	adds	r3, #32
 8008b92:	4618      	mov	r0, r3
 8008b94:	f011 f937 	bl	8019e06 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3338      	adds	r3, #56	; 0x38
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f014 f9c1 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01a      	beq.n	8008c02 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 8008bcc:	68f9      	ldr	r1, [r7, #12]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fddc 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008bd4:	60b8      	str	r0, [r7, #8]
        if (support) {
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00d      	beq.n	8008bf8 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	339c      	adds	r3, #156	; 0x9c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	4798      	blx	r3
            delete support;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d004      	beq.n	8008bf8 <_ZN11MockSupport5clearEv+0x96>
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	3204      	adds	r2, #4
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f014 f8ad 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	e7e1      	b.n	8008bc6 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	3338      	adds	r3, #56	; 0x38
 8008c06:	4618      	mov	r0, r3
 8008c08:	f014 f915 	bl	801ce36 <_ZN18MockNamedValueList5clearEv>
}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	731a      	strb	r2, [r3, #12]
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
	...

08008c30 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b089      	sub	sp, #36	; 0x24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	333c      	adds	r3, #60	; 0x3c
 8008c40:	4618      	mov	r0, r3
 8008c42:	f002 f859 	bl	800acf8 <_ZNK12SimpleString7isEmptyEv>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f001 fcff 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 8008c54:	e021      	b.n	8008c9a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8008c5c:	f107 0318 	add.w	r3, r7, #24
 8008c60:	4910      	ldr	r1, [pc, #64]	; (8008ca4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fca1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8008c68:	f107 0310 	add.w	r3, r7, #16
 8008c6c:	f107 0218 	add.w	r2, r7, #24
 8008c70:	4621      	mov	r1, r4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 f8b3 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f107 0110 	add.w	r1, r7, #16
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f002 f8ac 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8008c86:	f107 0310 	add.w	r3, r7, #16
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 f845 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8008c90:	f107 0318 	add.w	r3, r7, #24
 8008c94:	4618      	mov	r0, r3
 8008c96:	f002 f840 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	3724      	adds	r7, #36	; 0x24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd90      	pop	{r4, r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08021660 	.word	0x08021660

08008ca8 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3314      	adds	r3, #20
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	2101      	movs	r1, #1
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
 8008cc2:	4603      	mov	r3, r0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3314      	adds	r3, #20
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b089      	sub	sp, #36	; 0x24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008d02:	f083 0301 	eor.w	r3, r3, #1
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8008d0c:	f010 fbf6 	bl	80194fc <_ZN23MockIgnoredExpectedCall8instanceEv>
 8008d10:	4603      	mov	r3, r0
 8008d12:	e041      	b.n	8008d98 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 fb1b 	bl	8009350 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 8008d1a:	22a5      	movs	r2, #165	; 0xa5
 8008d1c:	4920      	ldr	r1, [pc, #128]	; (8008da0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 8008d1e:	2070      	movs	r0, #112	; 0x70
 8008d20:	f7ff f880 	bl	8007e24 <_ZnwjPKci>
 8008d24:	4604      	mov	r4, r0
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f00f f8f3 	bl	8017f14 <_ZN23MockCheckedExpectedCallC1Ej>
 8008d2e:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	681c      	ldr	r4, [r3, #0]
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff ff75 	bl	8008c30 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 8008d46:	f107 0314 	add.w	r3, r7, #20
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	69f8      	ldr	r0, [r7, #28]
 8008d4e:	47a0      	blx	r4
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 ffe0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	7b1b      	ldrb	r3, [r3, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d013      	beq.n	8008d8a <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3310      	adds	r3, #16
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	6892      	ldr	r2, [r2, #8]
 8008d6e:	1c50      	adds	r0, r2, #1
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	6891      	ldr	r1, [r2, #8]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	440a      	add	r2, r1
 8008d78:	4601      	mov	r1, r0
 8008d7a:	69f8      	ldr	r0, [r7, #28]
 8008d7c:	4798      	blx	r3
        expectedCallOrder_ += amount;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	441a      	add	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3320      	adds	r3, #32
 8008d8e:	69f9      	ldr	r1, [r7, #28]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f010 fd89 	bl	80198a8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 8008d96:	69fb      	ldr	r3, [r7, #28]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3724      	adds	r7, #36	; 0x24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd90      	pop	{r4, r7, pc}
 8008da0:	08021664 	.word	0x08021664

08008da4 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8008da4:	b5b0      	push	{r4, r5, r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685d      	ldr	r5, [r3, #4]
 8008dba:	22b1      	movs	r2, #177	; 0xb1
 8008dbc:	490a      	ldr	r1, [pc, #40]	; (8008de8 <_ZN11MockSupport16createActualCallEv+0x44>)
 8008dbe:	202c      	movs	r0, #44	; 0x2c
 8008dc0:	f7ff f830 	bl	8007e24 <_ZnwjPKci>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3320      	adds	r3, #32
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f00c fbdb 	bl	801558c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bdb0      	pop	{r4, r5, r7, pc}
 8008de6:	bf00      	nop
 8008de8:	08021664 	.word	0x08021664

08008dec <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00d      	beq.n	8008e1c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3320      	adds	r3, #32
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f010 fd2a 	bl	8019860 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f083 0301 	eor.w	r3, r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8008e26:	b590      	push	{r4, r7, lr}
 8008e28:	b087      	sub	sp, #28
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8008e30:	f107 030c 	add.w	r3, r7, #12
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff fef9 	bl	8008c30 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d014      	beq.n	8008e70 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	33c4      	adds	r3, #196	; 0xc4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
        delete lastActualFunctionCall_;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d004      	beq.n	8008e6a <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	3204      	adds	r2, #4
 8008e64:	6812      	ldr	r2, [r2, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008e76:	f083 0301 	eor.w	r3, r3, #1
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8008e80:	f00e fcbe 	bl	8017800 <_ZN21MockIgnoredActualCall8instanceEv>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461c      	mov	r4, r3
 8008e88:	e02f      	b.n	8008eea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 8008e94:	f00e fc6e 	bl	8017774 <_ZN19MockActualCallTrace8instanceEv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	3208      	adds	r2, #8
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	f107 010c 	add.w	r1, r7, #12
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	4790      	blx	r2
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	e01e      	b.n	8008eea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 8008eac:	f107 030c 	add.w	r3, r7, #12
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff ff9a 	bl	8008dec <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 8008ebe:	f00e fc9f 	bl	8017800 <_ZN21MockIgnoredActualCall8instanceEv>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	461c      	mov	r4, r3
 8008ec6:	e010      	b.n	8008eea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	33c0      	adds	r3, #192	; 0xc0
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	4798      	blx	r3
 8008ed4:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3308      	adds	r3, #8
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f107 020c 	add.w	r2, r7, #12
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	6978      	ldr	r0, [r7, #20]
 8008ee6:	4798      	blx	r3
    return *call;
 8008ee8:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 ff13 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8008ef4:	4623      	mov	r3, r4
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd90      	pop	{r4, r7, pc}

08008efe <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3338      	adds	r3, #56	; 0x38
 8008f12:	4618      	mov	r0, r3
 8008f14:	f014 f817 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01a      	beq.n	8008f56 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fc32 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	bf14      	ite	ne
 8008f2e:	2301      	movne	r3, #1
 8008f30:	2300      	moveq	r3, #0
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d009      	beq.n	8008f4c <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8008f38:	68f9      	ldr	r1, [r7, #12]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fc26 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008f40:	4603      	mov	r3, r0
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	3290      	adds	r2, #144	; 0x90
 8008f46:	6812      	ldr	r2, [r2, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f013 ff03 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	e7e1      	b.n	8008f1a <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3338      	adds	r3, #56	; 0x38
 8008f72:	4618      	mov	r0, r3
 8008f74:	f013 ffe7 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01a      	beq.n	8008fb6 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8008f80:	68f9      	ldr	r1, [r7, #12]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fc02 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bf14      	ite	ne
 8008f8e:	2301      	movne	r3, #1
 8008f90:	2300      	moveq	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d009      	beq.n	8008fac <_ZN11MockSupport7disableEv+0x4e>
 8008f98:	68f9      	ldr	r1, [r7, #12]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fbf6 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	3284      	adds	r2, #132	; 0x84
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f013 fed3 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	e7e1      	b.n	8008f7a <_ZN11MockSupport7disableEv+0x1c>
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3338      	adds	r3, #56	; 0x38
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f013 ffb7 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01a      	beq.n	8009016 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fbd2 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bf14      	ite	ne
 8008fee:	2301      	movne	r3, #1
 8008ff0:	2300      	moveq	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d009      	beq.n	800900c <_ZN11MockSupport6enableEv+0x4e>
 8008ff8:	68f9      	ldr	r1, [r7, #12]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fbc6 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009000:	4603      	mov	r3, r0
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	3288      	adds	r2, #136	; 0x88
 8009006:	6812      	ldr	r2, [r2, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f013 fea3 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	e7e1      	b.n	8008fda <_ZN11MockSupport6enableEv+0x1c>
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3338      	adds	r3, #56	; 0x38
 8009036:	4618      	mov	r0, r3
 8009038:	f013 ff85 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d01b      	beq.n	800907c <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8009044:	68f9      	ldr	r1, [r7, #12]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fba0 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	bf14      	ite	ne
 8009052:	2301      	movne	r3, #1
 8009054:	2300      	moveq	r3, #0
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <_ZN11MockSupport7tracingEb+0x54>
 800905c:	68f9      	ldr	r1, [r7, #12]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fb94 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009064:	4603      	mov	r3, r0
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	328c      	adds	r2, #140	; 0x8c
 800906a:	6812      	ldr	r2, [r2, #0]
 800906c:	78f9      	ldrb	r1, [r7, #3]
 800906e:	4618      	mov	r0, r3
 8009070:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f013 fe70 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	e7e0      	b.n	800903e <_ZN11MockSupport7tracingEb+0x20>
}
 800907c:	bf00      	nop
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3320      	adds	r3, #32
 8009090:	4618      	mov	r0, r3
 8009092:	f010 fbc1 	bl	8019818 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 8009096:	4603      	mov	r3, r0
 8009098:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3338      	adds	r3, #56	; 0x38
 800909e:	4618      	mov	r0, r3
 80090a0:	f013 ff51 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 80090a4:	60b8      	str	r0, [r7, #8]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01f      	beq.n	80090ec <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fb6c 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bf14      	ite	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	2300      	moveq	r3, #0
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00e      	beq.n	80090e2 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fb60 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80090cc:	4603      	mov	r3, r0
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	3298      	adds	r2, #152	; 0x98
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	4790      	blx	r2
 80090d8:	4603      	mov	r3, r0
 80090da:	461a      	mov	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80090e2:	68b8      	ldr	r0, [r7, #8]
 80090e4:	f013 fe38 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 80090e8:	60b8      	str	r0, [r7, #8]
 80090ea:	e7dc      	b.n	80090a6 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bf14      	ite	ne
 80090f2:	2301      	movne	r3, #1
 80090f4:	2300      	moveq	r3, #0
 80090f6:	b2db      	uxtb	r3, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d010      	beq.n	8009132 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	33bc      	adds	r3, #188	; 0xbc
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4610      	mov	r0, r2
 8009120:	4798      	blx	r3
 8009122:	4603      	mov	r3, r0
 8009124:	f083 0301 	eor.w	r3, r3, #1
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 8009132:	2300      	movs	r3, #0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 8009138:	2300      	movs	r3, #0
 800913a:	e02a      	b.n	8009192 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3338      	adds	r3, #56	; 0x38
 8009140:	4618      	mov	r0, r3
 8009142:	f013 ff00 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d020      	beq.n	8009190 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fb1b 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00f      	beq.n	800917c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800915c:	68f9      	ldr	r1, [r7, #12]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fb14 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009164:	4603      	mov	r3, r0
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff ffca 	bl	8009100 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800916c:	4603      	mov	r3, r0
 800916e:	f083 0301 	eor.w	r3, r3, #1
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800917c:	2300      	movs	r3, #0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8009182:	2300      	movs	r3, #0
 8009184:	e005      	b.n	8009192 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f013 fde6 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	e7db      	b.n	8009148 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 8009190:	2301      	movs	r3, #1
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b092      	sub	sp, #72	; 0x48
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 80091a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091a6:	4618      	mov	r0, r3
 80091a8:	f010 fa2c 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f103 0220 	add.w	r2, r3, #32
 80091b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091b6:	4611      	mov	r1, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f010 fbf3 	bl	80199a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	3338      	adds	r3, #56	; 0x38
 80091c2:	4618      	mov	r0, r3
 80091c4:	f013 febf 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 80091c8:	6478      	str	r0, [r7, #68]	; 0x44
 80091ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01d      	beq.n	800920c <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 80091d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fada 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bf14      	ite	ne
 80091de:	2301      	movne	r3, #1
 80091e0:	2300      	moveq	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00c      	beq.n	8009202 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80091e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 face 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f103 0220 	add.w	r2, r3, #32
 80091f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f010 fbd1 	bl	80199a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009202:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009204:	f013 fda8 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8009208:	6478      	str	r0, [r7, #68]	; 0x44
 800920a:	e7de      	b.n	80091ca <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	330c      	adds	r3, #12
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4610      	mov	r0, r2
 800921c:	4798      	blx	r3
 800921e:	4601      	mov	r1, r0
 8009220:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4618      	mov	r0, r3
 800922a:	f011 f9f5 	bl	801a618 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	33c4      	adds	r3, #196	; 0xc4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f107 0208 	add.w	r2, r7, #8
 800923a:	4611      	mov	r1, r2
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009240:	f107 0308 	add.w	r3, r7, #8
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fe6d 	bl	8009f24 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800924a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800924e:	4618      	mov	r0, r3
 8009250:	f010 f9ec 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 8009254:	bf00      	nop
 8009256:	3748      	adds	r7, #72	; 0x48
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b092      	sub	sp, #72	; 0x48
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009264:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009268:	4618      	mov	r0, r3
 800926a:	f010 f9cb 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f103 0220 	add.w	r2, r3, #32
 8009274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f010 fb92 	bl	80199a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3338      	adds	r3, #56	; 0x38
 8009284:	4618      	mov	r0, r3
 8009286:	f013 fe5e 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 800928a:	6478      	str	r0, [r7, #68]	; 0x44
 800928c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01d      	beq.n	80092ce <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 8009292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa79 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00c      	beq.n	80092c4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 80092aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fa6d 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f103 0220 	add.w	r2, r3, #32
 80092b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80092bc:	4611      	mov	r1, r2
 80092be:	4618      	mov	r0, r3
 80092c0:	f010 fb70 	bl	80199a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80092c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80092c6:	f013 fd47 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 80092ca:	6478      	str	r0, [r7, #68]	; 0x44
 80092cc:	e7de      	b.n	800928c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4610      	mov	r0, r2
 80092de:	4798      	blx	r3
 80092e0:	4601      	mov	r1, r0
 80092e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80092e6:	f107 0308 	add.w	r3, r7, #8
 80092ea:	4618      	mov	r0, r3
 80092ec:	f011 fa38 	bl	801a760 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	33c4      	adds	r3, #196	; 0xc4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f107 0208 	add.w	r2, r7, #8
 80092fc:	4611      	mov	r1, r2
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009302:	f107 0308 	add.w	r3, r7, #8
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fe2e 	bl	8009f68 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800930c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009310:	4618      	mov	r0, r3
 8009312:	f010 f98b 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 8009316:	bf00      	nop
 8009318:	3748      	adds	r7, #72	; 0x48
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
    clear();
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	339c      	adds	r3, #156	; 0x9c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	4610      	mov	r0, r2
 8009346:	4798      	blx	r3
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 8009358:	f008 fd0a 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 800935c:	4603      	mov	r3, r0
 800935e:	4618      	mov	r0, r3
 8009360:	f007 fb78 	bl	8010a54 <_ZN10UtestShell10countCheckEv>
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d008      	beq.n	800938e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	33c4      	adds	r3, #196	; 0xc4
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4610      	mov	r0, r2
 800938c:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3338      	adds	r3, #56	; 0x38
 8009392:	4618      	mov	r0, r3
 8009394:	f013 fdd7 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d023      	beq.n	80093e8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 80093a0:	68f9      	ldr	r1, [r7, #12]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f9f2 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f9eb 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80093b6:	4603      	mov	r3, r0
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 80093c2:	2300      	movs	r3, #0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 80093c8:	68f9      	ldr	r1, [r7, #12]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f9de 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80093d0:	4603      	mov	r3, r0
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	32c4      	adds	r2, #196	; 0xc4
 80093d8:	6812      	ldr	r2, [r2, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f013 fcba 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	e7d8      	b.n	800939a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3320      	adds	r3, #32
 80093fc:	4618      	mov	r0, r3
 80093fe:	f010 f947 	bl	8019690 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 8009408:	2301      	movs	r3, #1
 800940a:	e027      	b.n	800945c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	3338      	adds	r3, #56	; 0x38
 8009410:	4618      	mov	r0, r3
 8009412:	f013 fd98 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01d      	beq.n	800945a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9b3 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00c      	beq.n	8009446 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800942c:	68f9      	ldr	r1, [r7, #12]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9ac 	bl	800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009434:	4603      	mov	r3, r0
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff ffda 	bl	80093f0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 8009446:	2300      	movs	r3, #0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800944c:	2301      	movs	r3, #1
 800944e:	e005      	b.n	800945c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f013 fc81 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	e7de      	b.n	8009418 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7ff ff7d 	bl	800936c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff fe44 	bl	8009100 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3398      	adds	r3, #152	; 0x98
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <_ZN11MockSupport17checkExpectationsEv+0x32>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff fe7d 	bl	800919a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ffa5 	bl	80093f0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff fed5 	bl	800925c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3338      	adds	r3, #56	; 0x38
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f013 fd0c 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf14      	ite	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	2300      	moveq	r3, #0
 80094da:	b2db      	uxtb	r3, r3
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3338      	adds	r3, #56	; 0x38
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f013 fcf7 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80094fa:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d111      	bne.n	8009526 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8009502:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009506:	490a      	ldr	r1, [pc, #40]	; (8009530 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 8009508:	2038      	movs	r0, #56	; 0x38
 800950a:	f7fe fc8b 	bl	8007e24 <_ZnwjPKci>
 800950e:	4604      	mov	r4, r0
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	4620      	mov	r0, r4
 8009514:	f011 fd6e 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8009518:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3338      	adds	r3, #56	; 0x38
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	4618      	mov	r0, r3
 8009522:	f013 fcab 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 8009526:	68fb      	ldr	r3, [r7, #12]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	bd90      	pop	{r4, r7, pc}
 8009530:	08021664 	.word	0x08021664

08009534 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff ffcd 	bl	80094e4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800954a:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3344      	adds	r3, #68	; 0x44
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	6978      	ldr	r0, [r7, #20]
 800955a:	4798      	blx	r3
}
 800955c:	bf00      	nop
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	3338      	adds	r3, #56	; 0x38
 8009574:	6879      	ldr	r1, [r7, #4]
 8009576:	4618      	mov	r0, r3
 8009578:	f013 fcb6 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800957c:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d111      	bne.n	80095a8 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8009584:	f107 0314 	add.w	r3, r7, #20
 8009588:	490b      	ldr	r1, [pc, #44]	; (80095b8 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800958a:	4618      	mov	r0, r3
 800958c:	f001 f80d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8009590:	f107 0314 	add.w	r3, r7, #20
 8009594:	4619      	mov	r1, r3
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f011 fd2c 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 fbba 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80095a6:	e003      	b.n	80095b0 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 80095a8:	69f9      	ldr	r1, [r7, #28]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7ff f8a2 	bl	80086f4 <_ZN14MockNamedValueC1ERKS_>
}
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	3720      	adds	r7, #32
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	0802165c 	.word	0x0802165c

080095bc <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 80095c6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80095ca:	4927      	ldr	r1, [pc, #156]	; (8009668 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 80095cc:	2048      	movs	r0, #72	; 0x48
 80095ce:	f7fe fc29 	bl	8007e24 <_ZnwjPKci>
 80095d2:	4604      	mov	r4, r0
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	4620      	mov	r0, r4
 80095d8:	f7ff f8f8 	bl	80087cc <_ZN11MockSupportC1ERK12SimpleString>
 80095dc:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	33a4      	adds	r3, #164	; 0xa4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6952      	ldr	r2, [r2, #20]
 80095ea:	4611      	mov	r1, r2
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3390      	adds	r3, #144	; 0x90
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800960c:	f083 0301 	eor.w	r3, r3, #1
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3384      	adds	r3, #132	; 0x84
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	7b1b      	ldrb	r3, [r3, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	4798      	blx	r3

    newMock->tracing(tracing_);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	338c      	adds	r3, #140	; 0x8c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8009644:	4611      	mov	r1, r2
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	33b8      	adds	r3, #184	; 0xb8
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	3230      	adds	r2, #48	; 0x30
 8009656:	4611      	mov	r1, r2
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	4798      	blx	r3
    return newMock;
 800965c:	68fb      	ldr	r3, [r7, #12]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	bd90      	pop	{r4, r7, pc}
 8009666:	bf00      	nop
 8009668:	08021664 	.word	0x08021664

0800966c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800966c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800966e:	b0ab      	sub	sp, #172	; 0xac
 8009670:	af04      	add	r7, sp, #16
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009676:	f107 0308 	add.w	r3, r7, #8
 800967a:	4941      	ldr	r1, [pc, #260]	; (8009780 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800967c:	4618      	mov	r0, r3
 800967e:	f000 ff94 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 8009682:	f107 0308 	add.w	r3, r7, #8
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	4618      	mov	r0, r3
 800968a:	f001 fbc3 	bl	800ae14 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800968e:	f107 0308 	add.w	r3, r7, #8
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff10 	bl	80094ba <_ZN11MockSupport7hasDataERK12SimpleString>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d048      	beq.n	8009732 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 80096a0:	f008 fb66 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80096a4:	4604      	mov	r4, r0
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	3324      	adds	r3, #36	; 0x24
 80096aa:	681d      	ldr	r5, [r3, #0]
 80096ac:	f107 0318 	add.w	r3, r7, #24
 80096b0:	f107 0208 	add.w	r2, r7, #8
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff ff54 	bl	8009564 <_ZN11MockSupport7getDataERK12SimpleString>
 80096bc:	f107 0310 	add.w	r3, r7, #16
 80096c0:	f107 0218 	add.w	r2, r7, #24
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f011 ff61 	bl	801b58e <_ZNK14MockNamedValue7getTypeEv>
 80096cc:	f107 0310 	add.w	r3, r7, #16
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 faf5 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 80096d6:	4606      	mov	r6, r0
 80096d8:	f008 fb5a 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80096dc:	4603      	mov	r3, r0
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	f240 13bd 	movw	r3, #445	; 0x1bd
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	4632      	mov	r2, r6
 80096ee:	4926      	ldr	r1, [pc, #152]	; (8009788 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 80096f0:	4620      	mov	r0, r4
 80096f2:	47a8      	blx	r5
 80096f4:	f107 0310 	add.w	r3, r7, #16
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fb0e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80096fe:	f107 0318 	add.w	r3, r7, #24
 8009702:	4618      	mov	r0, r3
 8009704:	f011 fca0 	bl	801b048 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8009708:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800970c:	f107 0208 	add.w	r2, r7, #8
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff ff26 	bl	8009564 <_ZN11MockSupport7getDataERK12SimpleString>
 8009718:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800971c:	4618      	mov	r0, r3
 800971e:	f012 fa4f 	bl	801bbc0 <_ZNK14MockNamedValue16getObjectPointerEv>
 8009722:	4604      	mov	r4, r0
 8009724:	bf00      	nop
 8009726:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800972a:	4618      	mov	r0, r3
 800972c:	f011 fc8c 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009730:	e01b      	b.n	800976a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ff41 	bl	80095bc <_ZN11MockSupport5cloneERK12SimpleString>
 800973a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800973e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009742:	4911      	ldr	r1, [pc, #68]	; (8009788 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009744:	4618      	mov	r0, r3
 8009746:	f000 ff30 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800974a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800974e:	f107 0108 	add.w	r1, r7, #8
 8009752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff feec 	bl	8009534 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800975c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009760:	4618      	mov	r0, r3
 8009762:	f001 fada 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return newMock;
 8009766:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800976a:	f107 0308 	add.w	r3, r7, #8
 800976e:	4618      	mov	r0, r3
 8009770:	f001 fad3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8009774:	4623      	mov	r3, r4
}
 8009776:	4618      	mov	r0, r3
 8009778:	379c      	adds	r7, #156	; 0x9c
 800977a:	46bd      	mov	sp, r7
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977e:	bf00      	nop
 8009780:	0802167c 	.word	0x0802167c
 8009784:	08021664 	.word	0x08021664
 8009788:	0802169c 	.word	0x0802169c

0800978c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800978c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009790:	b08b      	sub	sp, #44	; 0x2c
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 8009798:	2500      	movs	r5, #0
 800979a:	2600      	movs	r6, #0
 800979c:	f107 0308 	add.w	r3, r7, #8
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f013 fb26 	bl	801cdf4 <_ZNK22MockNamedValueListNode7getTypeEv>
 80097a8:	f04f 0801 	mov.w	r8, #1
 80097ac:	f107 0310 	add.w	r3, r7, #16
 80097b0:	492e      	ldr	r1, [pc, #184]	; (800986c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fef9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80097b8:	f04f 0901 	mov.w	r9, #1
 80097bc:	f107 0210 	add.w	r2, r7, #16
 80097c0:	f107 0308 	add.w	r3, r7, #8
 80097c4:	4611      	mov	r1, r2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fab3 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d01a      	beq.n	8009808 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 80097d2:	f107 0318 	add.w	r3, r7, #24
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f013 faf8 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 80097de:	2501      	movs	r5, #1
 80097e0:	f107 0320 	add.w	r3, r7, #32
 80097e4:	4922      	ldr	r1, [pc, #136]	; (8009870 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fedf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80097ec:	2601      	movs	r6, #1
 80097ee:	f107 0220 	add.w	r2, r7, #32
 80097f2:	f107 0318 	add.w	r3, r7, #24
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 ff54 	bl	800a6a6 <_ZNK12SimpleString8containsERKS_>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009804:	2401      	movs	r4, #1
 8009806:	e000      	b.n	800980a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 8009808:	2400      	movs	r4, #0
 800980a:	2e00      	cmp	r6, #0
 800980c:	d004      	beq.n	8009818 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800980e:	f107 0320 	add.w	r3, r7, #32
 8009812:	4618      	mov	r0, r3
 8009814:	f001 fa81 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8009818:	2d00      	cmp	r5, #0
 800981a:	d004      	beq.n	8009826 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800981c:	f107 0318 	add.w	r3, r7, #24
 8009820:	4618      	mov	r0, r3
 8009822:	f001 fa7a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8009826:	f1b9 0f00 	cmp.w	r9, #0
 800982a:	d004      	beq.n	8009836 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800982c:	f107 0310 	add.w	r3, r7, #16
 8009830:	4618      	mov	r0, r3
 8009832:	f001 fa72 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8009836:	f1b8 0f00 	cmp.w	r8, #0
 800983a:	d004      	beq.n	8009846 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fa6a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8009846:	2c00      	cmp	r4, #0
 8009848:	d00a      	beq.n	8009860 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800984a:	6838      	ldr	r0, [r7, #0]
 800984c:	f013 fa90 	bl	801cd70 <_ZN22MockNamedValueListNode4itemEv>
 8009850:	4603      	mov	r3, r0
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	32a0      	adds	r2, #160	; 0xa0
 8009856:	6812      	ldr	r2, [r2, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	4790      	blx	r2
 800985c:	4603      	mov	r3, r0
 800985e:	e000      	b.n	8009862 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	372c      	adds	r7, #44	; 0x2c
 8009866:	46bd      	mov	sp, r7
 8009868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800986c:	0802169c 	.word	0x0802169c
 8009870:	0802167c 	.word	0x0802167c

08009874 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <_ZN11MockSupport11returnValueEv+0x28>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3354      	adds	r3, #84	; 0x54
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	4610      	mov	r0, r2
 8009898:	4798      	blx	r3
 800989a:	e010      	b.n	80098be <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800989c:	f107 0308 	add.w	r3, r7, #8
 80098a0:	4909      	ldr	r1, [pc, #36]	; (80098c8 <_ZN11MockSupport11returnValueEv+0x54>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fe81 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80098a8:	f107 0308 	add.w	r3, r7, #8
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f011 fba0 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 80098b4:	f107 0308 	add.w	r3, r7, #8
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 fa2e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	0802165c 	.word	0x0802165c

080098cc <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b091      	sub	sp, #68	; 0x44
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3320      	adds	r3, #32
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f107 0208 	add.w	r2, r7, #8
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4610      	mov	r0, r2
 80098e4:	4798      	blx	r3
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f011 fe5e 	bl	801b5ac <_ZNK14MockNamedValue12getBoolValueEv>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461c      	mov	r4, r3
 80098f4:	bf00      	nop
 80098f6:	f107 0308 	add.w	r3, r7, #8
 80098fa:	4618      	mov	r0, r3
 80098fc:	f011 fba4 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009900:	4623      	mov	r3, r4
}
 8009902:	4618      	mov	r0, r3
 8009904:	3744      	adds	r7, #68	; 0x44
 8009906:	46bd      	mov	sp, r7
 8009908:	bd90      	pop	{r4, r7, pc}

0800990a <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800990a:	b590      	push	{r4, r7, lr}
 800990c:	b091      	sub	sp, #68	; 0x44
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3320      	adds	r3, #32
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f107 0208 	add.w	r2, r7, #8
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	f107 0308 	add.w	r3, r7, #8
 8009928:	4618      	mov	r0, r3
 800992a:	f011 fe67 	bl	801b5fc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800992e:	4604      	mov	r4, r0
 8009930:	bf00      	nop
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4618      	mov	r0, r3
 8009938:	f011 fb86 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 800993c:	4623      	mov	r3, r4
}
 800993e:	4618      	mov	r0, r3
 8009940:	3744      	adds	r7, #68	; 0x44
 8009942:	46bd      	mov	sp, r7
 8009944:	bd90      	pop	{r4, r7, pc}

08009946 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 8009946:	b590      	push	{r4, r7, lr}
 8009948:	b091      	sub	sp, #68	; 0x44
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3320      	adds	r3, #32
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f107 0208 	add.w	r2, r7, #8
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	f107 0308 	add.w	r3, r7, #8
 8009964:	4618      	mov	r0, r3
 8009966:	f011 fe99 	bl	801b69c <_ZNK14MockNamedValue11getIntValueEv>
 800996a:	4604      	mov	r4, r0
 800996c:	bf00      	nop
 800996e:	f107 0308 	add.w	r3, r7, #8
 8009972:	4618      	mov	r0, r3
 8009974:	f011 fb68 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009978:	4623      	mov	r3, r4
}
 800997a:	4618      	mov	r0, r3
 800997c:	3744      	adds	r7, #68	; 0x44
 800997e:	46bd      	mov	sp, r7
 8009980:	bd90      	pop	{r4, r7, pc}

08009982 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	331c      	adds	r3, #28
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	4798      	blx	r3
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	335c      	adds	r3, #92	; 0x5c
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	e000      	b.n	80099b0 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 80099ae:	683b      	ldr	r3, [r7, #0]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	331c      	adds	r3, #28
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	4798      	blx	r3
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3368      	adds	r3, #104	; 0x68
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	4798      	blx	r3
 80099e2:	eeb0 7a40 	vmov.f32	s14, s0
 80099e6:	eef0 7a60 	vmov.f32	s15, s1
 80099ea:	e001      	b.n	80099f0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 80099ec:	ed97 7b00 	vldr	d7, [r7]
}
 80099f0:	eeb0 0a47 	vmov.f32	s0, s14
 80099f4:	eef0 0a67 	vmov.f32	s1, s15
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	331c      	adds	r3, #28
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3338      	adds	r3, #56	; 0x38
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	e000      	b.n	8009a2c <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 8009a2a:	683b      	ldr	r3, [r7, #0]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	331c      	adds	r3, #28
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	4798      	blx	r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d007      	beq.n	8009a62 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3324      	adds	r3, #36	; 0x24
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
 8009a5e:	4603      	mov	r3, r0
 8009a60:	e000      	b.n	8009a64 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	331c      	adds	r3, #28
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	4798      	blx	r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	332c      	adds	r3, #44	; 0x2c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	4798      	blx	r3
 8009a94:	4603      	mov	r3, r0
 8009a96:	e000      	b.n	8009a9a <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 8009a98:	683b      	ldr	r3, [r7, #0]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	331c      	adds	r3, #28
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	4798      	blx	r3
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d007      	beq.n	8009ace <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3334      	adds	r3, #52	; 0x34
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	e000      	b.n	8009ad0 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 8009ace:	683b      	ldr	r3, [r7, #0]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	331c      	adds	r3, #28
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	4798      	blx	r3
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3340      	adds	r3, #64	; 0x40
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
 8009b00:	4603      	mov	r3, r0
 8009b02:	e000      	b.n	8009b06 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 8009b04:	683b      	ldr	r3, [r7, #0]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 8009b0e:	b590      	push	{r4, r7, lr}
 8009b10:	b091      	sub	sp, #68	; 0x44
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3320      	adds	r3, #32
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f107 0208 	add.w	r2, r7, #8
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f011 fddd 	bl	801b6ec <_ZNK14MockNamedValue15getLongIntValueEv>
 8009b32:	4604      	mov	r4, r0
 8009b34:	bf00      	nop
 8009b36:	f107 0308 	add.w	r3, r7, #8
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f011 fa84 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009b40:	4623      	mov	r3, r4
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3744      	adds	r7, #68	; 0x44
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}

08009b4a <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 8009b4a:	b590      	push	{r4, r7, lr}
 8009b4c:	b091      	sub	sp, #68	; 0x44
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3320      	adds	r3, #32
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f107 0208 	add.w	r2, r7, #8
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
 8009b64:	f107 0308 	add.w	r3, r7, #8
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f011 fe21 	bl	801b7b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8009b6e:	4604      	mov	r4, r0
 8009b70:	bf00      	nop
 8009b72:	f107 0308 	add.w	r3, r7, #8
 8009b76:	4618      	mov	r0, r3
 8009b78:	f011 fa66 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009b7c:	4623      	mov	r3, r4
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3744      	adds	r7, #68	; 0x44
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd90      	pop	{r4, r7, pc}
	...

08009b88 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 8009b88:	b5b0      	push	{r4, r5, r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8009b92:	f008 f8ed 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8009b96:	4604      	mov	r4, r0
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	3368      	adds	r3, #104	; 0x68
 8009b9c:	681d      	ldr	r5, [r3, #0]
 8009b9e:	f008 f8f7 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	f240 2345 	movw	r3, #581	; 0x245
 8009baa:	4a06      	ldr	r2, [pc, #24]	; (8009bc4 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 8009bac:	4906      	ldr	r1, [pc, #24]	; (8009bc8 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 8009bae:	4620      	mov	r0, r4
 8009bb0:	47a8      	blx	r5
    return cpputest_longlong(0);
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7fe fd2f 	bl	8008618 <_ZN17cpputest_longlongC1Ei>
}
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	08021664 	.word	0x08021664
 8009bc8:	080216a8 	.word	0x080216a8

08009bcc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 8009bcc:	b5b0      	push	{r4, r5, r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8009bd6:	f008 f8cb 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8009bda:	4604      	mov	r4, r0
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	3368      	adds	r3, #104	; 0x68
 8009be0:	681d      	ldr	r5, [r3, #0]
 8009be2:	f008 f8d5 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009be6:	4603      	mov	r3, r0
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	f240 234b 	movw	r3, #587	; 0x24b
 8009bee:	4a06      	ldr	r2, [pc, #24]	; (8009c08 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 8009bf0:	4906      	ldr	r1, [pc, #24]	; (8009c0c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f7fe fd19 	bl	8008630 <_ZN18cpputest_ulonglongC1Ei>
}
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bdb0      	pop	{r4, r5, r7, pc}
 8009c06:	bf00      	nop
 8009c08:	08021664 	.word	0x08021664
 8009c0c:	080216c8 	.word	0x080216c8

08009c10 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 8009c10:	b5b0      	push	{r4, r5, r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8009c20:	f008 f8a6 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8009c24:	4604      	mov	r4, r0
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	3368      	adds	r3, #104	; 0x68
 8009c2a:	681d      	ldr	r5, [r3, #0]
 8009c2c:	f008 f8b0 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009c30:	4603      	mov	r3, r0
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	f240 2351 	movw	r3, #593	; 0x251
 8009c38:	4a06      	ldr	r2, [pc, #24]	; (8009c54 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8009c3a:	4907      	ldr	r1, [pc, #28]	; (8009c58 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	47a8      	blx	r5
    return defaultValue;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	461a      	mov	r2, r3
 8009c44:	463b      	mov	r3, r7
 8009c46:	cb03      	ldmia	r3!, {r0, r1}
 8009c48:	6010      	str	r0, [r2, #0]
 8009c4a:	6051      	str	r1, [r2, #4]
}
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bdb0      	pop	{r4, r5, r7, pc}
 8009c54:	08021664 	.word	0x08021664
 8009c58:	080216a8 	.word	0x080216a8

08009c5c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 8009c5c:	b5b0      	push	{r4, r5, r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4639      	mov	r1, r7
 8009c68:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8009c6c:	f008 f880 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8009c70:	4604      	mov	r4, r0
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	3368      	adds	r3, #104	; 0x68
 8009c76:	681d      	ldr	r5, [r3, #0]
 8009c78:	f008 f88a 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	f240 2357 	movw	r3, #599	; 0x257
 8009c84:	4a06      	ldr	r2, [pc, #24]	; (8009ca0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8009c86:	4907      	ldr	r1, [pc, #28]	; (8009ca4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8009c88:	4620      	mov	r0, r4
 8009c8a:	47a8      	blx	r5
    return defaultValue;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	463b      	mov	r3, r7
 8009c92:	cb03      	ldmia	r3!, {r0, r1}
 8009c94:	6010      	str	r0, [r2, #0]
 8009c96:	6051      	str	r1, [r2, #4]
}
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009ca0:	08021664 	.word	0x08021664
 8009ca4:	080216c8 	.word	0x080216c8

08009ca8 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b091      	sub	sp, #68	; 0x44
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3320      	adds	r3, #32
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f107 0208 	add.w	r2, r7, #8
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4798      	blx	r3
 8009cc2:	f107 0308 	add.w	r3, r7, #8
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f011 fea6 	bl	801ba18 <_ZNK14MockNamedValue14getStringValueEv>
 8009ccc:	4604      	mov	r4, r0
 8009cce:	bf00      	nop
 8009cd0:	f107 0308 	add.w	r3, r7, #8
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f011 f9b7 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009cda:	4623      	mov	r3, r4
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3744      	adds	r7, #68	; 0x44
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd90      	pop	{r4, r7, pc}

08009ce4 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	ed2d 8b02 	vpush	{d8}
 8009cea:	b090      	sub	sp, #64	; 0x40
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3320      	adds	r3, #32
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f107 0208 	add.w	r2, r7, #8
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4610      	mov	r0, r2
 8009d00:	4798      	blx	r3
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f011 fe2a 	bl	801b960 <_ZNK14MockNamedValue14getDoubleValueEv>
 8009d0c:	eeb0 8a40 	vmov.f32	s16, s0
 8009d10:	eef0 8a60 	vmov.f32	s17, s1
 8009d14:	bf00      	nop
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f011 f994 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009d20:	eeb0 7a48 	vmov.f32	s14, s16
 8009d24:	eef0 7a68 	vmov.f32	s15, s17
}
 8009d28:	eeb0 0a47 	vmov.f32	s0, s14
 8009d2c:	eef0 0a67 	vmov.f32	s1, s15
 8009d30:	3740      	adds	r7, #64	; 0x40
 8009d32:	46bd      	mov	sp, r7
 8009d34:	ecbd 8b02 	vpop	{d8}
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	331c      	adds	r3, #28
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	336c      	adds	r3, #108	; 0x6c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	4798      	blx	r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	e000      	b.n	8009d68 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 8009d66:	683b      	ldr	r3, [r7, #0]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	331c      	adds	r3, #28
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3378      	adds	r3, #120	; 0x78
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
 8009d98:	4603      	mov	r3, r0
 8009d9a:	e000      	b.n	8009d9e <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 8009d9c:	683b      	ldr	r3, [r7, #0]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	331c      	adds	r3, #28
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d007      	beq.n	8009dd2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3380      	adds	r3, #128	; 0x80
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
 8009dce:	4603      	mov	r3, r0
 8009dd0:	e000      	b.n	8009dd4 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 8009dd2:	683b      	ldr	r3, [r7, #0]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 8009ddc:	b590      	push	{r4, r7, lr}
 8009dde:	b091      	sub	sp, #68	; 0x44
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3320      	adds	r3, #32
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f107 0208 	add.w	r2, r7, #8
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4610      	mov	r0, r2
 8009df4:	4798      	blx	r3
 8009df6:	f107 0308 	add.w	r3, r7, #8
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f011 fe34 	bl	801ba68 <_ZNK14MockNamedValue15getPointerValueEv>
 8009e00:	4604      	mov	r4, r0
 8009e02:	bf00      	nop
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f011 f91d 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009e0e:	4623      	mov	r3, r4
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3744      	adds	r7, #68	; 0x44
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}

08009e18 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b091      	sub	sp, #68	; 0x44
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3320      	adds	r3, #32
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f107 0208 	add.w	r2, r7, #8
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4798      	blx	r3
 8009e32:	f107 0308 	add.w	r3, r7, #8
 8009e36:	4618      	mov	r0, r3
 8009e38:	f011 fe3e 	bl	801bab8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	bf00      	nop
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	4618      	mov	r0, r3
 8009e46:	f011 f8ff 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009e4a:	4623      	mov	r3, r4
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3744      	adds	r7, #68	; 0x44
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd90      	pop	{r4, r7, pc}

08009e54 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 8009e54:	b590      	push	{r4, r7, lr}
 8009e56:	b091      	sub	sp, #68	; 0x44
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3320      	adds	r3, #32
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f107 0208 	add.w	r2, r7, #8
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4798      	blx	r3
 8009e6e:	f107 0308 	add.w	r3, r7, #8
 8009e72:	4618      	mov	r0, r3
 8009e74:	f011 fe48 	bl	801bb08 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8009e78:	4604      	mov	r4, r0
 8009e7a:	bf00      	nop
 8009e7c:	f107 0308 	add.w	r3, r7, #8
 8009e80:	4618      	mov	r0, r3
 8009e82:	f011 f8e1 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8009e86:	4623      	mov	r3, r4
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3744      	adds	r7, #68	; 0x44
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd90      	pop	{r4, r7, pc}

08009e90 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <_ZN11MockSupport14hasReturnValueEv+0x26>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3350      	adds	r3, #80	; 0x50
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4610      	mov	r0, r2
 8009eb0:	4798      	blx	r3
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	e000      	b.n	8009eb8 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <_Z41__static_initialization_and_destruction_0ii>:
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d115      	bne.n	8009efc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d110      	bne.n	8009efc <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	490f      	ldr	r1, [pc, #60]	; (8009f1c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fb62 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	4619      	mov	r1, r3
 8009eec:	480c      	ldr	r0, [pc, #48]	; (8009f20 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8009eee:	f7fe fc6d 	bl	80087cc <_ZN11MockSupportC1ERK12SimpleString>
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 ff0f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d102      	bne.n	8009f12 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8009f0c:	4804      	ldr	r0, [pc, #16]	; (8009f20 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8009f0e:	f7fe fca7 	bl	8008860 <_ZN11MockSupportD1Ev>
}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	0802165c 	.word	0x0802165c
 8009f20:	200006b0 	.word	0x200006b0

08009f24 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	4a05      	ldr	r2, [pc, #20]	; (8009f44 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fbbb 	bl	80086b0 <_ZN11MockFailureD1Ev>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	08024b80 	.word	0x08024b80

08009f48 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff ffe7 	bl	8009f24 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 8009f56:	2134      	movs	r1, #52	; 0x34
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fd ff77 	bl	8007e4c <_ZdlPvj>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	4a05      	ldr	r2, [pc, #20]	; (8009f88 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fb99 	bl	80086b0 <_ZN11MockFailureD1Ev>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4618      	mov	r0, r3
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	08024b54 	.word	0x08024b54

08009f8c <_ZN20MockCallOrderFailureD0Ev>:
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ffe7 	bl	8009f68 <_ZN20MockCallOrderFailureD1Ev>
 8009f9a:	2134      	movs	r1, #52	; 0x34
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7fd ff55 	bl	8007e4c <_ZdlPvj>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	f7ff ff83 	bl	8009ec0 <_Z41__static_initialization_and_destruction_0ii>
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f7ff ff7b 	bl	8009ec0 <_Z41__static_initialization_and_destruction_0ii>
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <_ZN11SimpleMutexC1Ev+0x20>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4798      	blx	r3
 8009fda:	4602      	mov	r2, r0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
}
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200000ec 	.word	0x200000ec

08009ff0 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8009ff8:	4b05      	ldr	r3, [pc, #20]	; (800a010 <_ZN11SimpleMutexD1Ev+0x20>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
}
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	200000f8 	.word	0x200000f8

0800a014 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800a01c:	4b04      	ldr	r3, [pc, #16]	; (800a030 <_ZN11SimpleMutex4LockEv+0x1c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6812      	ldr	r2, [r2, #0]
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	200000f0 	.word	0x200000f0

0800a034 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800a03c:	4b04      	ldr	r3, [pc, #16]	; (800a050 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
}
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	200000f4 	.word	0x200000f4

0800a054 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff ffd3 	bl	800a014 <_ZN11SimpleMutex4LockEv>
}
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff ffd5 	bl	800a034 <_ZN11SimpleMutex6UnlockEv>
}
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d103      	bne.n	800a0a8 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800a0a0:	f003 fd7a 	bl	800db98 <_Z24defaultNewArrayAllocatorv>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	e001      	b.n	800a0ac <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800a0a8:	4b01      	ldr	r3, [pc, #4]	; (800a0b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	200006f8 	.word	0x200006f8

0800a0b4 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800a0c0:	f7ff ffe8 	bl	800a094 <_ZN12SimpleString18getStringAllocatorEv>
 800a0c4:	6803      	ldr	r3, [r0, #0]
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	681c      	ldr	r4, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	68f9      	ldr	r1, [r7, #12]
 800a0d0:	47a0      	blx	r4
 800a0d2:	4603      	mov	r3, r0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd90      	pop	{r4, r7, pc}

0800a0dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800a0dc:	b590      	push	{r4, r7, lr}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800a0ea:	f7ff ffd3 	bl	800a094 <_ZN12SimpleString18getStringAllocatorEv>
 800a0ee:	6803      	ldr	r3, [r0, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	681c      	ldr	r4, [r3, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	47a0      	blx	r4
}
 800a100:	bf00      	nop
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	bd90      	pop	{r4, r7, pc}

0800a108 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800a110:	2284      	movs	r2, #132	; 0x84
 800a112:	4906      	ldr	r1, [pc, #24]	; (800a12c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800a114:	2001      	movs	r0, #1
 800a116:	f7ff ffcd 	bl	800a0b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a11a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
    return empty;
 800a122:	68fb      	ldr	r3, [r7, #12]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	080216f4 	.word	0x080216f4

0800a130 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 f809 	bl	800b154 <_ZN12SimpleString7isSpaceEc>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <_ZN12SimpleString4AtoUEPKc+0x20>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3301      	adds	r3, #1
 800a14c:	607b      	str	r3, [r7, #4]
 800a14e:	e7f3      	b.n	800a138 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 ffe7 	bl	800b12c <_ZN12SimpleString7isDigitEc>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b2f      	cmp	r3, #47	; 0x2f
 800a16a:	d901      	bls.n	800a170 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a16c:	2301      	movs	r3, #1
 800a16e:	e000      	b.n	800a172 <_ZN12SimpleString4AtoUEPKc+0x42>
 800a170:	2300      	movs	r3, #0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d010      	beq.n	800a198 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	3b30      	subs	r3, #48	; 0x30
 800a18e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3301      	adds	r3, #1
 800a194:	607b      	str	r3, [r7, #4]
 800a196:	e7dd      	b.n	800a154 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800a198:	68fb      	ldr	r3, [r7, #12]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 ffd0 	bl	800b154 <_ZN12SimpleString7isSpaceEc>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <_ZN12SimpleString4AtoIEPKc+0x20>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	e7f3      	b.n	800a1aa <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	2b2d      	cmp	r3, #45	; 0x2d
 800a1cc:	d002      	beq.n	800a1d4 <_ZN12SimpleString4AtoIEPKc+0x32>
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	2b2b      	cmp	r3, #43	; 0x2b
 800a1d2:	d102      	bne.n	800a1da <_ZN12SimpleString4AtoIEPKc+0x38>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 ffa2 	bl	800b12c <_ZN12SimpleString7isDigitEc>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00f      	beq.n	800a20e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	3b30      	subs	r3, #48	; 0x30
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3301      	adds	r3, #1
 800a20a:	607b      	str	r3, [r7, #4]
 800a20c:	e7e7      	b.n	800a1de <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800a20e:	7afb      	ldrb	r3, [r7, #11]
 800a210:	2b2d      	cmp	r3, #45	; 0x2d
 800a212:	d102      	bne.n	800a21a <_ZN12SimpleString4AtoIEPKc+0x78>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	425b      	negs	r3, r3
 800a218:	e000      	b.n	800a21c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800a21a:	68fb      	ldr	r3, [r7, #12]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00c      	beq.n	800a250 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d106      	bne.n	800a250 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3301      	adds	r3, #1
 800a246:	607b      	str	r3, [r7, #4]
       ++s2;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800a24e:	e7ee      	b.n	800a22e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	461a      	mov	r2, r3
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	1ad3      	subs	r3, r2, r3
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800a270:	f04f 33ff 	mov.w	r3, #4294967295
 800a274:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3301      	adds	r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf14      	ite	ne
 800a288:	2301      	movne	r3, #1
 800a28a:	2300      	moveq	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d000      	beq.n	800a294 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800a292:	e7f0      	b.n	800a276 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800a294:	68fb      	ldr	r3, [r7, #12]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	60b9      	str	r1, [r7, #8]
 800a2ac:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d013      	beq.n	800a2dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00f      	beq.n	800a2dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	781a      	ldrb	r2, [r3, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d109      	bne.n	800a2dc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	607b      	str	r3, [r7, #4]
        ++s1;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
        ++s2;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800a2da:	e7e8      	b.n	800a2ae <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d006      	beq.n	800a2f0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	e000      	b.n	800a2f2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b087      	sub	sp, #28
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	e01e      	b.n	800a35c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3b01      	subs	r3, #1
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00a      	beq.n	800a35a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	3301      	adds	r3, #1
 800a348:	60bb      	str	r3, [r7, #8]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3301      	adds	r3, #1
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	781a      	ldrb	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800a358:	e7e5      	b.n	800a326 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800a35a:	697b      	ldr	r3, [r7, #20]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	e01b      	b.n	800a3b6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d016      	beq.n	800a3b4 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800a386:	6838      	ldr	r0, [r7, #0]
 800a388:	f7ff ff6e 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800a38c:	4603      	mov	r3, r0
 800a38e:	461a      	mov	r2, r3
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff ff85 	bl	800a2a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bf0c      	ite	eq
 800a39e:	2301      	moveq	r3, #1
 800a3a0:	2300      	movne	r3, #0
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	e004      	b.n	800a3b6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	607b      	str	r3, [r7, #4]
 800a3b2:	e7e4      	b.n	800a37e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b082      	sub	sp, #8
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fed9 	bl	800b182 <_ZN12SimpleString7isUpperEc>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <_ZN12SimpleString7ToLowerEc+0x20>
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	3320      	adds	r3, #32
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	e000      	b.n	800a3e0 <_ZN12SimpleString7ToLowerEc+0x22>
 800a3de:	79fb      	ldrb	r3, [r7, #7]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	613b      	str	r3, [r7, #16]

    while (n--)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	1e5a      	subs	r2, r3, #1
 800a400:	607a      	str	r2, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	bf14      	ite	ne
 800a406:	2301      	movne	r3, #1
 800a408:	2300      	moveq	r3, #0
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d013      	beq.n	800a438 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	781a      	ldrb	r2, [r3, #0]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d006      	beq.n	800a42a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	e007      	b.n	800a43a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	3301      	adds	r3, #1
 800a42e:	617b      	str	r3, [r7, #20]
            ++p2;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	3301      	adds	r3, #1
 800a434:	613b      	str	r3, [r7, #16]
    while (n--)
 800a436:	e7e1      	b.n	800a3fc <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
	...

0800a448 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00d      	beq.n	800a474 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6859      	ldr	r1, [r3, #4]
 800a460:	23ee      	movs	r3, #238	; 0xee
 800a462:	4a06      	ldr	r2, [pc, #24]	; (800a47c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800a464:	f7ff fe3a 	bl	800a0dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	605a      	str	r2, [r3, #4]
    }
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	080216f4 	.word	0x080216f4

0800a480 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff ffdd 	bl	800a448 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff fe37 	bl	800a108 <_ZNK12SimpleString14getEmptyStringEv>
 800a49a:	4602      	mov	r2, r0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	601a      	str	r2, [r3, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff ffc7 	bl	800a448 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68b8      	ldr	r0, [r7, #8]
 800a4c8:	f000 fe12 	bl	800b0f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	601a      	str	r2, [r3, #0]
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff ffae 	bl	800a448 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f240 1209 	movw	r2, #265	; 0x109
 800a4fa:	4907      	ldr	r1, [pc, #28]	; (800a518 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7ff fdd9 	bl	800a0b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a502:	4602      	mov	r2, r0
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	080216f4 	.word	0x080216f4

0800a51c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff ff8d 	bl	800a448 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	601a      	str	r2, [r3, #0]
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800a542:	b590      	push	{r4, r7, lr}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681c      	ldr	r4, [r3, #0]
 800a550:	6838      	ldr	r0, [r7, #0]
 800a552:	f000 fbc1 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800a556:	4603      	mov	r3, r0
 800a558:	3301      	adds	r3, #1
 800a55a:	461a      	mov	r2, r3
 800a55c:	4621      	mov	r1, r4
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff ffa2 	bl	800a4a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd90      	pop	{r4, r7, pc}

0800a56c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800a576:	6838      	ldr	r0, [r7, #0]
 800a578:	f7ff fe76 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800a57c:	4603      	mov	r3, r0
 800a57e:	3301      	adds	r3, #1
 800a580:	461a      	mov	r2, r3
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ff8f 	bl	800a4a8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800a58a:	bf00      	nop
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
    return buffer_;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff ff5a 	bl	800a480 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800a5cc:	e003      	b.n	800a5d6 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff ffcb 	bl	800a56c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800a5f8:	68b8      	ldr	r0, [r7, #8]
 800a5fa:	f7ff fe35 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800a5fe:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	fb02 f303 	mul.w	r3, r2, r3
 800a608:	3301      	adds	r3, #1
 800a60a:	4619      	mov	r1, r3
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f7ff ff65 	bl	800a4dc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800a618:	2300      	movs	r3, #0
 800a61a:	61bb      	str	r3, [r7, #24]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d20e      	bcs.n	800a642 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	3301      	adds	r3, #1
 800a628:	461a      	mov	r2, r3
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	69f8      	ldr	r0, [r7, #28]
 800a62e:	f7ff fe66 	bl	800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	4413      	add	r3, r2
 800a638:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	3301      	adds	r3, #1
 800a63e:	61bb      	str	r3, [r7, #24]
 800a640:	e7ec      	b.n	800a61c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	2200      	movs	r2, #0
 800a646:	701a      	strb	r2, [r3, #0]
}
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800a668:	6838      	ldr	r0, [r7, #0]
 800a66a:	f7ff ff92 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a66e:	4603      	mov	r3, r0
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff ff7a 	bl	800a56c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b082      	sub	sp, #8
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	429a      	cmp	r2, r3
 800a692:	d003      	beq.n	800a69c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff ff53 	bl	800a542 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800a69c:	687b      	ldr	r3, [r7, #4]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800a6a6:	b590      	push	{r4, r7, lr}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ff6e 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	6838      	ldr	r0, [r7, #0]
 800a6ba:	f7ff ff6a 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7ff fe50 	bl	800a368 <_ZN12SimpleString6StrStrEPKcS1_>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bf14      	ite	ne
 800a6ce:	2301      	movne	r3, #1
 800a6d0:	2300      	moveq	r3, #0
 800a6d2:	b2db      	uxtb	r3, r3
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd90      	pop	{r4, r7, pc}

0800a6dc <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800a6dc:	b590      	push	{r4, r7, lr}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800a6e6:	f107 0308 	add.w	r3, r7, #8
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fabb 	bl	800ac68 <_ZNK12SimpleString9lowerCaseEv>
 800a6f2:	f107 0310 	add.w	r3, r7, #16
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fab5 	bl	800ac68 <_ZNK12SimpleString9lowerCaseEv>
 800a6fe:	f107 0210 	add.w	r2, r7, #16
 800a702:	f107 0308 	add.w	r3, r7, #8
 800a706:	4611      	mov	r1, r2
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff ffcc 	bl	800a6a6 <_ZNK12SimpleString8containsERKS_>
 800a70e:	4603      	mov	r3, r0
 800a710:	461c      	mov	r4, r3
 800a712:	bf00      	nop
 800a714:	f107 0310 	add.w	r3, r7, #16
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fafe 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	4618      	mov	r0, r3
 800a724:	f000 faf9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800a728:	4623      	mov	r3, r4
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd90      	pop	{r4, r7, pc}

0800a732 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800a732:	b590      	push	{r4, r7, lr}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800a73c:	6838      	ldr	r0, [r7, #0]
 800a73e:	f000 facb 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	bf0c      	ite	eq
 800a748:	2301      	moveq	r3, #1
 800a74a:	2300      	movne	r3, #0
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800a752:	2301      	movs	r3, #1
 800a754:	e022      	b.n	800a79c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fabe 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bf0c      	ite	eq
 800a762:	2301      	moveq	r3, #1
 800a764:	2300      	movne	r3, #0
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800a76c:	2300      	movs	r3, #0
 800a76e:	e015      	b.n	800a79c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ff0e 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a776:	4604      	mov	r4, r0
 800a778:	6838      	ldr	r0, [r7, #0]
 800a77a:	f7ff ff0a 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a77e:	4603      	mov	r3, r0
 800a780:	4619      	mov	r1, r3
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff fdf0 	bl	800a368 <_ZN12SimpleString6StrStrEPKcS1_>
 800a788:	4604      	mov	r4, r0
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff ff01 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a790:	4603      	mov	r3, r0
 800a792:	429c      	cmp	r4, r3
 800a794:	bf0c      	ite	eq
 800a796:	2301      	moveq	r3, #1
 800a798:	2300      	movne	r3, #0
 800a79a:	b2db      	uxtb	r3, r3
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd90      	pop	{r4, r7, pc}

0800a7a4 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fa92 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800a7b4:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800a7b6:	6838      	ldr	r0, [r7, #0]
 800a7b8:	f000 fa8e 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800a7bc:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e020      	b.n	800a80a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e01b      	b.n	800a80a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d201      	bcs.n	800a7de <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e015      	b.n	800a80a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fed7 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	18cc      	adds	r4, r1, r3
 800a7ee:	6838      	ldr	r0, [r7, #0]
 800a7f0:	f7ff fecf 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f7ff fd13 	bl	800a224 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	bf0c      	ite	eq
 800a804:	2301      	moveq	r3, #1
 800a806:	2300      	movne	r3, #0
 800a808:	b2db      	uxtb	r3, r3
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd90      	pop	{r4, r7, pc}

0800a812 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff feb6 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a826:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d008      	beq.n	800a846 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800a834:	6838      	ldr	r0, [r7, #0]
 800a836:	f7ff feac 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a83a:	4603      	mov	r3, r0
 800a83c:	4619      	mov	r1, r3
 800a83e:	6938      	ldr	r0, [r7, #16]
 800a840:	f7ff fd92 	bl	800a368 <_ZN12SimpleString6StrStrEPKcS1_>
 800a844:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d014      	beq.n	800a878 <_ZNK12SimpleString5countERKS_+0x66>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d011      	beq.n	800a878 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	613b      	str	r3, [r7, #16]
        str++;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	3301      	adds	r3, #1
 800a85c:	613b      	str	r3, [r7, #16]
        num++;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	3301      	adds	r3, #1
 800a862:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800a864:	6838      	ldr	r0, [r7, #0]
 800a866:	f7ff fe94 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a86a:	4603      	mov	r3, r0
 800a86c:	4619      	mov	r1, r3
 800a86e:	6938      	ldr	r0, [r7, #16]
 800a870:	f7ff fd7a 	bl	800a368 <_ZN12SimpleString6StrStrEPKcS1_>
 800a874:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800a876:	e7e6      	b.n	800a846 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800a878:	697b      	ldr	r3, [r7, #20]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800a882:	b590      	push	{r4, r7, lr}
 800a884:	b091      	sub	sp, #68	; 0x44
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800a88e:	68b9      	ldr	r1, [r7, #8]
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff ffbe 	bl	800a812 <_ZNK12SimpleString5countERKS_>
 800a896:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7ff ff82 	bl	800a7a4 <_ZNK12SimpleString8endsWithERKS_>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e000      	b.n	800a8ac <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800a8ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	4413      	add	r3, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 f95c 	bl	800bb74 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff fe68 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a8c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d235      	bcs.n	800a93c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800a8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800a8d4:	68b8      	ldr	r0, [r7, #8]
 800a8d6:	f7ff fe5c 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a8e0:	f7ff fd42 	bl	800a368 <_ZN12SimpleString6StrStrEPKcS1_>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800a8ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f001 f9db 	bl	800bca8 <_ZN22SimpleStringCollectionixEj>
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	f107 031c 	add.w	r3, r7, #28
 800a8f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fe55 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800a900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	f107 0014 	add.w	r0, r7, #20
 800a90a:	f107 011c 	add.w	r1, r7, #28
 800a90e:	2200      	movs	r2, #0
 800a910:	f000 fb0c 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
 800a914:	f107 0314 	add.w	r3, r7, #20
 800a918:	4619      	mov	r1, r3
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff feb1 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800a920:	f107 0314 	add.w	r3, r7, #20
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f9f8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800a92a:	f107 031c 	add.w	r3, r7, #28
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 f9f3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	3301      	adds	r3, #1
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38
 800a93a:	e7c5      	b.n	800a8c8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d015      	beq.n	800a96e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800a942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 f9af 	bl	800bca8 <_ZN22SimpleStringCollectionixEj>
 800a94a:	4604      	mov	r4, r0
 800a94c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fe29 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800a958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a95c:	4619      	mov	r1, r3
 800a95e:	4620      	mov	r0, r4
 800a960:	f7ff fe8f 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800a964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 f9d6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    }
}
 800a96e:	bf00      	nop
 800a970:	3744      	adds	r7, #68	; 0x44
 800a972:	46bd      	mov	sp, r7
 800a974:	bd90      	pop	{r4, r7, pc}

0800a976 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
 800a982:	4613      	mov	r3, r2
 800a984:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f9a6 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800a98c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	429a      	cmp	r2, r3
 800a998:	d218      	bcs.n	800a9cc <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff fdf9 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	bf0c      	ite	eq
 800a9ae:	2301      	moveq	r3, #1
 800a9b0:	2300      	movne	r3, #0
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <_ZN12SimpleString7replaceEcc+0x4e>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	78ba      	ldrb	r2, [r7, #2]
 800a9c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	60fb      	str	r3, [r7, #12]
 800a9ca:	e7e2      	b.n	800a992 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800a9cc:	bf00      	nop
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08e      	sub	sp, #56	; 0x38
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800a9e0:	f107 0310 	add.w	r3, r7, #16
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7ff fddf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800a9ec:	f107 0310 	add.w	r3, r7, #16
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff ff0d 	bl	800a812 <_ZNK12SimpleString5countERKS_>
 800a9f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a9fa:	f107 0310 	add.w	r3, r7, #16
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 f98b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d071      	beq.n	800aaee <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f964 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800aa10:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800aa12:	68b8      	ldr	r0, [r7, #8]
 800aa14:	f7ff fc28 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800aa18:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff fc24 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800aa20:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa26:	fb02 f203 	mul.w	r2, r2, r3
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	441a      	add	r2, r3
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa32:	fb01 f303 	mul.w	r3, r1, r3
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	3301      	adds	r3, #1
 800aa3a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d951      	bls.n	800aae6 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800aa42:	f240 129d 	movw	r2, #413	; 0x19d
 800aa46:	492c      	ldr	r1, [pc, #176]	; (800aaf8 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800aa48:	69f8      	ldr	r0, [r7, #28]
 800aa4a:	f7ff fb33 	bl	800a0b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800aa4e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800aa50:	2300      	movs	r3, #0
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34
 800aa54:	2300      	movs	r3, #0
 800aa56:	633b      	str	r3, [r7, #48]	; 0x30
 800aa58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d236      	bcs.n	800aace <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff fd96 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800aa66:	4602      	mov	r2, r0
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	4413      	add	r3, r2
 800aa6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fc16 	bl	800a2a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf0c      	ite	eq
 800aa7c:	2301      	moveq	r3, #1
 800aa7e:	2300      	movne	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d011      	beq.n	800aaaa <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	18d0      	adds	r0, r2, r3
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	461a      	mov	r2, r3
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	f7ff fc33 	bl	800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800aa98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800aaa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	4413      	add	r3, r2
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa8:	e7d6      	b.n	800aa58 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff fd71 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800aab0:	4602      	mov	r2, r0
 800aab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab4:	441a      	add	r2, r3
 800aab6:	69b9      	ldr	r1, [r7, #24]
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	440b      	add	r3, r1
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	701a      	strb	r2, [r3, #0]
                j++;
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	3301      	adds	r3, #1
 800aac4:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	3301      	adds	r3, #1
 800aaca:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800aacc:	e7c4      	b.n	800aa58 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	4413      	add	r3, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	69b9      	ldr	r1, [r7, #24]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7ff fd1c 	bl	800a51c <_ZN12SimpleString19setInternalBufferToEPcj>
 800aae4:	e004      	b.n	800aaf0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff fcca 	bl	800a480 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800aaec:	e000      	b.n	800aaf0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800aaee:	bf00      	nop
}
 800aaf0:	3738      	adds	r7, #56	; 0x38
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	080216f4 	.word	0x080216f4

0800aafc <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800aafc:	b590      	push	{r4, r7, lr}
 800aafe:	b089      	sub	sp, #36	; 0x24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800ab06:	493b      	ldr	r1, [pc, #236]	; (800abf4 <_ZNK12SimpleString9printableEv+0xf8>)
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff fd4e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800ab0e:	6838      	ldr	r0, [r7, #0]
 800ab10:	f000 f876 	bl	800ac00 <_ZNK12SimpleString16getPrintableSizeEv>
 800ab14:	4603      	mov	r3, r0
 800ab16:	3301      	adds	r3, #1
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fcde 	bl	800a4dc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800ab20:	6838      	ldr	r0, [r7, #0]
 800ab22:	f000 f8d9 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800ab26:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61bb      	str	r3, [r7, #24]
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d252      	bcs.n	800abde <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	4413      	add	r3, r2
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800ab44:	7cfb      	ldrb	r3, [r7, #19]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fb43 	bl	800b1d2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d012      	beq.n	800ab78 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	18d0      	adds	r0, r2, r3
 800ab5a:	7cfb      	ldrb	r3, [r7, #19]
 800ab5c:	3b07      	subs	r3, #7
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	4b25      	ldr	r3, [pc, #148]	; (800abf8 <_ZNK12SimpleString9printableEv+0xfc>)
 800ab64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f7ff fbc7 	bl	800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	3302      	adds	r3, #2
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	e02e      	b.n	800abd6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800ab78:	7cfb      	ldrb	r3, [r7, #19]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fb15 	bl	800b1aa <_ZN12SimpleString9isControlEc>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d01e      	beq.n	800abc4 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800ab86:	7cfa      	ldrb	r2, [r7, #19]
 800ab88:	f107 0308 	add.w	r3, r7, #8
 800ab8c:	491b      	ldr	r1, [pc, #108]	; (800abfc <_ZNK12SimpleString9printableEv+0x100>)
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fdca 	bl	800b728 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	18d4      	adds	r4, r2, r3
 800ab9c:	f107 0308 	add.w	r3, r7, #8
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 f88d 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2204      	movs	r2, #4
 800abaa:	4619      	mov	r1, r3
 800abac:	4620      	mov	r0, r4
 800abae:	f7ff fba6 	bl	800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	3304      	adds	r3, #4
 800abb6:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800abb8:	f107 0308 	add.w	r3, r7, #8
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 f8ac 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800abc2:	e008      	b.n	800abd6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	4413      	add	r3, r2
 800abcc:	7cfa      	ldrb	r2, [r7, #19]
 800abce:	701a      	strb	r2, [r3, #0]
            j++;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	3301      	adds	r3, #1
 800abd4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	3301      	adds	r3, #1
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e7a8      	b.n	800ab30 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]

    return result;
 800abea:	bf00      	nop
}
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	3724      	adds	r7, #36	; 0x24
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd90      	pop	{r4, r7, pc}
 800abf4:	080217b4 	.word	0x080217b4
 800abf8:	20000068 	.word	0x20000068
 800abfc:	080217b8 	.word	0x080217b8

0800ac00 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f865 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800ac0e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800ac14:	2300      	movs	r3, #0
 800ac16:	613b      	str	r3, [r7, #16]
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d21e      	bcs.n	800ac5e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	4413      	add	r3, r2
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 facf 	bl	800b1d2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	e009      	b.n	800ac56 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800ac42:	7afb      	ldrb	r3, [r7, #11]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 fab0 	bl	800b1aa <_ZN12SimpleString9isControlEc>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	3303      	adds	r3, #3
 800ac54:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	613b      	str	r3, [r7, #16]
 800ac5c:	e7dc      	b.n	800ac18 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800ac5e:	697b      	ldr	r3, [r7, #20]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800ac68:	b590      	push	{r4, r7, lr}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7ff fcec 	bl	800a652 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f82c 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800ac80:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d213      	bcs.n	800acb6 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7ff fc7f 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800ac94:	4602      	mov	r2, r0
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	4413      	add	r3, r2
 800ac9a:	7819      	ldrb	r1, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	18d4      	adds	r4, r2, r3
 800aca4:	4608      	mov	r0, r1
 800aca6:	f7ff fb8a 	bl	800a3be <_ZN12SimpleString7ToLowerEc>
 800acaa:	4603      	mov	r3, r0
 800acac:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3301      	adds	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e7e7      	b.n	800ac86 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800acb6:	bf00      	nop
}
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd90      	pop	{r4, r7, pc}

0800acc0 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fc62 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800acce:	4603      	mov	r3, r0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff fc56 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800ace6:	4603      	mov	r3, r0
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fabd 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800acee:	4603      	mov	r3, r0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff ffe9 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bf0c      	ite	eq
 800ad0c:	2301      	moveq	r3, #1
 800ad0e:	2300      	movne	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff fb90 	bl	800a448 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800ad32:	b590      	push	{r4, r7, lr}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff ffbf 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800ad42:	4604      	mov	r4, r0
 800ad44:	6838      	ldr	r0, [r7, #0]
 800ad46:	f7ff ffbb 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f7ff fa68 	bl	800a224 <_ZN12SimpleString6StrCmpEPKcS1_>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bf0c      	ite	eq
 800ad5a:	2301      	moveq	r3, #1
 800ad5c:	2300      	movne	r3, #0
 800ad5e:	b2db      	uxtb	r3, r3
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd90      	pop	{r4, r7, pc}

0800ad68 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800ad68:	b590      	push	{r4, r7, lr}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff ff75 	bl	800ac68 <_ZNK12SimpleString9lowerCaseEv>
 800ad7e:	f107 0310 	add.w	r3, r7, #16
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff ff6f 	bl	800ac68 <_ZNK12SimpleString9lowerCaseEv>
 800ad8a:	f107 0210 	add.w	r2, r7, #16
 800ad8e:	f107 0308 	add.w	r3, r7, #8
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff ffcc 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461c      	mov	r4, r3
 800ad9e:	f107 0310 	add.w	r3, r7, #16
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7ff ffb9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800ada8:	f107 0308 	add.w	r3, r7, #8
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff ffb4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800adb2:	4623      	mov	r3, r4
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	371c      	adds	r7, #28
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd90      	pop	{r4, r7, pc}

0800adbc <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff ffb2 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800adce:	4603      	mov	r3, r0
 800add0:	f083 0301 	eor.w	r3, r3, #1
 800add4:	b2db      	uxtb	r3, r3
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800adea:	68b8      	ldr	r0, [r7, #8]
 800adec:	f7ff fbd1 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800adf0:	4603      	mov	r3, r0
 800adf2:	4619      	mov	r1, r3
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff fbd8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff fbc9 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800ae00:	4603      	mov	r3, r0
 800ae02:	4619      	mov	r1, r3
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f817 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    return t;
 800ae0a:	bf00      	nop
}
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800ae1e:	6838      	ldr	r0, [r7, #0]
 800ae20:	f7ff fbb7 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800ae24:	4603      	mov	r3, r0
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f805 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
 800ae2e:	4603      	mov	r3, r0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff ff48 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800ae48:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800ae4a:	6838      	ldr	r0, [r7, #0]
 800ae4c:	f7ff fa0c 	bl	800a268 <_ZN12SimpleString6StrLenEPKc>
 800ae50:	4603      	mov	r3, r0
 800ae52:	3301      	adds	r3, #1
 800ae54:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fb97 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800ae64:	4603      	mov	r3, r0
 800ae66:	68f9      	ldr	r1, [r7, #12]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 f941 	bl	800b0f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800ae6e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	4413      	add	r3, r2
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff fa3f 	bl	800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fb49 	bl	800a51c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800ae8a:	687b      	ldr	r3, [r7, #4]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800ae94:	b590      	push	{r4, r7, lr}
 800ae96:	b08b      	sub	sp, #44	; 0x2c
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff ff18 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	68b8      	ldr	r0, [r7, #8]
 800aeac:	f7ff ff14 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	429c      	cmp	r4, r3
 800aeb4:	bf8c      	ite	hi
 800aeb6:	2301      	movhi	r3, #1
 800aeb8:	2300      	movls	r3, #0
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d006      	beq.n	800aece <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	461a      	mov	r2, r3
 800aec4:	68f9      	ldr	r1, [r7, #12]
 800aec6:	68b8      	ldr	r0, [r7, #8]
 800aec8:	f7ff ffe4 	bl	800ae94 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800aecc:	e02b      	b.n	800af26 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800aed6:	68b8      	ldr	r0, [r7, #8]
 800aed8:	f7ff fefe 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800aedc:	4604      	mov	r4, r0
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7ff fefa 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800aee4:	4603      	mov	r3, r0
 800aee6:	1ae2      	subs	r2, r4, r3
 800aee8:	f107 0114 	add.w	r1, r7, #20
 800aeec:	f107 0320 	add.w	r3, r7, #32
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7ff fb75 	bl	800a5e0 <_ZN12SimpleStringC1EPKcj>
 800aef6:	f107 0318 	add.w	r3, r7, #24
 800aefa:	f107 0120 	add.w	r1, r7, #32
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff ff6c 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800af06:	f107 0318 	add.w	r3, r7, #24
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff fbb8 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800af12:	f107 0318 	add.w	r3, r7, #24
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff feff 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800af1c:	f107 0320 	add.w	r3, r7, #32
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff fefa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800af26:	372c      	adds	r7, #44	; 0x2c
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd90      	pop	{r4, r7, pc}

0800af2c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800af3a:	68b8      	ldr	r0, [r7, #8]
 800af3c:	f7ff fecc 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800af40:	4603      	mov	r3, r0
 800af42:	3b01      	subs	r3, #1
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	429a      	cmp	r2, r3
 800af48:	bf8c      	ite	hi
 800af4a:	2301      	movhi	r3, #1
 800af4c:	2300      	movls	r3, #0
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b00      	cmp	r3, #0
 800af52:	d004      	beq.n	800af5e <_ZNK12SimpleString9subStringEjj+0x32>
 800af54:	4919      	ldr	r1, [pc, #100]	; (800afbc <_ZNK12SimpleString9subStringEjj+0x90>)
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff fb27 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800af5c:	e029      	b.n	800afb2 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800af5e:	68b8      	ldr	r0, [r7, #8]
 800af60:	f7ff fb17 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800af64:	4602      	mov	r2, r0
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	441a      	add	r2, r3
 800af6a:	f107 0310 	add.w	r3, r7, #16
 800af6e:	4611      	mov	r1, r2
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff fb1a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800af76:	f107 0310 	add.w	r3, r7, #16
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff feac 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800af80:	4602      	mov	r2, r0
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	4293      	cmp	r3, r2
 800af86:	bf34      	ite	cc
 800af88:	2301      	movcc	r3, #1
 800af8a:	2300      	movcs	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d004      	beq.n	800af9c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	4413      	add	r3, r2
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]

    return newString;
 800af9c:	f107 0310 	add.w	r3, r7, #16
 800afa0:	4619      	mov	r1, r3
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7ff fb55 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800afa8:	f107 0310 	add.w	r3, r7, #16
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff feb4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	3718      	adds	r7, #24
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	080217b4 	.word	0x080217b4

0800afc0 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f04f 33ff 	mov.w	r3, #4294967295
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	68b9      	ldr	r1, [r7, #8]
 800afd6:	f7ff ffa9 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
}
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff fad0 	bl	800a592 <_ZNK12SimpleString9getBufferEv>
 800aff2:	4602      	mov	r2, r0
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	4413      	add	r3, r2
 800aff8:	781b      	ldrb	r3, [r3, #0]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800b00e:	78fb      	ldrb	r3, [r7, #3]
 800b010:	461a      	mov	r2, r3
 800b012:	2100      	movs	r1, #0
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f805 	bl	800b024 <_ZNK12SimpleString8findFromEjc>
 800b01a:	4603      	mov	r3, r0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7ff fe50 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800b038:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	617b      	str	r3, [r7, #20]
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	429a      	cmp	r2, r3
 800b044:	d213      	bcs.n	800b06e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800b046:	6979      	ldr	r1, [r7, #20]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff ffca 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800b04e:	4603      	mov	r3, r0
 800b050:	461a      	mov	r2, r3
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	4293      	cmp	r3, r2
 800b056:	bf0c      	ite	eq
 800b058:	2301      	moveq	r3, #1
 800b05a:	2300      	movne	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <_ZNK12SimpleString8findFromEjc+0x42>
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	e005      	b.n	800b072 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	3301      	adds	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	e7e7      	b.n	800b03e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800b06e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4611      	mov	r1, r2
 800b088:	461a      	mov	r2, r3
 800b08a:	460b      	mov	r3, r1
 800b08c:	71fb      	strb	r3, [r7, #7]
 800b08e:	4613      	mov	r3, r2
 800b090:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	4619      	mov	r1, r3
 800b096:	68b8      	ldr	r0, [r7, #8]
 800b098:	f7ff ffb3 	bl	800b002 <_ZNK12SimpleString4findEc>
 800b09c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a4:	d104      	bne.n	800b0b0 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800b0a6:	4911      	ldr	r1, [pc, #68]	; (800b0ec <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f7ff fa7e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b0ae:	e019      	b.n	800b0e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800b0b0:	79bb      	ldrb	r3, [r7, #6]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6979      	ldr	r1, [r7, #20]
 800b0b6:	68b8      	ldr	r0, [r7, #8]
 800b0b8:	f7ff ffb4 	bl	800b024 <_ZNK12SimpleString8findFromEjc>
 800b0bc:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c4:	d106      	bne.n	800b0d4 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff ff77 	bl	800afc0 <_ZNK12SimpleString9subStringEj>
 800b0d2:	e007      	b.n	800b0e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	68b9      	ldr	r1, [r7, #8]
 800b0e0:	f7ff ff24 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
}
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	080217b4 	.word	0x080217b4

0800b0f0 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800b0fa:	f240 2275 	movw	r2, #629	; 0x275
 800b0fe:	490a      	ldr	r1, [pc, #40]	; (800b128 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800b100:	6838      	ldr	r0, [r7, #0]
 800b102:	f7fe ffd7 	bl	800a0b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b106:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7ff f8f6 	bl	800a2fe <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	3b01      	subs	r3, #1
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4413      	add	r3, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800b11e:	68fb      	ldr	r3, [r7, #12]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	080216f4 	.word	0x080216f4

0800b12c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	2b2f      	cmp	r3, #47	; 0x2f
 800b13a:	d904      	bls.n	800b146 <_ZN12SimpleString7isDigitEc+0x1a>
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b39      	cmp	r3, #57	; 0x39
 800b140:	d801      	bhi.n	800b146 <_ZN12SimpleString7isDigitEc+0x1a>
 800b142:	2301      	movs	r3, #1
 800b144:	e000      	b.n	800b148 <_ZN12SimpleString7isDigitEc+0x1c>
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4603      	mov	r3, r0
 800b15c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800b15e:	79fb      	ldrb	r3, [r7, #7]
 800b160:	2b20      	cmp	r3, #32
 800b162:	d005      	beq.n	800b170 <_ZN12SimpleString7isSpaceEc+0x1c>
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	2b08      	cmp	r3, #8
 800b168:	d904      	bls.n	800b174 <_ZN12SimpleString7isSpaceEc+0x20>
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	2b0d      	cmp	r3, #13
 800b16e:	d801      	bhi.n	800b174 <_ZN12SimpleString7isSpaceEc+0x20>
 800b170:	2301      	movs	r3, #1
 800b172:	e000      	b.n	800b176 <_ZN12SimpleString7isSpaceEc+0x22>
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	4603      	mov	r3, r0
 800b18a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	2b40      	cmp	r3, #64	; 0x40
 800b190:	d904      	bls.n	800b19c <_ZN12SimpleString7isUpperEc+0x1a>
 800b192:	79fb      	ldrb	r3, [r7, #7]
 800b194:	2b5a      	cmp	r3, #90	; 0x5a
 800b196:	d801      	bhi.n	800b19c <_ZN12SimpleString7isUpperEc+0x1a>
 800b198:	2301      	movs	r3, #1
 800b19a:	e000      	b.n	800b19e <_ZN12SimpleString7isUpperEc+0x1c>
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	2b1f      	cmp	r3, #31
 800b1b8:	d902      	bls.n	800b1c0 <_ZN12SimpleString9isControlEc+0x16>
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	2b7f      	cmp	r3, #127	; 0x7f
 800b1be:	d101      	bne.n	800b1c4 <_ZN12SimpleString9isControlEc+0x1a>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e000      	b.n	800b1c6 <_ZN12SimpleString9isControlEc+0x1c>
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	4603      	mov	r3, r0
 800b1da:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2b06      	cmp	r3, #6
 800b1e0:	d904      	bls.n	800b1ec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800b1e2:	79fb      	ldrb	r3, [r7, #7]
 800b1e4:	2b0d      	cmp	r3, #13
 800b1e6:	d801      	bhi.n	800b1ec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <_Z10StringFromb+0x16>
 800b20e:	4a06      	ldr	r2, [pc, #24]	; (800b228 <_Z10StringFromb+0x2c>)
 800b210:	e000      	b.n	800b214 <_Z10StringFromb+0x18>
 800b212:	4a06      	ldr	r2, [pc, #24]	; (800b22c <_Z10StringFromb+0x30>)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4906      	ldr	r1, [pc, #24]	; (800b230 <_Z10StringFromb+0x34>)
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 fa85 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	080217c0 	.word	0x080217c0
 800b22c:	080217c8 	.word	0x080217c8
 800b230:	080217d0 	.word	0x080217d0

0800b234 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff f9b2 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
}
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800b250:	b590      	push	{r4, r7, lr}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800b25a:	2400      	movs	r4, #0
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00e      	beq.n	800b280 <_Z25PrintableStringFromOrNullPKc+0x30>
 800b262:	f107 0308 	add.w	r3, r7, #8
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff ffe3 	bl	800b234 <_Z10StringFromPKc>
 800b26e:	2401      	movs	r4, #1
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f107 0208 	add.w	r2, r7, #8
 800b276:	4611      	mov	r1, r2
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff fc3f 	bl	800aafc <_ZNK12SimpleString9printableEv>
 800b27e:	e004      	b.n	800b28a <_Z25PrintableStringFromOrNullPKc+0x3a>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4908      	ldr	r1, [pc, #32]	; (800b2a4 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff ffd5 	bl	800b234 <_Z10StringFromPKc>
 800b28a:	2c00      	cmp	r4, #0
 800b28c:	d004      	beq.n	800b298 <_Z25PrintableStringFromOrNullPKc+0x48>
 800b28e:	f107 0308 	add.w	r3, r7, #8
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fd41 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b298:	bf00      	nop
}
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd90      	pop	{r4, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	080217d4 	.word	0x080217d4

0800b2a8 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	4904      	ldr	r1, [pc, #16]	; (800b2c8 <_Z10StringFromi+0x20>)
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fa35 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	080217dc 	.word	0x080217dc

0800b2cc <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	4904      	ldr	r1, [pc, #16]	; (800b2ec <_Z10StringFroml+0x20>)
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fa23 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	080217e0 	.word	0x080217e0

0800b2f0 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800b2fa:	f107 0308 	add.w	r3, r7, #8
 800b2fe:	4910      	ldr	r1, [pc, #64]	; (800b340 <_Z10StringFromPKv+0x50>)
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff f952 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b306:	f107 0310 	add.w	r3, r7, #16
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 f9a1 	bl	800b654 <_Z13HexStringFromPKv>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f107 0210 	add.w	r2, r7, #16
 800b318:	f107 0108 	add.w	r1, r7, #8
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fd5e 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800b322:	f107 0310 	add.w	r3, r7, #16
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fcf7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b32c:	f107 0308 	add.w	r3, r7, #8
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff fcf2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b336:	bf00      	nop
}
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	080217e4 	.word	0x080217e4

0800b344 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800b34e:	f107 0308 	add.w	r3, r7, #8
 800b352:	4910      	ldr	r1, [pc, #64]	; (800b394 <_Z10StringFromPFvvE+0x50>)
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff f928 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b35a:	f107 0310 	add.w	r3, r7, #16
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 f98b 	bl	800b67c <_Z13HexStringFromPFvvE>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f107 0210 	add.w	r2, r7, #16
 800b36c:	f107 0108 	add.w	r1, r7, #8
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff fd34 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800b376:	f107 0310 	add.w	r3, r7, #16
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fccd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b380:	f107 0308 	add.w	r3, r7, #8
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fcc8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b38a:	bf00      	nop
}
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	080217e4 	.word	0x080217e4

0800b398 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	4904      	ldr	r1, [pc, #16]	; (800b3b8 <_Z13HexStringFroml+0x20>)
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 f9bd 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	080217e8 	.word	0x080217e8

0800b3bc <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	4904      	ldr	r1, [pc, #16]	; (800b3dc <_Z13HexStringFromi+0x20>)
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f000 f9ab 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	080217ec 	.word	0x080217ec

0800b3e0 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800b3ec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4912      	ldr	r1, [pc, #72]	; (800b43c <_Z13HexStringFroma+0x5c>)
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 f997 	bl	800b728 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800b3fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da16      	bge.n	800b430 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f7ff fc68 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800b408:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	1e9a      	subs	r2, r3, #2
 800b40e:	f107 030c 	add.w	r3, r7, #12
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff fdd3 	bl	800afc0 <_ZNK12SimpleString9subStringEj>
 800b41a:	f107 030c 	add.w	r3, r7, #12
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff f92e 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800b426:	f107 030c 	add.w	r3, r7, #12
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff fc75 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    }
    return result;
 800b430:	bf00      	nop
}
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	080217ec 	.word	0x080217ec

0800b440 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	4904      	ldr	r1, [pc, #16]	; (800b460 <_Z13HexStringFromm+0x20>)
 800b450:	4618      	mov	r0, r3
 800b452:	f000 f969 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	080217e8 	.word	0x080217e8

0800b464 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	4904      	ldr	r1, [pc, #16]	; (800b484 <_Z13HexStringFromj+0x20>)
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f957 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	080217ec 	.word	0x080217ec

0800b488 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff ff8f 	bl	800b3bc <_Z13HexStringFromi>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f107 0208 	add.w	r2, r7, #8
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 f87e 	bl	800b5a8 <_Z26BracketsFormattedHexString12SimpleString>
 800b4ac:	f107 0308 	add.w	r3, r7, #8
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fc32 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b4b6:	bf00      	nop
}
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b4ca:	f107 0308 	add.w	r3, r7, #8
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff ffc7 	bl	800b464 <_Z13HexStringFromj>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f107 0208 	add.w	r2, r7, #8
 800b4dc:	4611      	mov	r1, r2
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 f862 	bl	800b5a8 <_Z26BracketsFormattedHexString12SimpleString>
 800b4e4:	f107 0308 	add.w	r3, r7, #8
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff fc16 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b4ee:	bf00      	nop
}
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b502:	f107 0308 	add.w	r3, r7, #8
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff ff45 	bl	800b398 <_Z13HexStringFroml>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f107 0208 	add.w	r2, r7, #8
 800b514:	4611      	mov	r1, r2
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f846 	bl	800b5a8 <_Z26BracketsFormattedHexString12SimpleString>
 800b51c:	f107 0308 	add.w	r3, r7, #8
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff fbfa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b526:	bf00      	nop
}
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b53a:	f107 0308 	add.w	r3, r7, #8
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff ff7d 	bl	800b440 <_Z13HexStringFromm>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f107 0208 	add.w	r2, r7, #8
 800b54c:	4611      	mov	r1, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 f82a 	bl	800b5a8 <_Z26BracketsFormattedHexString12SimpleString>
 800b554:	f107 0308 	add.w	r3, r7, #8
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fbde 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b55e:	bf00      	nop
}
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b57c:	4611      	mov	r1, r2
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff ff2e 	bl	800b3e0 <_Z13HexStringFroma>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f107 0208 	add.w	r2, r7, #8
 800b58a:	4611      	mov	r1, r2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 f80b 	bl	800b5a8 <_Z26BracketsFormattedHexString12SimpleString>
 800b592:	f107 0308 	add.w	r3, r7, #8
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fbbf 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b59c:	bf00      	nop
}
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800b5b2:	f107 0310 	add.w	r3, r7, #16
 800b5b6:	4917      	ldr	r1, [pc, #92]	; (800b614 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fff6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b5be:	f107 0308 	add.w	r3, r7, #8
 800b5c2:	f107 0110 	add.w	r1, r7, #16
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fc08 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800b5ce:	f107 0318 	add.w	r3, r7, #24
 800b5d2:	4911      	ldr	r1, [pc, #68]	; (800b618 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fe ffe8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f107 0218 	add.w	r2, r7, #24
 800b5e0:	f107 0108 	add.w	r1, r7, #8
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff fbfa 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800b5ea:	f107 0318 	add.w	r3, r7, #24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7ff fb93 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff fb8e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b5fe:	f107 0310 	add.w	r3, r7, #16
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff fb89 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800b608:	bf00      	nop
}
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	080217f0 	.word	0x080217f0
 800b618:	080217f4 	.word	0x080217f4

0800b61c <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800b640:	1d3b      	adds	r3, r7, #4
 800b642:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800b65e:	6838      	ldr	r0, [r7, #0]
 800b660:	f7ff ffdc 	bl	800b61c <_ZL25convertPointerToLongValuePKv>
 800b664:	4602      	mov	r2, r0
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4903      	ldr	r1, [pc, #12]	; (800b678 <_Z13HexStringFromPKv+0x24>)
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 f85c 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	080217e8 	.word	0x080217e8

0800b67c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800b686:	6838      	ldr	r0, [r7, #0]
 800b688:	f7ff ffd6 	bl	800b638 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800b68c:	4602      	mov	r2, r0
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4903      	ldr	r1, [pc, #12]	; (800b6a0 <_Z13HexStringFromPFvvE+0x24>)
 800b692:	4618      	mov	r0, r3
 800b694:	f000 f848 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	080217e8 	.word	0x080217e8

0800b6a4 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	ed87 0b00 	vstr	d0, [r7]
 800b6b0:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800b6b2:	4b18      	ldr	r3, [pc, #96]	; (800b714 <_Z10StringFromdi+0x70>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	ed97 0b00 	vldr	d0, [r7]
 800b6ba:	4798      	blx	r3
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bf14      	ite	ne
 800b6c2:	2301      	movne	r3, #1
 800b6c4:	2300      	moveq	r3, #0
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800b6cc:	4912      	ldr	r1, [pc, #72]	; (800b718 <_Z10StringFromdi+0x74>)
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f7fe ff6b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b6d4:	e01a      	b.n	800b70c <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800b6d6:	4b11      	ldr	r3, [pc, #68]	; (800b71c <_Z10StringFromdi+0x78>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	ed97 0b00 	vldr	d0, [r7]
 800b6de:	4798      	blx	r3
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bf14      	ite	ne
 800b6e6:	2301      	movne	r3, #1
 800b6e8:	2300      	moveq	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800b6f0:	490b      	ldr	r1, [pc, #44]	; (800b720 <_Z10StringFromdi+0x7c>)
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7fe ff59 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b6f8:	e008      	b.n	800b70c <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b700:	e9cd 2300 	strd	r2, r3, [sp]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	4907      	ldr	r1, [pc, #28]	; (800b724 <_Z10StringFromdi+0x80>)
 800b708:	f000 f80e 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	200000e4 	.word	0x200000e4
 800b718:	08021828 	.word	0x08021828
 800b71c:	200000e8 	.word	0x200000e8
 800b720:	0802183c 	.word	0x0802183c
 800b724:	0802184c 	.word	0x0802184c

0800b728 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800b728:	b40e      	push	{r1, r2, r3}
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b087      	sub	sp, #28
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800b732:	4910      	ldr	r1, [pc, #64]	; (800b774 <_Z16StringFromFormatPKcz+0x4c>)
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f7fe ff38 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800b73a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b73e:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800b740:	f107 0310 	add.w	r3, r7, #16
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 f839 	bl	800b7c0 <_Z17VStringFromFormatPKcSt9__va_list>
 800b74e:	f107 0310 	add.w	r3, r7, #16
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7fe ff94 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800b75a:	f107 0310 	add.w	r3, r7, #16
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff fadb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800b764:	bf00      	nop
}
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	371c      	adds	r7, #28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b770:	b003      	add	sp, #12
 800b772:	4770      	bx	lr
 800b774:	080217b4 	.word	0x080217b4

0800b778 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	4904      	ldr	r1, [pc, #16]	; (800b798 <_Z10StringFromj+0x20>)
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff ffcd 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	08021858 	.word	0x08021858

0800b79c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	683a      	ldr	r2, [r7, #0]
 800b7aa:	4904      	ldr	r1, [pc, #16]	; (800b7bc <_Z10StringFromm+0x20>)
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff ffbb 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	0802185c 	.word	0x0802185c

0800b7c0 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b0a7      	sub	sp, #156	; 0x9c
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800b7d0:	492e      	ldr	r1, [pc, #184]	; (800b88c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7fe fee9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800b7d8:	4b2d      	ldr	r3, [pc, #180]	; (800b890 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800b7da:	681c      	ldr	r4, [r3, #0]
 800b7dc:	f107 0014 	add.w	r0, r7, #20
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	2164      	movs	r1, #100	; 0x64
 800b7e6:	47a0      	blx	r4
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800b7ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7f2:	2b63      	cmp	r3, #99	; 0x63
 800b7f4:	d813      	bhi.n	800b81e <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800b7f6:	f107 0214 	add.w	r2, r7, #20
 800b7fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe fed2 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b806:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b80a:	4619      	mov	r1, r3
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7fe ff38 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800b812:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fa7f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800b81c:	e031      	b.n	800b882 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800b81e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b822:	3301      	adds	r3, #1
 800b824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800b828:	f240 32c3 	movw	r2, #963	; 0x3c3
 800b82c:	4919      	ldr	r1, [pc, #100]	; (800b894 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800b82e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b832:	f7fe fc3f 	bl	800a0b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b836:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800b83a:	4b15      	ldr	r3, [pc, #84]	; (800b890 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800b83c:	681c      	ldr	r4, [r3, #0]
 800b83e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b846:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b84a:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800b84c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b850:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe fea8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800b85a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b85e:	4619      	mov	r1, r3
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7fe ff0e 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800b866:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fa55 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800b870:	f240 33c7 	movw	r3, #967	; 0x3c7
 800b874:	4a07      	ldr	r2, [pc, #28]	; (800b894 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800b876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b87a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b87e:	f7fe fc2d 	bl	800a0dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800b882:	bf00      	nop
}
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	379c      	adds	r7, #156	; 0x9c
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd90      	pop	{r4, r7, pc}
 800b88c:	080217b4 	.word	0x080217b4
 800b890:	200000ac 	.word	0x200000ac
 800b894:	080216f4 	.word	0x080216f4

0800b898 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800b8a4:	491f      	ldr	r1, [pc, #124]	; (800b924 <_Z16StringFromBinaryPKhj+0x8c>)
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f7fe fe7f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d219      	bcs.n	800b8ec <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	4413      	add	r3, r2
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f107 0314 	add.w	r3, r7, #20
 800b8c6:	4918      	ldr	r1, [pc, #96]	; (800b928 <_Z16StringFromBinaryPKhj+0x90>)
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff ff2d 	bl	800b728 <_Z16StringFromFormatPKcz>
 800b8ce:	f107 0314 	add.w	r3, r7, #20
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f7ff fa9d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800b8da:	f107 0314 	add.w	r3, r7, #20
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fa1b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ea:	e7e1      	b.n	800b8b0 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f7ff f9f3 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	f107 001c 	add.w	r0, r7, #28
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	68f9      	ldr	r1, [r7, #12]
 800b8fe:	f7ff fb15 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
 800b902:	f107 031c 	add.w	r3, r7, #28
 800b906:	4619      	mov	r1, r3
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7fe feba 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800b90e:	f107 031c 	add.w	r3, r7, #28
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff fa01 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    return result;
 800b918:	bf00      	nop
}
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	3728      	adds	r7, #40	; 0x28
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	080217b4 	.word	0x080217b4
 800b928:	08021860 	.word	0x08021860

0800b92c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d006      	beq.n	800b94c <_Z22StringFromBinaryOrNullPKhj+0x20>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff ffa7 	bl	800b898 <_Z16StringFromBinaryPKhj>
 800b94a:	e004      	b.n	800b956 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4904      	ldr	r1, [pc, #16]	; (800b960 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff fc6f 	bl	800b234 <_Z10StringFromPKc>
}
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	080217d4 	.word	0x080217d4

0800b964 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	4913      	ldr	r1, [pc, #76]	; (800b9c4 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff fed6 	bl	800b728 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b80      	cmp	r3, #128	; 0x80
 800b980:	bf28      	it	cs
 800b982:	2380      	movcs	r3, #128	; 0x80
 800b984:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800b986:	f107 0314 	add.w	r3, r7, #20
 800b98a:	69fa      	ldr	r2, [r7, #28]
 800b98c:	68b9      	ldr	r1, [r7, #8]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff ffcc 	bl	800b92c <_Z22StringFromBinaryOrNullPKhj>
 800b994:	f107 0314 	add.w	r3, r7, #20
 800b998:	4619      	mov	r1, r3
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fa3a 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800b9a0:	f107 0314 	add.w	r3, r7, #20
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff f9b8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d903      	bls.n	800b9ba <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800b9b2:	4905      	ldr	r1, [pc, #20]	; (800b9c8 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff fa3f 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800b9ba:	bf00      	nop
}
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08021868 	.word	0x08021868
 800b9c8:	08021884 	.word	0x08021884

0800b9cc <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d006      	beq.n	800b9ec <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff ffbd 	bl	800b964 <_Z24StringFromBinaryWithSizePKhj>
 800b9ea:	e004      	b.n	800b9f6 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4904      	ldr	r1, [pc, #16]	; (800ba00 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7ff fc1f 	bl	800b234 <_Z10StringFromPKc>
}
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	080217d4 	.word	0x080217d4

0800ba04 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ba12:	4925      	ldr	r1, [pc, #148]	; (800baa8 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f7fe fdc8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d802      	bhi.n	800ba26 <_Z20StringFromMaskedBitsmmj+0x22>
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	e000      	b.n	800ba28 <_Z20StringFromMaskedBitsmmj+0x24>
 800ba26:	2320      	movs	r3, #32
 800ba28:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	2201      	movs	r2, #1
 800ba30:	fa02 f303 	lsl.w	r3, r2, r3
 800ba34:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800ba36:	2300      	movs	r3, #0
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d22d      	bcs.n	800ba9e <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	4013      	ands	r3, r2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00c      	beq.n	800ba66 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	4013      	ands	r3, r2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <_Z20StringFromMaskedBitsmmj+0x56>
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <_Z20StringFromMaskedBitsmmj+0xa8>)
 800ba58:	e000      	b.n	800ba5c <_Z20StringFromMaskedBitsmmj+0x58>
 800ba5a:	4b15      	ldr	r3, [pc, #84]	; (800bab0 <_Z20StringFromMaskedBitsmmj+0xac>)
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff f9ea 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
 800ba64:	e003      	b.n	800ba6e <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800ba66:	4913      	ldr	r1, [pc, #76]	; (800bab4 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7ff f9e5 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	f003 0307 	and.w	r3, r3, #7
 800ba74:	2b07      	cmp	r3, #7
 800ba76:	d108      	bne.n	800ba8a <_Z20StringFromMaskedBitsmmj+0x86>
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d003      	beq.n	800ba8a <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800ba82:	490d      	ldr	r1, [pc, #52]	; (800bab8 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7ff f9d7 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	005b      	lsls	r3, r3, #1
 800ba8e:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	61fb      	str	r3, [r7, #28]
 800ba9c:	e7cd      	b.n	800ba3a <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800ba9e:	bf00      	nop
}
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	080217b4 	.word	0x080217b4
 800baac:	0802188c 	.word	0x0802188c
 800bab0:	08021890 	.word	0x08021890
 800bab4:	08021894 	.word	0x08021894
 800bab8:	08021898 	.word	0x08021898

0800babc <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	4b18      	ldr	r3, [pc, #96]	; (800bb2c <_Z23StringFromOrdinalNumberj+0x70>)
 800baca:	fba3 1302 	umull	r1, r3, r3, r2
 800bace:	08d9      	lsrs	r1, r3, #3
 800bad0:	460b      	mov	r3, r1
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	440b      	add	r3, r1
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2b0a      	cmp	r3, #10
 800bae0:	d905      	bls.n	800baee <_Z23StringFromOrdinalNumberj+0x32>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b0d      	cmp	r3, #13
 800bae6:	d802      	bhi.n	800baee <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800bae8:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <_Z23StringFromOrdinalNumberj+0x74>)
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	e013      	b.n	800bb16 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d102      	bne.n	800bafa <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800baf4:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <_Z23StringFromOrdinalNumberj+0x78>)
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	e00d      	b.n	800bb16 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d102      	bne.n	800bb06 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <_Z23StringFromOrdinalNumberj+0x7c>)
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e007      	b.n	800bb16 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d102      	bne.n	800bb12 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800bb0c:	4b0b      	ldr	r3, [pc, #44]	; (800bb3c <_Z23StringFromOrdinalNumberj+0x80>)
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	e001      	b.n	800bb16 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800bb12:	4b07      	ldr	r3, [pc, #28]	; (800bb30 <_Z23StringFromOrdinalNumberj+0x74>)
 800bb14:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	4908      	ldr	r1, [pc, #32]	; (800bb40 <_Z23StringFromOrdinalNumberj+0x84>)
 800bb1e:	f7ff fe03 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	cccccccd 	.word	0xcccccccd
 800bb30:	0802189c 	.word	0x0802189c
 800bb34:	080218a0 	.word	0x080218a0
 800bb38:	080218a4 	.word	0x080218a4
 800bb3c:	080218a8 	.word	0x080218a8
 800bb40:	080218ac 	.word	0x080218ac

0800bb44 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4907      	ldr	r1, [pc, #28]	; (800bb70 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe fd29 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	60da      	str	r2, [r3, #12]
}
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	080217b4 	.word	0x080217b4

0800bb74 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d01e      	beq.n	800bbc4 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3b04      	subs	r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	18d4      	adds	r4, r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429c      	cmp	r4, r3
 800bb9c:	d004      	beq.n	800bba8 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800bb9e:	3c08      	subs	r4, #8
 800bba0:	4620      	mov	r0, r4
 800bba2:	f7ff f8ba 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800bba6:	e7f6      	b.n	800bb96 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f1a3 0208 	sub.w	r2, r3, #8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3b04      	subs	r3, #4
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	f7fc f976 	bl	8007eb0 <_ZdaPvj>

    size_ = _size;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68dc      	ldr	r4, [r3, #12]
 800bbce:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800bbd2:	d202      	bcs.n	800bbda <_ZN22SimpleStringCollection8allocateEj+0x66>
 800bbd4:	1c63      	adds	r3, r4, #1
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	e001      	b.n	800bbde <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800bbda:	f04f 33ff 	mov.w	r3, #4294967295
 800bbde:	f240 4227 	movw	r2, #1063	; 0x427
 800bbe2:	4910      	ldr	r1, [pc, #64]	; (800bc24 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fc f941 	bl	8007e6c <_ZnajPKci>
 800bbea:	4605      	mov	r5, r0
 800bbec:	1d2b      	adds	r3, r5, #4
 800bbee:	3b04      	subs	r3, #4
 800bbf0:	2208      	movs	r2, #8
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	1d2b      	adds	r3, r5, #4
 800bbf6:	601c      	str	r4, [r3, #0]
 800bbf8:	f105 0308 	add.w	r3, r5, #8
 800bbfc:	1e62      	subs	r2, r4, #1
 800bbfe:	4614      	mov	r4, r2
 800bc00:	461e      	mov	r6, r3
 800bc02:	2c00      	cmp	r4, #0
 800bc04:	db06      	blt.n	800bc14 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800bc06:	4908      	ldr	r1, [pc, #32]	; (800bc28 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7fe fcce 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800bc0e:	3608      	adds	r6, #8
 800bc10:	3c01      	subs	r4, #1
 800bc12:	e7f6      	b.n	800bc02 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800bc14:	f105 0208 	add.w	r2, r5, #8
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	601a      	str	r2, [r3, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc24:	080216f4 	.word	0x080216f4
 800bc28:	080217b4 	.word	0x080217b4

0800bc2c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01e      	beq.n	800bc7a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3b04      	subs	r3, #4
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	00db      	lsls	r3, r3, #3
 800bc4a:	18d4      	adds	r4, r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	429c      	cmp	r4, r3
 800bc52:	d004      	beq.n	800bc5e <_ZN22SimpleStringCollectionD1Ev+0x32>
 800bc54:	3c08      	subs	r4, #8
 800bc56:	4620      	mov	r0, r4
 800bc58:	f7ff f85f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800bc5c:	e7f6      	b.n	800bc4c <_ZN22SimpleStringCollectionD1Ev+0x20>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f1a3 0208 	sub.w	r2, r3, #8
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	4619      	mov	r1, r3
 800bc74:	4610      	mov	r0, r2
 800bc76:	f7fc f91b 	bl	8007eb0 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff f84b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd90      	pop	{r4, r7, pc}

0800bc8e <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
    return size_;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	68db      	ldr	r3, [r3, #12]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
	...

0800bca8 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800bca8:	b590      	push	{r4, r7, lr}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d315      	bcc.n	800bce8 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	1d1c      	adds	r4, r3, #4
 800bcc0:	f107 0308 	add.w	r3, r7, #8
 800bcc4:	490d      	ldr	r1, [pc, #52]	; (800bcfc <_ZN22SimpleStringCollectionixEj+0x54>)
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fc6f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800bccc:	f107 0308 	add.w	r3, r7, #8
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f7fe fcd5 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800bcd8:	f107 0308 	add.w	r3, r7, #8
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff f81c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        return empty_;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3304      	adds	r3, #4
 800bce6:	e004      	b.n	800bcf2 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd90      	pop	{r4, r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	080217b4 	.word	0x080217b4

0800bd00 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fa fb88 	bl	8006420 <_ZN17ConsoleTestOutputC1Ev>
 800bd10:	4a08      	ldr	r2, [pc, #32]	; (800bd34 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	611a      	str	r2, [r3, #16]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	4905      	ldr	r1, [pc, #20]	; (800bd38 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe fc41 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
{
}
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	08024bd8 	.word	0x08024bd8
 800bd38:	080218b4 	.word	0x080218b4

0800bd3c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	4a08      	ldr	r2, [pc, #32]	; (800bd68 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3314      	adds	r3, #20
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe ffe3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fa fb74 	bl	8006444 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	08024bd8 	.word	0x08024bd8

0800bd6c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
}
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ffe1 	bl	800bd3c <_ZN18TeamCityTestOutputD1Ev>
 800bd7a:	211c      	movs	r1, #28
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7fc f865 	bl	8007e4c <_ZdlPvj>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	332c      	adds	r3, #44	; 0x2c
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	492b      	ldr	r1, [pc, #172]	; (800be50 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800bda2:	4610      	mov	r0, r2
 800bda4:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800bda6:	f107 0308 	add.w	r3, r7, #8
 800bdaa:	6839      	ldr	r1, [r7, #0]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f004 fdf7 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800bdb2:	f107 0308 	add.w	r3, r7, #8
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe ff82 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f919 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bdc6:	f107 0308 	add.w	r3, r7, #8
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe ffa5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	332c      	adds	r3, #44	; 0x2c
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	491e      	ldr	r1, [pc, #120]	; (800be54 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
    if (!test.willRun()) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3318      	adds	r3, #24
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6838      	ldr	r0, [r7, #0]
 800bdea:	4798      	blx	r3
 800bdec:	4603      	mov	r3, r0
 800bdee:	f083 0301 	eor.w	r3, r3, #1
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d024      	beq.n	800be42 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	332c      	adds	r3, #44	; 0x2c
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4915      	ldr	r1, [pc, #84]	; (800be58 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800be04:	4610      	mov	r0, r2
 800be06:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800be08:	f107 0310 	add.w	r3, r7, #16
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	4618      	mov	r0, r3
 800be10:	f004 fdc6 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800be14:	f107 0310 	add.w	r3, r7, #16
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe ff51 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800be1e:	4603      	mov	r3, r0
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 f8e8 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800be28:	f107 0310 	add.w	r3, r7, #16
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fe ff74 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        print("']\n");
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	332c      	adds	r3, #44	; 0x2c
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4905      	ldr	r1, [pc, #20]	; (800be54 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800be3e:	4610      	mov	r0, r2
 800be40:	4798      	blx	r3
    }
    currtest_ = &test;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	611a      	str	r2, [r3, #16]
}
 800be48:	bf00      	nop
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	080218b8 	.word	0x080218b8
 800be54:	080218d8 	.word	0x080218d8
 800be58:	080218dc 	.word	0x080218dc

0800be5c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800be5c:	b5b0      	push	{r4, r5, r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d03b      	beq.n	800bee6 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	332c      	adds	r3, #44	; 0x2c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	491d      	ldr	r1, [pc, #116]	; (800bef0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800be7a:	4610      	mov	r0, r2
 800be7c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691a      	ldr	r2, [r3, #16]
 800be82:	f107 0308 	add.w	r3, r7, #8
 800be86:	4611      	mov	r1, r2
 800be88:	4618      	mov	r0, r3
 800be8a:	f004 fd89 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800be8e:	f107 0308 	add.w	r3, r7, #8
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe ff14 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800be98:	4603      	mov	r3, r0
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f8ab 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bea2:	f107 0308 	add.w	r3, r7, #8
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe ff37 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	332c      	adds	r3, #44	; 0x2c
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	490f      	ldr	r1, [pc, #60]	; (800bef4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800bebc:	687d      	ldr	r5, [r7, #4]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3334      	adds	r3, #52	; 0x34
 800bec4:	681c      	ldr	r4, [r3, #0]
 800bec6:	6838      	ldr	r0, [r7, #0]
 800bec8:	f004 fa0a 	bl	80102e0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800becc:	4603      	mov	r3, r0
 800bece:	4619      	mov	r1, r3
 800bed0:	4628      	mov	r0, r5
 800bed2:	47a0      	blx	r4
    print("']\n");
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	332c      	adds	r3, #44	; 0x2c
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4906      	ldr	r1, [pc, #24]	; (800bef8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
 800bee4:	e000      	b.n	800bee8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800bee6:	bf00      	nop
}
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bdb0      	pop	{r4, r5, r7, pc}
 800beee:	bf00      	nop
 800bef0:	080218fc 	.word	0x080218fc
 800bef4:	0802191c 	.word	0x0802191c
 800bef8:	080218d8 	.word	0x080218d8

0800befc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800befc:	b590      	push	{r4, r7, lr}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f103 0414 	add.w	r4, r3, #20
 800bf0c:	f107 0308 	add.w	r3, r7, #8
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f004 fd53 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800bf18:	f107 0308 	add.w	r3, r7, #8
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7fe fbaf 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800bf24:	f107 0308 	add.w	r3, r7, #8
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe fef6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	332c      	adds	r3, #44	; 0x2c
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	490c      	ldr	r1, [pc, #48]	; (800bf6c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3314      	adds	r3, #20
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe febc 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f853 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	332c      	adds	r3, #44	; 0x2c
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4904      	ldr	r1, [pc, #16]	; (800bf70 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4798      	blx	r3
}
 800bf62:	bf00      	nop
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd90      	pop	{r4, r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	0802192c 	.word	0x0802192c
 800bf70:	080218d8 	.word	0x080218d8

0800bf74 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800bf74:	b590      	push	{r4, r7, lr}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f103 0414 	add.w	r4, r3, #20
 800bf84:	f107 0308 	add.w	r3, r7, #8
 800bf88:	4918      	ldr	r1, [pc, #96]	; (800bfec <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fb0d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800bf90:	f107 0308 	add.w	r3, r7, #8
 800bf94:	4619      	mov	r1, r3
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7fe fecb 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	461c      	mov	r4, r3
 800bfa0:	f107 0308 	add.w	r3, r7, #8
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe feb8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800bfaa:	2c00      	cmp	r4, #0
 800bfac:	d11a      	bne.n	800bfe4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	332c      	adds	r3, #44	; 0x2c
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	490d      	ldr	r1, [pc, #52]	; (800bff0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800bfba:	4610      	mov	r0, r2
 800bfbc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3314      	adds	r3, #20
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe fe7c 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f813 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	332c      	adds	r3, #44	; 0x2c
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4905      	ldr	r1, [pc, #20]	; (800bff4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800bfde:	4610      	mov	r0, r2
 800bfe0:	4798      	blx	r3
 800bfe2:	e000      	b.n	800bfe6 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800bfe4:	bf00      	nop
}
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd90      	pop	{r4, r7, pc}
 800bfec:	080218b4 	.word	0x080218b4
 800bff0:	08021950 	.word	0x08021950
 800bff4:	080218d8 	.word	0x080218d8

0800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
    while (*s) {
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d03f      	beq.n	800c08a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	2b27      	cmp	r3, #39	; 0x27
 800c010:	d00b      	beq.n	800c02a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b7c      	cmp	r3, #124	; 0x7c
 800c018:	d007      	beq.n	800c02a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b5b      	cmp	r3, #91	; 0x5b
 800c020:	d003      	beq.n	800c02a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b5d      	cmp	r3, #93	; 0x5d
 800c028:	d107      	bne.n	800c03a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800c02a:	237c      	movs	r3, #124	; 0x7c
 800c02c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	73bb      	strb	r3, [r7, #14]
 800c038:	e01a      	b.n	800c070 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2b0d      	cmp	r3, #13
 800c040:	d106      	bne.n	800c050 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800c042:	237c      	movs	r3, #124	; 0x7c
 800c044:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800c046:	2372      	movs	r3, #114	; 0x72
 800c048:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73bb      	strb	r3, [r7, #14]
 800c04e:	e00f      	b.n	800c070 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b0a      	cmp	r3, #10
 800c056:	d106      	bne.n	800c066 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800c058:	237c      	movs	r3, #124	; 0x7c
 800c05a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800c05c:	236e      	movs	r3, #110	; 0x6e
 800c05e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	73bb      	strb	r3, [r7, #14]
 800c064:	e004      	b.n	800c070 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3328      	adds	r3, #40	; 0x28
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f107 010c 	add.w	r1, r7, #12
 800c07e:	4610      	mov	r0, r2
 800c080:	4798      	blx	r3
        s++;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	3301      	adds	r3, #1
 800c086:	603b      	str	r3, [r7, #0]
    while (*s) {
 800c088:	e7bb      	b.n	800c002 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800c094:	b5b0      	push	{r4, r5, r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	332c      	adds	r3, #44	; 0x2c
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4968      	ldr	r1, [pc, #416]	; (800c24c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3310      	adds	r3, #16
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f107 0208 	add.w	r2, r7, #8
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
 800c0c0:	f107 0308 	add.w	r3, r7, #8
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fdfb 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff ff92 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c0d4:	f107 0308 	add.w	r3, r7, #8
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe fe1e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    print("' message='");
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	332c      	adds	r3, #44	; 0x2c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4959      	ldr	r1, [pc, #356]	; (800c250 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800c0ee:	6838      	ldr	r0, [r7, #0]
 800c0f0:	f000 fa15 	bl	800c51e <_ZNK11TestFailure17isOutsideTestFileEv>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800c0fa:	6838      	ldr	r0, [r7, #0]
 800c0fc:	f000 fa21 	bl	800c542 <_ZNK11TestFailure18isInHelperFunctionEv>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800c106:	2301      	movs	r3, #1
 800c108:	e000      	b.n	800c10c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800c10a:	2300      	movs	r3, #0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d042      	beq.n	800c196 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	332c      	adds	r3, #44	; 0x2c
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	494e      	ldr	r1, [pc, #312]	; (800c254 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800c11c:	4610      	mov	r0, r2
 800c11e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800c120:	687d      	ldr	r5, [r7, #4]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	332c      	adds	r3, #44	; 0x2c
 800c128:	681c      	ldr	r4, [r3, #0]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	331c      	adds	r3, #28
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f107 0210 	add.w	r2, r7, #16
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	4610      	mov	r0, r2
 800c13a:	4798      	blx	r3
 800c13c:	f107 0310 	add.w	r3, r7, #16
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fdbd 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c146:	4603      	mov	r3, r0
 800c148:	4619      	mov	r1, r3
 800c14a:	4628      	mov	r0, r5
 800c14c:	47a0      	blx	r4
 800c14e:	f107 0310 	add.w	r3, r7, #16
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fde1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        print(":");
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	332c      	adds	r3, #44	; 0x2c
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	493d      	ldr	r1, [pc, #244]	; (800c258 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c164:	4610      	mov	r0, r2
 800c166:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800c168:	687d      	ldr	r5, [r7, #4]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3334      	adds	r3, #52	; 0x34
 800c170:	681c      	ldr	r4, [r3, #0]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3320      	adds	r3, #32
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	6838      	ldr	r0, [r7, #0]
 800c17c:	4798      	blx	r3
 800c17e:	4603      	mov	r3, r0
 800c180:	4619      	mov	r1, r3
 800c182:	4628      	mov	r0, r5
 800c184:	47a0      	blx	r4
        print("): ");
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	332c      	adds	r3, #44	; 0x2c
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4932      	ldr	r1, [pc, #200]	; (800c25c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800c192:	4610      	mov	r0, r2
 800c194:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3308      	adds	r3, #8
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f107 0218 	add.w	r2, r7, #24
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	4798      	blx	r3
 800c1a8:	f107 0318 	add.w	r3, r7, #24
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe fd87 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff ff1e 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c1bc:	f107 0318 	add.w	r3, r7, #24
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe fdaa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    print(":");
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	332c      	adds	r3, #44	; 0x2c
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4921      	ldr	r1, [pc, #132]	; (800c258 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800c1d6:	687d      	ldr	r5, [r7, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3334      	adds	r3, #52	; 0x34
 800c1de:	681c      	ldr	r4, [r3, #0]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6838      	ldr	r0, [r7, #0]
 800c1ea:	4798      	blx	r3
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47a0      	blx	r4

    print("' details='");
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	332c      	adds	r3, #44	; 0x2c
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4918      	ldr	r1, [pc, #96]	; (800c260 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800c200:	4610      	mov	r0, r2
 800c202:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3318      	adds	r3, #24
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f107 0220 	add.w	r2, r7, #32
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	4610      	mov	r0, r2
 800c214:	4798      	blx	r3
 800c216:	f107 0320 	add.w	r3, r7, #32
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe fd50 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c220:	4603      	mov	r3, r0
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff fee7 	bl	800bff8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c22a:	f107 0320 	add.w	r3, r7, #32
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fd73 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	332c      	adds	r3, #44	; 0x2c
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4909      	ldr	r1, [pc, #36]	; (800c264 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
}
 800c244:	bf00      	nop
 800c246:	3728      	adds	r7, #40	; 0x28
 800c248:	46bd      	mov	sp, r7
 800c24a:	bdb0      	pop	{r4, r5, r7, pc}
 800c24c:	08021974 	.word	0x08021974
 800c250:	08021994 	.word	0x08021994
 800c254:	080219a0 	.word	0x080219a0
 800c258:	080219b0 	.word	0x080219b0
 800c25c:	080219b4 	.word	0x080219b4
 800c260:	080219b8 	.word	0x080219b8
 800c264:	080218d8 	.word	0x080218d8

0800c268 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800c274:	4a1a      	ldr	r2, [pc, #104]	; (800c2e0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3314      	adds	r3, #20
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	3204      	adds	r2, #4
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	4610      	mov	r0, r2
 800c28a:	4798      	blx	r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	330c      	adds	r3, #12
 800c290:	68b9      	ldr	r1, [r7, #8]
 800c292:	4618      	mov	r0, r3
 800c294:	f004 fb84 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	3314      	adds	r3, #20
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f004 fc4f 	bl	8010b42 <_ZNK10UtestShell7getFileEv>
 800c2a4:	68b8      	ldr	r0, [r7, #8]
 800c2a6:	f004 fc5b 	bl	8010b60 <_ZNK10UtestShell13getLineNumberEv>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	61da      	str	r2, [r3, #28]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3320      	adds	r3, #32
 800c2b4:	68b9      	ldr	r1, [r7, #8]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f004 fc43 	bl	8010b42 <_ZNK10UtestShell7getFileEv>
 800c2bc:	68b8      	ldr	r0, [r7, #8]
 800c2be:	f004 fc4f 	bl	8010b60 <_ZNK10UtestShell13getLineNumberEv>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	629a      	str	r2, [r3, #40]	; 0x28
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	332c      	adds	r3, #44	; 0x2c
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe f9bf 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
{
}
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	08024ea4 	.word	0x08024ea4

0800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800c2f2:	4a19      	ldr	r2, [pc, #100]	; (800c358 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3314      	adds	r3, #20
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	3204      	adds	r2, #4
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	4610      	mov	r0, r2
 800c308:	4798      	blx	r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	330c      	adds	r3, #12
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	4618      	mov	r0, r3
 800c312:	f004 fb45 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3314      	adds	r3, #20
 800c31a:	6879      	ldr	r1, [r7, #4]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe f944 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	61da      	str	r2, [r3, #28]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3320      	adds	r3, #32
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	4618      	mov	r0, r3
 800c330:	f004 fc07 	bl	8010b42 <_ZNK10UtestShell7getFileEv>
 800c334:	68b8      	ldr	r0, [r7, #8]
 800c336:	f004 fc13 	bl	8010b60 <_ZNK10UtestShell13getLineNumberEv>
 800c33a:	4602      	mov	r2, r0
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	629a      	str	r2, [r3, #40]	; 0x28
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	332c      	adds	r3, #44	; 0x2c
 800c344:	4905      	ldr	r1, [pc, #20]	; (800c35c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800c346:	4618      	mov	r0, r3
 800c348:	f7fe f92f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
{
}
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	08024ea4 	.word	0x08024ea4
 800c35c:	080219c4 	.word	0x080219c4

0800c360 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800c36a:	4a1e      	ldr	r2, [pc, #120]	; (800c3e4 <_ZN11TestFailureC1ERKS_+0x84>)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	1d1a      	adds	r2, r3, #4
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fe f969 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f103 020c 	add.w	r2, r3, #12
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	330c      	adds	r3, #12
 800c38a:	4619      	mov	r1, r3
 800c38c:	4610      	mov	r0, r2
 800c38e:	f7fe f960 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f103 0214 	add.w	r2, r3, #20
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	3314      	adds	r3, #20
 800c39c:	4619      	mov	r1, r3
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7fe f957 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	69da      	ldr	r2, [r3, #28]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	61da      	str	r2, [r3, #28]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f103 0220 	add.w	r2, r3, #32
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	3320      	adds	r3, #32
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f7fe f94a 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	629a      	str	r2, [r3, #40]	; 0x28
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	332c      	adds	r3, #44	; 0x2c
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4610      	mov	r0, r2
 800c3d4:	f7fe f93d 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
{
}
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	08024ea4 	.word	0x08024ea4

0800c3e8 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	4a10      	ldr	r2, [pc, #64]	; (800c434 <_ZN11TestFailureD1Ev+0x4c>)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	601a      	str	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	332c      	adds	r3, #44	; 0x2c
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fc8d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3320      	adds	r3, #32
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fc88 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	3314      	adds	r3, #20
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe fc83 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	330c      	adds	r3, #12
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe fc7e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3304      	adds	r3, #4
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fc79 	bl	800ad1a <_ZN12SimpleStringD1Ev>
{
}
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	08024ea4 	.word	0x08024ea4

0800c438 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
}
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff ffd1 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800c446:	2134      	movs	r1, #52	; 0x34
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7fb fcff 	bl	8007e4c <_ZdlPvj>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
    return fileName_;
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	3314      	adds	r3, #20
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7fe f8f2 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	3320      	adds	r3, #32
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f7fe f8e3 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
    return testName_;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7fe f8d4 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	330c      	adds	r3, #12
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7fe f8c5 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	69db      	ldr	r3, [r3, #28]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
    return message_;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	332c      	adds	r3, #44	; 0x2c
 800c50e:	4619      	mov	r1, r3
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7fe f89e 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f103 0220 	add.w	r2, r3, #32
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	3314      	adds	r3, #20
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f7fe fc42 	bl	800adbc <_ZneRK12SimpleStringS1_>
 800c538:	4603      	mov	r3, r0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69da      	ldr	r2, [r3, #28]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c552:	429a      	cmp	r2, r3
 800c554:	bf34      	ite	cc
 800c556:	2301      	movcc	r3, #1
 800c558:	2300      	movcs	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800c568:	b590      	push	{r4, r7, lr}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7fe fba2 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c57c:	4604      	mov	r4, r0
 800c57e:	6838      	ldr	r0, [r7, #0]
 800c580:	f7fe fb9e 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c584:	4603      	mov	r3, r0
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	4622      	mov	r2, r4
 800c58a:	4903      	ldr	r1, [pc, #12]	; (800c598 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800c58c:	f7ff f8cc 	bl	800b728 <_Z16StringFromFormatPKcz>
}
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	bd90      	pop	{r4, r7, pc}
 800c598:	080219d0 	.word	0x080219d0

0800c59c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b097      	sub	sp, #92	; 0x5c
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c5aa:	494c      	ldr	r1, [pc, #304]	; (800c6dc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f7fd fffc 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800c5b2:	2314      	movs	r3, #20
 800c5b4:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800c5b6:	230a      	movs	r3, #10
 800c5b8:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800c5ba:	f107 0320 	add.w	r3, r7, #32
 800c5be:	220a      	movs	r2, #10
 800c5c0:	4947      	ldr	r1, [pc, #284]	; (800c6e0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fe f80c 	bl	800a5e0 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800c5c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5cc:	f107 0120 	add.w	r1, r7, #32
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fc03 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800c5d8:	f107 0318 	add.w	r3, r7, #24
 800c5dc:	f107 0220 	add.w	r2, r7, #32
 800c5e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe fbfa 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800c5ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe fb93 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800c5f4:	f107 0310 	add.w	r3, r7, #16
 800c5f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5fa:	493a      	ldr	r1, [pc, #232]	; (800c6e4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff f893 	bl	800b728 <_Z16StringFromFormatPKcz>

    result += "\n";
 800c602:	4939      	ldr	r1, [pc, #228]	; (800c6e8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7fe fc17 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800c60a:	f107 0310 	add.w	r3, r7, #16
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fb56 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c614:	4604      	mov	r4, r0
 800c616:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800c61a:	f107 0118 	add.w	r1, r7, #24
 800c61e:	2314      	movs	r3, #20
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	f7fe fc83 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
 800c626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fb48 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c630:	4603      	mov	r3, r0
 800c632:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c636:	4622      	mov	r2, r4
 800c638:	492c      	ldr	r1, [pc, #176]	; (800c6ec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800c63a:	f7ff f875 	bl	800b728 <_Z16StringFromFormatPKcz>
 800c63e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c642:	4619      	mov	r1, r3
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f7fe fbe5 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800c64a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe fb63 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fe fb5e 	bl	800ad1a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800c65e:	f107 0310 	add.w	r3, r7, #16
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe fb38 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800c668:	4603      	mov	r3, r0
 800c66a:	f103 020a 	add.w	r2, r3, #10
 800c66e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c672:	491b      	ldr	r1, [pc, #108]	; (800c6e0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800c674:	4618      	mov	r0, r3
 800c676:	f7fd ffb3 	bl	800a5e0 <_ZN12SimpleStringC1EPKcj>
 800c67a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe fb1e 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c684:	4602      	mov	r2, r0
 800c686:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c68a:	4919      	ldr	r1, [pc, #100]	; (800c6f0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff f84b 	bl	800b728 <_Z16StringFromFormatPKcz>
 800c692:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c696:	4619      	mov	r1, r3
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7fe fbbb 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800c69e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe fb39 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c6a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe fb34 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return result;
 800c6b2:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800c6b4:	f107 0310 	add.w	r3, r7, #16
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe fb2e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800c6be:	f107 0318 	add.w	r3, r7, #24
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe fb29 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800c6c8:	f107 0320 	add.w	r3, r7, #32
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe fb24 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return result;
 800c6d2:	bf00      	nop
}
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	375c      	adds	r7, #92	; 0x5c
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd90      	pop	{r4, r7, pc}
 800c6dc:	080219f0 	.word	0x080219f0
 800c6e0:	080219f4 	.word	0x080219f4
 800c6e4:	080219f8 	.word	0x080219f8
 800c6e8:	08021a20 	.word	0x08021a20
 800c6ec:	08021a24 	.word	0x08021a24
 800c6f0:	08021a2c 	.word	0x08021a2c

0800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800c6f4:	b590      	push	{r4, r7, lr}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800c700:	491a      	ldr	r1, [pc, #104]	; (800c76c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f7fd ff51 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7fe faf5 	bl	800acf8 <_ZNK12SimpleString7isEmptyEv>
 800c70e:	4603      	mov	r3, r0
 800c710:	f083 0301 	eor.w	r3, r3, #1
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b00      	cmp	r3, #0
 800c718:	d022      	beq.n	800c760 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800c71a:	f107 0310 	add.w	r3, r7, #16
 800c71e:	4914      	ldr	r1, [pc, #80]	; (800c770 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800c720:	4618      	mov	r0, r3
 800c722:	f7fd ff42 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800c726:	f107 0310 	add.w	r3, r7, #16
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7fe f800 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 800c732:	4603      	mov	r3, r0
 800c734:	f083 0301 	eor.w	r3, r3, #1
 800c738:	b2dc      	uxtb	r4, r3
 800c73a:	f107 0310 	add.w	r3, r7, #16
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe faeb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c744:	2c00      	cmp	r4, #0
 800c746:	d003      	beq.n	800c750 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800c748:	490a      	ldr	r1, [pc, #40]	; (800c774 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f7fe fb74 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f7fe fb5e 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800c758:	4907      	ldr	r1, [pc, #28]	; (800c778 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7fe fb6c 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800c760:	bf00      	nop
}
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	bd90      	pop	{r4, r7, pc}
 800c76a:	bf00      	nop
 800c76c:	080219f0 	.word	0x080219f0
 800c770:	08021a34 	.word	0x08021a34
 800c774:	08021a40 	.word	0x08021a40
 800c778:	08021a4c 	.word	0x08021a4c

0800c77c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b089      	sub	sp, #36	; 0x24
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	68b9      	ldr	r1, [r7, #8]
 800c792:	f7ff fda7 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c796:	4a19      	ldr	r2, [pc, #100]	; (800c7fc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7a2:	68f9      	ldr	r1, [r7, #12]
 800c7a4:	f107 0310 	add.w	r3, r7, #16
 800c7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff ffa2 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c7b0:	f107 0310 	add.w	r3, r7, #16
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f7fd ff63 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800c7bc:	f107 0310 	add.w	r3, r7, #16
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe faaa 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7cc:	68f9      	ldr	r1, [r7, #12]
 800c7ce:	f107 0018 	add.w	r0, r7, #24
 800c7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7d6:	f7ff fec7 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c7da:	f107 0318 	add.w	r3, r7, #24
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f7fe fb17 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800c7e6:	f107 0318 	add.w	r3, r7, #24
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fa95 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3724      	adds	r7, #36	; 0x24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd90      	pop	{r4, r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	08024e78 	.word	0x08024e78

0800c800 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800c800:	b5b0      	push	{r4, r5, r7, lr}
 800c802:	b094      	sub	sp, #80	; 0x50
 800c804:	af00      	add	r7, sp, #0
 800c806:	6278      	str	r0, [r7, #36]	; 0x24
 800c808:	6239      	str	r1, [r7, #32]
 800c80a:	61fa      	str	r2, [r7, #28]
 800c80c:	61bb      	str	r3, [r7, #24]
 800c80e:	ed87 0b04 	vstr	d0, [r7, #16]
 800c812:	ed87 1b02 	vstr	d1, [r7, #8]
 800c816:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800c81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	69fa      	ldr	r2, [r7, #28]
 800c820:	6a39      	ldr	r1, [r7, #32]
 800c822:	f7ff fd5f 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c826:	4a4a      	ldr	r2, [pc, #296]	; (800c950 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff ff5a 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c844:	4619      	mov	r1, r3
 800c846:	4620      	mov	r0, r4
 800c848:	f7fd ff1b 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800c84c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe fa62 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c85c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c85e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c862:	2107      	movs	r1, #7
 800c864:	ed97 0b04 	vldr	d0, [r7, #16]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe ff1b 	bl	800b6a4 <_Z10StringFromdi>
 800c86e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c872:	2107      	movs	r1, #7
 800c874:	ed97 0b02 	vldr	d0, [r7, #8]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe ff13 	bl	800b6a4 <_Z10StringFromdi>
 800c87e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c886:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c88a:	4629      	mov	r1, r5
 800c88c:	f7ff fe6c 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c894:	4619      	mov	r1, r3
 800c896:	4620      	mov	r0, r4
 800c898:	f7fe fabc 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800c89c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fe fa3a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c8a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe fa35 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800c8b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe fa30 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8bc:	332c      	adds	r3, #44	; 0x2c
 800c8be:	4925      	ldr	r1, [pc, #148]	; (800c954 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fe fab9 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c8cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8d0:	2107      	movs	r1, #7
 800c8d2:	ed97 0b00 	vldr	d0, [r7]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe fee4 	bl	800b6a4 <_Z10StringFromdi>
 800c8dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7fe fa96 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800c8e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe fa14 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	332c      	adds	r3, #44	; 0x2c
 800c8f6:	4918      	ldr	r1, [pc, #96]	; (800c958 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe fa9d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800c8fe:	4b17      	ldr	r3, [pc, #92]	; (800c95c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	ed97 0b04 	vldr	d0, [r7, #16]
 800c906:	4798      	blx	r3
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10f      	bne.n	800c92e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800c90e:	4b13      	ldr	r3, [pc, #76]	; (800c95c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	ed97 0b02 	vldr	d0, [r7, #8]
 800c916:	4798      	blx	r3
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d107      	bne.n	800c92e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800c91e:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	ed97 0b00 	vldr	d0, [r7]
 800c926:	4798      	blx	r3
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800c92e:	2301      	movs	r3, #1
 800c930:	e000      	b.n	800c934 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800c932:	2300      	movs	r3, #0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d005      	beq.n	800c944 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	332c      	adds	r3, #44	; 0x2c
 800c93c:	4908      	ldr	r1, [pc, #32]	; (800c960 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fe fa7a 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
}
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	4618      	mov	r0, r3
 800c948:	3750      	adds	r7, #80	; 0x50
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bdb0      	pop	{r4, r5, r7, pc}
 800c94e:	bf00      	nop
 800c950:	08024e4c 	.word	0x08024e4c
 800c954:	08021a50 	.word	0x08021a50
 800c958:	08021a68 	.word	0x08021a68
 800c95c:	200000e4 	.word	0x200000e4
 800c960:	08021a6c 	.word	0x08021a6c

0800c964 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c964:	b590      	push	{r4, r7, lr}
 800c966:	b093      	sub	sp, #76	; 0x4c
 800c968:	af02      	add	r7, sp, #8
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	68b9      	ldr	r1, [r7, #8]
 800c97a:	f7ff fcb3 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c97e:	4a4f      	ldr	r2, [pc, #316]	; (800cabc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c98a:	68f9      	ldr	r1, [r7, #12]
 800c98c:	f107 0320 	add.w	r3, r7, #32
 800c990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c992:	4618      	mov	r0, r3
 800c994:	f7ff feae 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c998:	f107 0320 	add.w	r3, r7, #32
 800c99c:	4619      	mov	r1, r3
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f7fd fe6f 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800c9a4:	f107 0320 	add.w	r3, r7, #32
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fe f9b6 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c9ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c9b0:	f7fe f986 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	f107 0318 	add.w	r3, r7, #24
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fe fc47 	bl	800b250 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c9c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9c4:	f7fe f97c 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	f107 0310 	add.w	r3, r7, #16
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fc3d 	bl	800b250 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c9dc:	68f9      	ldr	r1, [r7, #12]
 800c9de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c9e2:	f107 0310 	add.w	r3, r7, #16
 800c9e6:	f107 0218 	add.w	r2, r7, #24
 800c9ea:	f7ff fdbd 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c9ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7fe fa0d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800c9fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe f98b 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800ca04:	2300      	movs	r3, #0
 800ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca0c:	f7fe fae9 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800ca10:	4603      	mov	r3, r0
 800ca12:	461c      	mov	r4, r3
 800ca14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ca18:	f7fe fae3 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	429c      	cmp	r4, r3
 800ca20:	bf0c      	ite	eq
 800ca22:	2301      	moveq	r3, #1
 800ca24:	2300      	movne	r3, #0
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800ca2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2e:	3301      	adds	r3, #1
 800ca30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca32:	e7e9      	b.n	800ca08 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800ca34:	2300      	movs	r3, #0
 800ca36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca38:	f107 0310 	add.w	r3, r7, #16
 800ca3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe facf 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800ca44:	4603      	mov	r3, r0
 800ca46:	461c      	mov	r4, r3
 800ca48:	f107 0318 	add.w	r3, r7, #24
 800ca4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fac7 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800ca54:	4603      	mov	r3, r0
 800ca56:	429c      	cmp	r4, r3
 800ca58:	bf0c      	ite	eq
 800ca5a:	2301      	moveq	r3, #1
 800ca5c:	2300      	movne	r3, #0
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	3301      	adds	r3, #1
 800ca68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca6a:	e7e5      	b.n	800ca38 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ca72:	68f9      	ldr	r1, [r7, #12]
 800ca74:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ca78:	f107 0210 	add.w	r2, r7, #16
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f7ff fd8b 	bl	800c59c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ca86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f7fe f9c1 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800ca92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe f93f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800ca9c:	f107 0310 	add.w	r3, r7, #16
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe f93a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800caa6:	f107 0318 	add.w	r3, r7, #24
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fe f935 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4618      	mov	r0, r3
 800cab4:	3744      	adds	r7, #68	; 0x44
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd90      	pop	{r4, r7, pc}
 800caba:	bf00      	nop
 800cabc:	08024e20 	.word	0x08024e20

0800cac0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800cac0:	b590      	push	{r4, r7, lr}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	68b9      	ldr	r1, [r7, #8]
 800cad6:	f7ff fc05 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cada:	4a1a      	ldr	r2, [pc, #104]	; (800cb44 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cae6:	68f9      	ldr	r1, [r7, #12]
 800cae8:	f107 0310 	add.w	r3, r7, #16
 800caec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff fe00 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800caf4:	f107 0310 	add.w	r3, r7, #16
 800caf8:	4619      	mov	r1, r3
 800cafa:	4620      	mov	r0, r4
 800cafc:	f7fd fdc1 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800cb00:	f107 0310 	add.w	r3, r7, #16
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe f908 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	332c      	adds	r3, #44	; 0x2c
 800cb0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe f97f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	332c      	adds	r3, #44	; 0x2c
 800cb1a:	490b      	ldr	r1, [pc, #44]	; (800cb48 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fe f98b 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	332c      	adds	r3, #44	; 0x2c
 800cb26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe f973 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	332c      	adds	r3, #44	; 0x2c
 800cb32:	4906      	ldr	r1, [pc, #24]	; (800cb4c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe f97f 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
}
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	371c      	adds	r7, #28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd90      	pop	{r4, r7, pc}
 800cb44:	08024df4 	.word	0x08024df4
 800cb48:	08021a90 	.word	0x08021a90
 800cb4c:	08021a94 	.word	0x08021a94

0800cb50 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800cb50:	b5b0      	push	{r4, r5, r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	f7ff fbbd 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cb6a:	4a1c      	ldr	r2, [pc, #112]	; (800cbdc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	f107 0310 	add.w	r3, r7, #16
 800cb7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fdb8 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cb84:	f107 0310 	add.w	r3, r7, #16
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7fd fd79 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800cb90:	f107 0310 	add.w	r3, r7, #16
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7fe f8c0 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cba2:	f7fe f88d 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800cba6:	4605      	mov	r5, r0
 800cba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbaa:	f7fe f889 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	f107 0018 	add.w	r0, r7, #24
 800cbb4:	462a      	mov	r2, r5
 800cbb6:	490a      	ldr	r1, [pc, #40]	; (800cbe0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800cbb8:	f7fe fdb6 	bl	800b728 <_Z16StringFromFormatPKcz>
 800cbbc:	f107 0318 	add.w	r3, r7, #24
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f7fe f926 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800cbc8:	f107 0318 	add.w	r3, r7, #24
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fe f8a4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3720      	adds	r7, #32
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bdb0      	pop	{r4, r5, r7, pc}
 800cbdc:	08024dc8 	.word	0x08024dc8
 800cbe0:	08021aa0 	.word	0x08021aa0

0800cbe4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800cbe4:	b590      	push	{r4, r7, lr}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	68b9      	ldr	r1, [r7, #8]
 800cbfa:	f7ff fb73 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cbfe:	4a1a      	ldr	r2, [pc, #104]	; (800cc68 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc0a:	68f9      	ldr	r1, [r7, #12]
 800cc0c:	f107 0310 	add.w	r3, r7, #16
 800cc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff fd6e 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cc18:	f107 0310 	add.w	r3, r7, #16
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f7fd fd2f 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800cc24:	f107 0310 	add.w	r3, r7, #16
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe f876 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	332c      	adds	r3, #44	; 0x2c
 800cc32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe f8ed 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	332c      	adds	r3, #44	; 0x2c
 800cc3e:	490b      	ldr	r1, [pc, #44]	; (800cc6c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe f8f9 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	332c      	adds	r3, #44	; 0x2c
 800cc4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fe f8e1 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	332c      	adds	r3, #44	; 0x2c
 800cc56:	4906      	ldr	r1, [pc, #24]	; (800cc70 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe f8ed 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
}
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	4618      	mov	r0, r3
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd90      	pop	{r4, r7, pc}
 800cc68:	08024d9c 	.word	0x08024d9c
 800cc6c:	08021a90 	.word	0x08021a90
 800cc70:	08021a94 	.word	0x08021a94

0800cc74 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	68b9      	ldr	r1, [r7, #8]
 800cc8a:	f7ff fb2b 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cc8e:	4a07      	ldr	r2, [pc, #28]	; (800ccac <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	332c      	adds	r3, #44	; 0x2c
 800cc98:	69b9      	ldr	r1, [r7, #24]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fd fcf1 	bl	800a682 <_ZN12SimpleStringaSERKS_>
}
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	08024a58 	.word	0x08024a58

0800ccb0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800ccb0:	b590      	push	{r4, r7, lr}
 800ccb2:	b09d      	sub	sp, #116	; 0x74
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	68b9      	ldr	r1, [r7, #8]
 800ccc6:	f7ff fb0d 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ccca:	4a5d      	ldr	r2, [pc, #372]	; (800ce40 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7ff fd07 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccea:	4619      	mov	r1, r3
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7fd fcc8 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800ccf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe f80f 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ccfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd00:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe fae1 	bl	800b2cc <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800cd0a:	f107 0320 	add.w	r3, r7, #32
 800cd0e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe fada 	bl	800b2cc <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800cd18:	f107 0120 	add.w	r1, r7, #32
 800cd1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd20:	2220      	movs	r2, #32
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fe f8b6 	bl	800ae94 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cd28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cd2c:	4945      	ldr	r1, [pc, #276]	; (800ce44 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fd fc3b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800cd34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800cd3c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe f84c 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cd46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fe fbd2 	bl	800b4f8 <_Z30BracketsFormattedHexStringFroml>
 800cd54:	f107 0318 	add.w	r3, r7, #24
 800cd58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cd5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe f83c 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cd66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fd ffd5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cd70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fd ffd0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cd7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fd ffcb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800cd84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cd88:	492e      	ldr	r1, [pc, #184]	; (800ce44 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fd fc0d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800cd90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cd94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cd98:	f107 0120 	add.w	r1, r7, #32
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe f81e 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cda2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cda6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fe fba4 	bl	800b4f8 <_Z30BracketsFormattedHexStringFroml>
 800cdb0:	f107 0310 	add.w	r3, r7, #16
 800cdb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cdb8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fe f80e 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cdc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fd ffa7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cdcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fd ffa2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cdd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fd ff9d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cde6:	68f9      	ldr	r1, [r7, #12]
 800cde8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800cdec:	f107 0318 	add.w	r3, r7, #24
 800cdf0:	f107 0210 	add.w	r2, r7, #16
 800cdf4:	f7ff fbb8 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cdf8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7fe f808 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800ce04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fd ff86 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ce0e:	f107 0310 	add.w	r3, r7, #16
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fd ff81 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ce18:	f107 0318 	add.w	r3, r7, #24
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fd ff7c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800ce22:	f107 0320 	add.w	r3, r7, #32
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fd ff77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800ce2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fd ff72 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3774      	adds	r7, #116	; 0x74
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd90      	pop	{r4, r7, pc}
 800ce40:	08024d70 	.word	0x08024d70
 800ce44:	080219f4 	.word	0x080219f4

0800ce48 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b09d      	sub	sp, #116	; 0x74
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	68b9      	ldr	r1, [r7, #8]
 800ce5e:	f7ff fa41 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ce62:	4a5d      	ldr	r2, [pc, #372]	; (800cfd8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ce6e:	68f9      	ldr	r1, [r7, #12]
 800ce70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce74:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7ff fc3b 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ce7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce82:	4619      	mov	r1, r3
 800ce84:	4620      	mov	r0, r4
 800ce86:	f7fd fbfc 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800ce8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fd ff43 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ce94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce98:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fc7d 	bl	800b79c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800cea2:	f107 0320 	add.w	r3, r7, #32
 800cea6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fe fc76 	bl	800b79c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ceb0:	f107 0120 	add.w	r1, r7, #32
 800ceb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ceb8:	2220      	movs	r2, #32
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fd ffea 	bl	800ae94 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cec4:	4945      	ldr	r1, [pc, #276]	; (800cfdc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd fb6f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800cecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ced0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ced4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fd ff80 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cee2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fe fb22 	bl	800b530 <_Z30BracketsFormattedHexStringFromm>
 800ceec:	f107 0318 	add.w	r3, r7, #24
 800cef0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cef4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fd ff70 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cefe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fd ff09 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cf08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fd ff04 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cf12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fd feff 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800cf1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cf20:	492e      	ldr	r1, [pc, #184]	; (800cfdc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fd fb41 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800cf28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cf2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cf30:	f107 0120 	add.w	r1, r7, #32
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fd ff52 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cf3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cf3e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe faf4 	bl	800b530 <_Z30BracketsFormattedHexStringFromm>
 800cf48:	f107 0310 	add.w	r3, r7, #16
 800cf4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cf50:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fd ff42 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800cf5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fd fedb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cf64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fd fed6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800cf6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fd fed1 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf7e:	68f9      	ldr	r1, [r7, #12]
 800cf80:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800cf84:	f107 0318 	add.w	r3, r7, #24
 800cf88:	f107 0210 	add.w	r2, r7, #16
 800cf8c:	f7ff faec 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cf90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cf94:	4619      	mov	r1, r3
 800cf96:	4620      	mov	r0, r4
 800cf98:	f7fd ff3c 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800cf9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fd feba 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fd feb5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cfb0:	f107 0318 	add.w	r3, r7, #24
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fd feb0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800cfba:	f107 0320 	add.w	r3, r7, #32
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fd feab 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800cfc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fd fea6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3774      	adds	r7, #116	; 0x74
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd90      	pop	{r4, r7, pc}
 800cfd8:	08024d44 	.word	0x08024d44
 800cfdc:	080219f4 	.word	0x080219f4

0800cfe0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800cfe0:	b590      	push	{r4, r7, lr}
 800cfe2:	b09d      	sub	sp, #116	; 0x74
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	f7ff f975 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cffa:	4a5f      	ldr	r2, [pc, #380]	; (800d178 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d00c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d010:	4618      	mov	r0, r3
 800d012:	f7ff fb6f 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d01a:	4619      	mov	r1, r3
 800d01c:	4620      	mov	r0, r4
 800d01e:	f7fd fb30 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800d022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d026:	4618      	mov	r0, r3
 800d028:	f7fd fe77 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800d02c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d034:	4611      	mov	r1, r2
 800d036:	4618      	mov	r0, r3
 800d038:	f7fe f936 	bl	800b2a8 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800d03c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d040:	f107 0320 	add.w	r3, r7, #32
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe f92e 	bl	800b2a8 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d04c:	f107 0120 	add.w	r1, r7, #32
 800d050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d054:	2220      	movs	r2, #32
 800d056:	4618      	mov	r0, r3
 800d058:	f7fd ff1c 	bl	800ae94 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d05c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d060:	4946      	ldr	r1, [pc, #280]	; (800d17c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d062:	4618      	mov	r0, r3
 800d064:	f7fd faa1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800d068:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d06c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d070:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d074:	4618      	mov	r0, r3
 800d076:	f7fd feb2 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800d07a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d07e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d082:	4611      	mov	r1, r2
 800d084:	4618      	mov	r0, r3
 800d086:	f7fe fa6f 	bl	800b568 <_Z30BracketsFormattedHexStringFroma>
 800d08a:	f107 0318 	add.w	r3, r7, #24
 800d08e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d092:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd fea1 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800d09c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fd fe3a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d0a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fd fe35 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d0b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fd fe30 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d0ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d0be:	492f      	ldr	r1, [pc, #188]	; (800d17c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fd fa72 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800d0c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d0ce:	f107 0120 	add.w	r1, r7, #32
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fd fe83 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800d0d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d0dc:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe fa40 	bl	800b568 <_Z30BracketsFormattedHexStringFroma>
 800d0e8:	f107 0310 	add.w	r3, r7, #16
 800d0ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d0f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fd fe72 	bl	800adde <_ZNK12SimpleStringplERKS_>
 800d0fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fd fe0b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d104:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fd fe06 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d10e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d112:	4618      	mov	r0, r3
 800d114:	f7fd fe01 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d11e:	68f9      	ldr	r1, [r7, #12]
 800d120:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d124:	f107 0318 	add.w	r3, r7, #24
 800d128:	f107 0210 	add.w	r2, r7, #16
 800d12c:	f7ff fa1c 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d130:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d134:	4619      	mov	r1, r3
 800d136:	4620      	mov	r0, r4
 800d138:	f7fd fe6c 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d13c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d140:	4618      	mov	r0, r3
 800d142:	f7fd fdea 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d146:	f107 0310 	add.w	r3, r7, #16
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fd fde5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d150:	f107 0318 	add.w	r3, r7, #24
 800d154:	4618      	mov	r0, r3
 800d156:	f7fd fde0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800d15a:	f107 0320 	add.w	r3, r7, #32
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd fddb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800d164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fd fdd6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	4618      	mov	r0, r3
 800d172:	3774      	adds	r7, #116	; 0x74
 800d174:	46bd      	mov	sp, r7
 800d176:	bd90      	pop	{r4, r7, pc}
 800d178:	08024d18 	.word	0x08024d18
 800d17c:	080219f4 	.word	0x080219f4

0800d180 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800d180:	b590      	push	{r4, r7, lr}
 800d182:	b093      	sub	sp, #76	; 0x4c
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	f7ff f8a5 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d19a:	4a4a      	ldr	r2, [pc, #296]	; (800d2c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1a6:	68f9      	ldr	r1, [r7, #12]
 800d1a8:	f107 0320 	add.w	r3, r7, #32
 800d1ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff faa0 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d1b4:	f107 0320 	add.w	r3, r7, #32
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f7fd fa61 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800d1c0:	f107 0320 	add.w	r3, r7, #32
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fd fda8 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d1ca:	f107 0318 	add.w	r3, r7, #24
 800d1ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe f83d 	bl	800b250 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d1d6:	f107 0310 	add.w	r3, r7, #16
 800d1da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe f837 	bl	800b250 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1e8:	68f9      	ldr	r1, [r7, #12]
 800d1ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d1ee:	f107 0310 	add.w	r3, r7, #16
 800d1f2:	f107 0218 	add.w	r2, r7, #24
 800d1f6:	f7ff f9b7 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d1fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1fe:	4619      	mov	r1, r3
 800d200:	4620      	mov	r0, r4
 800d202:	f7fd fe07 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd fd85 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800d210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d212:	2b00      	cmp	r3, #0
 800d214:	d046      	beq.n	800d2a4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800d216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d043      	beq.n	800d2a4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800d21c:	2300      	movs	r3, #0
 800d21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d224:	4413      	add	r3, r2
 800d226:	781a      	ldrb	r2, [r3, #0]
 800d228:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d22a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d22c:	440b      	add	r3, r1
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	429a      	cmp	r2, r3
 800d232:	d103      	bne.n	800d23c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800d234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d236:	3301      	adds	r3, #1
 800d238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d23a:	e7f1      	b.n	800d220 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800d23c:	2300      	movs	r3, #0
 800d23e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d240:	f107 0310 	add.w	r3, r7, #16
 800d244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d246:	4618      	mov	r0, r3
 800d248:	f7fd fecb 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461c      	mov	r4, r3
 800d250:	f107 0318 	add.w	r3, r7, #24
 800d254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d256:	4618      	mov	r0, r3
 800d258:	f7fd fec3 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800d25c:	4603      	mov	r3, r0
 800d25e:	429c      	cmp	r4, r3
 800d260:	bf0c      	ite	eq
 800d262:	2301      	moveq	r3, #1
 800d264:	2300      	movne	r3, #0
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26e:	3301      	adds	r3, #1
 800d270:	63bb      	str	r3, [r7, #56]	; 0x38
 800d272:	e7e5      	b.n	800d240 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d27a:	68f9      	ldr	r1, [r7, #12]
 800d27c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d280:	f107 0210 	add.w	r2, r7, #16
 800d284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28a:	f7ff f987 	bl	800c59c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d28e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d292:	4619      	mov	r1, r3
 800d294:	4620      	mov	r0, r4
 800d296:	f7fd fdbd 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d29a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fd fd3b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d2a4:	f107 0310 	add.w	r3, r7, #16
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fd fd36 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d2ae:	f107 0318 	add.w	r3, r7, #24
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fd fd31 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    }
}
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3744      	adds	r7, #68	; 0x44
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd90      	pop	{r4, r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08024cec 	.word	0x08024cec

0800d2c8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800d2c8:	b590      	push	{r4, r7, lr}
 800d2ca:	b093      	sub	sp, #76	; 0x4c
 800d2cc:	af02      	add	r7, sp, #8
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
 800d2d4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	f7ff f801 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d2e2:	4a55      	ldr	r2, [pc, #340]	; (800d438 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d2ee:	68f9      	ldr	r1, [r7, #12]
 800d2f0:	f107 0320 	add.w	r3, r7, #32
 800d2f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff f9fc 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d2fc:	f107 0320 	add.w	r3, r7, #32
 800d300:	4619      	mov	r1, r3
 800d302:	4620      	mov	r0, r4
 800d304:	f7fd f9bd 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800d308:	f107 0320 	add.w	r3, r7, #32
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fd fd04 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d312:	f107 0318 	add.w	r3, r7, #24
 800d316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fd ff99 	bl	800b250 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d31e:	f107 0310 	add.w	r3, r7, #16
 800d322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d324:	4618      	mov	r0, r3
 800d326:	f7fd ff93 	bl	800b250 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d330:	68f9      	ldr	r1, [r7, #12]
 800d332:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d336:	f107 0310 	add.w	r3, r7, #16
 800d33a:	f107 0218 	add.w	r2, r7, #24
 800d33e:	f7ff f913 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d346:	4619      	mov	r1, r3
 800d348:	4620      	mov	r0, r4
 800d34a:	f7fd fd63 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d34e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d352:	4618      	mov	r0, r3
 800d354:	f7fd fce1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800d358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d05c      	beq.n	800d418 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800d35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d360:	2b00      	cmp	r3, #0
 800d362:	d059      	beq.n	800d418 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800d364:	2300      	movs	r3, #0
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36c:	4413      	add	r3, r2
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	4618      	mov	r0, r3
 800d372:	f7fd f824 	bl	800a3be <_ZN12SimpleString7ToLowerEc>
 800d376:	4603      	mov	r3, r0
 800d378:	461c      	mov	r4, r3
 800d37a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37e:	4413      	add	r3, r2
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f7fd f81b 	bl	800a3be <_ZN12SimpleString7ToLowerEc>
 800d388:	4603      	mov	r3, r0
 800d38a:	429c      	cmp	r4, r3
 800d38c:	bf0c      	ite	eq
 800d38e:	2301      	moveq	r3, #1
 800d390:	2300      	movne	r3, #0
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800d398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d39a:	3301      	adds	r3, #1
 800d39c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d39e:	e7e3      	b.n	800d368 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800d3a4:	f107 0310 	add.w	r3, r7, #16
 800d3a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fd fe19 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fd f803 	bl	800a3be <_ZN12SimpleString7ToLowerEc>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	461c      	mov	r4, r3
 800d3bc:	f107 0318 	add.w	r3, r7, #24
 800d3c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fe0d 	bl	800afe2 <_ZNK12SimpleString2atEj>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fc fff7 	bl	800a3be <_ZN12SimpleString7ToLowerEc>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	429c      	cmp	r4, r3
 800d3d4:	bf0c      	ite	eq
 800d3d6:	2301      	moveq	r3, #1
 800d3d8:	2300      	movne	r3, #0
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d003      	beq.n	800d3e8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3e6:	e7dd      	b.n	800d3a4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d3f4:	f107 0210 	add.w	r2, r7, #16
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	f7ff f8cd 	bl	800c59c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d406:	4619      	mov	r1, r3
 800d408:	4620      	mov	r0, r4
 800d40a:	f7fd fd03 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d40e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d412:	4618      	mov	r0, r3
 800d414:	f7fd fc81 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d418:	f107 0310 	add.w	r3, r7, #16
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fd fc7c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d422:	f107 0318 	add.w	r3, r7, #24
 800d426:	4618      	mov	r0, r3
 800d428:	f7fd fc77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    }
}
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4618      	mov	r0, r3
 800d430:	3744      	adds	r7, #68	; 0x44
 800d432:	46bd      	mov	sp, r7
 800d434:	bd90      	pop	{r4, r7, pc}
 800d436:	bf00      	nop
 800d438:	08024cc0 	.word	0x08024cc0

0800d43c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800d43c:	b5b0      	push	{r4, r5, r7, lr}
 800d43e:	b092      	sub	sp, #72	; 0x48
 800d440:	af02      	add	r7, sp, #8
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	68b9      	ldr	r1, [r7, #8]
 800d452:	f7fe ff47 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d456:	4a40      	ldr	r2, [pc, #256]	; (800d558 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d462:	68f9      	ldr	r1, [r7, #12]
 800d464:	f107 031c 	add.w	r3, r7, #28
 800d468:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff f942 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d470:	f107 031c 	add.w	r3, r7, #28
 800d474:	4619      	mov	r1, r3
 800d476:	4620      	mov	r0, r4
 800d478:	f7fd f903 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800d47c:	f107 031c 	add.w	r3, r7, #28
 800d480:	4618      	mov	r0, r3
 800d482:	f7fd fc4a 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800d486:	f107 0314 	add.w	r3, r7, #20
 800d48a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d48c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe fa4c 	bl	800b92c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d49a:	68fd      	ldr	r5, [r7, #12]
 800d49c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fe fa41 	bl	800b92c <_Z22StringFromBinaryOrNullPKhj>
 800d4aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d4ae:	f107 0314 	add.w	r3, r7, #20
 800d4b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7ff f856 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f7fd fca6 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d4c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fd fc24 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d4d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fd fc1f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800d4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d02f      	beq.n	800d542 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800d4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d02c      	beq.n	800d542 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781a      	ldrb	r2, [r3, #0]
 800d4f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4f8:	440b      	add	r3, r1
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d103      	bne.n	800d508 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800d500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d502:	3301      	adds	r3, #1
 800d504:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d506:	e7f1      	b.n	800d4ec <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d50e:	68f9      	ldr	r1, [r7, #12]
 800d510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d512:	4613      	mov	r3, r2
 800d514:	005b      	lsls	r3, r3, #1
 800d516:	4413      	add	r3, r2
 800d518:	1c5d      	adds	r5, r3, #1
 800d51a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d51e:	f107 0214 	add.w	r2, r7, #20
 800d522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	462b      	mov	r3, r5
 800d528:	f7ff f838 	bl	800c59c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d52c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d530:	4619      	mov	r1, r3
 800d532:	4620      	mov	r0, r4
 800d534:	f7fd fc6e 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d538:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fd fbec 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800d542:	f107 0314 	add.w	r3, r7, #20
 800d546:	4618      	mov	r0, r3
 800d548:	f7fd fbe7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
	}
}
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	4618      	mov	r0, r3
 800d550:	3740      	adds	r7, #64	; 0x40
 800d552:	46bd      	mov	sp, r7
 800d554:	bdb0      	pop	{r4, r5, r7, pc}
 800d556:	bf00      	nop
 800d558:	08024c94 	.word	0x08024c94

0800d55c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800d55c:	b5b0      	push	{r4, r5, r7, lr}
 800d55e:	b08c      	sub	sp, #48	; 0x30
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
 800d568:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	68b9      	ldr	r1, [r7, #8]
 800d572:	f7fe feb7 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d576:	4a26      	ldr	r2, [pc, #152]	; (800d610 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d582:	68f9      	ldr	r1, [r7, #12]
 800d584:	f107 0310 	add.w	r3, r7, #16
 800d588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff f8b2 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d590:	f107 0310 	add.w	r3, r7, #16
 800d594:	4619      	mov	r1, r3
 800d596:	4620      	mov	r0, r4
 800d598:	f7fd f873 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800d59c:	f107 0310 	add.w	r3, r7, #16
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fd fbba 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d5ac:	68fd      	ldr	r5, [r7, #12]
 800d5ae:	f107 0020 	add.w	r0, r7, #32
 800d5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d5b8:	f7fe fa24 	bl	800ba04 <_Z20StringFromMaskedBitsmmj>
 800d5bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5c6:	f7fe fa1d 	bl	800ba04 <_Z20StringFromMaskedBitsmmj>
 800d5ca:	f107 0018 	add.w	r0, r7, #24
 800d5ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5d2:	f107 0220 	add.w	r2, r7, #32
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7fe ffc6 	bl	800c568 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d5dc:	f107 0318 	add.w	r3, r7, #24
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f7fd fc16 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d5e8:	f107 0318 	add.w	r3, r7, #24
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd fb94 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d5f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fd fb8f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800d5fc:	f107 0320 	add.w	r3, r7, #32
 800d600:	4618      	mov	r0, r3
 800d602:	f7fd fb8a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	4618      	mov	r0, r3
 800d60a:	3730      	adds	r7, #48	; 0x30
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bdb0      	pop	{r4, r5, r7, pc}
 800d610:	08024c68 	.word	0x08024c68

0800d614 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800d614:	b590      	push	{r4, r7, lr}
 800d616:	b089      	sub	sp, #36	; 0x24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	68b9      	ldr	r1, [r7, #8]
 800d62a:	f7fe fe5b 	bl	800c2e4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d62e:	4a1a      	ldr	r2, [pc, #104]	; (800d698 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d63a:	68f9      	ldr	r1, [r7, #12]
 800d63c:	f107 0310 	add.w	r3, r7, #16
 800d640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff f856 	bl	800c6f4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d648:	f107 0310 	add.w	r3, r7, #16
 800d64c:	4619      	mov	r1, r3
 800d64e:	4620      	mov	r0, r4
 800d650:	f7fd f817 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800d654:	f107 0310 	add.w	r3, r7, #16
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fd fb5e 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d666:	f7fd fb2b 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800d66a:	4602      	mov	r2, r0
 800d66c:	f107 0318 	add.w	r3, r7, #24
 800d670:	490a      	ldr	r1, [pc, #40]	; (800d69c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800d672:	4618      	mov	r0, r3
 800d674:	f7fe f858 	bl	800b728 <_Z16StringFromFormatPKcz>
 800d678:	f107 0318 	add.w	r3, r7, #24
 800d67c:	4619      	mov	r1, r3
 800d67e:	4620      	mov	r0, r4
 800d680:	f7fd fbc8 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800d684:	f107 0318 	add.w	r3, r7, #24
 800d688:	4618      	mov	r0, r3
 800d68a:	f7fd fb46 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	4618      	mov	r0, r3
 800d692:	3724      	adds	r7, #36	; 0x24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd90      	pop	{r4, r7, pc}
 800d698:	08024c3c 	.word	0x08024c3c
 800d69c:	08021ac4 	.word	0x08021ac4

0800d6a0 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	4a05      	ldr	r2, [pc, #20]	; (800d6c0 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fe99 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	08024c3c 	.word	0x08024c3c

0800d6c4 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7ff ffe7 	bl	800d6a0 <_ZN25FeatureUnsupportedFailureD1Ev>
 800d6d2:	2134      	movs	r1, #52	; 0x34
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7fa fbb9 	bl	8007e4c <_ZdlPvj>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	4a05      	ldr	r2, [pc, #20]	; (800d704 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe fe77 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	08024c68 	.word	0x08024c68

0800d708 <_ZN16BitsEqualFailureD0Ev>:
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff ffe7 	bl	800d6e4 <_ZN16BitsEqualFailureD1Ev>
 800d716:	2134      	movs	r1, #52	; 0x34
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7fa fb97 	bl	8007e4c <_ZdlPvj>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	4a05      	ldr	r2, [pc, #20]	; (800d748 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	601a      	str	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fe55 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4618      	mov	r0, r3
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	08024c94 	.word	0x08024c94

0800d74c <_ZN18BinaryEqualFailureD0Ev>:
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff ffe7 	bl	800d728 <_ZN18BinaryEqualFailureD1Ev>
 800d75a:	2134      	movs	r1, #52	; 0x34
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7fa fb75 	bl	8007e4c <_ZdlPvj>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4618      	mov	r0, r3
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	4a05      	ldr	r2, [pc, #20]	; (800d78c <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fe33 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	08024cc0 	.word	0x08024cc0

0800d790 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff ffe7 	bl	800d76c <_ZN24StringEqualNoCaseFailureD1Ev>
 800d79e:	2134      	movs	r1, #52	; 0x34
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7fa fb53 	bl	8007e4c <_ZdlPvj>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	4a05      	ldr	r2, [pc, #20]	; (800d7d0 <_ZN18StringEqualFailureD1Ev+0x20>)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fe fe11 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	08024cec 	.word	0x08024cec

0800d7d4 <_ZN18StringEqualFailureD0Ev>:
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff ffe7 	bl	800d7b0 <_ZN18StringEqualFailureD1Ev>
 800d7e2:	2134      	movs	r1, #52	; 0x34
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f7fa fb31 	bl	8007e4c <_ZdlPvj>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	4a05      	ldr	r2, [pc, #20]	; (800d814 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4618      	mov	r0, r3
 800d806:	f7fe fdef 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4618      	mov	r0, r3
 800d80e:	3708      	adds	r7, #8
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	08024d18 	.word	0x08024d18

0800d818 <_ZN23SignedBytesEqualFailureD0Ev>:
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7ff ffe7 	bl	800d7f4 <_ZN23SignedBytesEqualFailureD1Ev>
 800d826:	2134      	movs	r1, #52	; 0x34
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7fa fb0f 	bl	8007e4c <_ZdlPvj>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4618      	mov	r0, r3
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	4a05      	ldr	r2, [pc, #20]	; (800d858 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fe fdcd 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	08024d44 	.word	0x08024d44

0800d85c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7ff ffe7 	bl	800d838 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800d86a:	2134      	movs	r1, #52	; 0x34
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f7fa faed 	bl	8007e4c <_ZdlPvj>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	4a05      	ldr	r2, [pc, #20]	; (800d89c <_ZN17LongsEqualFailureD1Ev+0x20>)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe fdab 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	08024d70 	.word	0x08024d70

0800d8a0 <_ZN17LongsEqualFailureD0Ev>:
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff ffe7 	bl	800d87c <_ZN17LongsEqualFailureD1Ev>
 800d8ae:	2134      	movs	r1, #52	; 0x34
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7fa facb 	bl	8007e4c <_ZdlPvj>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	4a05      	ldr	r2, [pc, #20]	; (800d8e0 <_ZN12CheckFailureD1Ev+0x20>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe fd89 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	08024d9c 	.word	0x08024d9c

0800d8e4 <_ZN12CheckFailureD0Ev>:
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ffe7 	bl	800d8c0 <_ZN12CheckFailureD1Ev>
 800d8f2:	2134      	movs	r1, #52	; 0x34
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7fa faa9 	bl	8007e4c <_ZdlPvj>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	4a05      	ldr	r2, [pc, #20]	; (800d924 <_ZN15ContainsFailureD1Ev+0x20>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	f7fe fd67 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	08024dc8 	.word	0x08024dc8

0800d928 <_ZN15ContainsFailureD0Ev>:
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff ffe7 	bl	800d904 <_ZN15ContainsFailureD1Ev>
 800d936:	2134      	movs	r1, #52	; 0x34
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7fa fa87 	bl	8007e4c <_ZdlPvj>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	4a05      	ldr	r2, [pc, #20]	; (800d968 <_ZN17ComparisonFailureD1Ev+0x20>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe fd45 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	08024df4 	.word	0x08024df4

0800d96c <_ZN17ComparisonFailureD0Ev>:
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff ffe7 	bl	800d948 <_ZN17ComparisonFailureD1Ev>
 800d97a:	2134      	movs	r1, #52	; 0x34
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7fa fa65 	bl	8007e4c <_ZdlPvj>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	4a05      	ldr	r2, [pc, #20]	; (800d9ac <_ZN17CheckEqualFailureD1Ev+0x20>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fe fd23 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	08024e20 	.word	0x08024e20

0800d9b0 <_ZN17CheckEqualFailureD0Ev>:
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff ffe7 	bl	800d98c <_ZN17CheckEqualFailureD1Ev>
 800d9be:	2134      	movs	r1, #52	; 0x34
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7fa fa43 	bl	8007e4c <_ZdlPvj>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	4a05      	ldr	r2, [pc, #20]	; (800d9f0 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fd01 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	08024e4c 	.word	0x08024e4c

0800d9f4 <_ZN19DoublesEqualFailureD0Ev>:
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff ffe7 	bl	800d9d0 <_ZN19DoublesEqualFailureD1Ev>
 800da02:	2134      	movs	r1, #52	; 0x34
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7fa fa21 	bl	8007e4c <_ZdlPvj>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	4a05      	ldr	r2, [pc, #20]	; (800da34 <_ZN13EqualsFailureD1Ev+0x20>)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	601a      	str	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe fcdf 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4618      	mov	r0, r3
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	08024e78 	.word	0x08024e78

0800da38 <_ZN13EqualsFailureD0Ev>:
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff ffe7 	bl	800da14 <_ZN13EqualsFailureD1Ev>
 800da46:	2134      	movs	r1, #52	; 0x34
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7fa f9ff 	bl	8007e4c <_ZdlPvj>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800da58:	b5b0      	push	{r4, r5, r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af02      	add	r7, sp, #8
 800da5e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800da60:	4b0d      	ldr	r3, [pc, #52]	; (800da98 <_ZL13checkedMallocj+0x40>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	4798      	blx	r3
 800da68:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10e      	bne.n	800da8e <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800da70:	f004 f97e 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 800da74:	4604      	mov	r4, r0
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	3368      	adds	r3, #104	; 0x68
 800da7a:	681d      	ldr	r5, [r3, #0]
 800da7c:	f004 f988 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800da80:	4603      	mov	r3, r0
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	2325      	movs	r3, #37	; 0x25
 800da86:	4a05      	ldr	r2, [pc, #20]	; (800da9c <_ZL13checkedMallocj+0x44>)
 800da88:	4905      	ldr	r1, [pc, #20]	; (800daa0 <_ZL13checkedMallocj+0x48>)
 800da8a:	4620      	mov	r0, r4
 800da8c:	47a8      	blx	r5
    return mem;
 800da8e:	68fb      	ldr	r3, [r7, #12]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bdb0      	pop	{r4, r5, r7, pc}
 800da98:	200000c4 	.word	0x200000c4
 800da9c:	08021b38 	.word	0x08021b38
 800daa0:	08021b58 	.word	0x08021b58

0800daa4 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800daa8:	4b04      	ldr	r3, [pc, #16]	; (800dabc <_Z22getCurrentNewAllocatorv+0x18>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d101      	bne.n	800dab4 <_Z22getCurrentNewAllocatorv+0x10>
 800dab0:	f000 f806 	bl	800dac0 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800dab4:	4b01      	ldr	r3, [pc, #4]	; (800dabc <_Z22getCurrentNewAllocatorv+0x18>)
 800dab6:	681b      	ldr	r3, [r3, #0]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	200006fc 	.word	0x200006fc

0800dac0 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800dac4:	f000 f810 	bl	800dae8 <_Z19defaultNewAllocatorv>
 800dac8:	4603      	mov	r3, r0
 800daca:	4a02      	ldr	r2, [pc, #8]	; (800dad4 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800dacc:	6013      	str	r3, [r2, #0]
}
 800dace:	bf00      	nop
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	200006fc 	.word	0x200006fc

0800dad8 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
 800dadc:	4801      	ldr	r0, [pc, #4]	; (800dae4 <__tcf_0+0xc>)
 800dade:	f000 f909 	bl	800dcf4 <_ZN19TestMemoryAllocatorD1Ev>
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	20000708 	.word	0x20000708

0800dae8 <_Z19defaultNewAllocatorv>:
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800daec:	4b13      	ldr	r3, [pc, #76]	; (800db3c <_Z19defaultNewAllocatorv+0x54>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	f3bf 8f5b 	dmb	ish
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	bf0c      	ite	eq
 800dafe:	2301      	moveq	r3, #1
 800db00:	2300      	movne	r3, #0
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b00      	cmp	r3, #0
 800db06:	d016      	beq.n	800db36 <_Z19defaultNewAllocatorv+0x4e>
 800db08:	480c      	ldr	r0, [pc, #48]	; (800db3c <_Z19defaultNewAllocatorv+0x54>)
 800db0a:	f00f fc0d 	bl	801d328 <__cxa_guard_acquire>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	bf14      	ite	ne
 800db14:	2301      	movne	r3, #1
 800db16:	2300      	moveq	r3, #0
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00b      	beq.n	800db36 <_Z19defaultNewAllocatorv+0x4e>
 800db1e:	4b08      	ldr	r3, [pc, #32]	; (800db40 <_Z19defaultNewAllocatorv+0x58>)
 800db20:	4a08      	ldr	r2, [pc, #32]	; (800db44 <_Z19defaultNewAllocatorv+0x5c>)
 800db22:	4909      	ldr	r1, [pc, #36]	; (800db48 <_Z19defaultNewAllocatorv+0x60>)
 800db24:	4809      	ldr	r0, [pc, #36]	; (800db4c <_Z19defaultNewAllocatorv+0x64>)
 800db26:	f000 f8c5 	bl	800dcb4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800db2a:	4804      	ldr	r0, [pc, #16]	; (800db3c <_Z19defaultNewAllocatorv+0x54>)
 800db2c:	f00f fc08 	bl	801d340 <__cxa_guard_release>
 800db30:	4807      	ldr	r0, [pc, #28]	; (800db50 <_Z19defaultNewAllocatorv+0x68>)
 800db32:	f00f fc2c 	bl	801d38e <atexit>
    return &allocator;
 800db36:	4b05      	ldr	r3, [pc, #20]	; (800db4c <_Z19defaultNewAllocatorv+0x64>)
}
 800db38:	4618      	mov	r0, r3
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	2000071c 	.word	0x2000071c
 800db40:	08021b78 	.word	0x08021b78
 800db44:	08021b80 	.word	0x08021b80
 800db48:	08021b84 	.word	0x08021b84
 800db4c:	20000708 	.word	0x20000708
 800db50:	0800dad9 	.word	0x0800dad9

0800db54 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800db54:	b580      	push	{r7, lr}
 800db56:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800db58:	4b04      	ldr	r3, [pc, #16]	; (800db6c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800db60:	f000 f806 	bl	800db70 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800db64:	4b01      	ldr	r3, [pc, #4]	; (800db6c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800db66:	681b      	ldr	r3, [r3, #0]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	20000700 	.word	0x20000700

0800db70 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800db74:	f000 f810 	bl	800db98 <_Z24defaultNewArrayAllocatorv>
 800db78:	4603      	mov	r3, r0
 800db7a:	4a02      	ldr	r2, [pc, #8]	; (800db84 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800db7c:	6013      	str	r3, [r2, #0]
}
 800db7e:	bf00      	nop
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	20000700 	.word	0x20000700

0800db88 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	4801      	ldr	r0, [pc, #4]	; (800db94 <__tcf_1+0xc>)
 800db8e:	f000 f8b1 	bl	800dcf4 <_ZN19TestMemoryAllocatorD1Ev>
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20000720 	.word	0x20000720

0800db98 <_Z24defaultNewArrayAllocatorv>:
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800db9c:	4b13      	ldr	r3, [pc, #76]	; (800dbec <_Z24defaultNewArrayAllocatorv+0x54>)
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	f3bf 8f5b 	dmb	ish
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	bf0c      	ite	eq
 800dbae:	2301      	moveq	r3, #1
 800dbb0:	2300      	movne	r3, #0
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d016      	beq.n	800dbe6 <_Z24defaultNewArrayAllocatorv+0x4e>
 800dbb8:	480c      	ldr	r0, [pc, #48]	; (800dbec <_Z24defaultNewArrayAllocatorv+0x54>)
 800dbba:	f00f fbb5 	bl	801d328 <__cxa_guard_acquire>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bf14      	ite	ne
 800dbc4:	2301      	movne	r3, #1
 800dbc6:	2300      	moveq	r3, #0
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00b      	beq.n	800dbe6 <_Z24defaultNewArrayAllocatorv+0x4e>
 800dbce:	4b08      	ldr	r3, [pc, #32]	; (800dbf0 <_Z24defaultNewArrayAllocatorv+0x58>)
 800dbd0:	4a08      	ldr	r2, [pc, #32]	; (800dbf4 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800dbd2:	4909      	ldr	r1, [pc, #36]	; (800dbf8 <_Z24defaultNewArrayAllocatorv+0x60>)
 800dbd4:	4809      	ldr	r0, [pc, #36]	; (800dbfc <_Z24defaultNewArrayAllocatorv+0x64>)
 800dbd6:	f000 f86d 	bl	800dcb4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800dbda:	4804      	ldr	r0, [pc, #16]	; (800dbec <_Z24defaultNewArrayAllocatorv+0x54>)
 800dbdc:	f00f fbb0 	bl	801d340 <__cxa_guard_release>
 800dbe0:	4807      	ldr	r0, [pc, #28]	; (800dc00 <_Z24defaultNewArrayAllocatorv+0x68>)
 800dbe2:	f00f fbd4 	bl	801d38e <atexit>
    return &allocator;
 800dbe6:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20000734 	.word	0x20000734
 800dbf0:	08021b9c 	.word	0x08021b9c
 800dbf4:	08021ba8 	.word	0x08021ba8
 800dbf8:	08021bb0 	.word	0x08021bb0
 800dbfc:	20000720 	.word	0x20000720
 800dc00:	0800db89 	.word	0x0800db89

0800dc04 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800dc08:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <_Z25getCurrentMallocAllocatorv+0x18>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <_Z25getCurrentMallocAllocatorv+0x10>
 800dc10:	f000 f806 	bl	800dc20 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800dc14:	4b01      	ldr	r3, [pc, #4]	; (800dc1c <_Z25getCurrentMallocAllocatorv+0x18>)
 800dc16:	681b      	ldr	r3, [r3, #0]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	20000704 	.word	0x20000704

0800dc20 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800dc24:	f000 f810 	bl	800dc48 <_Z22defaultMallocAllocatorv>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	4a02      	ldr	r2, [pc, #8]	; (800dc34 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800dc2c:	6013      	str	r3, [r2, #0]
}
 800dc2e:	bf00      	nop
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20000704 	.word	0x20000704

0800dc38 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	4801      	ldr	r0, [pc, #4]	; (800dc44 <__tcf_2+0xc>)
 800dc3e:	f000 f859 	bl	800dcf4 <_ZN19TestMemoryAllocatorD1Ev>
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	20000738 	.word	0x20000738

0800dc48 <_Z22defaultMallocAllocatorv>:
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800dc4c:	4b13      	ldr	r3, [pc, #76]	; (800dc9c <_Z22defaultMallocAllocatorv+0x54>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f3bf 8f5b 	dmb	ish
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	bf0c      	ite	eq
 800dc5e:	2301      	moveq	r3, #1
 800dc60:	2300      	movne	r3, #0
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d016      	beq.n	800dc96 <_Z22defaultMallocAllocatorv+0x4e>
 800dc68:	480c      	ldr	r0, [pc, #48]	; (800dc9c <_Z22defaultMallocAllocatorv+0x54>)
 800dc6a:	f00f fb5d 	bl	801d328 <__cxa_guard_acquire>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bf14      	ite	ne
 800dc74:	2301      	movne	r3, #1
 800dc76:	2300      	moveq	r3, #0
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00b      	beq.n	800dc96 <_Z22defaultMallocAllocatorv+0x4e>
 800dc7e:	4b08      	ldr	r3, [pc, #32]	; (800dca0 <_Z22defaultMallocAllocatorv+0x58>)
 800dc80:	4a08      	ldr	r2, [pc, #32]	; (800dca4 <_Z22defaultMallocAllocatorv+0x5c>)
 800dc82:	4909      	ldr	r1, [pc, #36]	; (800dca8 <_Z22defaultMallocAllocatorv+0x60>)
 800dc84:	4809      	ldr	r0, [pc, #36]	; (800dcac <_Z22defaultMallocAllocatorv+0x64>)
 800dc86:	f000 f815 	bl	800dcb4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800dc8a:	4804      	ldr	r0, [pc, #16]	; (800dc9c <_Z22defaultMallocAllocatorv+0x54>)
 800dc8c:	f00f fb58 	bl	801d340 <__cxa_guard_release>
 800dc90:	4807      	ldr	r0, [pc, #28]	; (800dcb0 <_Z22defaultMallocAllocatorv+0x68>)
 800dc92:	f00f fb7c 	bl	801d38e <atexit>
    return &allocator;
 800dc96:	4b05      	ldr	r3, [pc, #20]	; (800dcac <_Z22defaultMallocAllocatorv+0x64>)
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	2000074c 	.word	0x2000074c
 800dca0:	08021bcc 	.word	0x08021bcc
 800dca4:	08021bd4 	.word	0x08021bd4
 800dca8:	08021bdc 	.word	0x08021bdc
 800dcac:	20000738 	.word	0x20000738
 800dcb0:	0800dc39 	.word	0x0800dc39

0800dcb4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800dcc2:	4a0b      	ldr	r2, [pc, #44]	; (800dcf0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	601a      	str	r2, [r3, #0]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	605a      	str	r2, [r3, #4]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	609a      	str	r2, [r3, #8]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	60da      	str	r2, [r3, #12]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	741a      	strb	r2, [r3, #16]
{
}
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4618      	mov	r0, r3
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	08024f04 	.word	0x08024f04

0800dcf4 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	4a06      	ldr	r2, [pc, #24]	; (800dd18 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	741a      	strb	r2, [r3, #16]
}
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	08024f04 	.word	0x08024f04

0800dd1c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
}
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff ffe5 	bl	800dcf4 <_ZN19TestMemoryAllocatorD1Ev>
 800dd2a:	2114      	movs	r1, #20
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7fa f88d 	bl	8007e4c <_ZdlPvj>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4618      	mov	r0, r3
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	b083      	sub	sp, #12
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7c1b      	ldrb	r3, [r3, #16]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800dd54:	b590      	push	{r4, r7, lr}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3310      	adds	r3, #16
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	4798      	blx	r3
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	3310      	adds	r3, #16
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6838      	ldr	r0, [r7, #0]
 800dd76:	4798      	blx	r3
 800dd78:	4603      	mov	r3, r0
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f7fc fa51 	bl	800a224 <_ZN12SimpleString6StrCmpEPKcS1_>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bf0c      	ite	eq
 800dd88:	2301      	moveq	r3, #1
 800dd8a:	2300      	movne	r3, #0
 800dd8c:	b2db      	uxtb	r3, r3
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	370c      	adds	r7, #12
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd90      	pop	{r4, r7, pc}
	...

0800dd98 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3308      	adds	r3, #8
 800dda8:	681c      	ldr	r4, [r3, #0]
 800ddaa:	2301      	movs	r3, #1
 800ddac:	4a04      	ldr	r2, [pc, #16]	; (800ddc0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	47a0      	blx	r4
 800ddb4:	4603      	mov	r3, r0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd90      	pop	{r4, r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	08021bf8 	.word	0x08021bf8

0800ddc4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800ddc4:	b590      	push	{r4, r7, lr}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	330c      	adds	r3, #12
 800ddd4:	681c      	ldr	r4, [r3, #0]
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	9300      	str	r3, [sp, #0]
 800ddda:	4b04      	ldr	r3, [pc, #16]	; (800ddec <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	47a0      	blx	r4
}
 800dde4:	bf00      	nop
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd90      	pop	{r4, r7, pc}
 800ddec:	08021bf8 	.word	0x08021bf8

0800ddf0 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
 800ddfc:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800ddfe:	68b8      	ldr	r0, [r7, #8]
 800de00:	f7ff fe2a 	bl	800da58 <_ZL13checkedMallocj>
 800de04:	4603      	mov	r3, r0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800de1e:	4b04      	ldr	r3, [pc, #16]	; (800de30 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68b8      	ldr	r0, [r7, #8]
 800de24:	4798      	blx	r3
}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	200000cc 	.word	0x200000cc

0800de34 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
    return name_;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
}
 800de40:	4618      	mov	r0, r3
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	689b      	ldr	r3, [r3, #8]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
    return free_name_;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
}
 800de70:	4618      	mov	r0, r3
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    return this;
 800de84:	687b      	ldr	r3, [r7, #4]
}
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
	...

0800de94 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	4a05      	ldr	r2, [pc, #20]	; (800deb4 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7ff ff25 	bl	800dcf4 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	08024ed0 	.word	0x08024ed0

0800deb8 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
}
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff ffe7 	bl	800de94 <_ZN20NullUnknownAllocatorD1Ev>
 800dec6:	2114      	movs	r1, #20
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7f9 ffbf 	bl	8007e4c <_ZdlPvj>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4618      	mov	r0, r3
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3714      	adds	r7, #20
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
}
 800df02:	bf00      	nop
 800df04:	3714      	adds	r7, #20
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
	...

0800df10 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	4b06      	ldr	r3, [pc, #24]	; (800df34 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800df1c:	4a05      	ldr	r2, [pc, #20]	; (800df34 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800df1e:	4906      	ldr	r1, [pc, #24]	; (800df38 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800df20:	f7ff fec8 	bl	800dcb4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800df24:	4a05      	ldr	r2, [pc, #20]	; (800df3c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	601a      	str	r2, [r3, #0]
{
}
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	08021c2c 	.word	0x08021c2c
 800df38:	08021c34 	.word	0x08021c34
 800df3c:	08024ed0 	.word	0x08024ed0

0800df40 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__tcf_3+0xc>)
 800df46:	f7ff ffa5 	bl	800de94 <_ZN20NullUnknownAllocatorD1Ev>
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	20000750 	.word	0x20000750

0800df50 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800df54:	4b12      	ldr	r3, [pc, #72]	; (800dfa0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	f3bf 8f5b 	dmb	ish
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	2b00      	cmp	r3, #0
 800df64:	bf0c      	ite	eq
 800df66:	2301      	moveq	r3, #1
 800df68:	2300      	movne	r3, #0
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d013      	beq.n	800df98 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800df70:	480b      	ldr	r0, [pc, #44]	; (800dfa0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800df72:	f00f f9d9 	bl	801d328 <__cxa_guard_acquire>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	bf14      	ite	ne
 800df7c:	2301      	movne	r3, #1
 800df7e:	2300      	moveq	r3, #0
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d008      	beq.n	800df98 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800df86:	4807      	ldr	r0, [pc, #28]	; (800dfa4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800df88:	f7ff ffc2 	bl	800df10 <_ZN20NullUnknownAllocatorC1Ev>
 800df8c:	4804      	ldr	r0, [pc, #16]	; (800dfa0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800df8e:	f00f f9d7 	bl	801d340 <__cxa_guard_release>
 800df92:	4805      	ldr	r0, [pc, #20]	; (800dfa8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800df94:	f00f f9fb 	bl	801d38e <atexit>
    return &allocator;
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	20000764 	.word	0x20000764
 800dfa4:	20000750 	.word	0x20000750
 800dfa8:	0800df41 	.word	0x0800df41

0800dfac <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
        return testCount_;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	689b      	ldr	r3, [r3, #8]
    }
 800dfb8:	4618      	mov	r0, r3
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	699b      	ldr	r3, [r3, #24]
    }
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800dfe0:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	2b02      	cmp	r3, #2
 800dfe6:	d103      	bne.n	800dff0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800dfe8:	f004 fa4a 	bl	8012480 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800dfec:	4603      	mov	r3, r0
 800dfee:	e001      	b.n	800dff4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800dff0:	4b01      	ldr	r3, [pc, #4]	; (800dff8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20000084 	.word	0x20000084

0800dffc <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800e004:	4a0a      	ldr	r2, [pc, #40]	; (800e030 <_ZN10TestOutputC1Ev+0x34>)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	601a      	str	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	605a      	str	r2, [r3, #4]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	721a      	strb	r2, [r3, #8]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	725a      	strb	r2, [r3, #9]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a05      	ldr	r2, [pc, #20]	; (800e034 <_ZN10TestOutputC1Ev+0x38>)
 800e020:	60da      	str	r2, [r3, #12]
{
}
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4618      	mov	r0, r3
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	08025008 	.word	0x08025008
 800e034:	08022034 	.word	0x08022034

0800e038 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	4a04      	ldr	r2, [pc, #16]	; (800e054 <_ZN10TestOutputD1Ev+0x1c>)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	601a      	str	r2, [r3, #0]
{
}
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4618      	mov	r0, r3
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	08025008 	.word	0x08025008

0800e058 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	78fa      	ldrb	r2, [r7, #3]
 800e068:	721a      	strb	r2, [r3, #8]
}
 800e06a:	bf00      	nop
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr

0800e076 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800e076:	b480      	push	{r7}
 800e078:	b083      	sub	sp, #12
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
    color_ = true;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	725a      	strb	r2, [r3, #9]
}
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	3328      	adds	r3, #40	; 0x28
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	4798      	blx	r3
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800e0b0:	b590      	push	{r4, r7, lr}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	332c      	adds	r3, #44	; 0x2c
 800e0c0:	681c      	ldr	r4, [r3, #0]
 800e0c2:	f107 0308 	add.w	r3, r7, #8
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fd f8ff 	bl	800b2cc <_Z10StringFroml>
 800e0ce:	f107 0308 	add.w	r3, r7, #8
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fc fdf4 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	4619      	mov	r1, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	47a0      	blx	r4
 800e0e0:	f107 0308 	add.w	r3, r7, #8
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fc fe18 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e0ea:	bf00      	nop
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd90      	pop	{r4, r7, pc}

0800e0f2 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800e0f2:	b590      	push	{r4, r7, lr}
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	332c      	adds	r3, #44	; 0x2c
 800e102:	681c      	ldr	r4, [r3, #0]
 800e104:	f107 0308 	add.w	r3, r7, #8
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd fb34 	bl	800b778 <_Z10StringFromj>
 800e110:	f107 0308 	add.w	r3, r7, #8
 800e114:	4618      	mov	r0, r3
 800e116:	f7fc fdd3 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e11a:	4603      	mov	r3, r0
 800e11c:	4619      	mov	r1, r3
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	47a0      	blx	r4
 800e122:	f107 0308 	add.w	r3, r7, #8
 800e126:	4618      	mov	r0, r3
 800e128:	f7fc fdf7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e12c:	bf00      	nop
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	bd90      	pop	{r4, r7, pc}

0800e134 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800e134:	b590      	push	{r4, r7, lr}
 800e136:	b087      	sub	sp, #28
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	332c      	adds	r3, #44	; 0x2c
 800e146:	681c      	ldr	r4, [r3, #0]
 800e148:	f107 0310 	add.w	r3, r7, #16
 800e14c:	2106      	movs	r1, #6
 800e14e:	ed97 0b00 	vldr	d0, [r7]
 800e152:	4618      	mov	r0, r3
 800e154:	f7fd faa6 	bl	800b6a4 <_Z10StringFromdi>
 800e158:	f107 0310 	add.w	r3, r7, #16
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fc fdaf 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e162:	4603      	mov	r3, r0
 800e164:	4619      	mov	r1, r3
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	47a0      	blx	r4
 800e16a:	f107 0310 	add.w	r3, r7, #16
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fc fdd3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e174:	bf00      	nop
 800e176:	371c      	adds	r7, #28
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd90      	pop	{r4, r7, pc}

0800e17c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
    p.print(s);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	332c      	adds	r3, #44	; 0x2c
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	4798      	blx	r3
    return p;
 800e194:	687b      	ldr	r3, [r7, #4]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
	...

0800e1a0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e1a0:	b590      	push	{r4, r7, lr}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	7a1b      	ldrb	r3, [r3, #8]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d01a      	beq.n	800e1e8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	332c      	adds	r3, #44	; 0x2c
 800e1b8:	681c      	ldr	r4, [r3, #0]
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	3314      	adds	r3, #20
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f107 0208 	add.w	r2, r7, #8
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	4610      	mov	r0, r2
 800e1ca:	4798      	blx	r3
 800e1cc:	f107 0308 	add.w	r3, r7, #8
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fc fd75 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	47a0      	blx	r4
 800e1de:	f107 0308 	add.w	r3, r7, #8
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fc fd99 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	3318      	adds	r3, #24
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6838      	ldr	r0, [r7, #0]
 800e1f2:	4798      	blx	r3
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d007      	beq.n	800e20a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3344      	adds	r3, #68	; 0x44
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4907      	ldr	r1, [pc, #28]	; (800e220 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800e208:	e006      	b.n	800e218 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	3344      	adds	r3, #68	; 0x44
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4904      	ldr	r1, [pc, #16]	; (800e224 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	4798      	blx	r3
}
 800e218:	bf00      	nop
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd90      	pop	{r4, r7, pc}
 800e220:	08022034 	.word	0x08022034
 800e224:	08022038 	.word	0x08022038

0800e228 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e228:	b590      	push	{r4, r7, lr}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	7a1b      	ldrb	r3, [r3, #8]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d019      	beq.n	800e26e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	332c      	adds	r3, #44	; 0x2c
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4910      	ldr	r1, [pc, #64]	; (800e284 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3334      	adds	r3, #52	; 0x34
 800e24e:	681c      	ldr	r4, [r3, #0]
 800e250:	6838      	ldr	r0, [r7, #0]
 800e252:	f002 f845 	bl	80102e0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e256:	4603      	mov	r3, r0
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	47a0      	blx	r4
        print(" ms\n");
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	332c      	adds	r3, #44	; 0x2c
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4908      	ldr	r1, [pc, #32]	; (800e288 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800e26c:	e005      	b.n	800e27a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3358      	adds	r3, #88	; 0x58
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	4798      	blx	r3
}
 800e27a:	bf00      	nop
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd90      	pop	{r4, r7, pc}
 800e282:	bf00      	nop
 800e284:	0802203c 	.word	0x0802203c
 800e288:	08022040 	.word	0x08022040

0800e28c <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	332c      	adds	r3, #44	; 0x2c
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	68d2      	ldr	r2, [r2, #12]
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	605a      	str	r2, [r3, #4]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800e2b6:	fb83 1302 	smull	r1, r3, r3, r2
 800e2ba:	1119      	asrs	r1, r3, #4
 800e2bc:	17d3      	asrs	r3, r2, #31
 800e2be:	1acb      	subs	r3, r1, r3
 800e2c0:	2132      	movs	r1, #50	; 0x32
 800e2c2:	fb01 f303 	mul.w	r3, r1, r3
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	bf0c      	ite	eq
 800e2cc:	2301      	moveq	r3, #1
 800e2ce:	2300      	movne	r3, #0
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d006      	beq.n	800e2e4 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	332c      	adds	r3, #44	; 0x2c
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4904      	ldr	r1, [pc, #16]	; (800e2f0 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	4798      	blx	r3
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	51eb851f 	.word	0x51eb851f
 800e2f0:	08022048 	.word	0x08022048

0800e2f4 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	60da      	str	r2, [r3, #12]
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
}
 800e32e:	bf00      	nop
 800e330:	370c      	adds	r7, #12
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b083      	sub	sp, #12
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	6039      	str	r1, [r7, #0]
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800e350:	b590      	push	{r4, r7, lr}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
    print("\n");
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	332c      	adds	r3, #44	; 0x2c
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	496f      	ldr	r1, [pc, #444]	; (800e520 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800e368:	6838      	ldr	r0, [r7, #0]
 800e36a:	f7f8 f83d 	bl	80063e8 <_ZNK10TestResult9isFailureEv>
 800e36e:	4603      	mov	r3, r0
 800e370:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800e372:	6838      	ldr	r0, [r7, #0]
 800e374:	f7f8 f82c 	bl	80063d0 <_ZNK10TestResult15getFailureCountEv>
 800e378:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d02b      	beq.n	800e3d8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7a5b      	ldrb	r3, [r3, #9]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d006      	beq.n	800e396 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	332c      	adds	r3, #44	; 0x2c
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4964      	ldr	r1, [pc, #400]	; (800e524 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4798      	blx	r3
        }
        print("Errors (");
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	332c      	adds	r3, #44	; 0x2c
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4962      	ldr	r1, [pc, #392]	; (800e528 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	4798      	blx	r3
        if (failureCount > 0) {
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00e      	beq.n	800e3c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3334      	adds	r3, #52	; 0x34
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68b9      	ldr	r1, [r7, #8]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	4798      	blx	r3
            print(" failures, ");
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	332c      	adds	r3, #44	; 0x2c
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	495a      	ldr	r1, [pc, #360]	; (800e52c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	4798      	blx	r3
 800e3c6:	e019      	b.n	800e3fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	332c      	adds	r3, #44	; 0x2c
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4957      	ldr	r1, [pc, #348]	; (800e530 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	4798      	blx	r3
 800e3d6:	e011      	b.n	800e3fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	7a5b      	ldrb	r3, [r3, #9]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d006      	beq.n	800e3ee <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	332c      	adds	r3, #44	; 0x2c
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4952      	ldr	r1, [pc, #328]	; (800e534 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	4798      	blx	r3
        }
        print("OK (");
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	332c      	adds	r3, #44	; 0x2c
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4950      	ldr	r1, [pc, #320]	; (800e538 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	4798      	blx	r3
    }
    print(result.getTestCount());
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3334      	adds	r3, #52	; 0x34
 800e402:	681c      	ldr	r4, [r3, #0]
 800e404:	6838      	ldr	r0, [r7, #0]
 800e406:	f7ff fdd1 	bl	800dfac <_ZNK10TestResult12getTestCountEv>
 800e40a:	4603      	mov	r3, r0
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	47a0      	blx	r4
    print(" tests, ");
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	332c      	adds	r3, #44	; 0x2c
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	4948      	ldr	r1, [pc, #288]	; (800e53c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	4798      	blx	r3
    print(result.getRunCount());
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3334      	adds	r3, #52	; 0x34
 800e426:	681c      	ldr	r4, [r3, #0]
 800e428:	6838      	ldr	r0, [r7, #0]
 800e42a:	f7f7 ffb9 	bl	80063a0 <_ZNK10TestResult11getRunCountEv>
 800e42e:	4603      	mov	r3, r0
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	47a0      	blx	r4
    print(" ran, ");
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	332c      	adds	r3, #44	; 0x2c
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4940      	ldr	r1, [pc, #256]	; (800e540 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	4798      	blx	r3
    print(result.getCheckCount());
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	3334      	adds	r3, #52	; 0x34
 800e44a:	681c      	ldr	r4, [r3, #0]
 800e44c:	6838      	ldr	r0, [r7, #0]
 800e44e:	f7f8 fc13 	bl	8006c78 <_ZNK10TestResult13getCheckCountEv>
 800e452:	4603      	mov	r3, r0
 800e454:	4619      	mov	r1, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	47a0      	blx	r4
    print(" checks, ");
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	332c      	adds	r3, #44	; 0x2c
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4938      	ldr	r1, [pc, #224]	; (800e544 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	4798      	blx	r3
    print(result.getIgnoredCount());
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	3334      	adds	r3, #52	; 0x34
 800e46e:	681c      	ldr	r4, [r3, #0]
 800e470:	6838      	ldr	r0, [r7, #0]
 800e472:	f7f7 ffa1 	bl	80063b8 <_ZNK10TestResult15getIgnoredCountEv>
 800e476:	4603      	mov	r3, r0
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	47a0      	blx	r4
    print(" ignored, ");
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	332c      	adds	r3, #44	; 0x2c
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4930      	ldr	r1, [pc, #192]	; (800e548 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3334      	adds	r3, #52	; 0x34
 800e492:	681c      	ldr	r4, [r3, #0]
 800e494:	6838      	ldr	r0, [r7, #0]
 800e496:	f7ff fd95 	bl	800dfc4 <_ZNK10TestResult19getFilteredOutCountEv>
 800e49a:	4603      	mov	r3, r0
 800e49c:	4619      	mov	r1, r3
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	47a0      	blx	r4
    print(" filtered out, ");
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	332c      	adds	r3, #44	; 0x2c
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4928      	ldr	r1, [pc, #160]	; (800e54c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3334      	adds	r3, #52	; 0x34
 800e4b6:	681c      	ldr	r4, [r3, #0]
 800e4b8:	6838      	ldr	r0, [r7, #0]
 800e4ba:	f001 ff05 	bl	80102c8 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	47a0      	blx	r4
    print(" ms)");
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	332c      	adds	r3, #44	; 0x2c
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4920      	ldr	r1, [pc, #128]	; (800e550 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	4798      	blx	r3
    if (color_) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	7a5b      	ldrb	r3, [r3, #9]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d006      	beq.n	800e4ea <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	332c      	adds	r3, #44	; 0x2c
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	491b      	ldr	r1, [pc, #108]	; (800e554 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800e4ea:	7bfb      	ldrb	r3, [r7, #15]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d009      	beq.n	800e504 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d106      	bne.n	800e504 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	332c      	adds	r3, #44	; 0x2c
 800e4fc:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800e4fe:	4916      	ldr	r1, [pc, #88]	; (800e558 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	4798      	blx	r3
    }
    print("\n\n");
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	332c      	adds	r3, #44	; 0x2c
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4913      	ldr	r1, [pc, #76]	; (800e55c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3

    dotCount_ = 0;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	605a      	str	r2, [r3, #4]
}
 800e518:	bf00      	nop
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd90      	pop	{r4, r7, pc}
 800e520:	08022048 	.word	0x08022048
 800e524:	0802204c 	.word	0x0802204c
 800e528:	08022054 	.word	0x08022054
 800e52c:	08022060 	.word	0x08022060
 800e530:	0802206c 	.word	0x0802206c
 800e534:	0802207c 	.word	0x0802207c
 800e538:	08022084 	.word	0x08022084
 800e53c:	0802208c 	.word	0x0802208c
 800e540:	08022098 	.word	0x08022098
 800e544:	080220a0 	.word	0x080220a0
 800e548:	080220ac 	.word	0x080220ac
 800e54c:	080220b8 	.word	0x080220b8
 800e550:	080220c8 	.word	0x080220c8
 800e554:	080220d0 	.word	0x080220d0
 800e558:	080220d4 	.word	0x080220d4
 800e55c:	08022178 	.word	0x08022178

0800e560 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d922      	bls.n	800e5b8 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	332c      	adds	r3, #44	; 0x2c
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4911      	ldr	r1, [pc, #68]	; (800e5c0 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	4798      	blx	r3
        print(number);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3334      	adds	r3, #52	; 0x34
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68b9      	ldr	r1, [r7, #8]
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	4798      	blx	r3
        print(" of ");
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	332c      	adds	r3, #44	; 0x2c
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	490b      	ldr	r1, [pc, #44]	; (800e5c4 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	4798      	blx	r3
        print(total);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3334      	adds	r3, #52	; 0x34
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	4798      	blx	r3
        print("\n");
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	332c      	adds	r3, #44	; 0x2c
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4905      	ldr	r1, [pc, #20]	; (800e5c8 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	4798      	blx	r3
    }
}
 800e5b8:	bf00      	nop
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	0802217c 	.word	0x0802217c
 800e5c4:	08022188 	.word	0x08022188
 800e5c8:	08022048 	.word	0x08022048

0800e5cc <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800e5d6:	6838      	ldr	r0, [r7, #0]
 800e5d8:	f7fd ffa1 	bl	800c51e <_ZNK11TestFailure17isOutsideTestFileEv>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d105      	bne.n	800e5ee <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800e5e2:	6838      	ldr	r0, [r7, #0]
 800e5e4:	f7fd ffad 	bl	800c542 <_ZNK11TestFailure18isInHelperFunctionEv>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e000      	b.n	800e5f4 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d004      	beq.n	800e602 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f81d 	bl	800e63a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800e600:	e003      	b.n	800e60a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f86b 	bl	800e6e0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	3318      	adds	r3, #24
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f107 0208 	add.w	r2, r7, #8
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	4610      	mov	r0, r2
 800e61a:	4798      	blx	r3
 800e61c:	f107 0308 	add.w	r3, r7, #8
 800e620:	4619      	mov	r1, r3
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 f8b2 	bl	800e78c <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800e628:	f107 0308 	add.w	r3, r7, #8
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fc fb74 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e632:	bf00      	nop
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b088      	sub	sp, #32
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	331c      	adds	r3, #28
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f107 0208 	add.w	r2, r7, #8
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	4610      	mov	r0, r2
 800e654:	4798      	blx	r3
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3320      	adds	r3, #32
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6838      	ldr	r0, [r7, #0]
 800e660:	4798      	blx	r3
 800e662:	4602      	mov	r2, r0
 800e664:	f107 0308 	add.w	r3, r7, #8
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f8be 	bl	800e7ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	4618      	mov	r0, r3
 800e676:	f7fc fb50 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	330c      	adds	r3, #12
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f107 0210 	add.w	r2, r7, #16
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	4610      	mov	r0, r2
 800e68a:	4798      	blx	r3
 800e68c:	f107 0310 	add.w	r3, r7, #16
 800e690:	4619      	mov	r1, r3
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 f85c 	bl	800e750 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800e698:	f107 0310 	add.w	r3, r7, #16
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fc fb3c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3308      	adds	r3, #8
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f107 0218 	add.w	r2, r7, #24
 800e6ae:	6839      	ldr	r1, [r7, #0]
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3314      	adds	r3, #20
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6838      	ldr	r0, [r7, #0]
 800e6be:	4798      	blx	r3
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	f107 0318 	add.w	r3, r7, #24
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f88f 	bl	800e7ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e6ce:	f107 0318 	add.w	r3, r7, #24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fc fb21 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e6d8:	bf00      	nop
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3308      	adds	r3, #8
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f107 0208 	add.w	r2, r7, #8
 800e6f6:	6839      	ldr	r1, [r7, #0]
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	4798      	blx	r3
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3314      	adds	r3, #20
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	6838      	ldr	r0, [r7, #0]
 800e706:	4798      	blx	r3
 800e708:	4602      	mov	r2, r0
 800e70a:	f107 0308 	add.w	r3, r7, #8
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f86b 	bl	800e7ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e716:	f107 0308 	add.w	r3, r7, #8
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fc fafd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	330c      	adds	r3, #12
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f107 0210 	add.w	r2, r7, #16
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	4610      	mov	r0, r2
 800e730:	4798      	blx	r3
 800e732:	f107 0310 	add.w	r3, r7, #16
 800e736:	4619      	mov	r1, r3
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 f809 	bl	800e750 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800e73e:	f107 0310 	add.w	r3, r7, #16
 800e742:	4618      	mov	r0, r3
 800e744:	f7fc fae9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e748:	bf00      	nop
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800e750:	b590      	push	{r4, r7, lr}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	332c      	adds	r3, #44	; 0x2c
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4909      	ldr	r1, [pc, #36]	; (800e788 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	4798      	blx	r3
    print(testName.asCharString());
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	332c      	adds	r3, #44	; 0x2c
 800e76e:	681c      	ldr	r4, [r3, #0]
 800e770:	6838      	ldr	r0, [r7, #0]
 800e772:	f7fc faa5 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e776:	4603      	mov	r3, r0
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	47a0      	blx	r4
}
 800e77e:	bf00      	nop
 800e780:	370c      	adds	r7, #12
 800e782:	46bd      	mov	sp, r7
 800e784:	bd90      	pop	{r4, r7, pc}
 800e786:	bf00      	nop
 800e788:	08022190 	.word	0x08022190

0800e78c <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800e78c:	b590      	push	{r4, r7, lr}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
    print("\n");
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	332c      	adds	r3, #44	; 0x2c
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4910      	ldr	r1, [pc, #64]	; (800e7e0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	4798      	blx	r3
    print("\t");
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	332c      	adds	r3, #44	; 0x2c
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	490d      	ldr	r1, [pc, #52]	; (800e7e4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	4798      	blx	r3
    print(reason.asCharString());
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	332c      	adds	r3, #44	; 0x2c
 800e7b8:	681c      	ldr	r4, [r3, #0]
 800e7ba:	6838      	ldr	r0, [r7, #0]
 800e7bc:	f7fc fa80 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	47a0      	blx	r4
    print("\n\n");
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	332c      	adds	r3, #44	; 0x2c
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4905      	ldr	r1, [pc, #20]	; (800e7e8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	4798      	blx	r3
}
 800e7d6:	bf00      	nop
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd90      	pop	{r4, r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08022048 	.word	0x08022048
 800e7e4:	080221a0 	.word	0x080221a0
 800e7e8:	08022178 	.word	0x08022178

0800e7ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800e7ec:	b590      	push	{r4, r7, lr}
 800e7ee:	b089      	sub	sp, #36	; 0x24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800e7f8:	f7ff fbf0 	bl	800dfdc <_ZN10TestOutput21getWorkingEnvironmentEv>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bf0c      	ite	eq
 800e802:	2301      	moveq	r3, #1
 800e804:	2300      	movne	r3, #0
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d015      	beq.n	800e838 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	3354      	adds	r3, #84	; 0x54
 800e812:	681c      	ldr	r4, [r3, #0]
 800e814:	f107 0310 	add.w	r3, r7, #16
 800e818:	68b9      	ldr	r1, [r7, #8]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fb ff19 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800e820:	f107 0310 	add.w	r3, r7, #16
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	4619      	mov	r1, r3
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	47a0      	blx	r4
 800e82c:	f107 0310 	add.w	r3, r7, #16
 800e830:	4618      	mov	r0, r3
 800e832:	f7fc fa72 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800e836:	e014      	b.n	800e862 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3350      	adds	r3, #80	; 0x50
 800e83e:	681c      	ldr	r4, [r3, #0]
 800e840:	f107 0318 	add.w	r3, r7, #24
 800e844:	68b9      	ldr	r1, [r7, #8]
 800e846:	4618      	mov	r0, r3
 800e848:	f7fb ff03 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800e84c:	f107 0318 	add.w	r3, r7, #24
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	4619      	mov	r1, r3
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	47a0      	blx	r4
 800e858:	f107 0318 	add.w	r3, r7, #24
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fc fa5c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800e862:	bf00      	nop
 800e864:	3724      	adds	r7, #36	; 0x24
 800e866:	46bd      	mov	sp, r7
 800e868:	bd90      	pop	{r4, r7, pc}
	...

0800e86c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800e86c:	b590      	push	{r4, r7, lr}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
    print("\n");
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	332c      	adds	r3, #44	; 0x2c
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4916      	ldr	r1, [pc, #88]	; (800e8dc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	4798      	blx	r3
    print(file.asCharString());
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	332c      	adds	r3, #44	; 0x2c
 800e88c:	681c      	ldr	r4, [r3, #0]
 800e88e:	68b8      	ldr	r0, [r7, #8]
 800e890:	f7fc fa16 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e894:	4603      	mov	r3, r0
 800e896:	4619      	mov	r1, r3
 800e898:	68f8      	ldr	r0, [r7, #12]
 800e89a:	47a0      	blx	r4
    print(":");
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	332c      	adds	r3, #44	; 0x2c
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	490e      	ldr	r1, [pc, #56]	; (800e8e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	4798      	blx	r3
    print(lineNumber);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3334      	adds	r3, #52	; 0x34
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	6879      	ldr	r1, [r7, #4]
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	4798      	blx	r3
    print(":");
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	332c      	adds	r3, #44	; 0x2c
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4907      	ldr	r1, [pc, #28]	; (800e8e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	4798      	blx	r3
    print(" error:");
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	332c      	adds	r3, #44	; 0x2c
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4905      	ldr	r1, [pc, #20]	; (800e8e4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	4798      	blx	r3
}
 800e8d4:	bf00      	nop
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd90      	pop	{r4, r7, pc}
 800e8dc:	08022048 	.word	0x08022048
 800e8e0:	080221a4 	.word	0x080221a4
 800e8e4:	080221a8 	.word	0x080221a8

0800e8e8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800e8e8:	b590      	push	{r4, r7, lr}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
    print("\n");
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	332c      	adds	r3, #44	; 0x2c
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4916      	ldr	r1, [pc, #88]	; (800e958 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	4798      	blx	r3
    print(file.asCharString());
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	332c      	adds	r3, #44	; 0x2c
 800e908:	681c      	ldr	r4, [r3, #0]
 800e90a:	68b8      	ldr	r0, [r7, #8]
 800e90c:	f7fc f9d8 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800e910:	4603      	mov	r3, r0
 800e912:	4619      	mov	r1, r3
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	47a0      	blx	r4
    print("(");
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	332c      	adds	r3, #44	; 0x2c
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	490e      	ldr	r1, [pc, #56]	; (800e95c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	4798      	blx	r3
    print(lineNumber);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3334      	adds	r3, #52	; 0x34
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6879      	ldr	r1, [r7, #4]
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	4798      	blx	r3
    print("):");
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	332c      	adds	r3, #44	; 0x2c
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4908      	ldr	r1, [pc, #32]	; (800e960 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	4798      	blx	r3
    print(" error:");
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	332c      	adds	r3, #44	; 0x2c
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4906      	ldr	r1, [pc, #24]	; (800e964 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	4798      	blx	r3
}
 800e950:	bf00      	nop
 800e952:	3714      	adds	r7, #20
 800e954:	46bd      	mov	sp, r7
 800e956:	bd90      	pop	{r4, r7, pc}
 800e958:	08022048 	.word	0x08022048
 800e95c:	080221b0 	.word	0x080221b0
 800e960:	080221b4 	.word	0x080221b4
 800e964:	080221a8 	.word	0x080221a8

0800e968 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	7a1b      	ldrb	r3, [r3, #8]
 800e976:	2b02      	cmp	r3, #2
 800e978:	d106      	bne.n	800e988 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	3328      	adds	r3, #40	; 0x28
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	4798      	blx	r3
}
 800e988:	bf00      	nop
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d009      	beq.n	800e9b6 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800e9a2:	4b0a      	ldr	r3, [pc, #40]	; (800e9cc <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	683a      	ldr	r2, [r7, #0]
 800e9a8:	7812      	ldrb	r2, [r2, #0]
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	4798      	blx	r3
        s++;
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e9b4:	e7f1      	b.n	800e99a <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	334c      	adds	r3, #76	; 0x4c
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	4798      	blx	r3
}
 800e9c2:	bf00      	nop
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	200000bc 	.word	0x200000bc

0800e9d0 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800e9d8:	4b03      	ldr	r3, [pc, #12]	; (800e9e8 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4798      	blx	r3
}
 800e9de:	bf00      	nop
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	200000c0 	.word	0x200000c0

0800e9ec <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7ff fb00 	bl	800dffc <_ZN10TestOutputC1Ev>
 800e9fc:	4a06      	ldr	r2, [pc, #24]	; (800ea18 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	611a      	str	r2, [r3, #16]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	615a      	str	r2, [r3, #20]
{
}
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	08024f38 	.word	0x08024f38

0800ea1c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	4a0e      	ldr	r2, [pc, #56]	; (800ea60 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d004      	beq.n	800ea3c <_ZN19CompositeTestOutputD1Ev+0x20>
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	3204      	adds	r2, #4
 800ea36:	6812      	ldr	r2, [r2, #0]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	4790      	blx	r2
  delete outputTwo_;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	695b      	ldr	r3, [r3, #20]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d004      	beq.n	800ea4e <_ZN19CompositeTestOutputD1Ev+0x32>
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	3204      	adds	r2, #4
 800ea48:	6812      	ldr	r2, [r2, #0]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff faf1 	bl	800e038 <_ZN10TestOutputD1Ev>
}
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	08024f38 	.word	0x08024f38

0800ea64 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
}
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff ffd5 	bl	800ea1c <_ZN19CompositeTestOutputD1Ev>
 800ea72:	2118      	movs	r1, #24
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7f9 f9e9 	bl	8007e4c <_ZdlPvj>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d004      	beq.n	800eaa0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	3204      	adds	r2, #4
 800ea9a:	6812      	ldr	r2, [r2, #0]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	4790      	blx	r2
  outputOne_ = output;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	683a      	ldr	r2, [r7, #0]
 800eaa4:	611a      	str	r2, [r3, #16]
}
 800eaa6:	bf00      	nop
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b082      	sub	sp, #8
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	695b      	ldr	r3, [r3, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d004      	beq.n	800eaca <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	3204      	adds	r2, #4
 800eac4:	6812      	ldr	r2, [r2, #0]
 800eac6:	4618      	mov	r0, r3
 800eac8:	4790      	blx	r2
  outputTwo_ = output;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	615a      	str	r2, [r3, #20]
}
 800ead0:	bf00      	nop
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d008      	beq.n	800eafa <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	691a      	ldr	r2, [r3, #16]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	3308      	adds	r3, #8
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	695b      	ldr	r3, [r3, #20]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d008      	beq.n	800eb14 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	695a      	ldr	r2, [r3, #20]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	695b      	ldr	r3, [r3, #20]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4610      	mov	r0, r2
 800eb12:	4798      	blx	r3
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d009      	beq.n	800eb42 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	691a      	ldr	r2, [r3, #16]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	330c      	adds	r3, #12
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6839      	ldr	r1, [r7, #0]
 800eb3e:	4610      	mov	r0, r2
 800eb40:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	695b      	ldr	r3, [r3, #20]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d009      	beq.n	800eb5e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	695a      	ldr	r2, [r3, #20]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	330c      	adds	r3, #12
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	4798      	blx	r3
}
 800eb5e:	bf00      	nop
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b082      	sub	sp, #8
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d009      	beq.n	800eb8c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	691a      	ldr	r2, [r3, #16]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3310      	adds	r3, #16
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6839      	ldr	r1, [r7, #0]
 800eb88:	4610      	mov	r0, r2
 800eb8a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	695b      	ldr	r3, [r3, #20]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d009      	beq.n	800eba8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	695a      	ldr	r2, [r3, #20]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	3310      	adds	r3, #16
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	4610      	mov	r0, r2
 800eba6:	4798      	blx	r3
}
 800eba8:	bf00      	nop
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	691a      	ldr	r2, [r3, #16]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3314      	adds	r3, #20
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	4610      	mov	r0, r2
 800ebd4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d009      	beq.n	800ebf2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	695a      	ldr	r2, [r3, #20]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	695b      	ldr	r3, [r3, #20]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3314      	adds	r3, #20
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	4610      	mov	r0, r2
 800ebf0:	4798      	blx	r3
}
 800ebf2:	bf00      	nop
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b082      	sub	sp, #8
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	691b      	ldr	r3, [r3, #16]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d009      	beq.n	800ec20 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	691a      	ldr	r2, [r3, #16]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	691b      	ldr	r3, [r3, #16]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	3318      	adds	r3, #24
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	6839      	ldr	r1, [r7, #0]
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	695b      	ldr	r3, [r3, #20]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d009      	beq.n	800ec3c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	695a      	ldr	r2, [r3, #20]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3318      	adds	r3, #24
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	4610      	mov	r0, r2
 800ec3a:	4798      	blx	r3
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d009      	beq.n	800ec6a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	691a      	ldr	r2, [r3, #16]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	331c      	adds	r3, #28
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	4610      	mov	r0, r2
 800ec68:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	695b      	ldr	r3, [r3, #20]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d009      	beq.n	800ec86 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	695a      	ldr	r2, [r3, #20]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	331c      	adds	r3, #28
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	4610      	mov	r0, r2
 800ec84:	4798      	blx	r3
}
 800ec86:	bf00      	nop
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b082      	sub	sp, #8
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	460b      	mov	r3, r1
 800ec98:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d009      	beq.n	800ecb6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	691a      	ldr	r2, [r3, #16]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	3320      	adds	r3, #32
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	78f9      	ldrb	r1, [r7, #3]
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d009      	beq.n	800ecd2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	695a      	ldr	r2, [r3, #20]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	3320      	adds	r3, #32
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	78f9      	ldrb	r1, [r7, #3]
 800ecce:	4610      	mov	r0, r2
 800ecd0:	4798      	blx	r3
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b082      	sub	sp, #8
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d008      	beq.n	800ecfc <_ZN19CompositeTestOutput5colorEv+0x22>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	691a      	ldr	r2, [r3, #16]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	3324      	adds	r3, #36	; 0x24
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	695b      	ldr	r3, [r3, #20]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d008      	beq.n	800ed16 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	695a      	ldr	r2, [r3, #20]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	695b      	ldr	r3, [r3, #20]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	3324      	adds	r3, #36	; 0x24
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4610      	mov	r0, r2
 800ed14:	4798      	blx	r3
}
 800ed16:	bf00      	nop
 800ed18:	3708      	adds	r7, #8
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b082      	sub	sp, #8
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
 800ed26:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	691b      	ldr	r3, [r3, #16]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d009      	beq.n	800ed44 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	691a      	ldr	r2, [r3, #16]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	691b      	ldr	r3, [r3, #16]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3328      	adds	r3, #40	; 0x28
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	4610      	mov	r0, r2
 800ed42:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695a      	ldr	r2, [r3, #20]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	695b      	ldr	r3, [r3, #20]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	3328      	adds	r3, #40	; 0x28
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	4798      	blx	r3
}
 800ed60:	bf00      	nop
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d009      	beq.n	800ed8e <_ZN19CompositeTestOutput5printEPKc+0x26>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	691a      	ldr	r2, [r3, #16]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	332c      	adds	r3, #44	; 0x2c
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	695b      	ldr	r3, [r3, #20]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d009      	beq.n	800edaa <_ZN19CompositeTestOutput5printEPKc+0x42>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	695a      	ldr	r2, [r3, #20]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	332c      	adds	r3, #44	; 0x2c
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	6839      	ldr	r1, [r7, #0]
 800eda6:	4610      	mov	r0, r2
 800eda8:	4798      	blx	r3
}
 800edaa:	bf00      	nop
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b082      	sub	sp, #8
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d009      	beq.n	800edd8 <_ZN19CompositeTestOutput5printEl+0x26>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	691a      	ldr	r2, [r3, #16]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3330      	adds	r3, #48	; 0x30
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	4610      	mov	r0, r2
 800edd6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d009      	beq.n	800edf4 <_ZN19CompositeTestOutput5printEl+0x42>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	695a      	ldr	r2, [r3, #20]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	3330      	adds	r3, #48	; 0x30
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	4610      	mov	r0, r2
 800edf2:	4798      	blx	r3
}
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d009      	beq.n	800ee22 <_ZN19CompositeTestOutput5printEj+0x26>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	691a      	ldr	r2, [r3, #16]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	3334      	adds	r3, #52	; 0x34
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6839      	ldr	r1, [r7, #0]
 800ee1e:	4610      	mov	r0, r2
 800ee20:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695b      	ldr	r3, [r3, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d009      	beq.n	800ee3e <_ZN19CompositeTestOutput5printEj+0x42>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	695a      	ldr	r2, [r3, #20]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3334      	adds	r3, #52	; 0x34
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	4798      	blx	r3
}
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	691b      	ldr	r3, [r3, #16]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00a      	beq.n	800ee70 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	691a      	ldr	r2, [r3, #16]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	691b      	ldr	r3, [r3, #16]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3338      	adds	r3, #56	; 0x38
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	ed97 0b00 	vldr	d0, [r7]
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00a      	beq.n	800ee8e <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	695a      	ldr	r2, [r3, #20]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	695b      	ldr	r3, [r3, #20]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	3338      	adds	r3, #56	; 0x38
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	ed97 0b00 	vldr	d0, [r7]
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	4798      	blx	r3
}
 800ee8e:	bf00      	nop
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b082      	sub	sp, #8
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d009      	beq.n	800eebc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	691a      	ldr	r2, [r3, #16]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	691b      	ldr	r3, [r3, #16]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	333c      	adds	r3, #60	; 0x3c
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6839      	ldr	r1, [r7, #0]
 800eeb8:	4610      	mov	r0, r2
 800eeba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	695b      	ldr	r3, [r3, #20]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d009      	beq.n	800eed8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	695a      	ldr	r2, [r3, #20]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	333c      	adds	r3, #60	; 0x3c
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	6839      	ldr	r1, [r7, #0]
 800eed4:	4610      	mov	r0, r2
 800eed6:	4798      	blx	r3
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d009      	beq.n	800ef06 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	691a      	ldr	r2, [r3, #16]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3344      	adds	r3, #68	; 0x44
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	4610      	mov	r0, r2
 800ef04:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	695b      	ldr	r3, [r3, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d009      	beq.n	800ef22 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	695a      	ldr	r2, [r3, #20]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3344      	adds	r3, #68	; 0x44
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6839      	ldr	r1, [r7, #0]
 800ef1e:	4610      	mov	r0, r2
 800ef20:	4798      	blx	r3
}
 800ef22:	bf00      	nop
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d008      	beq.n	800ef4c <_ZN19CompositeTestOutput5flushEv+0x22>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	691a      	ldr	r2, [r3, #16]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	691b      	ldr	r3, [r3, #16]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	334c      	adds	r3, #76	; 0x4c
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4610      	mov	r0, r2
 800ef4a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d008      	beq.n	800ef66 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	695a      	ldr	r2, [r3, #20]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	695b      	ldr	r3, [r3, #20]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	334c      	adds	r3, #76	; 0x4c
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4610      	mov	r0, r2
 800ef64:	4798      	blx	r3
}
 800ef66:	bf00      	nop
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800ef6e:	b480      	push	{r7}
 800ef70:	b085      	sub	sp, #20
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	60f8      	str	r0, [r7, #12]
 800ef76:	60b9      	str	r1, [r7, #8]
 800ef78:	607a      	str	r2, [r7, #4]
    }
 800ef7a:	bf00      	nop
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800ef86:	b480      	push	{r7}
 800ef88:	b085      	sub	sp, #20
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	60f8      	str	r0, [r7, #12]
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
    }
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
	...

0800efa0 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800efaa:	4a0b      	ldr	r2, [pc, #44]	; (800efd8 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	601a      	str	r2, [r3, #0]
 800efb0:	f000 f9ce 	bl	800f350 <_ZN14NullTestPlugin8instanceEv>
 800efb4:	4602      	mov	r2, r0
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	605a      	str	r2, [r3, #4]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3308      	adds	r3, #8
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fb fb46 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2201      	movs	r2, #1
 800efca:	741a      	strb	r2, [r3, #16]
{
}
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4618      	mov	r0, r3
 800efd0:	3708      	adds	r7, #8
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	080250f4 	.word	0x080250f4

0800efdc <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800efe6:	4a0a      	ldr	r2, [pc, #40]	; (800f010 <_ZN10TestPluginC1EPS_+0x34>)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	605a      	str	r2, [r3, #4]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3308      	adds	r3, #8
 800eff6:	4907      	ldr	r1, [pc, #28]	; (800f014 <_ZN10TestPluginC1EPS_+0x38>)
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fb fad6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2201      	movs	r2, #1
 800f002:	741a      	strb	r2, [r3, #16]
{
}
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	080250f4 	.word	0x080250f4
 800f014:	080221b8 	.word	0x080221b8

0800f018 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	4a06      	ldr	r2, [pc, #24]	; (800f03c <_ZN10TestPluginD1Ev+0x24>)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	601a      	str	r2, [r3, #0]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	3308      	adds	r3, #8
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fb fe75 	bl	800ad1a <_ZN12SimpleStringD1Ev>
{
}
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	080250f4 	.word	0x080250f4

0800f040 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
}
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7ff ffe5 	bl	800f018 <_ZN10TestPluginD1Ev>
 800f04e:	2114      	movs	r1, #20
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7f8 fefb 	bl	8007e4c <_ZdlPvj>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4618      	mov	r0, r3
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	605a      	str	r2, [r3, #4]
    return this;
 800f070:	687b      	ldr	r3, [r7, #4]
}
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	7c1b      	ldrb	r3, [r3, #16]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d007      	beq.n	800f0a2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3308      	adds	r3, #8
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	68b9      	ldr	r1, [r7, #8]
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6858      	ldr	r0, [r3, #4]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	3314      	adds	r3, #20
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	68b9      	ldr	r1, [r7, #8]
 800f0b4:	4798      	blx	r3
}
 800f0b6:	bf00      	nop
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b084      	sub	sp, #16
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	60f8      	str	r0, [r7, #12]
 800f0c6:	60b9      	str	r1, [r7, #8]
 800f0c8:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6858      	ldr	r0, [r3, #4]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3318      	adds	r3, #24
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	7c1b      	ldrb	r3, [r3, #16]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d007      	beq.n	800f0f6 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	68b9      	ldr	r1, [r7, #8]
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	4798      	blx	r3
}
 800f0f6:	bf00      	nop
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800f0fe:	b590      	push	{r4, r7, lr}
 800f100:	b085      	sub	sp, #20
 800f102:	af00      	add	r7, sp, #0
 800f104:	60f8      	str	r0, [r7, #12]
 800f106:	60b9      	str	r1, [r7, #8]
 800f108:	607a      	str	r2, [r7, #4]
 800f10a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	331c      	adds	r3, #28
 800f112:	681c      	ldr	r4, [r3, #0]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	68b9      	ldr	r1, [r7, #8]
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	47a0      	blx	r4
 800f11e:	4603      	mov	r3, r0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	bd90      	pop	{r4, r7, pc}

0800f128 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800f128:	b590      	push	{r4, r7, lr}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3310      	adds	r3, #16
 800f13c:	681c      	ldr	r4, [r3, #0]
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	68b9      	ldr	r1, [r7, #8]
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	47a0      	blx	r4
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800f14e:	2301      	movs	r3, #1
 800f150:	e011      	b.n	800f176 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00c      	beq.n	800f174 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6858      	ldr	r0, [r3, #4]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	331c      	adds	r3, #28
 800f166:	681c      	ldr	r4, [r3, #0]
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	47a0      	blx	r4
 800f170:	4603      	mov	r3, r0
 800f172:	e000      	b.n	800f176 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800f174:	2300      	movs	r3, #0
}
 800f176:	4618      	mov	r0, r3
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd90      	pop	{r4, r7, pc}

0800f17e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800f17e:	b480      	push	{r7}
 800f180:	b083      	sub	sp, #12
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
    return name_;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	3308      	adds	r3, #8
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr

0800f196 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b082      	sub	sp, #8
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
 800f19e:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3308      	adds	r3, #8
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	6838      	ldr	r0, [r7, #0]
 800f1a8:	f7fb fdc3 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	e00d      	b.n	800f1d2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d007      	beq.n	800f1ce <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	6839      	ldr	r1, [r7, #0]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7ff ffe6 	bl	800f196 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	e001      	b.n	800f1d2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	685b      	ldr	r3, [r3, #4]
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800f1da:	b480      	push	{r7}
 800f1dc:	b083      	sub	sp, #12
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
    return next_;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	685b      	ldr	r3, [r3, #4]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b084      	sub	sp, #16
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00e      	beq.n	800f226 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff ffb6 	bl	800f17e <_ZN10TestPlugin7getNameEv>
 800f212:	4603      	mov	r3, r0
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	4618      	mov	r0, r3
 800f218:	f7fb fd8b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800f222:	2301      	movs	r3, #1
 800f224:	e000      	b.n	800f228 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800f226:	2300      	movs	r3, #0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d007      	beq.n	800f23c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	685a      	ldr	r2, [r3, #4]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800f23c:	68fb      	ldr	r3, [r7, #12]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800f246:	b480      	push	{r7}
 800f248:	b083      	sub	sp, #12
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	741a      	strb	r2, [r3, #16]
}
 800f254:	bf00      	nop
 800f256:	370c      	adds	r7, #12
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr

0800f260 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	741a      	strb	r2, [r3, #16]
}
 800f26e:	bf00      	nop
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
    return enabled_;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	7c1b      	ldrb	r3, [r3, #16]
}
 800f286:	4618      	mov	r0, r3
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
	...

0800f294 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7ff fe7c 	bl	800efa0 <_ZN10TestPluginC1ERK12SimpleString>
 800f2a8:	4a05      	ldr	r2, [pc, #20]	; (800f2c0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800f2ae:	4b05      	ldr	r3, [pc, #20]	; (800f2c4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	601a      	str	r2, [r3, #0]
}
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	080250b0 	.word	0x080250b0
 800f2c4:	20000768 	.word	0x20000768

0800f2c8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800f2d4:	4b0e      	ldr	r3, [pc, #56]	; (800f310 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	617b      	str	r3, [r7, #20]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	db0d      	blt.n	800f2fe <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800f2e2:	4a0c      	ldr	r2, [pc, #48]	; (800f314 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f2ea:	490a      	ldr	r1, [pc, #40]	; (800f314 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	00db      	lsls	r3, r3, #3
 800f2f0:	440b      	add	r3, r1
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	3b01      	subs	r3, #1
 800f2fa:	617b      	str	r3, [r7, #20]
 800f2fc:	e7ee      	b.n	800f2dc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800f2fe:	4b04      	ldr	r3, [pc, #16]	; (800f310 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800f300:	2200      	movs	r2, #0
 800f302:	601a      	str	r2, [r3, #0]
}
 800f304:	bf00      	nop
 800f306:	371c      	adds	r7, #28
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	20000768 	.word	0x20000768
 800f314:	2000076c 	.word	0x2000076c

0800f318 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2100      	movs	r1, #0
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff fe59 	bl	800efdc <_ZN10TestPluginC1EPS_>
 800f32a:	4a04      	ldr	r2, [pc, #16]	; (800f33c <_ZN14NullTestPluginC1Ev+0x24>)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	601a      	str	r2, [r3, #0]
{
}
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4618      	mov	r0, r3
 800f334:	3708      	adds	r7, #8
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	0802506c 	.word	0x0802506c

0800f340 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800f340:	b580      	push	{r7, lr}
 800f342:	af00      	add	r7, sp, #0
 800f344:	4801      	ldr	r0, [pc, #4]	; (800f34c <__tcf_0+0xc>)
 800f346:	f000 f849 	bl	800f3dc <_ZN14NullTestPluginD1Ev>
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	2000086c 	.word	0x2000086c

0800f350 <_ZN14NullTestPlugin8instanceEv>:
{
 800f350:	b580      	push	{r7, lr}
 800f352:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800f354:	4b12      	ldr	r3, [pc, #72]	; (800f3a0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	f3bf 8f5b 	dmb	ish
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	bf0c      	ite	eq
 800f366:	2301      	moveq	r3, #1
 800f368:	2300      	movne	r3, #0
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d013      	beq.n	800f398 <_ZN14NullTestPlugin8instanceEv+0x48>
 800f370:	480b      	ldr	r0, [pc, #44]	; (800f3a0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800f372:	f00d ffd9 	bl	801d328 <__cxa_guard_acquire>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	bf14      	ite	ne
 800f37c:	2301      	movne	r3, #1
 800f37e:	2300      	moveq	r3, #0
 800f380:	b2db      	uxtb	r3, r3
 800f382:	2b00      	cmp	r3, #0
 800f384:	d008      	beq.n	800f398 <_ZN14NullTestPlugin8instanceEv+0x48>
 800f386:	4807      	ldr	r0, [pc, #28]	; (800f3a4 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800f388:	f7ff ffc6 	bl	800f318 <_ZN14NullTestPluginC1Ev>
 800f38c:	4804      	ldr	r0, [pc, #16]	; (800f3a0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800f38e:	f00d ffd7 	bl	801d340 <__cxa_guard_release>
 800f392:	4805      	ldr	r0, [pc, #20]	; (800f3a8 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800f394:	f00d fffb 	bl	801d38e <atexit>
    return &_instance;
 800f398:	4b02      	ldr	r3, [pc, #8]	; (800f3a4 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	20000880 	.word	0x20000880
 800f3a4:	2000086c 	.word	0x2000086c
 800f3a8:	0800f341 	.word	0x0800f341

0800f3ac <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
}
 800f3b8:	bf00      	nop
 800f3ba:	3714      	adds	r7, #20
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
}
 800f3d0:	bf00      	nop
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	4a05      	ldr	r2, [pc, #20]	; (800f3fc <_ZN14NullTestPluginD1Ev+0x20>)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7ff fe13 	bl	800f018 <_ZN10TestPluginD1Ev>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	0802506c 	.word	0x0802506c

0800f400 <_ZN14NullTestPluginD0Ev>:
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff ffe7 	bl	800f3dc <_ZN14NullTestPluginD1Ev>
 800f40e:	2114      	movs	r1, #20
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7f8 fd1b 	bl	8007e4c <_ZdlPvj>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800f428:	4a0f      	ldr	r2, [pc, #60]	; (800f468 <_ZN12TestRegistryC1Ev+0x48>)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	605a      	str	r2, [r3, #4]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	609a      	str	r2, [r3, #8]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	60da      	str	r2, [r3, #12]
 800f440:	f7ff ff86 	bl	800f350 <_ZN14NullTestPlugin8instanceEv>
 800f444:	4602      	mov	r2, r0
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	611a      	str	r2, [r3, #16]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	751a      	strb	r2, [r3, #20]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	619a      	str	r2, [r3, #24]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	771a      	strb	r2, [r3, #28]
{
}
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	08025138 	.word	0x08025138

0800f46c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	4a04      	ldr	r2, [pc, #16]	; (800f488 <_ZN12TestRegistryD1Ev+0x1c>)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	601a      	str	r2, [r3, #0]
{
}
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4618      	mov	r0, r3
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	08025138 	.word	0x08025138

0800f48c <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
}
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7ff ffe9 	bl	800f46c <_ZN12TestRegistryD1Ev>
 800f49a:	2120      	movs	r1, #32
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7f8 fcd5 	bl	8007e4c <_ZdlPvj>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	6852      	ldr	r2, [r2, #4]
 800f4c2:	4611      	mov	r1, r2
 800f4c4:	6838      	ldr	r0, [r7, #0]
 800f4c6:	4798      	blx	r3
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	605a      	str	r2, [r3, #4]
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b084      	sub	sp, #16
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
 800f4de:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3308      	adds	r3, #8
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6838      	ldr	r0, [r7, #0]
 800f4ee:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	60bb      	str	r3, [r7, #8]
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d05c      	beq.n	800f5b6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	7d1b      	ldrb	r3, [r3, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d005      	beq.n	800f510 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	3380      	adds	r3, #128	; 0x80
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	68b8      	ldr	r0, [r7, #8]
 800f50e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	7f1b      	ldrb	r3, [r3, #28]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3384      	adds	r3, #132	; 0x84
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68b8      	ldr	r0, [r7, #8]
 800f522:	4798      	blx	r3

        if (groupStart) {
 800f524:	7bfb      	ldrb	r3, [r7, #15]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d008      	beq.n	800f53c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3310      	adds	r3, #16
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	6838      	ldr	r0, [r7, #0]
 800f536:	4798      	blx	r3
            groupStart = false;
 800f538:	2300      	movs	r3, #0
 800f53a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	3320      	adds	r3, #32
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	6838      	ldr	r0, [r7, #0]
 800f546:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	68b9      	ldr	r1, [r7, #8]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fb79 	bl	800fc44 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d016      	beq.n	800f586 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3318      	adds	r3, #24
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	68b9      	ldr	r1, [r7, #8]
 800f562:	6838      	ldr	r0, [r7, #0]
 800f564:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3390      	adds	r3, #144	; 0x90
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	6911      	ldr	r1, [r2, #16]
 800f572:	683a      	ldr	r2, [r7, #0]
 800f574:	68b8      	ldr	r0, [r7, #8]
 800f576:	4798      	blx	r3
            result.currentTestEnded(test);
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	331c      	adds	r3, #28
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68b9      	ldr	r1, [r7, #8]
 800f582:	6838      	ldr	r0, [r7, #0]
 800f584:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800f586:	68b9      	ldr	r1, [r7, #8]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 fa5b 	bl	800fa44 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d008      	beq.n	800f5a6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800f594:	2301      	movs	r3, #1
 800f596:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	3314      	adds	r3, #20
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68b9      	ldr	r1, [r7, #8]
 800f5a2:	6838      	ldr	r0, [r7, #0]
 800f5a4:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	330c      	adds	r3, #12
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	68b8      	ldr	r0, [r7, #8]
 800f5b0:	4798      	blx	r3
 800f5b2:	60b8      	str	r0, [r7, #8]
 800f5b4:	e79f      	b.n	800f4f6 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	330c      	adds	r3, #12
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6838      	ldr	r0, [r7, #0]
 800f5c0:	4798      	blx	r3
    currentRepetition_++;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	699b      	ldr	r3, [r3, #24]
 800f5c6:	1c5a      	adds	r2, r3, #1
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	619a      	str	r2, [r3, #24]
}
 800f5cc:	bf00      	nop
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800f5d4:	b590      	push	{r4, r7, lr}
 800f5d6:	b08f      	sub	sp, #60	; 0x3c
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800f5de:	f107 0314 	add.w	r3, r7, #20
 800f5e2:	4953      	ldr	r1, [pc, #332]	; (800f730 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fa ffe0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d04d      	beq.n	800f692 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800f5f6:	f107 030c 	add.w	r3, r7, #12
 800f5fa:	494d      	ldr	r1, [pc, #308]	; (800f730 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fa ffd4 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800f602:	f107 030c 	add.w	r3, r7, #12
 800f606:	494b      	ldr	r1, [pc, #300]	; (800f734 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fb fc15 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800f60e:	f107 031c 	add.w	r3, r7, #28
 800f612:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f614:	4618      	mov	r0, r3
 800f616:	f001 f9d2 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800f61a:	f107 021c 	add.w	r2, r7, #28
 800f61e:	f107 030c 	add.w	r3, r7, #12
 800f622:	4611      	mov	r1, r2
 800f624:	4618      	mov	r0, r3
 800f626:	f7fb fbf5 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f62a:	f107 031c 	add.w	r3, r7, #28
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fb fb73 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        gname += "#";
 800f634:	f107 030c 	add.w	r3, r7, #12
 800f638:	493e      	ldr	r1, [pc, #248]	; (800f734 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fb fbfc 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800f640:	f107 020c 	add.w	r2, r7, #12
 800f644:	f107 0314 	add.w	r3, r7, #20
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fb f82b 	bl	800a6a6 <_ZNK12SimpleString8containsERKS_>
 800f650:	4603      	mov	r3, r0
 800f652:	f083 0301 	eor.w	r3, r3, #1
 800f656:	b2db      	uxtb	r3, r3
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00d      	beq.n	800f678 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800f65c:	f107 020c 	add.w	r2, r7, #12
 800f660:	f107 0314 	add.w	r3, r7, #20
 800f664:	4611      	mov	r1, r2
 800f666:	4618      	mov	r0, r3
 800f668:	f7fb fbd4 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800f66c:	f107 0314 	add.w	r3, r7, #20
 800f670:	4931      	ldr	r1, [pc, #196]	; (800f738 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800f672:	4618      	mov	r0, r3
 800f674:	f7fb fbe0 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800f678:	f107 030c 	add.w	r3, r7, #12
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fb fb4c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	330c      	adds	r3, #12
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f68c:	4798      	blx	r3
 800f68e:	6378      	str	r0, [r7, #52]	; 0x34
 800f690:	e7ae      	b.n	800f5f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800f692:	f107 0314 	add.w	r3, r7, #20
 800f696:	4a26      	ldr	r2, [pc, #152]	; (800f730 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f698:	4926      	ldr	r1, [pc, #152]	; (800f734 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fb f99a 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800f6a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6a4:	4924      	ldr	r1, [pc, #144]	; (800f738 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fa ff7f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800f6ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f6b0:	f107 0314 	add.w	r3, r7, #20
 800f6b4:	4611      	mov	r1, r2
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fb f874 	bl	800a7a4 <_ZNK12SimpleString8endsWithERKS_>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	461c      	mov	r4, r3
 800f6c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fb fb28 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800f6ca:	2c00      	cmp	r4, #0
 800f6cc:	d01a      	beq.n	800f704 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800f6ce:	f107 0314 	add.w	r3, r7, #20
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fb fb00 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800f6e0:	f107 0114 	add.w	r1, r7, #20
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f7fb fc21 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
 800f6ea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f6ee:	f107 0314 	add.w	r3, r7, #20
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fa ffc4 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800f6fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fb fb0b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	3338      	adds	r3, #56	; 0x38
 800f70a:	681c      	ldr	r4, [r3, #0]
 800f70c:	f107 0314 	add.w	r3, r7, #20
 800f710:	4618      	mov	r0, r3
 800f712:	f7fb fad5 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800f716:	4603      	mov	r3, r0
 800f718:	4619      	mov	r1, r3
 800f71a:	6838      	ldr	r0, [r7, #0]
 800f71c:	47a0      	blx	r4
    SimpleString groupList;
 800f71e:	f107 0314 	add.w	r3, r7, #20
 800f722:	4618      	mov	r0, r3
 800f724:	f7fb faf9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800f728:	bf00      	nop
 800f72a:	373c      	adds	r7, #60	; 0x3c
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd90      	pop	{r4, r7, pc}
 800f730:	08022208 	.word	0x08022208
 800f734:	0802220c 	.word	0x0802220c
 800f738:	08022210 	.word	0x08022210

0800f73c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800f73c:	b590      	push	{r4, r7, lr}
 800f73e:	b091      	sub	sp, #68	; 0x44
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800f746:	f107 0314 	add.w	r3, r7, #20
 800f74a:	4964      	ldr	r1, [pc, #400]	; (800f8dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fa ff2c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d06e      	beq.n	800f83c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fa6e 	bl	800fc44 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d05e      	beq.n	800f82c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800f76e:	f107 030c 	add.w	r3, r7, #12
 800f772:	495a      	ldr	r1, [pc, #360]	; (800f8dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f774:	4618      	mov	r0, r3
 800f776:	f7fa ff18 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800f77a:	f107 030c 	add.w	r3, r7, #12
 800f77e:	4958      	ldr	r1, [pc, #352]	; (800f8e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f780:	4618      	mov	r0, r3
 800f782:	f7fb fb59 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800f786:	f107 031c 	add.w	r3, r7, #28
 800f78a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f78c:	4618      	mov	r0, r3
 800f78e:	f001 f916 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800f792:	f107 021c 	add.w	r2, r7, #28
 800f796:	f107 030c 	add.w	r3, r7, #12
 800f79a:	4611      	mov	r1, r2
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fb fb39 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f7a2:	f107 031c 	add.w	r3, r7, #28
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fb fab7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800f7ac:	f107 030c 	add.w	r3, r7, #12
 800f7b0:	494c      	ldr	r1, [pc, #304]	; (800f8e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fb fb40 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800f7b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f001 f8ee 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800f7c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f7c8:	f107 030c 	add.w	r3, r7, #12
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fb fb20 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fb fa9e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800f7de:	f107 030c 	add.w	r3, r7, #12
 800f7e2:	493f      	ldr	r1, [pc, #252]	; (800f8e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fb fb27 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800f7ea:	f107 020c 	add.w	r2, r7, #12
 800f7ee:	f107 0314 	add.w	r3, r7, #20
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fa ff56 	bl	800a6a6 <_ZNK12SimpleString8containsERKS_>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f083 0301 	eor.w	r3, r3, #1
 800f800:	b2db      	uxtb	r3, r3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00d      	beq.n	800f822 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800f806:	f107 020c 	add.w	r2, r7, #12
 800f80a:	f107 0314 	add.w	r3, r7, #20
 800f80e:	4611      	mov	r1, r2
 800f810:	4618      	mov	r0, r3
 800f812:	f7fb faff 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800f816:	f107 0314 	add.w	r3, r7, #20
 800f81a:	4933      	ldr	r1, [pc, #204]	; (800f8e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fb fb0b 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800f822:	f107 030c 	add.w	r3, r7, #12
 800f826:	4618      	mov	r0, r3
 800f828:	f7fb fa77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	330c      	adds	r3, #12
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f836:	4798      	blx	r3
 800f838:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f83a:	e78d      	b.n	800f758 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800f83c:	f107 0314 	add.w	r3, r7, #20
 800f840:	4a26      	ldr	r2, [pc, #152]	; (800f8dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f842:	4927      	ldr	r1, [pc, #156]	; (800f8e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f844:	4618      	mov	r0, r3
 800f846:	f7fb f8c5 	bl	800a9d4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800f84a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f84e:	4926      	ldr	r1, [pc, #152]	; (800f8e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800f850:	4618      	mov	r0, r3
 800f852:	f7fa feaa 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 800f856:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f85a:	f107 0314 	add.w	r3, r7, #20
 800f85e:	4611      	mov	r1, r2
 800f860:	4618      	mov	r0, r3
 800f862:	f7fa ff9f 	bl	800a7a4 <_ZNK12SimpleString8endsWithERKS_>
 800f866:	4603      	mov	r3, r0
 800f868:	461c      	mov	r4, r3
 800f86a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fb fa53 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800f874:	2c00      	cmp	r4, #0
 800f876:	d01a      	beq.n	800f8ae <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800f878:	f107 0314 	add.w	r3, r7, #20
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fb fa2b 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 800f882:	4603      	mov	r3, r0
 800f884:	3b01      	subs	r3, #1
 800f886:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f88a:	f107 0114 	add.w	r1, r7, #20
 800f88e:	2200      	movs	r2, #0
 800f890:	f7fb fb4c 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
 800f894:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f898:	f107 0314 	add.w	r3, r7, #20
 800f89c:	4611      	mov	r1, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fa feef 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 800f8a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fb fa36 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	3338      	adds	r3, #56	; 0x38
 800f8b4:	681c      	ldr	r4, [r3, #0]
 800f8b6:	f107 0314 	add.w	r3, r7, #20
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fb fa00 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6838      	ldr	r0, [r7, #0]
 800f8c6:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800f8c8:	f107 0314 	add.w	r3, r7, #20
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fb fa24 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800f8d2:	bf00      	nop
 800f8d4:	3744      	adds	r7, #68	; 0x44
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd90      	pop	{r4, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	08022208 	.word	0x08022208
 800f8e0:	0802220c 	.word	0x0802220c
 800f8e4:	08022214 	.word	0x08022214
 800f8e8:	08022210 	.word	0x08022210

0800f8ec <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800f8ec:	b590      	push	{r4, r7, lr}
 800f8ee:	b091      	sub	sp, #68	; 0x44
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800f8f6:	f107 0314 	add.w	r3, r7, #20
 800f8fa:	494f      	ldr	r1, [pc, #316]	; (800fa38 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fa fe54 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d07d      	beq.n	800fa0a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800f90e:	f107 030c 	add.w	r3, r7, #12
 800f912:	4949      	ldr	r1, [pc, #292]	; (800fa38 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800f914:	4618      	mov	r0, r3
 800f916:	f7fa fe48 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800f91a:	f107 031c 	add.w	r3, r7, #28
 800f91e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f920:	4618      	mov	r0, r3
 800f922:	f001 f84c 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800f926:	f107 021c 	add.w	r2, r7, #28
 800f92a:	f107 030c 	add.w	r3, r7, #12
 800f92e:	4611      	mov	r1, r2
 800f930:	4618      	mov	r0, r3
 800f932:	f7fb fa6f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f936:	f107 031c 	add.w	r3, r7, #28
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fb f9ed 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f940:	f107 030c 	add.w	r3, r7, #12
 800f944:	493d      	ldr	r1, [pc, #244]	; (800fa3c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f946:	4618      	mov	r0, r3
 800f948:	f7fb fa76 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800f94c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f952:	4618      	mov	r0, r3
 800f954:	f001 f824 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800f958:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f95c:	f107 030c 	add.w	r3, r7, #12
 800f960:	4611      	mov	r1, r2
 800f962:	4618      	mov	r0, r3
 800f964:	f7fb fa56 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7fb f9d4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f972:	f107 030c 	add.w	r3, r7, #12
 800f976:	4931      	ldr	r1, [pc, #196]	; (800fa3c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fb fa5d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800f97e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f984:	4618      	mov	r0, r3
 800f986:	f001 f8dc 	bl	8010b42 <_ZNK10UtestShell7getFileEv>
 800f98a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f98e:	f107 030c 	add.w	r3, r7, #12
 800f992:	4611      	mov	r1, r2
 800f994:	4618      	mov	r0, r3
 800f996:	f7fb fa3d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f99a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fb f9bb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f9a4:	f107 030c 	add.w	r3, r7, #12
 800f9a8:	4924      	ldr	r1, [pc, #144]	; (800fa3c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fb fa44 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800f9b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f9b2:	f001 f8d5 	bl	8010b60 <_ZNK10UtestShell13getLineNumberEv>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f9be:	4920      	ldr	r1, [pc, #128]	; (800fa40 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fb feb1 	bl	800b728 <_Z16StringFromFormatPKcz>
 800f9c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f9ca:	f107 030c 	add.w	r3, r7, #12
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fb fa1f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 800f9d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fb f99d 	bl	800ad1a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800f9e0:	f107 020c 	add.w	r2, r7, #12
 800f9e4:	f107 0314 	add.w	r3, r7, #20
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fb fa12 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800f9f0:	f107 030c 	add.w	r3, r7, #12
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fb f990 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	330c      	adds	r3, #12
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa04:	4798      	blx	r3
 800fa06:	63f8      	str	r0, [r7, #60]	; 0x3c
 800fa08:	e77e      	b.n	800f908 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3338      	adds	r3, #56	; 0x38
 800fa10:	681c      	ldr	r4, [r3, #0]
 800fa12:	f107 0314 	add.w	r3, r7, #20
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fb f952 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6838      	ldr	r0, [r7, #0]
 800fa22:	47a0      	blx	r4
    SimpleString testLocations;
 800fa24:	f107 0314 	add.w	r3, r7, #20
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fb f976 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 800fa2e:	bf00      	nop
 800fa30:	3744      	adds	r7, #68	; 0x44
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd90      	pop	{r4, r7, pc}
 800fa36:	bf00      	nop
 800fa38:	08022208 	.word	0x08022208
 800fa3c:	08022214 	.word	0x08022214
 800fa40:	08022218 	.word	0x08022218

0800fa44 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800fa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa46:	b087      	sub	sp, #28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800fa4e:	2400      	movs	r4, #0
 800fa50:	2500      	movs	r5, #0
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d028      	beq.n	800faaa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	330c      	adds	r3, #12
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6838      	ldr	r0, [r7, #0]
 800fa62:	4798      	blx	r3
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d01f      	beq.n	800faaa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800fa6a:	f107 0308 	add.w	r3, r7, #8
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f000 ffa4 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800fa76:	2401      	movs	r4, #1
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	330c      	adds	r3, #12
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6838      	ldr	r0, [r7, #0]
 800fa82:	4798      	blx	r3
 800fa84:	4602      	mov	r2, r0
 800fa86:	f107 0310 	add.w	r3, r7, #16
 800fa8a:	4611      	mov	r1, r2
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f000 ff96 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800fa92:	2501      	movs	r5, #1
 800fa94:	f107 0210 	add.w	r2, r7, #16
 800fa98:	f107 0308 	add.w	r3, r7, #8
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fb f98c 	bl	800adbc <_ZneRK12SimpleStringS1_>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800faaa:	2601      	movs	r6, #1
 800faac:	e000      	b.n	800fab0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800faae:	2600      	movs	r6, #0
 800fab0:	2d00      	cmp	r5, #0
 800fab2:	d004      	beq.n	800fabe <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800fab4:	f107 0310 	add.w	r3, r7, #16
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fb f92e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800fabe:	2c00      	cmp	r4, #0
 800fac0:	d004      	beq.n	800facc <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800fac2:	f107 0308 	add.w	r3, r7, #8
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fb f927 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800facc:	4633      	mov	r3, r6
}
 800face:	4618      	mov	r0, r3
 800fad0:	371c      	adds	r7, #28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fad6 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b082      	sub	sp, #8
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00a      	beq.n	800fafc <_ZN12TestRegistry10countTestsEv+0x26>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3310      	adds	r3, #16
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4610      	mov	r0, r2
 800faf6:	4798      	blx	r3
 800faf8:	4603      	mov	r3, r0
 800fafa:	e000      	b.n	800fafe <_ZN12TestRegistry10countTestsEv+0x28>
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
	...

0800fb08 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	4801      	ldr	r0, [pc, #4]	; (800fb14 <__tcf_0+0xc>)
 800fb0e:	f7ff fcad 	bl	800f46c <_ZN12TestRegistryD1Ev>
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	20000888 	.word	0x20000888

0800fb18 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800fb1c:	4b15      	ldr	r3, [pc, #84]	; (800fb74 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	f3bf 8f5b 	dmb	ish
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	bf0c      	ite	eq
 800fb2e:	2301      	moveq	r3, #1
 800fb30:	2300      	movne	r3, #0
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d013      	beq.n	800fb60 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800fb38:	480e      	ldr	r0, [pc, #56]	; (800fb74 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800fb3a:	f00d fbf5 	bl	801d328 <__cxa_guard_acquire>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bf14      	ite	ne
 800fb44:	2301      	movne	r3, #1
 800fb46:	2300      	moveq	r3, #0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d008      	beq.n	800fb60 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800fb4e:	480a      	ldr	r0, [pc, #40]	; (800fb78 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800fb50:	f7ff fc66 	bl	800f420 <_ZN12TestRegistryC1Ev>
 800fb54:	4807      	ldr	r0, [pc, #28]	; (800fb74 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800fb56:	f00d fbf3 	bl	801d340 <__cxa_guard_release>
 800fb5a:	4808      	ldr	r0, [pc, #32]	; (800fb7c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800fb5c:	f00d fc17 	bl	801d38e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800fb60:	4b07      	ldr	r3, [pc, #28]	; (800fb80 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d002      	beq.n	800fb6e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800fb68:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	e000      	b.n	800fb70 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800fb6e:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	200008a8 	.word	0x200008a8
 800fb78:	20000888 	.word	0x20000888
 800fb7c:	0800fb09 	.word	0x0800fb09
 800fb80:	20000884 	.word	0x20000884

0800fb84 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800fb8e:	4a04      	ldr	r2, [pc, #16]	; (800fba0 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	6013      	str	r3, [r2, #0]
}
 800fb94:	bf00      	nop
 800fb96:	370c      	adds	r7, #12
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	20000884 	.word	0x20000884

0800fba4 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00a      	beq.n	800fbca <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	330c      	adds	r3, #12
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4610      	mov	r0, r2
 800fbc4:	4798      	blx	r3
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	e000      	b.n	800fbcc <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	6053      	str	r3, [r2, #4]

}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	609a      	str	r2, [r3, #8]
}
 800fbe8:	bf00      	nop
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	60da      	str	r2, [r3, #12]
}
 800fc04:	bf00      	nop
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	771a      	strb	r2, [r3, #28]
}
 800fc1e:	bf00      	nop
 800fc20:	370c      	adds	r7, #12
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800fc2a:	b480      	push	{r7}
 800fc2c:	b083      	sub	sp, #12
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	751a      	strb	r2, [r3, #20]
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	68d9      	ldr	r1, [r3, #12]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	68b8      	ldr	r0, [r7, #8]
 800fc5c:	f000 ffbb 	bl	8010bd6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800fc66:	2301      	movs	r3, #1
 800fc68:	e006      	b.n	800fc78 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	332c      	adds	r3, #44	; 0x2c
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	4798      	blx	r3
        return false;
 800fc76:	2300      	movs	r3, #0
    }
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800fc88:	f7ff fb62 	bl	800f350 <_ZN14NullTestPlugin8instanceEv>
 800fc8c:	4602      	mov	r2, r0
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	611a      	str	r2, [r3, #16]
}
 800fc92:	bf00      	nop
 800fc94:	3708      	adds	r7, #8
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}

0800fc9a <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b082      	sub	sp, #8
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	3324      	adds	r3, #36	; 0x24
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	6912      	ldr	r2, [r2, #16]
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	6838      	ldr	r0, [r7, #0]
 800fcb4:	4798      	blx	r3
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	611a      	str	r2, [r3, #16]
}
 800fcbc:	bf00      	nop
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	691b      	ldr	r3, [r3, #16]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	691b      	ldr	r3, [r3, #16]
 800fcea:	6839      	ldr	r1, [r7, #0]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fa52 	bl	800f196 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800fcf2:	4603      	mov	r3, r0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	691a      	ldr	r2, [r3, #16]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	691b      	ldr	r3, [r3, #16]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3328      	adds	r3, #40	; 0x28
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6839      	ldr	r1, [r7, #0]
 800fd16:	4610      	mov	r0, r2
 800fd18:	4798      	blx	r3
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	691b      	ldr	r3, [r3, #16]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	bf0c      	ite	eq
 800fd24:	2301      	moveq	r3, #1
 800fd26:	2300      	movne	r3, #0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00b      	beq.n	800fd46 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	691a      	ldr	r2, [r3, #16]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	332c      	adds	r3, #44	; 0x2c
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4610      	mov	r0, r2
 800fd3e:	4798      	blx	r3
 800fd40:	4602      	mov	r2, r0
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7ff fa17 	bl	800f17e <_ZN10TestPlugin7getNameEv>
 800fd50:	4603      	mov	r3, r0
 800fd52:	6839      	ldr	r1, [r7, #0]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fa ffec 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00b      	beq.n	800fd78 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	691a      	ldr	r2, [r3, #16]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	691b      	ldr	r3, [r3, #16]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	332c      	adds	r3, #44	; 0x2c
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4610      	mov	r0, r2
 800fd70:	4798      	blx	r3
 800fd72:	4602      	mov	r2, r0
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	691a      	ldr	r2, [r3, #16]
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3328      	adds	r3, #40	; 0x28
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	4610      	mov	r0, r2
 800fd8a:	4798      	blx	r3
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
    int count = 0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	60bb      	str	r3, [r7, #8]
 800fda6:	f7ff fad3 	bl	800f350 <_ZN14NullTestPlugin8instanceEv>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	bf14      	ite	ne
 800fdb2:	2301      	movne	r3, #1
 800fdb4:	2300      	moveq	r3, #0
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	332c      	adds	r3, #44	; 0x2c
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68b8      	ldr	r0, [r7, #8]
 800fdcc:	4798      	blx	r3
 800fdce:	60b8      	str	r0, [r7, #8]
 800fdd0:	e7e9      	b.n	800fda6 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
    return tests_;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	334c      	adds	r3, #76	; 0x4c
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	4798      	blx	r3
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	f107 0308 	add.w	r3, r7, #8
 800fe10:	4611      	mov	r1, r2
 800fe12:	4618      	mov	r0, r3
 800fe14:	f002 f8f8 	bl	8012008 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800fe18:	f107 0308 	add.w	r3, r7, #8
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f002 f980 	bl	8012124 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800fe24:	f107 0308 	add.w	r3, r7, #8
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f002 fa13 	bl	8012254 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800fe34:	f107 0308 	add.w	r3, r7, #8
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f002 f939 	bl	80120b0 <_ZN22UtestShellPointerArrayD1Ev>
}
 800fe3e:	bf00      	nop
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	334c      	adds	r3, #76	; 0x4c
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	4798      	blx	r3
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	f107 0308 	add.w	r3, r7, #8
 800fe60:	4611      	mov	r1, r2
 800fe62:	4618      	mov	r0, r3
 800fe64:	f002 f8d0 	bl	8012008 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800fe68:	f107 0308 	add.w	r3, r7, #8
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f002 f995 	bl	801219c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800fe72:	f107 0308 	add.w	r3, r7, #8
 800fe76:	4618      	mov	r0, r3
 800fe78:	f002 f9ec 	bl	8012254 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800fe82:	f107 0308 	add.w	r3, r7, #8
 800fe86:	4618      	mov	r0, r3
 800fe88:	f002 f912 	bl	80120b0 <_ZN22UtestShellPointerArrayD1Ev>
}
 800fe8c:	bf00      	nop
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00b      	beq.n	800fec2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	330c      	adds	r3, #12
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	4798      	blx	r3
 800feb6:	4602      	mov	r2, r0
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	4293      	cmp	r3, r2
 800febc:	d001      	beq.n	800fec2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800febe:	2301      	movs	r3, #1
 800fec0:	e000      	b.n	800fec4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800fec2:	2300      	movs	r3, #0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d007      	beq.n	800fed8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	330c      	adds	r3, #12
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	4798      	blx	r3
 800fed4:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800fed6:	e7e5      	b.n	800fea4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800fed8:	68fb      	ldr	r3, [r7, #12]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800fee2:	b590      	push	{r4, r7, lr}
 800fee4:	b087      	sub	sp, #28
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	617b      	str	r3, [r7, #20]
    while (current) {
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d01e      	beq.n	800ff36 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800fef8:	f107 030c 	add.w	r3, r7, #12
 800fefc:	6979      	ldr	r1, [r7, #20]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 fd4e 	bl	80109a0 <_ZNK10UtestShell7getNameEv>
 800ff04:	f107 030c 	add.w	r3, r7, #12
 800ff08:	6839      	ldr	r1, [r7, #0]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fa ff11 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461c      	mov	r4, r3
 800ff14:	f107 030c 	add.w	r3, r7, #12
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fa fefe 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800ff1e:	2c00      	cmp	r4, #0
 800ff20:	d001      	beq.n	800ff26 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	e008      	b.n	800ff38 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	330c      	adds	r3, #12
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6978      	ldr	r0, [r7, #20]
 800ff30:	4798      	blx	r3
 800ff32:	6178      	str	r0, [r7, #20]
    while (current) {
 800ff34:	e7dd      	b.n	800fef2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	371c      	adds	r7, #28
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd90      	pop	{r4, r7, pc}

0800ff40 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800ff40:	b590      	push	{r4, r7, lr}
 800ff42:	b087      	sub	sp, #28
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	617b      	str	r3, [r7, #20]
    while (current) {
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d01e      	beq.n	800ff94 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800ff56:	f107 030c 	add.w	r3, r7, #12
 800ff5a:	6979      	ldr	r1, [r7, #20]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 fd2e 	bl	80109be <_ZNK10UtestShell8getGroupEv>
 800ff62:	f107 030c 	add.w	r3, r7, #12
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fa fee2 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	461c      	mov	r4, r3
 800ff72:	f107 030c 	add.w	r3, r7, #12
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fa fecf 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 800ff7c:	2c00      	cmp	r4, #0
 800ff7e:	d001      	beq.n	800ff84 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	e008      	b.n	800ff96 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	330c      	adds	r3, #12
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6978      	ldr	r0, [r7, #20]
 800ff8e:	4798      	blx	r3
 800ff90:	6178      	str	r0, [r7, #20]
    while (current) {
 800ff92:	e7dd      	b.n	800ff50 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	371c      	adds	r7, #28
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd90      	pop	{r4, r7, pc}
	...

0800ffa0 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800ffaa:	4a18      	ldr	r2, [pc, #96]	; (801000c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	601a      	str	r2, [r3, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	605a      	str	r2, [r3, #4]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	609a      	str	r2, [r3, #8]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	60da      	str	r2, [r3, #12]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	611a      	str	r2, [r3, #16]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	615a      	str	r2, [r3, #20]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	619a      	str	r2, [r3, #24]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	61da      	str	r2, [r3, #28]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	621a      	str	r2, [r3, #32]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	625a      	str	r2, [r3, #36]	; 0x24
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	629a      	str	r2, [r3, #40]	; 0x28
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2200      	movs	r2, #0
 800fff0:	62da      	str	r2, [r3, #44]	; 0x2c
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	631a      	str	r2, [r3, #48]	; 0x30
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2200      	movs	r2, #0
 800fffc:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4618      	mov	r0, r3
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	080251a4 	.word	0x080251a4

08010010 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	4a04      	ldr	r2, [pc, #16]	; (801002c <_ZN10TestResultD1Ev+0x1c>)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	601a      	str	r2, [r3, #0]
{
}
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	080251a4 	.word	0x080251a4

08010030 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
}
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff ffe9 	bl	8010010 <_ZN10TestResultD1Ev>
 801003e:	2138      	movs	r1, #56	; 0x38
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7f7 ff03 	bl	8007e4c <_ZdlPvj>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	3318      	adds	r3, #24
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6839      	ldr	r1, [r7, #0]
 801006a:	4610      	mov	r0, r2
 801006c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801006e:	4b05      	ldr	r3, [pc, #20]	; (8010084 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4798      	blx	r3
 8010074:	4603      	mov	r3, r0
 8010076:	461a      	mov	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	631a      	str	r2, [r3, #48]	; 0x30
}
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	200000a4 	.word	0x200000a4

08010088 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8010092:	4b0c      	ldr	r3, [pc, #48]	; (80100c4 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4798      	blx	r3
 8010098:	4603      	mov	r3, r0
 801009a:	461a      	mov	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a0:	1ad2      	subs	r2, r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	331c      	adds	r3, #28
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6879      	ldr	r1, [r7, #4]
 80100b6:	4610      	mov	r0, r2
 80100b8:	4798      	blx	r3
}
 80100ba:	bf00      	nop
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	200000a4 	.word	0x200000a4

080100c8 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	685a      	ldr	r2, [r3, #4]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	3310      	adds	r3, #16
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	6839      	ldr	r1, [r7, #0]
 80100e2:	4610      	mov	r0, r2
 80100e4:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80100e6:	4b05      	ldr	r3, [pc, #20]	; (80100fc <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4798      	blx	r3
 80100ec:	4603      	mov	r3, r0
 80100ee:	461a      	mov	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	200000a4 	.word	0x200000a4

08010100 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
    output_.print(text);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	332c      	adds	r3, #44	; 0x2c
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	6839      	ldr	r1, [r7, #0]
 801011a:	4610      	mov	r0, r2
 801011c:	4798      	blx	r3
}
 801011e:	bf00      	nop
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b082      	sub	sp, #8
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	685a      	ldr	r2, [r3, #4]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	3348      	adds	r3, #72	; 0x48
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	6839      	ldr	r1, [r7, #0]
 8010140:	4610      	mov	r0, r2
 8010142:	4798      	blx	r3
}
 8010144:	bf00      	nop
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8010156:	4b0c      	ldr	r3, [pc, #48]	; (8010188 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4798      	blx	r3
 801015c:	4603      	mov	r3, r0
 801015e:	461a      	mov	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010164:	1ad2      	subs	r2, r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685a      	ldr	r2, [r3, #4]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3314      	adds	r3, #20
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6879      	ldr	r1, [r7, #4]
 801017a:	4610      	mov	r0, r2
 801017c:	4798      	blx	r3

}
 801017e:	bf00      	nop
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	200000a4 	.word	0x200000a4

0801018c <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	685a      	ldr	r2, [r3, #4]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	333c      	adds	r3, #60	; 0x3c
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	6839      	ldr	r1, [r7, #0]
 80101a6:	4610      	mov	r0, r2
 80101a8:	4798      	blx	r3
    failureCount_++;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	695b      	ldr	r3, [r3, #20]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	615a      	str	r2, [r3, #20]
}
 80101b4:	bf00      	nop
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
    testCount_++;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	609a      	str	r2, [r3, #8]
}
 80101ce:	bf00      	nop
 80101d0:	370c      	adds	r7, #12
 80101d2:	46bd      	mov	sp, r7
 80101d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d8:	4770      	bx	lr

080101da <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 80101da:	b480      	push	{r7}
 80101dc:	b083      	sub	sp, #12
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
    runCount_++;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	1c5a      	adds	r2, r3, #1
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	60da      	str	r2, [r3, #12]
}
 80101ec:	bf00      	nop
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	691b      	ldr	r3, [r3, #16]
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	611a      	str	r2, [r3, #16]
}
 801020a:	bf00      	nop
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8010216:	b480      	push	{r7}
 8010218:	b083      	sub	sp, #12
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	619a      	str	r2, [r3, #24]
}
 8010228:	bf00      	nop
 801022a:	370c      	adds	r7, #12
 801022c:	46bd      	mov	sp, r7
 801022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010232:	4770      	bx	lr

08010234 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	69db      	ldr	r3, [r3, #28]
 8010240:	1c5a      	adds	r2, r3, #1
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	61da      	str	r2, [r3, #28]
}
 8010246:	bf00      	nop
 8010248:	370c      	adds	r7, #12
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
	...

08010254 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <_ZN10TestResult12testsStartedEv+0x30>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4798      	blx	r3
 8010262:	4603      	mov	r3, r0
 8010264:	461a      	mov	r2, r3
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	3308      	adds	r3, #8
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4610      	mov	r0, r2
 801027a:	4798      	blx	r3
}
 801027c:	bf00      	nop
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	200000a4 	.word	0x200000a4

08010288 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8010290:	4b0c      	ldr	r3, [pc, #48]	; (80102c4 <_ZN10TestResult10testsEndedEv+0x3c>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4798      	blx	r3
 8010296:	4603      	mov	r3, r0
 8010298:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	1ad2      	subs	r2, r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	330c      	adds	r3, #12
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	6879      	ldr	r1, [r7, #4]
 80102b6:	4610      	mov	r0, r2
 80102b8:	4798      	blx	r3
}
 80102ba:	bf00      	nop
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	200000a4 	.word	0x200000a4

080102c8 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a1b      	ldr	r3, [r3, #32]
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8010304:	4618      	mov	r0, r3
 8010306:	370c      	adds	r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8010310:	b590      	push	{r4, r7, lr}
 8010312:	b087      	sub	sp, #28
 8010314:	af00      	add	r7, sp, #0
 8010316:	ed87 0b04 	vstr	d0, [r7, #16]
 801031a:	ed87 1b02 	vstr	d1, [r7, #8]
 801031e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8010322:	4b2c      	ldr	r3, [pc, #176]	; (80103d4 <_Z13doubles_equalddd+0xc4>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	ed97 0b04 	vldr	d0, [r7, #16]
 801032a:	4798      	blx	r3
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10f      	bne.n	8010352 <_Z13doubles_equalddd+0x42>
 8010332:	4b28      	ldr	r3, [pc, #160]	; (80103d4 <_Z13doubles_equalddd+0xc4>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	ed97 0b02 	vldr	d0, [r7, #8]
 801033a:	4798      	blx	r3
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d107      	bne.n	8010352 <_Z13doubles_equalddd+0x42>
 8010342:	4b24      	ldr	r3, [pc, #144]	; (80103d4 <_Z13doubles_equalddd+0xc4>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	ed97 0b00 	vldr	d0, [r7]
 801034a:	4798      	blx	r3
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d001      	beq.n	8010356 <_Z13doubles_equalddd+0x46>
 8010352:	2301      	movs	r3, #1
 8010354:	e000      	b.n	8010358 <_Z13doubles_equalddd+0x48>
 8010356:	2300      	movs	r3, #0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <_Z13doubles_equalddd+0x50>
        return false;
 801035c:	2300      	movs	r3, #0
 801035e:	e035      	b.n	80103cc <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8010360:	4b1d      	ldr	r3, [pc, #116]	; (80103d8 <_Z13doubles_equalddd+0xc8>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	ed97 0b04 	vldr	d0, [r7, #16]
 8010368:	4798      	blx	r3
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d009      	beq.n	8010384 <_Z13doubles_equalddd+0x74>
 8010370:	4b19      	ldr	r3, [pc, #100]	; (80103d8 <_Z13doubles_equalddd+0xc8>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	ed97 0b02 	vldr	d0, [r7, #8]
 8010378:	4798      	blx	r3
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d001      	beq.n	8010384 <_Z13doubles_equalddd+0x74>
 8010380:	2301      	movs	r3, #1
 8010382:	e000      	b.n	8010386 <_Z13doubles_equalddd+0x76>
 8010384:	2300      	movs	r3, #0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <_Z13doubles_equalddd+0x7e>
    {
        return true;
 801038a:	2301      	movs	r3, #1
 801038c:	e01e      	b.n	80103cc <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <_Z13doubles_equalddd+0xcc>)
 8010390:	681c      	ldr	r4, [r3, #0]
 8010392:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801039a:	f7ef ffb5 	bl	8000308 <__aeabi_dsub>
 801039e:	4602      	mov	r2, r0
 80103a0:	460b      	mov	r3, r1
 80103a2:	ec43 2b17 	vmov	d7, r2, r3
 80103a6:	eeb0 0a47 	vmov.f32	s0, s14
 80103aa:	eef0 0a67 	vmov.f32	s1, s15
 80103ae:	47a0      	blx	r4
 80103b0:	ec53 2b10 	vmov	r2, r3, d0
 80103b4:	2101      	movs	r1, #1
 80103b6:	460c      	mov	r4, r1
 80103b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80103bc:	f7f0 f9d0 	bl	8000760 <__aeabi_dcmpge>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d101      	bne.n	80103ca <_Z13doubles_equalddd+0xba>
 80103c6:	2300      	movs	r3, #0
 80103c8:	461c      	mov	r4, r3
 80103ca:	b2e3      	uxtb	r3, r4
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	371c      	adds	r7, #28
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd90      	pop	{r4, r7, pc}
 80103d4:	200000e4 	.word	0x200000e4
 80103d8:	200000e8 	.word	0x200000e8
 80103dc:	200000d8 	.word	0x200000d8

080103e0 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	332c      	adds	r3, #44	; 0x2c
    }
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
    {
 8010400:	4a0a      	ldr	r2, [pc, #40]	; (801042c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	601a      	str	r2, [r3, #0]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	332c      	adds	r3, #44	; 0x2c
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff fe00 	bl	8010010 <_ZN10TestResultD1Ev>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	331c      	adds	r3, #28
 8010414:	4618      	mov	r0, r3
 8010416:	f7f6 f815 	bl	8006444 <_ZN17ConsoleTestOutputD1Ev>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	f000 f943 	bl	80106a8 <_ZN10UtestShellD1Ev>
    }
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	080251ec 	.word	0x080251ec

08010430 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
    }
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f7ff ffdd 	bl	80103f8 <_ZN22OutsideTestRunnerUTestD1Ev>
 801043e:	2164      	movs	r1, #100	; 0x64
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7f7 fd03 	bl	8007e4c <_ZdlPvj>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4618      	mov	r0, r3
 801044a:	3708      	adds	r7, #8
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af02      	add	r7, sp, #8
 8010456:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	2300      	movs	r3, #0
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	4b0d      	ldr	r3, [pc, #52]	; (8010494 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8010460:	4a0d      	ldr	r2, [pc, #52]	; (8010498 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8010462:	490e      	ldr	r1, [pc, #56]	; (801049c <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8010464:	f000 f8f8 	bl	8010658 <_ZN10UtestShellC1EPKcS1_S1_j>
 8010468:	4a0d      	ldr	r2, [pc, #52]	; (80104a0 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	331c      	adds	r3, #28
 8010472:	4618      	mov	r0, r3
 8010474:	f7f5 ffd4 	bl	8006420 <_ZN17ConsoleTestOutputC1Ev>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	331c      	adds	r3, #28
 8010482:	4619      	mov	r1, r3
 8010484:	4610      	mov	r0, r2
 8010486:	f7ff fd8b 	bl	800ffa0 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	0802221c 	.word	0x0802221c
 8010498:	0802222c 	.word	0x0802222c
 801049c:	0802226c 	.word	0x0802226c
 80104a0:	080251ec 	.word	0x080251ec

080104a4 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 80104a4:	b580      	push	{r7, lr}
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	4801      	ldr	r0, [pc, #4]	; (80104b0 <__tcf_0+0xc>)
 80104aa:	f7ff ffa5 	bl	80103f8 <_ZN22OutsideTestRunnerUTestD1Ev>
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	200008ac 	.word	0x200008ac

080104b4 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80104b8:	4b12      	ldr	r3, [pc, #72]	; (8010504 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	f3bf 8f5b 	dmb	ish
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	f003 0301 	and.w	r3, r3, #1
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	bf0c      	ite	eq
 80104ca:	2301      	moveq	r3, #1
 80104cc:	2300      	movne	r3, #0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d013      	beq.n	80104fc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80104d4:	480b      	ldr	r0, [pc, #44]	; (8010504 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80104d6:	f00c ff27 	bl	801d328 <__cxa_guard_acquire>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	bf14      	ite	ne
 80104e0:	2301      	movne	r3, #1
 80104e2:	2300      	moveq	r3, #0
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d008      	beq.n	80104fc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80104ea:	4807      	ldr	r0, [pc, #28]	; (8010508 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80104ec:	f7ff ffb0 	bl	8010450 <_ZN22OutsideTestRunnerUTestC1Ev>
 80104f0:	4804      	ldr	r0, [pc, #16]	; (8010504 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80104f2:	f00c ff25 	bl	801d340 <__cxa_guard_release>
 80104f6:	4805      	ldr	r0, [pc, #20]	; (801050c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80104f8:	f00c ff49 	bl	801d38e <atexit>
    return instance_;
 80104fc:	4b02      	ldr	r3, [pc, #8]	; (8010508 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80104fe:	4618      	mov	r0, r3
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	20000910 	.word	0x20000910
 8010508:	200008ac 	.word	0x200008ac
 801050c:	080104a5 	.word	0x080104a5

08010510 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	330c      	adds	r3, #12
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	4798      	blx	r3
    }
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	3314      	adds	r3, #20
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	4798      	blx	r3
    }
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	3310      	adds	r3, #16
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	4798      	blx	r3
    }
 801055c:	bf00      	nop
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8010564:	b480      	push	{r7}
 8010566:	b085      	sub	sp, #20
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
 8010570:	603b      	str	r3, [r7, #0]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	68ba      	ldr	r2, [r7, #8]
 8010576:	601a      	str	r2, [r3, #0]
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	605a      	str	r2, [r3, #4]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	683a      	ldr	r2, [r7, #0]
 8010582:	609a      	str	r2, [r3, #8]
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr

08010592 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8010592:	b580      	push	{r7, lr}
 8010594:	b086      	sub	sp, #24
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3394      	adds	r3, #148	; 0x94
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	68ba      	ldr	r2, [r7, #8]
 80105ba:	68f9      	ldr	r1, [r7, #12]
 80105bc:	6938      	ldr	r0, [r7, #16]
 80105be:	4798      	blx	r3
    }
 80105c0:	bf00      	nop
 80105c2:	3718      	adds	r7, #24
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80105e6:	4b05      	ldr	r3, [pc, #20]	; (80105fc <helperDoRunOneTestSeperateProcess+0x34>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	68f9      	ldr	r1, [r7, #12]
 80105ee:	6938      	ldr	r0, [r7, #16]
 80105f0:	4798      	blx	r3
    }
 80105f2:	bf00      	nop
 80105f4:	3718      	adds	r7, #24
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}
 80105fa:	bf00      	nop
 80105fc:	20000098 	.word	0x20000098

08010600 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010608:	4a0f      	ldr	r2, [pc, #60]	; (8010648 <_ZN10UtestShellC1Ev+0x48>)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	601a      	str	r2, [r3, #0]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4a0e      	ldr	r2, [pc, #56]	; (801064c <_ZN10UtestShellC1Ev+0x4c>)
 8010612:	605a      	str	r2, [r3, #4]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	4a0e      	ldr	r2, [pc, #56]	; (8010650 <_ZN10UtestShellC1Ev+0x50>)
 8010618:	609a      	str	r2, [r3, #8]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	4a0d      	ldr	r2, [pc, #52]	; (8010654 <_ZN10UtestShellC1Ev+0x54>)
 801061e:	60da      	str	r2, [r3, #12]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	611a      	str	r2, [r3, #16]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	615a      	str	r2, [r3, #20]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	761a      	strb	r2, [r3, #24]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	765a      	strb	r2, [r3, #25]
{
}
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4618      	mov	r0, r3
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	080252ac 	.word	0x080252ac
 801064c:	080222b8 	.word	0x080222b8
 8010650:	080222cc 	.word	0x080222cc
 8010654:	080222dc 	.word	0x080222dc

08010658 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010666:	4a0f      	ldr	r2, [pc, #60]	; (80106a4 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	601a      	str	r2, [r3, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	605a      	str	r2, [r3, #4]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	609a      	str	r2, [r3, #8]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	60da      	str	r2, [r3, #12]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	69ba      	ldr	r2, [r7, #24]
 8010682:	611a      	str	r2, [r3, #16]
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2200      	movs	r2, #0
 8010688:	615a      	str	r2, [r3, #20]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	761a      	strb	r2, [r3, #24]
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2200      	movs	r2, #0
 8010694:	765a      	strb	r2, [r3, #25]
{
}
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	4618      	mov	r0, r3
 801069a:	3714      	adds	r7, #20
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr
 80106a4:	080252ac 	.word	0x080252ac

080106a8 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	4a04      	ldr	r2, [pc, #16]	; (80106c4 <_ZN10UtestShellD1Ev+0x1c>)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	601a      	str	r2, [r3, #0]
{
}
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4618      	mov	r0, r3
 80106ba:	370c      	adds	r7, #12
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr
 80106c4:	080252ac 	.word	0x080252ac

080106c8 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
}
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7ff ffe9 	bl	80106a8 <_ZN10UtestShellD1Ev>
 80106d6:	211c      	movs	r1, #28
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7f7 fbb7 	bl	8007e4c <_ZdlPvj>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80106ee:	2300      	movs	r3, #0
 80106f0:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3310      	adds	r3, #16
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	4798      	blx	r3
}
 80106fe:	bf00      	nop
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
	...

08010708 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8010708:	b580      	push	{r7, lr}
 801070a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 801070c:	4b02      	ldr	r3, [pc, #8]	; (8010718 <_ZN10UtestShell5crashEv+0x10>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4798      	blx	r3
}
 8010712:	bf00      	nop
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	20000094 	.word	0x20000094

0801071c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b088      	sub	sp, #32
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3324      	adds	r3, #36	; 0x24
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801073a:	f107 0014 	add.w	r0, r7, #20
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	68f9      	ldr	r1, [r7, #12]
 8010744:	f7ff ff0e 	bl	8010564 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	337c      	adds	r3, #124	; 0x7c
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	68f8      	ldr	r0, [r7, #12]
 8010752:	4798      	blx	r3
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d007      	beq.n	801076a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801075a:	4b09      	ldr	r3, [pc, #36]	; (8010780 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f107 0214 	add.w	r2, r7, #20
 8010762:	4611      	mov	r1, r2
 8010764:	4807      	ldr	r0, [pc, #28]	; (8010784 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8010766:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8010768:	e006      	b.n	8010778 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801076a:	4b05      	ldr	r3, [pc, #20]	; (8010780 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f107 0214 	add.w	r2, r7, #20
 8010772:	4611      	mov	r1, r2
 8010774:	4804      	ldr	r0, [pc, #16]	; (8010788 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8010776:	4798      	blx	r3
}
 8010778:	bf00      	nop
 801077a:	3720      	adds	r7, #32
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	200000a0 	.word	0x200000a0
 8010784:	080105c9 	.word	0x080105c9
 8010788:	08010593 	.word	0x08010593

0801078c <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
    return new Utest();
 8010794:	22d3      	movs	r2, #211	; 0xd3
 8010796:	4906      	ldr	r1, [pc, #24]	; (80107b0 <_ZN10UtestShell10createTestEv+0x24>)
 8010798:	2004      	movs	r0, #4
 801079a:	f7f7 fb43 	bl	8007e24 <_ZnwjPKci>
 801079e:	4604      	mov	r4, r0
 80107a0:	4620      	mov	r0, r4
 80107a2:	f001 fb0f 	bl	8011dc4 <_ZN5UtestC1Ev>
 80107a6:	4623      	mov	r3, r4
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	370c      	adds	r7, #12
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd90      	pop	{r4, r7, pc}
 80107b0:	080222ec 	.word	0x080222ec

080107b4 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	6039      	str	r1, [r7, #0]
    delete test;
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d004      	beq.n	80107ce <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	3204      	adds	r2, #4
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	4618      	mov	r0, r3
 80107cc:	4790      	blx	r2
}
 80107ce:	bf00      	nop
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
	...

080107d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b088      	sub	sp, #32
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	333c      	adds	r3, #60	; 0x3c
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4940      	ldr	r1, [pc, #256]	; (80108f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3314      	adds	r3, #20
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	68f9      	ldr	r1, [r7, #12]
 80107fe:	68b8      	ldr	r0, [r7, #8]
 8010800:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	333c      	adds	r3, #60	; 0x3c
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	493a      	ldr	r1, [pc, #232]	; (80108f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8010810:	f001 faae 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8010814:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f001 fa90 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 801081c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801081e:	6879      	ldr	r1, [r7, #4]
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f001 fa6b 	bl	8011cfc <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8010826:	68f9      	ldr	r1, [r7, #12]
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f001 fa77 	bl	8011d1c <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	333c      	adds	r3, #60	; 0x3c
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4930      	ldr	r1, [pc, #192]	; (80108f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	4798      	blx	r3
    Utest* testToRun = createTest();
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	3388      	adds	r3, #136	; 0x88
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	4798      	blx	r3
 8010848:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	333c      	adds	r3, #60	; 0x3c
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	492a      	ldr	r1, [pc, #168]	; (80108fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	333c      	adds	r3, #60	; 0x3c
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4927      	ldr	r1, [pc, #156]	; (8010900 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	4798      	blx	r3
    testToRun->run();
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	3308      	adds	r3, #8
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	6978      	ldr	r0, [r7, #20]
 8010870:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	333c      	adds	r3, #60	; 0x3c
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4922      	ldr	r1, [pc, #136]	; (8010904 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8010880:	69f9      	ldr	r1, [r7, #28]
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f001 fa4a 	bl	8011d1c <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8010888:	69b9      	ldr	r1, [r7, #24]
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f001 fa36 	bl	8011cfc <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	333c      	adds	r3, #60	; 0x3c
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	491b      	ldr	r1, [pc, #108]	; (8010908 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	4798      	blx	r3
    destroyTest(testToRun);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	338c      	adds	r3, #140	; 0x8c
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6979      	ldr	r1, [r7, #20]
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	333c      	adds	r3, #60	; 0x3c
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4915      	ldr	r1, [pc, #84]	; (801090c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	333c      	adds	r3, #60	; 0x3c
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4913      	ldr	r1, [pc, #76]	; (8010910 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	3318      	adds	r3, #24
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	68f9      	ldr	r1, [r7, #12]
 80108d4:	68b8      	ldr	r0, [r7, #8]
 80108d6:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	333c      	adds	r3, #60	; 0x3c
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	490c      	ldr	r1, [pc, #48]	; (8010914 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	4798      	blx	r3
}
 80108e6:	bf00      	nop
 80108e8:	3720      	adds	r7, #32
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	08022300 	.word	0x08022300
 80108f4:	08022324 	.word	0x08022324
 80108f8:	08022344 	.word	0x08022344
 80108fc:	08022360 	.word	0x08022360
 8010900:	0802237c 	.word	0x0802237c
 8010904:	08022398 	.word	0x08022398
 8010908:	080223b0 	.word	0x080223b0
 801090c:	080223cc 	.word	0x080223cc
 8010910:	080223e8 	.word	0x080223e8
 8010914:	0802240c 	.word	0x0802240c

08010918 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
    return next_;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	695b      	ldr	r3, [r3, #20]
}
 8010924:	4618      	mov	r0, r3
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
    next_ = test;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	683a      	ldr	r2, [r7, #0]
 801093e:	615a      	str	r2, [r3, #20]
    return this;
 8010940:	687b      	ldr	r3, [r7, #4]
}
 8010942:	4618      	mov	r0, r3
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801094e:	b580      	push	{r7, lr}
 8010950:	b082      	sub	sp, #8
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	695b      	ldr	r3, [r3, #20]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00b      	beq.n	8010976 <_ZN10UtestShell10countTestsEv+0x28>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	695a      	ldr	r2, [r3, #20]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	3310      	adds	r3, #16
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4610      	mov	r0, r2
 801096e:	4798      	blx	r3
 8010970:	4603      	mov	r3, r0
 8010972:	3301      	adds	r3, #1
 8010974:	e000      	b.n	8010978 <_ZN10UtestShell10countTestsEv+0x2a>
 8010976:	2301      	movs	r3, #1
}
 8010978:	4618      	mov	r0, r3
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
    return "TEST";
 801098a:	4904      	ldr	r1, [pc, #16]	; (801099c <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7f9 fe0c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
}
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	08022430 	.word	0x08022430

080109a0 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	689b      	ldr	r3, [r3, #8]
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7f9 fdfa 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
}
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80109be:	b580      	push	{r7, lr}
 80109c0:	b082      	sub	sp, #8
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
 80109c6:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	4619      	mov	r1, r3
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7f9 fdeb 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
}
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	33a0      	adds	r3, #160	; 0xa0
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	6839      	ldr	r1, [r7, #0]
 80109f2:	4610      	mov	r0, r2
 80109f4:	4798      	blx	r3
    formattedName += "(";
 80109f6:	490e      	ldr	r1, [pc, #56]	; (8010a30 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7fa fa1d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7fa fa17 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8010a0a:	490a      	ldr	r1, [pc, #40]	; (8010a34 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7fa fa13 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	4619      	mov	r1, r3
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f7fa fa0d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8010a1e:	4906      	ldr	r1, [pc, #24]	; (8010a38 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7fa fa09 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8010a26:	bf00      	nop
}
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08022438 	.word	0x08022438
 8010a34:	0802243c 	.word	0x0802243c
 8010a38:	08022440 	.word	0x08022440

08010a3c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7e5b      	ldrb	r3, [r3, #25]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f001 f96d 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010a62:	4603      	mov	r3, r0
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	3228      	adds	r2, #40	; 0x28
 8010a68:	6812      	ldr	r2, [r2, #0]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	4790      	blx	r2
}
 8010a6e:	bf00      	nop
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8010a76:	b480      	push	{r7}
 8010a78:	b083      	sub	sp, #12
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
    return true;
 8010a7e:	2301      	movs	r3, #1
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	7e1b      	ldrb	r3, [r3, #24]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2201      	movs	r2, #1
 8010ab0:	761a      	strb	r2, [r3, #24]
}
 8010ab2:	bf00      	nop
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr

08010abe <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8010abe:	b480      	push	{r7}
 8010ac0:	b083      	sub	sp, #12
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]

}
 8010ac6:	bf00      	nop
 8010ac8:	370c      	adds	r7, #12
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8010ad2:	b480      	push	{r7}
 8010ad4:	b083      	sub	sp, #12
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
 8010ada:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	60da      	str	r2, [r3, #12]
}
 8010ae2:	bf00      	nop
 8010ae4:	370c      	adds	r7, #12
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8010aee:	b480      	push	{r7}
 8010af0:	b083      	sub	sp, #12
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	683a      	ldr	r2, [r7, #0]
 8010afc:	611a      	str	r2, [r3, #16]
}
 8010afe:	bf00      	nop
 8010b00:	370c      	adds	r7, #12
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr

08010b0a <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8010b0a:	b480      	push	{r7}
 8010b0c:	b083      	sub	sp, #12
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	605a      	str	r2, [r3, #4]
}
 8010b1a:	bf00      	nop
 8010b1c:	370c      	adds	r7, #12
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr

08010b26 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8010b26:	b480      	push	{r7}
 8010b28:	b083      	sub	sp, #12
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
 8010b2e:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	683a      	ldr	r2, [r7, #0]
 8010b34:	609a      	str	r2, [r3, #8]
}
 8010b36:	bf00      	nop
 8010b38:	370c      	adds	r7, #12
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr

08010b42 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b082      	sub	sp, #8
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
 8010b4a:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	4619      	mov	r1, r3
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7f9 fd29 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
}
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	3708      	adds	r7, #8
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8010b60:	b480      	push	{r7}
 8010b62:	b083      	sub	sp, #12
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	691b      	ldr	r3, [r3, #16]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e01f      	b.n	8010bce <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d01b      	beq.n	8010bcc <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8010b94:	f107 0310 	add.w	r3, r7, #16
 8010b98:	68b9      	ldr	r1, [r7, #8]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7f9 fd05 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010ba0:	f107 0310 	add.w	r3, r7, #16
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f00c fb91 	bl	801d2ce <_ZNK10TestFilter5matchERK12SimpleString>
 8010bac:	4603      	mov	r3, r0
 8010bae:	461c      	mov	r4, r3
 8010bb0:	f107 0310 	add.w	r3, r7, #16
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fa f8b0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8010bba:	2c00      	cmp	r4, #0
 8010bbc:	d001      	beq.n	8010bc2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e005      	b.n	8010bce <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f00c fb5d 	bl	801d282 <_ZNK10TestFilter7getNextEv>
 8010bc8:	6078      	str	r0, [r7, #4]
 8010bca:	e7e0      	b.n	8010b8e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	371c      	adds	r7, #28
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd90      	pop	{r4, r7, pc}

08010bd6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b084      	sub	sp, #16
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	60f8      	str	r0, [r7, #12]
 8010bde:	60b9      	str	r1, [r7, #8]
 8010be0:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	68ba      	ldr	r2, [r7, #8]
 8010be8:	4619      	mov	r1, r3
 8010bea:	68f8      	ldr	r0, [r7, #12]
 8010bec:	f7ff ffc4 	bl	8010b78 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00b      	beq.n	8010c0e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f7ff ffba 	bl	8010b78 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e000      	b.n	8010c10 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8010c0e:	2300      	movs	r3, #0
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	339c      	adds	r3, #156	; 0x9c
 8010c28:	681c      	ldr	r4, [r3, #0]
 8010c2a:	f001 f8b1 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	461a      	mov	r2, r3
 8010c32:	6839      	ldr	r1, [r7, #0]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8010c38:	bf00      	nop
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd90      	pop	{r4, r7, pc}

08010c40 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f001 f872 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	3234      	adds	r2, #52	; 0x34
 8010c5e:	6812      	ldr	r2, [r2, #0]
 8010c60:	68b9      	ldr	r1, [r7, #8]
 8010c62:	4618      	mov	r0, r3
 8010c64:	4790      	blx	r2
    terminator.exitCurrentTest();
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8010c70:	bf00      	nop
 8010c72:	3710      	adds	r7, #16
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	6838      	ldr	r0, [r7, #0]
 8010c8a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8010c8c:	bf00      	nop
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010c94:	b590      	push	{r4, r7, lr}
 8010c96:	b09d      	sub	sp, #116	; 0x74
 8010c98:	af04      	add	r7, sp, #16
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	607a      	str	r2, [r7, #4]
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8010ca4:	68f8      	ldr	r0, [r7, #12]
 8010ca6:	f001 f849 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010caa:	4603      	mov	r3, r0
 8010cac:	681a      	ldr	r2, [r3, #0]
 8010cae:	3228      	adds	r2, #40	; 0x28
 8010cb0:	6812      	ldr	r2, [r2, #0]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	4790      	blx	r2
    if (!condition)
 8010cb6:	7afb      	ldrb	r3, [r7, #11]
 8010cb8:	f083 0301 	eor.w	r3, r3, #1
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d03f      	beq.n	8010d42 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	339c      	adds	r3, #156	; 0x9c
 8010cc8:	681c      	ldr	r4, [r3, #0]
 8010cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010cce:	6879      	ldr	r1, [r7, #4]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7f9 fc6a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010cd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f9 fc64 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010ce2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ce6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7f9 fc5e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010cee:	f107 0014 	add.w	r0, r7, #20
 8010cf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010cf6:	9302      	str	r3, [sp, #8]
 8010cf8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010cfc:	9301      	str	r3, [sp, #4]
 8010cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010d08:	68f9      	ldr	r1, [r7, #12]
 8010d0a:	f7fb ff6b 	bl	800cbe4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010d0e:	f107 0314 	add.w	r3, r7, #20
 8010d12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010d14:	4619      	mov	r1, r3
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	47a0      	blx	r4
 8010d1a:	f107 0314 	add.w	r3, r7, #20
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fc fdce 	bl	800d8c0 <_ZN12CheckFailureD1Ev>
 8010d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7f9 fff6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8010d2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7f9 fff1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8010d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7f9 ffec 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8010d42:	bf00      	nop
 8010d44:	3764      	adds	r7, #100	; 0x64
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd90      	pop	{r4, r7, pc}

08010d4a <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010d4a:	b590      	push	{r4, r7, lr}
 8010d4c:	b097      	sub	sp, #92	; 0x5c
 8010d4e:	af02      	add	r7, sp, #8
 8010d50:	60f8      	str	r0, [r7, #12]
 8010d52:	60b9      	str	r1, [r7, #8]
 8010d54:	607a      	str	r2, [r7, #4]
 8010d56:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f000 ffef 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	3228      	adds	r2, #40	; 0x28
 8010d64:	6812      	ldr	r2, [r2, #0]
 8010d66:	4618      	mov	r0, r3
 8010d68:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	339c      	adds	r3, #156	; 0x9c
 8010d70:	681c      	ldr	r4, [r3, #0]
 8010d72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d76:	68b9      	ldr	r1, [r7, #8]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7f9 fc16 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010d7e:	f107 0014 	add.w	r0, r7, #20
 8010d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d86:	9300      	str	r3, [sp, #0]
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	68f9      	ldr	r1, [r7, #12]
 8010d8e:	f7fb ff71 	bl	800cc74 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8010d92:	f107 0314 	add.w	r3, r7, #20
 8010d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d98:	4619      	mov	r1, r3
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	47a0      	blx	r4
 8010d9e:	f107 0314 	add.w	r3, r7, #20
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7f7 fc16 	bl	80085d4 <_ZN11FailFailureD1Ev>
 8010da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f9 ffb4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8010db2:	bf00      	nop
 8010db4:	3754      	adds	r7, #84	; 0x54
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd90      	pop	{r4, r7, pc}

08010dba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010dba:	b590      	push	{r4, r7, lr}
 8010dbc:	b0a7      	sub	sp, #156	; 0x9c
 8010dbe:	af04      	add	r7, sp, #16
 8010dc0:	60f8      	str	r0, [r7, #12]
 8010dc2:	60b9      	str	r1, [r7, #8]
 8010dc4:	607a      	str	r2, [r7, #4]
 8010dc6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f000 ffb7 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	681a      	ldr	r2, [r3, #0]
 8010dd2:	3228      	adds	r2, #40	; 0x28
 8010dd4:	6812      	ldr	r2, [r2, #0]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d102      	bne.n	8010de6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d068      	beq.n	8010eb8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d12a      	bne.n	8010e48 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	339c      	adds	r3, #156	; 0x9c
 8010df8:	681c      	ldr	r4, [r3, #0]
 8010dfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f9 fbd2 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010e06:	f107 0010 	add.w	r0, r7, #16
 8010e0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010e0e:	9302      	str	r3, [sp, #8]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010e20:	68f9      	ldr	r1, [r7, #12]
 8010e22:	f7fc f9ad 	bl	800d180 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010e26:	f107 0310 	add.w	r3, r7, #16
 8010e2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010e2e:	4619      	mov	r1, r3
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	47a0      	blx	r4
 8010e34:	f107 0310 	add.w	r3, r7, #16
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fc fcb9 	bl	800d7b0 <_ZN18StringEqualFailureD1Ev>
 8010e3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f9 ff69 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8010e48:	6879      	ldr	r1, [r7, #4]
 8010e4a:	68b8      	ldr	r0, [r7, #8]
 8010e4c:	f7f9 f9ea 	bl	800a224 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	bf14      	ite	ne
 8010e56:	2301      	movne	r3, #1
 8010e58:	2300      	moveq	r3, #0
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d02c      	beq.n	8010eba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	339c      	adds	r3, #156	; 0x9c
 8010e66:	681c      	ldr	r4, [r3, #0]
 8010e68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010e6c:	6839      	ldr	r1, [r7, #0]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7f9 fb9b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010e74:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010e78:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010e7c:	9302      	str	r3, [sp, #8]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	9301      	str	r3, [sp, #4]
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010e8e:	68f9      	ldr	r1, [r7, #12]
 8010e90:	f7fc f976 	bl	800d180 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010e94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010e98:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	47a0      	blx	r4
 8010ea2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fc fc82 	bl	800d7b0 <_ZN18StringEqualFailureD1Ev>
 8010eac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7f9 ff32 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8010eb6:	e000      	b.n	8010eba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010eb8:	bf00      	nop
}
 8010eba:	378c      	adds	r7, #140	; 0x8c
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd90      	pop	{r4, r7, pc}

08010ec0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010ec0:	b590      	push	{r4, r7, lr}
 8010ec2:	b0a7      	sub	sp, #156	; 0x9c
 8010ec4:	af04      	add	r7, sp, #16
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	607a      	str	r2, [r7, #4]
 8010ecc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f000 ff34 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	3228      	adds	r2, #40	; 0x28
 8010eda:	6812      	ldr	r2, [r2, #0]
 8010edc:	4618      	mov	r0, r3
 8010ede:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d102      	bne.n	8010eec <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d06b      	beq.n	8010fc4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d002      	beq.n	8010ef8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d12b      	bne.n	8010f50 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	339c      	adds	r3, #156	; 0x9c
 8010efe:	681c      	ldr	r4, [r3, #0]
 8010f00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010f04:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7f9 fb4e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010f0e:	f107 0010 	add.w	r0, r7, #16
 8010f12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010f16:	9302      	str	r3, [sp, #8]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	9301      	str	r3, [sp, #4]
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010f28:	68f9      	ldr	r1, [r7, #12]
 8010f2a:	f7fc f929 	bl	800d180 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010f2e:	f107 0310 	add.w	r3, r7, #16
 8010f32:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010f36:	4619      	mov	r1, r3
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	47a0      	blx	r4
 8010f3c:	f107 0310 	add.w	r3, r7, #16
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fc fc35 	bl	800d7b0 <_ZN18StringEqualFailureD1Ev>
 8010f46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7f9 fee5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	6879      	ldr	r1, [r7, #4]
 8010f54:	68b8      	ldr	r0, [r7, #8]
 8010f56:	f7f9 f9a4 	bl	800a2a2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	bf14      	ite	ne
 8010f60:	2301      	movne	r3, #1
 8010f62:	2300      	moveq	r3, #0
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d02d      	beq.n	8010fc6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	339c      	adds	r3, #156	; 0x9c
 8010f70:	681c      	ldr	r4, [r3, #0]
 8010f72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010f76:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7f9 fb15 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8010f80:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010f84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010f88:	9302      	str	r3, [sp, #8]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	9301      	str	r3, [sp, #4]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f96:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010f9a:	68f9      	ldr	r1, [r7, #12]
 8010f9c:	f7fc f8f0 	bl	800d180 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010fa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010fa4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010fa8:	4619      	mov	r1, r3
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	47a0      	blx	r4
 8010fae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fc fbfc 	bl	800d7b0 <_ZN18StringEqualFailureD1Ev>
 8010fb8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7f9 feac 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8010fc2:	e000      	b.n	8010fc6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010fc4:	bf00      	nop
}
 8010fc6:	378c      	adds	r7, #140	; 0x8c
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd90      	pop	{r4, r7, pc}

08010fcc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010fcc:	b590      	push	{r4, r7, lr}
 8010fce:	b0ab      	sub	sp, #172	; 0xac
 8010fd0:	af04      	add	r7, sp, #16
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
 8010fd8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f000 feae 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	3228      	adds	r2, #40	; 0x28
 8010fe6:	6812      	ldr	r2, [r2, #0]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d102      	bne.n	8010ff8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d07c      	beq.n	80110f2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d128      	bne.n	8011056 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3398      	adds	r3, #152	; 0x98
 801100a:	681c      	ldr	r4, [r3, #0]
 801100c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011010:	6839      	ldr	r1, [r7, #0]
 8011012:	4618      	mov	r0, r3
 8011014:	f7f9 fac9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011018:	f107 0010 	add.w	r0, r7, #16
 801101c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011020:	9302      	str	r3, [sp, #8]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	9301      	str	r3, [sp, #4]
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801102e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011032:	68f9      	ldr	r1, [r7, #12]
 8011034:	f7fc f948 	bl	800d2c8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011038:	f107 0310 	add.w	r3, r7, #16
 801103c:	4619      	mov	r1, r3
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	47a0      	blx	r4
 8011042:	f107 0310 	add.w	r3, r7, #16
 8011046:	4618      	mov	r0, r3
 8011048:	f7fc fb90 	bl	800d76c <_ZN24StringEqualNoCaseFailureD1Ev>
 801104c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011050:	4618      	mov	r0, r3
 8011052:	f7f9 fe62 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8011056:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801105a:	68b9      	ldr	r1, [r7, #8]
 801105c:	4618      	mov	r0, r3
 801105e:	f7f9 faa4 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011062:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011066:	6879      	ldr	r1, [r7, #4]
 8011068:	4618      	mov	r0, r3
 801106a:	f7f9 fa9e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801106e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011076:	4611      	mov	r1, r2
 8011078:	4618      	mov	r0, r3
 801107a:	f7f9 fe75 	bl	800ad68 <_ZNK12SimpleString12equalsNoCaseERKS_>
 801107e:	4603      	mov	r3, r0
 8011080:	f083 0301 	eor.w	r3, r3, #1
 8011084:	b2dc      	uxtb	r4, r3
 8011086:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801108a:	4618      	mov	r0, r3
 801108c:	f7f9 fe45 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011090:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011094:	4618      	mov	r0, r3
 8011096:	f7f9 fe40 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801109a:	2c00      	cmp	r4, #0
 801109c:	d02a      	beq.n	80110f4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	3398      	adds	r3, #152	; 0x98
 80110a4:	681c      	ldr	r4, [r3, #0]
 80110a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7f9 fa7c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80110b2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80110b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80110ba:	9302      	str	r3, [sp, #8]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	9301      	str	r3, [sp, #4]
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	9300      	str	r3, [sp, #0]
 80110c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80110c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80110cc:	68f9      	ldr	r1, [r7, #12]
 80110ce:	f7fc f8fb 	bl	800d2c8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80110d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80110d6:	4619      	mov	r1, r3
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	47a0      	blx	r4
 80110dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80110e0:	4618      	mov	r0, r3
 80110e2:	f7fc fb43 	bl	800d76c <_ZN24StringEqualNoCaseFailureD1Ev>
 80110e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7f9 fe15 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80110f0:	e000      	b.n	80110f4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80110f2:	bf00      	nop
}
 80110f4:	379c      	adds	r7, #156	; 0x9c
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd90      	pop	{r4, r7, pc}

080110fa <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80110fa:	b590      	push	{r4, r7, lr}
 80110fc:	b0b3      	sub	sp, #204	; 0xcc
 80110fe:	af04      	add	r7, sp, #16
 8011100:	60f8      	str	r0, [r7, #12]
 8011102:	60b9      	str	r1, [r7, #8]
 8011104:	607a      	str	r2, [r7, #4]
 8011106:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f000 fe17 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 801110e:	4603      	mov	r3, r0
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	3228      	adds	r2, #40	; 0x28
 8011114:	6812      	ldr	r2, [r2, #0]
 8011116:	4618      	mov	r0, r3
 8011118:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d103      	bne.n	8011128 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 80ad 	beq.w	8011282 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d002      	beq.n	8011134 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d140      	bne.n	80111b6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3398      	adds	r3, #152	; 0x98
 801113a:	681c      	ldr	r4, [r3, #0]
 801113c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011140:	68b9      	ldr	r1, [r7, #8]
 8011142:	4618      	mov	r0, r3
 8011144:	f7f9 fa31 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801114c:	6879      	ldr	r1, [r7, #4]
 801114e:	4618      	mov	r0, r3
 8011150:	f7f9 fa2b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011154:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011158:	6839      	ldr	r1, [r7, #0]
 801115a:	4618      	mov	r0, r3
 801115c:	f7f9 fa25 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011160:	f107 0010 	add.w	r0, r7, #16
 8011164:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011168:	9302      	str	r3, [sp, #8]
 801116a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011174:	9300      	str	r3, [sp, #0]
 8011176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801117a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801117e:	68f9      	ldr	r1, [r7, #12]
 8011180:	f7fb fce6 	bl	800cb50 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011184:	f107 0310 	add.w	r3, r7, #16
 8011188:	4619      	mov	r1, r3
 801118a:	68f8      	ldr	r0, [r7, #12]
 801118c:	47a0      	blx	r4
 801118e:	f107 0310 	add.w	r3, r7, #16
 8011192:	4618      	mov	r0, r3
 8011194:	f7fc fbb6 	bl	800d904 <_ZN15ContainsFailureD1Ev>
 8011198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801119c:	4618      	mov	r0, r3
 801119e:	f7f9 fdbc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80111a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7f9 fdb7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80111ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7f9 fdb2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80111b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80111ba:	6879      	ldr	r1, [r7, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	f7f9 f9f4 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80111c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80111c6:	68b9      	ldr	r1, [r7, #8]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7f9 f9ee 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80111ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80111d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80111d6:	4611      	mov	r1, r2
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f9 fa64 	bl	800a6a6 <_ZNK12SimpleString8containsERKS_>
 80111de:	4603      	mov	r3, r0
 80111e0:	f083 0301 	eor.w	r3, r3, #1
 80111e4:	b2dc      	uxtb	r4, r3
 80111e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f9 fd95 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80111f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7f9 fd90 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80111fa:	2c00      	cmp	r4, #0
 80111fc:	d042      	beq.n	8011284 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	3398      	adds	r3, #152	; 0x98
 8011204:	681c      	ldr	r4, [r3, #0]
 8011206:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801120a:	68b9      	ldr	r1, [r7, #8]
 801120c:	4618      	mov	r0, r3
 801120e:	f7f9 f9cc 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011212:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011216:	6879      	ldr	r1, [r7, #4]
 8011218:	4618      	mov	r0, r3
 801121a:	f7f9 f9c6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801121e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	4618      	mov	r0, r3
 8011226:	f7f9 f9c0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801122a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801122e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011232:	9302      	str	r3, [sp, #8]
 8011234:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011238:	9301      	str	r3, [sp, #4]
 801123a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011244:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011248:	68f9      	ldr	r1, [r7, #12]
 801124a:	f7fb fc81 	bl	800cb50 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801124e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011252:	4619      	mov	r1, r3
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	47a0      	blx	r4
 8011258:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801125c:	4618      	mov	r0, r3
 801125e:	f7fc fb51 	bl	800d904 <_ZN15ContainsFailureD1Ev>
 8011262:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011266:	4618      	mov	r0, r3
 8011268:	f7f9 fd57 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801126c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011270:	4618      	mov	r0, r3
 8011272:	f7f9 fd52 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801127a:	4618      	mov	r0, r3
 801127c:	f7f9 fd4d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011280:	e000      	b.n	8011284 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011282:	bf00      	nop
}
 8011284:	37bc      	adds	r7, #188	; 0xbc
 8011286:	46bd      	mov	sp, r7
 8011288:	bd90      	pop	{r4, r7, pc}

0801128a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801128a:	b590      	push	{r4, r7, lr}
 801128c:	b0b3      	sub	sp, #204	; 0xcc
 801128e:	af04      	add	r7, sp, #16
 8011290:	60f8      	str	r0, [r7, #12]
 8011292:	60b9      	str	r1, [r7, #8]
 8011294:	607a      	str	r2, [r7, #4]
 8011296:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f000 fd4f 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 801129e:	4603      	mov	r3, r0
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	3228      	adds	r2, #40	; 0x28
 80112a4:	6812      	ldr	r2, [r2, #0]
 80112a6:	4618      	mov	r0, r3
 80112a8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d103      	bne.n	80112b8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f000 80ad 	beq.w	8011412 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d002      	beq.n	80112c4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d140      	bne.n	8011346 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	3398      	adds	r3, #152	; 0x98
 80112ca:	681c      	ldr	r4, [r3, #0]
 80112cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80112d0:	68b9      	ldr	r1, [r7, #8]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f9 f969 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80112d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80112dc:	6879      	ldr	r1, [r7, #4]
 80112de:	4618      	mov	r0, r3
 80112e0:	f7f9 f963 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80112e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80112e8:	6839      	ldr	r1, [r7, #0]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7f9 f95d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80112f0:	f107 0010 	add.w	r0, r7, #16
 80112f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80112f8:	9302      	str	r3, [sp, #8]
 80112fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80112fe:	9301      	str	r3, [sp, #4]
 8011300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801130a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801130e:	68f9      	ldr	r1, [r7, #12]
 8011310:	f7fb fc1e 	bl	800cb50 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011314:	f107 0310 	add.w	r3, r7, #16
 8011318:	4619      	mov	r1, r3
 801131a:	68f8      	ldr	r0, [r7, #12]
 801131c:	47a0      	blx	r4
 801131e:	f107 0310 	add.w	r3, r7, #16
 8011322:	4618      	mov	r0, r3
 8011324:	f7fc faee 	bl	800d904 <_ZN15ContainsFailureD1Ev>
 8011328:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801132c:	4618      	mov	r0, r3
 801132e:	f7f9 fcf4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011332:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011336:	4618      	mov	r0, r3
 8011338:	f7f9 fcef 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801133c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011340:	4618      	mov	r0, r3
 8011342:	f7f9 fcea 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8011346:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801134a:	6879      	ldr	r1, [r7, #4]
 801134c:	4618      	mov	r0, r3
 801134e:	f7f9 f92c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011352:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011356:	68b9      	ldr	r1, [r7, #8]
 8011358:	4618      	mov	r0, r3
 801135a:	f7f9 f926 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801135e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011362:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011366:	4611      	mov	r1, r2
 8011368:	4618      	mov	r0, r3
 801136a:	f7f9 f9b7 	bl	800a6dc <_ZNK12SimpleString14containsNoCaseERKS_>
 801136e:	4603      	mov	r3, r0
 8011370:	f083 0301 	eor.w	r3, r3, #1
 8011374:	b2dc      	uxtb	r4, r3
 8011376:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801137a:	4618      	mov	r0, r3
 801137c:	f7f9 fccd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011384:	4618      	mov	r0, r3
 8011386:	f7f9 fcc8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801138a:	2c00      	cmp	r4, #0
 801138c:	d042      	beq.n	8011414 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3398      	adds	r3, #152	; 0x98
 8011394:	681c      	ldr	r4, [r3, #0]
 8011396:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801139a:	68b9      	ldr	r1, [r7, #8]
 801139c:	4618      	mov	r0, r3
 801139e:	f7f9 f904 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80113a2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80113a6:	6879      	ldr	r1, [r7, #4]
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f9 f8fe 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80113ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7f9 f8f8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80113ba:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80113be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80113c2:	9302      	str	r3, [sp, #8]
 80113c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80113c8:	9301      	str	r3, [sp, #4]
 80113ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80113ce:	9300      	str	r3, [sp, #0]
 80113d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80113d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80113d8:	68f9      	ldr	r1, [r7, #12]
 80113da:	f7fb fbb9 	bl	800cb50 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80113de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80113e2:	4619      	mov	r1, r3
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	47a0      	blx	r4
 80113e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7fc fa89 	bl	800d904 <_ZN15ContainsFailureD1Ev>
 80113f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7f9 fc8f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80113fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011400:	4618      	mov	r0, r3
 8011402:	f7f9 fc8a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011406:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801140a:	4618      	mov	r0, r3
 801140c:	f7f9 fc85 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011410:	e000      	b.n	8011414 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011412:	bf00      	nop
}
 8011414:	37bc      	adds	r7, #188	; 0xbc
 8011416:	46bd      	mov	sp, r7
 8011418:	bd90      	pop	{r4, r7, pc}

0801141a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801141a:	b590      	push	{r4, r7, lr}
 801141c:	b099      	sub	sp, #100	; 0x64
 801141e:	af04      	add	r7, sp, #16
 8011420:	60f8      	str	r0, [r7, #12]
 8011422:	60b9      	str	r1, [r7, #8]
 8011424:	607a      	str	r2, [r7, #4]
 8011426:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f000 fc87 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 801142e:	4603      	mov	r3, r0
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	3228      	adds	r2, #40	; 0x28
 8011434:	6812      	ldr	r2, [r2, #0]
 8011436:	4618      	mov	r0, r3
 8011438:	4790      	blx	r2
    if (expected != actual)
 801143a:	68ba      	ldr	r2, [r7, #8]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	429a      	cmp	r2, r3
 8011440:	d027      	beq.n	8011492 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	339c      	adds	r3, #156	; 0x9c
 8011448:	681c      	ldr	r4, [r3, #0]
 801144a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	4618      	mov	r0, r3
 8011452:	f7f9 f8aa 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011456:	f107 0014 	add.w	r0, r7, #20
 801145a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801145e:	9302      	str	r3, [sp, #8]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801146a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801146c:	68f9      	ldr	r1, [r7, #12]
 801146e:	f7fb fc1f 	bl	800ccb0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8011472:	f107 0314 	add.w	r3, r7, #20
 8011476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011478:	4619      	mov	r1, r3
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	47a0      	blx	r4
 801147e:	f107 0314 	add.w	r3, r7, #20
 8011482:	4618      	mov	r0, r3
 8011484:	f7fc f9fa 	bl	800d87c <_ZN17LongsEqualFailureD1Ev>
 8011488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801148c:	4618      	mov	r0, r3
 801148e:	f7f9 fc44 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011492:	bf00      	nop
 8011494:	3754      	adds	r7, #84	; 0x54
 8011496:	46bd      	mov	sp, r7
 8011498:	bd90      	pop	{r4, r7, pc}

0801149a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801149a:	b590      	push	{r4, r7, lr}
 801149c:	b099      	sub	sp, #100	; 0x64
 801149e:	af04      	add	r7, sp, #16
 80114a0:	60f8      	str	r0, [r7, #12]
 80114a2:	60b9      	str	r1, [r7, #8]
 80114a4:	607a      	str	r2, [r7, #4]
 80114a6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f000 fc47 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 80114ae:	4603      	mov	r3, r0
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	3228      	adds	r2, #40	; 0x28
 80114b4:	6812      	ldr	r2, [r2, #0]
 80114b6:	4618      	mov	r0, r3
 80114b8:	4790      	blx	r2
    if (expected != actual)
 80114ba:	68ba      	ldr	r2, [r7, #8]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d027      	beq.n	8011512 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	339c      	adds	r3, #156	; 0x9c
 80114c8:	681c      	ldr	r4, [r3, #0]
 80114ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114ce:	6839      	ldr	r1, [r7, #0]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f9 f86a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80114d6:	f107 0014 	add.w	r0, r7, #20
 80114da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114de:	9302      	str	r3, [sp, #8]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	9301      	str	r3, [sp, #4]
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114ec:	68f9      	ldr	r1, [r7, #12]
 80114ee:	f7fb fcab 	bl	800ce48 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80114f2:	f107 0314 	add.w	r3, r7, #20
 80114f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80114f8:	4619      	mov	r1, r3
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	47a0      	blx	r4
 80114fe:	f107 0314 	add.w	r3, r7, #20
 8011502:	4618      	mov	r0, r3
 8011504:	f7fc f998 	bl	800d838 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8011508:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801150c:	4618      	mov	r0, r3
 801150e:	f7f9 fc04 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011512:	bf00      	nop
 8011514:	3754      	adds	r7, #84	; 0x54
 8011516:	46bd      	mov	sp, r7
 8011518:	bd90      	pop	{r4, r7, pc}
	...

0801151c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801151c:	b082      	sub	sp, #8
 801151e:	b590      	push	{r4, r7, lr}
 8011520:	b099      	sub	sp, #100	; 0x64
 8011522:	af02      	add	r7, sp, #8
 8011524:	60f8      	str	r0, [r7, #12]
 8011526:	1d38      	adds	r0, r7, #4
 8011528:	e880 0006 	stmia.w	r0, {r1, r2}
 801152c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f000 fc04 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011534:	4603      	mov	r3, r0
 8011536:	681a      	ldr	r2, [r3, #0]
 8011538:	3228      	adds	r2, #40	; 0x28
 801153a:	6812      	ldr	r2, [r2, #0]
 801153c:	4618      	mov	r0, r3
 801153e:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	339c      	adds	r3, #156	; 0x9c
 8011546:	681c      	ldr	r4, [r3, #0]
 8011548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801154c:	4919      	ldr	r1, [pc, #100]	; (80115b4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 801154e:	4618      	mov	r0, r3
 8011550:	f7f9 f82b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011554:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011558:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801155a:	4618      	mov	r0, r3
 801155c:	f7f9 f825 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011560:	f107 0014 	add.w	r0, r7, #20
 8011564:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011568:	9301      	str	r3, [sp, #4]
 801156a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011572:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011574:	68f9      	ldr	r1, [r7, #12]
 8011576:	f7fc f84d 	bl	800d614 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801157a:	f107 0314 	add.w	r3, r7, #20
 801157e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011582:	4619      	mov	r1, r3
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	47a0      	blx	r4
 8011588:	f107 0314 	add.w	r3, r7, #20
 801158c:	4618      	mov	r0, r3
 801158e:	f7fc f887 	bl	800d6a0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011592:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011596:	4618      	mov	r0, r3
 8011598:	f7f9 fbbf 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801159c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7f9 fbba 	bl	800ad1a <_ZN12SimpleStringD1Ev>
#endif
}
 80115a6:	bf00      	nop
 80115a8:	375c      	adds	r7, #92	; 0x5c
 80115aa:	46bd      	mov	sp, r7
 80115ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80115b0:	b002      	add	sp, #8
 80115b2:	4770      	bx	lr
 80115b4:	08022444 	.word	0x08022444

080115b8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80115b8:	b082      	sub	sp, #8
 80115ba:	b590      	push	{r4, r7, lr}
 80115bc:	b099      	sub	sp, #100	; 0x64
 80115be:	af02      	add	r7, sp, #8
 80115c0:	60f8      	str	r0, [r7, #12]
 80115c2:	1d38      	adds	r0, r7, #4
 80115c4:	e880 0006 	stmia.w	r0, {r1, r2}
 80115c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f000 fbb6 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 80115d0:	4603      	mov	r3, r0
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	3228      	adds	r2, #40	; 0x28
 80115d6:	6812      	ldr	r2, [r2, #0]
 80115d8:	4618      	mov	r0, r3
 80115da:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	339c      	adds	r3, #156	; 0x9c
 80115e2:	681c      	ldr	r4, [r3, #0]
 80115e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80115e8:	4919      	ldr	r1, [pc, #100]	; (8011650 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7f8 ffdd 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80115f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80115f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7f8 ffd7 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80115fc:	f107 0014 	add.w	r0, r7, #20
 8011600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011604:	9301      	str	r3, [sp, #4]
 8011606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801160e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011610:	68f9      	ldr	r1, [r7, #12]
 8011612:	f7fb ffff 	bl	800d614 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8011616:	f107 0314 	add.w	r3, r7, #20
 801161a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801161e:	4619      	mov	r1, r3
 8011620:	68f8      	ldr	r0, [r7, #12]
 8011622:	47a0      	blx	r4
 8011624:	f107 0314 	add.w	r3, r7, #20
 8011628:	4618      	mov	r0, r3
 801162a:	f7fc f839 	bl	800d6a0 <_ZN25FeatureUnsupportedFailureD1Ev>
 801162e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011632:	4618      	mov	r0, r3
 8011634:	f7f9 fb71 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801163c:	4618      	mov	r0, r3
 801163e:	f7f9 fb6c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
#endif
}
 8011642:	bf00      	nop
 8011644:	375c      	adds	r7, #92	; 0x5c
 8011646:	46bd      	mov	sp, r7
 8011648:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801164c:	b002      	add	sp, #8
 801164e:	4770      	bx	lr
 8011650:	08022444 	.word	0x08022444

08011654 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b099      	sub	sp, #100	; 0x64
 8011658:	af04      	add	r7, sp, #16
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	607b      	str	r3, [r7, #4]
 801165e:	460b      	mov	r3, r1
 8011660:	72fb      	strb	r3, [r7, #11]
 8011662:	4613      	mov	r3, r2
 8011664:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f000 fb68 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 801166c:	4603      	mov	r3, r0
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	3228      	adds	r2, #40	; 0x28
 8011672:	6812      	ldr	r2, [r2, #0]
 8011674:	4618      	mov	r0, r3
 8011676:	4790      	blx	r2
    if (expected != actual)
 8011678:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801167c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011680:	429a      	cmp	r2, r3
 8011682:	d029      	beq.n	80116d8 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	339c      	adds	r3, #156	; 0x9c
 801168a:	681c      	ldr	r4, [r3, #0]
 801168c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011690:	6879      	ldr	r1, [r7, #4]
 8011692:	4618      	mov	r0, r3
 8011694:	f7f8 ff89 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011698:	f107 0014 	add.w	r0, r7, #20
 801169c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116a0:	9302      	str	r3, [sp, #8]
 80116a2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80116b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116b2:	68f9      	ldr	r1, [r7, #12]
 80116b4:	f7fb fc94 	bl	800cfe0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80116b8:	f107 0314 	add.w	r3, r7, #20
 80116bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116be:	4619      	mov	r1, r3
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	47a0      	blx	r4
 80116c4:	f107 0314 	add.w	r3, r7, #20
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fc f893 	bl	800d7f4 <_ZN23SignedBytesEqualFailureD1Ev>
 80116ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7f9 fb21 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80116d8:	bf00      	nop
 80116da:	3754      	adds	r7, #84	; 0x54
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd90      	pop	{r4, r7, pc}

080116e0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80116e0:	b590      	push	{r4, r7, lr}
 80116e2:	b09d      	sub	sp, #116	; 0x74
 80116e4:	af04      	add	r7, sp, #16
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
 80116ec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80116ee:	68f8      	ldr	r0, [r7, #12]
 80116f0:	f000 fb24 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 80116f4:	4603      	mov	r3, r0
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	3228      	adds	r2, #40	; 0x28
 80116fa:	6812      	ldr	r2, [r2, #0]
 80116fc:	4618      	mov	r0, r3
 80116fe:	4790      	blx	r2
    if (expected != actual)
 8011700:	68ba      	ldr	r2, [r7, #8]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	429a      	cmp	r2, r3
 8011706:	d03f      	beq.n	8011788 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	339c      	adds	r3, #156	; 0x9c
 801170e:	681c      	ldr	r4, [r3, #0]
 8011710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011714:	68b9      	ldr	r1, [r7, #8]
 8011716:	4618      	mov	r0, r3
 8011718:	f7f9 fdea 	bl	800b2f0 <_Z10StringFromPKv>
 801171c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011720:	6879      	ldr	r1, [r7, #4]
 8011722:	4618      	mov	r0, r3
 8011724:	f7f9 fde4 	bl	800b2f0 <_Z10StringFromPKv>
 8011728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801172c:	6839      	ldr	r1, [r7, #0]
 801172e:	4618      	mov	r0, r3
 8011730:	f7f8 ff3b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011734:	f107 0014 	add.w	r0, r7, #20
 8011738:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801173c:	9302      	str	r3, [sp, #8]
 801173e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011742:	9301      	str	r3, [sp, #4]
 8011744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801174c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801174e:	68f9      	ldr	r1, [r7, #12]
 8011750:	f7fb f814 	bl	800c77c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011754:	f107 0314 	add.w	r3, r7, #20
 8011758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801175a:	4619      	mov	r1, r3
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	47a0      	blx	r4
 8011760:	f107 0314 	add.w	r3, r7, #20
 8011764:	4618      	mov	r0, r3
 8011766:	f7fc f955 	bl	800da14 <_ZN13EqualsFailureD1Ev>
 801176a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801176e:	4618      	mov	r0, r3
 8011770:	f7f9 fad3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011774:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011778:	4618      	mov	r0, r3
 801177a:	f7f9 face 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801177e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011782:	4618      	mov	r0, r3
 8011784:	f7f9 fac9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011788:	bf00      	nop
 801178a:	3764      	adds	r7, #100	; 0x64
 801178c:	46bd      	mov	sp, r7
 801178e:	bd90      	pop	{r4, r7, pc}

08011790 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011790:	b590      	push	{r4, r7, lr}
 8011792:	b09d      	sub	sp, #116	; 0x74
 8011794:	af04      	add	r7, sp, #16
 8011796:	60f8      	str	r0, [r7, #12]
 8011798:	60b9      	str	r1, [r7, #8]
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f000 facc 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 80117a4:	4603      	mov	r3, r0
 80117a6:	681a      	ldr	r2, [r3, #0]
 80117a8:	3228      	adds	r2, #40	; 0x28
 80117aa:	6812      	ldr	r2, [r2, #0]
 80117ac:	4618      	mov	r0, r3
 80117ae:	4790      	blx	r2
    if (expected != actual)
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d03f      	beq.n	8011838 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	339c      	adds	r3, #156	; 0x9c
 80117be:	681c      	ldr	r4, [r3, #0]
 80117c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80117c4:	68b9      	ldr	r1, [r7, #8]
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7f9 fdbc 	bl	800b344 <_Z10StringFromPFvvE>
 80117cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80117d0:	6879      	ldr	r1, [r7, #4]
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7f9 fdb6 	bl	800b344 <_Z10StringFromPFvvE>
 80117d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f8 fee3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80117e4:	f107 0014 	add.w	r0, r7, #20
 80117e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80117ec:	9302      	str	r3, [sp, #8]
 80117ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80117f2:	9301      	str	r3, [sp, #4]
 80117f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80117fe:	68f9      	ldr	r1, [r7, #12]
 8011800:	f7fa ffbc 	bl	800c77c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011804:	f107 0314 	add.w	r3, r7, #20
 8011808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801180a:	4619      	mov	r1, r3
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	47a0      	blx	r4
 8011810:	f107 0314 	add.w	r3, r7, #20
 8011814:	4618      	mov	r0, r3
 8011816:	f7fc f8fd 	bl	800da14 <_ZN13EqualsFailureD1Ev>
 801181a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801181e:	4618      	mov	r0, r3
 8011820:	f7f9 fa7b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011824:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011828:	4618      	mov	r0, r3
 801182a:	f7f9 fa76 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801182e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011832:	4618      	mov	r0, r3
 8011834:	f7f9 fa71 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011838:	bf00      	nop
 801183a:	3764      	adds	r7, #100	; 0x64
 801183c:	46bd      	mov	sp, r7
 801183e:	bd90      	pop	{r4, r7, pc}

08011840 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011840:	b590      	push	{r4, r7, lr}
 8011842:	b09d      	sub	sp, #116	; 0x74
 8011844:	af02      	add	r7, sp, #8
 8011846:	6278      	str	r0, [r7, #36]	; 0x24
 8011848:	ed87 0b06 	vstr	d0, [r7, #24]
 801184c:	ed87 1b04 	vstr	d1, [r7, #16]
 8011850:	ed87 2b02 	vstr	d2, [r7, #8]
 8011854:	6239      	str	r1, [r7, #32]
 8011856:	607a      	str	r2, [r7, #4]
 8011858:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801185a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801185c:	f000 fa6e 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011860:	4603      	mov	r3, r0
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	3228      	adds	r2, #40	; 0x28
 8011866:	6812      	ldr	r2, [r2, #0]
 8011868:	4618      	mov	r0, r3
 801186a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 801186c:	ed97 2b02 	vldr	d2, [r7, #8]
 8011870:	ed97 1b04 	vldr	d1, [r7, #16]
 8011874:	ed97 0b06 	vldr	d0, [r7, #24]
 8011878:	f7fe fd4a 	bl	8010310 <_Z13doubles_equalddd>
 801187c:	4603      	mov	r3, r0
 801187e:	f083 0301 	eor.w	r3, r3, #1
 8011882:	b2db      	uxtb	r3, r3
 8011884:	2b00      	cmp	r3, #0
 8011886:	d029      	beq.n	80118dc <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	339c      	adds	r3, #156	; 0x9c
 801188e:	681c      	ldr	r4, [r3, #0]
 8011890:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011894:	6a39      	ldr	r1, [r7, #32]
 8011896:	4618      	mov	r0, r3
 8011898:	f7f8 fe87 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801189c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80118a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80118a4:	9300      	str	r3, [sp, #0]
 80118a6:	ed97 2b02 	vldr	d2, [r7, #8]
 80118aa:	ed97 1b04 	vldr	d1, [r7, #16]
 80118ae:	ed97 0b06 	vldr	d0, [r7, #24]
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118b8:	f7fa ffa2 	bl	800c800 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80118bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80118c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80118c2:	4619      	mov	r1, r3
 80118c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80118c6:	47a0      	blx	r4
 80118c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7fc f87f 	bl	800d9d0 <_ZN19DoublesEqualFailureD1Ev>
 80118d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7f9 fa1f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80118dc:	bf00      	nop
 80118de:	376c      	adds	r7, #108	; 0x6c
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd90      	pop	{r4, r7, pc}

080118e4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80118e4:	b590      	push	{r4, r7, lr}
 80118e6:	b0a7      	sub	sp, #156	; 0x9c
 80118e8:	af04      	add	r7, sp, #16
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	607a      	str	r2, [r7, #4]
 80118f0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f000 fa22 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 80118f8:	4603      	mov	r3, r0
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	3228      	adds	r2, #40	; 0x28
 80118fe:	6812      	ldr	r2, [r2, #0]
 8011900:	4618      	mov	r0, r3
 8011902:	4790      	blx	r2
	if (length == 0) return;
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d075      	beq.n	80119f6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d102      	bne.n	8011916 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d071      	beq.n	80119fa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d12d      	bne.n	801197e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	339c      	adds	r3, #156	; 0x9c
 8011928:	681c      	ldr	r4, [r3, #0]
 801192a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801192e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011932:	4618      	mov	r0, r3
 8011934:	f7f8 fe39 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011938:	f107 0010 	add.w	r0, r7, #16
 801193c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011940:	9303      	str	r3, [sp, #12]
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	9302      	str	r3, [sp, #8]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	9301      	str	r3, [sp, #4]
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011952:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011956:	68f9      	ldr	r1, [r7, #12]
 8011958:	f7fb fd70 	bl	800d43c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801195c:	f107 0310 	add.w	r3, r7, #16
 8011960:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011964:	4619      	mov	r1, r3
 8011966:	68f8      	ldr	r0, [r7, #12]
 8011968:	47a0      	blx	r4
 801196a:	f107 0310 	add.w	r3, r7, #16
 801196e:	4618      	mov	r0, r3
 8011970:	f7fb feda 	bl	800d728 <_ZN18BinaryEqualFailureD1Ev>
 8011974:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011978:	4618      	mov	r0, r3
 801197a:	f7f9 f9ce 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	6879      	ldr	r1, [r7, #4]
 8011982:	68b8      	ldr	r0, [r7, #8]
 8011984:	f7f8 fd30 	bl	800a3e8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	bf14      	ite	ne
 801198e:	2301      	movne	r3, #1
 8011990:	2300      	moveq	r3, #0
 8011992:	b2db      	uxtb	r3, r3
 8011994:	2b00      	cmp	r3, #0
 8011996:	d031      	beq.n	80119fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	339c      	adds	r3, #156	; 0x9c
 801199e:	681c      	ldr	r4, [r3, #0]
 80119a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7f8 fdfe 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80119ae:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80119b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119b6:	9303      	str	r3, [sp, #12]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	9302      	str	r3, [sp, #8]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	9301      	str	r3, [sp, #4]
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	9300      	str	r3, [sp, #0]
 80119c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80119c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80119cc:	68f9      	ldr	r1, [r7, #12]
 80119ce:	f7fb fd35 	bl	800d43c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80119d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80119d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80119da:	4619      	mov	r1, r3
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	47a0      	blx	r4
 80119e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fb fe9f 	bl	800d728 <_ZN18BinaryEqualFailureD1Ev>
 80119ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7f9 f993 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80119f4:	e002      	b.n	80119fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80119f6:	bf00      	nop
 80119f8:	e000      	b.n	80119fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80119fa:	bf00      	nop
}
 80119fc:	378c      	adds	r7, #140	; 0x8c
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd90      	pop	{r4, r7, pc}

08011a02 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011a02:	b590      	push	{r4, r7, lr}
 8011a04:	b09b      	sub	sp, #108	; 0x6c
 8011a06:	af06      	add	r7, sp, #24
 8011a08:	60f8      	str	r0, [r7, #12]
 8011a0a:	60b9      	str	r1, [r7, #8]
 8011a0c:	607a      	str	r2, [r7, #4]
 8011a0e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 f993 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011a16:	4603      	mov	r3, r0
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	3228      	adds	r2, #40	; 0x28
 8011a1c:	6812      	ldr	r2, [r2, #0]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	405a      	eors	r2, r3
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d02b      	beq.n	8011a88 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	339c      	adds	r3, #156	; 0x9c
 8011a36:	681c      	ldr	r4, [r3, #0]
 8011a38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011a3c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7f8 fdb3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011a44:	f107 0014 	add.w	r0, r7, #20
 8011a48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011a4c:	9304      	str	r3, [sp, #16]
 8011a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a50:	9303      	str	r3, [sp, #12]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	9302      	str	r3, [sp, #8]
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	9301      	str	r3, [sp, #4]
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011a62:	68f9      	ldr	r1, [r7, #12]
 8011a64:	f7fb fd7a 	bl	800d55c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8011a68:	f107 0314 	add.w	r3, r7, #20
 8011a6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011a6e:	4619      	mov	r1, r3
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	47a0      	blx	r4
 8011a74:	f107 0314 	add.w	r3, r7, #20
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7fb fe33 	bl	800d6e4 <_ZN16BitsEqualFailureD1Ev>
 8011a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7f9 f949 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011a88:	bf00      	nop
 8011a8a:	3754      	adds	r7, #84	; 0x54
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd90      	pop	{r4, r7, pc}

08011a90 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b09d      	sub	sp, #116	; 0x74
 8011a94:	af04      	add	r7, sp, #16
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	607a      	str	r2, [r7, #4]
 8011a9a:	603b      	str	r3, [r7, #0]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f000 f94b 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	3228      	adds	r2, #40	; 0x28
 8011aac:	6812      	ldr	r2, [r2, #0]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	4790      	blx	r2
    if (failed)
 8011ab2:	7afb      	ldrb	r3, [r7, #11]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d03f      	beq.n	8011b38 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	339c      	adds	r3, #156	; 0x9c
 8011abe:	681c      	ldr	r4, [r3, #0]
 8011ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ac4:	6879      	ldr	r1, [r7, #4]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7f8 fd6f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011acc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7f8 fd69 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011ad8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011adc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f8 fd63 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011ae4:	f107 0014 	add.w	r0, r7, #20
 8011ae8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011aec:	9302      	str	r3, [sp, #8]
 8011aee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011af8:	9300      	str	r3, [sp, #0]
 8011afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011afc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011afe:	68f9      	ldr	r1, [r7, #12]
 8011b00:	f7fa ff30 	bl	800c964 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011b04:	f107 0314 	add.w	r3, r7, #20
 8011b08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	47a0      	blx	r4
 8011b10:	f107 0314 	add.w	r3, r7, #20
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fb ff39 	bl	800d98c <_ZN17CheckEqualFailureD1Ev>
 8011b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7f9 f8fb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011b24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7f9 f8f6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011b2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7f9 f8f1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011b38:	bf00      	nop
 8011b3a:	3764      	adds	r7, #100	; 0x64
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd90      	pop	{r4, r7, pc}

08011b40 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8011b40:	b590      	push	{r4, r7, lr}
 8011b42:	b09d      	sub	sp, #116	; 0x74
 8011b44:	af04      	add	r7, sp, #16
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	607a      	str	r2, [r7, #4]
 8011b4a:	603b      	str	r3, [r7, #0]
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f000 f8f3 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011b56:	4603      	mov	r3, r0
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	3228      	adds	r2, #40	; 0x28
 8011b5c:	6812      	ldr	r2, [r2, #0]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	4790      	blx	r2
    if (!comparison)
 8011b62:	7afb      	ldrb	r3, [r7, #11]
 8011b64:	f083 0301 	eor.w	r3, r3, #1
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d03f      	beq.n	8011bee <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	339c      	adds	r3, #156	; 0x9c
 8011b74:	681c      	ldr	r4, [r3, #0]
 8011b76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b7a:	6879      	ldr	r1, [r7, #4]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7f8 fd14 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011b82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011b86:	6839      	ldr	r1, [r7, #0]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7f8 fd0e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011b92:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7f8 fd08 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8011b9a:	f107 0014 	add.w	r0, r7, #20
 8011b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ba2:	9302      	str	r3, [sp, #8]
 8011ba4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ba8:	9301      	str	r3, [sp, #4]
 8011baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011bb4:	68f9      	ldr	r1, [r7, #12]
 8011bb6:	f7fa ff83 	bl	800cac0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011bba:	f107 0314 	add.w	r3, r7, #20
 8011bbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	47a0      	blx	r4
 8011bc6:	f107 0314 	add.w	r3, r7, #20
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fb febc 	bl	800d948 <_ZN17ComparisonFailureD1Ev>
 8011bd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7f9 f8a0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011bda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7f9 f89b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8011be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7f9 f896 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011bee:	bf00      	nop
 8011bf0:	3764      	adds	r7, #100	; 0x64
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd90      	pop	{r4, r7, pc}
	...

08011bf8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8011bf8:	b5b0      	push	{r4, r5, r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
 8011c04:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8011c06:	f107 0310 	add.w	r3, r7, #16
 8011c0a:	4924      	ldr	r1, [pc, #144]	; (8011c9c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7f8 fccc 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8011c12:	f107 0310 	add.w	r3, r7, #16
 8011c16:	6879      	ldr	r1, [r7, #4]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7f9 f90d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8011c1e:	f107 0310 	add.w	r3, r7, #16
 8011c22:	491f      	ldr	r1, [pc, #124]	; (8011ca0 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f9 f907 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8011c2a:	f107 0318 	add.w	r3, r7, #24
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7f9 fda1 	bl	800b778 <_Z10StringFromj>
 8011c36:	f107 0218 	add.w	r2, r7, #24
 8011c3a:	f107 0310 	add.w	r3, r7, #16
 8011c3e:	4611      	mov	r1, r2
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f9 f8e7 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8011c46:	f107 0318 	add.w	r3, r7, #24
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7f9 f865 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8011c50:	f107 0310 	add.w	r3, r7, #16
 8011c54:	4913      	ldr	r1, [pc, #76]	; (8011ca4 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7f9 f8ee 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8011c5c:	f107 0310 	add.w	r3, r7, #16
 8011c60:	68b9      	ldr	r1, [r7, #8]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7f9 f8e8 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8011c68:	68f8      	ldr	r0, [r7, #12]
 8011c6a:	f000 f867 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011c6e:	4604      	mov	r4, r0
 8011c70:	6823      	ldr	r3, [r4, #0]
 8011c72:	3338      	adds	r3, #56	; 0x38
 8011c74:	681d      	ldr	r5, [r3, #0]
 8011c76:	f107 0310 	add.w	r3, r7, #16
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7f9 f820 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8011c80:	4603      	mov	r3, r0
 8011c82:	4619      	mov	r1, r3
 8011c84:	4620      	mov	r0, r4
 8011c86:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8011c88:	f107 0310 	add.w	r3, r7, #16
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7f9 f844 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8011c92:	bf00      	nop
 8011c94:	3720      	adds	r7, #32
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bdb0      	pop	{r4, r5, r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	0802245c 	.word	0x0802245c
 8011ca0:	08022460 	.word	0x08022460
 8011ca4:	08022464 	.word	0x08022464

08011ca8 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8011ca8:	b590      	push	{r4, r7, lr}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
 8011cb4:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	3370      	adds	r3, #112	; 0x70
 8011cbc:	681c      	ldr	r4, [r3, #0]
 8011cbe:	68b8      	ldr	r0, [r7, #8]
 8011cc0:	f7f8 fffe 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8011cc4:	4601      	mov	r1, r0
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	68f8      	ldr	r0, [r7, #12]
 8011ccc:	47a0      	blx	r4
}
 8011cce:	bf00      	nop
 8011cd0:	3714      	adds	r7, #20
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd90      	pop	{r4, r7, pc}

08011cd6 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8011cd6:	b580      	push	{r7, lr}
 8011cd8:	b082      	sub	sp, #8
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
 8011cde:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 f82b 	bl	8011d3c <_ZN10UtestShell13getTestResultEv>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	323c      	adds	r2, #60	; 0x3c
 8011cec:	6812      	ldr	r2, [r2, #0]
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	4790      	blx	r2
}
 8011cf4:	bf00      	nop
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8011d06:	4a04      	ldr	r2, [pc, #16]	; (8011d18 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	6013      	str	r3, [r2, #0]
}
 8011d0c:	bf00      	nop
 8011d0e:	370c      	adds	r7, #12
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	20000914 	.word	0x20000914

08011d1c <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8011d26:	4a04      	ldr	r2, [pc, #16]	; (8011d38 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	6013      	str	r3, [r2, #0]
}
 8011d2c:	bf00      	nop
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	20000918 	.word	0x20000918

08011d3c <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8011d44:	4b09      	ldr	r3, [pc, #36]	; (8011d6c <_ZN10UtestShell13getTestResultEv+0x30>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d109      	bne.n	8011d60 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8011d4c:	f7fe fbb2 	bl	80104b4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8011d50:	4603      	mov	r3, r0
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	32a4      	adds	r2, #164	; 0xa4
 8011d56:	6812      	ldr	r2, [r2, #0]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	4790      	blx	r2
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	e001      	b.n	8011d64 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8011d60:	4b02      	ldr	r3, [pc, #8]	; (8011d6c <_ZN10UtestShell13getTestResultEv+0x30>)
 8011d62:	681b      	ldr	r3, [r3, #0]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	20000914 	.word	0x20000914

08011d70 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8011d74:	4b05      	ldr	r3, [pc, #20]	; (8011d8c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d103      	bne.n	8011d84 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8011d7c:	f7fe fb9a 	bl	80104b4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8011d80:	4603      	mov	r3, r0
 8011d82:	e001      	b.n	8011d88 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8011d84:	4b01      	ldr	r3, [pc, #4]	; (8011d8c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8011d86:	681b      	ldr	r3, [r3, #0]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	20000918 	.word	0x20000918

08011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8011d90:	b480      	push	{r7}
 8011d92:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8011d94:	4b03      	ldr	r3, [pc, #12]	; (8011da4 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8011d96:	681b      	ldr	r3, [r3, #0]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	20000090 	.word	0x20000090

08011da8 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8011da8:	b480      	push	{r7}
 8011daa:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8011dac:	4b03      	ldr	r3, [pc, #12]	; (8011dbc <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8011dae:	4a04      	ldr	r2, [pc, #16]	; (8011dc0 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8011db0:	601a      	str	r2, [r3, #0]
}
 8011db2:	bf00      	nop
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	20000090 	.word	0x20000090
 8011dc0:	2000008c 	.word	0x2000008c

08011dc4 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	4a04      	ldr	r2, [pc, #16]	; (8011de0 <_ZN5UtestC1Ev+0x1c>)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	601a      	str	r2, [r3, #0]
{
}
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr
 8011de0:	080253a8 	.word	0x080253a8

08011de4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	4a04      	ldr	r2, [pc, #16]	; (8011e00 <_ZN5UtestD1Ev+0x1c>)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	601a      	str	r2, [r3, #0]
{
}
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4618      	mov	r0, r3
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr
 8011e00:	080253a8 	.word	0x080253a8

08011e04 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
}
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7ff ffe9 	bl	8011de4 <_ZN5UtestD1Ev>
 8011e12:	2104      	movs	r1, #4
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7f6 f819 	bl	8007e4c <_ZdlPvj>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8011e2c:	4b0d      	ldr	r3, [pc, #52]	; (8011e64 <_ZN5Utest3runEv+0x40>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	6879      	ldr	r1, [r7, #4]
 8011e32:	480d      	ldr	r0, [pc, #52]	; (8011e68 <_ZN5Utest3runEv+0x44>)
 8011e34:	4798      	blx	r3
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	bf14      	ite	ne
 8011e3c:	2301      	movne	r3, #1
 8011e3e:	2300      	moveq	r3, #0
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8011e46:	4b07      	ldr	r3, [pc, #28]	; (8011e64 <_ZN5Utest3runEv+0x40>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	6879      	ldr	r1, [r7, #4]
 8011e4c:	4807      	ldr	r0, [pc, #28]	; (8011e6c <_ZN5Utest3runEv+0x48>)
 8011e4e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8011e50:	4b04      	ldr	r3, [pc, #16]	; (8011e64 <_ZN5Utest3runEv+0x40>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	6879      	ldr	r1, [r7, #4]
 8011e56:	4806      	ldr	r0, [pc, #24]	; (8011e70 <_ZN5Utest3runEv+0x4c>)
 8011e58:	4798      	blx	r3
}
 8011e5a:	bf00      	nop
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	200000a0 	.word	0x200000a0
 8011e68:	08010511 	.word	0x08010511
 8011e6c:	0801052d 	.word	0x0801052d
 8011e70:	08010549 	.word	0x08010549

08011e74 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8011e74:	b480      	push	{r7}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
}
 8011e7c:	bf00      	nop
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
}
 8011e90:	bf00      	nop
 8011e92:	370c      	adds	r7, #12
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
}
 8011ea4:	bf00      	nop
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	4a04      	ldr	r2, [pc, #16]	; (8011ecc <_ZN14TestTerminatorD1Ev+0x1c>)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	601a      	str	r2, [r3, #0]
{
}
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr
 8011ecc:	08025394 	.word	0x08025394

08011ed0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8011ed8:	2300      	movs	r3, #0
 8011eda:	60fb      	str	r3, [r7, #12]
 8011edc:	f107 030c 	add.w	r3, r7, #12
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7f6 f975 	bl	80081d0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8011ee6:	f107 030c 	add.w	r3, r7, #12
 8011eea:	4618      	mov	r0, r3
 8011eec:	f000 f82c 	bl	8011f48 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8011ef0:	f107 030c 	add.w	r3, r7, #12
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f000 f835 	bl	8011f64 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8011efa:	bf00      	nop
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
	...

08011f04 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	4a05      	ldr	r2, [pc, #20]	; (8011f24 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff ffcb 	bl	8011eb0 <_ZN14TestTerminatorD1Ev>
{
}
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3708      	adds	r7, #8
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	08025380 	.word	0x08025380

08011f28 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
}
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff ffe7 	bl	8011f04 <_ZN20NormalTestTerminatorD1Ev>
 8011f36:	2104      	movs	r1, #4
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7f5 ff87 	bl	8007e4c <_ZdlPvj>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8011f50:	4b03      	ldr	r3, [pc, #12]	; (8011f60 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011f56:	bf00      	nop
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	2000009c 	.word	0x2000009c

08011f64 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	4a05      	ldr	r2, [pc, #20]	; (8011f84 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	601a      	str	r2, [r3, #0]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff ff9b 	bl	8011eb0 <_ZN14TestTerminatorD1Ev>
{
}
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	0802536c 	.word	0x0802536c

08011f88 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
}
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f7ff ffe7 	bl	8011f64 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8011f96:	2104      	movs	r1, #4
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7f5 ff57 	bl	8007e4c <_ZdlPvj>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8011fb0:	f7fe fbaa 	bl	8010708 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ff ff8a 	bl	8011ed0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8011fbc:	bf00      	nop
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	4a05      	ldr	r2, [pc, #20]	; (8011fe4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7ff ff95 	bl	8011f04 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	08025358 	.word	0x08025358

08011fe8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
}
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff ffe7 	bl	8011fc4 <_ZN22CrashingTestTerminatorD1Ev>
 8011ff6:	2104      	movs	r1, #4
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7f5 ff27 	bl	8007e4c <_ZdlPvj>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	4618      	mov	r0, r3
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	601a      	str	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d007      	beq.n	8012034 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	3310      	adds	r3, #16
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	6838      	ldr	r0, [r7, #0]
 801202e:	4798      	blx	r3
 8012030:	4603      	mov	r3, r0
 8012032:	e000      	b.n	8012036 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8012034:	2300      	movs	r3, #0
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d02d      	beq.n	801209e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801204a:	4293      	cmp	r3, r2
 801204c:	d201      	bcs.n	8012052 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	e001      	b.n	8012056 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
 8012056:	f240 3237 	movw	r2, #823	; 0x337
 801205a:	4914      	ldr	r1, [pc, #80]	; (80120ac <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 801205c:	4618      	mov	r0, r3
 801205e:	f7f5 ff05 	bl	8007e6c <_ZnajPKci>
 8012062:	4602      	mov	r2, r0
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801206c:	2300      	movs	r3, #0
 801206e:	60bb      	str	r3, [r7, #8]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	68ba      	ldr	r2, [r7, #8]
 8012076:	429a      	cmp	r2, r3
 8012078:	d212      	bcs.n	80120a0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	4413      	add	r3, r2
 8012084:	68fa      	ldr	r2, [r7, #12]
 8012086:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	330c      	adds	r3, #12
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68f8      	ldr	r0, [r7, #12]
 8012092:	4798      	blx	r3
 8012094:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	3301      	adds	r3, #1
 801209a:	60bb      	str	r3, [r7, #8]
 801209c:	e7e8      	b.n	8012070 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 801209e:	bf00      	nop
    }
}
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4618      	mov	r0, r3
 80120a4:	3710      	adds	r7, #16
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	080222ec 	.word	0x080222ec

080120b0 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d004      	beq.n	80120ca <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7f5 fee5 	bl	8007e94 <_ZdaPv>
}
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b087      	sub	sp, #28
 80120d8:	af00      	add	r7, sp, #0
 80120da:	60f8      	str	r0, [r7, #12]
 80120dc:	60b9      	str	r1, [r7, #8]
 80120de:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	009b      	lsls	r3, r3, #2
 80120e8:	4413      	add	r3, r2
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	4413      	add	r3, r2
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	4413      	add	r3, r2
 8012106:	697a      	ldr	r2, [r7, #20]
 8012108:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4413      	add	r3, r2
 8012114:	693a      	ldr	r2, [r7, #16]
 8012116:	601a      	str	r2, [r3, #0]
}
 8012118:	bf00      	nop
 801211a:	371c      	adds	r7, #28
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b084      	sub	sp, #16
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d028      	beq.n	8012188 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8012136:	4b17      	ldr	r3, [pc, #92]	; (8012194 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	6838      	ldr	r0, [r7, #0]
 801213c:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	3b01      	subs	r3, #1
 8012144:	60fb      	str	r3, [r7, #12]
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d019      	beq.n	8012180 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d01b      	beq.n	801218c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8012154:	4b10      	ldr	r3, [pc, #64]	; (8012198 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4798      	blx	r3
 801215a:	4603      	mov	r3, r0
 801215c:	461a      	mov	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	3301      	adds	r3, #1
 8012162:	fbb2 f1f3 	udiv	r1, r2, r3
 8012166:	fb03 f301 	mul.w	r3, r3, r1
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 801216e:	68ba      	ldr	r2, [r7, #8]
 8012170:	68f9      	ldr	r1, [r7, #12]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7ff ffae 	bl	80120d4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	3b01      	subs	r3, #1
 801217c:	60fb      	str	r3, [r7, #12]
 801217e:	e7e2      	b.n	8012146 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 f834 	bl	80121ee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8012186:	e002      	b.n	801218e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8012188:	bf00      	nop
 801218a:	e000      	b.n	801218e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 801218c:	bf00      	nop
}
 801218e:	3710      	adds	r7, #16
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	200000dc 	.word	0x200000dc
 8012198:	200000e0 	.word	0x200000e0

0801219c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b086      	sub	sp, #24
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d01c      	beq.n	80121e6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	085b      	lsrs	r3, r3, #1
 80121b2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80121b4:	2300      	movs	r3, #0
 80121b6:	617b      	str	r3, [r7, #20]
 80121b8:	697a      	ldr	r2, [r7, #20]
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	429a      	cmp	r2, r3
 80121be:	d20e      	bcs.n	80121de <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	685a      	ldr	r2, [r3, #4]
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	1ad3      	subs	r3, r2, r3
 80121c8:	3b01      	subs	r3, #1
 80121ca:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	6979      	ldr	r1, [r7, #20]
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7ff ff7f 	bl	80120d4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	3301      	adds	r3, #1
 80121da:	617b      	str	r3, [r7, #20]
 80121dc:	e7ec      	b.n	80121b8 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f805 	bl	80121ee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80121e4:	e000      	b.n	80121e8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80121e6:	bf00      	nop
}
 80121e8:	3718      	adds	r7, #24
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b084      	sub	sp, #16
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 80121f6:	2300      	movs	r3, #0
 80121f8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80121fa:	2300      	movs	r3, #0
 80121fc:	60bb      	str	r3, [r7, #8]
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	68ba      	ldr	r2, [r7, #8]
 8012204:	429a      	cmp	r2, r3
 8012206:	d221      	bcs.n	801224c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6859      	ldr	r1, [r3, #4]
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	1acb      	subs	r3, r1, r3
 8012214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012218:	3b01      	subs	r3, #1
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	4413      	add	r3, r2
 801221e:	6818      	ldr	r0, [r3, #0]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681a      	ldr	r2, [r3, #0]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6859      	ldr	r1, [r3, #4]
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	1acb      	subs	r3, r1, r3
 801222c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012230:	3b01      	subs	r3, #1
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	4413      	add	r3, r2
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	3308      	adds	r3, #8
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	68f9      	ldr	r1, [r7, #12]
 8012240:	4798      	blx	r3
 8012242:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	3301      	adds	r3, #1
 8012248:	60bb      	str	r3, [r7, #8]
 801224a:	e7d8      	b.n	80121fe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 801224c:	bf00      	nop
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
    return get(0);
 801225c:	2100      	movs	r1, #0
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 f805 	bl	801226e <_ZNK22UtestShellPointerArray3getEj>
 8012264:	4603      	mov	r3, r0
}
 8012266:	4618      	mov	r0, r3
 8012268:	3708      	adds	r7, #8
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
 8012276:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	429a      	cmp	r2, r3
 8012280:	d301      	bcc.n	8012286 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8012282:	2300      	movs	r3, #0
 8012284:	e005      	b.n	8012292 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	4413      	add	r3, r2
 8012290:	681b      	ldr	r3, [r3, #0]
}
 8012292:	4618      	mov	r0, r3
 8012294:	370c      	adds	r7, #12
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr
	...

080122a0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	607a      	str	r2, [r7, #4]
 80122ac:	603b      	str	r3, [r7, #0]
 80122ae:	4a10      	ldr	r2, [pc, #64]	; (80122f0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80122b4:	6879      	ldr	r1, [r7, #4]
 80122b6:	68b8      	ldr	r0, [r7, #8]
 80122b8:	f7fe fc27 	bl	8010b0a <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	68b8      	ldr	r0, [r7, #8]
 80122c0:	f7fe fc31 	bl	8010b26 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80122c4:	69b9      	ldr	r1, [r7, #24]
 80122c6:	68b8      	ldr	r0, [r7, #8]
 80122c8:	f7fe fc03 	bl	8010ad2 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80122cc:	69f9      	ldr	r1, [r7, #28]
 80122ce:	68b8      	ldr	r0, [r7, #8]
 80122d0:	f7fe fc0d 	bl	8010aee <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80122d4:	f7fd fc20 	bl	800fb18 <_ZN12TestRegistry18getCurrentRegistryEv>
 80122d8:	4603      	mov	r3, r0
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	3208      	adds	r2, #8
 80122de:	6812      	ldr	r2, [r2, #0]
 80122e0:	68b9      	ldr	r1, [r7, #8]
 80122e2:	4618      	mov	r0, r3
 80122e4:	4790      	blx	r2
}
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	4618      	mov	r0, r3
 80122ea:	3710      	adds	r7, #16
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	0802529c 	.word	0x0802529c

080122f4 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	4a04      	ldr	r2, [pc, #16]	; (8012310 <_ZN13TestInstallerD1Ev+0x1c>)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	601a      	str	r2, [r3, #0]
{
}
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	370c      	adds	r7, #12
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	0802529c 	.word	0x0802529c

08012314 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
}
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff ffe9 	bl	80122f4 <_ZN13TestInstallerD1Ev>
 8012322:	2104      	movs	r1, #4
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7f5 fd91 	bl	8007e4c <_ZdlPvj>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d10a      	bne.n	801235a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801234a:	4293      	cmp	r3, r2
 801234c:	d105      	bne.n	801235a <_Z41__static_initialization_and_destruction_0ii+0x26>
 801234e:	4805      	ldr	r0, [pc, #20]	; (8012364 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8012350:	f7ff fe38 	bl	8011fc4 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8012354:	4804      	ldr	r0, [pc, #16]	; (8012368 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8012356:	f7ff fdd5 	bl	8011f04 <_ZN20NormalTestTerminatorD1Ev>
}
 801235a:	bf00      	nop
 801235c:	3708      	adds	r7, #8
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
 8012362:	bf00      	nop
 8012364:	2000008c 	.word	0x2000008c
 8012368:	20000088 	.word	0x20000088

0801236c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
 8012370:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012374:	2001      	movs	r0, #1
 8012376:	f7ff ffdd 	bl	8012334 <_Z41__static_initialization_and_destruction_0ii>
 801237a:	bd80      	pop	{r7, pc}

0801237c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 801237c:	b580      	push	{r7, lr}
 801237e:	af00      	add	r7, sp, #0
 8012380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012384:	2000      	movs	r0, #0
 8012386:	f7ff ffd5 	bl	8012334 <_Z41__static_initialization_and_destruction_0ii>
 801238a:	bd80      	pop	{r7, pc}

0801238c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 801238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
 8012392:	ed87 0b00 	vstr	d0, [r7]
 8012396:	683c      	ldr	r4, [r7, #0]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801239e:	2301      	movs	r3, #1
 80123a0:	461e      	mov	r6, r3
 80123a2:	f04f 32ff 	mov.w	r2, #4294967295
 80123a6:	4b10      	ldr	r3, [pc, #64]	; (80123e8 <_ZSt5isinfd+0x5c>)
 80123a8:	4620      	mov	r0, r4
 80123aa:	4629      	mov	r1, r5
 80123ac:	f7ee f9ec 	bl	8000788 <__aeabi_dcmpun>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d10b      	bne.n	80123ce <_ZSt5isinfd+0x42>
 80123b6:	f04f 32ff 	mov.w	r2, #4294967295
 80123ba:	4b0b      	ldr	r3, [pc, #44]	; (80123e8 <_ZSt5isinfd+0x5c>)
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f7ee f9c4 	bl	800074c <__aeabi_dcmple>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d101      	bne.n	80123ce <_ZSt5isinfd+0x42>
 80123ca:	2300      	movs	r3, #0
 80123cc:	461e      	mov	r6, r3
 80123ce:	b2f3      	uxtb	r3, r6
 80123d0:	f083 0301 	eor.w	r3, r3, #1
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	bf14      	ite	ne
 80123da:	2301      	movne	r3, #1
 80123dc:	2300      	moveq	r3, #0
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	4618      	mov	r0, r3
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123e8:	7fefffff 	.word	0x7fefffff

080123ec <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80123ec:	b590      	push	{r4, r7, lr}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	ed87 0b00 	vstr	d0, [r7]
 80123f6:	2301      	movs	r3, #1
 80123f8:	461c      	mov	r4, r3
 80123fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80123fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012402:	f7ee f9c1 	bl	8000788 <__aeabi_dcmpun>
 8012406:	4603      	mov	r3, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	d101      	bne.n	8012410 <_ZSt5isnand+0x24>
 801240c:	2300      	movs	r3, #0
 801240e:	461c      	mov	r4, r3
 8012410:	b2e3      	uxtb	r3, r4
 8012412:	2b00      	cmp	r3, #0
 8012414:	bf14      	ite	ne
 8012416:	2301      	movne	r3, #1
 8012418:	2300      	moveq	r3, #0
 801241a:	b2db      	uxtb	r3, r3
 801241c:	4618      	mov	r0, r3
 801241e:	370c      	adds	r7, #12
 8012420:	46bd      	mov	sp, r7
 8012422:	bd90      	pop	{r4, r7, pc}

08012424 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8012424:	b590      	push	{r4, r7, lr}
 8012426:	b095      	sub	sp, #84	; 0x54
 8012428:	af00      	add	r7, sp, #0
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	3334      	adds	r3, #52	; 0x34
 8012436:	681c      	ldr	r4, [r3, #0]
 8012438:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801243c:	490f      	ldr	r1, [pc, #60]	; (801247c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 801243e:	4618      	mov	r0, r3
 8012440:	f7f8 f8b3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012444:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012448:	f107 0314 	add.w	r3, r7, #20
 801244c:	68f9      	ldr	r1, [r7, #12]
 801244e:	4618      	mov	r0, r3
 8012450:	f7f9 ff0a 	bl	800c268 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8012454:	f107 0314 	add.w	r3, r7, #20
 8012458:	4619      	mov	r1, r3
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	47a0      	blx	r4
 801245e:	f107 0314 	add.w	r3, r7, #20
 8012462:	4618      	mov	r0, r3
 8012464:	f7f9 ffc0 	bl	800c3e8 <_ZN11TestFailureD1Ev>
 8012468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801246c:	4618      	mov	r0, r3
 801246e:	f7f8 fc54 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8012472:	bf00      	nop
 8012474:	3754      	adds	r7, #84	; 0x54
 8012476:	46bd      	mov	sp, r7
 8012478:	bd90      	pop	{r4, r7, pc}
 801247a:	bf00      	nop
 801247c:	08022474 	.word	0x08022474

08012480 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8012480:	b480      	push	{r7}
 8012482:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8012484:	2301      	movs	r3, #1
}
 8012486:	4618      	mov	r0, r3
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 801249a:	4b13      	ldr	r3, [pc, #76]	; (80124e8 <PlatformSpecificSetJmpImplementation+0x58>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	225c      	movs	r2, #92	; 0x5c
 80124a0:	fb02 f303 	mul.w	r3, r2, r3
 80124a4:	4a11      	ldr	r2, [pc, #68]	; (80124ec <PlatformSpecificSetJmpImplementation+0x5c>)
 80124a6:	4413      	add	r3, r2
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7ed feb9 	bl	8000220 <setjmp>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bf0c      	ite	eq
 80124b4:	2301      	moveq	r3, #1
 80124b6:	2300      	movne	r3, #0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00e      	beq.n	80124dc <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80124be:	4b0a      	ldr	r3, [pc, #40]	; (80124e8 <PlatformSpecificSetJmpImplementation+0x58>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3301      	adds	r3, #1
 80124c4:	4a08      	ldr	r2, [pc, #32]	; (80124e8 <PlatformSpecificSetJmpImplementation+0x58>)
 80124c6:	6013      	str	r3, [r2, #0]
        function(data);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6838      	ldr	r0, [r7, #0]
 80124cc:	4798      	blx	r3
        jmp_buf_index--;
 80124ce:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <PlatformSpecificSetJmpImplementation+0x58>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	3b01      	subs	r3, #1
 80124d4:	4a04      	ldr	r2, [pc, #16]	; (80124e8 <PlatformSpecificSetJmpImplementation+0x58>)
 80124d6:	6013      	str	r3, [r2, #0]
        return 1;
 80124d8:	2301      	movs	r3, #1
 80124da:	e000      	b.n	80124de <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80124dc:	2300      	movs	r3, #0
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	20000cb4 	.word	0x20000cb4
 80124ec:	2000091c 	.word	0x2000091c

080124f0 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80124f4:	4b07      	ldr	r3, [pc, #28]	; (8012514 <PlatformSpecificLongJmpImplementation+0x24>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	3b01      	subs	r3, #1
 80124fa:	4a06      	ldr	r2, [pc, #24]	; (8012514 <PlatformSpecificLongJmpImplementation+0x24>)
 80124fc:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80124fe:	4b05      	ldr	r3, [pc, #20]	; (8012514 <PlatformSpecificLongJmpImplementation+0x24>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	225c      	movs	r2, #92	; 0x5c
 8012504:	fb02 f303 	mul.w	r3, r2, r3
 8012508:	4a03      	ldr	r2, [pc, #12]	; (8012518 <PlatformSpecificLongJmpImplementation+0x28>)
 801250a:	4413      	add	r3, r2
 801250c:	2101      	movs	r1, #1
 801250e:	4618      	mov	r0, r3
 8012510:	f7ed fe8c 	bl	800022c <longjmp>
 8012514:	20000cb4 	.word	0x20000cb4
 8012518:	2000091c 	.word	0x2000091c

0801251c <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 801251c:	b480      	push	{r7}
 801251e:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8012520:	2300      	movs	r3, #0
#endif
}
 8012522:	4618      	mov	r0, r3
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b084      	sub	sp, #16
 8012530:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8012532:	2000      	movs	r0, #0
 8012534:	f00e ec1c 	blx	8020d70 <__time_veneer>
 8012538:	4602      	mov	r2, r0
 801253a:	460b      	mov	r3, r1
 801253c:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8012540:	463b      	mov	r3, r7
 8012542:	4618      	mov	r0, r3
 8012544:	f00b fb74 	bl	801dc30 <localtime>
 8012548:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	4a04      	ldr	r2, [pc, #16]	; (8012560 <TimeStringImplementation+0x34>)
 801254e:	2150      	movs	r1, #80	; 0x50
 8012550:	4804      	ldr	r0, [pc, #16]	; (8012564 <TimeStringImplementation+0x38>)
 8012552:	f00c fc55 	bl	801ee00 <strftime>
    return dateTime;
 8012556:	4b03      	ldr	r3, [pc, #12]	; (8012564 <TimeStringImplementation+0x38>)
}
 8012558:	4618      	mov	r0, r3
 801255a:	3710      	adds	r7, #16
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	080224b0 	.word	0x080224b0
 8012564:	20000cb8 	.word	0x20000cb8

08012568 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8012572:	6839      	ldr	r1, [r7, #0]
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f00b f991 	bl	801d89c <fopen>
 801257a:	4603      	mov	r3, r0
#endif
}
 801257c:	4618      	mov	r0, r3
 801257e:	3708      	adds	r7, #8
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f00b f9f1 	bl	801d978 <fputs>
}
 8012596:	bf00      	nop
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b082      	sub	sp, #8
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f00a ff72 	bl	801d490 <fclose>
}
 80125ac:	bf00      	nop
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	af00      	add	r7, sp, #0
  fflush(stdout);
 80125b8:	4b03      	ldr	r3, [pc, #12]	; (80125c8 <PlatformSpecificFlushImplementation+0x14>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	4618      	mov	r0, r3
 80125c0:	f00b f830 	bl	801d624 <fflush>
}
 80125c4:	bf00      	nop
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	20000104 	.word	0x20000104

080125cc <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80125d6:	ed97 0b00 	vldr	d0, [r7]
 80125da:	f7ff ff07 	bl	80123ec <_ZSt5isnand>
 80125de:	4603      	mov	r3, r0
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}

080125e8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80125f2:	ed97 0b00 	vldr	d0, [r7]
 80125f6:	f7ff fec9 	bl	801238c <_ZSt5isinfd>
 80125fa:	4603      	mov	r3, r0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}

08012604 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8012608:	2300      	movs	r3, #0
#endif

}
 801260a:	4618      	mov	r0, r3
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8012614:	b480      	push	{r7}
 8012616:	b083      	sub	sp, #12
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
}
 801261c:	bf00      	nop
 801261e:	370c      	adds	r7, #12
 8012620:	46bd      	mov	sp, r7
 8012622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012626:	4770      	bx	lr

08012628 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
}
 8012630:	bf00      	nop
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
}
 8012644:	bf00      	nop
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 801265c:	4a25      	ldr	r2, [pc, #148]	; (80126f4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	605a      	str	r2, [r3, #4]
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	609a      	str	r2, [r3, #8]
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	2200      	movs	r2, #0
 8012672:	731a      	strb	r2, [r3, #12]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2200      	movs	r2, #0
 8012678:	735a      	strb	r2, [r3, #13]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2200      	movs	r2, #0
 801267e:	739a      	strb	r2, [r3, #14]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	2200      	movs	r2, #0
 8012684:	73da      	strb	r2, [r3, #15]
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2200      	movs	r2, #0
 801268a:	741a      	strb	r2, [r3, #16]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	745a      	strb	r2, [r3, #17]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2200      	movs	r2, #0
 8012696:	749a      	strb	r2, [r3, #18]
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2200      	movs	r2, #0
 801269c:	74da      	strb	r2, [r3, #19]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	2200      	movs	r2, #0
 80126a2:	751a      	strb	r2, [r3, #20]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	755a      	strb	r2, [r3, #21]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2200      	movs	r2, #0
 80126ae:	759a      	strb	r2, [r3, #22]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2200      	movs	r2, #0
 80126b4:	75da      	strb	r2, [r3, #23]
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	761a      	strb	r2, [r3, #24]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2201      	movs	r2, #1
 80126c0:	61da      	str	r2, [r3, #28]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2200      	movs	r2, #0
 80126c6:	621a      	str	r2, [r3, #32]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2200      	movs	r2, #0
 80126cc:	625a      	str	r2, [r3, #36]	; 0x24
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2200      	movs	r2, #0
 80126d2:	629a      	str	r2, [r3, #40]	; 0x28
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2200      	movs	r2, #0
 80126d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	3330      	adds	r3, #48	; 0x30
 80126e0:	4905      	ldr	r1, [pc, #20]	; (80126f8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7f7 ff61 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
{
}
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	4618      	mov	r0, r3
 80126ec:	3710      	adds	r7, #16
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	080253c8 	.word	0x080253c8
 80126f8:	080224c4 	.word	0x080224c4

080126fc <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b082      	sub	sp, #8
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	4618      	mov	r0, r3
 8012708:	f7f8 fb07 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	4618      	mov	r0, r3
 8012710:	3708      	adds	r7, #8
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
	...

08012718 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8012718:	b590      	push	{r4, r7, lr}
 801271a:	b085      	sub	sp, #20
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	4a20      	ldr	r2, [pc, #128]	; (80127a4 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801272a:	2b00      	cmp	r3, #0
 801272c:	d015      	beq.n	801275a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012732:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012738:	4618      	mov	r0, r3
 801273a:	f00a fda2 	bl	801d282 <_ZNK10TestFilter7getNextEv>
 801273e:	4602      	mov	r2, r0
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8012744:	68fc      	ldr	r4, [r7, #12]
 8012746:	2c00      	cmp	r4, #0
 8012748:	d0ed      	beq.n	8012726 <_ZN20CommandLineArgumentsD1Ev+0xe>
 801274a:	4620      	mov	r0, r4
 801274c:	f7ff ffd6 	bl	80126fc <_ZN10TestFilterD1Ev>
 8012750:	2110      	movs	r1, #16
 8012752:	4620      	mov	r0, r4
 8012754:	f7f5 fb7a 	bl	8007e4c <_ZdlPvj>
    while(groupFilters_) {
 8012758:	e7e5      	b.n	8012726 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801275e:	2b00      	cmp	r3, #0
 8012760:	d015      	beq.n	801278e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012766:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801276c:	4618      	mov	r0, r3
 801276e:	f00a fd88 	bl	801d282 <_ZNK10TestFilter7getNextEv>
 8012772:	4602      	mov	r2, r0
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8012778:	68bc      	ldr	r4, [r7, #8]
 801277a:	2c00      	cmp	r4, #0
 801277c:	d0ed      	beq.n	801275a <_ZN20CommandLineArgumentsD1Ev+0x42>
 801277e:	4620      	mov	r0, r4
 8012780:	f7ff ffbc 	bl	80126fc <_ZN10TestFilterD1Ev>
 8012784:	2110      	movs	r1, #16
 8012786:	4620      	mov	r0, r4
 8012788:	f7f5 fb60 	bl	8007e4c <_ZdlPvj>
    while(nameFilters_) {
 801278c:	e7e5      	b.n	801275a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	3330      	adds	r3, #48	; 0x30
 8012792:	4618      	mov	r0, r3
 8012794:	f7f8 fac1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    }
}
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4618      	mov	r0, r3
 801279c:	3714      	adds	r7, #20
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd90      	pop	{r4, r7, pc}
 80127a2:	bf00      	nop
 80127a4:	080253c8 	.word	0x080253c8

080127a8 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
}
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7ff ffb1 	bl	8012718 <_ZN20CommandLineArgumentsD1Ev>
 80127b6:	2138      	movs	r1, #56	; 0x38
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f7f5 fb47 	bl	8007e4c <_ZdlPvj>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4618      	mov	r0, r3
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80127c8:	b5b0      	push	{r4, r5, r7, lr}
 80127ca:	b0be      	sub	sp, #248	; 0xf8
 80127cc:	af02      	add	r7, sp, #8
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
 80127d2:	2400      	movs	r4, #0
    bool correctParameters = true;
 80127d4:	2301      	movs	r3, #1
 80127d6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80127da:	2301      	movs	r3, #1
 80127dc:	613b      	str	r3, [r7, #16]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	685a      	ldr	r2, [r3, #4]
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	f340 83a4 	ble.w	8012f32 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	689a      	ldr	r2, [r3, #8]
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	009b      	lsls	r3, r3, #2
 80127f2:	4413      	add	r3, r2
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	f107 0308 	add.w	r3, r7, #8
 80127fa:	4611      	mov	r1, r2
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7f7 fed4 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8012802:	f107 0314 	add.w	r3, r7, #20
 8012806:	49c8      	ldr	r1, [pc, #800]	; (8012b28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8012808:	4618      	mov	r0, r3
 801280a:	f7f7 fece 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801280e:	f107 0214 	add.w	r2, r7, #20
 8012812:	f107 0308 	add.w	r3, r7, #8
 8012816:	4611      	mov	r1, r2
 8012818:	4618      	mov	r0, r3
 801281a:	f7f8 fa8a 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801281e:	4603      	mov	r3, r0
 8012820:	461d      	mov	r5, r3
 8012822:	f107 0314 	add.w	r3, r7, #20
 8012826:	4618      	mov	r0, r3
 8012828:	f7f8 fa77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801282c:	2d00      	cmp	r5, #0
 801282e:	d006      	beq.n	801283e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2201      	movs	r2, #1
 8012834:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8012836:	2300      	movs	r3, #0
 8012838:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801283c:	e366      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801283e:	f107 031c 	add.w	r3, r7, #28
 8012842:	49ba      	ldr	r1, [pc, #744]	; (8012b2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8012844:	4618      	mov	r0, r3
 8012846:	f7f7 feb0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801284a:	f107 021c 	add.w	r2, r7, #28
 801284e:	f107 0308 	add.w	r3, r7, #8
 8012852:	4611      	mov	r1, r2
 8012854:	4618      	mov	r0, r3
 8012856:	f7f8 fa6c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801285a:	4603      	mov	r3, r0
 801285c:	461d      	mov	r5, r3
 801285e:	f107 031c 	add.w	r3, r7, #28
 8012862:	4618      	mov	r0, r3
 8012864:	f7f8 fa59 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012868:	2d00      	cmp	r5, #0
 801286a:	d003      	beq.n	8012874 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2201      	movs	r2, #1
 8012870:	735a      	strb	r2, [r3, #13]
 8012872:	e34b      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8012874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012878:	49ad      	ldr	r1, [pc, #692]	; (8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801287a:	4618      	mov	r0, r3
 801287c:	f7f7 fe95 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012880:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012884:	f107 0308 	add.w	r3, r7, #8
 8012888:	4611      	mov	r1, r2
 801288a:	4618      	mov	r0, r3
 801288c:	f7f8 fa51 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8012890:	4603      	mov	r3, r0
 8012892:	461d      	mov	r5, r3
 8012894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012898:	4618      	mov	r0, r3
 801289a:	f7f8 fa3e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801289e:	2d00      	cmp	r5, #0
 80128a0:	d003      	beq.n	80128aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2201      	movs	r2, #1
 80128a6:	739a      	strb	r2, [r3, #14]
 80128a8:	e330      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 80128aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80128ae:	49a1      	ldr	r1, [pc, #644]	; (8012b34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7f7 fe7a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80128b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80128ba:	f107 0308 	add.w	r3, r7, #8
 80128be:	4611      	mov	r1, r2
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7f8 fa36 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80128c6:	4603      	mov	r3, r0
 80128c8:	461d      	mov	r5, r3
 80128ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7f8 fa23 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80128d4:	2d00      	cmp	r5, #0
 80128d6:	d003      	beq.n	80128e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2201      	movs	r2, #1
 80128dc:	73da      	strb	r2, [r3, #15]
 80128de:	e315      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80128e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80128e4:	4994      	ldr	r1, [pc, #592]	; (8012b38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f7 fe5f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80128ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80128f0:	f107 0308 	add.w	r3, r7, #8
 80128f4:	4611      	mov	r1, r2
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7f8 fa1b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80128fc:	4603      	mov	r3, r0
 80128fe:	461d      	mov	r5, r3
 8012900:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012904:	4618      	mov	r0, r3
 8012906:	f7f8 fa08 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801290a:	2d00      	cmp	r5, #0
 801290c:	d003      	beq.n	8012916 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2201      	movs	r2, #1
 8012912:	741a      	strb	r2, [r3, #16]
 8012914:	e2fa      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8012916:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801291a:	4988      	ldr	r1, [pc, #544]	; (8012b3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 801291c:	4618      	mov	r0, r3
 801291e:	f7f7 fe44 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012922:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012926:	f107 0308 	add.w	r3, r7, #8
 801292a:	4611      	mov	r1, r2
 801292c:	4618      	mov	r0, r3
 801292e:	f7f8 fa00 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8012932:	4603      	mov	r3, r0
 8012934:	461d      	mov	r5, r3
 8012936:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801293a:	4618      	mov	r0, r3
 801293c:	f7f8 f9ed 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012940:	2d00      	cmp	r5, #0
 8012942:	d003      	beq.n	801294c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2201      	movs	r2, #1
 8012948:	755a      	strb	r2, [r3, #21]
 801294a:	e2df      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 801294c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012950:	497b      	ldr	r1, [pc, #492]	; (8012b40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8012952:	4618      	mov	r0, r3
 8012954:	f7f7 fe29 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012958:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801295c:	f107 0308 	add.w	r3, r7, #8
 8012960:	4611      	mov	r1, r2
 8012962:	4618      	mov	r0, r3
 8012964:	f7f8 f9e5 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8012968:	4603      	mov	r3, r0
 801296a:	461d      	mov	r5, r3
 801296c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012970:	4618      	mov	r0, r3
 8012972:	f7f8 f9d2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012976:	2d00      	cmp	r5, #0
 8012978:	d003      	beq.n	8012982 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2201      	movs	r2, #1
 801297e:	745a      	strb	r2, [r3, #17]
 8012980:	e2c4      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8012982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012986:	496f      	ldr	r1, [pc, #444]	; (8012b44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8012988:	4618      	mov	r0, r3
 801298a:	f7f7 fe0e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801298e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012992:	f107 0308 	add.w	r3, r7, #8
 8012996:	4611      	mov	r1, r2
 8012998:	4618      	mov	r0, r3
 801299a:	f7f8 f9ca 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801299e:	4603      	mov	r3, r0
 80129a0:	461d      	mov	r5, r3
 80129a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7f8 f9b7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80129ac:	2d00      	cmp	r5, #0
 80129ae:	d003      	beq.n	80129b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2201      	movs	r2, #1
 80129b4:	749a      	strb	r2, [r3, #18]
 80129b6:	e2a9      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80129b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80129bc:	4962      	ldr	r1, [pc, #392]	; (8012b48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80129be:	4618      	mov	r0, r3
 80129c0:	f7f7 fdf3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80129c4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80129c8:	f107 0308 	add.w	r3, r7, #8
 80129cc:	4611      	mov	r1, r2
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7f8 f9af 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80129d4:	4603      	mov	r3, r0
 80129d6:	461d      	mov	r5, r3
 80129d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80129dc:	4618      	mov	r0, r3
 80129de:	f7f8 f99c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80129e2:	2d00      	cmp	r5, #0
 80129e4:	d003      	beq.n	80129ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	74da      	strb	r2, [r3, #19]
 80129ec:	e28e      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80129ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80129f2:	4956      	ldr	r1, [pc, #344]	; (8012b4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7f7 fdd8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80129fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80129fe:	f107 0308 	add.w	r3, r7, #8
 8012a02:	4611      	mov	r1, r2
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f8 f994 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	461d      	mov	r5, r3
 8012a0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7f8 f981 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012a18:	2d00      	cmp	r5, #0
 8012a1a:	d003      	beq.n	8012a24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2201      	movs	r2, #1
 8012a20:	751a      	strb	r2, [r3, #20]
 8012a22:	e273      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8012a24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012a28:	4949      	ldr	r1, [pc, #292]	; (8012b50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7f7 fdbd 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012a30:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012a34:	f107 0308 	add.w	r3, r7, #8
 8012a38:	4611      	mov	r1, r2
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f8 f979 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461d      	mov	r5, r3
 8012a44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7f8 f966 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012a4e:	2d00      	cmp	r5, #0
 8012a50:	d003      	beq.n	8012a5a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2201      	movs	r2, #1
 8012a56:	759a      	strb	r2, [r3, #22]
 8012a58:	e258      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8012a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012a5e:	493d      	ldr	r1, [pc, #244]	; (8012b54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7f7 fda2 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012a66:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012a6a:	f107 0308 	add.w	r3, r7, #8
 8012a6e:	4611      	mov	r1, r2
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7f7 fe5e 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012a76:	4603      	mov	r3, r0
 8012a78:	461d      	mov	r5, r3
 8012a7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7f8 f94b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012a84:	2d00      	cmp	r5, #0
 8012a86:	d009      	beq.n	8012a9c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6859      	ldr	r1, [r3, #4]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	689a      	ldr	r2, [r3, #8]
 8012a90:	f107 0310 	add.w	r3, r7, #16
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 fb33 	bl	8013100 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8012a9a:	e237      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8012a9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012aa0:	492d      	ldr	r1, [pc, #180]	; (8012b58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7f7 fd81 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012aa8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012aac:	f107 0308 	add.w	r3, r7, #8
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7f7 fe3d 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	461d      	mov	r5, r3
 8012abc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f8 f92a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012ac6:	2d00      	cmp	r5, #0
 8012ac8:	d009      	beq.n	8012ade <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6859      	ldr	r1, [r3, #4]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	689a      	ldr	r2, [r3, #8]
 8012ad2:	f107 0310 	add.w	r3, r7, #16
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 fc40 	bl	801335c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8012adc:	e216      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8012ade:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012ae2:	491e      	ldr	r1, [pc, #120]	; (8012b5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f7 fd60 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012aea:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8012aee:	f107 0308 	add.w	r3, r7, #8
 8012af2:	4611      	mov	r1, r2
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7f7 fe1c 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012afa:	4603      	mov	r3, r0
 8012afc:	461d      	mov	r5, r3
 8012afe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7f8 f909 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012b08:	2d00      	cmp	r5, #0
 8012b0a:	d029      	beq.n	8012b60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6859      	ldr	r1, [r3, #4]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	689a      	ldr	r2, [r3, #8]
 8012b14:	f107 0310 	add.w	r3, r7, #16
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 fc61 	bl	80133e0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012b24:	e1f2      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8012b26:	bf00      	nop
 8012b28:	080224c8 	.word	0x080224c8
 8012b2c:	080224cc 	.word	0x080224cc
 8012b30:	080224d0 	.word	0x080224d0
 8012b34:	080224d4 	.word	0x080224d4
 8012b38:	080224d8 	.word	0x080224d8
 8012b3c:	080224dc 	.word	0x080224dc
 8012b40:	080224e0 	.word	0x080224e0
 8012b44:	080224e4 	.word	0x080224e4
 8012b48:	080224e8 	.word	0x080224e8
 8012b4c:	080224ec 	.word	0x080224ec
 8012b50:	080224f0 	.word	0x080224f0
 8012b54:	080224f4 	.word	0x080224f4
 8012b58:	080224f8 	.word	0x080224f8
 8012b5c:	080224fc 	.word	0x080224fc
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8012b60:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012b64:	49b9      	ldr	r1, [pc, #740]	; (8012e4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7f7 fd1f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012b6c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012b70:	f107 0308 	add.w	r3, r7, #8
 8012b74:	4611      	mov	r1, r2
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7f7 fddb 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	461d      	mov	r5, r3
 8012b80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7f8 f8c8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012b8a:	2d00      	cmp	r5, #0
 8012b8c:	d009      	beq.n	8012ba2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6859      	ldr	r1, [r3, #4]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	689a      	ldr	r2, [r3, #8]
 8012b96:	f107 0310 	add.w	r3, r7, #16
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f000 fccc 	bl	8013538 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8012ba0:	e1b4      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8012ba2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012ba6:	49aa      	ldr	r1, [pc, #680]	; (8012e50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7f7 fcfe 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012bae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8012bb2:	f107 0308 	add.w	r3, r7, #8
 8012bb6:	4611      	mov	r1, r2
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7f7 fdba 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	461d      	mov	r5, r3
 8012bc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7f8 f8a7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012bcc:	2d00      	cmp	r5, #0
 8012bce:	d009      	beq.n	8012be4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	6859      	ldr	r1, [r3, #4]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	689a      	ldr	r2, [r3, #8]
 8012bd8:	f107 0310 	add.w	r3, r7, #16
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f000 fcf1 	bl	80135c4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8012be2:	e193      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8012be4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012be8:	499a      	ldr	r1, [pc, #616]	; (8012e54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7f7 fcdd 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012bf0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8012bf4:	f107 0308 	add.w	r3, r7, #8
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7f7 fd99 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012c00:	4603      	mov	r3, r0
 8012c02:	461d      	mov	r5, r3
 8012c04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7f8 f886 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012c0e:	2d00      	cmp	r5, #0
 8012c10:	d009      	beq.n	8012c26 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6859      	ldr	r1, [r3, #4]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	689a      	ldr	r2, [r3, #8]
 8012c1a:	f107 0310 	add.w	r3, r7, #16
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f000 fd16 	bl	8013650 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8012c24:	e172      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8012c26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012c2a:	498b      	ldr	r1, [pc, #556]	; (8012e58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7f7 fcbc 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012c32:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8012c36:	f107 0308 	add.w	r3, r7, #8
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7f7 fd78 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012c42:	4603      	mov	r3, r0
 8012c44:	461d      	mov	r5, r3
 8012c46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7f8 f865 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012c50:	2d00      	cmp	r5, #0
 8012c52:	d009      	beq.n	8012c68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6859      	ldr	r1, [r3, #4]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	689a      	ldr	r2, [r3, #8]
 8012c5c:	f107 0310 	add.w	r3, r7, #16
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f000 fd3d 	bl	80136e0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8012c66:	e151      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8012c68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012c6c:	497b      	ldr	r1, [pc, #492]	; (8012e5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7f7 fc9b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012c74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8012c78:	f107 0308 	add.w	r3, r7, #8
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7f7 fd57 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012c84:	4603      	mov	r3, r0
 8012c86:	461d      	mov	r5, r3
 8012c88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7f8 f844 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012c92:	2d00      	cmp	r5, #0
 8012c94:	d009      	beq.n	8012caa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6859      	ldr	r1, [r3, #4]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	689a      	ldr	r2, [r3, #8]
 8012c9e:	f107 0310 	add.w	r3, r7, #16
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 fd5e 	bl	8013764 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8012ca8:	e130      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8012caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012cae:	496c      	ldr	r1, [pc, #432]	; (8012e60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7f7 fc7a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012cb6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8012cba:	f107 0308 	add.w	r3, r7, #8
 8012cbe:	4611      	mov	r1, r2
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7f7 fd36 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	461d      	mov	r5, r3
 8012cca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f8 f823 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012cd4:	2d00      	cmp	r5, #0
 8012cd6:	d009      	beq.n	8012cec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6859      	ldr	r1, [r3, #4]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	689a      	ldr	r2, [r3, #8]
 8012ce0:	f107 0310 	add.w	r3, r7, #16
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f000 fd83 	bl	80137f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8012cea:	e10f      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8012cec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012cf0:	495c      	ldr	r1, [pc, #368]	; (8012e64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f7 fc59 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012cf8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8012cfc:	f107 0308 	add.w	r3, r7, #8
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7f7 fd15 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	461d      	mov	r5, r3
 8012d0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7f8 f802 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012d16:	2d00      	cmp	r5, #0
 8012d18:	d009      	beq.n	8012d2e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6859      	ldr	r1, [r3, #4]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	689a      	ldr	r2, [r3, #8]
 8012d22:	f107 0310 	add.w	r3, r7, #16
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fda8 	bl	801387c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8012d2c:	e0ee      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8012d2e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012d32:	494d      	ldr	r1, [pc, #308]	; (8012e68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f7 fc38 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012d3a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8012d3e:	f107 0308 	add.w	r3, r7, #8
 8012d42:	4611      	mov	r1, r2
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7f7 fcf4 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	461d      	mov	r5, r3
 8012d4e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7f7 ffe1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012d58:	2d00      	cmp	r5, #0
 8012d5a:	d00c      	beq.n	8012d76 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6859      	ldr	r1, [r3, #4]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	689a      	ldr	r2, [r3, #8]
 8012d64:	f107 0310 	add.w	r3, r7, #16
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 fa29 	bl	80131c0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012d74:	e0ca      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8012d76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012d7a:	493c      	ldr	r1, [pc, #240]	; (8012e6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7f7 fc14 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012d82:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8012d86:	f107 0308 	add.w	r3, r7, #8
 8012d8a:	4611      	mov	r1, r2
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7f7 fcd0 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012d92:	4603      	mov	r3, r0
 8012d94:	461d      	mov	r5, r3
 8012d96:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7f7 ffbd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012da0:	2d00      	cmp	r5, #0
 8012da2:	d00b      	beq.n	8012dbc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6859      	ldr	r1, [r3, #4]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	689a      	ldr	r2, [r3, #8]
 8012dac:	f107 0310 	add.w	r3, r7, #16
 8012db0:	482e      	ldr	r0, [pc, #184]	; (8012e6c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8012db2:	9000      	str	r0, [sp, #0]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 fda9 	bl	801390c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8012dba:	e0a7      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8012dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012dc0:	492b      	ldr	r1, [pc, #172]	; (8012e70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7f7 fbf1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012dc8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8012dcc:	f107 0308 	add.w	r3, r7, #8
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f7 fcad 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	461d      	mov	r5, r3
 8012ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7f7 ff9a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012de6:	2d00      	cmp	r5, #0
 8012de8:	d00b      	beq.n	8012e02 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6859      	ldr	r1, [r3, #4]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	689a      	ldr	r2, [r3, #8]
 8012df2:	f107 0310 	add.w	r3, r7, #16
 8012df6:	481e      	ldr	r0, [pc, #120]	; (8012e70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012df8:	9000      	str	r0, [sp, #0]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 fd86 	bl	801390c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8012e00:	e084      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8012e02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012e06:	491b      	ldr	r1, [pc, #108]	; (8012e74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7f7 fbce 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012e0e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8012e12:	f107 0308 	add.w	r3, r7, #8
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f7 fc8a 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	461d      	mov	r5, r3
 8012e22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f7 ff77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012e2c:	2d00      	cmp	r5, #0
 8012e2e:	d023      	beq.n	8012e78 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6859      	ldr	r1, [r3, #4]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	689a      	ldr	r2, [r3, #8]
 8012e38:	f107 0310 	add.w	r3, r7, #16
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f000 fe3b 	bl	8013ab8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8012e42:	4603      	mov	r3, r0
 8012e44:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012e48:	e060      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8012e4a:	bf00      	nop
 8012e4c:	08022500 	.word	0x08022500
 8012e50:	08022504 	.word	0x08022504
 8012e54:	08022508 	.word	0x08022508
 8012e58:	08022510 	.word	0x08022510
 8012e5c:	08022514 	.word	0x08022514
 8012e60:	08022518 	.word	0x08022518
 8012e64:	0802251c 	.word	0x0802251c
 8012e68:	08022524 	.word	0x08022524
 8012e6c:	08022528 	.word	0x08022528
 8012e70:	08022530 	.word	0x08022530
 8012e74:	08022540 	.word	0x08022540
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8012e78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012e7c:	4930      	ldr	r1, [pc, #192]	; (8012f40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7f7 fb93 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012e84:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8012e88:	f107 0308 	add.w	r3, r7, #8
 8012e8c:	4611      	mov	r1, r2
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7f7 fc4f 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012e94:	4603      	mov	r3, r0
 8012e96:	461d      	mov	r5, r3
 8012e98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7f7 ff3c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012ea2:	2d00      	cmp	r5, #0
 8012ea4:	d00e      	beq.n	8012ec4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	331c      	adds	r3, #28
 8012eac:	681d      	ldr	r5, [r3, #0]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6859      	ldr	r1, [r3, #4]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	689a      	ldr	r2, [r3, #8]
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	6838      	ldr	r0, [r7, #0]
 8012eba:	47a8      	blx	r5
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012ec2:	e023      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8012ec4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012ec8:	491e      	ldr	r1, [pc, #120]	; (8012f44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7f7 fb6d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8012ed0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8012ed4:	f107 0308 	add.w	r3, r7, #8
 8012ed8:	4611      	mov	r1, r2
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7f7 fc29 	bl	800a732 <_ZNK12SimpleString10startsWithERKS_>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	461d      	mov	r5, r3
 8012ee4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7f7 ff16 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012eee:	2d00      	cmp	r5, #0
 8012ef0:	d009      	beq.n	8012f06 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6859      	ldr	r1, [r3, #4]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	689a      	ldr	r2, [r3, #8]
 8012efa:	f107 0310 	add.w	r3, r7, #16
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 fd98 	bl	8013a34 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8012f04:	e002      	b.n	8012f0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8012f06:	2300      	movs	r3, #0
 8012f08:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8012f0c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d102      	bne.n	8012f1a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8012f14:	2400      	movs	r4, #0
 8012f16:	2500      	movs	r5, #0
 8012f18:	e000      	b.n	8012f1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8012f1a:	2501      	movs	r5, #1
 8012f1c:	f107 0308 	add.w	r3, r7, #8
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7f7 fefa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8012f26:	2d01      	cmp	r5, #1
 8012f28:	d104      	bne.n	8012f34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	613b      	str	r3, [r7, #16]
 8012f30:	e455      	b.n	80127de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8012f32:	2401      	movs	r4, #1
 8012f34:	4623      	mov	r3, r4
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	37f0      	adds	r7, #240	; 0xf0
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	080224d8 	.word	0x080224d8
 8012f44:	08022544 	.word	0x08022544

08012f48 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8012f50:	4b03      	ldr	r3, [pc, #12]	; (8012f60 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	370c      	adds	r7, #12
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	08022548 	.word	0x08022548

08012f64 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8012f64:	b480      	push	{r7}
 8012f66:	b083      	sub	sp, #12
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8012f6c:	4b03      	ldr	r3, [pc, #12]	; (8012f7c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	370c      	adds	r7, #12
 8012f72:	46bd      	mov	sp, r7
 8012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop
 8012f7c:	08022678 	.word	0x08022678

08012f80 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	7b1b      	ldrb	r3, [r3, #12]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr

08012f98 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
    return verbose_;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	7b5b      	ldrb	r3, [r3, #13]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	370c      	adds	r7, #12
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr

08012fb0 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	7b9b      	ldrb	r3, [r3, #14]
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8012fc8:	b480      	push	{r7}
 8012fca:	b083      	sub	sp, #12
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
    return color_;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	7bdb      	ldrb	r3, [r3, #15]
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	370c      	adds	r7, #12
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b083      	sub	sp, #12
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	7c5b      	ldrb	r3, [r3, #17]
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	370c      	adds	r7, #12
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr

08012ff8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b083      	sub	sp, #12
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	7c9b      	ldrb	r3, [r3, #18]
}
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	7cdb      	ldrb	r3, [r3, #19]
}
 801301c:	4618      	mov	r0, r3
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr

08013028 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	7d1b      	ldrb	r3, [r3, #20]
}
 8013034:	4618      	mov	r0, r3
 8013036:	370c      	adds	r7, #12
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	7c1b      	ldrb	r3, [r3, #16]
}
 801304c:	4618      	mov	r0, r3
 801304e:	370c      	adds	r7, #12
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr

08013058 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8013058:	b480      	push	{r7}
 801305a:	b083      	sub	sp, #12
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
    return repeat_;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	69db      	ldr	r3, [r3, #28]
}
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    return reversing_;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	7d5b      	ldrb	r3, [r3, #21]
}
 801307c:	4618      	mov	r0, r3
 801307e:	370c      	adds	r7, #12
 8013080:	46bd      	mov	sp, r7
 8013082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013086:	4770      	bx	lr

08013088 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	7d9b      	ldrb	r3, [r3, #22]
}
 8013094:	4618      	mov	r0, r3
 8013096:	370c      	adds	r7, #12
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr

080130a0 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80130a0:	b480      	push	{r7}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	7ddb      	ldrb	r3, [r3, #23]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6a1b      	ldr	r3, [r3, #32]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr

080130d0 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80130dc:	4618      	mov	r0, r3
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	370c      	adds	r7, #12
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr

08013100 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
 801310c:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	2200      	movs	r2, #0
 8013112:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	4413      	add	r3, r2
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	f107 0310 	add.w	r3, r7, #16
 8013124:	4611      	mov	r1, r2
 8013126:	4618      	mov	r0, r3
 8013128:	f7f7 fa3f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 801312c:	f107 0310 	add.w	r3, r7, #16
 8013130:	4618      	mov	r0, r3
 8013132:	f7f7 fdd1 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 8013136:	4603      	mov	r3, r0
 8013138:	2b02      	cmp	r3, #2
 801313a:	bf8c      	ite	hi
 801313c:	2301      	movhi	r3, #1
 801313e:	2300      	movls	r3, #0
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d00e      	beq.n	8013164 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	009b      	lsls	r3, r3, #2
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	4413      	add	r3, r2
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	3302      	adds	r3, #2
 8013154:	4618      	mov	r0, r3
 8013156:	f7f7 f824 	bl	800a1a2 <_ZN12SimpleString4AtoIEPKc>
 801315a:	4603      	mov	r3, r0
 801315c:	461a      	mov	r2, r3
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	61da      	str	r2, [r3, #28]
 8013162:	e01c      	b.n	801319e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	3301      	adds	r3, #1
 801316a:	68ba      	ldr	r2, [r7, #8]
 801316c:	429a      	cmp	r2, r3
 801316e:	dd16      	ble.n	801319e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	3301      	adds	r3, #1
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	4413      	add	r3, r2
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4618      	mov	r0, r3
 8013180:	f7f7 f80f 	bl	800a1a2 <_ZN12SimpleString4AtoIEPKc>
 8013184:	4603      	mov	r3, r0
 8013186:	461a      	mov	r2, r3
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	69db      	ldr	r3, [r3, #28]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d004      	beq.n	801319e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	1c5a      	adds	r2, r3, #1
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	69db      	ldr	r3, [r3, #28]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d102      	bne.n	80131ac <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2202      	movs	r2, #2
 80131aa:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80131ac:	f107 0310 	add.w	r3, r7, #16
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f7 fdb2 	bl	800ad1a <_ZN12SimpleStringD1Ev>

}
 80131b6:	bf00      	nop
 80131b8:	3718      	adds	r7, #24
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}
	...

080131c0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80131c0:	b590      	push	{r4, r7, lr}
 80131c2:	b089      	sub	sp, #36	; 0x24
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
 80131cc:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2201      	movs	r2, #1
 80131d2:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80131d4:	4b34      	ldr	r3, [pc, #208]	; (80132a8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	4798      	blx	r3
 80131da:	4603      	mov	r3, r0
 80131dc:	461a      	mov	r2, r3
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	6a1b      	ldr	r3, [r3, #32]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d104      	bne.n	80131f4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	6a1b      	ldr	r3, [r3, #32]
 80131ee:	1c5a      	adds	r2, r3, #1
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	4413      	add	r3, r2
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	f107 0314 	add.w	r3, r7, #20
 8013204:	4611      	mov	r1, r2
 8013206:	4618      	mov	r0, r3
 8013208:	f7f7 f9cf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 801320c:	f107 0314 	add.w	r3, r7, #20
 8013210:	4618      	mov	r0, r3
 8013212:	f7f7 fd61 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 8013216:	4603      	mov	r3, r0
 8013218:	2b02      	cmp	r3, #2
 801321a:	bf8c      	ite	hi
 801321c:	2301      	movhi	r3, #1
 801321e:	2300      	movls	r3, #0
 8013220:	b2db      	uxtb	r3, r3
 8013222:	2b00      	cmp	r3, #0
 8013224:	d010      	beq.n	8013248 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2201      	movs	r2, #1
 801322a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	009b      	lsls	r3, r3, #2
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	4413      	add	r3, r2
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	3302      	adds	r3, #2
 801323a:	4618      	mov	r0, r3
 801323c:	f7f6 ff78 	bl	800a130 <_ZN12SimpleString4AtoUEPKc>
 8013240:	4602      	mov	r2, r0
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	621a      	str	r2, [r3, #32]
 8013246:	e01e      	b.n	8013286 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	3301      	adds	r3, #1
 801324e:	68ba      	ldr	r2, [r7, #8]
 8013250:	429a      	cmp	r2, r3
 8013252:	dd18      	ble.n	8013286 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	3301      	adds	r3, #1
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	4413      	add	r3, r2
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	4618      	mov	r0, r3
 8013264:	f7f6 ff64 	bl	800a130 <_ZN12SimpleString4AtoUEPKc>
 8013268:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d00a      	beq.n	8013286 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2201      	movs	r2, #1
 8013274:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	69fa      	ldr	r2, [r7, #28]
 801327a:	621a      	str	r2, [r3, #32]
            i++;
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	1c5a      	adds	r2, r3, #1
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6a1b      	ldr	r3, [r3, #32]
 801328a:	2b00      	cmp	r3, #0
 801328c:	bf14      	ite	ne
 801328e:	2301      	movne	r3, #1
 8013290:	2300      	moveq	r3, #0
 8013292:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8013294:	f107 0314 	add.w	r3, r7, #20
 8013298:	4618      	mov	r0, r3
 801329a:	f7f7 fd3e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 801329e:	4623      	mov	r3, r4
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3724      	adds	r7, #36	; 0x24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd90      	pop	{r4, r7, pc}
 80132a8:	200000a4 	.word	0x200000a4

080132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b088      	sub	sp, #32
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	60f8      	str	r0, [r7, #12]
 80132b4:	60b9      	str	r1, [r7, #8]
 80132b6:	607a      	str	r2, [r7, #4]
 80132b8:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80132ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132bc:	f7f7 fd0c 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 80132c0:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80132c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	009b      	lsls	r3, r3, #2
 80132c8:	683a      	ldr	r2, [r7, #0]
 80132ca:	4413      	add	r3, r2
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	f107 0314 	add.w	r3, r7, #20
 80132d2:	4611      	mov	r1, r2
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7f7 f968 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80132da:	f107 0314 	add.w	r3, r7, #20
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f7 fcfa 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 80132e4:	4602      	mov	r2, r0
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	4293      	cmp	r3, r2
 80132ea:	bf34      	ite	cc
 80132ec:	2301      	movcc	r3, #1
 80132ee:	2300      	movcs	r3, #0
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d00c      	beq.n	8013310 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80132f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	009b      	lsls	r3, r3, #2
 80132fc:	683a      	ldr	r2, [r7, #0]
 80132fe:	4413      	add	r3, r2
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	4413      	add	r3, r2
 8013306:	4619      	mov	r1, r3
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	f7f7 f94e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801330e:	e019      	b.n	8013344 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8013310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	3301      	adds	r3, #1
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	429a      	cmp	r2, r3
 801331a:	dd0f      	ble.n	801333c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 801331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	1c5a      	adds	r2, r3, #1
 8013322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013324:	601a      	str	r2, [r3, #0]
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	683a      	ldr	r2, [r7, #0]
 801332e:	4413      	add	r3, r2
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	4619      	mov	r1, r3
 8013334:	68f8      	ldr	r0, [r7, #12]
 8013336:	f7f7 f938 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801333a:	e003      	b.n	8013344 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 801333c:	4906      	ldr	r1, [pc, #24]	; (8013358 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 801333e:	68f8      	ldr	r0, [r7, #12]
 8013340:	f7f7 f933 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8013344:	f107 0314 	add.w	r3, r7, #20
 8013348:	4618      	mov	r0, r3
 801334a:	f7f7 fce6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801334e:	68f8      	ldr	r0, [r7, #12]
 8013350:	3720      	adds	r7, #32
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	080224c4 	.word	0x080224c4

0801335c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 801335c:	b5b0      	push	{r4, r5, r7, lr}
 801335e:	b08c      	sub	sp, #48	; 0x30
 8013360:	af02      	add	r7, sp, #8
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	607a      	str	r2, [r7, #4]
 8013368:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801336a:	f107 031c 	add.w	r3, r7, #28
 801336e:	491a      	ldr	r1, [pc, #104]	; (80133d8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8013370:	4618      	mov	r0, r3
 8013372:	f7f7 f91a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013376:	f107 0014 	add.w	r0, r7, #20
 801337a:	f107 031c 	add.w	r3, r7, #28
 801337e:	9301      	str	r3, [sp, #4]
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	9300      	str	r3, [sp, #0]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	68ba      	ldr	r2, [r7, #8]
 8013388:	68f9      	ldr	r1, [r7, #12]
 801338a:	f7ff ff8f 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801338e:	f107 0514 	add.w	r5, r7, #20
 8013392:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013396:	4911      	ldr	r1, [pc, #68]	; (80133dc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8013398:	2010      	movs	r0, #16
 801339a:	f7f4 fd43 	bl	8007e24 <_ZnwjPKci>
 801339e:	4604      	mov	r4, r0
 80133a0:	4629      	mov	r1, r5
 80133a2:	4620      	mov	r0, r4
 80133a4:	f009 ff3e 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 80133a8:	627c      	str	r4, [r7, #36]	; 0x24
 80133aa:	f107 0314 	add.w	r3, r7, #20
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7f7 fcb3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80133b4:	f107 031c 	add.w	r3, r7, #28
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f7 fcae 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c2:	4619      	mov	r1, r3
 80133c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133c6:	f009 ff4d 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80133ca:	4602      	mov	r2, r0
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80133d0:	bf00      	nop
 80133d2:	3728      	adds	r7, #40	; 0x28
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bdb0      	pop	{r4, r5, r7, pc}
 80133d8:	080224f8 	.word	0x080224f8
 80133dc:	08022e8c 	.word	0x08022e8c

080133e0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80133e0:	b5b0      	push	{r4, r5, r7, lr}
 80133e2:	b092      	sub	sp, #72	; 0x48
 80133e4:	af02      	add	r7, sp, #8
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80133ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133f2:	494e      	ldr	r1, [pc, #312]	; (801352c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7f7 f8d8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80133fa:	f107 0020 	add.w	r0, r7, #32
 80133fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013402:	9301      	str	r3, [sp, #4]
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	9300      	str	r3, [sp, #0]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	68f9      	ldr	r1, [r7, #12]
 801340e:	f7ff ff4d 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013416:	4618      	mov	r0, r3
 8013418:	f7f7 fc7f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 801341c:	f107 0310 	add.w	r3, r7, #16
 8013420:	4618      	mov	r0, r3
 8013422:	f7f8 fb8f 	bl	800bb44 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8013426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801342a:	4941      	ldr	r1, [pc, #260]	; (8013530 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 801342c:	4618      	mov	r0, r3
 801342e:	f7f7 f8bc 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013432:	f107 0210 	add.w	r2, r7, #16
 8013436:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801343a:	f107 0320 	add.w	r3, r7, #32
 801343e:	4618      	mov	r0, r3
 8013440:	f7f7 fa1f 	bl	800a882 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8013444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013448:	4618      	mov	r0, r3
 801344a:	f7f7 fc66 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 801344e:	f107 0310 	add.w	r3, r7, #16
 8013452:	4618      	mov	r0, r3
 8013454:	f7f8 fc1b 	bl	800bc8e <_ZNK22SimpleStringCollection4sizeEv>
 8013458:	4603      	mov	r3, r0
 801345a:	2b02      	cmp	r3, #2
 801345c:	bf14      	ite	ne
 801345e:	2301      	movne	r3, #1
 8013460:	2300      	moveq	r3, #0
 8013462:	b2db      	uxtb	r3, r3
 8013464:	2b00      	cmp	r3, #0
 8013466:	d001      	beq.n	801346c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8013468:	2400      	movs	r4, #0
 801346a:	e04f      	b.n	801350c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 801346c:	f107 0310 	add.w	r3, r7, #16
 8013470:	2100      	movs	r1, #0
 8013472:	4618      	mov	r0, r3
 8013474:	f7f8 fc18 	bl	800bca8 <_ZN22SimpleStringCollectionixEj>
 8013478:	4604      	mov	r4, r0
 801347a:	f107 0310 	add.w	r3, r7, #16
 801347e:	2100      	movs	r1, #0
 8013480:	4618      	mov	r0, r3
 8013482:	f7f8 fc11 	bl	800bca8 <_ZN22SimpleStringCollectionixEj>
 8013486:	4603      	mov	r3, r0
 8013488:	4618      	mov	r0, r3
 801348a:	f7f7 fc25 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 801348e:	4603      	mov	r3, r0
 8013490:	3b01      	subs	r3, #1
 8013492:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8013496:	2200      	movs	r2, #0
 8013498:	4621      	mov	r1, r4
 801349a:	f7f7 fd47 	bl	800af2c <_ZNK12SimpleString9subStringEjj>
 801349e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80134a2:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80134a6:	4923      	ldr	r1, [pc, #140]	; (8013534 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80134a8:	2010      	movs	r0, #16
 80134aa:	f7f4 fcbb 	bl	8007e24 <_ZnwjPKci>
 80134ae:	4604      	mov	r4, r0
 80134b0:	4629      	mov	r1, r5
 80134b2:	4620      	mov	r0, r4
 80134b4:	f009 feb6 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134bc:	4619      	mov	r1, r3
 80134be:	4620      	mov	r0, r4
 80134c0:	f009 fed0 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80134c4:	4602      	mov	r2, r0
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	625a      	str	r2, [r3, #36]	; 0x24
 80134ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7f7 fc23 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80134d4:	f107 0310 	add.w	r3, r7, #16
 80134d8:	2101      	movs	r1, #1
 80134da:	4618      	mov	r0, r3
 80134dc:	f7f8 fbe4 	bl	800bca8 <_ZN22SimpleStringCollectionixEj>
 80134e0:	4605      	mov	r5, r0
 80134e2:	f240 121f 	movw	r2, #287	; 0x11f
 80134e6:	4913      	ldr	r1, [pc, #76]	; (8013534 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80134e8:	2010      	movs	r0, #16
 80134ea:	f7f4 fc9b 	bl	8007e24 <_ZnwjPKci>
 80134ee:	4604      	mov	r4, r0
 80134f0:	4629      	mov	r1, r5
 80134f2:	4620      	mov	r0, r4
 80134f4:	f009 fe96 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134fc:	4619      	mov	r1, r3
 80134fe:	4620      	mov	r0, r4
 8013500:	f009 feb0 	bl	801d264 <_ZN10TestFilter3addEPS_>
 8013504:	4602      	mov	r2, r0
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 801350a:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 801350c:	f107 0310 	add.w	r3, r7, #16
 8013510:	4618      	mov	r0, r3
 8013512:	f7f8 fb8b 	bl	800bc2c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013516:	f107 0320 	add.w	r3, r7, #32
 801351a:	4618      	mov	r0, r3
 801351c:	f7f7 fbfd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013520:	4623      	mov	r3, r4
}
 8013522:	4618      	mov	r0, r3
 8013524:	3740      	adds	r7, #64	; 0x40
 8013526:	46bd      	mov	sp, r7
 8013528:	bdb0      	pop	{r4, r5, r7, pc}
 801352a:	bf00      	nop
 801352c:	080224fc 	.word	0x080224fc
 8013530:	08022eac 	.word	0x08022eac
 8013534:	08022e8c 	.word	0x08022e8c

08013538 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013538:	b5b0      	push	{r4, r5, r7, lr}
 801353a:	b08c      	sub	sp, #48	; 0x30
 801353c:	af02      	add	r7, sp, #8
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	607a      	str	r2, [r7, #4]
 8013544:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8013546:	f107 031c 	add.w	r3, r7, #28
 801354a:	491c      	ldr	r1, [pc, #112]	; (80135bc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 801354c:	4618      	mov	r0, r3
 801354e:	f7f7 f82c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013552:	f107 0014 	add.w	r0, r7, #20
 8013556:	f107 031c 	add.w	r3, r7, #28
 801355a:	9301      	str	r3, [sp, #4]
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	68f9      	ldr	r1, [r7, #12]
 8013566:	f7ff fea1 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801356a:	f107 0514 	add.w	r5, r7, #20
 801356e:	f240 1225 	movw	r2, #293	; 0x125
 8013572:	4913      	ldr	r1, [pc, #76]	; (80135c0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8013574:	2010      	movs	r0, #16
 8013576:	f7f4 fc55 	bl	8007e24 <_ZnwjPKci>
 801357a:	4604      	mov	r4, r0
 801357c:	4629      	mov	r1, r5
 801357e:	4620      	mov	r0, r4
 8013580:	f009 fe50 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 8013584:	627c      	str	r4, [r7, #36]	; 0x24
 8013586:	f107 0314 	add.w	r3, r7, #20
 801358a:	4618      	mov	r0, r3
 801358c:	f7f7 fbc5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013590:	f107 031c 	add.w	r3, r7, #28
 8013594:	4618      	mov	r0, r3
 8013596:	f7f7 fbc0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801359a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801359c:	f009 fe7d 	bl	801d29a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a4:	4619      	mov	r1, r3
 80135a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135a8:	f009 fe5c 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80135ac:	4602      	mov	r2, r0
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80135b2:	bf00      	nop
 80135b4:	3728      	adds	r7, #40	; 0x28
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bdb0      	pop	{r4, r5, r7, pc}
 80135ba:	bf00      	nop
 80135bc:	08022500 	.word	0x08022500
 80135c0:	08022e8c 	.word	0x08022e8c

080135c4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80135c4:	b5b0      	push	{r4, r5, r7, lr}
 80135c6:	b08c      	sub	sp, #48	; 0x30
 80135c8:	af02      	add	r7, sp, #8
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80135d2:	f107 031c 	add.w	r3, r7, #28
 80135d6:	491c      	ldr	r1, [pc, #112]	; (8013648 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80135d8:	4618      	mov	r0, r3
 80135da:	f7f6 ffe6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80135de:	f107 0014 	add.w	r0, r7, #20
 80135e2:	f107 031c 	add.w	r3, r7, #28
 80135e6:	9301      	str	r3, [sp, #4]
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	68ba      	ldr	r2, [r7, #8]
 80135f0:	68f9      	ldr	r1, [r7, #12]
 80135f2:	f7ff fe5b 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80135f6:	f107 0514 	add.w	r5, r7, #20
 80135fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80135fe:	4913      	ldr	r1, [pc, #76]	; (801364c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8013600:	2010      	movs	r0, #16
 8013602:	f7f4 fc0f 	bl	8007e24 <_ZnwjPKci>
 8013606:	4604      	mov	r4, r0
 8013608:	4629      	mov	r1, r5
 801360a:	4620      	mov	r0, r4
 801360c:	f009 fe0a 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 8013610:	627c      	str	r4, [r7, #36]	; 0x24
 8013612:	f107 0314 	add.w	r3, r7, #20
 8013616:	4618      	mov	r0, r3
 8013618:	f7f7 fb7f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801361c:	f107 031c 	add.w	r3, r7, #28
 8013620:	4618      	mov	r0, r3
 8013622:	f7f7 fb7a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8013626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013628:	f009 fe44 	bl	801d2b4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013630:	4619      	mov	r1, r3
 8013632:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013634:	f009 fe16 	bl	801d264 <_ZN10TestFilter3addEPS_>
 8013638:	4602      	mov	r2, r0
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801363e:	bf00      	nop
 8013640:	3728      	adds	r7, #40	; 0x28
 8013642:	46bd      	mov	sp, r7
 8013644:	bdb0      	pop	{r4, r5, r7, pc}
 8013646:	bf00      	nop
 8013648:	08022504 	.word	0x08022504
 801364c:	08022e8c 	.word	0x08022e8c

08013650 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013650:	b5b0      	push	{r4, r5, r7, lr}
 8013652:	b08c      	sub	sp, #48	; 0x30
 8013654:	af02      	add	r7, sp, #8
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
 801365c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801365e:	f107 031c 	add.w	r3, r7, #28
 8013662:	491d      	ldr	r1, [pc, #116]	; (80136d8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8013664:	4618      	mov	r0, r3
 8013666:	f7f6 ffa0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801366a:	f107 0014 	add.w	r0, r7, #20
 801366e:	f107 031c 	add.w	r3, r7, #28
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	68ba      	ldr	r2, [r7, #8]
 801367c:	68f9      	ldr	r1, [r7, #12]
 801367e:	f7ff fe15 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013682:	f107 0514 	add.w	r5, r7, #20
 8013686:	f240 1233 	movw	r2, #307	; 0x133
 801368a:	4914      	ldr	r1, [pc, #80]	; (80136dc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 801368c:	2010      	movs	r0, #16
 801368e:	f7f4 fbc9 	bl	8007e24 <_ZnwjPKci>
 8013692:	4604      	mov	r4, r0
 8013694:	4629      	mov	r1, r5
 8013696:	4620      	mov	r0, r4
 8013698:	f009 fdc4 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 801369c:	627c      	str	r4, [r7, #36]	; 0x24
 801369e:	f107 0314 	add.w	r3, r7, #20
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7f7 fb39 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80136a8:	f107 031c 	add.w	r3, r7, #28
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7f7 fb34 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80136b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136b4:	f009 fdf1 	bl	801d29a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80136b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136ba:	f009 fdfb 	bl	801d2b4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c2:	4619      	mov	r1, r3
 80136c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136c6:	f009 fdcd 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80136ca:	4602      	mov	r2, r0
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80136d0:	bf00      	nop
 80136d2:	3728      	adds	r7, #40	; 0x28
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bdb0      	pop	{r4, r5, r7, pc}
 80136d8:	08022508 	.word	0x08022508
 80136dc:	08022e8c 	.word	0x08022e8c

080136e0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80136e0:	b5b0      	push	{r4, r5, r7, lr}
 80136e2:	b08c      	sub	sp, #48	; 0x30
 80136e4:	af02      	add	r7, sp, #8
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	607a      	str	r2, [r7, #4]
 80136ec:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80136ee:	f107 031c 	add.w	r3, r7, #28
 80136f2:	491a      	ldr	r1, [pc, #104]	; (801375c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7f6 ff58 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80136fa:	f107 0014 	add.w	r0, r7, #20
 80136fe:	f107 031c 	add.w	r3, r7, #28
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	68ba      	ldr	r2, [r7, #8]
 801370c:	68f9      	ldr	r1, [r7, #12]
 801370e:	f7ff fdcd 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013712:	f107 0514 	add.w	r5, r7, #20
 8013716:	f240 123b 	movw	r2, #315	; 0x13b
 801371a:	4911      	ldr	r1, [pc, #68]	; (8013760 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 801371c:	2010      	movs	r0, #16
 801371e:	f7f4 fb81 	bl	8007e24 <_ZnwjPKci>
 8013722:	4604      	mov	r4, r0
 8013724:	4629      	mov	r1, r5
 8013726:	4620      	mov	r0, r4
 8013728:	f009 fd7c 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 801372c:	627c      	str	r4, [r7, #36]	; 0x24
 801372e:	f107 0314 	add.w	r3, r7, #20
 8013732:	4618      	mov	r0, r3
 8013734:	f7f7 faf1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013738:	f107 031c 	add.w	r3, r7, #28
 801373c:	4618      	mov	r0, r3
 801373e:	f7f7 faec 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013746:	4619      	mov	r1, r3
 8013748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801374a:	f009 fd8b 	bl	801d264 <_ZN10TestFilter3addEPS_>
 801374e:	4602      	mov	r2, r0
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013754:	bf00      	nop
 8013756:	3728      	adds	r7, #40	; 0x28
 8013758:	46bd      	mov	sp, r7
 801375a:	bdb0      	pop	{r4, r5, r7, pc}
 801375c:	08022510 	.word	0x08022510
 8013760:	08022e8c 	.word	0x08022e8c

08013764 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013764:	b5b0      	push	{r4, r5, r7, lr}
 8013766:	b08c      	sub	sp, #48	; 0x30
 8013768:	af02      	add	r7, sp, #8
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
 8013770:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8013772:	f107 031c 	add.w	r3, r7, #28
 8013776:	491c      	ldr	r1, [pc, #112]	; (80137e8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8013778:	4618      	mov	r0, r3
 801377a:	f7f6 ff16 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801377e:	f107 0014 	add.w	r0, r7, #20
 8013782:	f107 031c 	add.w	r3, r7, #28
 8013786:	9301      	str	r3, [sp, #4]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	68f9      	ldr	r1, [r7, #12]
 8013792:	f7ff fd8b 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013796:	f107 0514 	add.w	r5, r7, #20
 801379a:	f240 1241 	movw	r2, #321	; 0x141
 801379e:	4913      	ldr	r1, [pc, #76]	; (80137ec <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80137a0:	2010      	movs	r0, #16
 80137a2:	f7f4 fb3f 	bl	8007e24 <_ZnwjPKci>
 80137a6:	4604      	mov	r4, r0
 80137a8:	4629      	mov	r1, r5
 80137aa:	4620      	mov	r0, r4
 80137ac:	f009 fd3a 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 80137b0:	627c      	str	r4, [r7, #36]	; 0x24
 80137b2:	f107 0314 	add.w	r3, r7, #20
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7f7 faaf 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80137bc:	f107 031c 	add.w	r3, r7, #28
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7f7 faaa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80137c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137c8:	f009 fd67 	bl	801d29a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d0:	4619      	mov	r1, r3
 80137d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137d4:	f009 fd46 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80137d8:	4602      	mov	r2, r0
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80137de:	bf00      	nop
 80137e0:	3728      	adds	r7, #40	; 0x28
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bdb0      	pop	{r4, r5, r7, pc}
 80137e6:	bf00      	nop
 80137e8:	08022514 	.word	0x08022514
 80137ec:	08022e8c 	.word	0x08022e8c

080137f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80137f0:	b5b0      	push	{r4, r5, r7, lr}
 80137f2:	b08c      	sub	sp, #48	; 0x30
 80137f4:	af02      	add	r7, sp, #8
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
 80137fc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80137fe:	f107 031c 	add.w	r3, r7, #28
 8013802:	491c      	ldr	r1, [pc, #112]	; (8013874 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8013804:	4618      	mov	r0, r3
 8013806:	f7f6 fed0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801380a:	f107 0014 	add.w	r0, r7, #20
 801380e:	f107 031c 	add.w	r3, r7, #28
 8013812:	9301      	str	r3, [sp, #4]
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	9300      	str	r3, [sp, #0]
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	68ba      	ldr	r2, [r7, #8]
 801381c:	68f9      	ldr	r1, [r7, #12]
 801381e:	f7ff fd45 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013822:	f107 0514 	add.w	r5, r7, #20
 8013826:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801382a:	4913      	ldr	r1, [pc, #76]	; (8013878 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801382c:	2010      	movs	r0, #16
 801382e:	f7f4 faf9 	bl	8007e24 <_ZnwjPKci>
 8013832:	4604      	mov	r4, r0
 8013834:	4629      	mov	r1, r5
 8013836:	4620      	mov	r0, r4
 8013838:	f009 fcf4 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 801383c:	627c      	str	r4, [r7, #36]	; 0x24
 801383e:	f107 0314 	add.w	r3, r7, #20
 8013842:	4618      	mov	r0, r3
 8013844:	f7f7 fa69 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013848:	f107 031c 	add.w	r3, r7, #28
 801384c:	4618      	mov	r0, r3
 801384e:	f7f7 fa64 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8013852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013854:	f009 fd2e 	bl	801d2b4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801385c:	4619      	mov	r1, r3
 801385e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013860:	f009 fd00 	bl	801d264 <_ZN10TestFilter3addEPS_>
 8013864:	4602      	mov	r2, r0
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	629a      	str	r2, [r3, #40]	; 0x28
}
 801386a:	bf00      	nop
 801386c:	3728      	adds	r7, #40	; 0x28
 801386e:	46bd      	mov	sp, r7
 8013870:	bdb0      	pop	{r4, r5, r7, pc}
 8013872:	bf00      	nop
 8013874:	08022518 	.word	0x08022518
 8013878:	08022e8c 	.word	0x08022e8c

0801387c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801387c:	b5b0      	push	{r4, r5, r7, lr}
 801387e:	b08c      	sub	sp, #48	; 0x30
 8013880:	af02      	add	r7, sp, #8
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801388a:	f107 031c 	add.w	r3, r7, #28
 801388e:	491d      	ldr	r1, [pc, #116]	; (8013904 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8013890:	4618      	mov	r0, r3
 8013892:	f7f6 fe8a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013896:	f107 0014 	add.w	r0, r7, #20
 801389a:	f107 031c 	add.w	r3, r7, #28
 801389e:	9301      	str	r3, [sp, #4]
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	68ba      	ldr	r2, [r7, #8]
 80138a8:	68f9      	ldr	r1, [r7, #12]
 80138aa:	f7ff fcff 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80138ae:	f107 0514 	add.w	r5, r7, #20
 80138b2:	f240 124f 	movw	r2, #335	; 0x14f
 80138b6:	4914      	ldr	r1, [pc, #80]	; (8013908 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80138b8:	2010      	movs	r0, #16
 80138ba:	f7f4 fab3 	bl	8007e24 <_ZnwjPKci>
 80138be:	4604      	mov	r4, r0
 80138c0:	4629      	mov	r1, r5
 80138c2:	4620      	mov	r0, r4
 80138c4:	f009 fcae 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 80138c8:	627c      	str	r4, [r7, #36]	; 0x24
 80138ca:	f107 0314 	add.w	r3, r7, #20
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f7 fa23 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80138d4:	f107 031c 	add.w	r3, r7, #28
 80138d8:	4618      	mov	r0, r3
 80138da:	f7f7 fa1e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80138de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138e0:	f009 fce8 	bl	801d2b4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80138e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138e6:	f009 fcd8 	bl	801d29a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ee:	4619      	mov	r1, r3
 80138f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138f2:	f009 fcb7 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80138f6:	4602      	mov	r2, r0
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80138fc:	bf00      	nop
 80138fe:	3728      	adds	r7, #40	; 0x28
 8013900:	46bd      	mov	sp, r7
 8013902:	bdb0      	pop	{r4, r5, r7, pc}
 8013904:	0802251c 	.word	0x0802251c
 8013908:	08022e8c 	.word	0x08022e8c

0801390c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 801390c:	b5b0      	push	{r4, r5, r7, lr}
 801390e:	b092      	sub	sp, #72	; 0x48
 8013910:	af02      	add	r7, sp, #8
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
 8013918:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801391a:	f107 0320 	add.w	r3, r7, #32
 801391e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013920:	4618      	mov	r0, r3
 8013922:	f7f6 fe42 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013926:	f107 0018 	add.w	r0, r7, #24
 801392a:	f107 0320 	add.w	r3, r7, #32
 801392e:	9301      	str	r3, [sp, #4]
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	68ba      	ldr	r2, [r7, #8]
 8013938:	68f9      	ldr	r1, [r7, #12]
 801393a:	f7ff fcb7 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801393e:	f107 0320 	add.w	r3, r7, #32
 8013942:	4618      	mov	r0, r3
 8013944:	f7f7 f9e9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013948:	f107 0010 	add.w	r0, r7, #16
 801394c:	f107 0118 	add.w	r1, r7, #24
 8013950:	2329      	movs	r3, #41	; 0x29
 8013952:	222c      	movs	r2, #44	; 0x2c
 8013954:	f7f7 fb92 	bl	800b07c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8013958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801395c:	f107 0110 	add.w	r1, r7, #16
 8013960:	2202      	movs	r2, #2
 8013962:	4618      	mov	r0, r3
 8013964:	f7f7 fb2c 	bl	800afc0 <_ZNK12SimpleString9subStringEj>
 8013968:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801396c:	f107 0310 	add.w	r3, r7, #16
 8013970:	4611      	mov	r1, r2
 8013972:	4618      	mov	r0, r3
 8013974:	f7f6 fe85 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 8013978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801397c:	4618      	mov	r0, r3
 801397e:	f7f7 f9cc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8013982:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8013986:	492a      	ldr	r1, [pc, #168]	; (8013a30 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8013988:	2010      	movs	r0, #16
 801398a:	f7f4 fa4b 	bl	8007e24 <_ZnwjPKci>
 801398e:	4604      	mov	r4, r0
 8013990:	f107 0310 	add.w	r3, r7, #16
 8013994:	4619      	mov	r1, r3
 8013996:	4620      	mov	r0, r4
 8013998:	f009 fc44 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 801399c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801399e:	f107 0318 	add.w	r3, r7, #24
 80139a2:	2100      	movs	r1, #0
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7f7 fb1c 	bl	800afe2 <_ZNK12SimpleString2atEj>
 80139aa:	4603      	mov	r3, r0
 80139ac:	461a      	mov	r2, r3
 80139ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80139b2:	f107 0118 	add.w	r1, r7, #24
 80139b6:	232c      	movs	r3, #44	; 0x2c
 80139b8:	f7f7 fb60 	bl	800b07c <_ZNK12SimpleString17subStringFromTillEcc>
 80139bc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80139c0:	f240 125b 	movw	r2, #347	; 0x15b
 80139c4:	491a      	ldr	r1, [pc, #104]	; (8013a30 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80139c6:	2010      	movs	r0, #16
 80139c8:	f7f4 fa2c 	bl	8007e24 <_ZnwjPKci>
 80139cc:	4604      	mov	r4, r0
 80139ce:	4629      	mov	r1, r5
 80139d0:	4620      	mov	r0, r4
 80139d2:	f009 fc27 	bl	801d224 <_ZN10TestFilterC1ERK12SimpleString>
 80139d6:	63bc      	str	r4, [r7, #56]	; 0x38
 80139d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f7 f99c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80139e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139e4:	f009 fc59 	bl	801d29a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80139e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80139ea:	f009 fc56 	bl	801d29a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f2:	4619      	mov	r1, r3
 80139f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80139f6:	f009 fc35 	bl	801d264 <_ZN10TestFilter3addEPS_>
 80139fa:	4602      	mov	r2, r0
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a04:	4619      	mov	r1, r3
 8013a06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013a08:	f009 fc2c 	bl	801d264 <_ZN10TestFilter3addEPS_>
 8013a0c:	4602      	mov	r2, r0
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013a12:	f107 0310 	add.w	r3, r7, #16
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7f7 f97f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8013a1c:	f107 0318 	add.w	r3, r7, #24
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7f7 f97a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 8013a26:	bf00      	nop
 8013a28:	3740      	adds	r7, #64	; 0x40
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	08022e8c 	.word	0x08022e8c

08013a34 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8013a34:	b590      	push	{r4, r7, lr}
 8013a36:	b08b      	sub	sp, #44	; 0x2c
 8013a38:	af02      	add	r7, sp, #8
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]
 8013a40:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8013a42:	f107 0318 	add.w	r3, r7, #24
 8013a46:	491b      	ldr	r1, [pc, #108]	; (8013ab4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7f6 fdae 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013a4e:	f107 0010 	add.w	r0, r7, #16
 8013a52:	f107 0318 	add.w	r3, r7, #24
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	68ba      	ldr	r2, [r7, #8]
 8013a60:	68f9      	ldr	r1, [r7, #12]
 8013a62:	f7ff fc23 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013a66:	f107 0318 	add.w	r3, r7, #24
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7f7 f955 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8013a70:	f107 0310 	add.w	r3, r7, #16
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7f7 f92f 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	bf0c      	ite	eq
 8013a80:	2301      	moveq	r3, #1
 8013a82:	2300      	movne	r3, #0
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d001      	beq.n	8013a8e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8013a8a:	2400      	movs	r4, #0
 8013a8c:	e008      	b.n	8013aa0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	3330      	adds	r3, #48	; 0x30
 8013a92:	f107 0210 	add.w	r2, r7, #16
 8013a96:	4611      	mov	r1, r2
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f6 fdf2 	bl	800a682 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8013a9e:	2401      	movs	r4, #1
 8013aa0:	f107 0310 	add.w	r3, r7, #16
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f7 f938 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013aaa:	2c01      	cmp	r4, #1
}
 8013aac:	3724      	adds	r7, #36	; 0x24
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd90      	pop	{r4, r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	08022544 	.word	0x08022544

08013ab8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8013ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aba:	b093      	sub	sp, #76	; 0x4c
 8013abc:	af02      	add	r7, sp, #8
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
 8013ac4:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8013ac6:	f107 0318 	add.w	r3, r7, #24
 8013aca:	4953      	ldr	r1, [pc, #332]	; (8013c18 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7f6 fd6c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013ad2:	f107 0010 	add.w	r0, r7, #16
 8013ad6:	f107 0318 	add.w	r3, r7, #24
 8013ada:	9301      	str	r3, [sp, #4]
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	68ba      	ldr	r2, [r7, #8]
 8013ae4:	68f9      	ldr	r1, [r7, #12]
 8013ae6:	f7ff fbe1 	bl	80132ac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013aea:	f107 0318 	add.w	r3, r7, #24
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7f7 f913 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8013af4:	f107 0310 	add.w	r3, r7, #16
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7f7 f8ed 	bl	800acd8 <_ZNK12SimpleString4sizeEv>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	bf0c      	ite	eq
 8013b04:	2301      	moveq	r3, #1
 8013b06:	2300      	movne	r3, #0
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d001      	beq.n	8013b12 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8013b0e:	2400      	movs	r4, #0
 8013b10:	e078      	b.n	8013c04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8013b12:	2500      	movs	r5, #0
 8013b14:	f107 0320 	add.w	r3, r7, #32
 8013b18:	4940      	ldr	r1, [pc, #256]	; (8013c1c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7f6 fd45 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013b20:	2601      	movs	r6, #1
 8013b22:	f107 0220 	add.w	r2, r7, #32
 8013b26:	f107 0310 	add.w	r3, r7, #16
 8013b2a:	4611      	mov	r1, r2
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7f7 f900 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d111      	bne.n	8013b5c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8013b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b3c:	4938      	ldr	r1, [pc, #224]	; (8013c20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7f6 fd33 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013b44:	2501      	movs	r5, #1
 8013b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013b4a:	f107 0310 	add.w	r3, r7, #16
 8013b4e:	4611      	mov	r1, r2
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f7 f8ee 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8013b56:	4603      	mov	r3, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8013b5c:	2401      	movs	r4, #1
 8013b5e:	e000      	b.n	8013b62 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8013b60:	2400      	movs	r4, #0
 8013b62:	2d00      	cmp	r5, #0
 8013b64:	d004      	beq.n	8013b70 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8013b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7f7 f8d5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013b70:	2e00      	cmp	r6, #0
 8013b72:	d004      	beq.n	8013b7e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8013b74:	f107 0320 	add.w	r3, r7, #32
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7f7 f8ce 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013b7e:	2c00      	cmp	r4, #0
 8013b80:	d005      	beq.n	8013b8e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2200      	movs	r2, #0
 8013b86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013b8a:	2401      	movs	r4, #1
 8013b8c:	e03a      	b.n	8013c04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8013b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b92:	4924      	ldr	r1, [pc, #144]	; (8013c24 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f6 fd08 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013b9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013b9e:	f107 0310 	add.w	r3, r7, #16
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7f7 f8c4 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8013baa:	4603      	mov	r3, r0
 8013bac:	461c      	mov	r4, r3
 8013bae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7f7 f8b1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013bb8:	2c00      	cmp	r4, #0
 8013bba:	d005      	beq.n	8013bc8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013bc4:	2401      	movs	r4, #1
 8013bc6:	e01d      	b.n	8013c04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8013bc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013bcc:	4916      	ldr	r1, [pc, #88]	; (8013c28 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f6 fceb 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8013bd4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013bd8:	f107 0310 	add.w	r3, r7, #16
 8013bdc:	4611      	mov	r1, r2
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7f7 f8a7 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8013be4:	4603      	mov	r3, r0
 8013be6:	461c      	mov	r4, r3
 8013be8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7f7 f894 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013bf2:	2c00      	cmp	r4, #0
 8013bf4:	d005      	beq.n	8013c02 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	2202      	movs	r2, #2
 8013bfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013bfe:	2401      	movs	r4, #1
 8013c00:	e000      	b.n	8013c04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8013c02:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8013c04:	f107 0310 	add.w	r3, r7, #16
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7f7 f886 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8013c0e:	4623      	mov	r3, r4
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3744      	adds	r7, #68	; 0x44
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c18:	08022540 	.word	0x08022540
 8013c1c:	08022eb0 	.word	0x08022eb0
 8013c20:	08022eb8 	.word	0x08022eb8
 8013c24:	08022ec0 	.word	0x08022ec0
 8013c28:	08022ec8 	.word	0x08022ec8

08013c2c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	bf0c      	ite	eq
 8013c3e:	2301      	moveq	r3, #1
 8013c40:	2300      	movne	r3, #0
 8013c42:	b2db      	uxtb	r3, r3
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	370c      	adds	r7, #12
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c5e:	2b02      	cmp	r3, #2
 8013c60:	bf0c      	ite	eq
 8013c62:	2301      	moveq	r3, #1
 8013c64:	2300      	movne	r3, #0
 8013c66:	b2db      	uxtb	r3, r3
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
    return packageName_;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	3330      	adds	r3, #48	; 0x30
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	370c      	adds	r7, #12
 8013c84:	46bd      	mov	sp, r7
 8013c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8013c8c:	b480      	push	{r7}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2200      	movs	r2, #0
 8013c98:	601a      	str	r2, [r3, #0]
    {}
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013cc6:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	701a      	strb	r2, [r3, #0]
}
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cea:	2200      	movs	r2, #0
 8013cec:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	701a      	strb	r2, [r3, #0]
}
 8013cf4:	bf00      	nop
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr

08013d00 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8013d00:	b40e      	push	{r1, r2, r3}
 8013d02:	b590      	push	{r4, r7, lr}
 8013d04:	b086      	sub	sp, #24
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d10:	3304      	adds	r3, #4
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d032      	beq.n	8013d8c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8013d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d2a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8013d2c:	4b1b      	ldr	r3, [pc, #108]	; (8013d9c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8013d2e:	681c      	ldr	r4, [r3, #0]
 8013d30:	687a      	ldr	r2, [r7, #4]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	18d0      	adds	r0, r2, r3
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	1c59      	adds	r1, r3, #1
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d44:	47a0      	blx	r4
 8013d46:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	dd09      	ble.n	8013d62 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	441a      	add	r2, r3
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d60:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d68:	681a      	ldr	r2, [r3, #0]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d70:	3304      	adds	r3, #4
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d90a      	bls.n	8013d8e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d7e:	3304      	adds	r3, #4
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013d88:	601a      	str	r2, [r3, #0]
 8013d8a:	e000      	b.n	8013d8e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8013d8c:	bf00      	nop
    va_end(arguments);
}
 8013d8e:	3718      	adds	r7, #24
 8013d90:	46bd      	mov	sp, r7
 8013d92:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013d96:	b003      	add	sp, #12
 8013d98:	4770      	bx	lr
 8013d9a:	bf00      	nop
 8013d9c:	200000ac 	.word	0x200000ac

08013da0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b08c      	sub	sp, #48	; 0x30
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	60b9      	str	r1, [r7, #8]
 8013daa:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8013db0:	2310      	movs	r3, #16
 8013db2:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8013db4:	2300      	movs	r3, #0
 8013db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8013db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d273      	bcs.n	8013ea8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8013dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dc2:	493b      	ldr	r1, [pc, #236]	; (8013eb0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f7ff ff9b 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dce:	1ad3      	subs	r3, r2, r3
 8013dd0:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8013dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd4:	2b10      	cmp	r3, #16
 8013dd6:	d901      	bls.n	8013ddc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8013dd8:	2310      	movs	r3, #16
 8013dda:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dde:	f1c3 0310 	rsb	r3, r3, #16
 8013de2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8013de4:	2300      	movs	r3, #0
 8013de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8013de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d215      	bcs.n	8013e1c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8013df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df4:	4413      	add	r3, r2
 8013df6:	69fa      	ldr	r2, [r7, #28]
 8013df8:	4413      	add	r3, r2
 8013dfa:	781b      	ldrb	r3, [r3, #0]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	492d      	ldr	r1, [pc, #180]	; (8013eb4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7ff ff7d 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8013e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e08:	2b07      	cmp	r3, #7
 8013e0a:	d103      	bne.n	8013e14 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8013e0c:	492a      	ldr	r1, [pc, #168]	; (8013eb8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8013e0e:	68f8      	ldr	r0, [r7, #12]
 8013e10:	f7ff ff76 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e16:	3301      	adds	r3, #1
 8013e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e1a:	e7e5      	b.n	8013de8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d207      	bcs.n	8013e38 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8013e28:	4924      	ldr	r1, [pc, #144]	; (8013ebc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f7ff ff68 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8013e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e32:	3301      	adds	r3, #1
 8013e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e36:	e7f3      	b.n	8013e20 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	2b08      	cmp	r3, #8
 8013e3c:	d903      	bls.n	8013e46 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8013e3e:	491e      	ldr	r1, [pc, #120]	; (8013eb8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	f7ff ff5d 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8013e46:	491e      	ldr	r1, [pc, #120]	; (8013ec0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8013e48:	68f8      	ldr	r0, [r7, #12]
 8013e4a:	f7ff ff59 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013e4e:	2300      	movs	r3, #0
 8013e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d21d      	bcs.n	8013e96 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8013e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e5e:	4413      	add	r3, r2
 8013e60:	69fa      	ldr	r2, [r7, #28]
 8013e62:	4413      	add	r3, r2
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8013e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e6e:	2b1f      	cmp	r3, #31
 8013e70:	d903      	bls.n	8013e7a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8013e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e76:	2b7e      	cmp	r3, #126	; 0x7e
 8013e78:	d902      	bls.n	8013e80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8013e7a:	232e      	movs	r3, #46	; 0x2e
 8013e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8013e80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e84:	461a      	mov	r2, r3
 8013e86:	490f      	ldr	r1, [pc, #60]	; (8013ec4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8013e88:	68f8      	ldr	r0, [r7, #12]
 8013e8a:	f7ff ff39 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e90:	3301      	adds	r3, #1
 8013e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e94:	e7dd      	b.n	8013e52 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8013e96:	490c      	ldr	r1, [pc, #48]	; (8013ec8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f7ff ff31 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8013e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	4413      	add	r3, r2
 8013ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8013ea6:	e787      	b.n	8013db8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8013ea8:	bf00      	nop
 8013eaa:	3730      	adds	r7, #48	; 0x30
 8013eac:	46bd      	mov	sp, r7
 8013eae:	bd80      	pop	{r7, pc}
 8013eb0:	08022ee0 	.word	0x08022ee0
 8013eb4:	08022eec 	.word	0x08022eec
 8013eb8:	08022ef4 	.word	0x08022ef4
 8013ebc:	08022ef8 	.word	0x08022ef8
 8013ec0:	08022efc 	.word	0x08022efc
 8013ec4:	08022f00 	.word	0x08022f00
 8013ec8:	08022f04 	.word	0x08022f04

08013ecc <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b083      	sub	sp, #12
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
    return buffer_;
 8013ed4:	687b      	ldr	r3, [r7, #4]
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	370c      	adds	r7, #12
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr

08013ee2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8013ee2:	b480      	push	{r7}
 8013ee4:	b083      	sub	sp, #12
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
 8013eea:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013ef2:	3304      	adds	r3, #4
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013efe:	3304      	adds	r3, #4
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f06:	d306      	bcc.n	8013f16 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f0e:	3304      	adds	r3, #4
 8013f10:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013f14:	601a      	str	r2, [r3, #0]
}
 8013f16:	bf00      	nop
 8013f18:	370c      	adds	r7, #12
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f20:	4770      	bx	lr

08013f22 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8013f22:	b480      	push	{r7}
 8013f24:	b083      	sub	sp, #12
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f30:	3304      	adds	r3, #4
 8013f32:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013f36:	601a      	str	r2, [r3, #0]
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr

08013f44 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	bf2c      	ite	cs
 8013f62:	2301      	movcs	r3, #1
 8013f64:	2300      	movcc	r3, #0
 8013f66:	b2db      	uxtb	r3, r3
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	370c      	adds	r7, #12
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f72:	4770      	bx	lr

08013f74 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b082      	sub	sp, #8
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	601a      	str	r2, [r3, #0]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	711a      	strb	r2, [r3, #4]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	3308      	adds	r3, #8
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7ff fe8b 	bl	8013ca8 <_ZN18SimpleStringBufferC1Ev>
{
}
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	4618      	mov	r0, r3
 8013f96:	3708      	adds	r7, #8
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8013f9c:	b5b0      	push	{r4, r5, r7, lr}
 8013f9e:	b086      	sub	sp, #24
 8013fa0:	af02      	add	r7, sp, #8
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	60b9      	str	r1, [r7, #8]
 8013fa6:	607a      	str	r2, [r7, #4]
 8013fa8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f103 0408 	add.w	r4, r3, #8
 8013fb0:	687d      	ldr	r5, [r7, #4]
 8013fb2:	6a3b      	ldr	r3, [r7, #32]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	3314      	adds	r3, #20
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	6a38      	ldr	r0, [r7, #32]
 8013fbc:	4798      	blx	r3
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	462b      	mov	r3, r5
 8013fc8:	68ba      	ldr	r2, [r7, #8]
 8013fca:	4904      	ldr	r1, [pc, #16]	; (8013fdc <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f7ff fe97 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013fd2:	bf00      	nop
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	08022f08 	.word	0x08022f08

08013fe0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8013fe0:	b5b0      	push	{r4, r5, r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af02      	add	r7, sp, #8
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	60b9      	str	r1, [r7, #8]
 8013fea:	607a      	str	r2, [r7, #4]
 8013fec:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f103 0408 	add.w	r4, r3, #8
 8013ff4:	687d      	ldr	r5, [r7, #4]
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	3318      	adds	r3, #24
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	6838      	ldr	r0, [r7, #0]
 8014000:	4798      	blx	r3
 8014002:	4603      	mov	r3, r0
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	462b      	mov	r3, r5
 8014008:	68ba      	ldr	r2, [r7, #8]
 801400a:	4904      	ldr	r1, [pc, #16]	; (801401c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 801400c:	4620      	mov	r0, r4
 801400e:	f7ff fe77 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014012:	bf00      	nop
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bdb0      	pop	{r4, r5, r7, pc}
 801401a:	bf00      	nop
 801401c:	08022f40 	.word	0x08022f40

08014020 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	3308      	adds	r3, #8
 801402c:	4903      	ldr	r1, [pc, #12]	; (801403c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff fe66 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	08022f70 	.word	0x08022f70

08014040 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2200      	movs	r2, #0
 801404c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8014054:	2367      	movs	r3, #103	; 0x67
 8014056:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f203 1311 	addw	r3, r3, #273	; 0x111
 801405e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f103 0208 	add.w	r2, r3, #8
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801406c:	4619      	mov	r1, r3
 801406e:	4610      	mov	r0, r2
 8014070:	f7ff ff37 	bl	8013ee2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8014074:	bf00      	nop
 8014076:	3710      	adds	r7, #16
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 801407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801407e:	b089      	sub	sp, #36	; 0x24
 8014080:	af04      	add	r7, sp, #16
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d102      	bne.n	8014094 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	f000 f882 	bl	8014198 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	1c5a      	adds	r2, r3, #1
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	f103 0508 	add.w	r5, r3, #8
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80140b6:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	695a      	ldr	r2, [r3, #20]
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	695b      	ldr	r3, [r3, #20]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	3314      	adds	r3, #20
 80140c4:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80140c6:	4610      	mov	r0, r2
 80140c8:	4798      	blx	r3
 80140ca:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80140d0:	9303      	str	r3, [sp, #12]
 80140d2:	9202      	str	r2, [sp, #8]
 80140d4:	683a      	ldr	r2, [r7, #0]
 80140d6:	9201      	str	r2, [sp, #4]
 80140d8:	9400      	str	r4, [sp, #0]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	4632      	mov	r2, r6
 80140de:	4915      	ldr	r1, [pc, #84]	; (8014134 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80140e0:	4628      	mov	r0, r5
 80140e2:	f7ff fe0d 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f103 0008 	add.w	r0, r3, #8
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	6899      	ldr	r1, [r3, #8]
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	461a      	mov	r2, r3
 80140f6:	f7ff fe53 	bl	8013da0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	695a      	ldr	r2, [r3, #20]
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	695b      	ldr	r3, [r3, #20]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	3314      	adds	r3, #20
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4610      	mov	r0, r2
 801410a:	4798      	blx	r3
 801410c:	4603      	mov	r3, r0
 801410e:	490a      	ldr	r1, [pc, #40]	; (8014138 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8014110:	4618      	mov	r0, r3
 8014112:	f7f6 f887 	bl	800a224 <_ZN12SimpleString6StrCmpEPKcS1_>
 8014116:	4603      	mov	r3, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	bf0c      	ite	eq
 801411c:	2301      	moveq	r3, #1
 801411e:	2300      	movne	r3, #0
 8014120:	b2db      	uxtb	r3, r3
 8014122:	2b00      	cmp	r3, #0
 8014124:	d002      	beq.n	801412c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	2201      	movs	r2, #1
 801412a:	711a      	strb	r2, [r3, #4]
}
 801412c:	bf00      	nop
 801412e:	3714      	adds	r7, #20
 8014130:	46bd      	mov	sp, r7
 8014132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014134:	08022f90 	.word	0x08022f90
 8014138:	08022ff0 	.word	0x08022ff0

0801413c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d103      	bne.n	8014154 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f7ff ff67 	bl	8014020 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8014152:	e01e      	b.n	8014192 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	3308      	adds	r3, #8
 8014158:	4618      	mov	r0, r3
 801415a:	f7ff fef3 	bl	8013f44 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801415e:	4603      	mov	r3, r0
 8014160:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	3308      	adds	r3, #8
 8014166:	4618      	mov	r0, r3
 8014168:	f7ff fedb 	bl	8013f22 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 801416c:	7bfb      	ldrb	r3, [r7, #15]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d002      	beq.n	8014178 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 f820 	bl	80141b8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4619      	mov	r1, r3
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f000 f82a 	bl	80141d8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	791b      	ldrb	r3, [r3, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d002      	beq.n	8014192 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 f839 	bl	8014204 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8014192:	3710      	adds	r7, #16
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	3308      	adds	r3, #8
 80141a4:	4903      	ldr	r1, [pc, #12]	; (80141b4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ff fdaa 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80141ac:	bf00      	nop
 80141ae:	3708      	adds	r7, #8
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	08022ff8 	.word	0x08022ff8

080141b8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3308      	adds	r3, #8
 80141c4:	4903      	ldr	r1, [pc, #12]	; (80141d4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7ff fd9a 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80141cc:	bf00      	nop
 80141ce:	3708      	adds	r7, #8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	08023010 	.word	0x08023010

080141d8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f103 0008 	add.w	r0, r3, #8
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	4a04      	ldr	r2, [pc, #16]	; (80141fc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80141ec:	4904      	ldr	r1, [pc, #16]	; (8014200 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80141ee:	f7ff fd87 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80141f2:	bf00      	nop
 80141f4:	3708      	adds	r7, #8
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	08023058 	.word	0x08023058
 8014200:	08023070 	.word	0x08023070

08014204 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	3308      	adds	r3, #8
 8014210:	4903      	ldr	r1, [pc, #12]	; (8014220 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8014212:	4618      	mov	r0, r3
 8014214:	f7ff fd74 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014218:	bf00      	nop
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	08023078 	.word	0x08023078

08014224 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b08a      	sub	sp, #40	; 0x28
 8014228:	af06      	add	r7, sp, #24
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
 8014230:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8014232:	f7f9 fe8d 	bl	800df50 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8014236:	4602      	mov	r2, r0
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	9305      	str	r3, [sp, #20]
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	9304      	str	r3, [sp, #16]
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	9303      	str	r3, [sp, #12]
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	9302      	str	r3, [sp, #8]
 8014248:	9201      	str	r2, [sp, #4]
 801424a:	2300      	movs	r3, #0
 801424c:	9300      	str	r3, [sp, #0]
 801424e:	2300      	movs	r3, #0
 8014250:	4a04      	ldr	r2, [pc, #16]	; (8014264 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8014252:	4905      	ldr	r1, [pc, #20]	; (8014268 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f000 f855 	bl	8014304 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801425a:	bf00      	nop
 801425c:	3710      	adds	r7, #16
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	08022ed4 	.word	0x08022ed4
 8014268:	0802318c 	.word	0x0802318c

0801426c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801426c:	b590      	push	{r4, r7, lr}
 801426e:	b08b      	sub	sp, #44	; 0x2c
 8014270:	af06      	add	r7, sp, #24
 8014272:	60f8      	str	r0, [r7, #12]
 8014274:	60b9      	str	r1, [r7, #8]
 8014276:	607a      	str	r2, [r7, #4]
 8014278:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	68d8      	ldr	r0, [r3, #12]
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	691c      	ldr	r4, [r3, #16]
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	6952      	ldr	r2, [r2, #20]
 801428a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801428c:	9105      	str	r1, [sp, #20]
 801428e:	6a39      	ldr	r1, [r7, #32]
 8014290:	9104      	str	r1, [sp, #16]
 8014292:	6839      	ldr	r1, [r7, #0]
 8014294:	9103      	str	r1, [sp, #12]
 8014296:	6879      	ldr	r1, [r7, #4]
 8014298:	9102      	str	r1, [sp, #8]
 801429a:	9201      	str	r2, [sp, #4]
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	4623      	mov	r3, r4
 80142a0:	4602      	mov	r2, r0
 80142a2:	4904      	ldr	r1, [pc, #16]	; (80142b4 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80142a4:	68f8      	ldr	r0, [r7, #12]
 80142a6:	f000 f82d 	bl	8014304 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80142aa:	bf00      	nop
 80142ac:	3714      	adds	r7, #20
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd90      	pop	{r4, r7, pc}
 80142b2:	bf00      	nop
 80142b4:	080231b0 	.word	0x080231b0

080142b8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80142b8:	b590      	push	{r4, r7, lr}
 80142ba:	b08b      	sub	sp, #44	; 0x2c
 80142bc:	af06      	add	r7, sp, #24
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
 80142c4:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	68d8      	ldr	r0, [r3, #12]
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	691c      	ldr	r4, [r3, #16]
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	68ba      	ldr	r2, [r7, #8]
 80142d4:	6952      	ldr	r2, [r2, #20]
 80142d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142d8:	9105      	str	r1, [sp, #20]
 80142da:	6a39      	ldr	r1, [r7, #32]
 80142dc:	9104      	str	r1, [sp, #16]
 80142de:	6839      	ldr	r1, [r7, #0]
 80142e0:	9103      	str	r1, [sp, #12]
 80142e2:	6879      	ldr	r1, [r7, #4]
 80142e4:	9102      	str	r1, [sp, #8]
 80142e6:	9201      	str	r2, [sp, #4]
 80142e8:	9300      	str	r3, [sp, #0]
 80142ea:	4623      	mov	r3, r4
 80142ec:	4602      	mov	r2, r0
 80142ee:	4904      	ldr	r1, [pc, #16]	; (8014300 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	f000 f807 	bl	8014304 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80142f6:	bf00      	nop
 80142f8:	3714      	adds	r7, #20
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd90      	pop	{r4, r7, pc}
 80142fe:	bf00      	nop
 8014300:	080231d8 	.word	0x080231d8

08014304 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014304:	b590      	push	{r4, r7, lr}
 8014306:	b087      	sub	sp, #28
 8014308:	af02      	add	r7, sp, #8
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	607a      	str	r2, [r7, #4]
 8014310:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	3308      	adds	r3, #8
 8014316:	68ba      	ldr	r2, [r7, #8]
 8014318:	4910      	ldr	r1, [pc, #64]	; (801435c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 801431a:	4618      	mov	r0, r3
 801431c:	f7ff fcf0 	bl	8013d00 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8014320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014322:	9300      	str	r3, [sp, #0]
 8014324:	6a3b      	ldr	r3, [r7, #32]
 8014326:	683a      	ldr	r2, [r7, #0]
 8014328:	6879      	ldr	r1, [r7, #4]
 801432a:	68f8      	ldr	r0, [r7, #12]
 801432c:	f7ff fe36 	bl	8013f9c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8014330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014336:	68f8      	ldr	r0, [r7, #12]
 8014338:	f7ff fe52 	bl	8013fe0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 801433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	3308      	adds	r3, #8
 8014342:	681c      	ldr	r4, [r3, #0]
 8014344:	68f8      	ldr	r0, [r7, #12]
 8014346:	f000 f80b 	bl	8014360 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801434a:	4603      	mov	r3, r0
 801434c:	4619      	mov	r1, r3
 801434e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014350:	47a0      	blx	r4
}
 8014352:	bf00      	nop
 8014354:	3714      	adds	r7, #20
 8014356:	46bd      	mov	sp, r7
 8014358:	bd90      	pop	{r4, r7, pc}
 801435a:	bf00      	nop
 801435c:	08023204 	.word	0x08023204

08014360 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	3308      	adds	r3, #8
 801436c:	4618      	mov	r0, r3
 801436e:	f7ff fdad 	bl	8013ecc <_ZN18SimpleStringBuffer8toStringEv>
 8014372:	4603      	mov	r3, r0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	3308      	adds	r3, #8
 8014388:	4618      	mov	r0, r3
 801438a:	f7ff fca7 	bl	8013cdc <_ZN18SimpleStringBuffer5clearEv>
}
 801438e:	bf00      	nop
 8014390:	3708      	adds	r7, #8
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}

08014396 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8014396:	b480      	push	{r7}
 8014398:	b085      	sub	sp, #20
 801439a:	af00      	add	r7, sp, #0
 801439c:	60f8      	str	r0, [r7, #12]
 801439e:	60b9      	str	r1, [r7, #8]
 80143a0:	607a      	str	r2, [r7, #4]
 80143a2:	603b      	str	r3, [r7, #0]
    number_ = number;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	687a      	ldr	r2, [r7, #4]
 80143a8:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	68ba      	ldr	r2, [r7, #8]
 80143ae:	609a      	str	r2, [r3, #8]
    size_ = size;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	683a      	ldr	r2, [r7, #0]
 80143b4:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	69ba      	ldr	r2, [r7, #24]
 80143ba:	615a      	str	r2, [r3, #20]
    period_ = period;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	7f3a      	ldrb	r2, [r7, #28]
 80143c0:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80143c8:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143ce:	60da      	str	r2, [r3, #12]
    line_ = line;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143d4:	611a      	str	r2, [r3, #16]
}
 80143d6:	bf00      	nop
 80143d8:	3714      	adds	r7, #20
 80143da:	46bd      	mov	sp, r7
 80143dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e0:	4770      	bx	lr

080143e2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80143e2:	b480      	push	{r7}
 80143e4:	b085      	sub	sp, #20
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	60f8      	str	r0, [r7, #12]
 80143ea:	60b9      	str	r1, [r7, #8]
 80143ec:	4613      	mov	r3, r2
 80143ee:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80143f0:	79fb      	ldrb	r3, [r7, #7]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d00b      	beq.n	801440e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	7e1b      	ldrb	r3, [r3, #24]
 80143fa:	79fa      	ldrb	r2, [r7, #7]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d006      	beq.n	801440e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	7e1b      	ldrb	r3, [r3, #24]
 8014404:	2b01      	cmp	r3, #1
 8014406:	d004      	beq.n	8014412 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014408:	79fb      	ldrb	r3, [r7, #7]
 801440a:	2b02      	cmp	r3, #2
 801440c:	d101      	bne.n	8014412 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801440e:	2301      	movs	r3, #1
 8014410:	e000      	b.n	8014414 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	3714      	adds	r7, #20
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr

08014420 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	61da      	str	r2, [r3, #28]
    head_ = node;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	683a      	ldr	r2, [r7, #0]
 8014436:	601a      	str	r2, [r3, #0]
}
 8014438:	bf00      	nop
 801443a:	370c      	adds	r7, #12
 801443c:	46bd      	mov	sp, r7
 801443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014442:	4770      	bx	lr

08014444 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8014454:	2300      	movs	r3, #0
 8014456:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d019      	beq.n	8014492 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	689b      	ldr	r3, [r3, #8]
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	429a      	cmp	r2, r3
 8014466:	d10e      	bne.n	8014486 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d005      	beq.n	801447a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	69da      	ldr	r2, [r3, #28]
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	61da      	str	r2, [r3, #28]
                return cur;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	e00c      	b.n	8014494 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	69da      	ldr	r2, [r3, #28]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	601a      	str	r2, [r3, #0]
                return cur;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	e006      	b.n	8014494 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	69db      	ldr	r3, [r3, #28]
 801448e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8014490:	e7e2      	b.n	8014458 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3714      	adds	r7, #20
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80144a0:	b480      	push	{r7}
 80144a2:	b085      	sub	sp, #20
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00a      	beq.n	80144cc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	689b      	ldr	r3, [r3, #8]
 80144ba:	683a      	ldr	r2, [r7, #0]
 80144bc:	429a      	cmp	r2, r3
 80144be:	d101      	bne.n	80144c4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	e004      	b.n	80144ce <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	69db      	ldr	r3, [r3, #28]
 80144c8:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80144ca:	e7f1      	b.n	80144b0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3714      	adds	r7, #20
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr

080144da <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80144da:	b580      	push	{r7, lr}
 80144dc:	b086      	sub	sp, #24
 80144de:	af00      	add	r7, sp, #0
 80144e0:	60f8      	str	r0, [r7, #12]
 80144e2:	60b9      	str	r1, [r7, #8]
 80144e4:	4613      	mov	r3, r2
 80144e6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	617b      	str	r3, [r7, #20]
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00e      	beq.n	8014510 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80144f2:	79fb      	ldrb	r3, [r7, #7]
 80144f4:	461a      	mov	r2, r3
 80144f6:	6979      	ldr	r1, [r7, #20]
 80144f8:	68f8      	ldr	r0, [r7, #12]
 80144fa:	f7ff ff72 	bl	80143e2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	e004      	b.n	8014512 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	69db      	ldr	r3, [r3, #28]
 801450c:	617b      	str	r3, [r7, #20]
 801450e:	e7ed      	b.n	80144ec <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8014510:	2300      	movs	r3, #0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3718      	adds	r7, #24
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 801451a:	b580      	push	{r7, lr}
 801451c:	b082      	sub	sp, #8
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
 8014522:	460b      	mov	r3, r1
 8014524:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	78fa      	ldrb	r2, [r7, #3]
 801452c:	4619      	mov	r1, r3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f7ff ffd3 	bl	80144da <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014534:	4603      	mov	r3, r0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}

0801453e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b084      	sub	sp, #16
 8014542:	af00      	add	r7, sp, #0
 8014544:	60f8      	str	r0, [r7, #12]
 8014546:	60b9      	str	r1, [r7, #8]
 8014548:	4613      	mov	r3, r2
 801454a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	69db      	ldr	r3, [r3, #28]
 8014550:	79fa      	ldrb	r2, [r7, #7]
 8014552:	4619      	mov	r1, r3
 8014554:	68f8      	ldr	r0, [r7, #12]
 8014556:	f7ff ffc0 	bl	80144da <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801455a:	4603      	mov	r3, r0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	460b      	mov	r3, r1
 801456e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014570:	2300      	movs	r3, #0
 8014572:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	60bb      	str	r3, [r7, #8]
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d00f      	beq.n	80145a0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8014580:	78fb      	ldrb	r3, [r7, #3]
 8014582:	461a      	mov	r2, r3
 8014584:	68b9      	ldr	r1, [r7, #8]
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f7ff ff2b 	bl	80143e2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801458c:	4603      	mov	r3, r0
 801458e:	2b00      	cmp	r3, #0
 8014590:	d002      	beq.n	8014598 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	3301      	adds	r3, #1
 8014596:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	69db      	ldr	r3, [r3, #28]
 801459c:	60bb      	str	r3, [r7, #8]
 801459e:	e7ec      	b.n	801457a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80145a0:	68fb      	ldr	r3, [r7, #12]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3710      	adds	r7, #16
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
	...

080145ac <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80145ac:	b480      	push	{r7}
 80145ae:	b083      	sub	sp, #12
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80145b6:	6839      	ldr	r1, [r7, #0]
 80145b8:	4b09      	ldr	r3, [pc, #36]	; (80145e0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80145ba:	fba3 2301 	umull	r2, r3, r3, r1
 80145be:	1aca      	subs	r2, r1, r3
 80145c0:	0852      	lsrs	r2, r2, #1
 80145c2:	4413      	add	r3, r2
 80145c4:	099a      	lsrs	r2, r3, #6
 80145c6:	4613      	mov	r3, r2
 80145c8:	00db      	lsls	r3, r3, #3
 80145ca:	4413      	add	r3, r2
 80145cc:	00db      	lsls	r3, r3, #3
 80145ce:	4413      	add	r3, r2
 80145d0:	1aca      	subs	r2, r1, r3
 80145d2:	4613      	mov	r3, r2
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	370c      	adds	r7, #12
 80145d8:	46bd      	mov	sp, r7
 80145da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145de:	4770      	bx	lr
 80145e0:	c0e07039 	.word	0xc0e07039

080145e4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	689b      	ldr	r3, [r3, #8]
 80145f2:	4619      	mov	r1, r3
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7ff ffd9 	bl	80145ac <_ZN23MemoryLeakDetectorTable4hashEPc>
 80145fa:	4603      	mov	r3, r0
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	687a      	ldr	r2, [r7, #4]
 8014600:	4413      	add	r3, r2
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	4618      	mov	r0, r3
 8014606:	f7ff ff0b 	bl	8014420 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 801460a:	bf00      	nop
 801460c:	3708      	adds	r7, #8
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}

08014612 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8014612:	b580      	push	{r7, lr}
 8014614:	b082      	sub	sp, #8
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
 801461a:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 801461c:	6839      	ldr	r1, [r7, #0]
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f7ff ffc4 	bl	80145ac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014624:	4603      	mov	r3, r0
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	4413      	add	r3, r2
 801462c:	6839      	ldr	r1, [r7, #0]
 801462e:	4618      	mov	r0, r3
 8014630:	f7ff ff08 	bl	8014444 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8014634:	4603      	mov	r3, r0
}
 8014636:	4618      	mov	r0, r3
 8014638:	3708      	adds	r7, #8
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}

0801463e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801463e:	b580      	push	{r7, lr}
 8014640:	b082      	sub	sp, #8
 8014642:	af00      	add	r7, sp, #0
 8014644:	6078      	str	r0, [r7, #4]
 8014646:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8014648:	6839      	ldr	r1, [r7, #0]
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f7ff ffae 	bl	80145ac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014650:	4603      	mov	r3, r0
 8014652:	009b      	lsls	r3, r3, #2
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	4413      	add	r3, r2
 8014658:	6839      	ldr	r1, [r7, #0]
 801465a:	4618      	mov	r0, r3
 801465c:	f7ff ff20 	bl	80144a0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8014660:	4603      	mov	r3, r0
}
 8014662:	4618      	mov	r0, r3
 8014664:	3708      	adds	r7, #8
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}

0801466a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801466a:	b580      	push	{r7, lr}
 801466c:	b084      	sub	sp, #16
 801466e:	af00      	add	r7, sp, #0
 8014670:	6078      	str	r0, [r7, #4]
 8014672:	460b      	mov	r3, r1
 8014674:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014676:	2300      	movs	r3, #0
 8014678:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801467a:	2300      	movs	r3, #0
 801467c:	60bb      	str	r3, [r7, #8]
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	2b48      	cmp	r3, #72	; 0x48
 8014682:	dc10      	bgt.n	80146a6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	4413      	add	r3, r2
 801468c:	78fa      	ldrb	r2, [r7, #3]
 801468e:	4611      	mov	r1, r2
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff ff67 	bl	8014564 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8014696:	4602      	mov	r2, r0
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	4413      	add	r3, r2
 801469c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	3301      	adds	r3, #1
 80146a2:	60bb      	str	r3, [r7, #8]
 80146a4:	e7eb      	b.n	801467e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80146a6:	68fb      	ldr	r3, [r7, #12]
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3710      	adds	r7, #16
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	460b      	mov	r3, r1
 80146ba:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80146bc:	2300      	movs	r3, #0
 80146be:	60fb      	str	r3, [r7, #12]
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2b48      	cmp	r3, #72	; 0x48
 80146c4:	dc12      	bgt.n	80146ec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	687a      	ldr	r2, [r7, #4]
 80146cc:	4413      	add	r3, r2
 80146ce:	78fa      	ldrb	r2, [r7, #3]
 80146d0:	4611      	mov	r1, r2
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7ff ff21 	bl	801451a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80146d8:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d001      	beq.n	80146e4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	e004      	b.n	80146ee <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	3301      	adds	r3, #1
 80146e8:	60fb      	str	r3, [r7, #12]
 80146ea:	e7e9      	b.n	80146c0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b086      	sub	sp, #24
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	60f8      	str	r0, [r7, #12]
 80146fe:	60b9      	str	r1, [r7, #8]
 8014700:	4613      	mov	r3, r2
 8014702:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	689b      	ldr	r3, [r3, #8]
 8014708:	4619      	mov	r1, r3
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f7ff ff4e 	bl	80145ac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014710:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	68fa      	ldr	r2, [r7, #12]
 8014718:	4413      	add	r3, r2
 801471a:	79fa      	ldrb	r2, [r7, #7]
 801471c:	68b9      	ldr	r1, [r7, #8]
 801471e:	4618      	mov	r0, r3
 8014720:	f7ff ff0d 	bl	801453e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014724:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d001      	beq.n	8014730 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	e019      	b.n	8014764 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	3301      	adds	r3, #1
 8014734:	617b      	str	r3, [r7, #20]
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	2b48      	cmp	r3, #72	; 0x48
 801473a:	d812      	bhi.n	8014762 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	68fa      	ldr	r2, [r7, #12]
 8014742:	4413      	add	r3, r2
 8014744:	79fa      	ldrb	r2, [r7, #7]
 8014746:	4611      	mov	r1, r2
 8014748:	4618      	mov	r0, r3
 801474a:	f7ff fee6 	bl	801451a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801474e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	e004      	b.n	8014764 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	3301      	adds	r3, #1
 801475e:	617b      	str	r3, [r7, #20]
 8014760:	e7e9      	b.n	8014736 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8014762:	2300      	movs	r3, #0
}
 8014764:	4618      	mov	r0, r3
 8014766:	3718      	adds	r7, #24
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801476c:	b5b0      	push	{r4, r5, r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2448      	movs	r4, #72	; 0x48
 8014778:	461d      	mov	r5, r3
 801477a:	2c00      	cmp	r4, #0
 801477c:	db05      	blt.n	801478a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801477e:	4628      	mov	r0, r5
 8014780:	f7ff fa84 	bl	8013c8c <_ZN22MemoryLeakDetectorListC1Ev>
 8014784:	3504      	adds	r5, #4
 8014786:	3c01      	subs	r4, #1
 8014788:	e7f7      	b.n	801477a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	4618      	mov	r0, r3
 801478e:	3708      	adds	r7, #8
 8014790:	46bd      	mov	sp, r7
 8014792:	bdb0      	pop	{r4, r5, r7, pc}

08014794 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8014794:	b590      	push	{r4, r7, lr}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
 801479e:	4a1d      	ldr	r2, [pc, #116]	; (8014814 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	601a      	str	r2, [r3, #0]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	330c      	adds	r3, #12
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7ff fbe3 	bl	8013f74 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147b4:	331c      	adds	r3, #28
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7ff ffd8 	bl	801476c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80147c2:	2201      	movs	r2, #1
 80147c4:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80147cc:	3304      	adds	r3, #4
 80147ce:	2201      	movs	r2, #1
 80147d0:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2201      	movs	r2, #1
 80147d6:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80147de:	3308      	adds	r3, #8
 80147e0:	2200      	movs	r2, #0
 80147e2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	683a      	ldr	r2, [r7, #0]
 80147e8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80147ea:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80147ee:	490a      	ldr	r1, [pc, #40]	; (8014818 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80147f0:	2004      	movs	r0, #4
 80147f2:	f7f3 fb17 	bl	8007e24 <_ZnwjPKci>
 80147f6:	4604      	mov	r4, r0
 80147f8:	4620      	mov	r0, r4
 80147fa:	f7f5 fbe7 	bl	8009fcc <_ZN11SimpleMutexC1Ev>
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014804:	330c      	adds	r3, #12
 8014806:	601c      	str	r4, [r3, #0]
}
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	4618      	mov	r0, r3
 801480c:	370c      	adds	r7, #12
 801480e:	46bd      	mov	sp, r7
 8014810:	bd90      	pop	{r4, r7, pc}
 8014812:	bf00      	nop
 8014814:	080253dc 	.word	0x080253dc
 8014818:	08023208 	.word	0x08023208

0801481c <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 801481c:	b590      	push	{r4, r7, lr}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	4a0e      	ldr	r2, [pc, #56]	; (8014860 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014830:	330c      	adds	r3, #12
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d00d      	beq.n	8014854 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801483e:	330c      	adds	r3, #12
 8014840:	681c      	ldr	r4, [r3, #0]
 8014842:	2c00      	cmp	r4, #0
 8014844:	d006      	beq.n	8014854 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8014846:	4620      	mov	r0, r4
 8014848:	f7f5 fbd2 	bl	8009ff0 <_ZN11SimpleMutexD1Ev>
 801484c:	2104      	movs	r1, #4
 801484e:	4620      	mov	r0, r4
 8014850:	f7f3 fafc 	bl	8007e4c <_ZdlPvj>
    }
}
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	4618      	mov	r0, r3
 8014858:	370c      	adds	r7, #12
 801485a:	46bd      	mov	sp, r7
 801485c:	bd90      	pop	{r4, r7, pc}
 801485e:	bf00      	nop
 8014860:	080253dc 	.word	0x080253dc

08014864 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
}
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f7ff ffd5 	bl	801481c <_ZN18MemoryLeakDetectorD1Ev>
 8014872:	f241 1150 	movw	r1, #4432	; 0x1150
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f7f3 fae8 	bl	8007e4c <_ZdlPvj>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	4618      	mov	r0, r3
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}

08014886 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8014886:	b580      	push	{r7, lr}
 8014888:	b082      	sub	sp, #8
 801488a:	af00      	add	r7, sp, #0
 801488c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	330c      	adds	r3, #12
 8014892:	4618      	mov	r0, r3
 8014894:	f7ff fd72 	bl	801437c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2203      	movs	r2, #3
 801489c:	721a      	strb	r2, [r3, #8]
}
 801489e:	bf00      	nop
 80148a0:	3708      	adds	r7, #8
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}

080148a6 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80148a6:	b480      	push	{r7}
 80148a8:	b083      	sub	sp, #12
 80148aa:	af00      	add	r7, sp, #0
 80148ac:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2202      	movs	r2, #2
 80148b2:	721a      	strb	r2, [r3, #8]
}
 80148b4:	bf00      	nop
 80148b6:	370c      	adds	r7, #12
 80148b8:	46bd      	mov	sp, r7
 80148ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148be:	4770      	bx	lr

080148c0 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80148c0:	b480      	push	{r7}
 80148c2:	b083      	sub	sp, #12
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2202      	movs	r2, #2
 80148cc:	721a      	strb	r2, [r3, #8]
}
 80148ce:	bf00      	nop
 80148d0:	370c      	adds	r7, #12
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr

080148da <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80148da:	b480      	push	{r7}
 80148dc:	b083      	sub	sp, #12
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80148e8:	330c      	adds	r3, #12
 80148ea:	681b      	ldr	r3, [r3, #0]
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	370c      	adds	r7, #12
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f023 0303 	bic.w	r3, r3, #3
 8014906:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8014908:	4618      	mov	r0, r3
 801490a:	370c      	adds	r7, #12
 801490c:	46bd      	mov	sp, r7
 801490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014912:	4770      	bx	lr

08014914 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	3303      	adds	r3, #3
 8014922:	4618      	mov	r0, r3
 8014924:	f7ff ffe8 	bl	80148f8 <_ZL31calculateVoidPointerAlignedSizej>
 8014928:	4603      	mov	r3, r0
}
 801492a:	4618      	mov	r0, r3
 801492c:	3708      	adds	r7, #8
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}

08014932 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8014932:	b580      	push	{r7, lr}
 8014934:	b084      	sub	sp, #16
 8014936:	af00      	add	r7, sp, #0
 8014938:	60f8      	str	r0, [r7, #12]
 801493a:	60b9      	str	r1, [r7, #8]
 801493c:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801493e:	6879      	ldr	r1, [r7, #4]
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f7ff ffe7 	bl	8014914 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014946:	4602      	mov	r2, r0
 8014948:	68bb      	ldr	r3, [r7, #8]
 801494a:	4413      	add	r3, r2
}
 801494c:	4618      	mov	r0, r3
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b08a      	sub	sp, #40	; 0x28
 8014958:	af06      	add	r7, sp, #24
 801495a:	60f8      	str	r0, [r7, #12]
 801495c:	60b9      	str	r1, [r7, #8]
 801495e:	607a      	str	r2, [r7, #4]
 8014960:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014968:	3304      	adds	r3, #4
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	1c51      	adds	r1, r2, #1
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014974:	3304      	adds	r3, #4
 8014976:	6019      	str	r1, [r3, #0]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	7a19      	ldrb	r1, [r3, #8]
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014982:	3308      	adds	r3, #8
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	6a38      	ldr	r0, [r7, #32]
 8014988:	9004      	str	r0, [sp, #16]
 801498a:	69f8      	ldr	r0, [r7, #28]
 801498c:	9003      	str	r0, [sp, #12]
 801498e:	9302      	str	r3, [sp, #8]
 8014990:	9101      	str	r1, [sp, #4]
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	9300      	str	r3, [sp, #0]
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	6879      	ldr	r1, [r7, #4]
 801499a:	68b8      	ldr	r0, [r7, #8]
 801499c:	f7ff fcfb 	bl	8014396 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	689a      	ldr	r2, [r3, #8]
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	4413      	add	r3, r2
 80149aa:	4619      	mov	r1, r3
 80149ac:	68f8      	ldr	r0, [r7, #12]
 80149ae:	f000 f861 	bl	8014a74 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149b8:	331c      	adds	r3, #28
 80149ba:	68b9      	ldr	r1, [r7, #8]
 80149bc:	4618      	mov	r0, r3
 80149be:	f7ff fe11 	bl	80145e4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80149c2:	bf00      	nop
 80149c4:	3710      	adds	r7, #16
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}

080149ca <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b08a      	sub	sp, #40	; 0x28
 80149ce:	af04      	add	r7, sp, #16
 80149d0:	60f8      	str	r0, [r7, #12]
 80149d2:	60b9      	str	r1, [r7, #8]
 80149d4:	607a      	str	r2, [r7, #4]
 80149d6:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80149d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149dc:	9302      	str	r3, [sp, #8]
 80149de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e0:	9301      	str	r3, [sp, #4]
 80149e2:	6a3b      	ldr	r3, [r7, #32]
 80149e4:	9300      	str	r3, [sp, #0]
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	68b9      	ldr	r1, [r7, #8]
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f000 f96f 	bl	8014cd0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80149f2:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d101      	bne.n	80149fe <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80149fa:	2300      	movs	r3, #0
 80149fc:	e017      	b.n	8014a2e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80149fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a02:	9300      	str	r3, [sp, #0]
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	683a      	ldr	r2, [r7, #0]
 8014a08:	68b9      	ldr	r1, [r7, #8]
 8014a0a:	68f8      	ldr	r0, [r7, #12]
 8014a0c:	f000 f98a 	bl	8014d24 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8014a10:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	9302      	str	r3, [sp, #8]
 8014a16:	6a3b      	ldr	r3, [r7, #32]
 8014a18:	9301      	str	r3, [sp, #4]
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	9300      	str	r3, [sp, #0]
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	697a      	ldr	r2, [r7, #20]
 8014a22:	6939      	ldr	r1, [r7, #16]
 8014a24:	68f8      	ldr	r0, [r7, #12]
 8014a26:	f7ff ff95 	bl	8014954 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	689b      	ldr	r3, [r3, #8]
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3718      	adds	r7, #24
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
	...

08014a38 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b084      	sub	sp, #16
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a48:	331c      	adds	r3, #28
 8014a4a:	6839      	ldr	r1, [r7, #0]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fdf6 	bl	801463e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8014a52:	60f8      	str	r0, [r7, #12]
  if (node)
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d006      	beq.n	8014a68 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8014a5a:	4b05      	ldr	r3, [pc, #20]	; (8014a70 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	68fa      	ldr	r2, [r7, #12]
 8014a60:	6812      	ldr	r2, [r2, #0]
 8014a62:	21cd      	movs	r1, #205	; 0xcd
 8014a64:	6838      	ldr	r0, [r7, #0]
 8014a66:	4798      	blx	r3
#endif
}
 8014a68:	bf00      	nop
 8014a6a:	3710      	adds	r7, #16
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	200000d4 	.word	0x200000d4

08014a74 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8014a74:	b480      	push	{r7}
 8014a76:	b085      	sub	sp, #20
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014a7e:	2300      	movs	r3, #0
 8014a80:	60fb      	str	r3, [r7, #12]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2b02      	cmp	r3, #2
 8014a86:	d812      	bhi.n	8014aae <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8014a88:	68f9      	ldr	r1, [r7, #12]
 8014a8a:	4b0c      	ldr	r3, [pc, #48]	; (8014abc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8014a8c:	fba3 2301 	umull	r2, r3, r3, r1
 8014a90:	085a      	lsrs	r2, r3, #1
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	1aca      	subs	r2, r1, r3
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	440b      	add	r3, r1
 8014aa0:	4907      	ldr	r1, [pc, #28]	; (8014ac0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8014aa2:	5c8a      	ldrb	r2, [r1, r2]
 8014aa4:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	60fb      	str	r3, [r7, #12]
 8014aac:	e7e9      	b.n	8014a82 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8014aae:	bf00      	nop
 8014ab0:	3714      	adds	r7, #20
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr
 8014aba:	bf00      	nop
 8014abc:	aaaaaaab 	.word	0xaaaaaaab
 8014ac0:	080253d0 	.word	0x080253d0

08014ac4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b085      	sub	sp, #20
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014ace:	2300      	movs	r3, #0
 8014ad0:	60fb      	str	r3, [r7, #12]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2b02      	cmp	r3, #2
 8014ad6:	d816      	bhi.n	8014b06 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8014ad8:	683a      	ldr	r2, [r7, #0]
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	4413      	add	r3, r2
 8014ade:	7818      	ldrb	r0, [r3, #0]
 8014ae0:	68f9      	ldr	r1, [r7, #12]
 8014ae2:	4b0c      	ldr	r3, [pc, #48]	; (8014b14 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8014ae4:	fba3 2301 	umull	r2, r3, r3, r1
 8014ae8:	085a      	lsrs	r2, r3, #1
 8014aea:	4613      	mov	r3, r2
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	4413      	add	r3, r2
 8014af0:	1aca      	subs	r2, r1, r3
 8014af2:	4b09      	ldr	r3, [pc, #36]	; (8014b18 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8014af4:	5c9b      	ldrb	r3, [r3, r2]
 8014af6:	4298      	cmp	r0, r3
 8014af8:	d001      	beq.n	8014afe <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8014afa:	2300      	movs	r3, #0
 8014afc:	e004      	b.n	8014b08 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	3301      	adds	r3, #1
 8014b02:	60fb      	str	r3, [r7, #12]
 8014b04:	e7e5      	b.n	8014ad2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8014b06:	2301      	movs	r3, #1
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3714      	adds	r7, #20
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr
 8014b14:	aaaaaaab 	.word	0xaaaaaaab
 8014b18:	080253d0 	.word	0x080253d0

08014b1c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b084      	sub	sp, #16
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	60f8      	str	r0, [r7, #12]
 8014b24:	60b9      	str	r1, [r7, #8]
 8014b26:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8014b28:	68ba      	ldr	r2, [r7, #8]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d101      	bne.n	8014b34 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8014b30:	2301      	movs	r3, #1
 8014b32:	e013      	b.n	8014b5c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	f083 0301 	eor.w	r3, r3, #1
 8014b40:	b2db      	uxtb	r3, r3
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d001      	beq.n	8014b4a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8014b46:	2301      	movs	r3, #1
 8014b48:	e008      	b.n	8014b5c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	331c      	adds	r3, #28
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68b9      	ldr	r1, [r7, #8]
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	4798      	blx	r3
 8014b58:	4603      	mov	r3, r0
 8014b5a:	bf00      	nop
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3710      	adds	r7, #16
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8014b64:	b590      	push	{r4, r7, lr}
 8014b66:	b087      	sub	sp, #28
 8014b68:	af02      	add	r7, sp, #8
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	695a      	ldr	r2, [r3, #20]
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	695b      	ldr	r3, [r3, #20]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	3328      	adds	r3, #40	; 0x28
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	4610      	mov	r0, r2
 8014b82:	4798      	blx	r3
 8014b84:	4604      	mov	r4, r0
 8014b86:	6a3b      	ldr	r3, [r7, #32]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	3328      	adds	r3, #40	; 0x28
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	6a38      	ldr	r0, [r7, #32]
 8014b90:	4798      	blx	r3
 8014b92:	4603      	mov	r3, r0
 8014b94:	461a      	mov	r2, r3
 8014b96:	4621      	mov	r1, r4
 8014b98:	68f8      	ldr	r0, [r7, #12]
 8014b9a:	f7ff ffbf 	bl	8014b1c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	f083 0301 	eor.w	r3, r3, #1
 8014ba4:	b2db      	uxtb	r3, r3
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d014      	beq.n	8014bd4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	f103 040c 	add.w	r4, r3, #12
 8014bb0:	6a3b      	ldr	r3, [r7, #32]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	3328      	adds	r3, #40	; 0x28
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	6a38      	ldr	r0, [r7, #32]
 8014bba:	4798      	blx	r3
 8014bbc:	4602      	mov	r2, r0
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	9301      	str	r3, [sp, #4]
 8014bc4:	9200      	str	r2, [sp, #0]
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	68b9      	ldr	r1, [r7, #8]
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f7ff fb4d 	bl	801426c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8014bd2:	e02e      	b.n	8014c32 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	689a      	ldr	r2, [r3, #8]
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	4413      	add	r3, r2
 8014bde:	4619      	mov	r1, r3
 8014be0:	68f8      	ldr	r0, [r7, #12]
 8014be2:	f7ff ff6f 	bl	8014ac4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8014be6:	4603      	mov	r3, r0
 8014be8:	f083 0301 	eor.w	r3, r3, #1
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d014      	beq.n	8014c1c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	f103 040c 	add.w	r4, r3, #12
 8014bf8:	6a3b      	ldr	r3, [r7, #32]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	3328      	adds	r3, #40	; 0x28
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	6a38      	ldr	r0, [r7, #32]
 8014c02:	4798      	blx	r3
 8014c04:	4602      	mov	r2, r0
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	9301      	str	r3, [sp, #4]
 8014c0c:	9200      	str	r2, [sp, #0]
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	687a      	ldr	r2, [r7, #4]
 8014c12:	68b9      	ldr	r1, [r7, #8]
 8014c14:	4620      	mov	r0, r4
 8014c16:	f7ff fb4f 	bl	80142b8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8014c1a:	e00a      	b.n	8014c32 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8014c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8014c24:	6a3b      	ldr	r3, [r7, #32]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	3324      	adds	r3, #36	; 0x24
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	68b9      	ldr	r1, [r7, #8]
 8014c2e:	6a38      	ldr	r0, [r7, #32]
 8014c30:	4798      	blx	r3
}
 8014c32:	bf00      	nop
 8014c34:	3714      	adds	r7, #20
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd90      	pop	{r4, r7, pc}
	...

08014c3c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b086      	sub	sp, #24
 8014c40:	af02      	add	r7, sp, #8
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
 8014c48:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8014c4a:	4b08      	ldr	r3, [pc, #32]	; (8014c6c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	78fb      	ldrb	r3, [r7, #3]
 8014c50:	9301      	str	r3, [sp, #4]
 8014c52:	2300      	movs	r3, #0
 8014c54:	9300      	str	r3, [sp, #0]
 8014c56:	4613      	mov	r3, r2
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	68b9      	ldr	r1, [r7, #8]
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	f000 f87f 	bl	8014d60 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8014c62:	4603      	mov	r3, r0
}
 8014c64:	4618      	mov	r0, r3
 8014c66:	3710      	adds	r7, #16
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	200000fc 	.word	0x200000fc

08014c70 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014c70:	b590      	push	{r4, r7, lr}
 8014c72:	b085      	sub	sp, #20
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	607a      	str	r2, [r7, #4]
 8014c7c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8014c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d00e      	beq.n	8014ca4 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	3308      	adds	r3, #8
 8014c8c:	681c      	ldr	r4, [r3, #0]
 8014c8e:	6879      	ldr	r1, [r7, #4]
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f7ff fe3f 	bl	8014914 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014c96:	4601      	mov	r1, r0
 8014c98:	6a3b      	ldr	r3, [r7, #32]
 8014c9a:	683a      	ldr	r2, [r7, #0]
 8014c9c:	68b8      	ldr	r0, [r7, #8]
 8014c9e:	47a0      	blx	r4
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	e010      	b.n	8014cc6 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	3308      	adds	r3, #8
 8014caa:	681c      	ldr	r4, [r3, #0]
 8014cac:	6879      	ldr	r1, [r7, #4]
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f7ff fe30 	bl	8014914 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	f103 0120 	add.w	r1, r3, #32
 8014cba:	6a3b      	ldr	r3, [r7, #32]
 8014cbc:	683a      	ldr	r2, [r7, #0]
 8014cbe:	68b8      	ldr	r0, [r7, #8]
 8014cc0:	47a0      	blx	r4
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	bf00      	nop
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3714      	adds	r7, #20
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd90      	pop	{r4, r7, pc}
	...

08014cd0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8014cd0:	b590      	push	{r4, r7, lr}
 8014cd2:	b085      	sub	sp, #20
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
 8014cdc:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8014cde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d00b      	beq.n	8014cfe <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8014ce6:	4b0e      	ldr	r3, [pc, #56]	; (8014d20 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8014ce8:	681c      	ldr	r4, [r3, #0]
 8014cea:	6839      	ldr	r1, [r7, #0]
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f7ff fe11 	bl	8014914 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	47a0      	blx	r4
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	e00c      	b.n	8014d18 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8014cfe:	4b08      	ldr	r3, [pc, #32]	; (8014d20 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8014d00:	681c      	ldr	r4, [r3, #0]
 8014d02:	6839      	ldr	r1, [r7, #0]
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f7ff fe05 	bl	8014914 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	3320      	adds	r3, #32
 8014d0e:	4619      	mov	r1, r3
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	47a0      	blx	r4
 8014d14:	4603      	mov	r3, r0
 8014d16:	bf00      	nop
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3714      	adds	r7, #20
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd90      	pop	{r4, r7, pc}
 8014d20:	200000c8 	.word	0x200000c8

08014d24 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	60b9      	str	r1, [r7, #8]
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8014d32:	7e3b      	ldrb	r3, [r7, #24]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d008      	beq.n	8014d4a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	3320      	adds	r3, #32
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2120      	movs	r1, #32
 8014d42:	68b8      	ldr	r0, [r7, #8]
 8014d44:	4798      	blx	r3
 8014d46:	4603      	mov	r3, r0
 8014d48:	e006      	b.n	8014d58 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	6839      	ldr	r1, [r7, #0]
 8014d4e:	68f8      	ldr	r0, [r7, #12]
 8014d50:	f7ff fdef 	bl	8014932 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8014d54:	4603      	mov	r3, r0
 8014d56:	bf00      	nop
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b08a      	sub	sp, #40	; 0x28
 8014d64:	af04      	add	r7, sp, #16
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	607a      	str	r2, [r7, #4]
 8014d6c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8014d6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d72:	9301      	str	r3, [sp, #4]
 8014d74:	6a3b      	ldr	r3, [r7, #32]
 8014d76:	9300      	str	r3, [sp, #0]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	68b9      	ldr	r1, [r7, #8]
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f7ff ff76 	bl	8014c70 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8014d84:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d101      	bne.n	8014d90 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	e017      	b.n	8014dc0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8014d90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d94:	9300      	str	r3, [sp, #0]
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	687a      	ldr	r2, [r7, #4]
 8014d9a:	68b9      	ldr	r1, [r7, #8]
 8014d9c:	68f8      	ldr	r0, [r7, #12]
 8014d9e:	f7ff ffc1 	bl	8014d24 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8014da2:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8014da4:	6a3b      	ldr	r3, [r7, #32]
 8014da6:	9302      	str	r3, [sp, #8]
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	9301      	str	r3, [sp, #4]
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	9300      	str	r3, [sp, #0]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	6939      	ldr	r1, [r7, #16]
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f7ff fdcc 	bl	8014954 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	689b      	ldr	r3, [r3, #8]
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3718      	adds	r7, #24
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014dc8:	b590      	push	{r4, r7, lr}
 8014dca:	b089      	sub	sp, #36	; 0x24
 8014dcc:	af02      	add	r7, sp, #8
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
 8014dd4:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d03a      	beq.n	8014e52 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014de2:	331c      	adds	r3, #28
 8014de4:	6879      	ldr	r1, [r7, #4]
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7ff fc13 	bl	8014612 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8014dec:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10b      	bne.n	8014e0c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f103 000c 	add.w	r0, r3, #12
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	9300      	str	r3, [sp, #0]
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e04:	6839      	ldr	r1, [r7, #0]
 8014e06:	f7ff fa0d 	bl	8014224 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8014e0a:	e023      	b.n	8014e54 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8014e0c:	68b8      	ldr	r0, [r7, #8]
 8014e0e:	f7f8 ff95 	bl	800dd3c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8014e12:	4603      	mov	r3, r0
 8014e14:	f083 0301 	eor.w	r3, r3, #1
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d01a      	beq.n	8014e54 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014e24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014e28:	9301      	str	r3, [sp, #4]
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	9300      	str	r3, [sp, #0]
 8014e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e30:	683a      	ldr	r2, [r7, #0]
 8014e32:	6979      	ldr	r1, [r7, #20]
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	f7ff fe95 	bl	8014b64 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	330c      	adds	r3, #12
 8014e40:	681c      	ldr	r4, [r3, #0]
 8014e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	693a      	ldr	r2, [r7, #16]
 8014e4a:	6879      	ldr	r1, [r7, #4]
 8014e4c:	68b8      	ldr	r0, [r7, #8]
 8014e4e:	47a0      	blx	r4
 8014e50:	e000      	b.n	8014e54 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8014e52:	bf00      	nop
    }
}
 8014e54:	371c      	adds	r7, #28
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd90      	pop	{r4, r7, pc}
	...

08014e5c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af02      	add	r7, sp, #8
 8014e62:	60f8      	str	r0, [r7, #12]
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	607a      	str	r2, [r7, #4]
 8014e68:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8014e6a:	4b08      	ldr	r3, [pc, #32]	; (8014e8c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	78fb      	ldrb	r3, [r7, #3]
 8014e70:	9301      	str	r3, [sp, #4]
 8014e72:	2300      	movs	r3, #0
 8014e74:	9300      	str	r3, [sp, #0]
 8014e76:	4613      	mov	r3, r2
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	68b9      	ldr	r1, [r7, #8]
 8014e7c:	68f8      	ldr	r0, [r7, #12]
 8014e7e:	f7ff ffa3 	bl	8014dc8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8014e82:	bf00      	nop
 8014e84:	3710      	adds	r7, #16
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	200000fc 	.word	0x200000fc

08014e90 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b08a      	sub	sp, #40	; 0x28
 8014e94:	af04      	add	r7, sp, #16
 8014e96:	60f8      	str	r0, [r7, #12]
 8014e98:	60b9      	str	r1, [r7, #8]
 8014e9a:	607a      	str	r2, [r7, #4]
 8014e9c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d023      	beq.n	8014eec <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014eaa:	331c      	adds	r3, #28
 8014eac:	6879      	ldr	r1, [r7, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fbaf 	bl	8014612 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8014eb4:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d10c      	bne.n	8014ed6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	f103 000c 	add.w	r0, r3, #12
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ecc:	6a39      	ldr	r1, [r7, #32]
 8014ece:	f7ff f9a9 	bl	8014224 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	e019      	b.n	8014f0a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014eda:	9301      	str	r3, [sp, #4]
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	9300      	str	r3, [sp, #0]
 8014ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee2:	6a3a      	ldr	r2, [r7, #32]
 8014ee4:	6979      	ldr	r1, [r7, #20]
 8014ee6:	68f8      	ldr	r0, [r7, #12]
 8014ee8:	f7ff fe3c 	bl	8014b64 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8014eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ef0:	9302      	str	r3, [sp, #8]
 8014ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef4:	9301      	str	r3, [sp, #4]
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	9300      	str	r3, [sp, #0]
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	687a      	ldr	r2, [r7, #4]
 8014efe:	68b9      	ldr	r1, [r7, #8]
 8014f00:	68f8      	ldr	r0, [r7, #12]
 8014f02:	f7ff fd62 	bl	80149ca <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014f06:	4603      	mov	r3, r0
 8014f08:	bf00      	nop
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3718      	adds	r7, #24
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b084      	sub	sp, #16
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	460b      	mov	r3, r1
 8014f1c:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f24:	331c      	adds	r3, #28
 8014f26:	78fa      	ldrb	r2, [r7, #3]
 8014f28:	4611      	mov	r1, r2
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7ff fbc0 	bl	80146b0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8014f30:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	330c      	adds	r3, #12
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7ff f882 	bl	8014040 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d010      	beq.n	8014f64 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	330c      	adds	r3, #12
 8014f46:	68f9      	ldr	r1, [r7, #12]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7ff f897 	bl	801407c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f54:	331c      	adds	r3, #28
 8014f56:	78fa      	ldrb	r2, [r7, #3]
 8014f58:	68f9      	ldr	r1, [r7, #12]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff fbcb 	bl	80146f6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014f60:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014f62:	e7eb      	b.n	8014f3c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	330c      	adds	r3, #12
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7ff f8e7 	bl	801413c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8014f6e:	bf00      	nop
 8014f70:	3710      	adds	r7, #16
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8014f76:	b580      	push	{r7, lr}
 8014f78:	b082      	sub	sp, #8
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	6078      	str	r0, [r7, #4]
 8014f7e:	460b      	mov	r3, r1
 8014f80:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8014f82:	78fb      	ldrb	r3, [r7, #3]
 8014f84:	4619      	mov	r1, r3
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f7ff ffc3 	bl	8014f12 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	330c      	adds	r3, #12
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7ff f9e5 	bl	8014360 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8014f96:	4603      	mov	r3, r0
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b084      	sub	sp, #16
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fae:	331c      	adds	r3, #28
 8014fb0:	2103      	movs	r1, #3
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7ff fb7c 	bl	80146b0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8014fb8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d011      	beq.n	8014fe4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	7e1b      	ldrb	r3, [r3, #24]
 8014fc4:	2b03      	cmp	r3, #3
 8014fc6:	d102      	bne.n	8014fce <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2202      	movs	r2, #2
 8014fcc:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014fd4:	331c      	adds	r3, #28
 8014fd6:	2203      	movs	r2, #3
 8014fd8:	68f9      	ldr	r1, [r7, #12]
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7ff fb8b 	bl	80146f6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014fe0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014fe2:	e7ea      	b.n	8014fba <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8014fe4:	bf00      	nop
 8014fe6:	3710      	adds	r7, #16
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ffe:	331c      	adds	r3, #28
 8015000:	78fa      	ldrb	r2, [r7, #3]
 8015002:	4611      	mov	r1, r2
 8015004:	4618      	mov	r0, r3
 8015006:	f7ff fb30 	bl	801466a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801500a:	4603      	mov	r3, r0
}
 801500c:	4618      	mov	r0, r3
 801500e:	3708      	adds	r7, #8
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}

08015014 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	60f8      	str	r0, [r7, #12]
 801501c:	60b9      	str	r1, [r7, #8]
 801501e:	607a      	str	r2, [r7, #4]
 8015020:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	68b9      	ldr	r1, [r7, #8]
 8015026:	4618      	mov	r0, r3
 8015028:	f7f5 fb13 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	3308      	adds	r3, #8
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	4618      	mov	r0, r3
 8015034:	f7f5 fb0d 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	683a      	ldr	r2, [r7, #0]
 801503c:	611a      	str	r2, [r3, #16]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	2200      	movs	r2, #0
 8015042:	615a      	str	r2, [r3, #20]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	4618      	mov	r0, r3
 8015048:	3710      	adds	r7, #16
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801504e:	b480      	push	{r7}
 8015050:	b083      	sub	sp, #12
 8015052:	af00      	add	r7, sp, #0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	6039      	str	r1, [r7, #0]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	4618      	mov	r0, r3
 801505c:	370c      	adds	r7, #12
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8015066:	b480      	push	{r7}
 8015068:	b083      	sub	sp, #12
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
 801506e:	6039      	str	r1, [r7, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	4618      	mov	r0, r3
 8015074:	370c      	adds	r7, #12
 8015076:	46bd      	mov	sp, r7
 8015078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507c:	4770      	bx	lr

0801507e <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801507e:	b480      	push	{r7}
 8015080:	b085      	sub	sp, #20
 8015082:	af00      	add	r7, sp, #0
 8015084:	60f8      	str	r0, [r7, #12]
 8015086:	60b9      	str	r1, [r7, #8]
 8015088:	4613      	mov	r3, r2
 801508a:	71fb      	strb	r3, [r7, #7]
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	4618      	mov	r0, r3
 8015090:	3714      	adds	r7, #20
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr

0801509a <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801509a:	b480      	push	{r7}
 801509c:	b085      	sub	sp, #20
 801509e:	af00      	add	r7, sp, #0
 80150a0:	60f8      	str	r0, [r7, #12]
 80150a2:	60b9      	str	r1, [r7, #8]
 80150a4:	607a      	str	r2, [r7, #4]
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	4618      	mov	r0, r3
 80150aa:	3714      	adds	r7, #20
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80150b4:	b480      	push	{r7}
 80150b6:	b085      	sub	sp, #20
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	60f8      	str	r0, [r7, #12]
 80150bc:	60b9      	str	r1, [r7, #8]
 80150be:	607a      	str	r2, [r7, #4]
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	4618      	mov	r0, r3
 80150c4:	3714      	adds	r7, #20
 80150c6:	46bd      	mov	sp, r7
 80150c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150cc:	4770      	bx	lr

080150ce <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80150ce:	b480      	push	{r7}
 80150d0:	b085      	sub	sp, #20
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	60f8      	str	r0, [r7, #12]
 80150d6:	60b9      	str	r1, [r7, #8]
 80150d8:	607a      	str	r2, [r7, #4]
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	4618      	mov	r0, r3
 80150de:	3714      	adds	r7, #20
 80150e0:	46bd      	mov	sp, r7
 80150e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e6:	4770      	bx	lr

080150e8 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80150e8:	b480      	push	{r7}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	60b9      	str	r1, [r7, #8]
 80150f2:	607a      	str	r2, [r7, #4]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	4618      	mov	r0, r3
 80150f8:	3714      	adds	r7, #20
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr

08015102 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8015102:	b480      	push	{r7}
 8015104:	b085      	sub	sp, #20
 8015106:	af00      	add	r7, sp, #0
 8015108:	60f8      	str	r0, [r7, #12]
 801510a:	60b9      	str	r1, [r7, #8]
 801510c:	4639      	mov	r1, r7
 801510e:	e881 000c 	stmia.w	r1, {r2, r3}
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	4618      	mov	r0, r3
 8015116:	3714      	adds	r7, #20
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8015120:	b480      	push	{r7}
 8015122:	b085      	sub	sp, #20
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	4639      	mov	r1, r7
 801512c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	4618      	mov	r0, r3
 8015134:	3714      	adds	r7, #20
 8015136:	46bd      	mov	sp, r7
 8015138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513c:	4770      	bx	lr

0801513e <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801513e:	b480      	push	{r7}
 8015140:	b085      	sub	sp, #20
 8015142:	af00      	add	r7, sp, #0
 8015144:	60f8      	str	r0, [r7, #12]
 8015146:	60b9      	str	r1, [r7, #8]
 8015148:	ed87 0b00 	vstr	d0, [r7]
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	4618      	mov	r0, r3
 8015150:	3714      	adds	r7, #20
 8015152:	46bd      	mov	sp, r7
 8015154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015158:	4770      	bx	lr

0801515a <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801515a:	b480      	push	{r7}
 801515c:	b085      	sub	sp, #20
 801515e:	af00      	add	r7, sp, #0
 8015160:	60f8      	str	r0, [r7, #12]
 8015162:	60b9      	str	r1, [r7, #8]
 8015164:	607a      	str	r2, [r7, #4]
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	4618      	mov	r0, r3
 801516a:	3714      	adds	r7, #20
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8015174:	b480      	push	{r7}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	4618      	mov	r0, r3
 8015184:	3714      	adds	r7, #20
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr

0801518e <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801518e:	b480      	push	{r7}
 8015190:	b085      	sub	sp, #20
 8015192:	af00      	add	r7, sp, #0
 8015194:	60f8      	str	r0, [r7, #12]
 8015196:	60b9      	str	r1, [r7, #8]
 8015198:	607a      	str	r2, [r7, #4]
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	4618      	mov	r0, r3
 801519e:	3714      	adds	r7, #20
 80151a0:	46bd      	mov	sp, r7
 80151a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a6:	4770      	bx	lr

080151a8 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80151a8:	b480      	push	{r7}
 80151aa:	b085      	sub	sp, #20
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	607a      	str	r2, [r7, #4]
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	4618      	mov	r0, r3
 80151b8:	3714      	adds	r7, #20
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr

080151c2 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80151c2:	b480      	push	{r7}
 80151c4:	b085      	sub	sp, #20
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	60f8      	str	r0, [r7, #12]
 80151ca:	60b9      	str	r1, [r7, #8]
 80151cc:	607a      	str	r2, [r7, #4]
 80151ce:	603b      	str	r3, [r7, #0]
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	4618      	mov	r0, r3
 80151d4:	3714      	adds	r7, #20
 80151d6:	46bd      	mov	sp, r7
 80151d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151dc:	4770      	bx	lr

080151de <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80151de:	b480      	push	{r7}
 80151e0:	b085      	sub	sp, #20
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	60f8      	str	r0, [r7, #12]
 80151e6:	60b9      	str	r1, [r7, #8]
 80151e8:	607a      	str	r2, [r7, #4]
 80151ea:	603b      	str	r3, [r7, #0]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	4618      	mov	r0, r3
 80151f0:	3714      	adds	r7, #20
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr

080151fa <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 80151fa:	b480      	push	{r7}
 80151fc:	b085      	sub	sp, #20
 80151fe:	af00      	add	r7, sp, #0
 8015200:	60f8      	str	r0, [r7, #12]
 8015202:	60b9      	str	r1, [r7, #8]
 8015204:	607a      	str	r2, [r7, #4]
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	4618      	mov	r0, r3
 801520a:	3714      	adds	r7, #20
 801520c:	46bd      	mov	sp, r7
 801520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015212:	4770      	bx	lr

08015214 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8015214:	b480      	push	{r7}
 8015216:	b085      	sub	sp, #20
 8015218:	af00      	add	r7, sp, #0
 801521a:	60f8      	str	r0, [r7, #12]
 801521c:	60b9      	str	r1, [r7, #8]
 801521e:	607a      	str	r2, [r7, #4]
 8015220:	603b      	str	r3, [r7, #0]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	4618      	mov	r0, r3
 8015226:	3714      	adds	r7, #20
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr

08015230 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8015230:	b480      	push	{r7}
 8015232:	b083      	sub	sp, #12
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	2300      	movs	r3, #0
 801523a:	4618      	mov	r0, r3
 801523c:	370c      	adds	r7, #12
 801523e:	46bd      	mov	sp, r7
 8015240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015244:	4770      	bx	lr
	...

08015248 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	6039      	str	r1, [r7, #0]
 8015252:	f107 0308 	add.w	r3, r7, #8
 8015256:	4909      	ldr	r1, [pc, #36]	; (801527c <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8015258:	4618      	mov	r0, r3
 801525a:	f7f5 f9a6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801525e:	f107 0308 	add.w	r3, r7, #8
 8015262:	4619      	mov	r1, r3
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f005 fec5 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801526a:	f107 0308 	add.w	r3, r7, #8
 801526e:	4618      	mov	r0, r3
 8015270:	f7f5 fd53 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	3710      	adds	r7, #16
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}
 801527c:	08023228 	.word	0x08023228

08015280 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8015280:	b480      	push	{r7}
 8015282:	b083      	sub	sp, #12
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	460b      	mov	r3, r1
 801528a:	70fb      	strb	r3, [r7, #3]
 801528c:	78fb      	ldrb	r3, [r7, #3]
 801528e:	4618      	mov	r0, r3
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 801529a:	b480      	push	{r7}
 801529c:	b083      	sub	sp, #12
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
 80152a2:	2300      	movs	r3, #0
 80152a4:	4618      	mov	r0, r3
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr

080152b0 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	2300      	movs	r3, #0
 80152ba:	4618      	mov	r0, r3
 80152bc:	370c      	adds	r7, #12
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr

080152c6 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 80152c6:	b480      	push	{r7}
 80152c8:	b083      	sub	sp, #12
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
 80152ce:	6039      	str	r1, [r7, #0]
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	4618      	mov	r0, r3
 80152d4:	370c      	adds	r7, #12
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr

080152de <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80152de:	b480      	push	{r7}
 80152e0:	b083      	sub	sp, #12
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
 80152e6:	2300      	movs	r3, #0
 80152e8:	4618      	mov	r0, r3
 80152ea:	370c      	adds	r7, #12
 80152ec:	46bd      	mov	sp, r7
 80152ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f2:	4770      	bx	lr

080152f4 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 80152f4:	b480      	push	{r7}
 80152f6:	b083      	sub	sp, #12
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	4618      	mov	r0, r3
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	2300      	movs	r3, #0
 8015316:	4618      	mov	r0, r3
 8015318:	370c      	adds	r7, #12
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr

08015322 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8015322:	b480      	push	{r7}
 8015324:	b083      	sub	sp, #12
 8015326:	af00      	add	r7, sp, #0
 8015328:	6078      	str	r0, [r7, #4]
 801532a:	6039      	str	r1, [r7, #0]
 801532c:	683b      	ldr	r3, [r7, #0]
 801532e:	4618      	mov	r0, r3
 8015330:	370c      	adds	r7, #12
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr

0801533a <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 801533a:	b580      	push	{r7, lr}
 801533c:	b082      	sub	sp, #8
 801533e:	af00      	add	r7, sp, #0
 8015340:	6078      	str	r0, [r7, #4]
 8015342:	6039      	str	r1, [r7, #0]
 8015344:	2100      	movs	r1, #0
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7f3 f972 	bl	8008630 <_ZN18cpputest_ulonglongC1Ei>
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8015354:	b480      	push	{r7}
 8015356:	b085      	sub	sp, #20
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	4639      	mov	r1, r7
 8015360:	e881 000c 	stmia.w	r1, {r2, r3}
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	461a      	mov	r2, r3
 8015368:	463b      	mov	r3, r7
 801536a:	cb03      	ldmia	r3!, {r0, r1}
 801536c:	6010      	str	r0, [r2, #0]
 801536e:	6051      	str	r1, [r2, #4]
 8015370:	68f8      	ldr	r0, [r7, #12]
 8015372:	3714      	adds	r7, #20
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr

0801537c <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
 8015386:	2100      	movs	r1, #0
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f7f3 f945 	bl	8008618 <_ZN17cpputest_longlongC1Ei>
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	3708      	adds	r7, #8
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8015396:	b480      	push	{r7}
 8015398:	b085      	sub	sp, #20
 801539a:	af00      	add	r7, sp, #0
 801539c:	60f8      	str	r0, [r7, #12]
 801539e:	60b9      	str	r1, [r7, #8]
 80153a0:	4639      	mov	r1, r7
 80153a2:	e881 000c 	stmia.w	r1, {r2, r3}
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	461a      	mov	r2, r3
 80153aa:	463b      	mov	r3, r7
 80153ac:	cb03      	ldmia	r3!, {r0, r1}
 80153ae:	6010      	str	r0, [r2, #0]
 80153b0:	6051      	str	r1, [r2, #4]
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	3714      	adds	r7, #20
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80153be:	b480      	push	{r7}
 80153c0:	b083      	sub	sp, #12
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]
 80153c6:	2300      	movs	r3, #0
 80153c8:	4618      	mov	r0, r3
 80153ca:	370c      	adds	r7, #12
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80153d4:	b480      	push	{r7}
 80153d6:	b083      	sub	sp, #12
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	4618      	mov	r0, r3
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr

080153ec <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	f04f 0200 	mov.w	r2, #0
 80153f8:	f04f 0300 	mov.w	r3, #0
 80153fc:	ec43 2b17 	vmov	d7, r2, r3
 8015400:	eeb0 0a47 	vmov.f32	s0, s14
 8015404:	eef0 0a67 	vmov.f32	s1, s15
 8015408:	370c      	adds	r7, #12
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr

08015412 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8015412:	b480      	push	{r7}
 8015414:	b085      	sub	sp, #20
 8015416:	af00      	add	r7, sp, #0
 8015418:	60f8      	str	r0, [r7, #12]
 801541a:	ed87 0b00 	vstr	d0, [r7]
 801541e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015422:	ec43 2b17 	vmov	d7, r2, r3
 8015426:	eeb0 0a47 	vmov.f32	s0, s14
 801542a:	eef0 0a67 	vmov.f32	s1, s15
 801542e:	3714      	adds	r7, #20
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr

08015438 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8015438:	b480      	push	{r7}
 801543a:	b083      	sub	sp, #12
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	4b03      	ldr	r3, [pc, #12]	; (8015450 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8015442:	4618      	mov	r0, r3
 8015444:	370c      	adds	r7, #12
 8015446:	46bd      	mov	sp, r7
 8015448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544c:	4770      	bx	lr
 801544e:	bf00      	nop
 8015450:	08023228 	.word	0x08023228

08015454 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8015454:	b480      	push	{r7}
 8015456:	b083      	sub	sp, #12
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	6039      	str	r1, [r7, #0]
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	4618      	mov	r0, r3
 8015462:	370c      	adds	r7, #12
 8015464:	46bd      	mov	sp, r7
 8015466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546a:	4770      	bx	lr

0801546c <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 801546c:	b480      	push	{r7}
 801546e:	b083      	sub	sp, #12
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	2300      	movs	r3, #0
 8015476:	4618      	mov	r0, r3
 8015478:	370c      	adds	r7, #12
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr

08015482 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8015482:	b480      	push	{r7}
 8015484:	b083      	sub	sp, #12
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
 801548a:	6039      	str	r1, [r7, #0]
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	4618      	mov	r0, r3
 8015490:	370c      	adds	r7, #12
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr

0801549a <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 801549a:	b480      	push	{r7}
 801549c:	b083      	sub	sp, #12
 801549e:	af00      	add	r7, sp, #0
 80154a0:	6078      	str	r0, [r7, #4]
 80154a2:	2300      	movs	r3, #0
 80154a4:	4618      	mov	r0, r3
 80154a6:	370c      	adds	r7, #12
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr

080154b0 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 80154b0:	b480      	push	{r7}
 80154b2:	b083      	sub	sp, #12
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	4618      	mov	r0, r3
 80154be:	370c      	adds	r7, #12
 80154c0:	46bd      	mov	sp, r7
 80154c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c6:	4770      	bx	lr

080154c8 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80154c8:	b480      	push	{r7}
 80154ca:	b083      	sub	sp, #12
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
 80154d0:	2300      	movs	r3, #0
 80154d2:	4618      	mov	r0, r3
 80154d4:	370c      	adds	r7, #12
 80154d6:	46bd      	mov	sp, r7
 80154d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154dc:	4770      	bx	lr

080154de <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
 80154e6:	6039      	str	r1, [r7, #0]
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	4618      	mov	r0, r3
 80154ec:	370c      	adds	r7, #12
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80154f6:	b480      	push	{r7}
 80154f8:	b083      	sub	sp, #12
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
 80154fe:	6039      	str	r1, [r7, #0]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	4618      	mov	r0, r3
 8015504:	370c      	adds	r7, #12
 8015506:	46bd      	mov	sp, r7
 8015508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550c:	4770      	bx	lr
	...

08015510 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8015510:	b480      	push	{r7}
 8015512:	b083      	sub	sp, #12
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	4a04      	ldr	r2, [pc, #16]	; (801552c <_ZN14MockActualCallC1Ev+0x1c>)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	601a      	str	r2, [r3, #0]
{
}
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	4618      	mov	r0, r3
 8015522:	370c      	adds	r7, #12
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr
 801552c:	080257d4 	.word	0x080257d4

08015530 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8015530:	b480      	push	{r7}
 8015532:	b083      	sub	sp, #12
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	4a04      	ldr	r2, [pc, #16]	; (801554c <_ZN14MockActualCallD1Ev+0x1c>)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	601a      	str	r2, [r3, #0]
{
}
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	4618      	mov	r0, r3
 8015542:	370c      	adds	r7, #12
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr
 801554c:	080257d4 	.word	0x080257d4

08015550 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	3304      	adds	r3, #4
 801555e:	6839      	ldr	r1, [r7, #0]
 8015560:	4618      	mov	r0, r3
 8015562:	f7f5 f88e 	bl	800a682 <_ZN12SimpleStringaSERKS_>
}
 8015566:	bf00      	nop
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}

0801556e <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 801556e:	b580      	push	{r7, lr}
 8015570:	b082      	sub	sp, #8
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
 8015576:	6039      	str	r1, [r7, #0]
    return functionName_;
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	3304      	adds	r3, #4
 801557c:	4619      	mov	r1, r3
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7f5 f867 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	607a      	str	r2, [r7, #4]
 8015598:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	4618      	mov	r0, r3
 801559e:	f7ff ffb7 	bl	8015510 <_ZN14MockActualCallC1Ev>
 80155a2:	4a17      	ldr	r2, [pc, #92]	; (8015600 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	601a      	str	r2, [r3, #0]
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	3304      	adds	r3, #4
 80155ac:	4915      	ldr	r1, [pc, #84]	; (8015604 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f4 fffb 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	68ba      	ldr	r2, [r7, #8]
 80155b8:	60da      	str	r2, [r3, #12]
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	611a      	str	r2, [r3, #16]
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	2202      	movs	r2, #2
 80155c4:	751a      	strb	r2, [r3, #20]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2200      	movs	r2, #0
 80155ca:	755a      	strb	r2, [r3, #21]
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	2200      	movs	r2, #0
 80155d0:	619a      	str	r2, [r3, #24]
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	331c      	adds	r3, #28
 80155d6:	4618      	mov	r0, r3
 80155d8:	f004 f814 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	683a      	ldr	r2, [r7, #0]
 80155e0:	625a      	str	r2, [r3, #36]	; 0x24
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	2200      	movs	r2, #0
 80155e6:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	331c      	adds	r3, #28
 80155ec:	6839      	ldr	r1, [r7, #0]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f004 f986 	bl	8019900 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	4618      	mov	r0, r3
 80155f8:	3710      	adds	r7, #16
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	080256d4 	.word	0x080256d4
 8015604:	08023228 	.word	0x08023228

08015608 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	4a0c      	ldr	r2, [pc, #48]	; (8015644 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f001 fae4 	bl	8016be4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	331c      	adds	r3, #28
 8015620:	4618      	mov	r0, r3
 8015622:	f004 f803 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	3304      	adds	r3, #4
 801562a:	4618      	mov	r0, r3
 801562c:	f7f5 fb75 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	4618      	mov	r0, r3
 8015634:	f7ff ff7c 	bl	8015530 <_ZN14MockActualCallD1Ev>
}
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	4618      	mov	r0, r3
 801563c:	3708      	adds	r7, #8
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}
 8015642:	bf00      	nop
 8015644:	080256d4 	.word	0x080256d4

08015648 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8015648:	b580      	push	{r7, lr}
 801564a:	b082      	sub	sp, #8
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
}
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f7ff ffd9 	bl	8015608 <_ZN21MockCheckedActualCallD1Ev>
 8015656:	212c      	movs	r1, #44	; 0x2c
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7f2 fbf7 	bl	8007e4c <_ZdlPvj>
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4618      	mov	r0, r3
 8015662:	3708      	adds	r7, #8
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}

08015668 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8015668:	b480      	push	{r7}
 801566a:	b083      	sub	sp, #12
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	683a      	ldr	r2, [r7, #0]
 8015676:	611a      	str	r2, [r3, #16]
}
 8015678:	bf00      	nop
 801567a:	370c      	adds	r7, #12
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	691a      	ldr	r2, [r3, #16]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	691b      	ldr	r3, [r3, #16]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	330c      	adds	r3, #12
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	4610      	mov	r0, r2
 801569c:	4798      	blx	r3
 801569e:	4603      	mov	r3, r0
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3708      	adds	r7, #8
 80156a4:	46bd      	mov	sp, r7
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	33c0      	adds	r3, #192	; 0xc0
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	4798      	blx	r3
 80156be:	4603      	mov	r3, r0
 80156c0:	f083 0301 	eor.w	r3, r3, #1
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d010      	beq.n	80156ec <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	33ec      	adds	r3, #236	; 0xec
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	2101      	movs	r1, #1
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	4798      	blx	r3
        reporter_->failTest(failure);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	691a      	ldr	r2, [r3, #16]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	691b      	ldr	r3, [r3, #16]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	3308      	adds	r3, #8
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	6839      	ldr	r1, [r7, #0]
 80156e8:	4610      	mov	r0, r2
 80156ea:	4798      	blx	r3
    }
}
 80156ec:	bf00      	nop
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80156f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f8:	b0bc      	sub	sp, #240	; 0xf0
 80156fa:	af00      	add	r7, sp, #0
 80156fc:	6078      	str	r0, [r7, #4]
 80156fe:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015708:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801570c:	2b00      	cmp	r3, #0
 801570e:	f000 80f5 	beq.w	80158fc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	339c      	adds	r3, #156	; 0x9c
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801571e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015722:	6839      	ldr	r1, [r7, #0]
 8015724:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8015726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801572a:	4618      	mov	r0, r3
 801572c:	f006 fa6c 	bl	801bc08 <_ZNK14MockNamedValue9getCopierEv>
 8015730:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8015734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015738:	2b00      	cmp	r3, #0
 801573a:	d013      	beq.n	8015764 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 801573c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	3308      	adds	r3, #8
 8015744:	681c      	ldr	r4, [r3, #0]
 8015746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801574a:	691d      	ldr	r5, [r3, #16]
 801574c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015750:	4618      	mov	r0, r3
 8015752:	f006 fa29 	bl	801bba8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8015756:	4603      	mov	r3, r0
 8015758:	461a      	mov	r2, r3
 801575a:	4629      	mov	r1, r5
 801575c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015760:	47a0      	blx	r4
 8015762:	e0c0      	b.n	80158e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8015764:	2500      	movs	r5, #0
 8015766:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801576a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801576e:	4611      	mov	r1, r2
 8015770:	4618      	mov	r0, r3
 8015772:	f005 ff0c 	bl	801b58e <_ZNK14MockNamedValue7getTypeEv>
 8015776:	2601      	movs	r6, #1
 8015778:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801577c:	4962      	ldr	r1, [pc, #392]	; (8015908 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801577e:	4618      	mov	r0, r3
 8015780:	f7f4 ff13 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8015784:	f04f 0801 	mov.w	r8, #1
 8015788:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801578c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f7f5 facd 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d015      	beq.n	80157ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801579e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80157a2:	f103 0408 	add.w	r4, r3, #8
 80157a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80157aa:	4958      	ldr	r1, [pc, #352]	; (801590c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7f4 fefc 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80157b2:	2501      	movs	r5, #1
 80157b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80157b8:	4619      	mov	r1, r3
 80157ba:	4620      	mov	r0, r4
 80157bc:	f7f5 fab9 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80157c0:	4603      	mov	r3, r0
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d001      	beq.n	80157ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80157c6:	2401      	movs	r4, #1
 80157c8:	e000      	b.n	80157cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80157ca:	2400      	movs	r4, #0
 80157cc:	2d00      	cmp	r5, #0
 80157ce:	d004      	beq.n	80157da <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80157d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7f5 faa0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80157da:	f1b8 0f00 	cmp.w	r8, #0
 80157de:	d004      	beq.n	80157ea <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80157e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7f5 fa98 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80157ea:	2e00      	cmp	r6, #0
 80157ec:	d004      	beq.n	80157f8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80157ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7f5 fa91 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80157f8:	2c00      	cmp	r4, #0
 80157fa:	d018      	beq.n	801582e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80157fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015800:	4618      	mov	r0, r3
 8015802:	f006 f959 	bl	801bab8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8015806:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801580a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801580e:	4618      	mov	r0, r3
 8015810:	f006 f9e2 	bl	801bbd8 <_ZNK14MockNamedValue7getSizeEv>
 8015814:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8015818:	4b3d      	ldr	r3, [pc, #244]	; (8015910 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015820:	6910      	ldr	r0, [r2, #16]
 8015822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015826:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801582a:	4798      	blx	r3
 801582c:	e05b      	b.n	80158e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801582e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015832:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015836:	4611      	mov	r1, r2
 8015838:	4618      	mov	r0, r3
 801583a:	f005 fe99 	bl	801b570 <_ZNK14MockNamedValue7getNameEv>
 801583e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015842:	4934      	ldr	r1, [pc, #208]	; (8015914 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8015844:	4618      	mov	r0, r3
 8015846:	f7f4 feb0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801584a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801584e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015852:	4611      	mov	r1, r2
 8015854:	4618      	mov	r0, r3
 8015856:	f7f5 fab1 	bl	800adbc <_ZneRK12SimpleStringS1_>
 801585a:	4603      	mov	r3, r0
 801585c:	461c      	mov	r4, r3
 801585e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015862:	4618      	mov	r0, r3
 8015864:	f7f5 fa59 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8015868:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801586c:	4618      	mov	r0, r3
 801586e:	f7f5 fa54 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8015872:	2c00      	cmp	r4, #0
 8015874:	d037      	beq.n	80158e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	339c      	adds	r3, #156	; 0x9c
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015882:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8015886:	6839      	ldr	r1, [r7, #0]
 8015888:	4798      	blx	r3
 801588a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801588e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015892:	4611      	mov	r1, r2
 8015894:	4618      	mov	r0, r3
 8015896:	f005 fe7a 	bl	801b58e <_ZNK14MockNamedValue7getTypeEv>
 801589a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801589e:	4618      	mov	r0, r3
 80158a0:	f005 fbd2 	bl	801b048 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	33cc      	adds	r3, #204	; 0xcc
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	4798      	blx	r3
 80158b0:	4601      	mov	r1, r0
 80158b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80158b6:	f107 030c 	add.w	r3, r7, #12
 80158ba:	4618      	mov	r0, r3
 80158bc:	f005 faee 	bl	801ae9c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	33dc      	adds	r3, #220	; 0xdc
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	f107 020c 	add.w	r2, r7, #12
 80158cc:	4611      	mov	r1, r2
 80158ce:	6878      	ldr	r0, [r7, #4]
 80158d0:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80158d2:	f107 030c 	add.w	r3, r7, #12
 80158d6:	4618      	mov	r0, r3
 80158d8:	f001 ffe2 	bl	80178a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80158dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7f5 fa1a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80158e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80158ea:	4618      	mov	r0, r3
 80158ec:	f005 fbac 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80158f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80158f4:	695b      	ldr	r3, [r3, #20]
 80158f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80158fa:	e705      	b.n	8015708 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80158fc:	bf00      	nop
 80158fe:	37f0      	adds	r7, #240	; 0xf0
 8015900:	46bd      	mov	sp, r7
 8015902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015906:	bf00      	nop
 8015908:	0802322c 	.word	0x0802322c
 801590c:	08023238 	.word	0x08023238
 8015910:	200000d0 	.word	0x200000d0
 8015914:	08023228 	.word	0x08023228

08015918 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	331c      	adds	r3, #28
 8015924:	4618      	mov	r0, r3
 8015926:	f004 f9bb 	bl	8019ca0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801592a:	4602      	mov	r2, r0
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	699b      	ldr	r3, [r3, #24]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d00f      	beq.n	8015958 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	33d4      	adds	r3, #212	; 0xd4
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	6992      	ldr	r2, [r2, #24]
 8015944:	4611      	mov	r1, r2
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	4798      	blx	r3
        callHasSucceeded();
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	33d0      	adds	r3, #208	; 0xd0
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8015956:	e00f      	b.n	8015978 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	331c      	adds	r3, #28
 801595c:	4618      	mov	r0, r3
 801595e:	f004 f9cc 	bl	8019cfa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8015962:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d006      	beq.n	8015978 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	33d4      	adds	r3, #212	; 0xd4
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	68f9      	ldr	r1, [r7, #12]
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	4798      	blx	r3
}
 8015978:	bf00      	nop
 801597a:	3710      	adds	r7, #16
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	33ec      	adds	r3, #236	; 0xec
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	2102      	movs	r1, #2
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	4798      	blx	r3
}
 8015996:	bf00      	nop
 8015998:	3708      	adds	r7, #8
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801599e:	b580      	push	{r7, lr}
 80159a0:	b082      	sub	sp, #8
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	699b      	ldr	r3, [r3, #24]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d00b      	beq.n	80159c6 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	699a      	ldr	r2, [r3, #24]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	699b      	ldr	r3, [r3, #24]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	33ec      	adds	r3, #236	; 0xec
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	4610      	mov	r0, r2
 80159be:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2200      	movs	r2, #0
 80159c4:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	331c      	adds	r3, #28
 80159ca:	4618      	mov	r0, r3
 80159cc:	f004 f85c 	bl	8019a88 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80159d0:	bf00      	nop
 80159d2:	3708      	adds	r7, #8
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80159d8:	b590      	push	{r4, r7, lr}
 80159da:	b091      	sub	sp, #68	; 0x44
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
    setName(name);
 80159e2:	6839      	ldr	r1, [r7, #0]
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7ff fdb3 	bl	8015550 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	33ec      	adds	r3, #236	; 0xec
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	2100      	movs	r1, #0
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	331c      	adds	r3, #28
 80159fc:	6839      	ldr	r1, [r7, #0]
 80159fe:	4618      	mov	r0, r3
 8015a00:	f003 ffec 	bl	80199dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	331c      	adds	r3, #28
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f003 fe7c 	bl	8019706 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d01d      	beq.n	8015a50 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	33cc      	adds	r3, #204	; 0xcc
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	4798      	blx	r3
 8015a20:	4601      	mov	r1, r0
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a26:	f107 000c 	add.w	r0, r7, #12
 8015a2a:	683a      	ldr	r2, [r7, #0]
 8015a2c:	f004 fe24 	bl	801a678 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	33dc      	adds	r3, #220	; 0xdc
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	f107 020c 	add.w	r2, r7, #12
 8015a3c:	4611      	mov	r1, r2
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	4798      	blx	r3
        return *this;
 8015a42:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015a44:	f107 030c 	add.w	r3, r7, #12
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f001 ff4b 	bl	80178e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8015a4e:	e006      	b.n	8015a5e <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	33d8      	adds	r3, #216	; 0xd8
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	4798      	blx	r3

    return *this;
 8015a5c:	687c      	ldr	r4, [r7, #4]
 8015a5e:	4623      	mov	r3, r4
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3744      	adds	r7, #68	; 0x44
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd90      	pop	{r4, r7, pc}

08015a68 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8015a68:	b480      	push	{r7}
 8015a6a:	b083      	sub	sp, #12
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	6039      	str	r1, [r7, #0]
    return *this;
 8015a72:	687b      	ldr	r3, [r7, #4]
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8015a80:	b590      	push	{r4, r7, lr}
 8015a82:	b097      	sub	sp, #92	; 0x5c
 8015a84:	af02      	add	r7, sp, #8
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	33c0      	adds	r3, #192	; 0xc0
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	4798      	blx	r3
 8015a96:	4603      	mov	r3, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d164      	bne.n	8015b66 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	33ec      	adds	r3, #236	; 0xec
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2100      	movs	r1, #0
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	33e8      	adds	r3, #232	; 0xe8
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	331c      	adds	r3, #28
 8015aba:	6839      	ldr	r1, [r7, #0]
 8015abc:	4618      	mov	r0, r3
 8015abe:	f004 f86b 	bl	8019b98 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	331c      	adds	r3, #28
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f003 fe1d 	bl	8019706 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015acc:	4603      	mov	r3, r0
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d02b      	beq.n	8015b2a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	33cc      	adds	r3, #204	; 0xcc
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	4798      	blx	r3
 8015ade:	4604      	mov	r4, r0
 8015ae0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015ae4:	6879      	ldr	r1, [r7, #4]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7ff fd41 	bl	801556e <_ZNK21MockCheckedActualCall7getNameEv>
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015af4:	f107 000c 	add.w	r0, r7, #12
 8015af8:	9300      	str	r3, [sp, #0]
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	4621      	mov	r1, r4
 8015afe:	f004 fe7f 	bl	801a800 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7f5 f907 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	33dc      	adds	r3, #220	; 0xdc
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f107 020c 	add.w	r2, r7, #12
 8015b18:	4611      	mov	r1, r2
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8015b1e:	f107 030c 	add.w	r3, r7, #12
 8015b22:	4618      	mov	r0, r3
 8015b24:	f001 ff00 	bl	8017928 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8015b28:	e01e      	b.n	8015b68 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f103 041c 	add.w	r4, r3, #28
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	335c      	adds	r3, #92	; 0x5c
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015b3c:	6839      	ldr	r1, [r7, #0]
 8015b3e:	4610      	mov	r0, r2
 8015b40:	4798      	blx	r3
 8015b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015b46:	4619      	mov	r1, r3
 8015b48:	4620      	mov	r0, r4
 8015b4a:	f004 f9b8 	bl	8019ebe <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8015b4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7f5 f8e1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	33d8      	adds	r3, #216	; 0xd8
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	4798      	blx	r3
 8015b64:	e000      	b.n	8015b68 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8015b66:	bf00      	nop
}
 8015b68:	3754      	adds	r7, #84	; 0x54
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd90      	pop	{r4, r7, pc}

08015b6e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8015b6e:	b590      	push	{r4, r7, lr}
 8015b70:	b097      	sub	sp, #92	; 0x5c
 8015b72:	af02      	add	r7, sp, #8
 8015b74:	6078      	str	r0, [r7, #4]
 8015b76:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	33c0      	adds	r3, #192	; 0xc0
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	4798      	blx	r3
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d164      	bne.n	8015c54 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	33ec      	adds	r3, #236	; 0xec
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2100      	movs	r1, #0
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	33e8      	adds	r3, #232	; 0xe8
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	6878      	ldr	r0, [r7, #4]
 8015ba2:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	331c      	adds	r3, #28
 8015ba8:	6839      	ldr	r1, [r7, #0]
 8015baa:	4618      	mov	r0, r3
 8015bac:	f004 f820 	bl	8019bf0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	331c      	adds	r3, #28
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f003 fda6 	bl	8019706 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d02b      	beq.n	8015c18 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	33cc      	adds	r3, #204	; 0xcc
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	4798      	blx	r3
 8015bcc:	4604      	mov	r4, r0
 8015bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015bd2:	6879      	ldr	r1, [r7, #4]
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f7ff fcca 	bl	801556e <_ZNK21MockCheckedActualCall7getNameEv>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bde:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015be2:	f107 000c 	add.w	r0, r7, #12
 8015be6:	9300      	str	r3, [sp, #0]
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	4621      	mov	r1, r4
 8015bec:	f004 ff6a 	bl	801aac4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015bf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7f5 f890 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	33dc      	adds	r3, #220	; 0xdc
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	f107 020c 	add.w	r2, r7, #12
 8015c06:	4611      	mov	r1, r2
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8015c0c:	f107 030c 	add.w	r3, r7, #12
 8015c10:	4618      	mov	r0, r3
 8015c12:	f001 feab 	bl	801796c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8015c16:	e01e      	b.n	8015c56 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	f103 041c 	add.w	r4, r3, #28
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	335c      	adds	r3, #92	; 0x5c
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015c2a:	6839      	ldr	r1, [r7, #0]
 8015c2c:	4610      	mov	r0, r2
 8015c2e:	4798      	blx	r3
 8015c30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c34:	4619      	mov	r1, r3
 8015c36:	4620      	mov	r0, r4
 8015c38:	f004 f95e 	bl	8019ef8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8015c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7f5 f86a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	33d8      	adds	r3, #216	; 0xd8
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	4798      	blx	r3
 8015c52:	e000      	b.n	8015c56 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8015c54:	bf00      	nop
}
 8015c56:	3754      	adds	r7, #84	; 0x54
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd90      	pop	{r4, r7, pc}

08015c5c <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8015c5c:	b590      	push	{r4, r7, lr}
 8015c5e:	b093      	sub	sp, #76	; 0x4c
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	60f8      	str	r0, [r7, #12]
 8015c64:	60b9      	str	r1, [r7, #8]
 8015c66:	4613      	mov	r3, r2
 8015c68:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8015c6a:	f107 0310 	add.w	r3, r7, #16
 8015c6e:	68b9      	ldr	r1, [r7, #8]
 8015c70:	4618      	mov	r0, r3
 8015c72:	f005 f9bf 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015c76:	79fa      	ldrb	r2, [r7, #7]
 8015c78:	f107 0310 	add.w	r3, r7, #16
 8015c7c:	4611      	mov	r1, r2
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f005 fa0a 	bl	801b098 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	33e0      	adds	r3, #224	; 0xe0
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	f107 0210 	add.w	r2, r7, #16
 8015c90:	4611      	mov	r1, r2
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	4798      	blx	r3
    return *this;
 8015c96:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015c98:	f107 0310 	add.w	r3, r7, #16
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f005 f9d3 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015ca2:	4623      	mov	r3, r4
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	374c      	adds	r7, #76	; 0x4c
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd90      	pop	{r4, r7, pc}

08015cac <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8015cac:	b590      	push	{r4, r7, lr}
 8015cae:	b093      	sub	sp, #76	; 0x4c
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	60f8      	str	r0, [r7, #12]
 8015cb4:	60b9      	str	r1, [r7, #8]
 8015cb6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015cb8:	f107 0310 	add.w	r3, r7, #16
 8015cbc:	68b9      	ldr	r1, [r7, #8]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f005 f998 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015cc4:	f107 0310 	add.w	r3, r7, #16
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f005 fa08 	bl	801b0e0 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	33e0      	adds	r3, #224	; 0xe0
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	f107 0210 	add.w	r2, r7, #16
 8015cdc:	4611      	mov	r1, r2
 8015cde:	68f8      	ldr	r0, [r7, #12]
 8015ce0:	4798      	blx	r3
    return *this;
 8015ce2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015ce4:	f107 0310 	add.w	r3, r7, #16
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f005 f9ad 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015cee:	4623      	mov	r3, r4
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	374c      	adds	r7, #76	; 0x4c
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd90      	pop	{r4, r7, pc}

08015cf8 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8015cf8:	b590      	push	{r4, r7, lr}
 8015cfa:	b093      	sub	sp, #76	; 0x4c
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015d04:	f107 0310 	add.w	r3, r7, #16
 8015d08:	68b9      	ldr	r1, [r7, #8]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f005 f972 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015d10:	f107 0310 	add.w	r3, r7, #16
 8015d14:	6879      	ldr	r1, [r7, #4]
 8015d16:	4618      	mov	r0, r3
 8015d18:	f005 fa04 	bl	801b124 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	33e0      	adds	r3, #224	; 0xe0
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	f107 0210 	add.w	r2, r7, #16
 8015d28:	4611      	mov	r1, r2
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	4798      	blx	r3
    return *this;
 8015d2e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015d30:	f107 0310 	add.w	r3, r7, #16
 8015d34:	4618      	mov	r0, r3
 8015d36:	f005 f987 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015d3a:	4623      	mov	r3, r4
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	374c      	adds	r7, #76	; 0x4c
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd90      	pop	{r4, r7, pc}

08015d44 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8015d44:	b590      	push	{r4, r7, lr}
 8015d46:	b093      	sub	sp, #76	; 0x4c
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	60f8      	str	r0, [r7, #12]
 8015d4c:	60b9      	str	r1, [r7, #8]
 8015d4e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015d50:	f107 0310 	add.w	r3, r7, #16
 8015d54:	68b9      	ldr	r1, [r7, #8]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f005 f94c 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015d5c:	f107 0310 	add.w	r3, r7, #16
 8015d60:	6879      	ldr	r1, [r7, #4]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f005 fa22 	bl	801b1ac <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	33e0      	adds	r3, #224	; 0xe0
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	f107 0210 	add.w	r2, r7, #16
 8015d74:	4611      	mov	r1, r2
 8015d76:	68f8      	ldr	r0, [r7, #12]
 8015d78:	4798      	blx	r3
    return *this;
 8015d7a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015d7c:	f107 0310 	add.w	r3, r7, #16
 8015d80:	4618      	mov	r0, r3
 8015d82:	f005 f961 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015d86:	4623      	mov	r3, r4
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	374c      	adds	r7, #76	; 0x4c
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd90      	pop	{r4, r7, pc}

08015d90 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8015d90:	b590      	push	{r4, r7, lr}
 8015d92:	b093      	sub	sp, #76	; 0x4c
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015d9c:	f107 0310 	add.w	r3, r7, #16
 8015da0:	68b9      	ldr	r1, [r7, #8]
 8015da2:	4618      	mov	r0, r3
 8015da4:	f005 f926 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015da8:	f107 0310 	add.w	r3, r7, #16
 8015dac:	6879      	ldr	r1, [r7, #4]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f005 f9da 	bl	801b168 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	33e0      	adds	r3, #224	; 0xe0
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	f107 0210 	add.w	r2, r7, #16
 8015dc0:	4611      	mov	r1, r2
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	4798      	blx	r3
    return *this;
 8015dc6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015dc8:	f107 0310 	add.w	r3, r7, #16
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f005 f93b 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015dd2:	4623      	mov	r3, r4
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	374c      	adds	r7, #76	; 0x4c
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd90      	pop	{r4, r7, pc}

08015ddc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8015ddc:	b5b0      	push	{r4, r5, r7, lr}
 8015dde:	b086      	sub	sp, #24
 8015de0:	af02      	add	r7, sp, #8
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	4639      	mov	r1, r7
 8015de8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8015dec:	f7fb ffc0 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8015df0:	4604      	mov	r4, r0
 8015df2:	6823      	ldr	r3, [r4, #0]
 8015df4:	3368      	adds	r3, #104	; 0x68
 8015df6:	681d      	ldr	r5, [r3, #0]
 8015df8:	f7fb ffca 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8015e04:	4a04      	ldr	r2, [pc, #16]	; (8015e18 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8015e06:	4905      	ldr	r1, [pc, #20]	; (8015e1c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8015e08:	4620      	mov	r0, r4
 8015e0a:	47a8      	blx	r5
    return *this;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bdb0      	pop	{r4, r5, r7, pc}
 8015e16:	bf00      	nop
 8015e18:	08023240 	.word	0x08023240
 8015e1c:	0802325c 	.word	0x0802325c

08015e20 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8015e20:	b5b0      	push	{r4, r5, r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	4639      	mov	r1, r7
 8015e2c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8015e30:	f7fb ff9e 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8015e34:	4604      	mov	r4, r0
 8015e36:	6823      	ldr	r3, [r4, #0]
 8015e38:	3368      	adds	r3, #104	; 0x68
 8015e3a:	681d      	ldr	r5, [r3, #0]
 8015e3c:	f7fb ffa8 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015e40:	4603      	mov	r3, r0
 8015e42:	9300      	str	r3, [sp, #0]
 8015e44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015e48:	4a04      	ldr	r2, [pc, #16]	; (8015e5c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8015e4a:	4905      	ldr	r1, [pc, #20]	; (8015e60 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	47a8      	blx	r5
    return *this;
 8015e50:	68fb      	ldr	r3, [r7, #12]
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	3710      	adds	r7, #16
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bdb0      	pop	{r4, r5, r7, pc}
 8015e5a:	bf00      	nop
 8015e5c:	08023240 	.word	0x08023240
 8015e60:	08023288 	.word	0x08023288

08015e64 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8015e64:	b590      	push	{r4, r7, lr}
 8015e66:	b093      	sub	sp, #76	; 0x4c
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8015e72:	f107 0310 	add.w	r3, r7, #16
 8015e76:	68b9      	ldr	r1, [r7, #8]
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f005 f8bb 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015e7e:	f107 0310 	add.w	r3, r7, #16
 8015e82:	ed97 0b00 	vldr	d0, [r7]
 8015e86:	4618      	mov	r0, r3
 8015e88:	f005 f9ee 	bl	801b268 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	33e0      	adds	r3, #224	; 0xe0
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f107 0210 	add.w	r2, r7, #16
 8015e98:	4611      	mov	r1, r2
 8015e9a:	68f8      	ldr	r0, [r7, #12]
 8015e9c:	4798      	blx	r3
    return *this;
 8015e9e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015ea0:	f107 0310 	add.w	r3, r7, #16
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f005 f8cf 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015eaa:	4623      	mov	r3, r4
}
 8015eac:	4618      	mov	r0, r3
 8015eae:	374c      	adds	r7, #76	; 0x4c
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd90      	pop	{r4, r7, pc}

08015eb4 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8015eb4:	b590      	push	{r4, r7, lr}
 8015eb6:	b093      	sub	sp, #76	; 0x4c
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	60b9      	str	r1, [r7, #8]
 8015ebe:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015ec0:	f107 0310 	add.w	r3, r7, #16
 8015ec4:	68b9      	ldr	r1, [r7, #8]
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f005 f894 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015ecc:	f107 0310 	add.w	r3, r7, #16
 8015ed0:	6879      	ldr	r1, [r7, #4]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f005 fa72 	bl	801b3bc <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	33e0      	adds	r3, #224	; 0xe0
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	f107 0210 	add.w	r2, r7, #16
 8015ee4:	4611      	mov	r1, r2
 8015ee6:	68f8      	ldr	r0, [r7, #12]
 8015ee8:	4798      	blx	r3
    return *this;
 8015eea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015eec:	f107 0310 	add.w	r3, r7, #16
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f005 f8a9 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015ef6:	4623      	mov	r3, r4
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	374c      	adds	r7, #76	; 0x4c
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd90      	pop	{r4, r7, pc}

08015f00 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8015f00:	b590      	push	{r4, r7, lr}
 8015f02:	b093      	sub	sp, #76	; 0x4c
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	60b9      	str	r1, [r7, #8]
 8015f0a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015f0c:	f107 0310 	add.w	r3, r7, #16
 8015f10:	68b9      	ldr	r1, [r7, #8]
 8015f12:	4618      	mov	r0, r3
 8015f14:	f005 f86e 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015f18:	f107 0310 	add.w	r3, r7, #16
 8015f1c:	6879      	ldr	r1, [r7, #4]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f005 f9e6 	bl	801b2f0 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	33e0      	adds	r3, #224	; 0xe0
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	f107 0210 	add.w	r2, r7, #16
 8015f30:	4611      	mov	r1, r2
 8015f32:	68f8      	ldr	r0, [r7, #12]
 8015f34:	4798      	blx	r3
    return *this;
 8015f36:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015f38:	f107 0310 	add.w	r3, r7, #16
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f005 f883 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015f42:	4623      	mov	r3, r4
}
 8015f44:	4618      	mov	r0, r3
 8015f46:	374c      	adds	r7, #76	; 0x4c
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd90      	pop	{r4, r7, pc}

08015f4c <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8015f4c:	b590      	push	{r4, r7, lr}
 8015f4e:	b093      	sub	sp, #76	; 0x4c
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015f58:	f107 0310 	add.w	r3, r7, #16
 8015f5c:	68b9      	ldr	r1, [r7, #8]
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f005 f848 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015f64:	f107 0310 	add.w	r3, r7, #16
 8015f68:	6879      	ldr	r1, [r7, #4]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f005 f9e2 	bl	801b334 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	33e0      	adds	r3, #224	; 0xe0
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	f107 0210 	add.w	r2, r7, #16
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	4798      	blx	r3
    return *this;
 8015f82:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015f84:	f107 0310 	add.w	r3, r7, #16
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f005 f85d 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015f8e:	4623      	mov	r3, r4
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	374c      	adds	r7, #76	; 0x4c
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd90      	pop	{r4, r7, pc}

08015f98 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8015f98:	b590      	push	{r4, r7, lr}
 8015f9a:	b093      	sub	sp, #76	; 0x4c
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	60b9      	str	r1, [r7, #8]
 8015fa2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015fa4:	f107 0310 	add.w	r3, r7, #16
 8015fa8:	68b9      	ldr	r1, [r7, #8]
 8015faa:	4618      	mov	r0, r3
 8015fac:	f005 f822 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015fb0:	f107 0310 	add.w	r3, r7, #16
 8015fb4:	6879      	ldr	r1, [r7, #4]
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f005 f9de 	bl	801b378 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	33e0      	adds	r3, #224	; 0xe0
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	f107 0210 	add.w	r2, r7, #16
 8015fc8:	4611      	mov	r1, r2
 8015fca:	68f8      	ldr	r0, [r7, #12]
 8015fcc:	4798      	blx	r3
    return *this;
 8015fce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015fd0:	f107 0310 	add.w	r3, r7, #16
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f005 f837 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8015fda:	4623      	mov	r3, r4
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	374c      	adds	r7, #76	; 0x4c
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd90      	pop	{r4, r7, pc}

08015fe4 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8015fe4:	b590      	push	{r4, r7, lr}
 8015fe6:	b093      	sub	sp, #76	; 0x4c
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	60f8      	str	r0, [r7, #12]
 8015fec:	60b9      	str	r1, [r7, #8]
 8015fee:	607a      	str	r2, [r7, #4]
 8015ff0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8015ff2:	f107 0310 	add.w	r3, r7, #16
 8015ff6:	68b9      	ldr	r1, [r7, #8]
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f004 fffb 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8015ffe:	f107 0310 	add.w	r3, r7, #16
 8016002:	683a      	ldr	r2, [r7, #0]
 8016004:	6879      	ldr	r1, [r7, #4]
 8016006:	4618      	mov	r0, r3
 8016008:	f005 f9fa 	bl	801b400 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	33e0      	adds	r3, #224	; 0xe0
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	f107 0210 	add.w	r2, r7, #16
 8016018:	4611      	mov	r1, r2
 801601a:	68f8      	ldr	r0, [r7, #12]
 801601c:	4798      	blx	r3
    return *this;
 801601e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016020:	f107 0310 	add.w	r3, r7, #16
 8016024:	4618      	mov	r0, r3
 8016026:	f005 f80f 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 801602a:	4623      	mov	r3, r4
}
 801602c:	4618      	mov	r0, r3
 801602e:	374c      	adds	r7, #76	; 0x4c
 8016030:	46bd      	mov	sp, r7
 8016032:	bd90      	pop	{r4, r7, pc}

08016034 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8016034:	b590      	push	{r4, r7, lr}
 8016036:	b0a1      	sub	sp, #132	; 0x84
 8016038:	af00      	add	r7, sp, #0
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
 8016040:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016042:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016046:	6879      	ldr	r1, [r7, #4]
 8016048:	4618      	mov	r0, r3
 801604a:	f004 ffd3 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801604e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016052:	683a      	ldr	r2, [r7, #0]
 8016054:	68b9      	ldr	r1, [r7, #8]
 8016056:	4618      	mov	r0, r3
 8016058:	f005 f9f8 	bl	801b44c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 801605c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016060:	4618      	mov	r0, r3
 8016062:	f005 fdc5 	bl	801bbf0 <_ZNK14MockNamedValue13getComparatorEv>
 8016066:	4603      	mov	r3, r0
 8016068:	2b00      	cmp	r3, #0
 801606a:	bf0c      	ite	eq
 801606c:	2301      	moveq	r3, #1
 801606e:	2300      	movne	r3, #0
 8016070:	b2db      	uxtb	r3, r3
 8016072:	2b00      	cmp	r3, #0
 8016074:	d01c      	beq.n	80160b0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	33cc      	adds	r3, #204	; 0xcc
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	68f8      	ldr	r0, [r7, #12]
 8016080:	4798      	blx	r3
 8016082:	4601      	mov	r1, r0
 8016084:	f107 0314 	add.w	r3, r7, #20
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	4618      	mov	r0, r3
 801608c:	f004 fed6 	bl	801ae3c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	33dc      	adds	r3, #220	; 0xdc
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	f107 0214 	add.w	r2, r7, #20
 801609c:	4611      	mov	r1, r2
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	4798      	blx	r3
        return *this;
 80160a2:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80160a4:	f107 0314 	add.w	r3, r7, #20
 80160a8:	4618      	mov	r0, r3
 80160aa:	f001 fc81 	bl	80179b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80160ae:	e009      	b.n	80160c4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	33e0      	adds	r3, #224	; 0xe0
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80160bc:	4611      	mov	r1, r2
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	4798      	blx	r3
    return *this;
 80160c2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80160c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80160c8:	4618      	mov	r0, r3
 80160ca:	f004 ffbd 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 80160ce:	4623      	mov	r3, r4
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3784      	adds	r7, #132	; 0x84
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd90      	pop	{r4, r7, pc}

080160d8 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80160d8:	b590      	push	{r4, r7, lr}
 80160da:	b095      	sub	sp, #84	; 0x54
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	33f0      	adds	r3, #240	; 0xf0
 80160ea:	681c      	ldr	r4, [r3, #0]
 80160ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80160f0:	4917      	ldr	r1, [pc, #92]	; (8016150 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7f4 fa59 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80160f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	68b9      	ldr	r1, [r7, #8]
 8016100:	68f8      	ldr	r0, [r7, #12]
 8016102:	47a0      	blx	r4
 8016104:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016108:	4618      	mov	r0, r3
 801610a:	f7f4 fe06 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801610e:	f107 0310 	add.w	r3, r7, #16
 8016112:	68b9      	ldr	r1, [r7, #8]
 8016114:	4618      	mov	r0, r3
 8016116:	f004 ff6d 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801611a:	f107 0310 	add.w	r3, r7, #16
 801611e:	6879      	ldr	r1, [r7, #4]
 8016120:	4618      	mov	r0, r3
 8016122:	f005 f8e5 	bl	801b2f0 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	33e4      	adds	r3, #228	; 0xe4
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	f107 0210 	add.w	r2, r7, #16
 8016132:	4611      	mov	r1, r2
 8016134:	68f8      	ldr	r0, [r7, #12]
 8016136:	4798      	blx	r3

    return *this;
 8016138:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801613a:	f107 0310 	add.w	r3, r7, #16
 801613e:	4618      	mov	r0, r3
 8016140:	f004 ff82 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016144:	4623      	mov	r3, r4
}
 8016146:	4618      	mov	r0, r3
 8016148:	3754      	adds	r7, #84	; 0x54
 801614a:	46bd      	mov	sp, r7
 801614c:	bd90      	pop	{r4, r7, pc}
 801614e:	bf00      	nop
 8016150:	08023238 	.word	0x08023238

08016154 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8016154:	b590      	push	{r4, r7, lr}
 8016156:	b093      	sub	sp, #76	; 0x4c
 8016158:	af00      	add	r7, sp, #0
 801615a:	60f8      	str	r0, [r7, #12]
 801615c:	60b9      	str	r1, [r7, #8]
 801615e:	607a      	str	r2, [r7, #4]
 8016160:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	33f0      	adds	r3, #240	; 0xf0
 8016168:	681c      	ldr	r4, [r3, #0]
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	68ba      	ldr	r2, [r7, #8]
 801616e:	6879      	ldr	r1, [r7, #4]
 8016170:	68f8      	ldr	r0, [r7, #12]
 8016172:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8016174:	f107 0310 	add.w	r3, r7, #16
 8016178:	6879      	ldr	r1, [r7, #4]
 801617a:	4618      	mov	r0, r3
 801617c:	f004 ff3a 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8016180:	f107 0310 	add.w	r3, r7, #16
 8016184:	683a      	ldr	r2, [r7, #0]
 8016186:	68b9      	ldr	r1, [r7, #8]
 8016188:	4618      	mov	r0, r3
 801618a:	f005 f95f 	bl	801b44c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	33e4      	adds	r3, #228	; 0xe4
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f107 0210 	add.w	r2, r7, #16
 801619a:	4611      	mov	r1, r2
 801619c:	68f8      	ldr	r0, [r7, #12]
 801619e:	4798      	blx	r3

    return *this;
 80161a0:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80161a2:	f107 0310 	add.w	r3, r7, #16
 80161a6:	4618      	mov	r0, r3
 80161a8:	f004 ff4e 	bl	801b048 <_ZN14MockNamedValueD1Ev>
    return *this;
 80161ac:	4623      	mov	r3, r4
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	374c      	adds	r7, #76	; 0x4c
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd90      	pop	{r4, r7, pc}

080161b6 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 80161b6:	b480      	push	{r7}
 80161b8:	b083      	sub	sp, #12
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	7d1b      	ldrb	r3, [r3, #20]
 80161c2:	2b02      	cmp	r3, #2
 80161c4:	bf0c      	ite	eq
 80161c6:	2301      	moveq	r3, #1
 80161c8:	2300      	movne	r3, #0
 80161ca:	b2db      	uxtb	r3, r3
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	370c      	adds	r7, #12
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr

080161d8 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80161d8:	b480      	push	{r7}
 80161da:	b083      	sub	sp, #12
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	7d1b      	ldrb	r3, [r3, #20]
 80161e4:	2b01      	cmp	r3, #1
 80161e6:	bf0c      	ite	eq
 80161e8:	2301      	moveq	r3, #1
 80161ea:	2300      	movne	r3, #0
 80161ec:	b2db      	uxtb	r3, r3
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	370c      	adds	r7, #12
 80161f2:	46bd      	mov	sp, r7
 80161f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f8:	4770      	bx	lr
	...

080161fc <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 80161fc:	b5b0      	push	{r4, r5, r7, lr}
 80161fe:	b096      	sub	sp, #88	; 0x58
 8016200:	af02      	add	r7, sp, #8
 8016202:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	7d5b      	ldrb	r3, [r3, #21]
 8016208:	2b00      	cmp	r3, #0
 801620a:	f040 80bc 	bne.w	8016386 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2201      	movs	r2, #1
 8016212:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	7d1b      	ldrb	r3, [r3, #20]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d014      	beq.n	8016246 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	7d1b      	ldrb	r3, [r3, #20]
 8016220:	2b02      	cmp	r3, #2
 8016222:	d10a      	bne.n	801623a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6998      	ldr	r0, [r3, #24]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	699b      	ldr	r3, [r3, #24]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	33d8      	adds	r3, #216	; 0xd8
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	687a      	ldr	r2, [r7, #4]
 8016234:	68d2      	ldr	r2, [r2, #12]
 8016236:	4611      	mov	r1, r2
 8016238:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	331c      	adds	r3, #28
 801623e:	4618      	mov	r0, r3
 8016240:	f003 fe07 	bl	8019e52 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8016244:	e0a0      	b.n	8016388 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	331c      	adds	r3, #28
 801624a:	4618      	mov	r0, r3
 801624c:	f003 fac3 	bl	80197d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8016250:	4603      	mov	r3, r0
 8016252:	2b00      	cmp	r3, #0
 8016254:	d00f      	beq.n	8016276 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8016256:	f7fb fd8b 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801625a:	4604      	mov	r4, r0
 801625c:	6823      	ldr	r3, [r4, #0]
 801625e:	3368      	adds	r3, #104	; 0x68
 8016260:	681d      	ldr	r5, [r3, #0]
 8016262:	f7fb fd95 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016266:	4603      	mov	r3, r0
 8016268:	9300      	str	r3, [sp, #0]
 801626a:	f240 1385 	movw	r3, #389	; 0x185
 801626e:	4a48      	ldr	r2, [pc, #288]	; (8016390 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8016270:	4948      	ldr	r1, [pc, #288]	; (8016394 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8016272:	4620      	mov	r0, r4
 8016274:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	331c      	adds	r3, #28
 801627a:	4618      	mov	r0, r3
 801627c:	f003 fd5f 	bl	8019d3e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8016280:	4602      	mov	r2, r0
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	699b      	ldr	r3, [r3, #24]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d01f      	beq.n	80162ce <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	699a      	ldr	r2, [r3, #24]
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	699b      	ldr	r3, [r3, #24]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	33e4      	adds	r3, #228	; 0xe4
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	4610      	mov	r0, r2
 801629e:	4798      	blx	r3
        callHasSucceeded();
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	33d0      	adds	r3, #208	; 0xd0
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6998      	ldr	r0, [r3, #24]
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	699b      	ldr	r3, [r3, #24]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	33d8      	adds	r3, #216	; 0xd8
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	68d2      	ldr	r2, [r2, #12]
 80162be:	4611      	mov	r1, r2
 80162c0:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	331c      	adds	r3, #28
 80162c6:	4618      	mov	r0, r3
 80162c8:	f003 fdc3 	bl	8019e52 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80162cc:	e05c      	b.n	8016388 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	331c      	adds	r3, #28
 80162d2:	4618      	mov	r0, r3
 80162d4:	f003 ffc4 	bl	801a260 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80162d8:	4603      	mov	r3, r0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d029      	beq.n	8016332 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	33cc      	adds	r3, #204	; 0xcc
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	4798      	blx	r3
 80162ea:	4604      	mov	r4, r0
 80162ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80162f0:	6879      	ldr	r1, [r7, #4]
 80162f2:	4618      	mov	r0, r3
 80162f4:	f7ff f93b 	bl	801556e <_ZNK21MockCheckedActualCall7getNameEv>
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016300:	f107 000c 	add.w	r0, r7, #12
 8016304:	4621      	mov	r1, r4
 8016306:	f004 fd21 	bl	801ad4c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801630a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801630e:	4618      	mov	r0, r3
 8016310:	f7f4 fd03 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	33dc      	adds	r3, #220	; 0xdc
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	f107 020c 	add.w	r2, r7, #12
 8016320:	4611      	mov	r1, r2
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016326:	f107 030c 	add.w	r3, r7, #12
 801632a:	4618      	mov	r0, r3
 801632c:	f001 fb62 	bl	80179f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8016330:	e02a      	b.n	8016388 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	33cc      	adds	r3, #204	; 0xcc
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	4798      	blx	r3
 801633e:	4604      	mov	r4, r0
 8016340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016344:	6879      	ldr	r1, [r7, #4]
 8016346:	4618      	mov	r0, r3
 8016348:	f7ff f911 	bl	801556e <_ZNK21MockCheckedActualCall7getNameEv>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016350:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016354:	f107 000c 	add.w	r0, r7, #12
 8016358:	4621      	mov	r1, r4
 801635a:	f004 fe05 	bl	801af68 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801635e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016362:	4618      	mov	r0, r3
 8016364:	f7f4 fcd9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	33dc      	adds	r3, #220	; 0xdc
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	f107 020c 	add.w	r2, r7, #12
 8016374:	4611      	mov	r1, r2
 8016376:	6878      	ldr	r0, [r7, #4]
 8016378:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801637a:	f107 030c 	add.w	r3, r7, #12
 801637e:	4618      	mov	r0, r3
 8016380:	f001 fb5a 	bl	8017a38 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8016384:	e000      	b.n	8016388 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8016386:	bf00      	nop
    }
}
 8016388:	3750      	adds	r7, #80	; 0x50
 801638a:	46bd      	mov	sp, r7
 801638c:	bdb0      	pop	{r4, r5, r7, pc}
 801638e:	bf00      	nop
 8016390:	08023240 	.word	0x08023240
 8016394:	080232a8 	.word	0x080232a8

08016398 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8016398:	b480      	push	{r7}
 801639a:	b083      	sub	sp, #12
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
 80163a0:	460b      	mov	r3, r1
 80163a2:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	78fa      	ldrb	r2, [r7, #3]
 80163a8:	751a      	strb	r2, [r3, #20]
}
 80163aa:	bf00      	nop
 80163ac:	370c      	adds	r7, #12
 80163ae:	46bd      	mov	sp, r7
 80163b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b4:	4770      	bx	lr
	...

080163b8 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
    checkExpectations();
 80163c2:	683b      	ldr	r3, [r7, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	33c4      	adds	r3, #196	; 0xc4
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	6838      	ldr	r0, [r7, #0]
 80163cc:	4798      	blx	r3
    if (matchingExpectation_)
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	699b      	ldr	r3, [r3, #24]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00a      	beq.n	80163ec <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	6999      	ldr	r1, [r3, #24]
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	699b      	ldr	r3, [r3, #24]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	3394      	adds	r3, #148	; 0x94
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	4610      	mov	r0, r2
 80163e8:	4798      	blx	r3
 80163ea:	e010      	b.n	801640e <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80163ec:	f107 0308 	add.w	r3, r7, #8
 80163f0:	4909      	ldr	r1, [pc, #36]	; (8016418 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7f4 f8d9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80163f8:	f107 0308 	add.w	r3, r7, #8
 80163fc:	4619      	mov	r1, r3
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f004 fdf8 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016404:	f107 0308 	add.w	r3, r7, #8
 8016408:	4618      	mov	r0, r3
 801640a:	f7f4 fc86 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	08023324 	.word	0x08023324

0801641c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
 8016424:	460b      	mov	r3, r1
 8016426:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	3350      	adds	r3, #80	; 0x50
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	4798      	blx	r3
 8016434:	4603      	mov	r3, r0
 8016436:	f083 0301 	eor.w	r3, r3, #1
 801643a:	b2db      	uxtb	r3, r3
 801643c:	2b00      	cmp	r3, #0
 801643e:	d001      	beq.n	8016444 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8016440:	78fb      	ldrb	r3, [r7, #3]
 8016442:	e007      	b.n	8016454 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	335c      	adds	r3, #92	; 0x5c
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	4798      	blx	r3
 8016450:	4603      	mov	r3, r0
 8016452:	bf00      	nop
}
 8016454:	4618      	mov	r0, r3
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}

0801645c <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 801645c:	b590      	push	{r4, r7, lr}
 801645e:	b091      	sub	sp, #68	; 0x44
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	3354      	adds	r3, #84	; 0x54
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	f107 0208 	add.w	r2, r7, #8
 8016470:	6879      	ldr	r1, [r7, #4]
 8016472:	4610      	mov	r0, r2
 8016474:	4798      	blx	r3
 8016476:	f107 0308 	add.w	r3, r7, #8
 801647a:	4618      	mov	r0, r3
 801647c:	f005 f896 	bl	801b5ac <_ZNK14MockNamedValue12getBoolValueEv>
 8016480:	4603      	mov	r3, r0
 8016482:	461c      	mov	r4, r3
 8016484:	bf00      	nop
 8016486:	f107 0308 	add.w	r3, r7, #8
 801648a:	4618      	mov	r0, r3
 801648c:	f004 fddc 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8016490:	4623      	mov	r3, r4
}
 8016492:	4618      	mov	r0, r3
 8016494:	3744      	adds	r7, #68	; 0x44
 8016496:	46bd      	mov	sp, r7
 8016498:	bd90      	pop	{r4, r7, pc}

0801649a <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801649a:	b580      	push	{r7, lr}
 801649c:	b082      	sub	sp, #8
 801649e:	af00      	add	r7, sp, #0
 80164a0:	6078      	str	r0, [r7, #4]
 80164a2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	3350      	adds	r3, #80	; 0x50
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	6878      	ldr	r0, [r7, #4]
 80164ae:	4798      	blx	r3
 80164b0:	4603      	mov	r3, r0
 80164b2:	f083 0301 	eor.w	r3, r3, #1
 80164b6:	b2db      	uxtb	r3, r3
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d001      	beq.n	80164c0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	e007      	b.n	80164d0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	3364      	adds	r3, #100	; 0x64
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	4798      	blx	r3
 80164cc:	4603      	mov	r3, r0
 80164ce:	bf00      	nop
}
 80164d0:	4618      	mov	r0, r3
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80164d8:	b590      	push	{r4, r7, lr}
 80164da:	b091      	sub	sp, #68	; 0x44
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	3354      	adds	r3, #84	; 0x54
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	f107 0208 	add.w	r2, r7, #8
 80164ec:	6879      	ldr	r1, [r7, #4]
 80164ee:	4610      	mov	r0, r2
 80164f0:	4798      	blx	r3
 80164f2:	f107 0308 	add.w	r3, r7, #8
 80164f6:	4618      	mov	r0, r3
 80164f8:	f005 f8d0 	bl	801b69c <_ZNK14MockNamedValue11getIntValueEv>
 80164fc:	4604      	mov	r4, r0
 80164fe:	bf00      	nop
 8016500:	f107 0308 	add.w	r3, r7, #8
 8016504:	4618      	mov	r0, r3
 8016506:	f004 fd9f 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 801650a:	4623      	mov	r3, r4
}
 801650c:	4618      	mov	r0, r3
 801650e:	3744      	adds	r7, #68	; 0x44
 8016510:	46bd      	mov	sp, r7
 8016512:	bd90      	pop	{r4, r7, pc}

08016514 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8016514:	b590      	push	{r4, r7, lr}
 8016516:	b091      	sub	sp, #68	; 0x44
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	3354      	adds	r3, #84	; 0x54
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	f107 0208 	add.w	r2, r7, #8
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	4610      	mov	r0, r2
 801652c:	4798      	blx	r3
 801652e:	f107 0308 	add.w	r3, r7, #8
 8016532:	4618      	mov	r0, r3
 8016534:	f005 f93c 	bl	801b7b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8016538:	4604      	mov	r4, r0
 801653a:	bf00      	nop
 801653c:	f107 0308 	add.w	r3, r7, #8
 8016540:	4618      	mov	r0, r3
 8016542:	f004 fd81 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8016546:	4623      	mov	r3, r4
}
 8016548:	4618      	mov	r0, r3
 801654a:	3744      	adds	r7, #68	; 0x44
 801654c:	46bd      	mov	sp, r7
 801654e:	bd90      	pop	{r4, r7, pc}

08016550 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
 8016558:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	3350      	adds	r3, #80	; 0x50
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	4798      	blx	r3
 8016566:	4603      	mov	r3, r0
 8016568:	f083 0301 	eor.w	r3, r3, #1
 801656c:	b2db      	uxtb	r3, r3
 801656e:	2b00      	cmp	r3, #0
 8016570:	d001      	beq.n	8016576 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	e007      	b.n	8016586 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	3368      	adds	r3, #104	; 0x68
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	4798      	blx	r3
 8016582:	4603      	mov	r3, r0
 8016584:	bf00      	nop
}
 8016586:	4618      	mov	r0, r3
 8016588:	3708      	adds	r7, #8
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801658e:	b590      	push	{r4, r7, lr}
 8016590:	b091      	sub	sp, #68	; 0x44
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	3354      	adds	r3, #84	; 0x54
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	f107 0208 	add.w	r2, r7, #8
 80165a2:	6879      	ldr	r1, [r7, #4]
 80165a4:	4610      	mov	r0, r2
 80165a6:	4798      	blx	r3
 80165a8:	f107 0308 	add.w	r3, r7, #8
 80165ac:	4618      	mov	r0, r3
 80165ae:	f005 f89d 	bl	801b6ec <_ZNK14MockNamedValue15getLongIntValueEv>
 80165b2:	4604      	mov	r4, r0
 80165b4:	bf00      	nop
 80165b6:	f107 0308 	add.w	r3, r7, #8
 80165ba:	4618      	mov	r0, r3
 80165bc:	f004 fd44 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 80165c0:	4623      	mov	r3, r4
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3744      	adds	r7, #68	; 0x44
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd90      	pop	{r4, r7, pc}

080165ca <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b082      	sub	sp, #8
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
 80165d2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	3350      	adds	r3, #80	; 0x50
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	4798      	blx	r3
 80165e0:	4603      	mov	r3, r0
 80165e2:	f083 0301 	eor.w	r3, r3, #1
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d001      	beq.n	80165f0 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	e007      	b.n	8016600 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	3370      	adds	r3, #112	; 0x70
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	4798      	blx	r3
 80165fc:	4603      	mov	r3, r0
 80165fe:	bf00      	nop
}
 8016600:	4618      	mov	r0, r3
 8016602:	3708      	adds	r7, #8
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}

08016608 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8016608:	b5b0      	push	{r4, r5, r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af02      	add	r7, sp, #8
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016612:	f7fb fbad 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8016616:	4604      	mov	r4, r0
 8016618:	6823      	ldr	r3, [r4, #0]
 801661a:	3368      	adds	r3, #104	; 0x68
 801661c:	681d      	ldr	r5, [r3, #0]
 801661e:	f7fb fbb7 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016622:	4603      	mov	r3, r0
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	f240 13fb 	movw	r3, #507	; 0x1fb
 801662a:	4a06      	ldr	r2, [pc, #24]	; (8016644 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 801662c:	4906      	ldr	r1, [pc, #24]	; (8016648 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801662e:	4620      	mov	r0, r4
 8016630:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016632:	2100      	movs	r1, #0
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f7f1 fffb 	bl	8008630 <_ZN18cpputest_ulonglongC1Ei>
}
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bdb0      	pop	{r4, r5, r7, pc}
 8016642:	bf00      	nop
 8016644:	08023240 	.word	0x08023240
 8016648:	0802325c 	.word	0x0802325c

0801664c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 801664c:	b5b0      	push	{r4, r5, r7, lr}
 801664e:	b086      	sub	sp, #24
 8016650:	af02      	add	r7, sp, #8
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	4639      	mov	r1, r7
 8016658:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801665c:	f7fb fb88 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8016660:	4604      	mov	r4, r0
 8016662:	6823      	ldr	r3, [r4, #0]
 8016664:	3368      	adds	r3, #104	; 0x68
 8016666:	681d      	ldr	r5, [r3, #0]
 8016668:	f7fb fb92 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801666c:	4603      	mov	r3, r0
 801666e:	9300      	str	r3, [sp, #0]
 8016670:	f240 2301 	movw	r3, #513	; 0x201
 8016674:	4a06      	ldr	r2, [pc, #24]	; (8016690 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016676:	4907      	ldr	r1, [pc, #28]	; (8016694 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8016678:	4620      	mov	r0, r4
 801667a:	47a8      	blx	r5
    return default_value;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	461a      	mov	r2, r3
 8016680:	463b      	mov	r3, r7
 8016682:	cb03      	ldmia	r3!, {r0, r1}
 8016684:	6010      	str	r0, [r2, #0]
 8016686:	6051      	str	r1, [r2, #4]
}
 8016688:	68f8      	ldr	r0, [r7, #12]
 801668a:	3710      	adds	r7, #16
 801668c:	46bd      	mov	sp, r7
 801668e:	bdb0      	pop	{r4, r5, r7, pc}
 8016690:	08023240 	.word	0x08023240
 8016694:	0802325c 	.word	0x0802325c

08016698 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8016698:	b5b0      	push	{r4, r5, r7, lr}
 801669a:	b084      	sub	sp, #16
 801669c:	af02      	add	r7, sp, #8
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80166a2:	f7fb fb65 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80166a6:	4604      	mov	r4, r0
 80166a8:	6823      	ldr	r3, [r4, #0]
 80166aa:	3368      	adds	r3, #104	; 0x68
 80166ac:	681d      	ldr	r5, [r3, #0]
 80166ae:	f7fb fb6f 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80166b2:	4603      	mov	r3, r0
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	f240 2307 	movw	r3, #519	; 0x207
 80166ba:	4a06      	ldr	r2, [pc, #24]	; (80166d4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 80166bc:	4906      	ldr	r1, [pc, #24]	; (80166d8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 80166be:	4620      	mov	r0, r4
 80166c0:	47a8      	blx	r5
    return cpputest_longlong(0);
 80166c2:	2100      	movs	r1, #0
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f7f1 ffa7 	bl	8008618 <_ZN17cpputest_longlongC1Ei>
}
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bdb0      	pop	{r4, r5, r7, pc}
 80166d2:	bf00      	nop
 80166d4:	08023240 	.word	0x08023240
 80166d8:	08023288 	.word	0x08023288

080166dc <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80166dc:	b5b0      	push	{r4, r5, r7, lr}
 80166de:	b086      	sub	sp, #24
 80166e0:	af02      	add	r7, sp, #8
 80166e2:	60f8      	str	r0, [r7, #12]
 80166e4:	60b9      	str	r1, [r7, #8]
 80166e6:	4639      	mov	r1, r7
 80166e8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80166ec:	f7fb fb40 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80166f0:	4604      	mov	r4, r0
 80166f2:	6823      	ldr	r3, [r4, #0]
 80166f4:	3368      	adds	r3, #104	; 0x68
 80166f6:	681d      	ldr	r5, [r3, #0]
 80166f8:	f7fb fb4a 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80166fc:	4603      	mov	r3, r0
 80166fe:	9300      	str	r3, [sp, #0]
 8016700:	f240 230d 	movw	r3, #525	; 0x20d
 8016704:	4a06      	ldr	r2, [pc, #24]	; (8016720 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016706:	4907      	ldr	r1, [pc, #28]	; (8016724 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8016708:	4620      	mov	r0, r4
 801670a:	47a8      	blx	r5
    return default_value;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	461a      	mov	r2, r3
 8016710:	463b      	mov	r3, r7
 8016712:	cb03      	ldmia	r3!, {r0, r1}
 8016714:	6010      	str	r0, [r2, #0]
 8016716:	6051      	str	r1, [r2, #4]
}
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	3710      	adds	r7, #16
 801671c:	46bd      	mov	sp, r7
 801671e:	bdb0      	pop	{r4, r5, r7, pc}
 8016720:	08023240 	.word	0x08023240
 8016724:	08023288 	.word	0x08023288

08016728 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8016728:	b580      	push	{r7, lr}
 801672a:	ed2d 8b02 	vpush	{d8}
 801672e:	b090      	sub	sp, #64	; 0x40
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	3354      	adds	r3, #84	; 0x54
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f107 0208 	add.w	r2, r7, #8
 8016740:	6879      	ldr	r1, [r7, #4]
 8016742:	4610      	mov	r0, r2
 8016744:	4798      	blx	r3
 8016746:	f107 0308 	add.w	r3, r7, #8
 801674a:	4618      	mov	r0, r3
 801674c:	f005 f908 	bl	801b960 <_ZNK14MockNamedValue14getDoubleValueEv>
 8016750:	eeb0 8a40 	vmov.f32	s16, s0
 8016754:	eef0 8a60 	vmov.f32	s17, s1
 8016758:	bf00      	nop
 801675a:	f107 0308 	add.w	r3, r7, #8
 801675e:	4618      	mov	r0, r3
 8016760:	f004 fc72 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8016764:	eeb0 7a48 	vmov.f32	s14, s16
 8016768:	eef0 7a68 	vmov.f32	s15, s17
}
 801676c:	eeb0 0a47 	vmov.f32	s0, s14
 8016770:	eef0 0a67 	vmov.f32	s1, s15
 8016774:	3740      	adds	r7, #64	; 0x40
 8016776:	46bd      	mov	sp, r7
 8016778:	ecbd 8b02 	vpop	{d8}
 801677c:	bd80      	pop	{r7, pc}

0801677e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801677e:	b580      	push	{r7, lr}
 8016780:	b084      	sub	sp, #16
 8016782:	af00      	add	r7, sp, #0
 8016784:	60f8      	str	r0, [r7, #12]
 8016786:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	3350      	adds	r3, #80	; 0x50
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	68f8      	ldr	r0, [r7, #12]
 8016794:	4798      	blx	r3
 8016796:	4603      	mov	r3, r0
 8016798:	f083 0301 	eor.w	r3, r3, #1
 801679c:	b2db      	uxtb	r3, r3
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d002      	beq.n	80167a8 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 80167a2:	ed97 7b00 	vldr	d7, [r7]
 80167a6:	e00a      	b.n	80167be <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	3398      	adds	r3, #152	; 0x98
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	68f8      	ldr	r0, [r7, #12]
 80167b2:	4798      	blx	r3
 80167b4:	eeb0 7a40 	vmov.f32	s14, s0
 80167b8:	eef0 7a60 	vmov.f32	s15, s1
 80167bc:	bf00      	nop
}
 80167be:	eeb0 0a47 	vmov.f32	s0, s14
 80167c2:	eef0 0a67 	vmov.f32	s1, s15
 80167c6:	3710      	adds	r7, #16
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}

080167cc <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80167cc:	b590      	push	{r4, r7, lr}
 80167ce:	b091      	sub	sp, #68	; 0x44
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	3354      	adds	r3, #84	; 0x54
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f107 0208 	add.w	r2, r7, #8
 80167e0:	6879      	ldr	r1, [r7, #4]
 80167e2:	4610      	mov	r0, r2
 80167e4:	4798      	blx	r3
 80167e6:	f107 0308 	add.w	r3, r7, #8
 80167ea:	4618      	mov	r0, r3
 80167ec:	f004 ff06 	bl	801b5fc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80167f0:	4604      	mov	r4, r0
 80167f2:	bf00      	nop
 80167f4:	f107 0308 	add.w	r3, r7, #8
 80167f8:	4618      	mov	r0, r3
 80167fa:	f004 fc25 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 80167fe:	4623      	mov	r3, r4
}
 8016800:	4618      	mov	r0, r3
 8016802:	3744      	adds	r7, #68	; 0x44
 8016804:	46bd      	mov	sp, r7
 8016806:	bd90      	pop	{r4, r7, pc}

08016808 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	3350      	adds	r3, #80	; 0x50
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	4798      	blx	r3
 801681e:	4603      	mov	r3, r0
 8016820:	f083 0301 	eor.w	r3, r3, #1
 8016824:	b2db      	uxtb	r3, r3
 8016826:	2b00      	cmp	r3, #0
 8016828:	d001      	beq.n	801682e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	e007      	b.n	801683e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	3388      	adds	r3, #136	; 0x88
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	4798      	blx	r3
 801683a:	4603      	mov	r3, r0
 801683c:	bf00      	nop
}
 801683e:	4618      	mov	r0, r3
 8016840:	3708      	adds	r7, #8
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}

08016846 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8016846:	b580      	push	{r7, lr}
 8016848:	b082      	sub	sp, #8
 801684a:	af00      	add	r7, sp, #0
 801684c:	6078      	str	r0, [r7, #4]
 801684e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	3350      	adds	r3, #80	; 0x50
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	4798      	blx	r3
 801685c:	4603      	mov	r3, r0
 801685e:	f083 0301 	eor.w	r3, r3, #1
 8016862:	b2db      	uxtb	r3, r3
 8016864:	2b00      	cmp	r3, #0
 8016866:	d001      	beq.n	801686c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	e007      	b.n	801687c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	33a0      	adds	r3, #160	; 0xa0
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	6878      	ldr	r0, [r7, #4]
 8016876:	4798      	blx	r3
 8016878:	4603      	mov	r3, r0
 801687a:	bf00      	nop
}
 801687c:	4618      	mov	r0, r3
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8016884:	b590      	push	{r4, r7, lr}
 8016886:	b091      	sub	sp, #68	; 0x44
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	3354      	adds	r3, #84	; 0x54
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f107 0208 	add.w	r2, r7, #8
 8016898:	6879      	ldr	r1, [r7, #4]
 801689a:	4610      	mov	r0, r2
 801689c:	4798      	blx	r3
 801689e:	f107 0308 	add.w	r3, r7, #8
 80168a2:	4618      	mov	r0, r3
 80168a4:	f005 f8e0 	bl	801ba68 <_ZNK14MockNamedValue15getPointerValueEv>
 80168a8:	4604      	mov	r4, r0
 80168aa:	bf00      	nop
 80168ac:	f107 0308 	add.w	r3, r7, #8
 80168b0:	4618      	mov	r0, r3
 80168b2:	f004 fbc9 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 80168b6:	4623      	mov	r3, r4
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3744      	adds	r7, #68	; 0x44
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd90      	pop	{r4, r7, pc}

080168c0 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 80168c0:	b590      	push	{r4, r7, lr}
 80168c2:	b091      	sub	sp, #68	; 0x44
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	3354      	adds	r3, #84	; 0x54
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f107 0208 	add.w	r2, r7, #8
 80168d4:	6879      	ldr	r1, [r7, #4]
 80168d6:	4610      	mov	r0, r2
 80168d8:	4798      	blx	r3
 80168da:	f107 0308 	add.w	r3, r7, #8
 80168de:	4618      	mov	r0, r3
 80168e0:	f005 f8ea 	bl	801bab8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80168e4:	4604      	mov	r4, r0
 80168e6:	bf00      	nop
 80168e8:	f107 0308 	add.w	r3, r7, #8
 80168ec:	4618      	mov	r0, r3
 80168ee:	f004 fbab 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 80168f2:	4623      	mov	r3, r4
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3744      	adds	r7, #68	; 0x44
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd90      	pop	{r4, r7, pc}

080168fc <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	3350      	adds	r3, #80	; 0x50
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	4798      	blx	r3
 8016912:	4603      	mov	r3, r0
 8016914:	f083 0301 	eor.w	r3, r3, #1
 8016918:	b2db      	uxtb	r3, r3
 801691a:	2b00      	cmp	r3, #0
 801691c:	d001      	beq.n	8016922 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	e007      	b.n	8016932 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	33a8      	adds	r3, #168	; 0xa8
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	4798      	blx	r3
 801692e:	4603      	mov	r3, r0
 8016930:	bf00      	nop
}
 8016932:	4618      	mov	r0, r3
 8016934:	3708      	adds	r7, #8
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}

0801693a <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801693a:	b590      	push	{r4, r7, lr}
 801693c:	b091      	sub	sp, #68	; 0x44
 801693e:	af00      	add	r7, sp, #0
 8016940:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	3354      	adds	r3, #84	; 0x54
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	f107 0208 	add.w	r2, r7, #8
 801694e:	6879      	ldr	r1, [r7, #4]
 8016950:	4610      	mov	r0, r2
 8016952:	4798      	blx	r3
 8016954:	f107 0308 	add.w	r3, r7, #8
 8016958:	4618      	mov	r0, r3
 801695a:	f005 f8d5 	bl	801bb08 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801695e:	4604      	mov	r4, r0
 8016960:	bf00      	nop
 8016962:	f107 0308 	add.w	r3, r7, #8
 8016966:	4618      	mov	r0, r3
 8016968:	f004 fb6e 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 801696c:	4623      	mov	r3, r4
}
 801696e:	4618      	mov	r0, r3
 8016970:	3744      	adds	r7, #68	; 0x44
 8016972:	46bd      	mov	sp, r7
 8016974:	bd90      	pop	{r4, r7, pc}

08016976 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8016976:	b580      	push	{r7, lr}
 8016978:	b082      	sub	sp, #8
 801697a:	af00      	add	r7, sp, #0
 801697c:	6078      	str	r0, [r7, #4]
 801697e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	3350      	adds	r3, #80	; 0x50
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	4798      	blx	r3
 801698c:	4603      	mov	r3, r0
 801698e:	f083 0301 	eor.w	r3, r3, #1
 8016992:	b2db      	uxtb	r3, r3
 8016994:	2b00      	cmp	r3, #0
 8016996:	d001      	beq.n	801699c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	e007      	b.n	80169ac <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	33b0      	adds	r3, #176	; 0xb0
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	4798      	blx	r3
 80169a8:	4603      	mov	r3, r0
 80169aa:	bf00      	nop
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	3350      	adds	r3, #80	; 0x50
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	4798      	blx	r3
 80169ca:	4603      	mov	r3, r0
 80169cc:	f083 0301 	eor.w	r3, r3, #1
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d001      	beq.n	80169da <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	e007      	b.n	80169ea <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	3394      	adds	r3, #148	; 0x94
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	4798      	blx	r3
 80169e6:	4603      	mov	r3, r0
 80169e8:	bf00      	nop
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3708      	adds	r7, #8
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80169f2:	b590      	push	{r4, r7, lr}
 80169f4:	b091      	sub	sp, #68	; 0x44
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	3354      	adds	r3, #84	; 0x54
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	f107 0208 	add.w	r2, r7, #8
 8016a06:	6879      	ldr	r1, [r7, #4]
 8016a08:	4610      	mov	r0, r2
 8016a0a:	4798      	blx	r3
 8016a0c:	f107 0308 	add.w	r3, r7, #8
 8016a10:	4618      	mov	r0, r3
 8016a12:	f005 f801 	bl	801ba18 <_ZNK14MockNamedValue14getStringValueEv>
 8016a16:	4604      	mov	r4, r0
 8016a18:	bf00      	nop
 8016a1a:	f107 0308 	add.w	r3, r7, #8
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f004 fb12 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8016a24:	4623      	mov	r3, r4
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3744      	adds	r7, #68	; 0x44
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd90      	pop	{r4, r7, pc}

08016a2e <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8016a2e:	b590      	push	{r4, r7, lr}
 8016a30:	b093      	sub	sp, #76	; 0x4c
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	3354      	adds	r3, #84	; 0x54
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	f107 0210 	add.w	r2, r7, #16
 8016a42:	6879      	ldr	r1, [r7, #4]
 8016a44:	4610      	mov	r0, r2
 8016a46:	4798      	blx	r3
 8016a48:	f107 0308 	add.w	r3, r7, #8
 8016a4c:	f107 0210 	add.w	r2, r7, #16
 8016a50:	4611      	mov	r1, r2
 8016a52:	4618      	mov	r0, r3
 8016a54:	f004 fd8c 	bl	801b570 <_ZNK14MockNamedValue7getNameEv>
 8016a58:	f107 0308 	add.w	r3, r7, #8
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7f4 f94b 	bl	800acf8 <_ZNK12SimpleString7isEmptyEv>
 8016a62:	4603      	mov	r3, r0
 8016a64:	f083 0301 	eor.w	r3, r3, #1
 8016a68:	b2dc      	uxtb	r4, r3
 8016a6a:	f107 0308 	add.w	r3, r7, #8
 8016a6e:	4618      	mov	r0, r3
 8016a70:	f7f4 f953 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016a74:	f107 0310 	add.w	r3, r7, #16
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f004 fae5 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8016a7e:	4623      	mov	r3, r4
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	374c      	adds	r7, #76	; 0x4c
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd90      	pop	{r4, r7, pc}

08016a88 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8016a88:	b590      	push	{r4, r7, lr}
 8016a8a:	b095      	sub	sp, #84	; 0x54
 8016a8c:	af02      	add	r7, sp, #8
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	33c0      	adds	r3, #192	; 0xc0
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	4798      	blx	r3
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d001      	beq.n	8016aa8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8016aa4:	687c      	ldr	r4, [r7, #4]
 8016aa6:	e053      	b.n	8016b50 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	331c      	adds	r3, #28
 8016aac:	6839      	ldr	r1, [r7, #0]
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f003 f8ca 	bl	8019c48 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	699b      	ldr	r3, [r3, #24]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d109      	bne.n	8016ad0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	331c      	adds	r3, #28
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f002 fe20 	bl	8019706 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d001      	beq.n	8016ad0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8016acc:	2301      	movs	r3, #1
 8016ace:	e000      	b.n	8016ad2 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d02c      	beq.n	8016b30 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	33cc      	adds	r3, #204	; 0xcc
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	4798      	blx	r3
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016ae8:	6879      	ldr	r1, [r7, #4]
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7fe fd3f 	bl	801556e <_ZNK21MockCheckedActualCall7getNameEv>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016af8:	f107 000c 	add.w	r0, r7, #12
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	4621      	mov	r1, r4
 8016b02:	f004 f9fb 	bl	801aefc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8016b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f4 f905 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	33dc      	adds	r3, #220	; 0xdc
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f107 020c 	add.w	r2, r7, #12
 8016b1c:	4611      	mov	r1, r2
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	4798      	blx	r3
        return *this;
 8016b22:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016b24:	f107 030c 	add.w	r3, r7, #12
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f000 ffa7 	bl	8017a7c <_ZN27MockUnexpectedObjectFailureD1Ev>
 8016b2e:	e00f      	b.n	8016b50 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	331c      	adds	r3, #28
 8016b34:	4618      	mov	r0, r3
 8016b36:	f003 f9a7 	bl	8019e88 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	699b      	ldr	r3, [r3, #24]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d105      	bne.n	8016b4e <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	33d8      	adds	r3, #216	; 0xd8
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	4798      	blx	r3
    }

    return *this;
 8016b4e:	687c      	ldr	r4, [r7, #4]
 8016b50:	4623      	mov	r3, r4
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	374c      	adds	r7, #76	; 0x4c
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd90      	pop	{r4, r7, pc}
	...

08016b5c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8016b5c:	b590      	push	{r4, r7, lr}
 8016b5e:	b087      	sub	sp, #28
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
 8016b68:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8016b6a:	f240 2282 	movw	r2, #642	; 0x282
 8016b6e:	4913      	ldr	r1, [pc, #76]	; (8016bbc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8016b70:	2018      	movs	r0, #24
 8016b72:	f7f1 f957 	bl	8007e24 <_ZnwjPKci>
 8016b76:	4604      	mov	r4, r0
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	68b9      	ldr	r1, [r7, #8]
 8016b7e:	4620      	mov	r0, r4
 8016b80:	f7fe fa48 	bl	8015014 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8016b84:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d103      	bne.n	8016b96 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	693a      	ldr	r2, [r7, #16]
 8016b92:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8016b94:	e00d      	b.n	8016bb2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b9a:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	695b      	ldr	r3, [r3, #20]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d003      	beq.n	8016bac <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	695b      	ldr	r3, [r3, #20]
 8016ba8:	617b      	str	r3, [r7, #20]
 8016baa:	e7f7      	b.n	8016b9c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8016bac:	697b      	ldr	r3, [r7, #20]
 8016bae:	693a      	ldr	r2, [r7, #16]
 8016bb0:	615a      	str	r2, [r3, #20]
}
 8016bb2:	bf00      	nop
 8016bb4:	371c      	adds	r7, #28
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd90      	pop	{r4, r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	08023240 	.word	0x08023240

08016bc0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	3308      	adds	r3, #8
 8016bcc:	4618      	mov	r0, r3
 8016bce:	f7f4 f8a4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f4 f8a0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	4618      	mov	r0, r3
 8016bde:	3708      	adds	r7, #8
 8016be0:	46bd      	mov	sp, r7
 8016be2:	bd80      	pop	{r7, pc}

08016be4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8016be4:	b590      	push	{r4, r7, lr}
 8016be6:	b085      	sub	sp, #20
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bf0:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	60bb      	str	r3, [r7, #8]

    while (current) {
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d012      	beq.n	8016c22 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	695b      	ldr	r3, [r3, #20]
 8016c04:	60fb      	str	r3, [r7, #12]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	68fa      	ldr	r2, [r7, #12]
 8016c0a:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8016c0c:	68bc      	ldr	r4, [r7, #8]
 8016c0e:	2c00      	cmp	r4, #0
 8016c10:	d0f1      	beq.n	8016bf6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8016c12:	4620      	mov	r0, r4
 8016c14:	f7ff ffd4 	bl	8016bc0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8016c18:	2118      	movs	r1, #24
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	f7f1 f916 	bl	8007e4c <_ZdlPvj>
    while (current) {
 8016c20:	e7e9      	b.n	8016bf6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8016c22:	bf00      	nop
 8016c24:	3714      	adds	r7, #20
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd90      	pop	{r4, r7, pc}
	...

08016c2c <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b082      	sub	sp, #8
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7fe fc6a 	bl	8015510 <_ZN14MockActualCallC1Ev>
 8016c3c:	4a06      	ldr	r2, [pc, #24]	; (8016c58 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	3304      	adds	r3, #4
 8016c46:	4905      	ldr	r1, [pc, #20]	; (8016c5c <_ZN19MockActualCallTraceC1Ev+0x30>)
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7f3 fcae 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
{
}
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4618      	mov	r0, r3
 8016c52:	3708      	adds	r7, #8
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	08025610 	.word	0x08025610
 8016c5c:	08023228 	.word	0x08023228

08016c60 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	4a08      	ldr	r2, [pc, #32]	; (8016c8c <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	601a      	str	r2, [r3, #0]
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	3304      	adds	r3, #4
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7f4 f851 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7fe fc58 	bl	8015530 <_ZN14MockActualCallD1Ev>
{
}
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	4618      	mov	r0, r3
 8016c84:	3708      	adds	r7, #8
 8016c86:	46bd      	mov	sp, r7
 8016c88:	bd80      	pop	{r7, pc}
 8016c8a:	bf00      	nop
 8016c8c:	08025610 	.word	0x08025610

08016c90 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
}
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f7ff ffe1 	bl	8016c60 <_ZN19MockActualCallTraceD1Ev>
 8016c9e:	210c      	movs	r1, #12
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f7f1 f8d3 	bl	8007e4c <_ZdlPvj>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3708      	adds	r7, #8
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
 8016cb8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	3304      	adds	r3, #4
 8016cbe:	4907      	ldr	r1, [pc, #28]	; (8016cdc <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7f4 f8b9 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	3304      	adds	r3, #4
 8016cca:	6839      	ldr	r1, [r7, #0]
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f4 f8a1 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    return *this;
 8016cd2:	687b      	ldr	r3, [r7, #4]
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	08023334 	.word	0x08023334

08016ce0 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8016ce0:	b590      	push	{r4, r7, lr}
 8016ce2:	b085      	sub	sp, #20
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	3304      	adds	r3, #4
 8016cee:	490e      	ldr	r1, [pc, #56]	; (8016d28 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7f4 f8a1 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	1d1c      	adds	r4, r3, #4
 8016cfa:	f107 0308 	add.w	r3, r7, #8
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7f4 fd39 	bl	800b778 <_Z10StringFromj>
 8016d06:	f107 0308 	add.w	r3, r7, #8
 8016d0a:	4619      	mov	r1, r3
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f7f4 f881 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8016d12:	f107 0308 	add.w	r3, r7, #8
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7f3 ffff 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8016d1c:	687b      	ldr	r3, [r7, #4]
}
 8016d1e:	4618      	mov	r0, r3
 8016d20:	3714      	adds	r7, #20
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd90      	pop	{r4, r7, pc}
 8016d26:	bf00      	nop
 8016d28:	08023344 	.word	0x08023344

08016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
 8016d34:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	3304      	adds	r3, #4
 8016d3a:	490a      	ldr	r1, [pc, #40]	; (8016d64 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7f4 f87b 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	3304      	adds	r3, #4
 8016d46:	6839      	ldr	r1, [r7, #0]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7f4 f863 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	3304      	adds	r3, #4
 8016d52:	4905      	ldr	r1, [pc, #20]	; (8016d68 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7f4 f86f 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
}
 8016d5a:	bf00      	nop
 8016d5c:	3708      	adds	r7, #8
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	08023354 	.word	0x08023354
 8016d68:	08023358 	.word	0x08023358

08016d6c <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8016d6c:	b590      	push	{r4, r7, lr}
 8016d6e:	b087      	sub	sp, #28
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	60f8      	str	r0, [r7, #12]
 8016d74:	60b9      	str	r1, [r7, #8]
 8016d76:	4613      	mov	r3, r2
 8016d78:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8016d7a:	68b9      	ldr	r1, [r7, #8]
 8016d7c:	68f8      	ldr	r0, [r7, #12]
 8016d7e:	f7ff ffd5 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	1d1c      	adds	r4, r3, #4
 8016d86:	f107 0310 	add.w	r3, r7, #16
 8016d8a:	79fa      	ldrb	r2, [r7, #7]
 8016d8c:	4611      	mov	r1, r2
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f4 fa34 	bl	800b1fc <_Z10StringFromb>
 8016d94:	f107 0310 	add.w	r3, r7, #16
 8016d98:	4619      	mov	r1, r3
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	f7f4 f83a 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8016da0:	f107 0310 	add.w	r3, r7, #16
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7f3 ffb8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8016daa:	68fb      	ldr	r3, [r7, #12]
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	371c      	adds	r7, #28
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd90      	pop	{r4, r7, pc}

08016db4 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8016db4:	b590      	push	{r4, r7, lr}
 8016db6:	b08f      	sub	sp, #60	; 0x3c
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016dc0:	68b9      	ldr	r1, [r7, #8]
 8016dc2:	68f8      	ldr	r0, [r7, #12]
 8016dc4:	f7ff ffb2 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	1d1c      	adds	r4, r3, #4
 8016dcc:	f107 0320 	add.w	r3, r7, #32
 8016dd0:	6879      	ldr	r1, [r7, #4]
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f7f4 fcd0 	bl	800b778 <_Z10StringFromj>
 8016dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016ddc:	491f      	ldr	r1, [pc, #124]	; (8016e5c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7f3 fbe3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8016de4:	f107 0318 	add.w	r3, r7, #24
 8016de8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016dec:	f107 0120 	add.w	r1, r7, #32
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7f3 fff4 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016dfa:	6879      	ldr	r1, [r7, #4]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7f4 fb5f 	bl	800b4c0 <_Z30BracketsFormattedHexStringFromj>
 8016e02:	f107 0310 	add.w	r3, r7, #16
 8016e06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016e0a:	f107 0118 	add.w	r1, r7, #24
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7f3 ffe5 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016e14:	f107 0310 	add.w	r3, r7, #16
 8016e18:	4619      	mov	r1, r3
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f7f3 fffa 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8016e20:	f107 0310 	add.w	r3, r7, #16
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7f3 ff78 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7f3 ff73 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016e34:	f107 0318 	add.w	r3, r7, #24
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7f3 ff6e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7f3 ff69 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016e48:	f107 0320 	add.w	r3, r7, #32
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7f3 ff64 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8016e52:	68fb      	ldr	r3, [r7, #12]
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	373c      	adds	r7, #60	; 0x3c
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bd90      	pop	{r4, r7, pc}
 8016e5c:	08023354 	.word	0x08023354

08016e60 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8016e60:	b590      	push	{r4, r7, lr}
 8016e62:	b08f      	sub	sp, #60	; 0x3c
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	60f8      	str	r0, [r7, #12]
 8016e68:	60b9      	str	r1, [r7, #8]
 8016e6a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016e6c:	68b9      	ldr	r1, [r7, #8]
 8016e6e:	68f8      	ldr	r0, [r7, #12]
 8016e70:	f7ff ff5c 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	1d1c      	adds	r4, r3, #4
 8016e78:	f107 0320 	add.w	r3, r7, #32
 8016e7c:	6879      	ldr	r1, [r7, #4]
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f7f4 fa12 	bl	800b2a8 <_Z10StringFromi>
 8016e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016e88:	491f      	ldr	r1, [pc, #124]	; (8016f08 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7f3 fb8d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8016e90:	f107 0318 	add.w	r3, r7, #24
 8016e94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016e98:	f107 0120 	add.w	r1, r7, #32
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7f3 ff9e 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016ea6:	6879      	ldr	r1, [r7, #4]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7f4 faed 	bl	800b488 <_Z30BracketsFormattedHexStringFromi>
 8016eae:	f107 0310 	add.w	r3, r7, #16
 8016eb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016eb6:	f107 0118 	add.w	r1, r7, #24
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7f3 ff8f 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016ec0:	f107 0310 	add.w	r3, r7, #16
 8016ec4:	4619      	mov	r1, r3
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	f7f3 ffa4 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8016ecc:	f107 0310 	add.w	r3, r7, #16
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7f3 ff22 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7f3 ff1d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016ee0:	f107 0318 	add.w	r3, r7, #24
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7f3 ff18 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7f3 ff13 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016ef4:	f107 0320 	add.w	r3, r7, #32
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7f3 ff0e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8016efe:	68fb      	ldr	r3, [r7, #12]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	373c      	adds	r7, #60	; 0x3c
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd90      	pop	{r4, r7, pc}
 8016f08:	08023354 	.word	0x08023354

08016f0c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016f0c:	b590      	push	{r4, r7, lr}
 8016f0e:	b08f      	sub	sp, #60	; 0x3c
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f7ff ff06 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	1d1c      	adds	r4, r3, #4
 8016f24:	f107 0320 	add.w	r3, r7, #32
 8016f28:	6879      	ldr	r1, [r7, #4]
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7f4 fc36 	bl	800b79c <_Z10StringFromm>
 8016f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016f34:	491f      	ldr	r1, [pc, #124]	; (8016fb4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7f3 fb37 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8016f3c:	f107 0318 	add.w	r3, r7, #24
 8016f40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016f44:	f107 0120 	add.w	r1, r7, #32
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f7f3 ff48 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016f4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016f52:	6879      	ldr	r1, [r7, #4]
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7f4 faeb 	bl	800b530 <_Z30BracketsFormattedHexStringFromm>
 8016f5a:	f107 0310 	add.w	r3, r7, #16
 8016f5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016f62:	f107 0118 	add.w	r1, r7, #24
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7f3 ff39 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016f6c:	f107 0310 	add.w	r3, r7, #16
 8016f70:	4619      	mov	r1, r3
 8016f72:	4620      	mov	r0, r4
 8016f74:	f7f3 ff4e 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8016f78:	f107 0310 	add.w	r3, r7, #16
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7f3 fecc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016f86:	4618      	mov	r0, r3
 8016f88:	f7f3 fec7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016f8c:	f107 0318 	add.w	r3, r7, #24
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7f3 fec2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f7f3 febd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8016fa0:	f107 0320 	add.w	r3, r7, #32
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7f3 feb8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8016faa:	68fb      	ldr	r3, [r7, #12]
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	373c      	adds	r7, #60	; 0x3c
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd90      	pop	{r4, r7, pc}
 8016fb4:	08023354 	.word	0x08023354

08016fb8 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8016fb8:	b590      	push	{r4, r7, lr}
 8016fba:	b08f      	sub	sp, #60	; 0x3c
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	60f8      	str	r0, [r7, #12]
 8016fc0:	60b9      	str	r1, [r7, #8]
 8016fc2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016fc4:	68b9      	ldr	r1, [r7, #8]
 8016fc6:	68f8      	ldr	r0, [r7, #12]
 8016fc8:	f7ff feb0 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	1d1c      	adds	r4, r3, #4
 8016fd0:	f107 0320 	add.w	r3, r7, #32
 8016fd4:	6879      	ldr	r1, [r7, #4]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7f4 f978 	bl	800b2cc <_Z10StringFroml>
 8016fdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016fe0:	491f      	ldr	r1, [pc, #124]	; (8017060 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7f3 fae1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8016fe8:	f107 0318 	add.w	r3, r7, #24
 8016fec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016ff0:	f107 0120 	add.w	r1, r7, #32
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7f3 fef2 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8016ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016ffe:	6879      	ldr	r1, [r7, #4]
 8017000:	4618      	mov	r0, r3
 8017002:	f7f4 fa79 	bl	800b4f8 <_Z30BracketsFormattedHexStringFroml>
 8017006:	f107 0310 	add.w	r3, r7, #16
 801700a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801700e:	f107 0118 	add.w	r1, r7, #24
 8017012:	4618      	mov	r0, r3
 8017014:	f7f3 fee3 	bl	800adde <_ZNK12SimpleStringplERKS_>
 8017018:	f107 0310 	add.w	r3, r7, #16
 801701c:	4619      	mov	r1, r3
 801701e:	4620      	mov	r0, r4
 8017020:	f7f3 fef8 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8017024:	f107 0310 	add.w	r3, r7, #16
 8017028:	4618      	mov	r0, r3
 801702a:	f7f3 fe76 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801702e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017032:	4618      	mov	r0, r3
 8017034:	f7f3 fe71 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8017038:	f107 0318 	add.w	r3, r7, #24
 801703c:	4618      	mov	r0, r3
 801703e:	f7f3 fe6c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8017042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017046:	4618      	mov	r0, r3
 8017048:	f7f3 fe67 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801704c:	f107 0320 	add.w	r3, r7, #32
 8017050:	4618      	mov	r0, r3
 8017052:	f7f3 fe62 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8017056:	68fb      	ldr	r3, [r7, #12]
}
 8017058:	4618      	mov	r0, r3
 801705a:	373c      	adds	r7, #60	; 0x3c
 801705c:	46bd      	mov	sp, r7
 801705e:	bd90      	pop	{r4, r7, pc}
 8017060:	08023354 	.word	0x08023354

08017064 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017064:	b5b0      	push	{r4, r5, r7, lr}
 8017066:	b086      	sub	sp, #24
 8017068:	af02      	add	r7, sp, #8
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	4639      	mov	r1, r7
 8017070:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017074:	f7fa fe7c 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8017078:	4604      	mov	r4, r0
 801707a:	6823      	ldr	r3, [r4, #0]
 801707c:	3368      	adds	r3, #104	; 0x68
 801707e:	681d      	ldr	r5, [r3, #0]
 8017080:	f7fa fe86 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017084:	4603      	mov	r3, r0
 8017086:	9300      	str	r3, [sp, #0]
 8017088:	f240 23ee 	movw	r3, #750	; 0x2ee
 801708c:	4a04      	ldr	r2, [pc, #16]	; (80170a0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801708e:	4905      	ldr	r1, [pc, #20]	; (80170a4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017090:	4620      	mov	r0, r4
 8017092:	47a8      	blx	r5
    return *this;
 8017094:	68fb      	ldr	r3, [r7, #12]
}
 8017096:	4618      	mov	r0, r3
 8017098:	3710      	adds	r7, #16
 801709a:	46bd      	mov	sp, r7
 801709c:	bdb0      	pop	{r4, r5, r7, pc}
 801709e:	bf00      	nop
 80170a0:	08023240 	.word	0x08023240
 80170a4:	0802325c 	.word	0x0802325c

080170a8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80170a8:	b5b0      	push	{r4, r5, r7, lr}
 80170aa:	b086      	sub	sp, #24
 80170ac:	af02      	add	r7, sp, #8
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	4639      	mov	r1, r7
 80170b4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80170b8:	f7fa fe5a 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80170bc:	4604      	mov	r4, r0
 80170be:	6823      	ldr	r3, [r4, #0]
 80170c0:	3368      	adds	r3, #104	; 0x68
 80170c2:	681d      	ldr	r5, [r3, #0]
 80170c4:	f7fa fe64 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80170c8:	4603      	mov	r3, r0
 80170ca:	9300      	str	r3, [sp, #0]
 80170cc:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 80170d0:	4a04      	ldr	r2, [pc, #16]	; (80170e4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80170d2:	4905      	ldr	r1, [pc, #20]	; (80170e8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80170d4:	4620      	mov	r0, r4
 80170d6:	47a8      	blx	r5
    return *this;
 80170d8:	68fb      	ldr	r3, [r7, #12]
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3710      	adds	r7, #16
 80170de:	46bd      	mov	sp, r7
 80170e0:	bdb0      	pop	{r4, r5, r7, pc}
 80170e2:	bf00      	nop
 80170e4:	08023240 	.word	0x08023240
 80170e8:	08023288 	.word	0x08023288

080170ec <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 80170ec:	b590      	push	{r4, r7, lr}
 80170ee:	b087      	sub	sp, #28
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	60f8      	str	r0, [r7, #12]
 80170f4:	60b9      	str	r1, [r7, #8]
 80170f6:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 80170fa:	68b9      	ldr	r1, [r7, #8]
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f7ff fe15 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	1d1c      	adds	r4, r3, #4
 8017106:	f107 0310 	add.w	r3, r7, #16
 801710a:	2106      	movs	r1, #6
 801710c:	ed97 0b00 	vldr	d0, [r7]
 8017110:	4618      	mov	r0, r3
 8017112:	f7f4 fac7 	bl	800b6a4 <_Z10StringFromdi>
 8017116:	f107 0310 	add.w	r3, r7, #16
 801711a:	4619      	mov	r1, r3
 801711c:	4620      	mov	r0, r4
 801711e:	f7f3 fe79 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8017122:	f107 0310 	add.w	r3, r7, #16
 8017126:	4618      	mov	r0, r3
 8017128:	f7f3 fdf7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 801712c:	68fb      	ldr	r3, [r7, #12]
}
 801712e:	4618      	mov	r0, r3
 8017130:	371c      	adds	r7, #28
 8017132:	46bd      	mov	sp, r7
 8017134:	bd90      	pop	{r4, r7, pc}

08017136 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8017136:	b590      	push	{r4, r7, lr}
 8017138:	b087      	sub	sp, #28
 801713a:	af00      	add	r7, sp, #0
 801713c:	60f8      	str	r0, [r7, #12]
 801713e:	60b9      	str	r1, [r7, #8]
 8017140:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017142:	68b9      	ldr	r1, [r7, #8]
 8017144:	68f8      	ldr	r0, [r7, #12]
 8017146:	f7ff fdf1 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	1d1c      	adds	r4, r3, #4
 801714e:	f107 0310 	add.w	r3, r7, #16
 8017152:	6879      	ldr	r1, [r7, #4]
 8017154:	4618      	mov	r0, r3
 8017156:	f7f4 f86d 	bl	800b234 <_Z10StringFromPKc>
 801715a:	f107 0310 	add.w	r3, r7, #16
 801715e:	4619      	mov	r1, r3
 8017160:	4620      	mov	r0, r4
 8017162:	f7f3 fe57 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8017166:	f107 0310 	add.w	r3, r7, #16
 801716a:	4618      	mov	r0, r3
 801716c:	f7f3 fdd5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8017170:	68fb      	ldr	r3, [r7, #12]
}
 8017172:	4618      	mov	r0, r3
 8017174:	371c      	adds	r7, #28
 8017176:	46bd      	mov	sp, r7
 8017178:	bd90      	pop	{r4, r7, pc}

0801717a <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801717a:	b590      	push	{r4, r7, lr}
 801717c:	b087      	sub	sp, #28
 801717e:	af00      	add	r7, sp, #0
 8017180:	60f8      	str	r0, [r7, #12]
 8017182:	60b9      	str	r1, [r7, #8]
 8017184:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017186:	68b9      	ldr	r1, [r7, #8]
 8017188:	68f8      	ldr	r0, [r7, #12]
 801718a:	f7ff fdcf 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	1d1c      	adds	r4, r3, #4
 8017192:	f107 0310 	add.w	r3, r7, #16
 8017196:	6879      	ldr	r1, [r7, #4]
 8017198:	4618      	mov	r0, r3
 801719a:	f7f4 f8a9 	bl	800b2f0 <_Z10StringFromPKv>
 801719e:	f107 0310 	add.w	r3, r7, #16
 80171a2:	4619      	mov	r1, r3
 80171a4:	4620      	mov	r0, r4
 80171a6:	f7f3 fe35 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 80171aa:	f107 0310 	add.w	r3, r7, #16
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7f3 fdb3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 80171b4:	68fb      	ldr	r3, [r7, #12]
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	371c      	adds	r7, #28
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd90      	pop	{r4, r7, pc}

080171be <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80171be:	b590      	push	{r4, r7, lr}
 80171c0:	b087      	sub	sp, #28
 80171c2:	af00      	add	r7, sp, #0
 80171c4:	60f8      	str	r0, [r7, #12]
 80171c6:	60b9      	str	r1, [r7, #8]
 80171c8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80171ca:	68b9      	ldr	r1, [r7, #8]
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	f7ff fdad 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	1d1c      	adds	r4, r3, #4
 80171d6:	f107 0310 	add.w	r3, r7, #16
 80171da:	6879      	ldr	r1, [r7, #4]
 80171dc:	4618      	mov	r0, r3
 80171de:	f7f4 f887 	bl	800b2f0 <_Z10StringFromPKv>
 80171e2:	f107 0310 	add.w	r3, r7, #16
 80171e6:	4619      	mov	r1, r3
 80171e8:	4620      	mov	r0, r4
 80171ea:	f7f3 fe13 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 80171ee:	f107 0310 	add.w	r3, r7, #16
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7f3 fd91 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 80171f8:	68fb      	ldr	r3, [r7, #12]
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	371c      	adds	r7, #28
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd90      	pop	{r4, r7, pc}

08017202 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017202:	b590      	push	{r4, r7, lr}
 8017204:	b087      	sub	sp, #28
 8017206:	af00      	add	r7, sp, #0
 8017208:	60f8      	str	r0, [r7, #12]
 801720a:	60b9      	str	r1, [r7, #8]
 801720c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801720e:	68b9      	ldr	r1, [r7, #8]
 8017210:	68f8      	ldr	r0, [r7, #12]
 8017212:	f7ff fd8b 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	1d1c      	adds	r4, r3, #4
 801721a:	f107 0310 	add.w	r3, r7, #16
 801721e:	6879      	ldr	r1, [r7, #4]
 8017220:	4618      	mov	r0, r3
 8017222:	f7f4 f88f 	bl	800b344 <_Z10StringFromPFvvE>
 8017226:	f107 0310 	add.w	r3, r7, #16
 801722a:	4619      	mov	r1, r3
 801722c:	4620      	mov	r0, r4
 801722e:	f7f3 fdf1 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8017232:	f107 0310 	add.w	r3, r7, #16
 8017236:	4618      	mov	r0, r3
 8017238:	f7f3 fd6f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 801723c:	68fb      	ldr	r3, [r7, #12]
}
 801723e:	4618      	mov	r0, r3
 8017240:	371c      	adds	r7, #28
 8017242:	46bd      	mov	sp, r7
 8017244:	bd90      	pop	{r4, r7, pc}

08017246 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017246:	b590      	push	{r4, r7, lr}
 8017248:	b087      	sub	sp, #28
 801724a:	af00      	add	r7, sp, #0
 801724c:	60f8      	str	r0, [r7, #12]
 801724e:	60b9      	str	r1, [r7, #8]
 8017250:	607a      	str	r2, [r7, #4]
 8017252:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8017254:	68b9      	ldr	r1, [r7, #8]
 8017256:	68f8      	ldr	r0, [r7, #12]
 8017258:	f7ff fd68 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	1d1c      	adds	r4, r3, #4
 8017260:	f107 0310 	add.w	r3, r7, #16
 8017264:	683a      	ldr	r2, [r7, #0]
 8017266:	6879      	ldr	r1, [r7, #4]
 8017268:	4618      	mov	r0, r3
 801726a:	f7f4 fbaf 	bl	800b9cc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801726e:	f107 0310 	add.w	r3, r7, #16
 8017272:	4619      	mov	r1, r3
 8017274:	4620      	mov	r0, r4
 8017276:	f7f3 fdcd 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801727a:	f107 0310 	add.w	r3, r7, #16
 801727e:	4618      	mov	r0, r3
 8017280:	f7f3 fd4b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8017284:	68fb      	ldr	r3, [r7, #12]
}
 8017286:	4618      	mov	r0, r3
 8017288:	371c      	adds	r7, #28
 801728a:	46bd      	mov	sp, r7
 801728c:	bd90      	pop	{r4, r7, pc}
	...

08017290 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8017290:	b590      	push	{r4, r7, lr}
 8017292:	b087      	sub	sp, #28
 8017294:	af00      	add	r7, sp, #0
 8017296:	60f8      	str	r0, [r7, #12]
 8017298:	60b9      	str	r1, [r7, #8]
 801729a:	607a      	str	r2, [r7, #4]
 801729c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	3304      	adds	r3, #4
 80172a2:	4913      	ldr	r1, [pc, #76]	; (80172f0 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80172a4:	4618      	mov	r0, r3
 80172a6:	f7f3 fdc7 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	3304      	adds	r3, #4
 80172ae:	68b9      	ldr	r1, [r7, #8]
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7f3 fdaf 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80172b6:	6879      	ldr	r1, [r7, #4]
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	f7ff fd37 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	1d1c      	adds	r4, r3, #4
 80172c2:	f107 0310 	add.w	r3, r7, #16
 80172c6:	6839      	ldr	r1, [r7, #0]
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7f4 f811 	bl	800b2f0 <_Z10StringFromPKv>
 80172ce:	f107 0310 	add.w	r3, r7, #16
 80172d2:	4619      	mov	r1, r3
 80172d4:	4620      	mov	r0, r4
 80172d6:	f7f3 fd9d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 80172da:	f107 0310 	add.w	r3, r7, #16
 80172de:	4618      	mov	r0, r3
 80172e0:	f7f3 fd1b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 80172e4:	68fb      	ldr	r3, [r7, #12]
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	371c      	adds	r7, #28
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd90      	pop	{r4, r7, pc}
 80172ee:	bf00      	nop
 80172f0:	08023354 	.word	0x08023354

080172f4 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 80172f4:	b590      	push	{r4, r7, lr}
 80172f6:	b087      	sub	sp, #28
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	60f8      	str	r0, [r7, #12]
 80172fc:	60b9      	str	r1, [r7, #8]
 80172fe:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017300:	68b9      	ldr	r1, [r7, #8]
 8017302:	68f8      	ldr	r0, [r7, #12]
 8017304:	f7ff fd12 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	1d1c      	adds	r4, r3, #4
 801730c:	f107 0310 	add.w	r3, r7, #16
 8017310:	6879      	ldr	r1, [r7, #4]
 8017312:	4618      	mov	r0, r3
 8017314:	f7f3 ffec 	bl	800b2f0 <_Z10StringFromPKv>
 8017318:	f107 0310 	add.w	r3, r7, #16
 801731c:	4619      	mov	r1, r3
 801731e:	4620      	mov	r0, r4
 8017320:	f7f3 fd78 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8017324:	f107 0310 	add.w	r3, r7, #16
 8017328:	4618      	mov	r0, r3
 801732a:	f7f3 fcf6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 801732e:	68fb      	ldr	r3, [r7, #12]
}
 8017330:	4618      	mov	r0, r3
 8017332:	371c      	adds	r7, #28
 8017334:	46bd      	mov	sp, r7
 8017336:	bd90      	pop	{r4, r7, pc}

08017338 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8017338:	b590      	push	{r4, r7, lr}
 801733a:	b087      	sub	sp, #28
 801733c:	af00      	add	r7, sp, #0
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	60b9      	str	r1, [r7, #8]
 8017342:	607a      	str	r2, [r7, #4]
 8017344:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	3304      	adds	r3, #4
 801734a:	4913      	ldr	r1, [pc, #76]	; (8017398 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801734c:	4618      	mov	r0, r3
 801734e:	f7f3 fd73 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	3304      	adds	r3, #4
 8017356:	68b9      	ldr	r1, [r7, #8]
 8017358:	4618      	mov	r0, r3
 801735a:	f7f3 fd5b 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801735e:	6879      	ldr	r1, [r7, #4]
 8017360:	68f8      	ldr	r0, [r7, #12]
 8017362:	f7ff fce3 	bl	8016d2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	1d1c      	adds	r4, r3, #4
 801736a:	f107 0310 	add.w	r3, r7, #16
 801736e:	6839      	ldr	r1, [r7, #0]
 8017370:	4618      	mov	r0, r3
 8017372:	f7f3 ffbd 	bl	800b2f0 <_Z10StringFromPKv>
 8017376:	f107 0310 	add.w	r3, r7, #16
 801737a:	4619      	mov	r1, r3
 801737c:	4620      	mov	r0, r4
 801737e:	f7f3 fd49 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8017382:	f107 0310 	add.w	r3, r7, #16
 8017386:	4618      	mov	r0, r3
 8017388:	f7f3 fcc7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 801738c:	68fb      	ldr	r3, [r7, #12]
}
 801738e:	4618      	mov	r0, r3
 8017390:	371c      	adds	r7, #28
 8017392:	46bd      	mov	sp, r7
 8017394:	bd90      	pop	{r4, r7, pc}
 8017396:	bf00      	nop
 8017398:	08023354 	.word	0x08023354

0801739c <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801739c:	b480      	push	{r7}
 801739e:	b083      	sub	sp, #12
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
    return false;
 80173a4:	2300      	movs	r3, #0
}
 80173a6:	4618      	mov	r0, r3
 80173a8:	370c      	adds	r7, #12
 80173aa:	46bd      	mov	sp, r7
 80173ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b0:	4770      	bx	lr
	...

080173b4 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
 80173bc:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 80173be:	f107 0308 	add.w	r3, r7, #8
 80173c2:	4909      	ldr	r1, [pc, #36]	; (80173e8 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7f3 f8f0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80173ca:	f107 0308 	add.w	r3, r7, #8
 80173ce:	4619      	mov	r1, r3
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f003 fe0f 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 80173d6:	f107 0308 	add.w	r3, r7, #8
 80173da:	4618      	mov	r0, r3
 80173dc:	f7f3 fc9d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	3710      	adds	r7, #16
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}
 80173e8:	08023228 	.word	0x08023228

080173ec <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 80173ec:	b480      	push	{r7}
 80173ee:	b083      	sub	sp, #12
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
    return 0;
 80173f4:	2300      	movs	r3, #0
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	370c      	adds	r7, #12
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr

08017402 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8017402:	b480      	push	{r7}
 8017404:	b083      	sub	sp, #12
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
    return 0;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	370c      	adds	r7, #12
 8017410:	46bd      	mov	sp, r7
 8017412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017416:	4770      	bx	lr

08017418 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8017418:	b480      	push	{r7}
 801741a:	b083      	sub	sp, #12
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
 8017420:	6039      	str	r1, [r7, #0]
    return 0;
 8017422:	2300      	movs	r3, #0
}
 8017424:	4618      	mov	r0, r3
 8017426:	370c      	adds	r7, #12
 8017428:	46bd      	mov	sp, r7
 801742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742e:	4770      	bx	lr

08017430 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]
    return 0;
 801743a:	2300      	movs	r3, #0
}
 801743c:	4618      	mov	r0, r3
 801743e:	370c      	adds	r7, #12
 8017440:	46bd      	mov	sp, r7
 8017442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017446:	4770      	bx	lr

08017448 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8017448:	b5b0      	push	{r4, r5, r7, lr}
 801744a:	b084      	sub	sp, #16
 801744c:	af02      	add	r7, sp, #8
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017452:	f7fa fc8d 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8017456:	4604      	mov	r4, r0
 8017458:	6823      	ldr	r3, [r4, #0]
 801745a:	3368      	adds	r3, #104	; 0x68
 801745c:	681d      	ldr	r5, [r3, #0]
 801745e:	f7fa fc97 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017462:	4603      	mov	r3, r0
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	f240 3375 	movw	r3, #885	; 0x375
 801746a:	4a06      	ldr	r2, [pc, #24]	; (8017484 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801746c:	4906      	ldr	r1, [pc, #24]	; (8017488 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801746e:	4620      	mov	r0, r4
 8017470:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017472:	2100      	movs	r1, #0
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f7f1 f8cf 	bl	8008618 <_ZN17cpputest_longlongC1Ei>
}
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	3708      	adds	r7, #8
 801747e:	46bd      	mov	sp, r7
 8017480:	bdb0      	pop	{r4, r5, r7, pc}
 8017482:	bf00      	nop
 8017484:	08023240 	.word	0x08023240
 8017488:	08023288 	.word	0x08023288

0801748c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801748c:	b5b0      	push	{r4, r5, r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af02      	add	r7, sp, #8
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8017496:	f7fa fc6b 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801749a:	4604      	mov	r4, r0
 801749c:	6823      	ldr	r3, [r4, #0]
 801749e:	3368      	adds	r3, #104	; 0x68
 80174a0:	681d      	ldr	r5, [r3, #0]
 80174a2:	f7fa fc75 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80174a6:	4603      	mov	r3, r0
 80174a8:	9300      	str	r3, [sp, #0]
 80174aa:	f240 337b 	movw	r3, #891	; 0x37b
 80174ae:	4a06      	ldr	r2, [pc, #24]	; (80174c8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 80174b0:	4906      	ldr	r1, [pc, #24]	; (80174cc <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 80174b2:	4620      	mov	r0, r4
 80174b4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80174b6:	2100      	movs	r1, #0
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f7f1 f8b9 	bl	8008630 <_ZN18cpputest_ulonglongC1Ei>
}
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	3708      	adds	r7, #8
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bdb0      	pop	{r4, r5, r7, pc}
 80174c6:	bf00      	nop
 80174c8:	08023240 	.word	0x08023240
 80174cc:	0802325c 	.word	0x0802325c

080174d0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80174d0:	b5b0      	push	{r4, r5, r7, lr}
 80174d2:	b086      	sub	sp, #24
 80174d4:	af02      	add	r7, sp, #8
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	4639      	mov	r1, r7
 80174dc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80174e0:	f7fa fc46 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80174e4:	4604      	mov	r4, r0
 80174e6:	6823      	ldr	r3, [r4, #0]
 80174e8:	3368      	adds	r3, #104	; 0x68
 80174ea:	681d      	ldr	r5, [r3, #0]
 80174ec:	f7fa fc50 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80174f0:	4603      	mov	r3, r0
 80174f2:	9300      	str	r3, [sp, #0]
 80174f4:	f240 3381 	movw	r3, #897	; 0x381
 80174f8:	4a05      	ldr	r2, [pc, #20]	; (8017510 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 80174fa:	4906      	ldr	r1, [pc, #24]	; (8017514 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80174fc:	4620      	mov	r0, r4
 80174fe:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017500:	2100      	movs	r1, #0
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f7f1 f894 	bl	8008630 <_ZN18cpputest_ulonglongC1Ei>
}
 8017508:	68f8      	ldr	r0, [r7, #12]
 801750a:	3710      	adds	r7, #16
 801750c:	46bd      	mov	sp, r7
 801750e:	bdb0      	pop	{r4, r5, r7, pc}
 8017510:	08023240 	.word	0x08023240
 8017514:	0802325c 	.word	0x0802325c

08017518 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8017518:	b5b0      	push	{r4, r5, r7, lr}
 801751a:	b086      	sub	sp, #24
 801751c:	af02      	add	r7, sp, #8
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	4639      	mov	r1, r7
 8017524:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017528:	f7fa fc22 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801752c:	4604      	mov	r4, r0
 801752e:	6823      	ldr	r3, [r4, #0]
 8017530:	3368      	adds	r3, #104	; 0x68
 8017532:	681d      	ldr	r5, [r3, #0]
 8017534:	f7fa fc2c 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017538:	4603      	mov	r3, r0
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	f240 3387 	movw	r3, #903	; 0x387
 8017540:	4a05      	ldr	r2, [pc, #20]	; (8017558 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8017542:	4906      	ldr	r1, [pc, #24]	; (801755c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8017544:	4620      	mov	r0, r4
 8017546:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017548:	2100      	movs	r1, #0
 801754a:	68f8      	ldr	r0, [r7, #12]
 801754c:	f7f1 f864 	bl	8008618 <_ZN17cpputest_longlongC1Ei>
}
 8017550:	68f8      	ldr	r0, [r7, #12]
 8017552:	3710      	adds	r7, #16
 8017554:	46bd      	mov	sp, r7
 8017556:	bdb0      	pop	{r4, r5, r7, pc}
 8017558:	08023240 	.word	0x08023240
 801755c:	08023288 	.word	0x08023288

08017560 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8017560:	b480      	push	{r7}
 8017562:	b083      	sub	sp, #12
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
    return false;
 8017568:	2300      	movs	r3, #0
}
 801756a:	4618      	mov	r0, r3
 801756c:	370c      	adds	r7, #12
 801756e:	46bd      	mov	sp, r7
 8017570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017574:	4770      	bx	lr

08017576 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8017576:	b480      	push	{r7}
 8017578:	b083      	sub	sp, #12
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
 801757e:	460b      	mov	r3, r1
 8017580:	70fb      	strb	r3, [r7, #3]
    return false;
 8017582:	2300      	movs	r3, #0
}
 8017584:	4618      	mov	r0, r3
 8017586:	370c      	adds	r7, #12
 8017588:	46bd      	mov	sp, r7
 801758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758e:	4770      	bx	lr

08017590 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8017590:	b480      	push	{r7}
 8017592:	b083      	sub	sp, #12
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
    return 0;
 8017598:	2300      	movs	r3, #0
}
 801759a:	4618      	mov	r0, r3
 801759c:	370c      	adds	r7, #12
 801759e:	46bd      	mov	sp, r7
 80175a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a4:	4770      	bx	lr

080175a6 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 80175a6:	b480      	push	{r7}
 80175a8:	b083      	sub	sp, #12
 80175aa:	af00      	add	r7, sp, #0
 80175ac:	6078      	str	r0, [r7, #4]
    return 0.0;
 80175ae:	f04f 0200 	mov.w	r2, #0
 80175b2:	f04f 0300 	mov.w	r3, #0
 80175b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80175ba:	eeb0 0a47 	vmov.f32	s0, s14
 80175be:	eef0 0a67 	vmov.f32	s1, s15
 80175c2:	370c      	adds	r7, #12
 80175c4:	46bd      	mov	sp, r7
 80175c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ca:	4770      	bx	lr

080175cc <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b084      	sub	sp, #16
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	60f8      	str	r0, [r7, #12]
 80175d4:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	3398      	adds	r3, #152	; 0x98
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	68f8      	ldr	r0, [r7, #12]
 80175e2:	4798      	blx	r3
 80175e4:	eeb0 7a40 	vmov.f32	s14, s0
 80175e8:	eef0 7a60 	vmov.f32	s15, s1
}
 80175ec:	eeb0 0a47 	vmov.f32	s0, s14
 80175f0:	eef0 0a67 	vmov.f32	s1, s15
 80175f4:	3710      	adds	r7, #16
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}

080175fa <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 80175fa:	b480      	push	{r7}
 80175fc:	b083      	sub	sp, #12
 80175fe:	af00      	add	r7, sp, #0
 8017600:	6078      	str	r0, [r7, #4]
    return 0;
 8017602:	2300      	movs	r3, #0
}
 8017604:	4618      	mov	r0, r3
 8017606:	370c      	adds	r7, #12
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr

08017610 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8017610:	b480      	push	{r7}
 8017612:	b083      	sub	sp, #12
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017618:	2300      	movs	r3, #0
}
 801761a:	4618      	mov	r0, r3
 801761c:	370c      	adds	r7, #12
 801761e:	46bd      	mov	sp, r7
 8017620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017624:	4770      	bx	lr

08017626 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8017626:	b480      	push	{r7}
 8017628:	b083      	sub	sp, #12
 801762a:	af00      	add	r7, sp, #0
 801762c:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801762e:	2300      	movs	r3, #0
}
 8017630:	4618      	mov	r0, r3
 8017632:	370c      	adds	r7, #12
 8017634:	46bd      	mov	sp, r7
 8017636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763a:	4770      	bx	lr

0801763c <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017644:	2300      	movs	r3, #0
}
 8017646:	4618      	mov	r0, r3
 8017648:	370c      	adds	r7, #12
 801764a:	46bd      	mov	sp, r7
 801764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017650:	4770      	bx	lr

08017652 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8017652:	b580      	push	{r7, lr}
 8017654:	b082      	sub	sp, #8
 8017656:	af00      	add	r7, sp, #0
 8017658:	6078      	str	r0, [r7, #4]
 801765a:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	33a8      	adds	r3, #168	; 0xa8
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	6878      	ldr	r0, [r7, #4]
 8017666:	4798      	blx	r3
 8017668:	4603      	mov	r3, r0
}
 801766a:	4618      	mov	r0, r3
 801766c:	3708      	adds	r7, #8
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}

08017672 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8017672:	b580      	push	{r7, lr}
 8017674:	b082      	sub	sp, #8
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	33a0      	adds	r3, #160	; 0xa0
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	4798      	blx	r3
 8017688:	4603      	mov	r3, r0
}
 801768a:	4618      	mov	r0, r3
 801768c:	3708      	adds	r7, #8
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}

08017692 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8017692:	b580      	push	{r7, lr}
 8017694:	b082      	sub	sp, #8
 8017696:	af00      	add	r7, sp, #0
 8017698:	6078      	str	r0, [r7, #4]
 801769a:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	33b0      	adds	r3, #176	; 0xb0
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	6878      	ldr	r0, [r7, #4]
 80176a6:	4798      	blx	r3
 80176a8:	4603      	mov	r3, r0
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3708      	adds	r7, #8
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
	...

080176b4 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 80176b4:	b480      	push	{r7}
 80176b6:	b083      	sub	sp, #12
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
    return "";
 80176bc:	4b03      	ldr	r3, [pc, #12]	; (80176cc <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 80176be:	4618      	mov	r0, r3
 80176c0:	370c      	adds	r7, #12
 80176c2:	46bd      	mov	sp, r7
 80176c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c8:	4770      	bx	lr
 80176ca:	bf00      	nop
 80176cc:	08023228 	.word	0x08023228

080176d0 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
 80176d8:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	3394      	adds	r3, #148	; 0x94
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	6878      	ldr	r0, [r7, #4]
 80176e4:	4798      	blx	r3
 80176e6:	4603      	mov	r3, r0
}
 80176e8:	4618      	mov	r0, r3
 80176ea:	3708      	adds	r7, #8
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}

080176f0 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 80176f0:	b480      	push	{r7}
 80176f2:	b083      	sub	sp, #12
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
    return 0;
 80176fa:	2300      	movs	r3, #0
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	370c      	adds	r7, #12
 8017700:	46bd      	mov	sp, r7
 8017702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017706:	4770      	bx	lr

08017708 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	3388      	adds	r3, #136	; 0x88
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	4798      	blx	r3
 801771e:	4603      	mov	r3, r0
}
 8017720:	4618      	mov	r0, r3
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}

08017728 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8017728:	b590      	push	{r4, r7, lr}
 801772a:	b085      	sub	sp, #20
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
 8017730:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	3304      	adds	r3, #4
 8017736:	490e      	ldr	r1, [pc, #56]	; (8017770 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8017738:	4618      	mov	r0, r3
 801773a:	f7f3 fb7d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	1d1c      	adds	r4, r3, #4
 8017742:	f107 0308 	add.w	r3, r7, #8
 8017746:	6839      	ldr	r1, [r7, #0]
 8017748:	4618      	mov	r0, r3
 801774a:	f7f3 fdd1 	bl	800b2f0 <_Z10StringFromPKv>
 801774e:	f107 0308 	add.w	r3, r7, #8
 8017752:	4619      	mov	r1, r3
 8017754:	4620      	mov	r0, r4
 8017756:	f7f3 fb5d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801775a:	f107 0308 	add.w	r3, r7, #8
 801775e:	4618      	mov	r0, r3
 8017760:	f7f3 fadb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return *this;
 8017764:	687b      	ldr	r3, [r7, #4]
}
 8017766:	4618      	mov	r0, r3
 8017768:	3714      	adds	r7, #20
 801776a:	46bd      	mov	sp, r7
 801776c:	bd90      	pop	{r4, r7, pc}
 801776e:	bf00      	nop
 8017770:	0802335c 	.word	0x0802335c

08017774 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8017774:	b598      	push	{r3, r4, r7, lr}
 8017776:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8017778:	4b09      	ldr	r3, [pc, #36]	; (80177a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d10b      	bne.n	8017798 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8017780:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8017784:	4907      	ldr	r1, [pc, #28]	; (80177a4 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8017786:	200c      	movs	r0, #12
 8017788:	f7f0 fb4c 	bl	8007e24 <_ZnwjPKci>
 801778c:	4604      	mov	r4, r0
 801778e:	4620      	mov	r0, r4
 8017790:	f7ff fa4c 	bl	8016c2c <_ZN19MockActualCallTraceC1Ev>
 8017794:	4b02      	ldr	r3, [pc, #8]	; (80177a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017796:	601c      	str	r4, [r3, #0]
    return *instance_;
 8017798:	4b01      	ldr	r3, [pc, #4]	; (80177a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801779a:	681b      	ldr	r3, [r3, #0]
}
 801779c:	4618      	mov	r0, r3
 801779e:	bd98      	pop	{r3, r4, r7, pc}
 80177a0:	20000d08 	.word	0x20000d08
 80177a4:	08023240 	.word	0x08023240

080177a8 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	af00      	add	r7, sp, #0
    delete instance_;
 80177ac:	4b06      	ldr	r3, [pc, #24]	; (80177c8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d004      	beq.n	80177be <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 80177b4:	681a      	ldr	r2, [r3, #0]
 80177b6:	3204      	adds	r2, #4
 80177b8:	6812      	ldr	r2, [r2, #0]
 80177ba:	4618      	mov	r0, r3
 80177bc:	4790      	blx	r2
    instance_ = NULLPTR;
 80177be:	4b02      	ldr	r3, [pc, #8]	; (80177c8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80177c0:	2200      	movs	r2, #0
 80177c2:	601a      	str	r2, [r3, #0]
}
 80177c4:	bf00      	nop
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	20000d08 	.word	0x20000d08

080177cc <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b082      	sub	sp, #8
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	4618      	mov	r0, r3
 80177d8:	f7fd fe9a 	bl	8015510 <_ZN14MockActualCallC1Ev>
 80177dc:	4a03      	ldr	r2, [pc, #12]	; (80177ec <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	601a      	str	r2, [r3, #0]
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	4618      	mov	r0, r3
 80177e6:	3708      	adds	r7, #8
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}
 80177ec:	0802554c 	.word	0x0802554c

080177f0 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 80177f0:	b580      	push	{r7, lr}
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	4801      	ldr	r0, [pc, #4]	; (80177fc <__tcf_0+0xc>)
 80177f6:	f000 f831 	bl	801785c <_ZN21MockIgnoredActualCallD1Ev>
 80177fa:	bd80      	pop	{r7, pc}
 80177fc:	20000d0c 	.word	0x20000d0c

08017800 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8017800:	b580      	push	{r7, lr}
 8017802:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8017804:	4b12      	ldr	r3, [pc, #72]	; (8017850 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017806:	781b      	ldrb	r3, [r3, #0]
 8017808:	f3bf 8f5b 	dmb	ish
 801780c:	b2db      	uxtb	r3, r3
 801780e:	f003 0301 	and.w	r3, r3, #1
 8017812:	2b00      	cmp	r3, #0
 8017814:	bf0c      	ite	eq
 8017816:	2301      	moveq	r3, #1
 8017818:	2300      	movne	r3, #0
 801781a:	b2db      	uxtb	r3, r3
 801781c:	2b00      	cmp	r3, #0
 801781e:	d013      	beq.n	8017848 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017820:	480b      	ldr	r0, [pc, #44]	; (8017850 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017822:	f005 fd81 	bl	801d328 <__cxa_guard_acquire>
 8017826:	4603      	mov	r3, r0
 8017828:	2b00      	cmp	r3, #0
 801782a:	bf14      	ite	ne
 801782c:	2301      	movne	r3, #1
 801782e:	2300      	moveq	r3, #0
 8017830:	b2db      	uxtb	r3, r3
 8017832:	2b00      	cmp	r3, #0
 8017834:	d008      	beq.n	8017848 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017836:	4807      	ldr	r0, [pc, #28]	; (8017854 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8017838:	f7ff ffc8 	bl	80177cc <_ZN21MockIgnoredActualCallC1Ev>
 801783c:	4804      	ldr	r0, [pc, #16]	; (8017850 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801783e:	f005 fd7f 	bl	801d340 <__cxa_guard_release>
 8017842:	4805      	ldr	r0, [pc, #20]	; (8017858 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8017844:	f005 fda3 	bl	801d38e <atexit>
    return call;
 8017848:	4b02      	ldr	r3, [pc, #8]	; (8017854 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801784a:	4618      	mov	r0, r3
 801784c:	bd80      	pop	{r7, pc}
 801784e:	bf00      	nop
 8017850:	20000d10 	.word	0x20000d10
 8017854:	20000d0c 	.word	0x20000d0c
 8017858:	080177f1 	.word	0x080177f1

0801785c <_ZN21MockIgnoredActualCallD1Ev>:
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	4a05      	ldr	r2, [pc, #20]	; (801787c <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	601a      	str	r2, [r3, #0]
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	4618      	mov	r0, r3
 801786e:	f7fd fe5f 	bl	8015530 <_ZN14MockActualCallD1Ev>
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	4618      	mov	r0, r3
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}
 801787c:	0802554c 	.word	0x0802554c

08017880 <_ZN21MockIgnoredActualCallD0Ev>:
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f7ff ffe7 	bl	801785c <_ZN21MockIgnoredActualCallD1Ev>
 801788e:	2104      	movs	r1, #4
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7f0 fadb 	bl	8007e4c <_ZdlPvj>
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	4618      	mov	r0, r3
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b082      	sub	sp, #8
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	4a05      	ldr	r2, [pc, #20]	; (80178c0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	601a      	str	r2, [r3, #0]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4618      	mov	r0, r3
 80178b2:	f7f0 fefd 	bl	80086b0 <_ZN11MockFailureD1Ev>
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	4618      	mov	r0, r3
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	08025444 	.word	0x08025444

080178c4 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b082      	sub	sp, #8
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7ff ffe7 	bl	80178a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 80178d2:	2134      	movs	r1, #52	; 0x34
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f7f0 fab9 	bl	8007e4c <_ZdlPvj>
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	4618      	mov	r0, r3
 80178de:	3708      	adds	r7, #8
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	4a05      	ldr	r2, [pc, #20]	; (8017904 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	601a      	str	r2, [r3, #0]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	4618      	mov	r0, r3
 80178f6:	f7f0 fedb 	bl	80086b0 <_ZN11MockFailureD1Ev>
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	4618      	mov	r0, r3
 80178fe:	3708      	adds	r7, #8
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}
 8017904:	08025520 	.word	0x08025520

08017908 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	f7ff ffe7 	bl	80178e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8017916:	2134      	movs	r1, #52	; 0x34
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f7f0 fa97 	bl	8007e4c <_ZdlPvj>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	4618      	mov	r0, r3
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	4a05      	ldr	r2, [pc, #20]	; (8017948 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	601a      	str	r2, [r3, #0]
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	4618      	mov	r0, r3
 801793a:	f7f0 feb9 	bl	80086b0 <_ZN11MockFailureD1Ev>
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	4618      	mov	r0, r3
 8017942:	3708      	adds	r7, #8
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}
 8017948:	080254f4 	.word	0x080254f4

0801794c <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f7ff ffe7 	bl	8017928 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801795a:	2134      	movs	r1, #52	; 0x34
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f7f0 fa75 	bl	8007e4c <_ZdlPvj>
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	4618      	mov	r0, r3
 8017966:	3708      	adds	r7, #8
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}

0801796c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801796c:	b580      	push	{r7, lr}
 801796e:	b082      	sub	sp, #8
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	4a05      	ldr	r2, [pc, #20]	; (801798c <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	601a      	str	r2, [r3, #0]
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	4618      	mov	r0, r3
 801797e:	f7f0 fe97 	bl	80086b0 <_ZN11MockFailureD1Ev>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	4618      	mov	r0, r3
 8017986:	3708      	adds	r7, #8
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}
 801798c:	080254c8 	.word	0x080254c8

08017990 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f7ff ffe7 	bl	801796c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801799e:	2134      	movs	r1, #52	; 0x34
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f7f0 fa53 	bl	8007e4c <_ZdlPvj>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	4618      	mov	r0, r3
 80179aa:	3708      	adds	r7, #8
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}

080179b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b082      	sub	sp, #8
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	4a05      	ldr	r2, [pc, #20]	; (80179d0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	601a      	str	r2, [r3, #0]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7f0 fe75 	bl	80086b0 <_ZN11MockFailureD1Ev>
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	4618      	mov	r0, r3
 80179ca:	3708      	adds	r7, #8
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	08025470 	.word	0x08025470

080179d4 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f7ff ffe7 	bl	80179b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80179e2:	2134      	movs	r1, #52	; 0x34
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f7f0 fa31 	bl	8007e4c <_ZdlPvj>
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	4618      	mov	r0, r3
 80179ee:	3708      	adds	r7, #8
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b082      	sub	sp, #8
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
 80179fc:	4a05      	ldr	r2, [pc, #20]	; (8017a14 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	601a      	str	r2, [r3, #0]
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7f0 fe53 	bl	80086b0 <_ZN11MockFailureD1Ev>
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	3708      	adds	r7, #8
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}
 8017a14:	0802549c 	.word	0x0802549c

08017a18 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f7ff ffe7 	bl	80179f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8017a26:	2134      	movs	r1, #52	; 0x34
 8017a28:	6878      	ldr	r0, [r7, #4]
 8017a2a:	f7f0 fa0f 	bl	8007e4c <_ZdlPvj>
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	4618      	mov	r0, r3
 8017a32:	3708      	adds	r7, #8
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}

08017a38 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b082      	sub	sp, #8
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	4a05      	ldr	r2, [pc, #20]	; (8017a58 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	601a      	str	r2, [r3, #0]
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7f0 fe31 	bl	80086b0 <_ZN11MockFailureD1Ev>
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	4618      	mov	r0, r3
 8017a52:	3708      	adds	r7, #8
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}
 8017a58:	080253ec 	.word	0x080253ec

08017a5c <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6878      	ldr	r0, [r7, #4]
 8017a66:	f7ff ffe7 	bl	8017a38 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8017a6a:	2134      	movs	r1, #52	; 0x34
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f7f0 f9ed 	bl	8007e4c <_ZdlPvj>
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	4618      	mov	r0, r3
 8017a76:	3708      	adds	r7, #8
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	4a05      	ldr	r2, [pc, #20]	; (8017a9c <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	601a      	str	r2, [r3, #0]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f0 fe0f 	bl	80086b0 <_ZN11MockFailureD1Ev>
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	4618      	mov	r0, r3
 8017a96:	3708      	adds	r7, #8
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	08025418 	.word	0x08025418

08017aa0 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f7ff ffe7 	bl	8017a7c <_ZN27MockUnexpectedObjectFailureD1Ev>
 8017aae:	2134      	movs	r1, #52	; 0x34
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f7f0 f9cb 	bl	8007e4c <_ZdlPvj>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	4618      	mov	r0, r3
 8017aba:	3708      	adds	r7, #8
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}

08017ac0 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b082      	sub	sp, #8
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
 8017ac8:	6039      	str	r1, [r7, #0]
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	3310      	adds	r3, #16
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	683a      	ldr	r2, [r7, #0]
 8017ad4:	6839      	ldr	r1, [r7, #0]
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	4798      	blx	r3
 8017ada:	4603      	mov	r3, r0
 8017adc:	4618      	mov	r0, r3
 8017ade:	3708      	adds	r7, #8
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}

08017ae4 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8017ae4:	b480      	push	{r7}
 8017ae6:	b083      	sub	sp, #12
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	6039      	str	r1, [r7, #0]
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	4618      	mov	r0, r3
 8017af2:	370c      	adds	r7, #12
 8017af4:	46bd      	mov	sp, r7
 8017af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afa:	4770      	bx	lr

08017afc <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8017afc:	b480      	push	{r7}
 8017afe:	b083      	sub	sp, #12
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4618      	mov	r0, r3
 8017b0a:	370c      	adds	r7, #12
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b12:	4770      	bx	lr

08017b14 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8017b14:	b480      	push	{r7}
 8017b16:	b085      	sub	sp, #20
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	4618      	mov	r0, r3
 8017b24:	3714      	adds	r7, #20
 8017b26:	46bd      	mov	sp, r7
 8017b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2c:	4770      	bx	lr

08017b2e <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8017b2e:	b480      	push	{r7}
 8017b30:	b085      	sub	sp, #20
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	60f8      	str	r0, [r7, #12]
 8017b36:	60b9      	str	r1, [r7, #8]
 8017b38:	4613      	mov	r3, r2
 8017b3a:	71fb      	strb	r3, [r7, #7]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	4618      	mov	r0, r3
 8017b40:	3714      	adds	r7, #20
 8017b42:	46bd      	mov	sp, r7
 8017b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b48:	4770      	bx	lr

08017b4a <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8017b4a:	b480      	push	{r7}
 8017b4c:	b085      	sub	sp, #20
 8017b4e:	af00      	add	r7, sp, #0
 8017b50:	60f8      	str	r0, [r7, #12]
 8017b52:	60b9      	str	r1, [r7, #8]
 8017b54:	607a      	str	r2, [r7, #4]
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3714      	adds	r7, #20
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b62:	4770      	bx	lr

08017b64 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8017b64:	b480      	push	{r7}
 8017b66:	b085      	sub	sp, #20
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	60f8      	str	r0, [r7, #12]
 8017b6c:	60b9      	str	r1, [r7, #8]
 8017b6e:	607a      	str	r2, [r7, #4]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	4618      	mov	r0, r3
 8017b74:	3714      	adds	r7, #20
 8017b76:	46bd      	mov	sp, r7
 8017b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7c:	4770      	bx	lr

08017b7e <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017b7e:	b480      	push	{r7}
 8017b80:	b085      	sub	sp, #20
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	60f8      	str	r0, [r7, #12]
 8017b86:	60b9      	str	r1, [r7, #8]
 8017b88:	607a      	str	r2, [r7, #4]
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3714      	adds	r7, #20
 8017b90:	46bd      	mov	sp, r7
 8017b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b96:	4770      	bx	lr

08017b98 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017b98:	b480      	push	{r7}
 8017b9a:	b085      	sub	sp, #20
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	60f8      	str	r0, [r7, #12]
 8017ba0:	60b9      	str	r1, [r7, #8]
 8017ba2:	607a      	str	r2, [r7, #4]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3714      	adds	r7, #20
 8017baa:	46bd      	mov	sp, r7
 8017bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb0:	4770      	bx	lr

08017bb2 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8017bb2:	b480      	push	{r7}
 8017bb4:	b085      	sub	sp, #20
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	60f8      	str	r0, [r7, #12]
 8017bba:	60b9      	str	r1, [r7, #8]
 8017bbc:	4639      	mov	r1, r7
 8017bbe:	e881 000c 	stmia.w	r1, {r2, r3}
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3714      	adds	r7, #20
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bce:	4770      	bx	lr

08017bd0 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017bd0:	b480      	push	{r7}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	4639      	mov	r1, r7
 8017bdc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	4618      	mov	r0, r3
 8017be4:	3714      	adds	r7, #20
 8017be6:	46bd      	mov	sp, r7
 8017be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bec:	4770      	bx	lr

08017bee <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017bee:	b480      	push	{r7}
 8017bf0:	b085      	sub	sp, #20
 8017bf2:	af00      	add	r7, sp, #0
 8017bf4:	60f8      	str	r0, [r7, #12]
 8017bf6:	60b9      	str	r1, [r7, #8]
 8017bf8:	ed87 0b00 	vstr	d0, [r7]
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3714      	adds	r7, #20
 8017c02:	46bd      	mov	sp, r7
 8017c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c08:	4770      	bx	lr

08017c0a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8017c0a:	b480      	push	{r7}
 8017c0c:	b087      	sub	sp, #28
 8017c0e:	af00      	add	r7, sp, #0
 8017c10:	6178      	str	r0, [r7, #20]
 8017c12:	6139      	str	r1, [r7, #16]
 8017c14:	ed87 0b02 	vstr	d0, [r7, #8]
 8017c18:	ed87 1b00 	vstr	d1, [r7]
 8017c1c:	697b      	ldr	r3, [r7, #20]
 8017c1e:	4618      	mov	r0, r3
 8017c20:	371c      	adds	r7, #28
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr

08017c2a <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8017c2a:	b480      	push	{r7}
 8017c2c:	b085      	sub	sp, #20
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	60f8      	str	r0, [r7, #12]
 8017c32:	60b9      	str	r1, [r7, #8]
 8017c34:	607a      	str	r2, [r7, #4]
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3714      	adds	r7, #20
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c42:	4770      	bx	lr

08017c44 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8017c44:	b480      	push	{r7}
 8017c46:	b085      	sub	sp, #20
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	60f8      	str	r0, [r7, #12]
 8017c4c:	60b9      	str	r1, [r7, #8]
 8017c4e:	607a      	str	r2, [r7, #4]
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	4618      	mov	r0, r3
 8017c54:	3714      	adds	r7, #20
 8017c56:	46bd      	mov	sp, r7
 8017c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5c:	4770      	bx	lr

08017c5e <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8017c5e:	b480      	push	{r7}
 8017c60:	b085      	sub	sp, #20
 8017c62:	af00      	add	r7, sp, #0
 8017c64:	60f8      	str	r0, [r7, #12]
 8017c66:	60b9      	str	r1, [r7, #8]
 8017c68:	607a      	str	r2, [r7, #4]
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	3714      	adds	r7, #20
 8017c70:	46bd      	mov	sp, r7
 8017c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c76:	4770      	bx	lr

08017c78 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8017c78:	b480      	push	{r7}
 8017c7a:	b085      	sub	sp, #20
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	4618      	mov	r0, r3
 8017c88:	3714      	adds	r7, #20
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c90:	4770      	bx	lr

08017c92 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8017c92:	b480      	push	{r7}
 8017c94:	b085      	sub	sp, #20
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	60f8      	str	r0, [r7, #12]
 8017c9a:	60b9      	str	r1, [r7, #8]
 8017c9c:	607a      	str	r2, [r7, #4]
 8017c9e:	603b      	str	r3, [r7, #0]
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3714      	adds	r7, #20
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cac:	4770      	bx	lr

08017cae <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017cae:	b480      	push	{r7}
 8017cb0:	b085      	sub	sp, #20
 8017cb2:	af00      	add	r7, sp, #0
 8017cb4:	60f8      	str	r0, [r7, #12]
 8017cb6:	60b9      	str	r1, [r7, #8]
 8017cb8:	607a      	str	r2, [r7, #4]
 8017cba:	603b      	str	r3, [r7, #0]
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3714      	adds	r7, #20
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr

08017cca <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8017cca:	b480      	push	{r7}
 8017ccc:	b085      	sub	sp, #20
 8017cce:	af00      	add	r7, sp, #0
 8017cd0:	60f8      	str	r0, [r7, #12]
 8017cd2:	60b9      	str	r1, [r7, #8]
 8017cd4:	607a      	str	r2, [r7, #4]
 8017cd6:	603b      	str	r3, [r7, #0]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3714      	adds	r7, #20
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce4:	4770      	bx	lr

08017ce6 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017ce6:	b480      	push	{r7}
 8017ce8:	b085      	sub	sp, #20
 8017cea:	af00      	add	r7, sp, #0
 8017cec:	60f8      	str	r0, [r7, #12]
 8017cee:	60b9      	str	r1, [r7, #8]
 8017cf0:	607a      	str	r2, [r7, #4]
 8017cf2:	603b      	str	r3, [r7, #0]
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3714      	adds	r7, #20
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d00:	4770      	bx	lr

08017d02 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8017d02:	b480      	push	{r7}
 8017d04:	b083      	sub	sp, #12
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	6078      	str	r0, [r7, #4]
 8017d0a:	6039      	str	r1, [r7, #0]
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	4618      	mov	r0, r3
 8017d10:	370c      	adds	r7, #12
 8017d12:	46bd      	mov	sp, r7
 8017d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d18:	4770      	bx	lr

08017d1a <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8017d1a:	b480      	push	{r7}
 8017d1c:	b083      	sub	sp, #12
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	6078      	str	r0, [r7, #4]
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	4618      	mov	r0, r3
 8017d26:	370c      	adds	r7, #12
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2e:	4770      	bx	lr

08017d30 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8017d30:	b480      	push	{r7}
 8017d32:	b083      	sub	sp, #12
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
 8017d38:	460b      	mov	r3, r1
 8017d3a:	70fb      	strb	r3, [r7, #3]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	4618      	mov	r0, r3
 8017d40:	370c      	adds	r7, #12
 8017d42:	46bd      	mov	sp, r7
 8017d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d48:	4770      	bx	lr

08017d4a <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8017d4a:	b480      	push	{r7}
 8017d4c:	b083      	sub	sp, #12
 8017d4e:	af00      	add	r7, sp, #0
 8017d50:	6078      	str	r0, [r7, #4]
 8017d52:	6039      	str	r1, [r7, #0]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	4618      	mov	r0, r3
 8017d58:	370c      	adds	r7, #12
 8017d5a:	46bd      	mov	sp, r7
 8017d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d60:	4770      	bx	lr

08017d62 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8017d62:	b480      	push	{r7}
 8017d64:	b083      	sub	sp, #12
 8017d66:	af00      	add	r7, sp, #0
 8017d68:	6078      	str	r0, [r7, #4]
 8017d6a:	6039      	str	r1, [r7, #0]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	4618      	mov	r0, r3
 8017d70:	370c      	adds	r7, #12
 8017d72:	46bd      	mov	sp, r7
 8017d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d78:	4770      	bx	lr

08017d7a <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8017d7a:	b480      	push	{r7}
 8017d7c:	b083      	sub	sp, #12
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	6078      	str	r0, [r7, #4]
 8017d82:	6039      	str	r1, [r7, #0]
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	4618      	mov	r0, r3
 8017d88:	370c      	adds	r7, #12
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d90:	4770      	bx	lr

08017d92 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8017d92:	b480      	push	{r7}
 8017d94:	b083      	sub	sp, #12
 8017d96:	af00      	add	r7, sp, #0
 8017d98:	6078      	str	r0, [r7, #4]
 8017d9a:	6039      	str	r1, [r7, #0]
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	4618      	mov	r0, r3
 8017da0:	370c      	adds	r7, #12
 8017da2:	46bd      	mov	sp, r7
 8017da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da8:	4770      	bx	lr

08017daa <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8017daa:	b480      	push	{r7}
 8017dac:	b085      	sub	sp, #20
 8017dae:	af00      	add	r7, sp, #0
 8017db0:	60f8      	str	r0, [r7, #12]
 8017db2:	1d3b      	adds	r3, r7, #4
 8017db4:	e883 0006 	stmia.w	r3, {r1, r2}
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3714      	adds	r7, #20
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc4:	4770      	bx	lr

08017dc6 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8017dc6:	b480      	push	{r7}
 8017dc8:	b085      	sub	sp, #20
 8017dca:	af00      	add	r7, sp, #0
 8017dcc:	60f8      	str	r0, [r7, #12]
 8017dce:	1d3b      	adds	r3, r7, #4
 8017dd0:	e883 0006 	stmia.w	r3, {r1, r2}
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	3714      	adds	r7, #20
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de0:	4770      	bx	lr

08017de2 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8017de2:	b480      	push	{r7}
 8017de4:	b085      	sub	sp, #20
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	60f8      	str	r0, [r7, #12]
 8017dea:	ed87 0b00 	vstr	d0, [r7]
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	4618      	mov	r0, r3
 8017df2:	3714      	adds	r7, #20
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8017dfc:	b480      	push	{r7}
 8017dfe:	b083      	sub	sp, #12
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	4618      	mov	r0, r3
 8017e0a:	370c      	adds	r7, #12
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr

08017e14 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8017e14:	b480      	push	{r7}
 8017e16:	b083      	sub	sp, #12
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	6039      	str	r1, [r7, #0]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4618      	mov	r0, r3
 8017e22:	370c      	adds	r7, #12
 8017e24:	46bd      	mov	sp, r7
 8017e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2a:	4770      	bx	lr

08017e2c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	6039      	str	r1, [r7, #0]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	4618      	mov	r0, r3
 8017e3a:	370c      	adds	r7, #12
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e42:	4770      	bx	lr

08017e44 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8017e44:	b480      	push	{r7}
 8017e46:	b083      	sub	sp, #12
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
 8017e4c:	6039      	str	r1, [r7, #0]
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	4618      	mov	r0, r3
 8017e52:	370c      	adds	r7, #12
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr

08017e5c <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8017e5c:	b480      	push	{r7}
 8017e5e:	b083      	sub	sp, #12
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
 8017e64:	6039      	str	r1, [r7, #0]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	4618      	mov	r0, r3
 8017e6a:	370c      	adds	r7, #12
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e72:	4770      	bx	lr

08017e74 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8017e74:	b480      	push	{r7}
 8017e76:	b083      	sub	sp, #12
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	4a04      	ldr	r2, [pc, #16]	; (8017e90 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	601a      	str	r2, [r3, #0]
{
}
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	4618      	mov	r0, r3
 8017e86:	370c      	adds	r7, #12
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8e:	4770      	bx	lr
 8017e90:	08025af0 	.word	0x08025af0

08017e94 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8017e94:	b480      	push	{r7}
 8017e96:	b083      	sub	sp, #12
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
 8017e9c:	4a04      	ldr	r2, [pc, #16]	; (8017eb0 <_ZN16MockExpectedCallD1Ev+0x1c>)
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	601a      	str	r2, [r3, #0]
{
}
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	370c      	adds	r7, #12
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr
 8017eb0:	08025af0 	.word	0x08025af0

08017eb4 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	3358      	adds	r3, #88	; 0x58
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	687a      	ldr	r2, [r7, #4]
 8017ec8:	6839      	ldr	r1, [r7, #0]
 8017eca:	4610      	mov	r0, r2
 8017ecc:	4798      	blx	r3
}
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	3708      	adds	r7, #8
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}

08017ed6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b082      	sub	sp, #8
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
 8017ede:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	3304      	adds	r3, #4
 8017ee4:	6839      	ldr	r1, [r7, #0]
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7f2 fbcb 	bl	800a682 <_ZN12SimpleStringaSERKS_>
}
 8017eec:	bf00      	nop
 8017eee:	3708      	adds	r7, #8
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	bd80      	pop	{r7, pc}

08017ef4 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b082      	sub	sp, #8
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
 8017efc:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	3304      	adds	r3, #4
 8017f02:	4619      	mov	r1, r3
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f7f2 fba4 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
	...

08017f14 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8017f14:	b590      	push	{r4, r7, lr}
 8017f16:	b085      	sub	sp, #20
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
 8017f1c:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7ff ffa7 	bl	8017e74 <_ZN16MockExpectedCallC1Ev>
 8017f26:	4a2c      	ldr	r2, [pc, #176]	; (8017fd8 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	601a      	str	r2, [r3, #0]
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	3304      	adds	r3, #4
 8017f30:	492a      	ldr	r1, [pc, #168]	; (8017fdc <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7f2 fb39 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	731a      	strb	r2, [r3, #12]
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2200      	movs	r2, #0
 8017f42:	735a      	strb	r2, [r3, #13]
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2200      	movs	r2, #0
 8017f48:	611a      	str	r2, [r3, #16]
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	615a      	str	r2, [r3, #20]
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2200      	movs	r2, #0
 8017f54:	761a      	strb	r2, [r3, #24]
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8017f5c:	f107 0308 	add.w	r3, r7, #8
 8017f60:	491e      	ldr	r1, [pc, #120]	; (8017fdc <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f2 fb21 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8017f68:	f107 0308 	add.w	r3, r7, #8
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f003 f840 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017f74:	f107 0308 	add.w	r3, r7, #8
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f7f2 fece 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2200      	movs	r2, #0
 8017f82:	661a      	str	r2, [r3, #96]	; 0x60
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2200      	movs	r2, #0
 8017f88:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2201      	movs	r2, #1
 8017f90:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	2200      	movs	r2, #0
 8017f98:	669a      	str	r2, [r3, #104]	; 0x68
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	683a      	ldr	r2, [r7, #0]
 8017f9e:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8017fa0:	2246      	movs	r2, #70	; 0x46
 8017fa2:	490f      	ldr	r1, [pc, #60]	; (8017fe0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8017fa4:	2004      	movs	r0, #4
 8017fa6:	f7ef ff3d 	bl	8007e24 <_ZnwjPKci>
 8017faa:	4604      	mov	r4, r0
 8017fac:	4620      	mov	r0, r4
 8017fae:	f004 ff34 	bl	801ce1a <_ZN18MockNamedValueListC1Ev>
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8017fb6:	2247      	movs	r2, #71	; 0x47
 8017fb8:	4909      	ldr	r1, [pc, #36]	; (8017fe0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8017fba:	2004      	movs	r0, #4
 8017fbc:	f7ef ff32 	bl	8007e24 <_ZnwjPKci>
 8017fc0:	4604      	mov	r4, r0
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f004 ff29 	bl	801ce1a <_ZN18MockNamedValueListC1Ev>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	621c      	str	r4, [r3, #32]
}
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3714      	adds	r7, #20
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd90      	pop	{r4, r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	08025934 	.word	0x08025934
 8017fdc:	08023368 	.word	0x08023368
 8017fe0:	0802336c 	.word	0x0802336c

08017fe4 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	4a17      	ldr	r2, [pc, #92]	; (801804c <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	69db      	ldr	r3, [r3, #28]
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f004 ff1d 	bl	801ce36 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	69db      	ldr	r3, [r3, #28]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d003      	beq.n	801800c <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8018004:	2104      	movs	r1, #4
 8018006:	4618      	mov	r0, r3
 8018008:	f7ef ff20 	bl	8007e4c <_ZdlPvj>
    outputParameters_->clear();
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6a1b      	ldr	r3, [r3, #32]
 8018010:	4618      	mov	r0, r3
 8018012:	f004 ff10 	bl	801ce36 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	6a1b      	ldr	r3, [r3, #32]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d003      	beq.n	8018026 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801801e:	2104      	movs	r1, #4
 8018020:	4618      	mov	r0, r3
 8018022:	f7ef ff13 	bl	8007e4c <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	3328      	adds	r3, #40	; 0x28
 801802a:	4618      	mov	r0, r3
 801802c:	f003 f80c 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	3304      	adds	r3, #4
 8018034:	4618      	mov	r0, r3
 8018036:	f7f2 fe70 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	4618      	mov	r0, r3
 801803e:	f7ff ff29 	bl	8017e94 <_ZN16MockExpectedCallD1Ev>
}
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4618      	mov	r0, r3
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}
 801804c:	08025934 	.word	0x08025934

08018050 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
}
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f7ff ffc3 	bl	8017fe4 <_ZN23MockCheckedExpectedCallD1Ev>
 801805e:	2170      	movs	r1, #112	; 0x70
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f7ef fef3 	bl	8007e4c <_ZdlPvj>
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	4618      	mov	r0, r3
 801806a:	3708      	adds	r7, #8
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
 8018078:	6039      	str	r1, [r7, #0]
    setName(name);
 801807a:	6839      	ldr	r1, [r7, #0]
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7ff ff2a 	bl	8017ed6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8018082:	687b      	ldr	r3, [r7, #4]
}
 8018084:	4618      	mov	r0, r3
 8018086:	3708      	adds	r7, #8
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801808c:	b590      	push	{r4, r7, lr}
 801808e:	b087      	sub	sp, #28
 8018090:	af00      	add	r7, sp, #0
 8018092:	60f8      	str	r0, [r7, #12]
 8018094:	60b9      	str	r1, [r7, #8]
 8018096:	4613      	mov	r3, r2
 8018098:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801809a:	225a      	movs	r2, #90	; 0x5a
 801809c:	490e      	ldr	r1, [pc, #56]	; (80180d8 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801809e:	2038      	movs	r0, #56	; 0x38
 80180a0:	f7ef fec0 	bl	8007e24 <_ZnwjPKci>
 80180a4:	4604      	mov	r4, r0
 80180a6:	68b9      	ldr	r1, [r7, #8]
 80180a8:	4620      	mov	r0, r4
 80180aa:	f001 f851 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80180ae:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	69db      	ldr	r3, [r3, #28]
 80180b4:	6979      	ldr	r1, [r7, #20]
 80180b6:	4618      	mov	r0, r3
 80180b8:	f004 fee0 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	3308      	adds	r3, #8
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	79fa      	ldrb	r2, [r7, #7]
 80180c6:	4611      	mov	r1, r2
 80180c8:	6978      	ldr	r0, [r7, #20]
 80180ca:	4798      	blx	r3
    return *this;
 80180cc:	68fb      	ldr	r3, [r7, #12]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	371c      	adds	r7, #28
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd90      	pop	{r4, r7, pc}
 80180d6:	bf00      	nop
 80180d8:	0802336c 	.word	0x0802336c

080180dc <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80180dc:	b590      	push	{r4, r7, lr}
 80180de:	b087      	sub	sp, #28
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	60f8      	str	r0, [r7, #12]
 80180e4:	60b9      	str	r1, [r7, #8]
 80180e6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80180e8:	2262      	movs	r2, #98	; 0x62
 80180ea:	490e      	ldr	r1, [pc, #56]	; (8018124 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 80180ec:	2038      	movs	r0, #56	; 0x38
 80180ee:	f7ef fe99 	bl	8007e24 <_ZnwjPKci>
 80180f2:	4604      	mov	r4, r0
 80180f4:	68b9      	ldr	r1, [r7, #8]
 80180f6:	4620      	mov	r0, r4
 80180f8:	f001 f82a 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80180fc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	69db      	ldr	r3, [r3, #28]
 8018102:	6979      	ldr	r1, [r7, #20]
 8018104:	4618      	mov	r0, r3
 8018106:	f004 feb9 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	3310      	adds	r3, #16
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	6879      	ldr	r1, [r7, #4]
 8018114:	6978      	ldr	r0, [r7, #20]
 8018116:	4798      	blx	r3
    return *this;
 8018118:	68fb      	ldr	r3, [r7, #12]
}
 801811a:	4618      	mov	r0, r3
 801811c:	371c      	adds	r7, #28
 801811e:	46bd      	mov	sp, r7
 8018120:	bd90      	pop	{r4, r7, pc}
 8018122:	bf00      	nop
 8018124:	0802336c 	.word	0x0802336c

08018128 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8018128:	b590      	push	{r4, r7, lr}
 801812a:	b087      	sub	sp, #28
 801812c:	af00      	add	r7, sp, #0
 801812e:	60f8      	str	r0, [r7, #12]
 8018130:	60b9      	str	r1, [r7, #8]
 8018132:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018134:	226a      	movs	r2, #106	; 0x6a
 8018136:	490e      	ldr	r1, [pc, #56]	; (8018170 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8018138:	2038      	movs	r0, #56	; 0x38
 801813a:	f7ef fe73 	bl	8007e24 <_ZnwjPKci>
 801813e:	4604      	mov	r4, r0
 8018140:	68b9      	ldr	r1, [r7, #8]
 8018142:	4620      	mov	r0, r4
 8018144:	f001 f804 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018148:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	69db      	ldr	r3, [r3, #28]
 801814e:	6979      	ldr	r1, [r7, #20]
 8018150:	4618      	mov	r0, r3
 8018152:	f004 fe93 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	330c      	adds	r3, #12
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	6879      	ldr	r1, [r7, #4]
 8018160:	6978      	ldr	r0, [r7, #20]
 8018162:	4798      	blx	r3
    return *this;
 8018164:	68fb      	ldr	r3, [r7, #12]
}
 8018166:	4618      	mov	r0, r3
 8018168:	371c      	adds	r7, #28
 801816a:	46bd      	mov	sp, r7
 801816c:	bd90      	pop	{r4, r7, pc}
 801816e:	bf00      	nop
 8018170:	0802336c 	.word	0x0802336c

08018174 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018174:	b590      	push	{r4, r7, lr}
 8018176:	b087      	sub	sp, #28
 8018178:	af00      	add	r7, sp, #0
 801817a:	60f8      	str	r0, [r7, #12]
 801817c:	60b9      	str	r1, [r7, #8]
 801817e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018180:	2272      	movs	r2, #114	; 0x72
 8018182:	490e      	ldr	r1, [pc, #56]	; (80181bc <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8018184:	2038      	movs	r0, #56	; 0x38
 8018186:	f7ef fe4d 	bl	8007e24 <_ZnwjPKci>
 801818a:	4604      	mov	r4, r0
 801818c:	68b9      	ldr	r1, [r7, #8]
 801818e:	4620      	mov	r0, r4
 8018190:	f000 ffde 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018194:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	69db      	ldr	r3, [r3, #28]
 801819a:	6979      	ldr	r1, [r7, #20]
 801819c:	4618      	mov	r0, r3
 801819e:	f004 fe6d 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	3314      	adds	r3, #20
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	6879      	ldr	r1, [r7, #4]
 80181ac:	6978      	ldr	r0, [r7, #20]
 80181ae:	4798      	blx	r3
    return *this;
 80181b0:	68fb      	ldr	r3, [r7, #12]
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	371c      	adds	r7, #28
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd90      	pop	{r4, r7, pc}
 80181ba:	bf00      	nop
 80181bc:	0802336c 	.word	0x0802336c

080181c0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80181c0:	b590      	push	{r4, r7, lr}
 80181c2:	b087      	sub	sp, #28
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	60f8      	str	r0, [r7, #12]
 80181c8:	60b9      	str	r1, [r7, #8]
 80181ca:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80181cc:	227a      	movs	r2, #122	; 0x7a
 80181ce:	490e      	ldr	r1, [pc, #56]	; (8018208 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 80181d0:	2038      	movs	r0, #56	; 0x38
 80181d2:	f7ef fe27 	bl	8007e24 <_ZnwjPKci>
 80181d6:	4604      	mov	r4, r0
 80181d8:	68b9      	ldr	r1, [r7, #8]
 80181da:	4620      	mov	r0, r4
 80181dc:	f000 ffb8 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80181e0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	69db      	ldr	r3, [r3, #28]
 80181e6:	6979      	ldr	r1, [r7, #20]
 80181e8:	4618      	mov	r0, r3
 80181ea:	f004 fe47 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80181ee:	697b      	ldr	r3, [r7, #20]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	3318      	adds	r3, #24
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	6879      	ldr	r1, [r7, #4]
 80181f8:	6978      	ldr	r0, [r7, #20]
 80181fa:	4798      	blx	r3
    return *this;
 80181fc:	68fb      	ldr	r3, [r7, #12]
}
 80181fe:	4618      	mov	r0, r3
 8018200:	371c      	adds	r7, #28
 8018202:	46bd      	mov	sp, r7
 8018204:	bd90      	pop	{r4, r7, pc}
 8018206:	bf00      	nop
 8018208:	0802336c 	.word	0x0802336c

0801820c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801820c:	b5b0      	push	{r4, r5, r7, lr}
 801820e:	b086      	sub	sp, #24
 8018210:	af02      	add	r7, sp, #8
 8018212:	60f8      	str	r0, [r7, #12]
 8018214:	60b9      	str	r1, [r7, #8]
 8018216:	4639      	mov	r1, r7
 8018218:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801821c:	f7f9 fda8 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8018220:	4604      	mov	r4, r0
 8018222:	6823      	ldr	r3, [r4, #0]
 8018224:	3368      	adds	r3, #104	; 0x68
 8018226:	681d      	ldr	r5, [r3, #0]
 8018228:	f7f9 fdb2 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801822c:	4603      	mov	r3, r0
 801822e:	9300      	str	r3, [sp, #0]
 8018230:	2396      	movs	r3, #150	; 0x96
 8018232:	4a04      	ldr	r2, [pc, #16]	; (8018244 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8018234:	4904      	ldr	r1, [pc, #16]	; (8018248 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018236:	4620      	mov	r0, r4
 8018238:	47a8      	blx	r5
    return *this;
 801823a:	68fb      	ldr	r3, [r7, #12]
}
 801823c:	4618      	mov	r0, r3
 801823e:	3710      	adds	r7, #16
 8018240:	46bd      	mov	sp, r7
 8018242:	bdb0      	pop	{r4, r5, r7, pc}
 8018244:	0802336c 	.word	0x0802336c
 8018248:	08023388 	.word	0x08023388

0801824c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801824c:	b5b0      	push	{r4, r5, r7, lr}
 801824e:	b086      	sub	sp, #24
 8018250:	af02      	add	r7, sp, #8
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	4639      	mov	r1, r7
 8018258:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801825c:	f7f9 fd88 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8018260:	4604      	mov	r4, r0
 8018262:	6823      	ldr	r3, [r4, #0]
 8018264:	3368      	adds	r3, #104	; 0x68
 8018266:	681d      	ldr	r5, [r3, #0]
 8018268:	f7f9 fd92 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801826c:	4603      	mov	r3, r0
 801826e:	9300      	str	r3, [sp, #0]
 8018270:	239c      	movs	r3, #156	; 0x9c
 8018272:	4a04      	ldr	r2, [pc, #16]	; (8018284 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8018274:	4904      	ldr	r1, [pc, #16]	; (8018288 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018276:	4620      	mov	r0, r4
 8018278:	47a8      	blx	r5
    return *this;
 801827a:	68fb      	ldr	r3, [r7, #12]
}
 801827c:	4618      	mov	r0, r3
 801827e:	3710      	adds	r7, #16
 8018280:	46bd      	mov	sp, r7
 8018282:	bdb0      	pop	{r4, r5, r7, pc}
 8018284:	0802336c 	.word	0x0802336c
 8018288:	080233a8 	.word	0x080233a8

0801828c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801828c:	b590      	push	{r4, r7, lr}
 801828e:	b087      	sub	sp, #28
 8018290:	af00      	add	r7, sp, #0
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801829a:	22a4      	movs	r2, #164	; 0xa4
 801829c:	490e      	ldr	r1, [pc, #56]	; (80182d8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801829e:	2038      	movs	r0, #56	; 0x38
 80182a0:	f7ef fdc0 	bl	8007e24 <_ZnwjPKci>
 80182a4:	4604      	mov	r4, r0
 80182a6:	68b9      	ldr	r1, [r7, #8]
 80182a8:	4620      	mov	r0, r4
 80182aa:	f000 ff51 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80182ae:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	69db      	ldr	r3, [r3, #28]
 80182b4:	6979      	ldr	r1, [r7, #20]
 80182b6:	4618      	mov	r0, r3
 80182b8:	f004 fde0 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80182bc:	697b      	ldr	r3, [r7, #20]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	3324      	adds	r3, #36	; 0x24
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	ed97 0b00 	vldr	d0, [r7]
 80182c8:	6978      	ldr	r0, [r7, #20]
 80182ca:	4798      	blx	r3
    return *this;
 80182cc:	68fb      	ldr	r3, [r7, #12]
}
 80182ce:	4618      	mov	r0, r3
 80182d0:	371c      	adds	r7, #28
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bd90      	pop	{r4, r7, pc}
 80182d6:	bf00      	nop
 80182d8:	0802336c 	.word	0x0802336c

080182dc <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 80182dc:	b590      	push	{r4, r7, lr}
 80182de:	b089      	sub	sp, #36	; 0x24
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6178      	str	r0, [r7, #20]
 80182e4:	6139      	str	r1, [r7, #16]
 80182e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80182ea:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80182ee:	22ac      	movs	r2, #172	; 0xac
 80182f0:	490f      	ldr	r1, [pc, #60]	; (8018330 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 80182f2:	2038      	movs	r0, #56	; 0x38
 80182f4:	f7ef fd96 	bl	8007e24 <_ZnwjPKci>
 80182f8:	4604      	mov	r4, r0
 80182fa:	6939      	ldr	r1, [r7, #16]
 80182fc:	4620      	mov	r0, r4
 80182fe:	f000 ff27 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018302:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	69db      	ldr	r3, [r3, #28]
 8018308:	69f9      	ldr	r1, [r7, #28]
 801830a:	4618      	mov	r0, r3
 801830c:	f004 fdb6 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8018310:	69fb      	ldr	r3, [r7, #28]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	3328      	adds	r3, #40	; 0x28
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	ed97 1b00 	vldr	d1, [r7]
 801831c:	ed97 0b02 	vldr	d0, [r7, #8]
 8018320:	69f8      	ldr	r0, [r7, #28]
 8018322:	4798      	blx	r3
    return *this;
 8018324:	697b      	ldr	r3, [r7, #20]
}
 8018326:	4618      	mov	r0, r3
 8018328:	3724      	adds	r7, #36	; 0x24
 801832a:	46bd      	mov	sp, r7
 801832c:	bd90      	pop	{r4, r7, pc}
 801832e:	bf00      	nop
 8018330:	0802336c 	.word	0x0802336c

08018334 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018334:	b590      	push	{r4, r7, lr}
 8018336:	b087      	sub	sp, #28
 8018338:	af00      	add	r7, sp, #0
 801833a:	60f8      	str	r0, [r7, #12]
 801833c:	60b9      	str	r1, [r7, #8]
 801833e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018340:	22b4      	movs	r2, #180	; 0xb4
 8018342:	490e      	ldr	r1, [pc, #56]	; (801837c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8018344:	2038      	movs	r0, #56	; 0x38
 8018346:	f7ef fd6d 	bl	8007e24 <_ZnwjPKci>
 801834a:	4604      	mov	r4, r0
 801834c:	68b9      	ldr	r1, [r7, #8]
 801834e:	4620      	mov	r0, r4
 8018350:	f000 fefe 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018354:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	69db      	ldr	r3, [r3, #28]
 801835a:	6979      	ldr	r1, [r7, #20]
 801835c:	4618      	mov	r0, r3
 801835e:	f004 fd8d 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	3338      	adds	r3, #56	; 0x38
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	6879      	ldr	r1, [r7, #4]
 801836c:	6978      	ldr	r0, [r7, #20]
 801836e:	4798      	blx	r3
    return *this;
 8018370:	68fb      	ldr	r3, [r7, #12]
}
 8018372:	4618      	mov	r0, r3
 8018374:	371c      	adds	r7, #28
 8018376:	46bd      	mov	sp, r7
 8018378:	bd90      	pop	{r4, r7, pc}
 801837a:	bf00      	nop
 801837c:	0802336c 	.word	0x0802336c

08018380 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018380:	b590      	push	{r4, r7, lr}
 8018382:	b087      	sub	sp, #28
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801838c:	22bc      	movs	r2, #188	; 0xbc
 801838e:	490e      	ldr	r1, [pc, #56]	; (80183c8 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8018390:	2038      	movs	r0, #56	; 0x38
 8018392:	f7ef fd47 	bl	8007e24 <_ZnwjPKci>
 8018396:	4604      	mov	r4, r0
 8018398:	68b9      	ldr	r1, [r7, #8]
 801839a:	4620      	mov	r0, r4
 801839c:	f000 fed8 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80183a0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	69db      	ldr	r3, [r3, #28]
 80183a6:	6979      	ldr	r1, [r7, #20]
 80183a8:	4618      	mov	r0, r3
 80183aa:	f004 fd67 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80183ae:	697b      	ldr	r3, [r7, #20]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	332c      	adds	r3, #44	; 0x2c
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	6879      	ldr	r1, [r7, #4]
 80183b8:	6978      	ldr	r0, [r7, #20]
 80183ba:	4798      	blx	r3
    return *this;
 80183bc:	68fb      	ldr	r3, [r7, #12]
}
 80183be:	4618      	mov	r0, r3
 80183c0:	371c      	adds	r7, #28
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd90      	pop	{r4, r7, pc}
 80183c6:	bf00      	nop
 80183c8:	0802336c 	.word	0x0802336c

080183cc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80183cc:	b590      	push	{r4, r7, lr}
 80183ce:	b087      	sub	sp, #28
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80183d8:	22c4      	movs	r2, #196	; 0xc4
 80183da:	490e      	ldr	r1, [pc, #56]	; (8018414 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 80183dc:	2038      	movs	r0, #56	; 0x38
 80183de:	f7ef fd21 	bl	8007e24 <_ZnwjPKci>
 80183e2:	4604      	mov	r4, r0
 80183e4:	68b9      	ldr	r1, [r7, #8]
 80183e6:	4620      	mov	r0, r4
 80183e8:	f000 feb2 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80183ec:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	69db      	ldr	r3, [r3, #28]
 80183f2:	6979      	ldr	r1, [r7, #20]
 80183f4:	4618      	mov	r0, r3
 80183f6:	f004 fd41 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	3330      	adds	r3, #48	; 0x30
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	6879      	ldr	r1, [r7, #4]
 8018404:	6978      	ldr	r0, [r7, #20]
 8018406:	4798      	blx	r3
    return *this;
 8018408:	68fb      	ldr	r3, [r7, #12]
}
 801840a:	4618      	mov	r0, r3
 801840c:	371c      	adds	r7, #28
 801840e:	46bd      	mov	sp, r7
 8018410:	bd90      	pop	{r4, r7, pc}
 8018412:	bf00      	nop
 8018414:	0802336c 	.word	0x0802336c

08018418 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8018418:	b590      	push	{r4, r7, lr}
 801841a:	b087      	sub	sp, #28
 801841c:	af00      	add	r7, sp, #0
 801841e:	60f8      	str	r0, [r7, #12]
 8018420:	60b9      	str	r1, [r7, #8]
 8018422:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018424:	22cc      	movs	r2, #204	; 0xcc
 8018426:	490e      	ldr	r1, [pc, #56]	; (8018460 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8018428:	2038      	movs	r0, #56	; 0x38
 801842a:	f7ef fcfb 	bl	8007e24 <_ZnwjPKci>
 801842e:	4604      	mov	r4, r0
 8018430:	68b9      	ldr	r1, [r7, #8]
 8018432:	4620      	mov	r0, r4
 8018434:	f000 fe8c 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018438:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	69db      	ldr	r3, [r3, #28]
 801843e:	6979      	ldr	r1, [r7, #20]
 8018440:	4618      	mov	r0, r3
 8018442:	f004 fd1b 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018446:	697b      	ldr	r3, [r7, #20]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	3334      	adds	r3, #52	; 0x34
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	6879      	ldr	r1, [r7, #4]
 8018450:	6978      	ldr	r0, [r7, #20]
 8018452:	4798      	blx	r3
    return *this;
 8018454:	68fb      	ldr	r3, [r7, #12]
}
 8018456:	4618      	mov	r0, r3
 8018458:	371c      	adds	r7, #28
 801845a:	46bd      	mov	sp, r7
 801845c:	bd90      	pop	{r4, r7, pc}
 801845e:	bf00      	nop
 8018460:	0802336c 	.word	0x0802336c

08018464 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018464:	b590      	push	{r4, r7, lr}
 8018466:	b087      	sub	sp, #28
 8018468:	af00      	add	r7, sp, #0
 801846a:	60f8      	str	r0, [r7, #12]
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
 8018470:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018472:	22d4      	movs	r2, #212	; 0xd4
 8018474:	490e      	ldr	r1, [pc, #56]	; (80184b0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8018476:	2038      	movs	r0, #56	; 0x38
 8018478:	f7ef fcd4 	bl	8007e24 <_ZnwjPKci>
 801847c:	4604      	mov	r4, r0
 801847e:	68b9      	ldr	r1, [r7, #8]
 8018480:	4620      	mov	r0, r4
 8018482:	f000 fe65 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018486:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	69db      	ldr	r3, [r3, #28]
 801848c:	6979      	ldr	r1, [r7, #20]
 801848e:	4618      	mov	r0, r3
 8018490:	f004 fcf4 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	333c      	adds	r3, #60	; 0x3c
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	683a      	ldr	r2, [r7, #0]
 801849e:	6879      	ldr	r1, [r7, #4]
 80184a0:	6978      	ldr	r0, [r7, #20]
 80184a2:	4798      	blx	r3
    return *this;
 80184a4:	68fb      	ldr	r3, [r7, #12]
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	371c      	adds	r7, #28
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd90      	pop	{r4, r7, pc}
 80184ae:	bf00      	nop
 80184b0:	0802336c 	.word	0x0802336c

080184b4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80184b4:	b590      	push	{r4, r7, lr}
 80184b6:	b087      	sub	sp, #28
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
 80184c0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80184c2:	22dc      	movs	r2, #220	; 0xdc
 80184c4:	490e      	ldr	r1, [pc, #56]	; (8018500 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 80184c6:	2038      	movs	r0, #56	; 0x38
 80184c8:	f7ef fcac 	bl	8007e24 <_ZnwjPKci>
 80184cc:	4604      	mov	r4, r0
 80184ce:	6879      	ldr	r1, [r7, #4]
 80184d0:	4620      	mov	r0, r4
 80184d2:	f000 fe3d 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80184d6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	69db      	ldr	r3, [r3, #28]
 80184dc:	6979      	ldr	r1, [r7, #20]
 80184de:	4618      	mov	r0, r3
 80184e0:	f004 fccc 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	3340      	adds	r3, #64	; 0x40
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	683a      	ldr	r2, [r7, #0]
 80184ee:	68b9      	ldr	r1, [r7, #8]
 80184f0:	6978      	ldr	r0, [r7, #20]
 80184f2:	4798      	blx	r3
    return *this;
 80184f4:	68fb      	ldr	r3, [r7, #12]
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	371c      	adds	r7, #28
 80184fa:	46bd      	mov	sp, r7
 80184fc:	bd90      	pop	{r4, r7, pc}
 80184fe:	bf00      	nop
 8018500:	0802336c 	.word	0x0802336c

08018504 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8018504:	b590      	push	{r4, r7, lr}
 8018506:	b087      	sub	sp, #28
 8018508:	af00      	add	r7, sp, #0
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
 8018510:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018512:	22e4      	movs	r2, #228	; 0xe4
 8018514:	4911      	ldr	r1, [pc, #68]	; (801855c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8018516:	2038      	movs	r0, #56	; 0x38
 8018518:	f7ef fc84 	bl	8007e24 <_ZnwjPKci>
 801851c:	4604      	mov	r4, r0
 801851e:	68b9      	ldr	r1, [r7, #8]
 8018520:	4620      	mov	r0, r4
 8018522:	f000 fe15 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018526:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	6a1b      	ldr	r3, [r3, #32]
 801852c:	6979      	ldr	r1, [r7, #20]
 801852e:	4618      	mov	r0, r3
 8018530:	f004 fca4 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018534:	697b      	ldr	r3, [r7, #20]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	3330      	adds	r3, #48	; 0x30
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	6879      	ldr	r1, [r7, #4]
 801853e:	6978      	ldr	r0, [r7, #20]
 8018540:	4798      	blx	r3
    newParameter->setSize(size);
 8018542:	697b      	ldr	r3, [r7, #20]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	3348      	adds	r3, #72	; 0x48
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	6839      	ldr	r1, [r7, #0]
 801854c:	6978      	ldr	r0, [r7, #20]
 801854e:	4798      	blx	r3
    return *this;
 8018550:	68fb      	ldr	r3, [r7, #12]
}
 8018552:	4618      	mov	r0, r3
 8018554:	371c      	adds	r7, #28
 8018556:	46bd      	mov	sp, r7
 8018558:	bd90      	pop	{r4, r7, pc}
 801855a:	bf00      	nop
 801855c:	0802336c 	.word	0x0802336c

08018560 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018560:	b590      	push	{r4, r7, lr}
 8018562:	b087      	sub	sp, #28
 8018564:	af00      	add	r7, sp, #0
 8018566:	60f8      	str	r0, [r7, #12]
 8018568:	60b9      	str	r1, [r7, #8]
 801856a:	607a      	str	r2, [r7, #4]
 801856c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801856e:	22ed      	movs	r2, #237	; 0xed
 8018570:	490e      	ldr	r1, [pc, #56]	; (80185ac <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8018572:	2038      	movs	r0, #56	; 0x38
 8018574:	f7ef fc56 	bl	8007e24 <_ZnwjPKci>
 8018578:	4604      	mov	r4, r0
 801857a:	6879      	ldr	r1, [r7, #4]
 801857c:	4620      	mov	r0, r4
 801857e:	f000 fde7 	bl	8019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018582:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	6a1b      	ldr	r3, [r3, #32]
 8018588:	6979      	ldr	r1, [r7, #20]
 801858a:	4618      	mov	r0, r3
 801858c:	f004 fc76 	bl	801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	3340      	adds	r3, #64	; 0x40
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	683a      	ldr	r2, [r7, #0]
 801859a:	68b9      	ldr	r1, [r7, #8]
 801859c:	6978      	ldr	r0, [r7, #20]
 801859e:	4798      	blx	r3
    return *this;
 80185a0:	68fb      	ldr	r3, [r7, #12]
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	371c      	adds	r7, #28
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd90      	pop	{r4, r7, pc}
 80185aa:	bf00      	nop
 80185ac:	0802336c 	.word	0x0802336c

080185b0 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 80185b0:	b590      	push	{r4, r7, lr}
 80185b2:	b083      	sub	sp, #12
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	3318      	adds	r3, #24
 80185c0:	681c      	ldr	r4, [r3, #0]
 80185c2:	2300      	movs	r3, #0
 80185c4:	2200      	movs	r2, #0
 80185c6:	6839      	ldr	r1, [r7, #0]
 80185c8:	6878      	ldr	r0, [r7, #4]
 80185ca:	47a0      	blx	r4
 80185cc:	4603      	mov	r3, r0
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	370c      	adds	r7, #12
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd90      	pop	{r4, r7, pc}
	...

080185d8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b086      	sub	sp, #24
 80185dc:	af00      	add	r7, sp, #0
 80185de:	60f8      	str	r0, [r7, #12]
 80185e0:	60b9      	str	r1, [r7, #8]
 80185e2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	69db      	ldr	r3, [r3, #28]
 80185e8:	6879      	ldr	r1, [r7, #4]
 80185ea:	4618      	mov	r0, r3
 80185ec:	f004 fc7c 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80185f0:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 80185f2:	697b      	ldr	r3, [r7, #20]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d008      	beq.n	801860a <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	3360      	adds	r3, #96	; 0x60
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	68fa      	ldr	r2, [r7, #12]
 8018602:	6979      	ldr	r1, [r7, #20]
 8018604:	4610      	mov	r0, r2
 8018606:	4798      	blx	r3
 8018608:	e004      	b.n	8018614 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	4903      	ldr	r1, [pc, #12]	; (801861c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801860e:	4618      	mov	r0, r3
 8018610:	f7f2 fe10 	bl	800b234 <_Z10StringFromPKc>
}
 8018614:	68f8      	ldr	r0, [r7, #12]
 8018616:	3718      	adds	r7, #24
 8018618:	46bd      	mov	sp, r7
 801861a:	bd80      	pop	{r7, pc}
 801861c:	08023368 	.word	0x08023368

08018620 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	69db      	ldr	r3, [r3, #28]
 801862e:	6839      	ldr	r1, [r7, #0]
 8018630:	4618      	mov	r0, r3
 8018632:	f004 fc59 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018636:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2b00      	cmp	r3, #0
 801863c:	bf14      	ite	ne
 801863e:	2301      	movne	r3, #1
 8018640:	2300      	moveq	r3, #0
 8018642:	b2db      	uxtb	r3, r3
}
 8018644:	4618      	mov	r0, r3
 8018646:	3710      	adds	r7, #16
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
 8018654:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	6a1b      	ldr	r3, [r3, #32]
 801865a:	6839      	ldr	r1, [r7, #0]
 801865c:	4618      	mov	r0, r3
 801865e:	f004 fc43 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018662:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	2b00      	cmp	r3, #0
 8018668:	bf14      	ite	ne
 801866a:	2301      	movne	r3, #1
 801866c:	2300      	moveq	r3, #0
 801866e:	b2db      	uxtb	r3, r3
}
 8018670:	4618      	mov	r0, r3
 8018672:	3710      	adds	r7, #16
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}

08018678 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8018678:	b590      	push	{r4, r7, lr}
 801867a:	b089      	sub	sp, #36	; 0x24
 801867c:	af00      	add	r7, sp, #0
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	69db      	ldr	r3, [r3, #28]
 8018688:	6879      	ldr	r1, [r7, #4]
 801868a:	4618      	mov	r0, r3
 801868c:	f004 fc2c 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018690:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018692:	2400      	movs	r4, #0
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d004      	beq.n	80186a4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801869a:	69f9      	ldr	r1, [r7, #28]
 801869c:	68f8      	ldr	r0, [r7, #12]
 801869e:	f7f0 f829 	bl	80086f4 <_ZN14MockNamedValueC1ERKS_>
 80186a2:	e00c      	b.n	80186be <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 80186a4:	f107 0314 	add.w	r3, r7, #20
 80186a8:	490a      	ldr	r1, [pc, #40]	; (80186d4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 80186aa:	4618      	mov	r0, r3
 80186ac:	f7f1 ff7d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 80186b0:	2401      	movs	r4, #1
 80186b2:	f107 0314 	add.w	r3, r7, #20
 80186b6:	4619      	mov	r1, r3
 80186b8:	68f8      	ldr	r0, [r7, #12]
 80186ba:	f002 fc9b 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 80186be:	2c00      	cmp	r4, #0
 80186c0:	d004      	beq.n	80186cc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 80186c2:	f107 0314 	add.w	r3, r7, #20
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7f2 fb27 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 80186cc:	68f8      	ldr	r0, [r7, #12]
 80186ce:	3724      	adds	r7, #36	; 0x24
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd90      	pop	{r4, r7, pc}
 80186d4:	08023368 	.word	0x08023368

080186d8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 80186d8:	b590      	push	{r4, r7, lr}
 80186da:	b089      	sub	sp, #36	; 0x24
 80186dc:	af00      	add	r7, sp, #0
 80186de:	60f8      	str	r0, [r7, #12]
 80186e0:	60b9      	str	r1, [r7, #8]
 80186e2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	6a1b      	ldr	r3, [r3, #32]
 80186e8:	6879      	ldr	r1, [r7, #4]
 80186ea:	4618      	mov	r0, r3
 80186ec:	f004 fbfc 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80186f0:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 80186f2:	2400      	movs	r4, #0
 80186f4:	69fb      	ldr	r3, [r7, #28]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d004      	beq.n	8018704 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 80186fa:	69f9      	ldr	r1, [r7, #28]
 80186fc:	68f8      	ldr	r0, [r7, #12]
 80186fe:	f7ef fff9 	bl	80086f4 <_ZN14MockNamedValueC1ERKS_>
 8018702:	e00c      	b.n	801871e <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8018704:	f107 0314 	add.w	r3, r7, #20
 8018708:	490a      	ldr	r1, [pc, #40]	; (8018734 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801870a:	4618      	mov	r0, r3
 801870c:	f7f1 ff4d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8018710:	2401      	movs	r4, #1
 8018712:	f107 0314 	add.w	r3, r7, #20
 8018716:	4619      	mov	r1, r3
 8018718:	68f8      	ldr	r0, [r7, #12]
 801871a:	f002 fc6b 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801871e:	2c00      	cmp	r4, #0
 8018720:	d004      	beq.n	801872c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8018722:	f107 0314 	add.w	r3, r7, #20
 8018726:	4618      	mov	r0, r3
 8018728:	f7f2 faf7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801872c:	68f8      	ldr	r0, [r7, #12]
 801872e:	3724      	adds	r7, #36	; 0x24
 8018730:	46bd      	mov	sp, r7
 8018732:	bd90      	pop	{r4, r7, pc}
 8018734:	08023368 	.word	0x08023368

08018738 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	69db      	ldr	r3, [r3, #28]
 8018744:	4618      	mov	r0, r3
 8018746:	f004 fbfe 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 801874a:	60f8      	str	r0, [r7, #12]
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d014      	beq.n	801877c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8018752:	68f9      	ldr	r1, [r7, #12]
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f000 fced 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801875a:	4603      	mov	r3, r0
 801875c:	4618      	mov	r0, r3
 801875e:	f000 fd1f 	bl	80191a0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018762:	4603      	mov	r3, r0
 8018764:	f083 0301 	eor.w	r3, r3, #1
 8018768:	b2db      	uxtb	r3, r3
 801876a:	2b00      	cmp	r3, #0
 801876c:	d001      	beq.n	8018772 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801876e:	2300      	movs	r3, #0
 8018770:	e023      	b.n	80187ba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018772:	68f8      	ldr	r0, [r7, #12]
 8018774:	f004 faf0 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018778:	60f8      	str	r0, [r7, #12]
 801877a:	e7e7      	b.n	801874c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6a1b      	ldr	r3, [r3, #32]
 8018780:	4618      	mov	r0, r3
 8018782:	f004 fbe0 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018786:	60f8      	str	r0, [r7, #12]
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d014      	beq.n	80187b8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801878e:	68f9      	ldr	r1, [r7, #12]
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f000 fccf 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018796:	4603      	mov	r3, r0
 8018798:	4618      	mov	r0, r3
 801879a:	f000 fd01 	bl	80191a0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801879e:	4603      	mov	r3, r0
 80187a0:	f083 0301 	eor.w	r3, r3, #1
 80187a4:	b2db      	uxtb	r3, r3
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d001      	beq.n	80187ae <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 80187aa:	2300      	movs	r3, #0
 80187ac:	e005      	b.n	80187ba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 80187ae:	68f8      	ldr	r0, [r7, #12]
 80187b0:	f004 fad2 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 80187b4:	60f8      	str	r0, [r7, #12]
 80187b6:	e7e7      	b.n	8018788 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 80187b8:	2301      	movs	r3, #1
}
 80187ba:	4618      	mov	r0, r3
 80187bc:	3710      	adds	r7, #16
 80187be:	46bd      	mov	sp, r7
 80187c0:	bd80      	pop	{r7, pc}

080187c2 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 80187c2:	b480      	push	{r7}
 80187c4:	b083      	sub	sp, #12
 80187c6:	af00      	add	r7, sp, #0
 80187c8:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2201      	movs	r2, #1
 80187ce:	731a      	strb	r2, [r3, #12]
    return *this;
 80187d0:	687b      	ldr	r3, [r7, #4]
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	370c      	adds	r7, #12
 80187d6:	46bd      	mov	sp, r7
 80187d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187dc:	4770      	bx	lr

080187de <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 80187de:	b480      	push	{r7}
 80187e0:	b083      	sub	sp, #12
 80187e2:	af00      	add	r7, sp, #0
 80187e4:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187ee:	429a      	cmp	r2, r3
 80187f0:	bf0c      	ite	eq
 80187f2:	2301      	moveq	r3, #1
 80187f4:	2300      	movne	r3, #0
 80187f6:	b2db      	uxtb	r3, r3
}
 80187f8:	4618      	mov	r0, r3
 80187fa:	370c      	adds	r7, #12
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr

08018804 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8018804:	b480      	push	{r7}
 8018806:	b083      	sub	sp, #12
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018814:	429a      	cmp	r2, r3
 8018816:	bf34      	ite	cc
 8018818:	2301      	movcc	r3, #1
 801881a:	2300      	movcs	r3, #0
 801881c:	b2db      	uxtb	r3, r3
}
 801881e:	4618      	mov	r0, r3
 8018820:	370c      	adds	r7, #12
 8018822:	46bd      	mov	sp, r7
 8018824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018828:	4770      	bx	lr

0801882a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801882a:	b580      	push	{r7, lr}
 801882c:	b082      	sub	sp, #8
 801882e:	af00      	add	r7, sp, #0
 8018830:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	33cc      	adds	r3, #204	; 0xcc
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	4798      	blx	r3
 801883e:	4603      	mov	r3, r0
 8018840:	2b00      	cmp	r3, #0
 8018842:	d00c      	beq.n	801885e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	7b1b      	ldrb	r3, [r3, #12]
 8018848:	f083 0301 	eor.w	r3, r3, #1
 801884c:	b2db      	uxtb	r3, r3
 801884e:	2b00      	cmp	r3, #0
 8018850:	d103      	bne.n	801885a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	7b5b      	ldrb	r3, [r3, #13]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d001      	beq.n	801885e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801885a:	2301      	movs	r3, #1
 801885c:	e000      	b.n	8018860 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801885e:	2300      	movs	r3, #0
}
 8018860:	4618      	mov	r0, r3
 8018862:	3708      	adds	r7, #8
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}

08018868 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b082      	sub	sp, #8
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	33d0      	adds	r3, #208	; 0xd0
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	4798      	blx	r3
 801887c:	4603      	mov	r3, r0
 801887e:	2b00      	cmp	r3, #0
 8018880:	d006      	beq.n	8018890 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8018888:	2b00      	cmp	r3, #0
 801888a:	d001      	beq.n	8018890 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801888c:	2301      	movs	r3, #1
 801888e:	e000      	b.n	8018892 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8018890:	2300      	movs	r3, #0
}
 8018892:	4618      	mov	r0, r3
 8018894:	3708      	adds	r7, #8
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801889a:	b580      	push	{r7, lr}
 801889c:	b082      	sub	sp, #8
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80188a8:	1c5a      	adds	r2, r3, #1
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	691b      	ldr	r3, [r3, #16]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d00c      	beq.n	80188d0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 80188ba:	683a      	ldr	r2, [r7, #0]
 80188bc:	429a      	cmp	r2, r3
 80188be:	d304      	bcc.n	80188ca <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	695b      	ldr	r3, [r3, #20]
 80188c4:	683a      	ldr	r2, [r7, #0]
 80188c6:	429a      	cmp	r2, r3
 80188c8:	d902      	bls.n	80188d0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	2201      	movs	r2, #1
 80188ce:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	33ec      	adds	r3, #236	; 0xec
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	6878      	ldr	r0, [r7, #4]
 80188da:	4798      	blx	r3
}
 80188dc:	bf00      	nop
 80188de:	3708      	adds	r7, #8
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}

080188e4 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 80188e4:	b480      	push	{r7}
 80188e6:	b083      	sub	sp, #12
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2201      	movs	r2, #1
 80188f0:	735a      	strb	r2, [r3, #13]
}
 80188f2:	bf00      	nop
 80188f4:	370c      	adds	r7, #12
 80188f6:	46bd      	mov	sp, r7
 80188f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fc:	4770      	bx	lr

080188fe <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 80188fe:	b480      	push	{r7}
 8018900:	b083      	sub	sp, #12
 8018902:	af00      	add	r7, sp, #0
 8018904:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	2201      	movs	r2, #1
 801890a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801890e:	bf00      	nop
 8018910:	370c      	adds	r7, #12
 8018912:	46bd      	mov	sp, r7
 8018914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018918:	4770      	bx	lr

0801891a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801891a:	b580      	push	{r7, lr}
 801891c:	b084      	sub	sp, #16
 801891e:	af00      	add	r7, sp, #0
 8018920:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018928:	f083 0301 	eor.w	r3, r3, #1
 801892c:	b2da      	uxtb	r2, r3
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	2200      	movs	r2, #0
 8018938:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	69db      	ldr	r3, [r3, #28]
 801893e:	4618      	mov	r0, r3
 8018940:	f004 fb01 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018944:	60f8      	str	r0, [r7, #12]
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d00d      	beq.n	8018968 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801894c:	68f9      	ldr	r1, [r7, #12]
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f000 fbf0 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018954:	4603      	mov	r3, r0
 8018956:	2100      	movs	r1, #0
 8018958:	4618      	mov	r0, r3
 801895a:	f000 fc11 	bl	8019180 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801895e:	68f8      	ldr	r0, [r7, #12]
 8018960:	f004 f9fa 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018964:	60f8      	str	r0, [r7, #12]
 8018966:	e7ee      	b.n	8018946 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6a1b      	ldr	r3, [r3, #32]
 801896c:	4618      	mov	r0, r3
 801896e:	f004 faea 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018972:	60f8      	str	r0, [r7, #12]
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d00d      	beq.n	8018996 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801897a:	68f9      	ldr	r1, [r7, #12]
 801897c:	6878      	ldr	r0, [r7, #4]
 801897e:	f000 fbd9 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018982:	4603      	mov	r3, r0
 8018984:	2100      	movs	r1, #0
 8018986:	4618      	mov	r0, r3
 8018988:	f000 fbfa 	bl	8019180 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801898c:	68f8      	ldr	r0, [r7, #12]
 801898e:	f004 f9e3 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018992:	60f8      	str	r0, [r7, #12]
 8018994:	e7ee      	b.n	8018974 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8018996:	bf00      	nop
 8018998:	3710      	adds	r7, #16
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}

0801899e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801899e:	b590      	push	{r4, r7, lr}
 80189a0:	b087      	sub	sp, #28
 80189a2:	af00      	add	r7, sp, #0
 80189a4:	6078      	str	r0, [r7, #4]
 80189a6:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	69db      	ldr	r3, [r3, #28]
 80189ac:	4618      	mov	r0, r3
 80189ae:	f004 faca 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 80189b2:	6178      	str	r0, [r7, #20]
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d022      	beq.n	8018a00 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 80189ba:	f107 030c 	add.w	r3, r7, #12
 80189be:	6979      	ldr	r1, [r7, #20]
 80189c0:	4618      	mov	r0, r3
 80189c2:	f004 fa04 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 80189c6:	f107 030c 	add.w	r3, r7, #12
 80189ca:	6839      	ldr	r1, [r7, #0]
 80189cc:	4618      	mov	r0, r3
 80189ce:	f7f2 f9b0 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80189d2:	4603      	mov	r3, r0
 80189d4:	461c      	mov	r4, r3
 80189d6:	f107 030c 	add.w	r3, r7, #12
 80189da:	4618      	mov	r0, r3
 80189dc:	f7f2 f99d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80189e0:	2c00      	cmp	r4, #0
 80189e2:	d008      	beq.n	80189f6 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80189e4:	6979      	ldr	r1, [r7, #20]
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f000 fba4 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80189ec:	4603      	mov	r3, r0
 80189ee:	2101      	movs	r1, #1
 80189f0:	4618      	mov	r0, r3
 80189f2:	f000 fbc5 	bl	8019180 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 80189f6:	6978      	ldr	r0, [r7, #20]
 80189f8:	f004 f9ae 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 80189fc:	6178      	str	r0, [r7, #20]
 80189fe:	e7d9      	b.n	80189b4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8018a00:	bf00      	nop
 8018a02:	371c      	adds	r7, #28
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd90      	pop	{r4, r7, pc}

08018a08 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8018a08:	b590      	push	{r4, r7, lr}
 8018a0a:	b087      	sub	sp, #28
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	6078      	str	r0, [r7, #4]
 8018a10:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	6a1b      	ldr	r3, [r3, #32]
 8018a16:	4618      	mov	r0, r3
 8018a18:	f004 fa95 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018a1c:	6178      	str	r0, [r7, #20]
 8018a1e:	697b      	ldr	r3, [r7, #20]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d022      	beq.n	8018a6a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8018a24:	f107 030c 	add.w	r3, r7, #12
 8018a28:	6979      	ldr	r1, [r7, #20]
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f004 f9cf 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 8018a30:	f107 030c 	add.w	r3, r7, #12
 8018a34:	6839      	ldr	r1, [r7, #0]
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7f2 f97b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	461c      	mov	r4, r3
 8018a40:	f107 030c 	add.w	r3, r7, #12
 8018a44:	4618      	mov	r0, r3
 8018a46:	f7f2 f968 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018a4a:	2c00      	cmp	r4, #0
 8018a4c:	d008      	beq.n	8018a60 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8018a4e:	6979      	ldr	r1, [r7, #20]
 8018a50:	6878      	ldr	r0, [r7, #4]
 8018a52:	f000 fb6f 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018a56:	4603      	mov	r3, r0
 8018a58:	2101      	movs	r1, #1
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f000 fb90 	bl	8019180 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018a60:	6978      	ldr	r0, [r7, #20]
 8018a62:	f004 f979 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018a66:	6178      	str	r0, [r7, #20]
 8018a68:	e7d9      	b.n	8018a1e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8018a6a:	bf00      	nop
 8018a6c:	371c      	adds	r7, #28
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd90      	pop	{r4, r7, pc}
	...

08018a74 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8018a74:	b580      	push	{r7, lr}
 8018a76:	b086      	sub	sp, #24
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	60f8      	str	r0, [r7, #12]
 8018a7c:	60b9      	str	r1, [r7, #8]
 8018a7e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	69db      	ldr	r3, [r3, #28]
 8018a84:	6879      	ldr	r1, [r7, #4]
 8018a86:	4618      	mov	r0, r3
 8018a88:	f004 fa2e 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018a8c:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d005      	beq.n	8018aa0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	6979      	ldr	r1, [r7, #20]
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7ff fa0b 	bl	8017eb4 <_Z10StringFromRK14MockNamedValue>
 8018a9e:	e003      	b.n	8018aa8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8018aa0:	4903      	ldr	r1, [pc, #12]	; (8018ab0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8018aa2:	68f8      	ldr	r0, [r7, #12]
 8018aa4:	f7f1 fd81 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
}
 8018aa8:	68f8      	ldr	r0, [r7, #12]
 8018aaa:	3718      	adds	r7, #24
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	080233d4 	.word	0x080233d4

08018ab4 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8018ab4:	b590      	push	{r4, r7, lr}
 8018ab6:	b087      	sub	sp, #28
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
 8018abc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	69dc      	ldr	r4, [r3, #28]
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	335c      	adds	r3, #92	; 0x5c
 8018ac8:	681b      	ldr	r3, [r3, #0]
 8018aca:	f107 020c 	add.w	r2, r7, #12
 8018ace:	6839      	ldr	r1, [r7, #0]
 8018ad0:	4610      	mov	r0, r2
 8018ad2:	4798      	blx	r3
 8018ad4:	f107 030c 	add.w	r3, r7, #12
 8018ad8:	4619      	mov	r1, r3
 8018ada:	4620      	mov	r0, r4
 8018adc:	f004 fa04 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018ae0:	6178      	str	r0, [r7, #20]
 8018ae2:	f107 030c 	add.w	r3, r7, #12
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7f2 f917 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d00d      	beq.n	8018b0e <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	3350      	adds	r3, #80	; 0x50
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	6839      	ldr	r1, [r7, #0]
 8018afc:	6978      	ldr	r0, [r7, #20]
 8018afe:	4798      	blx	r3
 8018b00:	4603      	mov	r3, r0
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	bf14      	ite	ne
 8018b06:	2301      	movne	r3, #1
 8018b08:	2300      	moveq	r3, #0
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	e006      	b.n	8018b1c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	7b1b      	ldrb	r3, [r3, #12]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	bf14      	ite	ne
 8018b16:	2301      	movne	r3, #1
 8018b18:	2300      	moveq	r3, #0
 8018b1a:	b2db      	uxtb	r3, r3
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	371c      	adds	r7, #28
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd90      	pop	{r4, r7, pc}

08018b24 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8018b24:	b590      	push	{r4, r7, lr}
 8018b26:	b087      	sub	sp, #28
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
 8018b2c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6a1c      	ldr	r4, [r3, #32]
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	335c      	adds	r3, #92	; 0x5c
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	f107 020c 	add.w	r2, r7, #12
 8018b3e:	6839      	ldr	r1, [r7, #0]
 8018b40:	4610      	mov	r0, r2
 8018b42:	4798      	blx	r3
 8018b44:	f107 030c 	add.w	r3, r7, #12
 8018b48:	4619      	mov	r1, r3
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	f004 f9cc 	bl	801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018b50:	6178      	str	r0, [r7, #20]
 8018b52:	f107 030c 	add.w	r3, r7, #12
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7f2 f8df 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d00d      	beq.n	8018b7e <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	3354      	adds	r3, #84	; 0x54
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	6839      	ldr	r1, [r7, #0]
 8018b6c:	6978      	ldr	r0, [r7, #20]
 8018b6e:	4798      	blx	r3
 8018b70:	4603      	mov	r3, r0
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	bf14      	ite	ne
 8018b76:	2301      	movne	r3, #1
 8018b78:	2300      	moveq	r3, #0
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	e006      	b.n	8018b8c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	7b1b      	ldrb	r3, [r3, #12]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	bf14      	ite	ne
 8018b86:	2301      	movne	r3, #1
 8018b88:	2300      	moveq	r3, #0
 8018b8a:	b2db      	uxtb	r3, r3
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	371c      	adds	r7, #28
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd90      	pop	{r4, r7, pc}

08018b94 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8018b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b96:	b0a1      	sub	sp, #132	; 0x84
 8018b98:	af02      	add	r7, sp, #8
 8018b9a:	6078      	str	r0, [r7, #4]
 8018b9c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8018b9e:	49bc      	ldr	r1, [pc, #752]	; (8018e90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	f7f1 fd02 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8018ba6:	683b      	ldr	r3, [r7, #0]
 8018ba8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d012      	beq.n	8018bd6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8018bb4:	f107 030c 	add.w	r3, r7, #12
 8018bb8:	49b6      	ldr	r1, [pc, #728]	; (8018e94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f7f2 fdb4 	bl	800b728 <_Z16StringFromFormatPKcz>
 8018bc0:	f107 030c 	add.w	r3, r7, #12
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7f1 fd5b 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 8018bcc:	f107 030c 	add.w	r3, r7, #12
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	f7f2 f8a2 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    str += getName();
 8018bd6:	f107 0314 	add.w	r3, r7, #20
 8018bda:	6839      	ldr	r1, [r7, #0]
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7ff f989 	bl	8017ef4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8018be2:	f107 0314 	add.w	r3, r7, #20
 8018be6:	4619      	mov	r1, r3
 8018be8:	6878      	ldr	r0, [r7, #4]
 8018bea:	f7f2 f913 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018bee:	f107 0314 	add.w	r3, r7, #20
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7f2 f891 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8018bf8:	49a7      	ldr	r1, [pc, #668]	; (8018e98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 8018bfa:	6878      	ldr	r0, [r7, #4]
 8018bfc:	f7f2 f91c 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	691b      	ldr	r3, [r3, #16]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d02d      	beq.n	8018c64 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 8018c08:	683b      	ldr	r3, [r7, #0]
 8018c0a:	691a      	ldr	r2, [r3, #16]
 8018c0c:	683b      	ldr	r3, [r7, #0]
 8018c0e:	695b      	ldr	r3, [r3, #20]
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d113      	bne.n	8018c3c <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8018c14:	683b      	ldr	r3, [r7, #0]
 8018c16:	691a      	ldr	r2, [r3, #16]
 8018c18:	f107 031c 	add.w	r3, r7, #28
 8018c1c:	499f      	ldr	r1, [pc, #636]	; (8018e9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f7f2 fd82 	bl	800b728 <_Z16StringFromFormatPKcz>
 8018c24:	f107 031c 	add.w	r3, r7, #28
 8018c28:	4619      	mov	r1, r3
 8018c2a:	6878      	ldr	r0, [r7, #4]
 8018c2c:	f7f2 f8f2 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018c30:	f107 031c 	add.w	r3, r7, #28
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7f2 f870 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018c3a:	e013      	b.n	8018c64 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	691a      	ldr	r2, [r3, #16]
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	695b      	ldr	r3, [r3, #20]
 8018c44:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018c48:	4995      	ldr	r1, [pc, #596]	; (8018ea0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 8018c4a:	f7f2 fd6d 	bl	800b728 <_Z16StringFromFormatPKcz>
 8018c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018c52:	4619      	mov	r1, r3
 8018c54:	6878      	ldr	r0, [r7, #4]
 8018c56:	f7f2 f8dd 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018c5e:	4618      	mov	r0, r3
 8018c60:	f7f2 f85b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	69db      	ldr	r3, [r3, #28]
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f004 f96c 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d109      	bne.n	8018c88 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	6a1b      	ldr	r3, [r3, #32]
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f004 f964 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d101      	bne.n	8018c88 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018c84:	2301      	movs	r3, #1
 8018c86:	e000      	b.n	8018c8a <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8018c88:	2300      	movs	r3, #0
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d00b      	beq.n	8018ca6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 8018c8e:	683b      	ldr	r3, [r7, #0]
 8018c90:	7b1b      	ldrb	r3, [r3, #12]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d001      	beq.n	8018c9a <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 8018c96:	4b83      	ldr	r3, [pc, #524]	; (8018ea4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 8018c98:	e000      	b.n	8018c9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 8018c9a:	4b83      	ldr	r3, [pc, #524]	; (8018ea8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 8018c9c:	4619      	mov	r1, r3
 8018c9e:	6878      	ldr	r0, [r7, #4]
 8018ca0:	f7f2 f8ca 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
 8018ca4:	e0e3      	b.n	8018e6e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8018ca6:	683b      	ldr	r3, [r7, #0]
 8018ca8:	69db      	ldr	r3, [r3, #28]
 8018caa:	4618      	mov	r0, r3
 8018cac:	f004 f94b 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018cb0:	6778      	str	r0, [r7, #116]	; 0x74
 8018cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d069      	beq.n	8018d8c <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8018cb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018cbc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f004 f898 	bl	801cdf4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8018cc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f7f1 fff9 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018cce:	4605      	mov	r5, r0
 8018cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018cd4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f004 f879 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 8018cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7f1 ffed 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018ce6:	4606      	mov	r6, r0
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	33a4      	adds	r3, #164	; 0xa4
 8018cee:	681c      	ldr	r4, [r3, #0]
 8018cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018cf4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f004 f869 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 8018cfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018d00:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018d04:	6839      	ldr	r1, [r7, #0]
 8018d06:	4618      	mov	r0, r3
 8018d08:	47a0      	blx	r4
 8018d0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f7f1 ffd6 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018d14:	4603      	mov	r3, r0
 8018d16:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018d1a:	9300      	str	r3, [sp, #0]
 8018d1c:	4633      	mov	r3, r6
 8018d1e:	462a      	mov	r2, r5
 8018d20:	4962      	ldr	r1, [pc, #392]	; (8018eac <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8018d22:	f7f2 fd01 	bl	800b728 <_Z16StringFromFormatPKcz>
 8018d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018d2a:	4619      	mov	r1, r3
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f7f2 f871 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018d36:	4618      	mov	r0, r3
 8018d38:	f7f1 ffef 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018d3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7f1 ffea 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018d46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7f1 ffe5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018d50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7f1 ffe0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018d5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f7f1 ffdb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018d64:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018d66:	f003 fff7 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	bf14      	ite	ne
 8018d70:	2301      	movne	r3, #1
 8018d72:	2300      	moveq	r3, #0
 8018d74:	b2db      	uxtb	r3, r3
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d003      	beq.n	8018d82 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 8018d7a:	494d      	ldr	r1, [pc, #308]	; (8018eb0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f7f2 f85b 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8018d82:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018d84:	f003 ffe8 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018d88:	6778      	str	r0, [r7, #116]	; 0x74
 8018d8a:	e792      	b.n	8018cb2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	69db      	ldr	r3, [r3, #28]
 8018d90:	4618      	mov	r0, r3
 8018d92:	f004 f8d8 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d009      	beq.n	8018db0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8018d9c:	683b      	ldr	r3, [r7, #0]
 8018d9e:	6a1b      	ldr	r3, [r3, #32]
 8018da0:	4618      	mov	r0, r3
 8018da2:	f004 f8d0 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018da6:	4603      	mov	r3, r0
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d001      	beq.n	8018db0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8018dac:	2301      	movs	r3, #1
 8018dae:	e000      	b.n	8018db2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8018db0:	2300      	movs	r3, #0
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d003      	beq.n	8018dbe <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 8018db6:	493e      	ldr	r1, [pc, #248]	; (8018eb0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	f7f2 f83d 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	6a1b      	ldr	r3, [r3, #32]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f004 f8bf 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018dc8:	6778      	str	r0, [r7, #116]	; 0x74
 8018dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d046      	beq.n	8018e5e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8018dd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018dd4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f004 f80c 	bl	801cdf4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8018ddc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7f1 ff6d 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018de6:	4604      	mov	r4, r0
 8018de8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018dec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018dee:	4618      	mov	r0, r3
 8018df0:	f003 ffed 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 8018df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018df8:	4618      	mov	r0, r3
 8018dfa:	f7f1 ff61 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8018e04:	4622      	mov	r2, r4
 8018e06:	492b      	ldr	r1, [pc, #172]	; (8018eb4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8018e08:	f7f2 fc8e 	bl	800b728 <_Z16StringFromFormatPKcz>
 8018e0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018e10:	4619      	mov	r1, r3
 8018e12:	6878      	ldr	r0, [r7, #4]
 8018e14:	f7f1 fffe 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f7f1 ff7c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018e22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7f1 ff77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018e30:	4618      	mov	r0, r3
 8018e32:	f7f1 ff72 	bl	800ad1a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018e36:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018e38:	f003 ff8e 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	bf14      	ite	ne
 8018e42:	2301      	movne	r3, #1
 8018e44:	2300      	moveq	r3, #0
 8018e46:	b2db      	uxtb	r3, r3
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d003      	beq.n	8018e54 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8018e4c:	4918      	ldr	r1, [pc, #96]	; (8018eb0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8018e4e:	6878      	ldr	r0, [r7, #4]
 8018e50:	f7f1 fff2 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8018e54:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018e56:	f003 ff7f 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018e5a:	6778      	str	r0, [r7, #116]	; 0x74
 8018e5c:	e7b5      	b.n	8018dca <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	7b1b      	ldrb	r3, [r3, #12]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d003      	beq.n	8018e6e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8018e66:	4914      	ldr	r1, [pc, #80]	; (8018eb8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8018e68:	6878      	ldr	r0, [r7, #4]
 8018e6a:	f7f1 ffe5 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018e76:	2b01      	cmp	r3, #1
 8018e78:	d101      	bne.n	8018e7e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 8018e7a:	4c05      	ldr	r4, [pc, #20]	; (8018e90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018e7c:	e000      	b.n	8018e80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 8018e7e:	4c0f      	ldr	r4, [pc, #60]	; (8018ebc <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018e84:	683a      	ldr	r2, [r7, #0]
 8018e86:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018e88:	2a01      	cmp	r2, #1
 8018e8a:	d119      	bne.n	8018ec0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 8018e8c:	4a00      	ldr	r2, [pc, #0]	; (8018e90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018e8e:	e018      	b.n	8018ec2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 8018e90:	08023368 	.word	0x08023368
 8018e94:	080233dc 	.word	0x080233dc
 8018e98:	080233f4 	.word	0x080233f4
 8018e9c:	080233fc 	.word	0x080233fc
 8018ea0:	0802341c 	.word	0x0802341c
 8018ea4:	08023440 	.word	0x08023440
 8018ea8:	08023458 	.word	0x08023458
 8018eac:	08023468 	.word	0x08023468
 8018eb0:	08023474 	.word	0x08023474
 8018eb4:	08023478 	.word	0x08023478
 8018eb8:	08023488 	.word	0x08023488
 8018ebc:	080234a8 	.word	0x080234a8
 8018ec0:	4a0c      	ldr	r2, [pc, #48]	; (8018ef4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8018ec2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8018ec6:	9201      	str	r2, [sp, #4]
 8018ec8:	9300      	str	r3, [sp, #0]
 8018eca:	4623      	mov	r3, r4
 8018ecc:	460a      	mov	r2, r1
 8018ece:	490a      	ldr	r1, [pc, #40]	; (8018ef8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8018ed0:	f7f2 fc2a 	bl	800b728 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018ed4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018ed8:	4619      	mov	r1, r3
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f7f1 ff9a 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018ee0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7f1 ff18 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    return str;
 8018eea:	bf00      	nop
}
 8018eec:	6878      	ldr	r0, [r7, #4]
 8018eee:	377c      	adds	r7, #124	; 0x7c
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ef4:	080234a8 	.word	0x080234a8
 8018ef8:	080234ac 	.word	0x080234ac

08018efc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 8018efc:	b590      	push	{r4, r7, lr}
 8018efe:	b095      	sub	sp, #84	; 0x54
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
 8018f04:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8018f06:	496c      	ldr	r1, [pc, #432]	; (80190b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f7f1 fb4e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 8018f0e:	683b      	ldr	r3, [r7, #0]
 8018f10:	69db      	ldr	r3, [r3, #28]
 8018f12:	4618      	mov	r0, r3
 8018f14:	f004 f817 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018f18:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d05e      	beq.n	8018fde <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8018f20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018f22:	6838      	ldr	r0, [r7, #0]
 8018f24:	f000 f906 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f000 f938 	bl	80191a0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018f30:	4603      	mov	r3, r0
 8018f32:	f083 0301 	eor.w	r3, r3, #1
 8018f36:	b2db      	uxtb	r3, r3
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d04b      	beq.n	8018fd4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8018f3c:	f107 030c 	add.w	r3, r7, #12
 8018f40:	495d      	ldr	r1, [pc, #372]	; (80190b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7f1 fb31 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8018f48:	f107 030c 	add.w	r3, r7, #12
 8018f4c:	4619      	mov	r1, r3
 8018f4e:	6878      	ldr	r0, [r7, #4]
 8018f50:	f7f1 ff34 	bl	800adbc <_ZneRK12SimpleStringS1_>
 8018f54:	4603      	mov	r3, r0
 8018f56:	461c      	mov	r4, r3
 8018f58:	f107 030c 	add.w	r3, r7, #12
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7f1 fedc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018f62:	2c00      	cmp	r4, #0
 8018f64:	d003      	beq.n	8018f6e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8018f66:	4955      	ldr	r1, [pc, #340]	; (80190bc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f7f1 ff65 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8018f6e:	f107 031c 	add.w	r3, r7, #28
 8018f72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018f74:	4618      	mov	r0, r3
 8018f76:	f003 ff3d 	bl	801cdf4 <_ZNK22MockNamedValueListNode7getTypeEv>
 8018f7a:	f107 031c 	add.w	r3, r7, #28
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7f1 fe9e 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018f84:	4604      	mov	r4, r0
 8018f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018f8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	f003 ff1e 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 8018f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7f1 fe92 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	f107 0014 	add.w	r0, r7, #20
 8018fa2:	4622      	mov	r2, r4
 8018fa4:	4946      	ldr	r1, [pc, #280]	; (80190c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018fa6:	f7f2 fbbf 	bl	800b728 <_Z16StringFromFormatPKcz>
 8018faa:	f107 0314 	add.w	r3, r7, #20
 8018fae:	4619      	mov	r1, r3
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	f7f1 ff2f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8018fb6:	f107 0314 	add.w	r3, r7, #20
 8018fba:	4618      	mov	r0, r3
 8018fbc:	f7f1 fead 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7f1 fea8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8018fca:	f107 031c 	add.w	r3, r7, #28
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7f1 fea3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8018fd4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018fd6:	f003 febf 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 8018fda:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018fdc:	e79d      	b.n	8018f1a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	6a1b      	ldr	r3, [r3, #32]
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f003 ffaf 	bl	801cf46 <_ZN18MockNamedValueList5beginEv>
 8018fe8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d05e      	beq.n	80190ae <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8018ff0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018ff2:	6838      	ldr	r0, [r7, #0]
 8018ff4:	f000 f89e 	bl	8019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f000 f8d0 	bl	80191a0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019000:	4603      	mov	r3, r0
 8019002:	f083 0301 	eor.w	r3, r3, #1
 8019006:	b2db      	uxtb	r3, r3
 8019008:	2b00      	cmp	r3, #0
 801900a:	d04b      	beq.n	80190a4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801900c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019010:	4929      	ldr	r1, [pc, #164]	; (80190b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019012:	4618      	mov	r0, r3
 8019014:	f7f1 fac9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8019018:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801901c:	4619      	mov	r1, r3
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f7f1 fecc 	bl	800adbc <_ZneRK12SimpleStringS1_>
 8019024:	4603      	mov	r3, r0
 8019026:	461c      	mov	r4, r3
 8019028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801902c:	4618      	mov	r0, r3
 801902e:	f7f1 fe74 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8019032:	2c00      	cmp	r4, #0
 8019034:	d003      	beq.n	801903e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8019036:	4921      	ldr	r1, [pc, #132]	; (80190bc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7f1 fefd 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801903e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019042:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019044:	4618      	mov	r0, r3
 8019046:	f003 fed5 	bl	801cdf4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801904a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801904e:	4618      	mov	r0, r3
 8019050:	f7f1 fe36 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 8019054:	4604      	mov	r4, r0
 8019056:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801905a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801905c:	4618      	mov	r0, r3
 801905e:	f003 feb6 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 8019062:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019066:	4618      	mov	r0, r3
 8019068:	f7f1 fe2a 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801906c:	4603      	mov	r3, r0
 801906e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8019072:	4622      	mov	r2, r4
 8019074:	4912      	ldr	r1, [pc, #72]	; (80190c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8019076:	f7f2 fb57 	bl	800b728 <_Z16StringFromFormatPKcz>
 801907a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801907e:	4619      	mov	r1, r3
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f7f1 fec7 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 8019086:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801908a:	4618      	mov	r0, r3
 801908c:	f7f1 fe45 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8019090:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019094:	4618      	mov	r0, r3
 8019096:	f7f1 fe40 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801909a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801909e:	4618      	mov	r0, r3
 80190a0:	f7f1 fe3b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 80190a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80190a6:	f003 fe57 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 80190aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80190ac:	e79d      	b.n	8018fea <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 80190ae:	bf00      	nop
}
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	3754      	adds	r7, #84	; 0x54
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd90      	pop	{r4, r7, pc}
 80190b8:	08023368 	.word	0x08023368
 80190bc:	08023474 	.word	0x08023474
 80190c0:	080234d4 	.word	0x080234d4

080190c4 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 80190c4:	b590      	push	{r4, r7, lr}
 80190c6:	b085      	sub	sp, #20
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
 80190cc:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 80190ce:	f107 0308 	add.w	r3, r7, #8
 80190d2:	6879      	ldr	r1, [r7, #4]
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7fe ff0d 	bl	8017ef4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 80190da:	f107 0308 	add.w	r3, r7, #8
 80190de:	4619      	mov	r1, r3
 80190e0:	6838      	ldr	r0, [r7, #0]
 80190e2:	f7f1 fe26 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 80190e6:	4603      	mov	r3, r0
 80190e8:	461c      	mov	r4, r3
 80190ea:	f107 0308 	add.w	r3, r7, #8
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7f1 fe13 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 80190f4:	4623      	mov	r3, r4
}
 80190f6:	4618      	mov	r0, r3
 80190f8:	3714      	adds	r7, #20
 80190fa:	46bd      	mov	sp, r7
 80190fc:	bd90      	pop	{r4, r7, pc}

080190fe <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 80190fe:	b480      	push	{r7}
 8019100:	b083      	sub	sp, #12
 8019102:	af00      	add	r7, sp, #0
 8019104:	6078      	str	r0, [r7, #4]
 8019106:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801910e:	f083 0301 	eor.w	r3, r3, #1
 8019112:	b2db      	uxtb	r3, r3
 8019114:	2b00      	cmp	r3, #0
 8019116:	d104      	bne.n	8019122 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801911c:	683a      	ldr	r2, [r7, #0]
 801911e:	429a      	cmp	r2, r3
 8019120:	d101      	bne.n	8019126 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 8019122:	2301      	movs	r3, #1
 8019124:	e000      	b.n	8019128 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 8019126:	2300      	movs	r3, #0
}
 8019128:	4618      	mov	r0, r3
 801912a:	370c      	adds	r7, #12
 801912c:	46bd      	mov	sp, r7
 801912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019132:	4770      	bx	lr

08019134 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
 801913c:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801913e:	6838      	ldr	r0, [r7, #0]
 8019140:	f003 fe16 	bl	801cd70 <_ZN22MockNamedValueListNode4itemEv>
 8019144:	4603      	mov	r3, r0
}
 8019146:	4618      	mov	r0, r3
 8019148:	3708      	adds	r7, #8
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}
	...

08019150 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 8019150:	b580      	push	{r7, lr}
 8019152:	b082      	sub	sp, #8
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	6839      	ldr	r1, [r7, #0]
 801915e:	4618      	mov	r0, r3
 8019160:	f001 ff48 	bl	801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019164:	4a05      	ldr	r2, [pc, #20]	; (801917c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	601a      	str	r2, [r3, #0]
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	2200      	movs	r2, #0
 801916e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	4618      	mov	r0, r3
 8019176:	3708      	adds	r7, #8
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}
 801917c:	08025a38 	.word	0x08025a38

08019180 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8019180:	b480      	push	{r7}
 8019182:	b083      	sub	sp, #12
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
 8019188:	460b      	mov	r3, r1
 801918a:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	78fa      	ldrb	r2, [r7, #3]
 8019190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8019194:	bf00      	nop
 8019196:	370c      	adds	r7, #12
 8019198:	46bd      	mov	sp, r7
 801919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919e:	4770      	bx	lr

080191a0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 80191a0:	b480      	push	{r7}
 80191a2:	b083      	sub	sp, #12
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 80191ae:	4618      	mov	r0, r3
 80191b0:	370c      	adds	r7, #12
 80191b2:	46bd      	mov	sp, r7
 80191b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b8:	4770      	bx	lr
	...

080191bc <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
 80191c4:	460b      	mov	r3, r1
 80191c6:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	3328      	adds	r3, #40	; 0x28
 80191cc:	4907      	ldr	r1, [pc, #28]	; (80191ec <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 80191ce:	4618      	mov	r0, r3
 80191d0:	f002 f9b2 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	3328      	adds	r3, #40	; 0x28
 80191d8:	78fa      	ldrb	r2, [r7, #3]
 80191da:	4611      	mov	r1, r2
 80191dc:	4618      	mov	r0, r3
 80191de:	f001 ff5b 	bl	801b098 <_ZN14MockNamedValue8setValueEb>
    return *this;
 80191e2:	687b      	ldr	r3, [r7, #4]
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3708      	adds	r7, #8
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	080234dc 	.word	0x080234dc

080191f0 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b082      	sub	sp, #8
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
 80191f8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	3328      	adds	r3, #40	; 0x28
 80191fe:	4907      	ldr	r1, [pc, #28]	; (801921c <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 8019200:	4618      	mov	r0, r3
 8019202:	f002 f999 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	3328      	adds	r3, #40	; 0x28
 801920a:	6839      	ldr	r1, [r7, #0]
 801920c:	4618      	mov	r0, r3
 801920e:	f001 ff67 	bl	801b0e0 <_ZN14MockNamedValue8setValueEj>
    return *this;
 8019212:	687b      	ldr	r3, [r7, #4]
}
 8019214:	4618      	mov	r0, r3
 8019216:	3708      	adds	r7, #8
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	080234dc 	.word	0x080234dc

08019220 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b082      	sub	sp, #8
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	3328      	adds	r3, #40	; 0x28
 801922e:	4907      	ldr	r1, [pc, #28]	; (801924c <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 8019230:	4618      	mov	r0, r3
 8019232:	f002 f981 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	3328      	adds	r3, #40	; 0x28
 801923a:	6839      	ldr	r1, [r7, #0]
 801923c:	4618      	mov	r0, r3
 801923e:	f001 ff71 	bl	801b124 <_ZN14MockNamedValue8setValueEi>
    return *this;
 8019242:	687b      	ldr	r3, [r7, #4]
}
 8019244:	4618      	mov	r0, r3
 8019246:	3708      	adds	r7, #8
 8019248:	46bd      	mov	sp, r7
 801924a:	bd80      	pop	{r7, pc}
 801924c:	080234dc 	.word	0x080234dc

08019250 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	3328      	adds	r3, #40	; 0x28
 801925e:	4907      	ldr	r1, [pc, #28]	; (801927c <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8019260:	4618      	mov	r0, r3
 8019262:	f002 f969 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	3328      	adds	r3, #40	; 0x28
 801926a:	6839      	ldr	r1, [r7, #0]
 801926c:	4618      	mov	r0, r3
 801926e:	f001 ff7b 	bl	801b168 <_ZN14MockNamedValue8setValueEl>
    return *this;
 8019272:	687b      	ldr	r3, [r7, #4]
}
 8019274:	4618      	mov	r0, r3
 8019276:	3708      	adds	r7, #8
 8019278:	46bd      	mov	sp, r7
 801927a:	bd80      	pop	{r7, pc}
 801927c:	080234dc 	.word	0x080234dc

08019280 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b082      	sub	sp, #8
 8019284:	af00      	add	r7, sp, #0
 8019286:	6078      	str	r0, [r7, #4]
 8019288:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	3328      	adds	r3, #40	; 0x28
 801928e:	4907      	ldr	r1, [pc, #28]	; (80192ac <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 8019290:	4618      	mov	r0, r3
 8019292:	f002 f951 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	3328      	adds	r3, #40	; 0x28
 801929a:	6839      	ldr	r1, [r7, #0]
 801929c:	4618      	mov	r0, r3
 801929e:	f001 ff85 	bl	801b1ac <_ZN14MockNamedValue8setValueEm>
    return *this;
 80192a2:	687b      	ldr	r3, [r7, #4]
}
 80192a4:	4618      	mov	r0, r3
 80192a6:	3708      	adds	r7, #8
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	080234dc 	.word	0x080234dc

080192b0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 80192b0:	b5b0      	push	{r4, r5, r7, lr}
 80192b2:	b086      	sub	sp, #24
 80192b4:	af02      	add	r7, sp, #8
 80192b6:	60f8      	str	r0, [r7, #12]
 80192b8:	1d3b      	adds	r3, r7, #4
 80192ba:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 80192be:	f7f8 fd57 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 80192c2:	4604      	mov	r4, r0
 80192c4:	6823      	ldr	r3, [r4, #0]
 80192c6:	3368      	adds	r3, #104	; 0x68
 80192c8:	681d      	ldr	r5, [r3, #0]
 80192ca:	f7f8 fd61 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80192ce:	4603      	mov	r3, r0
 80192d0:	9300      	str	r3, [sp, #0]
 80192d2:	f240 2319 	movw	r3, #537	; 0x219
 80192d6:	4a04      	ldr	r2, [pc, #16]	; (80192e8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 80192d8:	4904      	ldr	r1, [pc, #16]	; (80192ec <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 80192da:	4620      	mov	r0, r4
 80192dc:	47a8      	blx	r5
    return *this;
 80192de:	68fb      	ldr	r3, [r7, #12]
}
 80192e0:	4618      	mov	r0, r3
 80192e2:	3710      	adds	r7, #16
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bdb0      	pop	{r4, r5, r7, pc}
 80192e8:	0802336c 	.word	0x0802336c
 80192ec:	08023388 	.word	0x08023388

080192f0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 80192f0:	b5b0      	push	{r4, r5, r7, lr}
 80192f2:	b086      	sub	sp, #24
 80192f4:	af02      	add	r7, sp, #8
 80192f6:	60f8      	str	r0, [r7, #12]
 80192f8:	1d3b      	adds	r3, r7, #4
 80192fa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 80192fe:	f7f8 fd37 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 8019302:	4604      	mov	r4, r0
 8019304:	6823      	ldr	r3, [r4, #0]
 8019306:	3368      	adds	r3, #104	; 0x68
 8019308:	681d      	ldr	r5, [r3, #0]
 801930a:	f7f8 fd41 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801930e:	4603      	mov	r3, r0
 8019310:	9300      	str	r3, [sp, #0]
 8019312:	f240 231f 	movw	r3, #543	; 0x21f
 8019316:	4a04      	ldr	r2, [pc, #16]	; (8019328 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 8019318:	4904      	ldr	r1, [pc, #16]	; (801932c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801931a:	4620      	mov	r0, r4
 801931c:	47a8      	blx	r5
    return *this;
 801931e:	68fb      	ldr	r3, [r7, #12]
}
 8019320:	4618      	mov	r0, r3
 8019322:	3710      	adds	r7, #16
 8019324:	46bd      	mov	sp, r7
 8019326:	bdb0      	pop	{r4, r5, r7, pc}
 8019328:	0802336c 	.word	0x0802336c
 801932c:	080233a8 	.word	0x080233a8

08019330 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	6078      	str	r0, [r7, #4]
 8019338:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	3328      	adds	r3, #40	; 0x28
 801933e:	4907      	ldr	r1, [pc, #28]	; (801935c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 8019340:	4618      	mov	r0, r3
 8019342:	f002 f8f9 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	3328      	adds	r3, #40	; 0x28
 801934a:	6839      	ldr	r1, [r7, #0]
 801934c:	4618      	mov	r0, r3
 801934e:	f002 f835 	bl	801b3bc <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 8019352:	687b      	ldr	r3, [r7, #4]
}
 8019354:	4618      	mov	r0, r3
 8019356:	3708      	adds	r7, #8
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}
 801935c:	080234dc 	.word	0x080234dc

08019360 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	60f8      	str	r0, [r7, #12]
 8019368:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	3328      	adds	r3, #40	; 0x28
 8019370:	4907      	ldr	r1, [pc, #28]	; (8019390 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8019372:	4618      	mov	r0, r3
 8019374:	f002 f8e0 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	3328      	adds	r3, #40	; 0x28
 801937c:	ed97 0b00 	vldr	d0, [r7]
 8019380:	4618      	mov	r0, r3
 8019382:	f001 ff71 	bl	801b268 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8019386:	68fb      	ldr	r3, [r7, #12]
}
 8019388:	4618      	mov	r0, r3
 801938a:	3710      	adds	r7, #16
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}
 8019390:	080234dc 	.word	0x080234dc

08019394 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b082      	sub	sp, #8
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	3328      	adds	r3, #40	; 0x28
 80193a2:	4907      	ldr	r1, [pc, #28]	; (80193c0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 80193a4:	4618      	mov	r0, r3
 80193a6:	f002 f8c7 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	3328      	adds	r3, #40	; 0x28
 80193ae:	6839      	ldr	r1, [r7, #0]
 80193b0:	4618      	mov	r0, r3
 80193b2:	f001 ff9d 	bl	801b2f0 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 80193b6:	687b      	ldr	r3, [r7, #4]
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	3708      	adds	r7, #8
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}
 80193c0:	080234dc 	.word	0x080234dc

080193c4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
 80193cc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	3328      	adds	r3, #40	; 0x28
 80193d2:	4907      	ldr	r1, [pc, #28]	; (80193f0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 80193d4:	4618      	mov	r0, r3
 80193d6:	f002 f8af 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	3328      	adds	r3, #40	; 0x28
 80193de:	6839      	ldr	r1, [r7, #0]
 80193e0:	4618      	mov	r0, r3
 80193e2:	f001 ffa7 	bl	801b334 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 80193e6:	687b      	ldr	r3, [r7, #4]
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3708      	adds	r7, #8
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	080234dc 	.word	0x080234dc

080193f4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b082      	sub	sp, #8
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
 80193fc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	3328      	adds	r3, #40	; 0x28
 8019402:	4907      	ldr	r1, [pc, #28]	; (8019420 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8019404:	4618      	mov	r0, r3
 8019406:	f002 f897 	bl	801b538 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	3328      	adds	r3, #40	; 0x28
 801940e:	6839      	ldr	r1, [r7, #0]
 8019410:	4618      	mov	r0, r3
 8019412:	f001 ffb1 	bl	801b378 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 8019416:	687b      	ldr	r3, [r7, #4]
}
 8019418:	4618      	mov	r0, r3
 801941a:	3708      	adds	r7, #8
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}
 8019420:	080234dc 	.word	0x080234dc

08019424 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8019424:	b480      	push	{r7}
 8019426:	b083      	sub	sp, #12
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2201      	movs	r2, #1
 8019432:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	2200      	movs	r2, #0
 801943a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	683a      	ldr	r2, [r7, #0]
 8019442:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8019444:	687b      	ldr	r3, [r7, #4]
}
 8019446:	4618      	mov	r0, r3
 8019448:	370c      	adds	r7, #12
 801944a:	46bd      	mov	sp, r7
 801944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019450:	4770      	bx	lr

08019452 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8019452:	b580      	push	{r7, lr}
 8019454:	b082      	sub	sp, #8
 8019456:	af00      	add	r7, sp, #0
 8019458:	6078      	str	r0, [r7, #4]
 801945a:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	3328      	adds	r3, #40	; 0x28
 8019460:	4619      	mov	r1, r3
 8019462:	6878      	ldr	r0, [r7, #4]
 8019464:	f7ef f946 	bl	80086f4 <_ZN14MockNamedValueC1ERKS_>
}
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}

08019470 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8019470:	b480      	push	{r7}
 8019472:	b085      	sub	sp, #20
 8019474:	af00      	add	r7, sp, #0
 8019476:	60f8      	str	r0, [r7, #12]
 8019478:	60b9      	str	r1, [r7, #8]
 801947a:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	68ba      	ldr	r2, [r7, #8]
 8019480:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	687a      	ldr	r2, [r7, #4]
 8019486:	615a      	str	r2, [r3, #20]
    return *this;
 8019488:	68fb      	ldr	r3, [r7, #12]
}
 801948a:	4618      	mov	r0, r3
 801948c:	3714      	adds	r7, #20
 801948e:	46bd      	mov	sp, r7
 8019490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019494:	4770      	bx	lr

08019496 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 8019496:	b480      	push	{r7}
 8019498:	b083      	sub	sp, #12
 801949a:	af00      	add	r7, sp, #0
 801949c:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	7e1b      	ldrb	r3, [r3, #24]
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	370c      	adds	r7, #12
 80194a6:	46bd      	mov	sp, r7
 80194a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ac:	4770      	bx	lr

080194ae <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 80194ae:	b480      	push	{r7}
 80194b0:	b083      	sub	sp, #12
 80194b2:	af00      	add	r7, sp, #0
 80194b4:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	370c      	adds	r7, #12
 80194be:	46bd      	mov	sp, r7
 80194c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c4:	4770      	bx	lr
	...

080194c8 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b082      	sub	sp, #8
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	4618      	mov	r0, r3
 80194d4:	f7fe fcce 	bl	8017e74 <_ZN16MockExpectedCallC1Ev>
 80194d8:	4a03      	ldr	r2, [pc, #12]	; (80194e8 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	601a      	str	r2, [r3, #0]
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	4618      	mov	r0, r3
 80194e2:	3708      	adds	r7, #8
 80194e4:	46bd      	mov	sp, r7
 80194e6:	bd80      	pop	{r7, pc}
 80194e8:	08025898 	.word	0x08025898

080194ec <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 80194ec:	b580      	push	{r7, lr}
 80194ee:	af00      	add	r7, sp, #0
 80194f0:	4801      	ldr	r0, [pc, #4]	; (80194f8 <__tcf_0+0xc>)
 80194f2:	f000 f831 	bl	8019558 <_ZN23MockIgnoredExpectedCallD1Ev>
 80194f6:	bd80      	pop	{r7, pc}
 80194f8:	20000d14 	.word	0x20000d14

080194fc <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8019500:	4b12      	ldr	r3, [pc, #72]	; (801954c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019502:	781b      	ldrb	r3, [r3, #0]
 8019504:	f3bf 8f5b 	dmb	ish
 8019508:	b2db      	uxtb	r3, r3
 801950a:	f003 0301 	and.w	r3, r3, #1
 801950e:	2b00      	cmp	r3, #0
 8019510:	bf0c      	ite	eq
 8019512:	2301      	moveq	r3, #1
 8019514:	2300      	movne	r3, #0
 8019516:	b2db      	uxtb	r3, r3
 8019518:	2b00      	cmp	r3, #0
 801951a:	d013      	beq.n	8019544 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801951c:	480b      	ldr	r0, [pc, #44]	; (801954c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801951e:	f003 ff03 	bl	801d328 <__cxa_guard_acquire>
 8019522:	4603      	mov	r3, r0
 8019524:	2b00      	cmp	r3, #0
 8019526:	bf14      	ite	ne
 8019528:	2301      	movne	r3, #1
 801952a:	2300      	moveq	r3, #0
 801952c:	b2db      	uxtb	r3, r3
 801952e:	2b00      	cmp	r3, #0
 8019530:	d008      	beq.n	8019544 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019532:	4807      	ldr	r0, [pc, #28]	; (8019550 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8019534:	f7ff ffc8 	bl	80194c8 <_ZN23MockIgnoredExpectedCallC1Ev>
 8019538:	4804      	ldr	r0, [pc, #16]	; (801954c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801953a:	f003 ff01 	bl	801d340 <__cxa_guard_release>
 801953e:	4805      	ldr	r0, [pc, #20]	; (8019554 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8019540:	f003 ff25 	bl	801d38e <atexit>
    return call;
 8019544:	4b02      	ldr	r3, [pc, #8]	; (8019550 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 8019546:	4618      	mov	r0, r3
 8019548:	bd80      	pop	{r7, pc}
 801954a:	bf00      	nop
 801954c:	20000d18 	.word	0x20000d18
 8019550:	20000d14 	.word	0x20000d14
 8019554:	080194ed 	.word	0x080194ed

08019558 <_ZN23MockIgnoredExpectedCallD1Ev>:
 8019558:	b580      	push	{r7, lr}
 801955a:	b082      	sub	sp, #8
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
 8019560:	4a05      	ldr	r2, [pc, #20]	; (8019578 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	601a      	str	r2, [r3, #0]
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	4618      	mov	r0, r3
 801956a:	f7fe fc93 	bl	8017e94 <_ZN16MockExpectedCallD1Ev>
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	4618      	mov	r0, r3
 8019572:	3708      	adds	r7, #8
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}
 8019578:	08025898 	.word	0x08025898

0801957c <_ZN23MockIgnoredExpectedCallD0Ev>:
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6878      	ldr	r0, [r7, #4]
 8019586:	f7ff ffe7 	bl	8019558 <_ZN23MockIgnoredExpectedCallD1Ev>
 801958a:	2104      	movs	r1, #4
 801958c:	6878      	ldr	r0, [r7, #4]
 801958e:	f7ee fc5d 	bl	8007e4c <_ZdlPvj>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	4618      	mov	r0, r3
 8019596:	3708      	adds	r7, #8
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}

0801959c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801959c:	b580      	push	{r7, lr}
 801959e:	b082      	sub	sp, #8
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	4a05      	ldr	r2, [pc, #20]	; (80195bc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	601a      	str	r2, [r3, #0]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	4618      	mov	r0, r3
 80195ae:	f001 fd4b 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	4618      	mov	r0, r3
 80195b6:	3708      	adds	r7, #8
 80195b8:	46bd      	mov	sp, r7
 80195ba:	bd80      	pop	{r7, pc}
 80195bc:	08025a38 	.word	0x08025a38

080195c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b082      	sub	sp, #8
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6878      	ldr	r0, [r7, #4]
 80195ca:	f7ff ffe7 	bl	801959c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 80195ce:	2138      	movs	r1, #56	; 0x38
 80195d0:	6878      	ldr	r0, [r7, #4]
 80195d2:	f7ee fc3b 	bl	8007e4c <_ZdlPvj>
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	4618      	mov	r0, r3
 80195da:	3708      	adds	r7, #8
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 80195e0:	b480      	push	{r7}
 80195e2:	b083      	sub	sp, #12
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
 80195e8:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	683a      	ldr	r2, [r7, #0]
 80195ee:	601a      	str	r2, [r3, #0]
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	2200      	movs	r2, #0
 80195f4:	605a      	str	r2, [r3, #4]
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	4618      	mov	r0, r3
 80195fa:	370c      	adds	r7, #12
 80195fc:	46bd      	mov	sp, r7
 80195fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019602:	4770      	bx	lr

08019604 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8019604:	b480      	push	{r7}
 8019606:	b083      	sub	sp, #12
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
 801960c:	4a06      	ldr	r2, [pc, #24]	; (8019628 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	601a      	str	r2, [r3, #0]
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2200      	movs	r2, #0
 8019616:	605a      	str	r2, [r3, #4]
{
}
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	4618      	mov	r0, r3
 801961c:	370c      	adds	r7, #12
 801961e:	46bd      	mov	sp, r7
 8019620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019624:	4770      	bx	lr
 8019626:	bf00      	nop
 8019628:	08025b8c 	.word	0x08025b8c

0801962c <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801962c:	b580      	push	{r7, lr}
 801962e:	b084      	sub	sp, #16
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	4a0d      	ldr	r2, [pc, #52]	; (801966c <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	685b      	ldr	r3, [r3, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d00f      	beq.n	8019662 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	685b      	ldr	r3, [r3, #4]
 8019646:	685b      	ldr	r3, [r3, #4]
 8019648:	60fb      	str	r3, [r7, #12]
        delete head_;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	685b      	ldr	r3, [r3, #4]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d003      	beq.n	801965a <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8019652:	2108      	movs	r1, #8
 8019654:	4618      	mov	r0, r3
 8019656:	f7ee fbf9 	bl	8007e4c <_ZdlPvj>
        head_ = next;
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	68fa      	ldr	r2, [r7, #12]
 801965e:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019660:	e7eb      	b.n	801963a <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	4618      	mov	r0, r3
 8019666:	3710      	adds	r7, #16
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}
 801966c:	08025b8c 	.word	0x08025b8c

08019670 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8019670:	b580      	push	{r7, lr}
 8019672:	b082      	sub	sp, #8
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
}
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f7ff ffd7 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
 801967e:	2108      	movs	r1, #8
 8019680:	6878      	ldr	r0, [r7, #4]
 8019682:	f7ee fbe3 	bl	8007e4c <_ZdlPvj>
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	4618      	mov	r0, r3
 801968a:	3708      	adds	r7, #8
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}

08019690 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b084      	sub	sp, #16
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	685b      	ldr	r3, [r3, #4]
 801969c:	60fb      	str	r3, [r7, #12]
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d011      	beq.n	80196c8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	681a      	ldr	r2, [r3, #0]
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	33d4      	adds	r3, #212	; 0xd4
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	4610      	mov	r0, r2
 80196b4:	4798      	blx	r3
 80196b6:	4603      	mov	r3, r0
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d001      	beq.n	80196c0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 80196bc:	2301      	movs	r3, #1
 80196be:	e004      	b.n	80196ca <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	685b      	ldr	r3, [r3, #4]
 80196c4:	60fb      	str	r3, [r7, #12]
 80196c6:	e7ea      	b.n	801969e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 80196c8:	2300      	movs	r3, #0
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	3710      	adds	r7, #16
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bd80      	pop	{r7, pc}

080196d2 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 80196d2:	b480      	push	{r7}
 80196d4:	b085      	sub	sp, #20
 80196d6:	af00      	add	r7, sp, #0
 80196d8:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 80196da:	2300      	movs	r3, #0
 80196dc:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	685b      	ldr	r3, [r3, #4]
 80196e2:	60bb      	str	r3, [r7, #8]
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d006      	beq.n	80196f8 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	3301      	adds	r3, #1
 80196ee:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	685b      	ldr	r3, [r3, #4]
 80196f4:	60bb      	str	r3, [r7, #8]
 80196f6:	e7f5      	b.n	80196e4 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 80196f8:	68fb      	ldr	r3, [r7, #12]
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3714      	adds	r7, #20
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr

08019706 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8019706:	b480      	push	{r7}
 8019708:	b083      	sub	sp, #12
 801970a:	af00      	add	r7, sp, #0
 801970c:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	2b00      	cmp	r3, #0
 8019714:	bf0c      	ite	eq
 8019716:	2301      	moveq	r3, #1
 8019718:	2300      	movne	r3, #0
 801971a:	b2db      	uxtb	r3, r3
}
 801971c:	4618      	mov	r0, r3
 801971e:	370c      	adds	r7, #12
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr

08019728 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b084      	sub	sp, #16
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
 8019730:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8019732:	2300      	movs	r3, #0
 8019734:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	60bb      	str	r3, [r7, #8]
 801973c:	68bb      	ldr	r3, [r7, #8]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d01d      	beq.n	801977e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8019742:	68bb      	ldr	r3, [r7, #8]
 8019744:	681a      	ldr	r2, [r3, #0]
 8019746:	68bb      	ldr	r3, [r7, #8]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	33b8      	adds	r3, #184	; 0xb8
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	6839      	ldr	r1, [r7, #0]
 8019752:	4610      	mov	r0, r2
 8019754:	4798      	blx	r3
 8019756:	4603      	mov	r3, r0
 8019758:	2b00      	cmp	r3, #0
 801975a:	d00c      	beq.n	8019776 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	681a      	ldr	r2, [r3, #0]
 8019760:	68bb      	ldr	r3, [r7, #8]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	33f8      	adds	r3, #248	; 0xf8
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	4610      	mov	r0, r2
 801976c:	4798      	blx	r3
 801976e:	4602      	mov	r2, r0
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	4413      	add	r3, r2
 8019774:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019776:	68bb      	ldr	r3, [r7, #8]
 8019778:	685b      	ldr	r3, [r3, #4]
 801977a:	60bb      	str	r3, [r7, #8]
 801977c:	e7de      	b.n	801973c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801977e:	68fb      	ldr	r3, [r7, #12]
}
 8019780:	4618      	mov	r0, r3
 8019782:	3710      	adds	r7, #16
 8019784:	46bd      	mov	sp, r7
 8019786:	bd80      	pop	{r7, pc}

08019788 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b084      	sub	sp, #16
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019790:	2300      	movs	r3, #0
 8019792:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	60bb      	str	r3, [r7, #8]
 801979a:	68bb      	ldr	r3, [r7, #8]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d015      	beq.n	80197cc <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	33c0      	adds	r3, #192	; 0xc0
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	4610      	mov	r0, r2
 80197b0:	4798      	blx	r3
 80197b2:	4603      	mov	r3, r0
 80197b4:	f083 0301 	eor.w	r3, r3, #1
 80197b8:	b2db      	uxtb	r3, r3
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d002      	beq.n	80197c4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	3301      	adds	r3, #1
 80197c2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	60bb      	str	r3, [r7, #8]
 80197ca:	e7e6      	b.n	801979a <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 80197cc:	68fb      	ldr	r3, [r7, #12]
}
 80197ce:	4618      	mov	r0, r3
 80197d0:	3710      	adds	r7, #16
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}

080197d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 80197d6:	b580      	push	{r7, lr}
 80197d8:	b084      	sub	sp, #16
 80197da:	af00      	add	r7, sp, #0
 80197dc:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	60fb      	str	r3, [r7, #12]
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d011      	beq.n	801980e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	681a      	ldr	r2, [r3, #0]
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	33c8      	adds	r3, #200	; 0xc8
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	4610      	mov	r0, r2
 80197fa:	4798      	blx	r3
 80197fc:	4603      	mov	r3, r0
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d001      	beq.n	8019806 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8019802:	2301      	movs	r3, #1
 8019804:	e004      	b.n	8019810 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	685b      	ldr	r3, [r3, #4]
 801980a:	60fb      	str	r3, [r7, #12]
 801980c:	e7ea      	b.n	80197e4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801980e:	2300      	movs	r3, #0
}
 8019810:	4618      	mov	r0, r3
 8019812:	3710      	adds	r7, #16
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}

08019818 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b084      	sub	sp, #16
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	685b      	ldr	r3, [r3, #4]
 8019824:	60fb      	str	r3, [r7, #12]
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d014      	beq.n	8019856 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	681a      	ldr	r2, [r3, #0]
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	33c0      	adds	r3, #192	; 0xc0
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	4610      	mov	r0, r2
 801983c:	4798      	blx	r3
 801983e:	4603      	mov	r3, r0
 8019840:	f083 0301 	eor.w	r3, r3, #1
 8019844:	b2db      	uxtb	r3, r3
 8019846:	2b00      	cmp	r3, #0
 8019848:	d001      	beq.n	801984e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801984a:	2301      	movs	r3, #1
 801984c:	e004      	b.n	8019858 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	685b      	ldr	r3, [r3, #4]
 8019852:	60fb      	str	r3, [r7, #12]
 8019854:	e7e7      	b.n	8019826 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 8019856:	2300      	movs	r3, #0
}
 8019858:	4618      	mov	r0, r3
 801985a:	3710      	adds	r7, #16
 801985c:	46bd      	mov	sp, r7
 801985e:	bd80      	pop	{r7, pc}

08019860 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b084      	sub	sp, #16
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	685b      	ldr	r3, [r3, #4]
 801986e:	60fb      	str	r3, [r7, #12]
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d012      	beq.n	801989c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	681a      	ldr	r2, [r3, #0]
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	33b8      	adds	r3, #184	; 0xb8
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	6839      	ldr	r1, [r7, #0]
 8019886:	4610      	mov	r0, r2
 8019888:	4798      	blx	r3
 801988a:	4603      	mov	r3, r0
 801988c:	2b00      	cmp	r3, #0
 801988e:	d001      	beq.n	8019894 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 8019890:	2301      	movs	r3, #1
 8019892:	e004      	b.n	801989e <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	60fb      	str	r3, [r7, #12]
 801989a:	e7e9      	b.n	8019870 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801989c:	2300      	movs	r3, #0
}
 801989e:	4618      	mov	r0, r3
 80198a0:	3710      	adds	r7, #16
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}
	...

080198a8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 80198a8:	b590      	push	{r4, r7, lr}
 80198aa:	b085      	sub	sp, #20
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 80198b2:	2273      	movs	r2, #115	; 0x73
 80198b4:	4911      	ldr	r1, [pc, #68]	; (80198fc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 80198b6:	2008      	movs	r0, #8
 80198b8:	f7ee fab4 	bl	8007e24 <_ZnwjPKci>
 80198bc:	4604      	mov	r4, r0
 80198be:	6839      	ldr	r1, [r7, #0]
 80198c0:	4620      	mov	r0, r4
 80198c2:	f7ff fe8d 	bl	80195e0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 80198c6:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	685b      	ldr	r3, [r3, #4]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d103      	bne.n	80198d8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	68ba      	ldr	r2, [r7, #8]
 80198d4:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 80198d6:	e00d      	b.n	80198f4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	685b      	ldr	r3, [r3, #4]
 80198dc:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	685b      	ldr	r3, [r3, #4]
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d003      	beq.n	80198ee <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	685b      	ldr	r3, [r3, #4]
 80198ea:	60fb      	str	r3, [r7, #12]
 80198ec:	e7f7      	b.n	80198de <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	68ba      	ldr	r2, [r7, #8]
 80198f2:	605a      	str	r2, [r3, #4]
}
 80198f4:	bf00      	nop
 80198f6:	3714      	adds	r7, #20
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd90      	pop	{r4, r7, pc}
 80198fc:	080234e8 	.word	0x080234e8

08019900 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
 8019908:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	685b      	ldr	r3, [r3, #4]
 801990e:	60fb      	str	r3, [r7, #12]
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d018      	beq.n	8019948 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	681a      	ldr	r2, [r3, #0]
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	33c4      	adds	r3, #196	; 0xc4
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	4610      	mov	r0, r2
 8019926:	4798      	blx	r3
 8019928:	4603      	mov	r3, r0
 801992a:	2b00      	cmp	r3, #0
 801992c:	d008      	beq.n	8019940 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	3330      	adds	r3, #48	; 0x30
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	68fa      	ldr	r2, [r7, #12]
 8019938:	6812      	ldr	r2, [r2, #0]
 801993a:	4611      	mov	r1, r2
 801993c:	6878      	ldr	r0, [r7, #4]
 801993e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	685b      	ldr	r3, [r3, #4]
 8019944:	60fb      	str	r3, [r7, #12]
 8019946:	e7e3      	b.n	8019910 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 8019948:	bf00      	nop
 801994a:	3710      	adds	r7, #16
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}

08019950 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b086      	sub	sp, #24
 8019954:	af00      	add	r7, sp, #0
 8019956:	60f8      	str	r0, [r7, #12]
 8019958:	60b9      	str	r1, [r7, #8]
 801995a:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	685b      	ldr	r3, [r3, #4]
 8019960:	617b      	str	r3, [r7, #20]
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d019      	beq.n	801999c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 8019968:	697b      	ldr	r3, [r7, #20]
 801996a:	681a      	ldr	r2, [r3, #0]
 801996c:	697b      	ldr	r3, [r7, #20]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	33b8      	adds	r3, #184	; 0xb8
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	68b9      	ldr	r1, [r7, #8]
 8019978:	4610      	mov	r0, r2
 801997a:	4798      	blx	r3
 801997c:	4603      	mov	r3, r0
 801997e:	2b00      	cmp	r3, #0
 8019980:	d008      	beq.n	8019994 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	3330      	adds	r3, #48	; 0x30
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	697a      	ldr	r2, [r7, #20]
 801998c:	6812      	ldr	r2, [r2, #0]
 801998e:	4611      	mov	r1, r2
 8019990:	68f8      	ldr	r0, [r7, #12]
 8019992:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	685b      	ldr	r3, [r3, #4]
 8019998:	617b      	str	r3, [r7, #20]
 801999a:	e7e2      	b.n	8019962 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801999c:	bf00      	nop
 801999e:	3718      	adds	r7, #24
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}

080199a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b084      	sub	sp, #16
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
 80199ac:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	685b      	ldr	r3, [r3, #4]
 80199b2:	60fb      	str	r3, [r7, #12]
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d00c      	beq.n	80199d4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	3330      	adds	r3, #48	; 0x30
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	68fa      	ldr	r2, [r7, #12]
 80199c4:	6812      	ldr	r2, [r2, #0]
 80199c6:	4611      	mov	r1, r2
 80199c8:	6878      	ldr	r0, [r7, #4]
 80199ca:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	685b      	ldr	r3, [r3, #4]
 80199d0:	60fb      	str	r3, [r7, #12]
 80199d2:	e7ef      	b.n	80199b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 80199d4:	bf00      	nop
 80199d6:	3710      	adds	r7, #16
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}

080199dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 80199dc:	b580      	push	{r7, lr}
 80199de:	b084      	sub	sp, #16
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	6078      	str	r0, [r7, #4]
 80199e4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	685b      	ldr	r3, [r3, #4]
 80199ea:	60fb      	str	r3, [r7, #12]
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d016      	beq.n	8019a20 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	681a      	ldr	r2, [r3, #0]
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	33b8      	adds	r3, #184	; 0xb8
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	6839      	ldr	r1, [r7, #0]
 8019a02:	4610      	mov	r0, r2
 8019a04:	4798      	blx	r3
 8019a06:	4603      	mov	r3, r0
 8019a08:	f083 0301 	eor.w	r3, r3, #1
 8019a0c:	b2db      	uxtb	r3, r3
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d002      	beq.n	8019a18 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	2200      	movs	r2, #0
 8019a16:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	685b      	ldr	r3, [r3, #4]
 8019a1c:	60fb      	str	r3, [r7, #12]
 8019a1e:	e7e5      	b.n	80199ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	3388      	adds	r3, #136	; 0x88
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	6878      	ldr	r0, [r7, #4]
 8019a2a:	4798      	blx	r3
}
 8019a2c:	bf00      	nop
 8019a2e:	3710      	adds	r7, #16
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd80      	pop	{r7, pc}

08019a34 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b084      	sub	sp, #16
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	60fb      	str	r3, [r7, #12]
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d015      	beq.n	8019a74 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	681a      	ldr	r2, [r3, #0]
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	33d4      	adds	r3, #212	; 0xd4
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	4610      	mov	r0, r2
 8019a58:	4798      	blx	r3
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	f083 0301 	eor.w	r3, r3, #1
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d002      	beq.n	8019a6c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2200      	movs	r2, #0
 8019a6a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	60fb      	str	r3, [r7, #12]
 8019a72:	e7e6      	b.n	8019a42 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	3388      	adds	r3, #136	; 0x88
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	6878      	ldr	r0, [r7, #4]
 8019a7e:	4798      	blx	r3
}
 8019a80:	bf00      	nop
 8019a82:	3710      	adds	r7, #16
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}

08019a88 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b084      	sub	sp, #16
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	685b      	ldr	r3, [r3, #4]
 8019a94:	60fb      	str	r3, [r7, #12]
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d01b      	beq.n	8019ad4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681a      	ldr	r2, [r3, #0]
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	33c8      	adds	r3, #200	; 0xc8
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	4610      	mov	r0, r2
 8019aac:	4798      	blx	r3
 8019aae:	4603      	mov	r3, r0
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d00b      	beq.n	8019acc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	681a      	ldr	r2, [r3, #0]
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	33ec      	adds	r3, #236	; 0xec
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	4610      	mov	r0, r2
 8019ac4:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	2200      	movs	r2, #0
 8019aca:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	685b      	ldr	r3, [r3, #4]
 8019ad0:	60fb      	str	r3, [r7, #12]
 8019ad2:	e7e0      	b.n	8019a96 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	3388      	adds	r3, #136	; 0x88
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	6878      	ldr	r0, [r7, #4]
 8019ade:	4798      	blx	r3
}
 8019ae0:	bf00      	nop
 8019ae2:	3710      	adds	r7, #16
 8019ae4:	46bd      	mov	sp, r7
 8019ae6:	bd80      	pop	{r7, pc}

08019ae8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b084      	sub	sp, #16
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
 8019af0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	685b      	ldr	r3, [r3, #4]
 8019af6:	60fb      	str	r3, [r7, #12]
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d016      	beq.n	8019b2c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	681a      	ldr	r2, [r3, #0]
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	33a8      	adds	r3, #168	; 0xa8
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	6839      	ldr	r1, [r7, #0]
 8019b0e:	4610      	mov	r0, r2
 8019b10:	4798      	blx	r3
 8019b12:	4603      	mov	r3, r0
 8019b14:	f083 0301 	eor.w	r3, r3, #1
 8019b18:	b2db      	uxtb	r3, r3
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d002      	beq.n	8019b24 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	2200      	movs	r2, #0
 8019b22:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	685b      	ldr	r3, [r3, #4]
 8019b28:	60fb      	str	r3, [r7, #12]
 8019b2a:	e7e5      	b.n	8019af8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	3388      	adds	r3, #136	; 0x88
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	6878      	ldr	r0, [r7, #4]
 8019b36:	4798      	blx	r3
}
 8019b38:	bf00      	nop
 8019b3a:	3710      	adds	r7, #16
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	bd80      	pop	{r7, pc}

08019b40 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b084      	sub	sp, #16
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	60fb      	str	r3, [r7, #12]
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d016      	beq.n	8019b84 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	681a      	ldr	r2, [r3, #0]
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	33b0      	adds	r3, #176	; 0xb0
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	6839      	ldr	r1, [r7, #0]
 8019b66:	4610      	mov	r0, r2
 8019b68:	4798      	blx	r3
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	f083 0301 	eor.w	r3, r3, #1
 8019b70:	b2db      	uxtb	r3, r3
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d002      	beq.n	8019b7c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	2200      	movs	r2, #0
 8019b7a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	685b      	ldr	r3, [r3, #4]
 8019b80:	60fb      	str	r3, [r7, #12]
 8019b82:	e7e5      	b.n	8019b50 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	3388      	adds	r3, #136	; 0x88
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	6878      	ldr	r0, [r7, #4]
 8019b8e:	4798      	blx	r3
}
 8019b90:	bf00      	nop
 8019b92:	3710      	adds	r7, #16
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}

08019b98 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b084      	sub	sp, #16
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
 8019ba0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	685b      	ldr	r3, [r3, #4]
 8019ba6:	60fb      	str	r3, [r7, #12]
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d016      	beq.n	8019bdc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	681a      	ldr	r2, [r3, #0]
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	33ac      	adds	r3, #172	; 0xac
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	6839      	ldr	r1, [r7, #0]
 8019bbe:	4610      	mov	r0, r2
 8019bc0:	4798      	blx	r3
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	f083 0301 	eor.w	r3, r3, #1
 8019bc8:	b2db      	uxtb	r3, r3
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d002      	beq.n	8019bd4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	2200      	movs	r2, #0
 8019bd2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	685b      	ldr	r3, [r3, #4]
 8019bd8:	60fb      	str	r3, [r7, #12]
 8019bda:	e7e5      	b.n	8019ba8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	3388      	adds	r3, #136	; 0x88
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	6878      	ldr	r0, [r7, #4]
 8019be6:	4798      	blx	r3
}
 8019be8:	bf00      	nop
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}

08019bf0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b084      	sub	sp, #16
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
 8019bf8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	60fb      	str	r3, [r7, #12]
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d016      	beq.n	8019c34 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	681a      	ldr	r2, [r3, #0]
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	33b4      	adds	r3, #180	; 0xb4
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	6839      	ldr	r1, [r7, #0]
 8019c16:	4610      	mov	r0, r2
 8019c18:	4798      	blx	r3
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	f083 0301 	eor.w	r3, r3, #1
 8019c20:	b2db      	uxtb	r3, r3
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d002      	beq.n	8019c2c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	2200      	movs	r2, #0
 8019c2a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	685b      	ldr	r3, [r3, #4]
 8019c30:	60fb      	str	r3, [r7, #12]
 8019c32:	e7e5      	b.n	8019c00 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	3388      	adds	r3, #136	; 0x88
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	6878      	ldr	r0, [r7, #4]
 8019c3e:	4798      	blx	r3
}
 8019c40:	bf00      	nop
 8019c42:	3710      	adds	r7, #16
 8019c44:	46bd      	mov	sp, r7
 8019c46:	bd80      	pop	{r7, pc}

08019c48 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b084      	sub	sp, #16
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	6078      	str	r0, [r7, #4]
 8019c50:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	685b      	ldr	r3, [r3, #4]
 8019c56:	60fb      	str	r3, [r7, #12]
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d016      	beq.n	8019c8c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	681a      	ldr	r2, [r3, #0]
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	33bc      	adds	r3, #188	; 0xbc
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	6839      	ldr	r1, [r7, #0]
 8019c6e:	4610      	mov	r0, r2
 8019c70:	4798      	blx	r3
 8019c72:	4603      	mov	r3, r0
 8019c74:	f083 0301 	eor.w	r3, r3, #1
 8019c78:	b2db      	uxtb	r3, r3
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d002      	beq.n	8019c84 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2200      	movs	r2, #0
 8019c82:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	685b      	ldr	r3, [r3, #4]
 8019c88:	60fb      	str	r3, [r7, #12]
 8019c8a:	e7e5      	b.n	8019c58 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	3388      	adds	r3, #136	; 0x88
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	6878      	ldr	r0, [r7, #4]
 8019c96:	4798      	blx	r3
}
 8019c98:	bf00      	nop
 8019c9a:	3710      	adds	r7, #16
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}

08019ca0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b084      	sub	sp, #16
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	60fb      	str	r3, [r7, #12]
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d01d      	beq.n	8019cf0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	681a      	ldr	r2, [r3, #0]
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	33c8      	adds	r3, #200	; 0xc8
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	4610      	mov	r0, r2
 8019cc4:	4798      	blx	r3
 8019cc6:	4603      	mov	r3, r0
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d00d      	beq.n	8019ce8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	3388      	adds	r3, #136	; 0x88
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	4798      	blx	r3
            return matchingCall;
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	e004      	b.n	8019cf2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	60fb      	str	r3, [r7, #12]
 8019cee:	e7de      	b.n	8019cae <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019cf0:	2300      	movs	r3, #0
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3710      	adds	r7, #16
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}

08019cfa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 8019cfa:	b580      	push	{r7, lr}
 8019cfc:	b084      	sub	sp, #16
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	685b      	ldr	r3, [r3, #4]
 8019d06:	60fb      	str	r3, [r7, #12]
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d012      	beq.n	8019d34 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	681a      	ldr	r2, [r3, #0]
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	33cc      	adds	r3, #204	; 0xcc
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	4610      	mov	r0, r2
 8019d1e:	4798      	blx	r3
 8019d20:	4603      	mov	r3, r0
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d002      	beq.n	8019d2c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	e004      	b.n	8019d36 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	685b      	ldr	r3, [r3, #4]
 8019d30:	60fb      	str	r3, [r7, #12]
 8019d32:	e7e9      	b.n	8019d08 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019d34:	2300      	movs	r3, #0
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3710      	adds	r7, #16
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}

08019d3e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 8019d3e:	b580      	push	{r7, lr}
 8019d40:	b084      	sub	sp, #16
 8019d42:	af00      	add	r7, sp, #0
 8019d44:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	685b      	ldr	r3, [r3, #4]
 8019d4a:	60fb      	str	r3, [r7, #12]
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d01d      	beq.n	8019d8e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	681a      	ldr	r2, [r3, #0]
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	33cc      	adds	r3, #204	; 0xcc
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	4610      	mov	r0, r2
 8019d62:	4798      	blx	r3
 8019d64:	4603      	mov	r3, r0
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d00d      	beq.n	8019d86 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	2200      	movs	r2, #0
 8019d74:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	3388      	adds	r3, #136	; 0x88
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	6878      	ldr	r0, [r7, #4]
 8019d80:	4798      	blx	r3
            return matchingCall;
 8019d82:	68bb      	ldr	r3, [r7, #8]
 8019d84:	e004      	b.n	8019d90 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	685b      	ldr	r3, [r3, #4]
 8019d8a:	60fb      	str	r3, [r7, #12]
 8019d8c:	e7de      	b.n	8019d4c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019d8e:	2300      	movs	r3, #0
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3710      	adds	r7, #16
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}

08019d98 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b086      	sub	sp, #24
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	685b      	ldr	r3, [r3, #4]
 8019da4:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 8019da6:	2300      	movs	r3, #0
 8019da8:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 8019daa:	2300      	movs	r3, #0
 8019dac:	60fb      	str	r3, [r7, #12]

    while (current) {
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d024      	beq.n	8019dfe <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 8019db4:	697b      	ldr	r3, [r7, #20]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d11a      	bne.n	8019df2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 8019dc0:	693b      	ldr	r3, [r7, #16]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d106      	bne.n	8019dd4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	685b      	ldr	r3, [r3, #4]
 8019dca:	617b      	str	r3, [r7, #20]
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	697a      	ldr	r2, [r7, #20]
 8019dd0:	605a      	str	r2, [r3, #4]
 8019dd2:	e006      	b.n	8019de2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	685a      	ldr	r2, [r3, #4]
 8019dd8:	693b      	ldr	r3, [r7, #16]
 8019dda:	605a      	str	r2, [r3, #4]
 8019ddc:	693b      	ldr	r3, [r7, #16]
 8019dde:	685b      	ldr	r3, [r3, #4]
 8019de0:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d0e2      	beq.n	8019dae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 8019de8:	2108      	movs	r1, #8
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7ee f82e 	bl	8007e4c <_ZdlPvj>
 8019df0:	e7dd      	b.n	8019dae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	613b      	str	r3, [r7, #16]
            current = current->next_;
 8019df6:	697b      	ldr	r3, [r7, #20]
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	617b      	str	r3, [r7, #20]
    while (current) {
 8019dfc:	e7d7      	b.n	8019dae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 8019dfe:	bf00      	nop
 8019e00:	3718      	adds	r7, #24
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}

08019e06 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 8019e06:	b580      	push	{r7, lr}
 8019e08:	b084      	sub	sp, #16
 8019e0a:	af00      	add	r7, sp, #0
 8019e0c:	6078      	str	r0, [r7, #4]
    while (head_) {
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	685b      	ldr	r3, [r3, #4]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d019      	beq.n	8019e4a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	685b      	ldr	r3, [r3, #4]
 8019e1a:	685b      	ldr	r3, [r3, #4]
 8019e1c:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d004      	beq.n	8019e32 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 8019e28:	681a      	ldr	r2, [r3, #0]
 8019e2a:	3204      	adds	r2, #4
 8019e2c:	6812      	ldr	r2, [r2, #0]
 8019e2e:	4618      	mov	r0, r3
 8019e30:	4790      	blx	r2
        delete head_;
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	685b      	ldr	r3, [r3, #4]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d003      	beq.n	8019e42 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 8019e3a:	2108      	movs	r1, #8
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7ee f805 	bl	8007e4c <_ZdlPvj>
        head_ = next;
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	68fa      	ldr	r2, [r7, #12]
 8019e46:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019e48:	e7e1      	b.n	8019e0e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 8019e4a:	bf00      	nop
 8019e4c:	3710      	adds	r7, #16
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}

08019e52 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b084      	sub	sp, #16
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	60fb      	str	r3, [r7, #12]
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d00c      	beq.n	8019e80 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	681a      	ldr	r2, [r3, #0]
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	33ec      	adds	r3, #236	; 0xec
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	4610      	mov	r0, r2
 8019e76:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	685b      	ldr	r3, [r3, #4]
 8019e7c:	60fb      	str	r3, [r7, #12]
 8019e7e:	e7ef      	b.n	8019e60 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 8019e80:	bf00      	nop
 8019e82:	3710      	adds	r7, #16
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b084      	sub	sp, #16
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	685b      	ldr	r3, [r3, #4]
 8019e94:	60fb      	str	r3, [r7, #12]
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d00c      	beq.n	8019eb6 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681a      	ldr	r2, [r3, #0]
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	33e8      	adds	r3, #232	; 0xe8
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4610      	mov	r0, r2
 8019eac:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	60fb      	str	r3, [r7, #12]
 8019eb4:	e7ef      	b.n	8019e96 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 8019eb6:	bf00      	nop
 8019eb8:	3710      	adds	r7, #16
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd80      	pop	{r7, pc}

08019ebe <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 8019ebe:	b580      	push	{r7, lr}
 8019ec0:	b084      	sub	sp, #16
 8019ec2:	af00      	add	r7, sp, #0
 8019ec4:	6078      	str	r0, [r7, #4]
 8019ec6:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	60fb      	str	r3, [r7, #12]
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d00d      	beq.n	8019ef0 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681a      	ldr	r2, [r3, #0]
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	33dc      	adds	r3, #220	; 0xdc
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	6839      	ldr	r1, [r7, #0]
 8019ee4:	4610      	mov	r0, r2
 8019ee6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	60fb      	str	r3, [r7, #12]
 8019eee:	e7ee      	b.n	8019ece <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 8019ef0:	bf00      	nop
 8019ef2:	3710      	adds	r7, #16
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bd80      	pop	{r7, pc}

08019ef8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b084      	sub	sp, #16
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
 8019f00:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	685b      	ldr	r3, [r3, #4]
 8019f06:	60fb      	str	r3, [r7, #12]
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d00d      	beq.n	8019f2a <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	681a      	ldr	r2, [r3, #0]
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	33e0      	adds	r3, #224	; 0xe0
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	6839      	ldr	r1, [r7, #0]
 8019f1e:	4610      	mov	r0, r2
 8019f20:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	685b      	ldr	r3, [r3, #4]
 8019f26:	60fb      	str	r3, [r7, #12]
 8019f28:	e7ee      	b.n	8019f08 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 8019f2a:	bf00      	nop
 8019f2c:	3710      	adds	r7, #16
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}
	...

08019f34 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 8019f34:	b590      	push	{r4, r7, lr}
 8019f36:	b087      	sub	sp, #28
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	60f8      	str	r0, [r7, #12]
 8019f3c:	60b9      	str	r1, [r7, #8]
 8019f3e:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 8019f40:	68b9      	ldr	r1, [r7, #8]
 8019f42:	68f8      	ldr	r0, [r7, #12]
 8019f44:	f7f0 fb85 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 8019f48:	f107 0310 	add.w	r3, r7, #16
 8019f4c:	490f      	ldr	r1, [pc, #60]	; (8019f8c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 8019f4e:	4618      	mov	r0, r3
 8019f50:	f7f0 fb2b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8019f54:	f107 0310 	add.w	r3, r7, #16
 8019f58:	4619      	mov	r1, r3
 8019f5a:	68f8      	ldr	r0, [r7, #12]
 8019f5c:	f7f0 fee9 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 8019f60:	4603      	mov	r3, r0
 8019f62:	461c      	mov	r4, r3
 8019f64:	f107 0310 	add.w	r3, r7, #16
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7f0 fed6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8019f6e:	2c00      	cmp	r4, #0
 8019f70:	d007      	beq.n	8019f82 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 8019f72:	6879      	ldr	r1, [r7, #4]
 8019f74:	68f8      	ldr	r0, [r7, #12]
 8019f76:	f7f0 ff4d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 8019f7a:	4905      	ldr	r1, [pc, #20]	; (8019f90 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 8019f7c:	68f8      	ldr	r0, [r7, #12]
 8019f7e:	f7f0 ff5b 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 8019f82:	bf00      	nop
}
 8019f84:	68f8      	ldr	r0, [r7, #12]
 8019f86:	371c      	adds	r7, #28
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd90      	pop	{r4, r7, pc}
 8019f8c:	0802350c 	.word	0x0802350c
 8019f90:	08023510 	.word	0x08023510

08019f94 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 8019f94:	b590      	push	{r4, r7, lr}
 8019f96:	b087      	sub	sp, #28
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	60f8      	str	r0, [r7, #12]
 8019f9c:	60b9      	str	r1, [r7, #8]
 8019f9e:	607a      	str	r2, [r7, #4]
 8019fa0:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 8019fa2:	68b9      	ldr	r1, [r7, #8]
 8019fa4:	68f8      	ldr	r0, [r7, #12]
 8019fa6:	f7f0 fb54 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 8019faa:	f107 0310 	add.w	r3, r7, #16
 8019fae:	4912      	ldr	r1, [pc, #72]	; (8019ff8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7f0 fafa 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 8019fb6:	f107 0310 	add.w	r3, r7, #16
 8019fba:	4619      	mov	r1, r3
 8019fbc:	68f8      	ldr	r0, [r7, #12]
 8019fbe:	f7f0 fefd 	bl	800adbc <_ZneRK12SimpleStringS1_>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	461c      	mov	r4, r3
 8019fc6:	f107 0310 	add.w	r3, r7, #16
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f7f0 fea5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 8019fd0:	2c00      	cmp	r4, #0
 8019fd2:	d003      	beq.n	8019fdc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 8019fd4:	4909      	ldr	r1, [pc, #36]	; (8019ffc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 8019fd6:	68f8      	ldr	r0, [r7, #12]
 8019fd8:	f7f0 ff2e 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 8019fdc:	6879      	ldr	r1, [r7, #4]
 8019fde:	68f8      	ldr	r0, [r7, #12]
 8019fe0:	f7f0 ff18 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 8019fe4:	6839      	ldr	r1, [r7, #0]
 8019fe6:	68f8      	ldr	r0, [r7, #12]
 8019fe8:	f7f0 ff14 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    return str;
 8019fec:	bf00      	nop
}
 8019fee:	68f8      	ldr	r0, [r7, #12]
 8019ff0:	371c      	adds	r7, #28
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd90      	pop	{r4, r7, pc}
 8019ff6:	bf00      	nop
 8019ff8:	0802350c 	.word	0x0802350c
 8019ffc:	08023518 	.word	0x08023518

0801a000 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b08c      	sub	sp, #48	; 0x30
 801a004:	af00      	add	r7, sp, #0
 801a006:	60f8      	str	r0, [r7, #12]
 801a008:	60b9      	str	r1, [r7, #8]
 801a00a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a00c:	f107 0314 	add.w	r3, r7, #20
 801a010:	4929      	ldr	r1, [pc, #164]	; (801a0b8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801a012:	4618      	mov	r0, r3
 801a014:	f7f0 fac9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	685b      	ldr	r3, [r3, #4]
 801a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a020:	2b00      	cmp	r3, #0
 801a022:	d038      	beq.n	801a096 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a026:	681a      	ldr	r2, [r3, #0]
 801a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	33c0      	adds	r3, #192	; 0xc0
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	4610      	mov	r0, r2
 801a034:	4798      	blx	r3
 801a036:	4603      	mov	r3, r0
 801a038:	f083 0301 	eor.w	r3, r3, #1
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d025      	beq.n	801a08e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a044:	6819      	ldr	r1, [r3, #0]
 801a046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	33f0      	adds	r3, #240	; 0xf0
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a054:	4610      	mov	r0, r2
 801a056:	4798      	blx	r3
 801a058:	f107 001c 	add.w	r0, r7, #28
 801a05c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a060:	f107 0114 	add.w	r1, r7, #20
 801a064:	687a      	ldr	r2, [r7, #4]
 801a066:	f7ff ff95 	bl	8019f94 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a06a:	f107 021c 	add.w	r2, r7, #28
 801a06e:	f107 0314 	add.w	r3, r7, #20
 801a072:	4611      	mov	r1, r2
 801a074:	4618      	mov	r0, r3
 801a076:	f7f0 fb04 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a07a:	f107 031c 	add.w	r3, r7, #28
 801a07e:	4618      	mov	r0, r3
 801a080:	f7f0 fe4b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a088:	4618      	mov	r0, r3
 801a08a:	f7f0 fe46 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a090:	685b      	ldr	r3, [r3, #4]
 801a092:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a094:	e7c3      	b.n	801a01e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	f107 0114 	add.w	r1, r7, #20
 801a09c:	687a      	ldr	r2, [r7, #4]
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7ff ff48 	bl	8019f34 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a0a4:	f107 0314 	add.w	r3, r7, #20
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7f0 fe36 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a0ae:	bf00      	nop
}
 801a0b0:	68f8      	ldr	r0, [r7, #12]
 801a0b2:	3730      	adds	r7, #48	; 0x30
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	0802350c 	.word	0x0802350c

0801a0bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b08c      	sub	sp, #48	; 0x30
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	60f8      	str	r0, [r7, #12]
 801a0c4:	60b9      	str	r1, [r7, #8]
 801a0c6:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a0c8:	f107 0314 	add.w	r3, r7, #20
 801a0cc:	4928      	ldr	r1, [pc, #160]	; (801a170 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f7f0 fa6b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a0d4:	68bb      	ldr	r3, [r7, #8]
 801a0d6:	685b      	ldr	r3, [r3, #4]
 801a0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d035      	beq.n	801a14c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	33c0      	adds	r3, #192	; 0xc0
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	4610      	mov	r0, r2
 801a0f0:	4798      	blx	r3
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d025      	beq.n	801a144 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fa:	6819      	ldr	r1, [r3, #0]
 801a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	33f0      	adds	r3, #240	; 0xf0
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a10a:	4610      	mov	r0, r2
 801a10c:	4798      	blx	r3
 801a10e:	f107 001c 	add.w	r0, r7, #28
 801a112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a116:	f107 0114 	add.w	r1, r7, #20
 801a11a:	687a      	ldr	r2, [r7, #4]
 801a11c:	f7ff ff3a 	bl	8019f94 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a120:	f107 021c 	add.w	r2, r7, #28
 801a124:	f107 0314 	add.w	r3, r7, #20
 801a128:	4611      	mov	r1, r2
 801a12a:	4618      	mov	r0, r3
 801a12c:	f7f0 faa9 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a130:	f107 031c 	add.w	r3, r7, #28
 801a134:	4618      	mov	r0, r3
 801a136:	f7f0 fdf0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a13a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a13e:	4618      	mov	r0, r3
 801a140:	f7f0 fdeb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a146:	685b      	ldr	r3, [r3, #4]
 801a148:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a14a:	e7c6      	b.n	801a0da <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	f107 0114 	add.w	r1, r7, #20
 801a152:	687a      	ldr	r2, [r7, #4]
 801a154:	4618      	mov	r0, r3
 801a156:	f7ff feed 	bl	8019f34 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a15a:	f107 0314 	add.w	r3, r7, #20
 801a15e:	4618      	mov	r0, r3
 801a160:	f7f0 fddb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a164:	bf00      	nop
}
 801a166:	68f8      	ldr	r0, [r7, #12]
 801a168:	3730      	adds	r7, #48	; 0x30
 801a16a:	46bd      	mov	sp, r7
 801a16c:	bd80      	pop	{r7, pc}
 801a16e:	bf00      	nop
 801a170:	0802350c 	.word	0x0802350c

0801a174 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b08e      	sub	sp, #56	; 0x38
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
 801a17c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801a17e:	f107 030c 	add.w	r3, r7, #12
 801a182:	4936      	ldr	r1, [pc, #216]	; (801a25c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a184:	4618      	mov	r0, r3
 801a186:	f7f0 fa10 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	685b      	ldr	r3, [r3, #4]
 801a18e:	637b      	str	r3, [r7, #52]	; 0x34
 801a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a192:	2b00      	cmp	r3, #0
 801a194:	d044      	beq.n	801a220 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a198:	681a      	ldr	r2, [r3, #0]
 801a19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	33cc      	adds	r3, #204	; 0xcc
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4610      	mov	r0, r2
 801a1a6:	4798      	blx	r3
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	f083 0301 	eor.w	r3, r3, #1
 801a1ae:	b2db      	uxtb	r3, r3
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d031      	beq.n	801a218 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801a1b4:	f107 031c 	add.w	r3, r7, #28
 801a1b8:	4928      	ldr	r1, [pc, #160]	; (801a25c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	f7f0 f9f5 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1c2:	6819      	ldr	r1, [r3, #0]
 801a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	33f4      	adds	r3, #244	; 0xf4
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a1d2:	4610      	mov	r0, r2
 801a1d4:	4798      	blx	r3
 801a1d6:	f107 0014 	add.w	r0, r7, #20
 801a1da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a1de:	f107 021c 	add.w	r2, r7, #28
 801a1e2:	f107 010c 	add.w	r1, r7, #12
 801a1e6:	f7ff fed5 	bl	8019f94 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a1ea:	f107 0214 	add.w	r2, r7, #20
 801a1ee:	f107 030c 	add.w	r3, r7, #12
 801a1f2:	4611      	mov	r1, r2
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f7f0 fa44 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a1fa:	f107 0314 	add.w	r3, r7, #20
 801a1fe:	4618      	mov	r0, r3
 801a200:	f7f0 fd8b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a208:	4618      	mov	r0, r3
 801a20a:	f7f0 fd86 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a20e:	f107 031c 	add.w	r3, r7, #28
 801a212:	4618      	mov	r0, r3
 801a214:	f7f0 fd81 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	637b      	str	r3, [r7, #52]	; 0x34
 801a21e:	e7b7      	b.n	801a190 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801a220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a224:	490d      	ldr	r1, [pc, #52]	; (801a25c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a226:	4618      	mov	r0, r3
 801a228:	f7f0 f9bf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a232:	f107 010c 	add.w	r1, r7, #12
 801a236:	4618      	mov	r0, r3
 801a238:	f7ff fe7c 	bl	8019f34 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801a23c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a240:	4618      	mov	r0, r3
 801a242:	f7f0 fd6a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801a246:	f107 030c 	add.w	r3, r7, #12
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7f0 fd65 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801a250:	bf00      	nop
}
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	3738      	adds	r7, #56	; 0x38
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	0802350c 	.word	0x0802350c

0801a260 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b084      	sub	sp, #16
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	685b      	ldr	r3, [r3, #4]
 801a26c:	60fb      	str	r3, [r7, #12]
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d014      	beq.n	801a29e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	681a      	ldr	r2, [r3, #0]
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	33d0      	adds	r3, #208	; 0xd0
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	4610      	mov	r0, r2
 801a284:	4798      	blx	r3
 801a286:	4603      	mov	r3, r0
 801a288:	f083 0301 	eor.w	r3, r3, #1
 801a28c:	b2db      	uxtb	r3, r3
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d001      	beq.n	801a296 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801a292:	2301      	movs	r3, #1
 801a294:	e004      	b.n	801a2a0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	685b      	ldr	r3, [r3, #4]
 801a29a:	60fb      	str	r3, [r7, #12]
 801a29c:	e7e7      	b.n	801a26e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801a29e:	2300      	movs	r3, #0
}
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	3710      	adds	r7, #16
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}

0801a2a8 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801a2a8:	b480      	push	{r7}
 801a2aa:	b083      	sub	sp, #12
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
 801a2b0:	460b      	mov	r3, r1
 801a2b2:	70fb      	strb	r3, [r7, #3]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	78fa      	ldrb	r2, [r7, #3]
 801a2b8:	711a      	strb	r2, [r3, #4]
 801a2ba:	bf00      	nop
 801a2bc:	370c      	adds	r7, #12
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c4:	4770      	bx	lr
	...

0801a2c8 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b082      	sub	sp, #8
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
 801a2d0:	460b      	mov	r3, r1
 801a2d2:	70fb      	strb	r3, [r7, #3]
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	f7ed ff6a 	bl	80081b0 <_ZN14TestTerminatorC1Ev>
 801a2dc:	4a05      	ldr	r2, [pc, #20]	; (801a2f4 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	601a      	str	r2, [r3, #0]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	78fa      	ldrb	r2, [r7, #3]
 801a2e6:	711a      	strb	r2, [r3, #4]
    {
    }
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	3708      	adds	r7, #8
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}
 801a2f2:	bf00      	nop
 801a2f4:	08025c20 	.word	0x08025c20

0801a2f8 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	791b      	ldrb	r3, [r3, #4]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d001      	beq.n	801a30c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801a308:	f7f6 f9fe 	bl	8010708 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801a30c:	f7f7 fd40 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a310:	4603      	mov	r3, r0
 801a312:	681a      	ldr	r2, [r3, #0]
 801a314:	6812      	ldr	r2, [r2, #0]
 801a316:	4618      	mov	r0, r3
 801a318:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801a31a:	bf00      	nop
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}
	...

0801a324 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801a324:	b580      	push	{r7, lr}
 801a326:	b082      	sub	sp, #8
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
    {
 801a32c:	4a05      	ldr	r2, [pc, #20]	; (801a344 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	601a      	str	r2, [r3, #0]
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	4618      	mov	r0, r3
 801a336:	f7f7 fdbb 	bl	8011eb0 <_ZN14TestTerminatorD1Ev>
    }
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	4618      	mov	r0, r3
 801a33e:	3708      	adds	r7, #8
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}
 801a344:	08025c20 	.word	0x08025c20

0801a348 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801a348:	b580      	push	{r7, lr}
 801a34a:	b082      	sub	sp, #8
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
    }
 801a350:	6878      	ldr	r0, [r7, #4]
 801a352:	f7ff ffe7 	bl	801a324 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801a356:	2108      	movs	r1, #8
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	f7ed fd77 	bl	8007e4c <_ZdlPvj>
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	4618      	mov	r0, r3
 801a362:	3708      	adds	r7, #8
 801a364:	46bd      	mov	sp, r7
 801a366:	bd80      	pop	{r7, pc}

0801a368 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801a368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a36a:	b085      	sub	sp, #20
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
 801a370:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	330c      	adds	r3, #12
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	6878      	ldr	r0, [r7, #4]
 801a37c:	4798      	blx	r3
 801a37e:	4603      	mov	r3, r0
 801a380:	681a      	ldr	r2, [r3, #0]
 801a382:	321c      	adds	r2, #28
 801a384:	6812      	ldr	r2, [r2, #0]
 801a386:	4618      	mov	r0, r3
 801a388:	4790      	blx	r2
 801a38a:	4603      	mov	r3, r0
 801a38c:	f083 0301 	eor.w	r3, r3, #1
 801a390:	b2db      	uxtb	r3, r3
 801a392:	2b00      	cmp	r3, #0
 801a394:	d01d      	beq.n	801a3d2 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	330c      	adds	r3, #12
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	4798      	blx	r3
 801a3a2:	4604      	mov	r4, r0
 801a3a4:	6823      	ldr	r3, [r4, #0]
 801a3a6:	339c      	adds	r3, #156	; 0x9c
 801a3a8:	681d      	ldr	r5, [r3, #0]
 801a3aa:	683e      	ldr	r6, [r7, #0]
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	791a      	ldrb	r2, [r3, #4]
 801a3b0:	f107 0308 	add.w	r3, r7, #8
 801a3b4:	4611      	mov	r1, r2
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	f7ff ff86 	bl	801a2c8 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801a3bc:	f107 0308 	add.w	r3, r7, #8
 801a3c0:	461a      	mov	r2, r3
 801a3c2:	4631      	mov	r1, r6
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	47a8      	blx	r5
 801a3c8:	f107 0308 	add.w	r3, r7, #8
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f7ff ffa9 	bl	801a324 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801a3d2:	bf00      	nop
 801a3d4:	3714      	adds	r7, #20
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3da <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801a3da:	b580      	push	{r7, lr}
 801a3dc:	b082      	sub	sp, #8
 801a3de:	af00      	add	r7, sp, #0
 801a3e0:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801a3e2:	f7f7 fcc5 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801a3e6:	4603      	mov	r3, r0
}
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	3708      	adds	r7, #8
 801a3ec:	46bd      	mov	sp, r7
 801a3ee:	bd80      	pop	{r7, pc}

0801a3f0 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801a3f0:	b590      	push	{r4, r7, lr}
 801a3f2:	b085      	sub	sp, #20
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
 801a3fa:	687c      	ldr	r4, [r7, #4]
 801a3fc:	f107 0308 	add.w	r3, r7, #8
 801a400:	490b      	ldr	r1, [pc, #44]	; (801a430 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801a402:	4618      	mov	r0, r3
 801a404:	f7f0 f8d1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a408:	f107 0308 	add.w	r3, r7, #8
 801a40c:	461a      	mov	r2, r3
 801a40e:	6839      	ldr	r1, [r7, #0]
 801a410:	4620      	mov	r0, r4
 801a412:	f7f1 ff29 	bl	800c268 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801a416:	f107 0308 	add.w	r3, r7, #8
 801a41a:	4618      	mov	r0, r3
 801a41c:	f7f0 fc7d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a420:	4a04      	ldr	r2, [pc, #16]	; (801a434 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	601a      	str	r2, [r3, #0]
{
}
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	4618      	mov	r0, r3
 801a42a:	3714      	adds	r7, #20
 801a42c:	46bd      	mov	sp, r7
 801a42e:	bd90      	pop	{r4, r7, pc}
 801a430:	0802351c 	.word	0x0802351c
 801a434:	08024bac 	.word	0x08024bac

0801a438 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801a438:	b5b0      	push	{r4, r5, r7, lr}
 801a43a:	b08a      	sub	sp, #40	; 0x28
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
 801a440:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	332c      	adds	r3, #44	; 0x2c
 801a446:	492b      	ldr	r1, [pc, #172]	; (801a4f4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801a448:	4618      	mov	r0, r3
 801a44a:	f7f0 fcf5 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801a454:	683b      	ldr	r3, [r7, #0]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	337c      	adds	r3, #124	; 0x7c
 801a45a:	681c      	ldr	r4, [r3, #0]
 801a45c:	f107 0310 	add.w	r3, r7, #16
 801a460:	4925      	ldr	r1, [pc, #148]	; (801a4f8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801a462:	4618      	mov	r0, r3
 801a464:	f7f0 f8a1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a468:	f107 0308 	add.w	r3, r7, #8
 801a46c:	f107 0210 	add.w	r2, r7, #16
 801a470:	6839      	ldr	r1, [r7, #0]
 801a472:	4618      	mov	r0, r3
 801a474:	47a0      	blx	r4
 801a476:	f107 0308 	add.w	r3, r7, #8
 801a47a:	4619      	mov	r1, r3
 801a47c:	4628      	mov	r0, r5
 801a47e:	f7f0 fcc9 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a482:	f107 0308 	add.w	r3, r7, #8
 801a486:	4618      	mov	r0, r3
 801a488:	f7f0 fc47 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a48c:	f107 0310 	add.w	r3, r7, #16
 801a490:	4618      	mov	r0, r3
 801a492:	f7f0 fc42 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	332c      	adds	r3, #44	; 0x2c
 801a49a:	4918      	ldr	r1, [pc, #96]	; (801a4fc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7f0 fccb 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	3380      	adds	r3, #128	; 0x80
 801a4ae:	681c      	ldr	r4, [r3, #0]
 801a4b0:	f107 0320 	add.w	r3, r7, #32
 801a4b4:	4910      	ldr	r1, [pc, #64]	; (801a4f8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f7f0 f877 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a4bc:	f107 0318 	add.w	r3, r7, #24
 801a4c0:	f107 0220 	add.w	r2, r7, #32
 801a4c4:	6839      	ldr	r1, [r7, #0]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	47a0      	blx	r4
 801a4ca:	f107 0318 	add.w	r3, r7, #24
 801a4ce:	4619      	mov	r1, r3
 801a4d0:	4628      	mov	r0, r5
 801a4d2:	f7f0 fc9f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a4d6:	f107 0318 	add.w	r3, r7, #24
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7f0 fc1d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a4e0:	f107 0320 	add.w	r3, r7, #32
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	f7f0 fc18 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801a4ea:	bf00      	nop
 801a4ec:	3728      	adds	r7, #40	; 0x28
 801a4ee:	46bd      	mov	sp, r7
 801a4f0:	bdb0      	pop	{r4, r5, r7, pc}
 801a4f2:	bf00      	nop
 801a4f4:	0802356c 	.word	0x0802356c
 801a4f8:	08023598 	.word	0x08023598
 801a4fc:	0802359c 	.word	0x0802359c

0801a500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801a500:	b590      	push	{r4, r7, lr}
 801a502:	b08f      	sub	sp, #60	; 0x3c
 801a504:	af00      	add	r7, sp, #0
 801a506:	60f8      	str	r0, [r7, #12]
 801a508:	60b9      	str	r1, [r7, #8]
 801a50a:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801a50c:	f107 0310 	add.w	r3, r7, #16
 801a510:	4618      	mov	r0, r3
 801a512:	f7ff f877 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801a516:	f107 0310 	add.w	r3, r7, #16
 801a51a:	687a      	ldr	r2, [r7, #4]
 801a51c:	68b9      	ldr	r1, [r7, #8]
 801a51e:	4618      	mov	r0, r3
 801a520:	f7ff fa16 	bl	8019950 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	332c      	adds	r3, #44	; 0x2c
 801a528:	4937      	ldr	r1, [pc, #220]	; (801a608 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7f0 fc84 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	332c      	adds	r3, #44	; 0x2c
 801a534:	68b9      	ldr	r1, [r7, #8]
 801a536:	4618      	mov	r0, r3
 801a538:	f7f0 fc6c 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	332c      	adds	r3, #44	; 0x2c
 801a540:	4932      	ldr	r1, [pc, #200]	; (801a60c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801a542:	4618      	mov	r0, r3
 801a544:	f7f0 fc78 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a54e:	f107 0320 	add.w	r3, r7, #32
 801a552:	492f      	ldr	r1, [pc, #188]	; (801a610 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801a554:	4618      	mov	r0, r3
 801a556:	f7f0 f828 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a55a:	f107 0318 	add.w	r3, r7, #24
 801a55e:	f107 0220 	add.w	r2, r7, #32
 801a562:	f107 0110 	add.w	r1, r7, #16
 801a566:	4618      	mov	r0, r3
 801a568:	f7ff fd4a 	bl	801a000 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801a56c:	f107 0318 	add.w	r3, r7, #24
 801a570:	4619      	mov	r1, r3
 801a572:	4620      	mov	r0, r4
 801a574:	f7f0 fc4e 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a578:	f107 0318 	add.w	r3, r7, #24
 801a57c:	4618      	mov	r0, r3
 801a57e:	f7f0 fbcc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a582:	f107 0320 	add.w	r3, r7, #32
 801a586:	4618      	mov	r0, r3
 801a588:	f7f0 fbc7 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	332c      	adds	r3, #44	; 0x2c
 801a590:	4920      	ldr	r1, [pc, #128]	; (801a614 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801a592:	4618      	mov	r0, r3
 801a594:	f7f0 fc50 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	332c      	adds	r3, #44	; 0x2c
 801a59c:	68b9      	ldr	r1, [r7, #8]
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7f0 fc38 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	332c      	adds	r3, #44	; 0x2c
 801a5a8:	4918      	ldr	r1, [pc, #96]	; (801a60c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f7f0 fc44 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a5b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a5ba:	4915      	ldr	r1, [pc, #84]	; (801a610 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7ef fff4 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a5c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a5ca:	f107 0110 	add.w	r1, r7, #16
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7ff fd74 	bl	801a0bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801a5d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5d8:	4619      	mov	r1, r3
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f7f0 fc1a 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a5e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7f0 fb98 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a5ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f7f0 fb93 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801a5f4:	f107 0310 	add.w	r3, r7, #16
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	f7ff f817 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 801a5fe:	bf00      	nop
 801a600:	373c      	adds	r7, #60	; 0x3c
 801a602:	46bd      	mov	sp, r7
 801a604:	bd90      	pop	{r4, r7, pc}
 801a606:	bf00      	nop
 801a608:	080235c4 	.word	0x080235c4
 801a60c:	08023604 	.word	0x08023604
 801a610:	08023598 	.word	0x08023598
 801a614:	08023608 	.word	0x08023608

0801a618 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a618:	b590      	push	{r4, r7, lr}
 801a61a:	b087      	sub	sp, #28
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	60b9      	str	r1, [r7, #8]
 801a622:	607a      	str	r2, [r7, #4]
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	68b9      	ldr	r1, [r7, #8]
 801a628:	4618      	mov	r0, r3
 801a62a:	f7ff fee1 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801a62e:	4a10      	ldr	r2, [pc, #64]	; (801a670 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a63a:	f107 0310 	add.w	r3, r7, #16
 801a63e:	490d      	ldr	r1, [pc, #52]	; (801a674 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801a640:	4618      	mov	r0, r3
 801a642:	f7ef ffb2 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a646:	f107 0310 	add.w	r3, r7, #16
 801a64a:	4619      	mov	r1, r3
 801a64c:	4620      	mov	r0, r4
 801a64e:	f7f0 f818 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a652:	f107 0310 	add.w	r3, r7, #16
 801a656:	4618      	mov	r0, r3
 801a658:	f7f0 fb5f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	6879      	ldr	r1, [r7, #4]
 801a660:	4618      	mov	r0, r3
 801a662:	f7ff fee9 	bl	801a438 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	4618      	mov	r0, r3
 801a66a:	371c      	adds	r7, #28
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd90      	pop	{r4, r7, pc}
 801a670:	08024b80 	.word	0x08024b80
 801a674:	08023644 	.word	0x08023644

0801a678 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a678:	b590      	push	{r4, r7, lr}
 801a67a:	b08d      	sub	sp, #52	; 0x34
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	60f8      	str	r0, [r7, #12]
 801a680:	60b9      	str	r1, [r7, #8]
 801a682:	607a      	str	r2, [r7, #4]
 801a684:	603b      	str	r3, [r7, #0]
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	68b9      	ldr	r1, [r7, #8]
 801a68a:	4618      	mov	r0, r3
 801a68c:	f7ff feb0 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801a690:	4a2f      	ldr	r2, [pc, #188]	; (801a750 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	3310      	adds	r3, #16
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	6879      	ldr	r1, [r7, #4]
 801a6a0:	6838      	ldr	r0, [r7, #0]
 801a6a2:	4798      	blx	r3
 801a6a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d027      	beq.n	801a6fc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ae:	1c5a      	adds	r2, r3, #1
 801a6b0:	f107 0314 	add.w	r3, r7, #20
 801a6b4:	4611      	mov	r1, r2
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	f7f1 fa00 	bl	800babc <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a6c2:	f107 0314 	add.w	r3, r7, #20
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7f0 fafa 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801a6cc:	4602      	mov	r2, r0
 801a6ce:	f107 031c 	add.w	r3, r7, #28
 801a6d2:	4920      	ldr	r1, [pc, #128]	; (801a754 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	f7f1 f827 	bl	800b728 <_Z16StringFromFormatPKcz>
 801a6da:	f107 031c 	add.w	r3, r7, #28
 801a6de:	4619      	mov	r1, r3
 801a6e0:	4620      	mov	r0, r4
 801a6e2:	f7ef ffce 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a6e6:	f107 031c 	add.w	r3, r7, #28
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	f7f0 fb15 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801a6f0:	f107 0314 	add.w	r3, r7, #20
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	f7f0 fb10 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a6fa:	e013      	b.n	801a724 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a706:	4914      	ldr	r1, [pc, #80]	; (801a758 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a708:	4618      	mov	r0, r3
 801a70a:	f7ef ff4e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a70e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a712:	4619      	mov	r1, r3
 801a714:	4620      	mov	r0, r4
 801a716:	f7ef ffb4 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a71a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a71e:	4618      	mov	r0, r3
 801a720:	f7f0 fafb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	332c      	adds	r3, #44	; 0x2c
 801a728:	6879      	ldr	r1, [r7, #4]
 801a72a:	4618      	mov	r0, r3
 801a72c:	f7f0 fb72 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	332c      	adds	r3, #44	; 0x2c
 801a734:	4909      	ldr	r1, [pc, #36]	; (801a75c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a736:	4618      	mov	r0, r3
 801a738:	f7f0 fb7e 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	6839      	ldr	r1, [r7, #0]
 801a740:	4618      	mov	r0, r3
 801a742:	f7ff fe79 	bl	801a438 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	4618      	mov	r0, r3
 801a74a:	3734      	adds	r7, #52	; 0x34
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd90      	pop	{r4, r7, pc}
 801a750:	08025520 	.word	0x08025520
 801a754:	08023674 	.word	0x08023674
 801a758:	080236b0 	.word	0x080236b0
 801a75c:	08023604 	.word	0x08023604

0801a760 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a760:	b590      	push	{r4, r7, lr}
 801a762:	b089      	sub	sp, #36	; 0x24
 801a764:	af00      	add	r7, sp, #0
 801a766:	60f8      	str	r0, [r7, #12]
 801a768:	60b9      	str	r1, [r7, #8]
 801a76a:	607a      	str	r2, [r7, #4]
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	68b9      	ldr	r1, [r7, #8]
 801a770:	4618      	mov	r0, r3
 801a772:	f7ff fe3d 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801a776:	4a1f      	ldr	r2, [pc, #124]	; (801a7f4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801a77c:	f107 0310 	add.w	r3, r7, #16
 801a780:	4618      	mov	r0, r3
 801a782:	f7fe ff3f 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801a786:	f107 0310 	add.w	r3, r7, #16
 801a78a:	6879      	ldr	r1, [r7, #4]
 801a78c:	4618      	mov	r0, r3
 801a78e:	f7ff f909 	bl	80199a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801a792:	f107 0310 	add.w	r3, r7, #16
 801a796:	4618      	mov	r0, r3
 801a798:	f7ff f94c 	bl	8019a34 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a7a2:	f107 0318 	add.w	r3, r7, #24
 801a7a6:	4914      	ldr	r1, [pc, #80]	; (801a7f8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801a7a8:	4618      	mov	r0, r3
 801a7aa:	f7ef fefe 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a7ae:	f107 0318 	add.w	r3, r7, #24
 801a7b2:	4619      	mov	r1, r3
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	f7ef ff64 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a7ba:	f107 0318 	add.w	r3, r7, #24
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7f0 faab 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	332c      	adds	r3, #44	; 0x2c
 801a7c8:	490c      	ldr	r1, [pc, #48]	; (801a7fc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7f0 fb34 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	f107 0210 	add.w	r2, r7, #16
 801a7d6:	4611      	mov	r1, r2
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f7ff fe2d 	bl	801a438 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801a7de:	f107 0310 	add.w	r3, r7, #16
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7fe ff22 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	3724      	adds	r7, #36	; 0x24
 801a7ee:	46bd      	mov	sp, r7
 801a7f0:	bd90      	pop	{r4, r7, pc}
 801a7f2:	bf00      	nop
 801a7f4:	08024b54 	.word	0x08024b54
 801a7f8:	080236dc 	.word	0x080236dc
 801a7fc:	08023604 	.word	0x08023604

0801a800 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801a800:	b590      	push	{r4, r7, lr}
 801a802:	b099      	sub	sp, #100	; 0x64
 801a804:	af00      	add	r7, sp, #0
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	607a      	str	r2, [r7, #4]
 801a80c:	603b      	str	r3, [r7, #0]
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	68b9      	ldr	r1, [r7, #8]
 801a812:	4618      	mov	r0, r3
 801a814:	f7ff fdec 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801a818:	4a9e      	ldr	r2, [pc, #632]	; (801aa94 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a81e:	f107 0310 	add.w	r3, r7, #16
 801a822:	4618      	mov	r0, r3
 801a824:	f7fe feee 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801a828:	f107 0310 	add.w	r3, r7, #16
 801a82c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a82e:	6879      	ldr	r1, [r7, #4]
 801a830:	4618      	mov	r0, r3
 801a832:	f7ff f88d 	bl	8019950 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801a836:	683b      	ldr	r3, [r7, #0]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	335c      	adds	r3, #92	; 0x5c
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	f107 0218 	add.w	r2, r7, #24
 801a842:	6839      	ldr	r1, [r7, #0]
 801a844:	4610      	mov	r0, r2
 801a846:	4798      	blx	r3
 801a848:	f107 0218 	add.w	r2, r7, #24
 801a84c:	f107 0310 	add.w	r3, r7, #16
 801a850:	4611      	mov	r1, r2
 801a852:	4618      	mov	r0, r3
 801a854:	f7ff f948 	bl	8019ae8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801a858:	f107 0318 	add.w	r3, r7, #24
 801a85c:	4618      	mov	r0, r3
 801a85e:	f7f0 fa5c 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801a862:	f107 0310 	add.w	r3, r7, #16
 801a866:	4618      	mov	r0, r3
 801a868:	f7fe ff4d 	bl	8019706 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a86c:	4603      	mov	r3, r0
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d037      	beq.n	801a8e2 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a878:	f107 0320 	add.w	r3, r7, #32
 801a87c:	4986      	ldr	r1, [pc, #536]	; (801aa98 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801a87e:	4618      	mov	r0, r3
 801a880:	f7ef fe93 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a884:	f107 0320 	add.w	r3, r7, #32
 801a888:	4619      	mov	r1, r3
 801a88a:	4620      	mov	r0, r4
 801a88c:	f7ef fef9 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a890:	f107 0320 	add.w	r3, r7, #32
 801a894:	4618      	mov	r0, r3
 801a896:	f7f0 fa40 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	332c      	adds	r3, #44	; 0x2c
 801a89e:	6879      	ldr	r1, [r7, #4]
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f7f0 fab7 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	332c      	adds	r3, #44	; 0x2c
 801a8aa:	497c      	ldr	r1, [pc, #496]	; (801aa9c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f7f0 fac3 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	335c      	adds	r3, #92	; 0x5c
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a8c4:	6839      	ldr	r1, [r7, #0]
 801a8c6:	4610      	mov	r0, r2
 801a8c8:	4798      	blx	r3
 801a8ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	4620      	mov	r0, r4
 801a8d2:	f7f0 fa9f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a8d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a8da:	4618      	mov	r0, r3
 801a8dc:	f7f0 fa1d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801a8e0:	e056      	b.n	801a990 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a8e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8ec:	496c      	ldr	r1, [pc, #432]	; (801aaa0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f7ef fe5b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801a8f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8f8:	4619      	mov	r1, r3
 801a8fa:	4620      	mov	r0, r4
 801a8fc:	f7ef fec1 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801a900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a904:	4618      	mov	r0, r3
 801a906:	f7f0 fa08 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a910:	683b      	ldr	r3, [r7, #0]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	335c      	adds	r3, #92	; 0x5c
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a91c:	6839      	ldr	r1, [r7, #0]
 801a91e:	4610      	mov	r0, r2
 801a920:	4798      	blx	r3
 801a922:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a926:	4619      	mov	r1, r3
 801a928:	4620      	mov	r0, r4
 801a92a:	f7f0 fa73 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a92e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a932:	4618      	mov	r0, r3
 801a934:	f7f0 f9f1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	332c      	adds	r3, #44	; 0x2c
 801a93c:	4959      	ldr	r1, [pc, #356]	; (801aaa4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801a93e:	4618      	mov	r0, r3
 801a940:	f7f0 fa7a 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	332c      	adds	r3, #44	; 0x2c
 801a948:	6879      	ldr	r1, [r7, #4]
 801a94a:	4618      	mov	r0, r3
 801a94c:	f7f0 fa62 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	332c      	adds	r3, #44	; 0x2c
 801a954:	4954      	ldr	r1, [pc, #336]	; (801aaa8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801a956:	4618      	mov	r0, r3
 801a958:	f7f0 fa6e 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a962:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a966:	6839      	ldr	r1, [r7, #0]
 801a968:	4618      	mov	r0, r3
 801a96a:	f7fd faa3 	bl	8017eb4 <_Z10StringFromRK14MockNamedValue>
 801a96e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a972:	4619      	mov	r1, r3
 801a974:	4620      	mov	r0, r4
 801a976:	f7f0 fa4d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a97a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a97e:	4618      	mov	r0, r3
 801a980:	f7f0 f9cb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801a984:	68fb      	ldr	r3, [r7, #12]
 801a986:	332c      	adds	r3, #44	; 0x2c
 801a988:	4948      	ldr	r1, [pc, #288]	; (801aaac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a98a:	4618      	mov	r0, r3
 801a98c:	f7f0 fa54 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	332c      	adds	r3, #44	; 0x2c
 801a994:	4946      	ldr	r1, [pc, #280]	; (801aab0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a996:	4618      	mov	r0, r3
 801a998:	f7f0 fa4e 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a9a0:	6879      	ldr	r1, [r7, #4]
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f7ff fdac 	bl	801a500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	332c      	adds	r3, #44	; 0x2c
 801a9ac:	4941      	ldr	r1, [pc, #260]	; (801aab4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	f7f0 fa42 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	332c      	adds	r3, #44	; 0x2c
 801a9b8:	6879      	ldr	r1, [r7, #4]
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7f0 fa2a 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	332c      	adds	r3, #44	; 0x2c
 801a9c4:	493a      	ldr	r1, [pc, #232]	; (801aab0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f7f0 fa36 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	332c      	adds	r3, #44	; 0x2c
 801a9d0:	4939      	ldr	r1, [pc, #228]	; (801aab8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f7f0 fa30 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a9de:	683b      	ldr	r3, [r7, #0]
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	3360      	adds	r3, #96	; 0x60
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a9ea:	6839      	ldr	r1, [r7, #0]
 801a9ec:	4610      	mov	r0, r2
 801a9ee:	4798      	blx	r3
 801a9f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a9f4:	4619      	mov	r1, r3
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7f0 fa0c 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801a9fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aa00:	4618      	mov	r0, r3
 801aa02:	f7f0 f98a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	332c      	adds	r3, #44	; 0x2c
 801aa0a:	492c      	ldr	r1, [pc, #176]	; (801aabc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f7f0 fa13 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aa18:	683b      	ldr	r3, [r7, #0]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	335c      	adds	r3, #92	; 0x5c
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801aa24:	6839      	ldr	r1, [r7, #0]
 801aa26:	4610      	mov	r0, r2
 801aa28:	4798      	blx	r3
 801aa2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801aa2e:	4619      	mov	r1, r3
 801aa30:	4620      	mov	r0, r4
 801aa32:	f7f0 f9ef 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801aa36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	f7f0 f96d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	332c      	adds	r3, #44	; 0x2c
 801aa44:	491e      	ldr	r1, [pc, #120]	; (801aac0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801aa46:	4618      	mov	r0, r3
 801aa48:	f7f0 f9f6 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aa52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801aa56:	6839      	ldr	r1, [r7, #0]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7fd fa2b 	bl	8017eb4 <_Z10StringFromRK14MockNamedValue>
 801aa5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801aa62:	4619      	mov	r1, r3
 801aa64:	4620      	mov	r0, r4
 801aa66:	f7f0 f9d5 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801aa6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f7f0 f953 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	332c      	adds	r3, #44	; 0x2c
 801aa78:	490c      	ldr	r1, [pc, #48]	; (801aaac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	f7f0 f9dc 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801aa80:	f107 0310 	add.w	r3, r7, #16
 801aa84:	4618      	mov	r0, r3
 801aa86:	f7fe fdd1 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	3764      	adds	r7, #100	; 0x64
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd90      	pop	{r4, r7, pc}
 801aa94:	080254f4 	.word	0x080254f4
 801aa98:	08023700 	.word	0x08023700
 801aa9c:	08023738 	.word	0x08023738
 801aaa0:	0802373c 	.word	0x0802373c
 801aaa4:	08023774 	.word	0x08023774
 801aaa8:	08023784 	.word	0x08023784
 801aaac:	0802378c 	.word	0x0802378c
 801aab0:	08023604 	.word	0x08023604
 801aab4:	08023790 	.word	0x08023790
 801aab8:	08023598 	.word	0x08023598
 801aabc:	080237c4 	.word	0x080237c4
 801aac0:	080237c8 	.word	0x080237c8

0801aac4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801aac4:	b590      	push	{r4, r7, lr}
 801aac6:	b097      	sub	sp, #92	; 0x5c
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	60f8      	str	r0, [r7, #12]
 801aacc:	60b9      	str	r1, [r7, #8]
 801aace:	607a      	str	r2, [r7, #4]
 801aad0:	603b      	str	r3, [r7, #0]
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	68b9      	ldr	r1, [r7, #8]
 801aad6:	4618      	mov	r0, r3
 801aad8:	f7ff fc8a 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801aadc:	4a90      	ldr	r2, [pc, #576]	; (801ad20 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801aae2:	f107 0310 	add.w	r3, r7, #16
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7fe fd8c 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801aaec:	f107 0310 	add.w	r3, r7, #16
 801aaf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801aaf2:	6879      	ldr	r1, [r7, #4]
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	f7fe ff2b 	bl	8019950 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801aafa:	683b      	ldr	r3, [r7, #0]
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	335c      	adds	r3, #92	; 0x5c
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	f107 0218 	add.w	r2, r7, #24
 801ab06:	6839      	ldr	r1, [r7, #0]
 801ab08:	4610      	mov	r0, r2
 801ab0a:	4798      	blx	r3
 801ab0c:	f107 0218 	add.w	r2, r7, #24
 801ab10:	f107 0310 	add.w	r3, r7, #16
 801ab14:	4611      	mov	r1, r2
 801ab16:	4618      	mov	r0, r3
 801ab18:	f7ff f812 	bl	8019b40 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801ab1c:	f107 0318 	add.w	r3, r7, #24
 801ab20:	4618      	mov	r0, r3
 801ab22:	f7f0 f8fa 	bl	800ad1a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ab26:	f107 0310 	add.w	r3, r7, #16
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f7fe fdeb 	bl	8019706 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ab30:	4603      	mov	r3, r0
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d037      	beq.n	801aba6 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ab3c:	f107 0320 	add.w	r3, r7, #32
 801ab40:	4978      	ldr	r1, [pc, #480]	; (801ad24 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7ef fd31 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801ab48:	f107 0320 	add.w	r3, r7, #32
 801ab4c:	4619      	mov	r1, r3
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f7ef fd97 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801ab54:	f107 0320 	add.w	r3, r7, #32
 801ab58:	4618      	mov	r0, r3
 801ab5a:	f7f0 f8de 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	332c      	adds	r3, #44	; 0x2c
 801ab62:	6879      	ldr	r1, [r7, #4]
 801ab64:	4618      	mov	r0, r3
 801ab66:	f7f0 f955 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	332c      	adds	r3, #44	; 0x2c
 801ab6e:	496e      	ldr	r1, [pc, #440]	; (801ad28 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801ab70:	4618      	mov	r0, r3
 801ab72:	f7f0 f961 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ab7c:	683b      	ldr	r3, [r7, #0]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	335c      	adds	r3, #92	; 0x5c
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ab88:	6839      	ldr	r1, [r7, #0]
 801ab8a:	4610      	mov	r0, r2
 801ab8c:	4798      	blx	r3
 801ab8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab92:	4619      	mov	r1, r3
 801ab94:	4620      	mov	r0, r4
 801ab96:	f7f0 f93d 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801ab9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f7f0 f8bb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801aba4:	e059      	b.n	801ac5a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801abac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801abb0:	495e      	ldr	r1, [pc, #376]	; (801ad2c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801abb2:	4618      	mov	r0, r3
 801abb4:	f7ef fcf9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801abb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801abbc:	4619      	mov	r1, r3
 801abbe:	4620      	mov	r0, r4
 801abc0:	f7ef fd5f 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801abc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801abc8:	4618      	mov	r0, r3
 801abca:	f7f0 f8a6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	3360      	adds	r3, #96	; 0x60
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801abe0:	6839      	ldr	r1, [r7, #0]
 801abe2:	4610      	mov	r0, r2
 801abe4:	4798      	blx	r3
 801abe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801abea:	4619      	mov	r1, r3
 801abec:	4620      	mov	r0, r4
 801abee:	f7f0 f911 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801abf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801abf6:	4618      	mov	r0, r3
 801abf8:	f7f0 f88f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	332c      	adds	r3, #44	; 0x2c
 801ac00:	494b      	ldr	r1, [pc, #300]	; (801ad30 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801ac02:	4618      	mov	r0, r3
 801ac04:	f7f0 f918 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	335c      	adds	r3, #92	; 0x5c
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801ac1a:	6839      	ldr	r1, [r7, #0]
 801ac1c:	4610      	mov	r0, r2
 801ac1e:	4798      	blx	r3
 801ac20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac24:	4619      	mov	r1, r3
 801ac26:	4620      	mov	r0, r4
 801ac28:	f7f0 f8f4 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801ac2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac30:	4618      	mov	r0, r3
 801ac32:	f7f0 f872 	bl	800ad1a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	332c      	adds	r3, #44	; 0x2c
 801ac3a:	493e      	ldr	r1, [pc, #248]	; (801ad34 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7f0 f8fb 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	332c      	adds	r3, #44	; 0x2c
 801ac46:	6879      	ldr	r1, [r7, #4]
 801ac48:	4618      	mov	r0, r3
 801ac4a:	f7f0 f8e3 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	332c      	adds	r3, #44	; 0x2c
 801ac52:	4939      	ldr	r1, [pc, #228]	; (801ad38 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801ac54:	4618      	mov	r0, r3
 801ac56:	f7f0 f8ef 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	332c      	adds	r3, #44	; 0x2c
 801ac5e:	4937      	ldr	r1, [pc, #220]	; (801ad3c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801ac60:	4618      	mov	r0, r3
 801ac62:	f7f0 f8e9 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ac6a:	6879      	ldr	r1, [r7, #4]
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	f7ff fc47 	bl	801a500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	332c      	adds	r3, #44	; 0x2c
 801ac76:	4932      	ldr	r1, [pc, #200]	; (801ad40 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f7f0 f8dd 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	332c      	adds	r3, #44	; 0x2c
 801ac82:	6879      	ldr	r1, [r7, #4]
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7f0 f8c5 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	332c      	adds	r3, #44	; 0x2c
 801ac8e:	492b      	ldr	r1, [pc, #172]	; (801ad3c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801ac90:	4618      	mov	r0, r3
 801ac92:	f7f0 f8d1 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	332c      	adds	r3, #44	; 0x2c
 801ac9a:	492a      	ldr	r1, [pc, #168]	; (801ad44 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f7f0 f8cb 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	3360      	adds	r3, #96	; 0x60
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801acb4:	6839      	ldr	r1, [r7, #0]
 801acb6:	4610      	mov	r0, r2
 801acb8:	4798      	blx	r3
 801acba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801acbe:	4619      	mov	r1, r3
 801acc0:	4620      	mov	r0, r4
 801acc2:	f7f0 f8a7 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801acc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801acca:	4618      	mov	r0, r3
 801accc:	f7f0 f825 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	332c      	adds	r3, #44	; 0x2c
 801acd4:	491c      	ldr	r1, [pc, #112]	; (801ad48 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801acd6:	4618      	mov	r0, r3
 801acd8:	f7f0 f8ae 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	335c      	adds	r3, #92	; 0x5c
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801acee:	6839      	ldr	r1, [r7, #0]
 801acf0:	4610      	mov	r0, r2
 801acf2:	4798      	blx	r3
 801acf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801acf8:	4619      	mov	r1, r3
 801acfa:	4620      	mov	r0, r4
 801acfc:	f7f0 f88a 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801ad00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ad04:	4618      	mov	r0, r3
 801ad06:	f7f0 f808 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ad0a:	f107 0310 	add.w	r3, r7, #16
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f7fe fc8c 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	4618      	mov	r0, r3
 801ad18:	375c      	adds	r7, #92	; 0x5c
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd90      	pop	{r4, r7, pc}
 801ad1e:	bf00      	nop
 801ad20:	080254c8 	.word	0x080254c8
 801ad24:	080237cc 	.word	0x080237cc
 801ad28:	08023738 	.word	0x08023738
 801ad2c:	0802380c 	.word	0x0802380c
 801ad30:	08023838 	.word	0x08023838
 801ad34:	08023774 	.word	0x08023774
 801ad38:	08023850 	.word	0x08023850
 801ad3c:	08023604 	.word	0x08023604
 801ad40:	08023854 	.word	0x08023854
 801ad44:	08023598 	.word	0x08023598
 801ad48:	080237c4 	.word	0x080237c4

0801ad4c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ad4c:	b590      	push	{r4, r7, lr}
 801ad4e:	b08b      	sub	sp, #44	; 0x2c
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	60f8      	str	r0, [r7, #12]
 801ad54:	60b9      	str	r1, [r7, #8]
 801ad56:	607a      	str	r2, [r7, #4]
 801ad58:	603b      	str	r3, [r7, #0]
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	68b9      	ldr	r1, [r7, #8]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7ff fb46 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801ad64:	4a30      	ldr	r2, [pc, #192]	; (801ae28 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801ad6a:	f107 0310 	add.w	r3, r7, #16
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7fe fc48 	bl	8019604 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801ad74:	f107 0310 	add.w	r3, r7, #16
 801ad78:	683a      	ldr	r2, [r7, #0]
 801ad7a:	6879      	ldr	r1, [r7, #4]
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f7fe fde7 	bl	8019950 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ad88:	f107 0318 	add.w	r3, r7, #24
 801ad8c:	4927      	ldr	r1, [pc, #156]	; (801ae2c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7ef fc0b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801ad94:	f107 0318 	add.w	r3, r7, #24
 801ad98:	4619      	mov	r1, r3
 801ad9a:	4620      	mov	r0, r4
 801ad9c:	f7ef fc71 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801ada0:	f107 0318 	add.w	r3, r7, #24
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7ef ffb8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	332c      	adds	r3, #44	; 0x2c
 801adae:	6879      	ldr	r1, [r7, #4]
 801adb0:	4618      	mov	r0, r3
 801adb2:	f7f0 f82f 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	332c      	adds	r3, #44	; 0x2c
 801adba:	491d      	ldr	r1, [pc, #116]	; (801ae30 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801adbc:	4618      	mov	r0, r3
 801adbe:	f7f0 f83b 	bl	800ae38 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	683a      	ldr	r2, [r7, #0]
 801adc6:	6879      	ldr	r1, [r7, #4]
 801adc8:	4618      	mov	r0, r3
 801adca:	f7ff fb99 	bl	801a500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	332c      	adds	r3, #44	; 0x2c
 801add2:	4918      	ldr	r1, [pc, #96]	; (801ae34 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801add4:	4618      	mov	r0, r3
 801add6:	f7f0 f82f 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	332c      	adds	r3, #44	; 0x2c
 801adde:	4916      	ldr	r1, [pc, #88]	; (801ae38 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801ade0:	4618      	mov	r0, r3
 801ade2:	f7f0 f829 	bl	800ae38 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801adec:	f107 0320 	add.w	r3, r7, #32
 801adf0:	f107 0210 	add.w	r2, r7, #16
 801adf4:	4611      	mov	r1, r2
 801adf6:	4618      	mov	r0, r3
 801adf8:	f7ff f9bc 	bl	801a174 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801adfc:	f107 0320 	add.w	r3, r7, #32
 801ae00:	4619      	mov	r1, r3
 801ae02:	4620      	mov	r0, r4
 801ae04:	f7f0 f806 	bl	800ae14 <_ZN12SimpleStringpLERKS_>
 801ae08:	f107 0320 	add.w	r3, r7, #32
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7ef ff84 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801ae12:	f107 0310 	add.w	r3, r7, #16
 801ae16:	4618      	mov	r0, r3
 801ae18:	f7fe fc08 	bl	801962c <_ZN21MockExpectedCallsListD1Ev>
}
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	4618      	mov	r0, r3
 801ae20:	372c      	adds	r7, #44	; 0x2c
 801ae22:	46bd      	mov	sp, r7
 801ae24:	bd90      	pop	{r4, r7, pc}
 801ae26:	bf00      	nop
 801ae28:	0802549c 	.word	0x0802549c
 801ae2c:	08023890 	.word	0x08023890
 801ae30:	080238c0 	.word	0x080238c0
 801ae34:	080238d4 	.word	0x080238d4
 801ae38:	08023598 	.word	0x08023598

0801ae3c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801ae3c:	b590      	push	{r4, r7, lr}
 801ae3e:	b087      	sub	sp, #28
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	68b9      	ldr	r1, [r7, #8]
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f7ff facf 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801ae52:	4a10      	ldr	r2, [pc, #64]	; (801ae94 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ae5e:	6878      	ldr	r0, [r7, #4]
 801ae60:	f7ef ff2e 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801ae64:	4602      	mov	r2, r0
 801ae66:	f107 0310 	add.w	r3, r7, #16
 801ae6a:	490b      	ldr	r1, [pc, #44]	; (801ae98 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f7f0 fc5b 	bl	800b728 <_Z16StringFromFormatPKcz>
 801ae72:	f107 0310 	add.w	r3, r7, #16
 801ae76:	4619      	mov	r1, r3
 801ae78:	4620      	mov	r0, r4
 801ae7a:	f7ef fc02 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801ae7e:	f107 0310 	add.w	r3, r7, #16
 801ae82:	4618      	mov	r0, r3
 801ae84:	f7ef ff49 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	371c      	adds	r7, #28
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd90      	pop	{r4, r7, pc}
 801ae92:	bf00      	nop
 801ae94:	08025470 	.word	0x08025470
 801ae98:	08023900 	.word	0x08023900

0801ae9c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801ae9c:	b590      	push	{r4, r7, lr}
 801ae9e:	b087      	sub	sp, #28
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	60f8      	str	r0, [r7, #12]
 801aea4:	60b9      	str	r1, [r7, #8]
 801aea6:	607a      	str	r2, [r7, #4]
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	68b9      	ldr	r1, [r7, #8]
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7ff fa9f 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801aeb2:	4a10      	ldr	r2, [pc, #64]	; (801aef4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aebe:	6878      	ldr	r0, [r7, #4]
 801aec0:	f7ef fefe 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801aec4:	4602      	mov	r2, r0
 801aec6:	f107 0310 	add.w	r3, r7, #16
 801aeca:	490b      	ldr	r1, [pc, #44]	; (801aef8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801aecc:	4618      	mov	r0, r3
 801aece:	f7f0 fc2b 	bl	800b728 <_Z16StringFromFormatPKcz>
 801aed2:	f107 0310 	add.w	r3, r7, #16
 801aed6:	4619      	mov	r1, r3
 801aed8:	4620      	mov	r0, r4
 801aeda:	f7ef fbd2 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801aede:	f107 0310 	add.w	r3, r7, #16
 801aee2:	4618      	mov	r0, r3
 801aee4:	f7ef ff19 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	4618      	mov	r0, r3
 801aeec:	371c      	adds	r7, #28
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd90      	pop	{r4, r7, pc}
 801aef2:	bf00      	nop
 801aef4:	08025444 	.word	0x08025444
 801aef8:	08023958 	.word	0x08023958

0801aefc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801aefc:	b590      	push	{r4, r7, lr}
 801aefe:	b087      	sub	sp, #28
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
 801af08:	603b      	str	r3, [r7, #0]
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	68b9      	ldr	r1, [r7, #8]
 801af0e:	4618      	mov	r0, r3
 801af10:	f7ff fa6e 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801af14:	4a12      	ldr	r2, [pc, #72]	; (801af60 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	f7ef fecd 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801af26:	4602      	mov	r2, r0
 801af28:	f107 0010 	add.w	r0, r7, #16
 801af2c:	683b      	ldr	r3, [r7, #0]
 801af2e:	490d      	ldr	r1, [pc, #52]	; (801af64 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801af30:	f7f0 fbfa 	bl	800b728 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801af34:	f107 0310 	add.w	r3, r7, #16
 801af38:	4619      	mov	r1, r3
 801af3a:	4620      	mov	r0, r4
 801af3c:	f7ef fba1 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801af40:	f107 0310 	add.w	r3, r7, #16
 801af44:	4618      	mov	r0, r3
 801af46:	f7ef fee8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801af4e:	6879      	ldr	r1, [r7, #4]
 801af50:	4618      	mov	r0, r3
 801af52:	f7ff fad5 	bl	801a500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	4618      	mov	r0, r3
 801af5a:	371c      	adds	r7, #28
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd90      	pop	{r4, r7, pc}
 801af60:	08025418 	.word	0x08025418
 801af64:	080239a8 	.word	0x080239a8

0801af68 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801af68:	b590      	push	{r4, r7, lr}
 801af6a:	b087      	sub	sp, #28
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	60f8      	str	r0, [r7, #12]
 801af70:	60b9      	str	r1, [r7, #8]
 801af72:	607a      	str	r2, [r7, #4]
 801af74:	603b      	str	r3, [r7, #0]
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	68b9      	ldr	r1, [r7, #8]
 801af7a:	4618      	mov	r0, r3
 801af7c:	f7ff fa38 	bl	801a3f0 <_ZN11MockFailureC1EP10UtestShell>
 801af80:	4a12      	ldr	r2, [pc, #72]	; (801afcc <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801af8c:	6878      	ldr	r0, [r7, #4]
 801af8e:	f7ef fe97 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801af92:	4602      	mov	r2, r0
 801af94:	f107 0310 	add.w	r3, r7, #16
 801af98:	490d      	ldr	r1, [pc, #52]	; (801afd0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801af9a:	4618      	mov	r0, r3
 801af9c:	f7f0 fbc4 	bl	800b728 <_Z16StringFromFormatPKcz>
 801afa0:	f107 0310 	add.w	r3, r7, #16
 801afa4:	4619      	mov	r1, r3
 801afa6:	4620      	mov	r0, r4
 801afa8:	f7ef fb6b 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801afac:	f107 0310 	add.w	r3, r7, #16
 801afb0:	4618      	mov	r0, r3
 801afb2:	f7ef feb2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	683a      	ldr	r2, [r7, #0]
 801afba:	6879      	ldr	r1, [r7, #4]
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7ff fa9f 	bl	801a500 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	4618      	mov	r0, r3
 801afc6:	371c      	adds	r7, #28
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd90      	pop	{r4, r7, pc}
 801afcc:	080253ec 	.word	0x080253ec
 801afd0:	08023a0c 	.word	0x08023a0c

0801afd4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801afd4:	b480      	push	{r7}
 801afd6:	b083      	sub	sp, #12
 801afd8:	af00      	add	r7, sp, #0
 801afda:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801afdc:	4a04      	ldr	r2, [pc, #16]	; (801aff0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	6013      	str	r3, [r2, #0]
}
 801afe2:	bf00      	nop
 801afe4:	370c      	adds	r7, #12
 801afe6:	46bd      	mov	sp, r7
 801afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afec:	4770      	bx	lr
 801afee:	bf00      	nop
 801aff0:	20000d1c 	.word	0x20000d1c

0801aff4 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b082      	sub	sp, #8
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
 801affc:	6039      	str	r1, [r7, #0]
 801affe:	4a10      	ldr	r2, [pc, #64]	; (801b040 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	601a      	str	r2, [r3, #0]
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	3304      	adds	r3, #4
 801b008:	6839      	ldr	r1, [r7, #0]
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7ef fb21 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	330c      	adds	r3, #12
 801b014:	490b      	ldr	r1, [pc, #44]	; (801b044 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801b016:	4618      	mov	r0, r3
 801b018:	f7ef fac7 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2200      	movs	r2, #0
 801b020:	629a      	str	r2, [r3, #40]	; 0x28
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2200      	movs	r2, #0
 801b026:	62da      	str	r2, [r3, #44]	; 0x2c
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	2200      	movs	r2, #0
 801b02c:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	2200      	movs	r2, #0
 801b032:	619a      	str	r2, [r3, #24]
}
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	4618      	mov	r0, r3
 801b038:	3708      	adds	r7, #8
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd80      	pop	{r7, pc}
 801b03e:	bf00      	nop
 801b040:	08025c74 	.word	0x08025c74
 801b044:	08023a5c 	.word	0x08023a5c

0801b048 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801b048:	b580      	push	{r7, lr}
 801b04a:	b082      	sub	sp, #8
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
 801b050:	4a08      	ldr	r2, [pc, #32]	; (801b074 <_ZN14MockNamedValueD1Ev+0x2c>)
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	601a      	str	r2, [r3, #0]
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	330c      	adds	r3, #12
 801b05a:	4618      	mov	r0, r3
 801b05c:	f7ef fe5d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	3304      	adds	r3, #4
 801b064:	4618      	mov	r0, r3
 801b066:	f7ef fe58 	bl	800ad1a <_ZN12SimpleStringD1Ev>
{
}
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	4618      	mov	r0, r3
 801b06e:	3708      	adds	r7, #8
 801b070:	46bd      	mov	sp, r7
 801b072:	bd80      	pop	{r7, pc}
 801b074:	08025c74 	.word	0x08025c74

0801b078 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
}
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	f7ff ffe1 	bl	801b048 <_ZN14MockNamedValueD1Ev>
 801b086:	2138      	movs	r1, #56	; 0x38
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	f7ec fedf 	bl	8007e4c <_ZdlPvj>
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	4618      	mov	r0, r3
 801b092:	3708      	adds	r7, #8
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}

0801b098 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801b098:	b590      	push	{r4, r7, lr}
 801b09a:	b085      	sub	sp, #20
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
 801b0a0:	460b      	mov	r3, r1
 801b0a2:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	f103 040c 	add.w	r4, r3, #12
 801b0aa:	f107 0308 	add.w	r3, r7, #8
 801b0ae:	490b      	ldr	r1, [pc, #44]	; (801b0dc <_ZN14MockNamedValue8setValueEb+0x44>)
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7ef fa7a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b0b6:	f107 0308 	add.w	r3, r7, #8
 801b0ba:	4619      	mov	r1, r3
 801b0bc:	4620      	mov	r0, r4
 801b0be:	f7ef fae0 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b0c2:	f107 0308 	add.w	r3, r7, #8
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	f7ef fe27 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	78fa      	ldrb	r2, [r7, #3]
 801b0d0:	761a      	strb	r2, [r3, #24]
}
 801b0d2:	bf00      	nop
 801b0d4:	3714      	adds	r7, #20
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd90      	pop	{r4, r7, pc}
 801b0da:	bf00      	nop
 801b0dc:	08023a60 	.word	0x08023a60

0801b0e0 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801b0e0:	b590      	push	{r4, r7, lr}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	f103 040c 	add.w	r4, r3, #12
 801b0f0:	f107 0308 	add.w	r3, r7, #8
 801b0f4:	490a      	ldr	r1, [pc, #40]	; (801b120 <_ZN14MockNamedValue8setValueEj+0x40>)
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7ef fa57 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b0fc:	f107 0308 	add.w	r3, r7, #8
 801b100:	4619      	mov	r1, r3
 801b102:	4620      	mov	r0, r4
 801b104:	f7ef fabd 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b108:	f107 0308 	add.w	r3, r7, #8
 801b10c:	4618      	mov	r0, r3
 801b10e:	f7ef fe04 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	683a      	ldr	r2, [r7, #0]
 801b116:	619a      	str	r2, [r3, #24]
}
 801b118:	bf00      	nop
 801b11a:	3714      	adds	r7, #20
 801b11c:	46bd      	mov	sp, r7
 801b11e:	bd90      	pop	{r4, r7, pc}
 801b120:	08023a68 	.word	0x08023a68

0801b124 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801b124:	b590      	push	{r4, r7, lr}
 801b126:	b085      	sub	sp, #20
 801b128:	af00      	add	r7, sp, #0
 801b12a:	6078      	str	r0, [r7, #4]
 801b12c:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	f103 040c 	add.w	r4, r3, #12
 801b134:	f107 0308 	add.w	r3, r7, #8
 801b138:	490a      	ldr	r1, [pc, #40]	; (801b164 <_ZN14MockNamedValue8setValueEi+0x40>)
 801b13a:	4618      	mov	r0, r3
 801b13c:	f7ef fa35 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b140:	f107 0308 	add.w	r3, r7, #8
 801b144:	4619      	mov	r1, r3
 801b146:	4620      	mov	r0, r4
 801b148:	f7ef fa9b 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b14c:	f107 0308 	add.w	r3, r7, #8
 801b150:	4618      	mov	r0, r3
 801b152:	f7ef fde2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	683a      	ldr	r2, [r7, #0]
 801b15a:	619a      	str	r2, [r3, #24]
}
 801b15c:	bf00      	nop
 801b15e:	3714      	adds	r7, #20
 801b160:	46bd      	mov	sp, r7
 801b162:	bd90      	pop	{r4, r7, pc}
 801b164:	08023a5c 	.word	0x08023a5c

0801b168 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801b168:	b590      	push	{r4, r7, lr}
 801b16a:	b085      	sub	sp, #20
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
 801b170:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	f103 040c 	add.w	r4, r3, #12
 801b178:	f107 0308 	add.w	r3, r7, #8
 801b17c:	490a      	ldr	r1, [pc, #40]	; (801b1a8 <_ZN14MockNamedValue8setValueEl+0x40>)
 801b17e:	4618      	mov	r0, r3
 801b180:	f7ef fa13 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b184:	f107 0308 	add.w	r3, r7, #8
 801b188:	4619      	mov	r1, r3
 801b18a:	4620      	mov	r0, r4
 801b18c:	f7ef fa79 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b190:	f107 0308 	add.w	r3, r7, #8
 801b194:	4618      	mov	r0, r3
 801b196:	f7ef fdc0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	683a      	ldr	r2, [r7, #0]
 801b19e:	619a      	str	r2, [r3, #24]
}
 801b1a0:	bf00      	nop
 801b1a2:	3714      	adds	r7, #20
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd90      	pop	{r4, r7, pc}
 801b1a8:	08023a78 	.word	0x08023a78

0801b1ac <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801b1ac:	b590      	push	{r4, r7, lr}
 801b1ae:	b085      	sub	sp, #20
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	6078      	str	r0, [r7, #4]
 801b1b4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	f103 040c 	add.w	r4, r3, #12
 801b1bc:	f107 0308 	add.w	r3, r7, #8
 801b1c0:	490a      	ldr	r1, [pc, #40]	; (801b1ec <_ZN14MockNamedValue8setValueEm+0x40>)
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f7ef f9f1 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b1c8:	f107 0308 	add.w	r3, r7, #8
 801b1cc:	4619      	mov	r1, r3
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f7ef fa57 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b1d4:	f107 0308 	add.w	r3, r7, #8
 801b1d8:	4618      	mov	r0, r3
 801b1da:	f7ef fd9e 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	683a      	ldr	r2, [r7, #0]
 801b1e2:	619a      	str	r2, [r3, #24]
}
 801b1e4:	bf00      	nop
 801b1e6:	3714      	adds	r7, #20
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd90      	pop	{r4, r7, pc}
 801b1ec:	08023a84 	.word	0x08023a84

0801b1f0 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801b1f0:	b5b0      	push	{r4, r5, r7, lr}
 801b1f2:	b086      	sub	sp, #24
 801b1f4:	af02      	add	r7, sp, #8
 801b1f6:	60f8      	str	r0, [r7, #12]
 801b1f8:	1d3b      	adds	r3, r7, #4
 801b1fa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801b1fe:	f7f6 fdb7 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b202:	4604      	mov	r4, r0
 801b204:	6823      	ldr	r3, [r4, #0]
 801b206:	3368      	adds	r3, #104	; 0x68
 801b208:	681d      	ldr	r5, [r3, #0]
 801b20a:	f7f6 fdc1 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b20e:	4603      	mov	r3, r0
 801b210:	9300      	str	r3, [sp, #0]
 801b212:	2367      	movs	r3, #103	; 0x67
 801b214:	4a03      	ldr	r2, [pc, #12]	; (801b224 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801b216:	4904      	ldr	r1, [pc, #16]	; (801b228 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801b218:	4620      	mov	r0, r4
 801b21a:	47a8      	blx	r5
}
 801b21c:	bf00      	nop
 801b21e:	3710      	adds	r7, #16
 801b220:	46bd      	mov	sp, r7
 801b222:	bdb0      	pop	{r4, r5, r7, pc}
 801b224:	08023a98 	.word	0x08023a98
 801b228:	08023ab4 	.word	0x08023ab4

0801b22c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801b22c:	b5b0      	push	{r4, r5, r7, lr}
 801b22e:	b086      	sub	sp, #24
 801b230:	af02      	add	r7, sp, #8
 801b232:	60f8      	str	r0, [r7, #12]
 801b234:	1d3b      	adds	r3, r7, #4
 801b236:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801b23a:	f7f6 fd99 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b23e:	4604      	mov	r4, r0
 801b240:	6823      	ldr	r3, [r4, #0]
 801b242:	3368      	adds	r3, #104	; 0x68
 801b244:	681d      	ldr	r5, [r3, #0]
 801b246:	f7f6 fda3 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b24a:	4603      	mov	r3, r0
 801b24c:	9300      	str	r3, [sp, #0]
 801b24e:	236c      	movs	r3, #108	; 0x6c
 801b250:	4a03      	ldr	r2, [pc, #12]	; (801b260 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801b252:	4904      	ldr	r1, [pc, #16]	; (801b264 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801b254:	4620      	mov	r0, r4
 801b256:	47a8      	blx	r5
}
 801b258:	bf00      	nop
 801b25a:	3710      	adds	r7, #16
 801b25c:	46bd      	mov	sp, r7
 801b25e:	bdb0      	pop	{r4, r5, r7, pc}
 801b260:	08023a98 	.word	0x08023a98
 801b264:	08023ad4 	.word	0x08023ad4

0801b268 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b084      	sub	sp, #16
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	60f8      	str	r0, [r7, #12]
 801b270:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	3328      	adds	r3, #40	; 0x28
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801b290 <_ZN14MockNamedValue8setValueEd+0x28>
 801b280:	ed97 0b00 	vldr	d0, [r7]
 801b284:	68f8      	ldr	r0, [r7, #12]
 801b286:	4798      	blx	r3
}
 801b288:	bf00      	nop
 801b28a:	3710      	adds	r7, #16
 801b28c:	46bd      	mov	sp, r7
 801b28e:	bd80      	pop	{r7, pc}
 801b290:	47ae147b 	.word	0x47ae147b
 801b294:	3f747ae1 	.word	0x3f747ae1

0801b298 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801b298:	b590      	push	{r4, r7, lr}
 801b29a:	b089      	sub	sp, #36	; 0x24
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6178      	str	r0, [r7, #20]
 801b2a0:	ed87 0b02 	vstr	d0, [r7, #8]
 801b2a4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801b2a8:	697b      	ldr	r3, [r7, #20]
 801b2aa:	f103 040c 	add.w	r4, r3, #12
 801b2ae:	f107 0318 	add.w	r3, r7, #24
 801b2b2:	490e      	ldr	r1, [pc, #56]	; (801b2ec <_ZN14MockNamedValue8setValueEdd+0x54>)
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	f7ef f978 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b2ba:	f107 0318 	add.w	r3, r7, #24
 801b2be:	4619      	mov	r1, r3
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f7ef f9de 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b2c6:	f107 0318 	add.w	r3, r7, #24
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7ef fd25 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801b2d0:	6979      	ldr	r1, [r7, #20]
 801b2d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b2d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801b2da:	6979      	ldr	r1, [r7, #20]
 801b2dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b2e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801b2e4:	bf00      	nop
 801b2e6:	3724      	adds	r7, #36	; 0x24
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd90      	pop	{r4, r7, pc}
 801b2ec:	08023b00 	.word	0x08023b00

0801b2f0 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801b2f0:	b590      	push	{r4, r7, lr}
 801b2f2:	b085      	sub	sp, #20
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
 801b2f8:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	f103 040c 	add.w	r4, r3, #12
 801b300:	f107 0308 	add.w	r3, r7, #8
 801b304:	490a      	ldr	r1, [pc, #40]	; (801b330 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801b306:	4618      	mov	r0, r3
 801b308:	f7ef f94f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b30c:	f107 0308 	add.w	r3, r7, #8
 801b310:	4619      	mov	r1, r3
 801b312:	4620      	mov	r0, r4
 801b314:	f7ef f9b5 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b318:	f107 0308 	add.w	r3, r7, #8
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7ef fcfc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	683a      	ldr	r2, [r7, #0]
 801b326:	619a      	str	r2, [r3, #24]
}
 801b328:	bf00      	nop
 801b32a:	3714      	adds	r7, #20
 801b32c:	46bd      	mov	sp, r7
 801b32e:	bd90      	pop	{r4, r7, pc}
 801b330:	08023b08 	.word	0x08023b08

0801b334 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801b334:	b590      	push	{r4, r7, lr}
 801b336:	b085      	sub	sp, #20
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
 801b33c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	f103 040c 	add.w	r4, r3, #12
 801b344:	f107 0308 	add.w	r3, r7, #8
 801b348:	490a      	ldr	r1, [pc, #40]	; (801b374 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801b34a:	4618      	mov	r0, r3
 801b34c:	f7ef f92d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b350:	f107 0308 	add.w	r3, r7, #8
 801b354:	4619      	mov	r1, r3
 801b356:	4620      	mov	r0, r4
 801b358:	f7ef f993 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b35c:	f107 0308 	add.w	r3, r7, #8
 801b360:	4618      	mov	r0, r3
 801b362:	f7ef fcda 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	683a      	ldr	r2, [r7, #0]
 801b36a:	619a      	str	r2, [r3, #24]
}
 801b36c:	bf00      	nop
 801b36e:	3714      	adds	r7, #20
 801b370:	46bd      	mov	sp, r7
 801b372:	bd90      	pop	{r4, r7, pc}
 801b374:	08023b10 	.word	0x08023b10

0801b378 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801b378:	b590      	push	{r4, r7, lr}
 801b37a:	b085      	sub	sp, #20
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
 801b380:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	f103 040c 	add.w	r4, r3, #12
 801b388:	f107 0308 	add.w	r3, r7, #8
 801b38c:	490a      	ldr	r1, [pc, #40]	; (801b3b8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801b38e:	4618      	mov	r0, r3
 801b390:	f7ef f90b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b394:	f107 0308 	add.w	r3, r7, #8
 801b398:	4619      	mov	r1, r3
 801b39a:	4620      	mov	r0, r4
 801b39c:	f7ef f971 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b3a0:	f107 0308 	add.w	r3, r7, #8
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	f7ef fcb8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	683a      	ldr	r2, [r7, #0]
 801b3ae:	619a      	str	r2, [r3, #24]
}
 801b3b0:	bf00      	nop
 801b3b2:	3714      	adds	r7, #20
 801b3b4:	46bd      	mov	sp, r7
 801b3b6:	bd90      	pop	{r4, r7, pc}
 801b3b8:	08023b1c 	.word	0x08023b1c

0801b3bc <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801b3bc:	b590      	push	{r4, r7, lr}
 801b3be:	b085      	sub	sp, #20
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
 801b3c4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	f103 040c 	add.w	r4, r3, #12
 801b3cc:	f107 0308 	add.w	r3, r7, #8
 801b3d0:	490a      	ldr	r1, [pc, #40]	; (801b3fc <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	f7ef f8e9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b3d8:	f107 0308 	add.w	r3, r7, #8
 801b3dc:	4619      	mov	r1, r3
 801b3de:	4620      	mov	r0, r4
 801b3e0:	f7ef f94f 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b3e4:	f107 0308 	add.w	r3, r7, #8
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	f7ef fc96 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	683a      	ldr	r2, [r7, #0]
 801b3f2:	619a      	str	r2, [r3, #24]
}
 801b3f4:	bf00      	nop
 801b3f6:	3714      	adds	r7, #20
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	bd90      	pop	{r4, r7, pc}
 801b3fc:	08023b28 	.word	0x08023b28

0801b400 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801b400:	b590      	push	{r4, r7, lr}
 801b402:	b087      	sub	sp, #28
 801b404:	af00      	add	r7, sp, #0
 801b406:	60f8      	str	r0, [r7, #12]
 801b408:	60b9      	str	r1, [r7, #8]
 801b40a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	f103 040c 	add.w	r4, r3, #12
 801b412:	f107 0310 	add.w	r3, r7, #16
 801b416:	490c      	ldr	r1, [pc, #48]	; (801b448 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801b418:	4618      	mov	r0, r3
 801b41a:	f7ef f8c6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b41e:	f107 0310 	add.w	r3, r7, #16
 801b422:	4619      	mov	r1, r3
 801b424:	4620      	mov	r0, r4
 801b426:	f7ef f92c 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b42a:	f107 0310 	add.w	r3, r7, #16
 801b42e:	4618      	mov	r0, r3
 801b430:	f7ef fc73 	bl	800ad1a <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	68ba      	ldr	r2, [r7, #8]
 801b438:	619a      	str	r2, [r3, #24]
    size_ = size;
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	687a      	ldr	r2, [r7, #4]
 801b43e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b440:	bf00      	nop
 801b442:	371c      	adds	r7, #28
 801b444:	46bd      	mov	sp, r7
 801b446:	bd90      	pop	{r4, r7, pc}
 801b448:	08023b34 	.word	0x08023b34

0801b44c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b084      	sub	sp, #16
 801b450:	af00      	add	r7, sp, #0
 801b452:	60f8      	str	r0, [r7, #12]
 801b454:	60b9      	str	r1, [r7, #8]
 801b456:	607a      	str	r2, [r7, #4]
    type_ = type;
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	330c      	adds	r3, #12
 801b45c:	68b9      	ldr	r1, [r7, #8]
 801b45e:	4618      	mov	r0, r3
 801b460:	f7ef f90f 	bl	800a682 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	687a      	ldr	r2, [r7, #4]
 801b468:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801b46a:	4b11      	ldr	r3, [pc, #68]	; (801b4b0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d019      	beq.n	801b4a6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801b472:	4b0f      	ldr	r3, [pc, #60]	; (801b4b0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b474:	681a      	ldr	r2, [r3, #0]
 801b476:	4b0e      	ldr	r3, [pc, #56]	; (801b4b0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	3314      	adds	r3, #20
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	68b9      	ldr	r1, [r7, #8]
 801b482:	4610      	mov	r0, r2
 801b484:	4798      	blx	r3
 801b486:	4602      	mov	r2, r0
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801b48c:	4b08      	ldr	r3, [pc, #32]	; (801b4b0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b48e:	681a      	ldr	r2, [r3, #0]
 801b490:	4b07      	ldr	r3, [pc, #28]	; (801b4b0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	3318      	adds	r3, #24
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	68b9      	ldr	r1, [r7, #8]
 801b49c:	4610      	mov	r0, r2
 801b49e:	4798      	blx	r3
 801b4a0:	4602      	mov	r2, r0
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801b4a6:	bf00      	nop
 801b4a8:	3710      	adds	r7, #16
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd80      	pop	{r7, pc}
 801b4ae:	bf00      	nop
 801b4b0:	20000d1c 	.word	0x20000d1c

0801b4b4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b084      	sub	sp, #16
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	60f8      	str	r0, [r7, #12]
 801b4bc:	60b9      	str	r1, [r7, #8]
 801b4be:	607a      	str	r2, [r7, #4]
    type_ = type;
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	330c      	adds	r3, #12
 801b4c4:	68b9      	ldr	r1, [r7, #8]
 801b4c6:	4618      	mov	r0, r3
 801b4c8:	f7ef f8db 	bl	800a682 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	687a      	ldr	r2, [r7, #4]
 801b4d0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801b4d2:	4b11      	ldr	r3, [pc, #68]	; (801b518 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d019      	beq.n	801b50e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801b4da:	4b0f      	ldr	r3, [pc, #60]	; (801b518 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b4dc:	681a      	ldr	r2, [r3, #0]
 801b4de:	4b0e      	ldr	r3, [pc, #56]	; (801b518 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	3314      	adds	r3, #20
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	68b9      	ldr	r1, [r7, #8]
 801b4ea:	4610      	mov	r0, r2
 801b4ec:	4798      	blx	r3
 801b4ee:	4602      	mov	r2, r0
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801b4f4:	4b08      	ldr	r3, [pc, #32]	; (801b518 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b4f6:	681a      	ldr	r2, [r3, #0]
 801b4f8:	4b07      	ldr	r3, [pc, #28]	; (801b518 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	3318      	adds	r3, #24
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	68b9      	ldr	r1, [r7, #8]
 801b504:	4610      	mov	r0, r2
 801b506:	4798      	blx	r3
 801b508:	4602      	mov	r2, r0
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801b50e:	bf00      	nop
 801b510:	3710      	adds	r7, #16
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop
 801b518:	20000d1c 	.word	0x20000d1c

0801b51c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801b51c:	b480      	push	{r7}
 801b51e:	b083      	sub	sp, #12
 801b520:	af00      	add	r7, sp, #0
 801b522:	6078      	str	r0, [r7, #4]
 801b524:	6039      	str	r1, [r7, #0]
    size_ = size;
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	683a      	ldr	r2, [r7, #0]
 801b52a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b52c:	bf00      	nop
 801b52e:	370c      	adds	r7, #12
 801b530:	46bd      	mov	sp, r7
 801b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b536:	4770      	bx	lr

0801b538 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801b538:	b590      	push	{r4, r7, lr}
 801b53a:	b085      	sub	sp, #20
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
 801b540:	6039      	str	r1, [r7, #0]
    name_ = name;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	1d1c      	adds	r4, r3, #4
 801b546:	f107 0308 	add.w	r3, r7, #8
 801b54a:	6839      	ldr	r1, [r7, #0]
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7ef f82c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b552:	f107 0308 	add.w	r3, r7, #8
 801b556:	4619      	mov	r1, r3
 801b558:	4620      	mov	r0, r4
 801b55a:	f7ef f892 	bl	800a682 <_ZN12SimpleStringaSERKS_>
 801b55e:	f107 0308 	add.w	r3, r7, #8
 801b562:	4618      	mov	r0, r3
 801b564:	f7ef fbd9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
}
 801b568:	bf00      	nop
 801b56a:	3714      	adds	r7, #20
 801b56c:	46bd      	mov	sp, r7
 801b56e:	bd90      	pop	{r4, r7, pc}

0801b570 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b082      	sub	sp, #8
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
 801b578:	6039      	str	r1, [r7, #0]
    return name_;
 801b57a:	683b      	ldr	r3, [r7, #0]
 801b57c:	3304      	adds	r3, #4
 801b57e:	4619      	mov	r1, r3
 801b580:	6878      	ldr	r0, [r7, #4]
 801b582:	f7ef f866 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 801b586:	6878      	ldr	r0, [r7, #4]
 801b588:	3708      	adds	r7, #8
 801b58a:	46bd      	mov	sp, r7
 801b58c:	bd80      	pop	{r7, pc}

0801b58e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801b58e:	b580      	push	{r7, lr}
 801b590:	b082      	sub	sp, #8
 801b592:	af00      	add	r7, sp, #0
 801b594:	6078      	str	r0, [r7, #4]
 801b596:	6039      	str	r1, [r7, #0]
    return type_;
 801b598:	683b      	ldr	r3, [r7, #0]
 801b59a:	330c      	adds	r3, #12
 801b59c:	4619      	mov	r1, r3
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f7ef f857 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
}
 801b5a4:	6878      	ldr	r0, [r7, #4]
 801b5a6:	3708      	adds	r7, #8
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}

0801b5ac <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5ae:	b087      	sub	sp, #28
 801b5b0:	af04      	add	r7, sp, #16
 801b5b2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801b5b4:	f7f6 fbdc 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b5b8:	4604      	mov	r4, r0
 801b5ba:	6823      	ldr	r3, [r4, #0]
 801b5bc:	3324      	adds	r3, #36	; 0x24
 801b5be:	681d      	ldr	r5, [r3, #0]
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	330c      	adds	r3, #12
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f7ef fb7b 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b5ca:	4606      	mov	r6, r0
 801b5cc:	f7f6 fbe0 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	9302      	str	r3, [sp, #8]
 801b5d4:	23c8      	movs	r3, #200	; 0xc8
 801b5d6:	9301      	str	r3, [sp, #4]
 801b5d8:	4b06      	ldr	r3, [pc, #24]	; (801b5f4 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801b5da:	9300      	str	r3, [sp, #0]
 801b5dc:	2300      	movs	r3, #0
 801b5de:	4632      	mov	r2, r6
 801b5e0:	4905      	ldr	r1, [pc, #20]	; (801b5f8 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	47a8      	blx	r5
    return value_.boolValue_;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	7e1b      	ldrb	r3, [r3, #24]
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	370c      	adds	r7, #12
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5f2:	bf00      	nop
 801b5f4:	08023a98 	.word	0x08023a98
 801b5f8:	08023a60 	.word	0x08023a60

0801b5fc <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5fe:	b089      	sub	sp, #36	; 0x24
 801b600:	af04      	add	r7, sp, #16
 801b602:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	f103 040c 	add.w	r4, r3, #12
 801b60a:	f107 0308 	add.w	r3, r7, #8
 801b60e:	4920      	ldr	r1, [pc, #128]	; (801b690 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801b610:	4618      	mov	r0, r3
 801b612:	f7ee ffca 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b616:	2501      	movs	r5, #1
 801b618:	f107 0308 	add.w	r3, r7, #8
 801b61c:	4619      	mov	r1, r3
 801b61e:	4620      	mov	r0, r4
 801b620:	f7ef fb87 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801b624:	4603      	mov	r3, r0
 801b626:	2b00      	cmp	r3, #0
 801b628:	d005      	beq.n	801b636 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	699b      	ldr	r3, [r3, #24]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	db01      	blt.n	801b636 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801b632:	2401      	movs	r4, #1
 801b634:	e000      	b.n	801b638 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801b636:	2400      	movs	r4, #0
 801b638:	2d00      	cmp	r5, #0
 801b63a:	d004      	beq.n	801b646 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801b63c:	f107 0308 	add.w	r3, r7, #8
 801b640:	4618      	mov	r0, r3
 801b642:	f7ef fb6a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b646:	2c00      	cmp	r4, #0
 801b648:	d002      	beq.n	801b650 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	699b      	ldr	r3, [r3, #24]
 801b64e:	e01a      	b.n	801b686 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801b650:	f7f6 fb8e 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b654:	4604      	mov	r4, r0
 801b656:	6823      	ldr	r3, [r4, #0]
 801b658:	3324      	adds	r3, #36	; 0x24
 801b65a:	681d      	ldr	r5, [r3, #0]
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	330c      	adds	r3, #12
 801b660:	4618      	mov	r0, r3
 801b662:	f7ef fb2d 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b666:	4606      	mov	r6, r0
 801b668:	f7f6 fb92 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b66c:	4603      	mov	r3, r0
 801b66e:	9302      	str	r3, [sp, #8]
 801b670:	23d2      	movs	r3, #210	; 0xd2
 801b672:	9301      	str	r3, [sp, #4]
 801b674:	4b07      	ldr	r3, [pc, #28]	; (801b694 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801b676:	9300      	str	r3, [sp, #0]
 801b678:	2300      	movs	r3, #0
 801b67a:	4632      	mov	r2, r6
 801b67c:	4906      	ldr	r1, [pc, #24]	; (801b698 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801b67e:	4620      	mov	r0, r4
 801b680:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	699b      	ldr	r3, [r3, #24]
    }
}
 801b686:	4618      	mov	r0, r3
 801b688:	3714      	adds	r7, #20
 801b68a:	46bd      	mov	sp, r7
 801b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b68e:	bf00      	nop
 801b690:	08023a5c 	.word	0x08023a5c
 801b694:	08023a98 	.word	0x08023a98
 801b698:	08023a68 	.word	0x08023a68

0801b69c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801b69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b69e:	b087      	sub	sp, #28
 801b6a0:	af04      	add	r7, sp, #16
 801b6a2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801b6a4:	f7f6 fb64 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b6a8:	4604      	mov	r4, r0
 801b6aa:	6823      	ldr	r3, [r4, #0]
 801b6ac:	3324      	adds	r3, #36	; 0x24
 801b6ae:	681d      	ldr	r5, [r3, #0]
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	330c      	adds	r3, #12
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7ef fb03 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b6ba:	4606      	mov	r6, r0
 801b6bc:	f7f6 fb68 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	9302      	str	r3, [sp, #8]
 801b6c4:	23d9      	movs	r3, #217	; 0xd9
 801b6c6:	9301      	str	r3, [sp, #4]
 801b6c8:	4b06      	ldr	r3, [pc, #24]	; (801b6e4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801b6ca:	9300      	str	r3, [sp, #0]
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	4632      	mov	r2, r6
 801b6d0:	4905      	ldr	r1, [pc, #20]	; (801b6e8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	47a8      	blx	r5
    return value_.intValue_;
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	699b      	ldr	r3, [r3, #24]
}
 801b6da:	4618      	mov	r0, r3
 801b6dc:	370c      	adds	r7, #12
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e2:	bf00      	nop
 801b6e4:	08023a98 	.word	0x08023a98
 801b6e8:	08023a5c 	.word	0x08023a5c

0801b6ec <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801b6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ee:	b08b      	sub	sp, #44	; 0x2c
 801b6f0:	af04      	add	r7, sp, #16
 801b6f2:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	f103 040c 	add.w	r4, r3, #12
 801b6fa:	f107 0308 	add.w	r3, r7, #8
 801b6fe:	4928      	ldr	r1, [pc, #160]	; (801b7a0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801b700:	4618      	mov	r0, r3
 801b702:	f7ee ff52 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b706:	f107 0308 	add.w	r3, r7, #8
 801b70a:	4619      	mov	r1, r3
 801b70c:	4620      	mov	r0, r4
 801b70e:	f7ef fb10 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801b712:	4603      	mov	r3, r0
 801b714:	461c      	mov	r4, r3
 801b716:	f107 0308 	add.w	r3, r7, #8
 801b71a:	4618      	mov	r0, r3
 801b71c:	f7ef fafd 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b720:	2c00      	cmp	r4, #0
 801b722:	d002      	beq.n	801b72a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	699b      	ldr	r3, [r3, #24]
 801b728:	e035      	b.n	801b796 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	f103 040c 	add.w	r4, r3, #12
 801b730:	f107 0310 	add.w	r3, r7, #16
 801b734:	491b      	ldr	r1, [pc, #108]	; (801b7a4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801b736:	4618      	mov	r0, r3
 801b738:	f7ee ff37 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b73c:	f107 0310 	add.w	r3, r7, #16
 801b740:	4619      	mov	r1, r3
 801b742:	4620      	mov	r0, r4
 801b744:	f7ef faf5 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801b748:	4603      	mov	r3, r0
 801b74a:	461c      	mov	r4, r3
 801b74c:	f107 0310 	add.w	r3, r7, #16
 801b750:	4618      	mov	r0, r3
 801b752:	f7ef fae2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b756:	2c00      	cmp	r4, #0
 801b758:	d002      	beq.n	801b760 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	699b      	ldr	r3, [r3, #24]
 801b75e:	e01a      	b.n	801b796 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801b760:	f7f6 fb06 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b764:	4604      	mov	r4, r0
 801b766:	6823      	ldr	r3, [r4, #0]
 801b768:	3324      	adds	r3, #36	; 0x24
 801b76a:	681d      	ldr	r5, [r3, #0]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	330c      	adds	r3, #12
 801b770:	4618      	mov	r0, r3
 801b772:	f7ef faa5 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b776:	4606      	mov	r6, r0
 801b778:	f7f6 fb0a 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b77c:	4603      	mov	r3, r0
 801b77e:	9302      	str	r3, [sp, #8]
 801b780:	23e5      	movs	r3, #229	; 0xe5
 801b782:	9301      	str	r3, [sp, #4]
 801b784:	4b08      	ldr	r3, [pc, #32]	; (801b7a8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801b786:	9300      	str	r3, [sp, #0]
 801b788:	2300      	movs	r3, #0
 801b78a:	4632      	mov	r2, r6
 801b78c:	4907      	ldr	r1, [pc, #28]	; (801b7ac <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801b78e:	4620      	mov	r0, r4
 801b790:	47a8      	blx	r5
        return value_.longIntValue_;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	699b      	ldr	r3, [r3, #24]
    }
}
 801b796:	4618      	mov	r0, r3
 801b798:	371c      	adds	r7, #28
 801b79a:	46bd      	mov	sp, r7
 801b79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b79e:	bf00      	nop
 801b7a0:	08023a5c 	.word	0x08023a5c
 801b7a4:	08023a68 	.word	0x08023a68
 801b7a8:	08023a98 	.word	0x08023a98
 801b7ac:	08023a78 	.word	0x08023a78

0801b7b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7b2:	b08d      	sub	sp, #52	; 0x34
 801b7b4:	af04      	add	r7, sp, #16
 801b7b6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	f103 040c 	add.w	r4, r3, #12
 801b7be:	f107 0308 	add.w	r3, r7, #8
 801b7c2:	4940      	ldr	r1, [pc, #256]	; (801b8c4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801b7c4:	4618      	mov	r0, r3
 801b7c6:	f7ee fef0 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b7ca:	f107 0308 	add.w	r3, r7, #8
 801b7ce:	4619      	mov	r1, r3
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	f7ef faae 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	461c      	mov	r4, r3
 801b7da:	f107 0308 	add.w	r3, r7, #8
 801b7de:	4618      	mov	r0, r3
 801b7e0:	f7ef fa9b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b7e4:	2c00      	cmp	r4, #0
 801b7e6:	d002      	beq.n	801b7ee <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	699b      	ldr	r3, [r3, #24]
 801b7ec:	e066      	b.n	801b8bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	f103 040c 	add.w	r4, r3, #12
 801b7f4:	f107 0310 	add.w	r3, r7, #16
 801b7f8:	4933      	ldr	r1, [pc, #204]	; (801b8c8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7ee fed5 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b800:	2501      	movs	r5, #1
 801b802:	f107 0310 	add.w	r3, r7, #16
 801b806:	4619      	mov	r1, r3
 801b808:	4620      	mov	r0, r4
 801b80a:	f7ef fa92 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801b80e:	4603      	mov	r3, r0
 801b810:	2b00      	cmp	r3, #0
 801b812:	d005      	beq.n	801b820 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	699b      	ldr	r3, [r3, #24]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	db01      	blt.n	801b820 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801b81c:	2401      	movs	r4, #1
 801b81e:	e000      	b.n	801b822 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801b820:	2400      	movs	r4, #0
 801b822:	2d00      	cmp	r5, #0
 801b824:	d004      	beq.n	801b830 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801b826:	f107 0310 	add.w	r3, r7, #16
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7ef fa75 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b830:	2c00      	cmp	r4, #0
 801b832:	d002      	beq.n	801b83a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	699b      	ldr	r3, [r3, #24]
 801b838:	e040      	b.n	801b8bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	f103 040c 	add.w	r4, r3, #12
 801b840:	f107 0318 	add.w	r3, r7, #24
 801b844:	4921      	ldr	r1, [pc, #132]	; (801b8cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801b846:	4618      	mov	r0, r3
 801b848:	f7ee feaf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801b84c:	2501      	movs	r5, #1
 801b84e:	f107 0318 	add.w	r3, r7, #24
 801b852:	4619      	mov	r1, r3
 801b854:	4620      	mov	r0, r4
 801b856:	f7ef fa6c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801b85a:	4603      	mov	r3, r0
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d005      	beq.n	801b86c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	699b      	ldr	r3, [r3, #24]
 801b864:	2b00      	cmp	r3, #0
 801b866:	db01      	blt.n	801b86c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801b868:	2401      	movs	r4, #1
 801b86a:	e000      	b.n	801b86e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801b86c:	2400      	movs	r4, #0
 801b86e:	2d00      	cmp	r5, #0
 801b870:	d004      	beq.n	801b87c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801b872:	f107 0318 	add.w	r3, r7, #24
 801b876:	4618      	mov	r0, r3
 801b878:	f7ef fa4f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801b87c:	2c00      	cmp	r4, #0
 801b87e:	d002      	beq.n	801b886 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	699b      	ldr	r3, [r3, #24]
 801b884:	e01a      	b.n	801b8bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801b886:	f7f6 fa73 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b88a:	4604      	mov	r4, r0
 801b88c:	6823      	ldr	r3, [r4, #0]
 801b88e:	3324      	adds	r3, #36	; 0x24
 801b890:	681d      	ldr	r5, [r3, #0]
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	330c      	adds	r3, #12
 801b896:	4618      	mov	r0, r3
 801b898:	f7ef fa12 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b89c:	4606      	mov	r6, r0
 801b89e:	f7f6 fa77 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	9302      	str	r3, [sp, #8]
 801b8a6:	23f4      	movs	r3, #244	; 0xf4
 801b8a8:	9301      	str	r3, [sp, #4]
 801b8aa:	4b09      	ldr	r3, [pc, #36]	; (801b8d0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801b8ac:	9300      	str	r3, [sp, #0]
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	4632      	mov	r2, r6
 801b8b2:	4908      	ldr	r1, [pc, #32]	; (801b8d4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801b8b4:	4620      	mov	r0, r4
 801b8b6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	699b      	ldr	r3, [r3, #24]
    }
}
 801b8bc:	4618      	mov	r0, r3
 801b8be:	3724      	adds	r7, #36	; 0x24
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8c4:	08023a68 	.word	0x08023a68
 801b8c8:	08023a5c 	.word	0x08023a5c
 801b8cc:	08023a78 	.word	0x08023a78
 801b8d0:	08023a98 	.word	0x08023a98
 801b8d4:	08023a84 	.word	0x08023a84

0801b8d8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801b8d8:	b5b0      	push	{r4, r5, r7, lr}
 801b8da:	b084      	sub	sp, #16
 801b8dc:	af02      	add	r7, sp, #8
 801b8de:	6078      	str	r0, [r7, #4]
 801b8e0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801b8e2:	f7f6 fa45 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b8e6:	4604      	mov	r4, r0
 801b8e8:	6823      	ldr	r3, [r4, #0]
 801b8ea:	3368      	adds	r3, #104	; 0x68
 801b8ec:	681d      	ldr	r5, [r3, #0]
 801b8ee:	f7f6 fa4f 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	9300      	str	r3, [sp, #0]
 801b8f6:	f240 1323 	movw	r3, #291	; 0x123
 801b8fa:	4a06      	ldr	r2, [pc, #24]	; (801b914 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801b8fc:	4906      	ldr	r1, [pc, #24]	; (801b918 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801b8fe:	4620      	mov	r0, r4
 801b900:	47a8      	blx	r5
    return cpputest_longlong(0);
 801b902:	2100      	movs	r1, #0
 801b904:	6878      	ldr	r0, [r7, #4]
 801b906:	f7ec fe87 	bl	8008618 <_ZN17cpputest_longlongC1Ei>
}
 801b90a:	6878      	ldr	r0, [r7, #4]
 801b90c:	3708      	adds	r7, #8
 801b90e:	46bd      	mov	sp, r7
 801b910:	bdb0      	pop	{r4, r5, r7, pc}
 801b912:	bf00      	nop
 801b914:	08023a98 	.word	0x08023a98
 801b918:	08023ab4 	.word	0x08023ab4

0801b91c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801b91c:	b5b0      	push	{r4, r5, r7, lr}
 801b91e:	b084      	sub	sp, #16
 801b920:	af02      	add	r7, sp, #8
 801b922:	6078      	str	r0, [r7, #4]
 801b924:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801b926:	f7f6 fa23 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b92a:	4604      	mov	r4, r0
 801b92c:	6823      	ldr	r3, [r4, #0]
 801b92e:	3368      	adds	r3, #104	; 0x68
 801b930:	681d      	ldr	r5, [r3, #0]
 801b932:	f7f6 fa2d 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b936:	4603      	mov	r3, r0
 801b938:	9300      	str	r3, [sp, #0]
 801b93a:	f240 1329 	movw	r3, #297	; 0x129
 801b93e:	4a06      	ldr	r2, [pc, #24]	; (801b958 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801b940:	4906      	ldr	r1, [pc, #24]	; (801b95c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801b942:	4620      	mov	r0, r4
 801b944:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801b946:	2100      	movs	r1, #0
 801b948:	6878      	ldr	r0, [r7, #4]
 801b94a:	f7ec fe71 	bl	8008630 <_ZN18cpputest_ulonglongC1Ei>
}
 801b94e:	6878      	ldr	r0, [r7, #4]
 801b950:	3708      	adds	r7, #8
 801b952:	46bd      	mov	sp, r7
 801b954:	bdb0      	pop	{r4, r5, r7, pc}
 801b956:	bf00      	nop
 801b958:	08023a98 	.word	0x08023a98
 801b95c:	08023ad4 	.word	0x08023ad4

0801b960 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801b960:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b962:	b087      	sub	sp, #28
 801b964:	af04      	add	r7, sp, #16
 801b966:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b968:	f7f6 fa02 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b96c:	4604      	mov	r4, r0
 801b96e:	6823      	ldr	r3, [r4, #0]
 801b970:	3324      	adds	r3, #36	; 0x24
 801b972:	681d      	ldr	r5, [r3, #0]
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	330c      	adds	r3, #12
 801b978:	4618      	mov	r0, r3
 801b97a:	f7ef f9a1 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b97e:	4606      	mov	r6, r0
 801b980:	f7f6 fa06 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b984:	4603      	mov	r3, r0
 801b986:	9302      	str	r3, [sp, #8]
 801b988:	f240 1331 	movw	r3, #305	; 0x131
 801b98c:	9301      	str	r3, [sp, #4]
 801b98e:	4b09      	ldr	r3, [pc, #36]	; (801b9b4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801b990:	9300      	str	r3, [sp, #0]
 801b992:	2300      	movs	r3, #0
 801b994:	4632      	mov	r2, r6
 801b996:	4908      	ldr	r1, [pc, #32]	; (801b9b8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801b998:	4620      	mov	r0, r4
 801b99a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801b9a2:	ec43 2b17 	vmov	d7, r2, r3
}
 801b9a6:	eeb0 0a47 	vmov.f32	s0, s14
 801b9aa:	eef0 0a67 	vmov.f32	s1, s15
 801b9ae:	370c      	adds	r7, #12
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9b4:	08023a98 	.word	0x08023a98
 801b9b8:	08023b00 	.word	0x08023b00

0801b9bc <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9be:	b087      	sub	sp, #28
 801b9c0:	af04      	add	r7, sp, #16
 801b9c2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b9c4:	f7f6 f9d4 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801b9c8:	4604      	mov	r4, r0
 801b9ca:	6823      	ldr	r3, [r4, #0]
 801b9cc:	3324      	adds	r3, #36	; 0x24
 801b9ce:	681d      	ldr	r5, [r3, #0]
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	330c      	adds	r3, #12
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f7ef f973 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801b9da:	4606      	mov	r6, r0
 801b9dc:	f7f6 f9d8 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	9302      	str	r3, [sp, #8]
 801b9e4:	f240 1337 	movw	r3, #311	; 0x137
 801b9e8:	9301      	str	r3, [sp, #4]
 801b9ea:	4b09      	ldr	r3, [pc, #36]	; (801ba10 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801b9ec:	9300      	str	r3, [sp, #0]
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	4632      	mov	r2, r6
 801b9f2:	4908      	ldr	r1, [pc, #32]	; (801ba14 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801b9f4:	4620      	mov	r0, r4
 801b9f6:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b9fe:	ec43 2b17 	vmov	d7, r2, r3
}
 801ba02:	eeb0 0a47 	vmov.f32	s0, s14
 801ba06:	eef0 0a67 	vmov.f32	s1, s15
 801ba0a:	370c      	adds	r7, #12
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba10:	08023a98 	.word	0x08023a98
 801ba14:	08023b00 	.word	0x08023b00

0801ba18 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801ba18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba1a:	b087      	sub	sp, #28
 801ba1c:	af04      	add	r7, sp, #16
 801ba1e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801ba20:	f7f6 f9a6 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801ba24:	4604      	mov	r4, r0
 801ba26:	6823      	ldr	r3, [r4, #0]
 801ba28:	3324      	adds	r3, #36	; 0x24
 801ba2a:	681d      	ldr	r5, [r3, #0]
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	330c      	adds	r3, #12
 801ba30:	4618      	mov	r0, r3
 801ba32:	f7ef f945 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801ba36:	4606      	mov	r6, r0
 801ba38:	f7f6 f9aa 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	9302      	str	r3, [sp, #8]
 801ba40:	f240 133d 	movw	r3, #317	; 0x13d
 801ba44:	9301      	str	r3, [sp, #4]
 801ba46:	4b06      	ldr	r3, [pc, #24]	; (801ba60 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801ba48:	9300      	str	r3, [sp, #0]
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	4632      	mov	r2, r6
 801ba4e:	4905      	ldr	r1, [pc, #20]	; (801ba64 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801ba50:	4620      	mov	r0, r4
 801ba52:	47a8      	blx	r5
    return value_.stringValue_;
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	699b      	ldr	r3, [r3, #24]
}
 801ba58:	4618      	mov	r0, r3
 801ba5a:	370c      	adds	r7, #12
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba60:	08023a98 	.word	0x08023a98
 801ba64:	08023b28 	.word	0x08023b28

0801ba68 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba6a:	b087      	sub	sp, #28
 801ba6c:	af04      	add	r7, sp, #16
 801ba6e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801ba70:	f7f6 f97e 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801ba74:	4604      	mov	r4, r0
 801ba76:	6823      	ldr	r3, [r4, #0]
 801ba78:	3324      	adds	r3, #36	; 0x24
 801ba7a:	681d      	ldr	r5, [r3, #0]
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	330c      	adds	r3, #12
 801ba80:	4618      	mov	r0, r3
 801ba82:	f7ef f91d 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801ba86:	4606      	mov	r6, r0
 801ba88:	f7f6 f982 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba8c:	4603      	mov	r3, r0
 801ba8e:	9302      	str	r3, [sp, #8]
 801ba90:	f240 1343 	movw	r3, #323	; 0x143
 801ba94:	9301      	str	r3, [sp, #4]
 801ba96:	4b06      	ldr	r3, [pc, #24]	; (801bab0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801ba98:	9300      	str	r3, [sp, #0]
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	4632      	mov	r2, r6
 801ba9e:	4905      	ldr	r1, [pc, #20]	; (801bab4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801baa0:	4620      	mov	r0, r4
 801baa2:	47a8      	blx	r5
    return value_.pointerValue_;
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	699b      	ldr	r3, [r3, #24]
}
 801baa8:	4618      	mov	r0, r3
 801baaa:	370c      	adds	r7, #12
 801baac:	46bd      	mov	sp, r7
 801baae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bab0:	08023a98 	.word	0x08023a98
 801bab4:	08023b08 	.word	0x08023b08

0801bab8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801bab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baba:	b087      	sub	sp, #28
 801babc:	af04      	add	r7, sp, #16
 801babe:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801bac0:	f7f6 f956 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801bac4:	4604      	mov	r4, r0
 801bac6:	6823      	ldr	r3, [r4, #0]
 801bac8:	3324      	adds	r3, #36	; 0x24
 801baca:	681d      	ldr	r5, [r3, #0]
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	330c      	adds	r3, #12
 801bad0:	4618      	mov	r0, r3
 801bad2:	f7ef f8f5 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801bad6:	4606      	mov	r6, r0
 801bad8:	f7f6 f95a 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801badc:	4603      	mov	r3, r0
 801bade:	9302      	str	r3, [sp, #8]
 801bae0:	f240 1349 	movw	r3, #329	; 0x149
 801bae4:	9301      	str	r3, [sp, #4]
 801bae6:	4b06      	ldr	r3, [pc, #24]	; (801bb00 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801bae8:	9300      	str	r3, [sp, #0]
 801baea:	2300      	movs	r3, #0
 801baec:	4632      	mov	r2, r6
 801baee:	4905      	ldr	r1, [pc, #20]	; (801bb04 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801baf0:	4620      	mov	r0, r4
 801baf2:	47a8      	blx	r5
    return value_.pointerValue_;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	699b      	ldr	r3, [r3, #24]
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	370c      	adds	r7, #12
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb00:	08023a98 	.word	0x08023a98
 801bb04:	08023b10 	.word	0x08023b10

0801bb08 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb0a:	b087      	sub	sp, #28
 801bb0c:	af04      	add	r7, sp, #16
 801bb0e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801bb10:	f7f6 f92e 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801bb14:	4604      	mov	r4, r0
 801bb16:	6823      	ldr	r3, [r4, #0]
 801bb18:	3324      	adds	r3, #36	; 0x24
 801bb1a:	681d      	ldr	r5, [r3, #0]
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	330c      	adds	r3, #12
 801bb20:	4618      	mov	r0, r3
 801bb22:	f7ef f8cd 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801bb26:	4606      	mov	r6, r0
 801bb28:	f7f6 f932 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	9302      	str	r3, [sp, #8]
 801bb30:	f240 134f 	movw	r3, #335	; 0x14f
 801bb34:	9301      	str	r3, [sp, #4]
 801bb36:	4b06      	ldr	r3, [pc, #24]	; (801bb50 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801bb38:	9300      	str	r3, [sp, #0]
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	4632      	mov	r2, r6
 801bb3e:	4905      	ldr	r1, [pc, #20]	; (801bb54 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801bb40:	4620      	mov	r0, r4
 801bb42:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	699b      	ldr	r3, [r3, #24]
}
 801bb48:	4618      	mov	r0, r3
 801bb4a:	370c      	adds	r7, #12
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb50:	08023a98 	.word	0x08023a98
 801bb54:	08023b1c 	.word	0x08023b1c

0801bb58 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801bb58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb5a:	b087      	sub	sp, #28
 801bb5c:	af04      	add	r7, sp, #16
 801bb5e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801bb60:	f7f6 f906 	bl	8011d70 <_ZN10UtestShell10getCurrentEv>
 801bb64:	4604      	mov	r4, r0
 801bb66:	6823      	ldr	r3, [r4, #0]
 801bb68:	3324      	adds	r3, #36	; 0x24
 801bb6a:	681d      	ldr	r5, [r3, #0]
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	330c      	adds	r3, #12
 801bb70:	4618      	mov	r0, r3
 801bb72:	f7ef f8a5 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801bb76:	4606      	mov	r6, r0
 801bb78:	f7f6 f90a 	bl	8011d90 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bb7c:	4603      	mov	r3, r0
 801bb7e:	9302      	str	r3, [sp, #8]
 801bb80:	f240 1355 	movw	r3, #341	; 0x155
 801bb84:	9301      	str	r3, [sp, #4]
 801bb86:	4b06      	ldr	r3, [pc, #24]	; (801bba0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801bb88:	9300      	str	r3, [sp, #0]
 801bb8a:	2300      	movs	r3, #0
 801bb8c:	4632      	mov	r2, r6
 801bb8e:	4905      	ldr	r1, [pc, #20]	; (801bba4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801bb90:	4620      	mov	r0, r4
 801bb92:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	699b      	ldr	r3, [r3, #24]
}
 801bb98:	4618      	mov	r0, r3
 801bb9a:	370c      	adds	r7, #12
 801bb9c:	46bd      	mov	sp, r7
 801bb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bba0:	08023a98 	.word	0x08023a98
 801bba4:	08023b34 	.word	0x08023b34

0801bba8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801bba8:	b480      	push	{r7}
 801bbaa:	b083      	sub	sp, #12
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	699b      	ldr	r3, [r3, #24]
}
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	370c      	adds	r7, #12
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbbe:	4770      	bx	lr

0801bbc0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801bbc0:	b480      	push	{r7}
 801bbc2:	b083      	sub	sp, #12
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	699b      	ldr	r3, [r3, #24]
}
 801bbcc:	4618      	mov	r0, r3
 801bbce:	370c      	adds	r7, #12
 801bbd0:	46bd      	mov	sp, r7
 801bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbd6:	4770      	bx	lr

0801bbd8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801bbd8:	b480      	push	{r7}
 801bbda:	b083      	sub	sp, #12
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
    return size_;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	370c      	adds	r7, #12
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbee:	4770      	bx	lr

0801bbf0 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801bbf0:	b480      	push	{r7}
 801bbf2:	b083      	sub	sp, #12
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
    return comparator_;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	370c      	adds	r7, #12
 801bc00:	46bd      	mov	sp, r7
 801bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc06:	4770      	bx	lr

0801bc08 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801bc08:	b480      	push	{r7}
 801bc0a:	b083      	sub	sp, #12
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
    return copier_;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801bc14:	4618      	mov	r0, r3
 801bc16:	370c      	adds	r7, #12
 801bc18:	46bd      	mov	sp, r7
 801bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1e:	4770      	bx	lr

0801bc20 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801bc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc22:	b0cd      	sub	sp, #308	; 0x134
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	1d3b      	adds	r3, r7, #4
 801bc28:	6018      	str	r0, [r3, #0]
 801bc2a:	463b      	mov	r3, r7
 801bc2c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801bc2e:	2500      	movs	r5, #0
 801bc30:	1d3b      	adds	r3, r7, #4
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	f103 040c 	add.w	r4, r3, #12
 801bc38:	f107 0308 	add.w	r3, r7, #8
 801bc3c:	49bb      	ldr	r1, [pc, #748]	; (801bf2c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801bc3e:	4618      	mov	r0, r3
 801bc40:	f7ee fcb3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bc44:	2601      	movs	r6, #1
 801bc46:	f107 0308 	add.w	r3, r7, #8
 801bc4a:	4619      	mov	r1, r3
 801bc4c:	4620      	mov	r0, r4
 801bc4e:	f7ef f870 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bc52:	4603      	mov	r3, r0
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d015      	beq.n	801bc84 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801bc58:	463b      	mov	r3, r7
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	f103 040c 	add.w	r4, r3, #12
 801bc60:	f107 0310 	add.w	r3, r7, #16
 801bc64:	49b2      	ldr	r1, [pc, #712]	; (801bf30 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801bc66:	4618      	mov	r0, r3
 801bc68:	f7ee fc9f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bc6c:	2501      	movs	r5, #1
 801bc6e:	f107 0310 	add.w	r3, r7, #16
 801bc72:	4619      	mov	r1, r3
 801bc74:	4620      	mov	r0, r4
 801bc76:	f7ef f85c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d001      	beq.n	801bc84 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801bc80:	2401      	movs	r4, #1
 801bc82:	e000      	b.n	801bc86 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801bc84:	2400      	movs	r4, #0
 801bc86:	2d00      	cmp	r5, #0
 801bc88:	d004      	beq.n	801bc94 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801bc8a:	f107 0310 	add.w	r3, r7, #16
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7ef f843 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bc94:	2e00      	cmp	r6, #0
 801bc96:	d004      	beq.n	801bca2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801bc98:	f107 0308 	add.w	r3, r7, #8
 801bc9c:	4618      	mov	r0, r3
 801bc9e:	f7ef f83c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bca2:	2c00      	cmp	r4, #0
 801bca4:	d00c      	beq.n	801bcc0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801bca6:	1d3b      	adds	r3, r7, #4
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	699a      	ldr	r2, [r3, #24]
 801bcac:	463b      	mov	r3, r7
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	699b      	ldr	r3, [r3, #24]
 801bcb2:	429a      	cmp	r2, r3
 801bcb4:	bf0c      	ite	eq
 801bcb6:	2301      	moveq	r3, #1
 801bcb8:	2300      	movne	r3, #0
 801bcba:	b2dc      	uxtb	r4, r3
 801bcbc:	f000 bd60 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801bcc0:	2500      	movs	r5, #0
 801bcc2:	1d3b      	adds	r3, r7, #4
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	f103 040c 	add.w	r4, r3, #12
 801bcca:	f107 0318 	add.w	r3, r7, #24
 801bcce:	4998      	ldr	r1, [pc, #608]	; (801bf30 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	f7ee fc6a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bcd6:	2601      	movs	r6, #1
 801bcd8:	f107 0318 	add.w	r3, r7, #24
 801bcdc:	4619      	mov	r1, r3
 801bcde:	4620      	mov	r0, r4
 801bce0:	f7ef f827 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bce4:	4603      	mov	r3, r0
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d015      	beq.n	801bd16 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801bcea:	463b      	mov	r3, r7
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	f103 040c 	add.w	r4, r3, #12
 801bcf2:	f107 0320 	add.w	r3, r7, #32
 801bcf6:	498d      	ldr	r1, [pc, #564]	; (801bf2c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7ee fc56 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bcfe:	2501      	movs	r5, #1
 801bd00:	f107 0320 	add.w	r3, r7, #32
 801bd04:	4619      	mov	r1, r3
 801bd06:	4620      	mov	r0, r4
 801bd08:	f7ef f813 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bd0c:	4603      	mov	r3, r0
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d001      	beq.n	801bd16 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801bd12:	2401      	movs	r4, #1
 801bd14:	e000      	b.n	801bd18 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801bd16:	2400      	movs	r4, #0
 801bd18:	2d00      	cmp	r5, #0
 801bd1a:	d004      	beq.n	801bd26 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801bd1c:	f107 0320 	add.w	r3, r7, #32
 801bd20:	4618      	mov	r0, r3
 801bd22:	f7ee fffa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bd26:	2e00      	cmp	r6, #0
 801bd28:	d004      	beq.n	801bd34 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801bd2a:	f107 0318 	add.w	r3, r7, #24
 801bd2e:	4618      	mov	r0, r3
 801bd30:	f7ee fff3 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bd34:	2c00      	cmp	r4, #0
 801bd36:	d00c      	beq.n	801bd52 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801bd38:	1d3b      	adds	r3, r7, #4
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	699a      	ldr	r2, [r3, #24]
 801bd3e:	463b      	mov	r3, r7
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	699b      	ldr	r3, [r3, #24]
 801bd44:	429a      	cmp	r2, r3
 801bd46:	bf0c      	ite	eq
 801bd48:	2301      	moveq	r3, #1
 801bd4a:	2300      	movne	r3, #0
 801bd4c:	b2dc      	uxtb	r4, r3
 801bd4e:	f000 bd17 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801bd52:	2500      	movs	r5, #0
 801bd54:	1d3b      	adds	r3, r7, #4
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	f103 040c 	add.w	r4, r3, #12
 801bd5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bd60:	4974      	ldr	r1, [pc, #464]	; (801bf34 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801bd62:	4618      	mov	r0, r3
 801bd64:	f7ee fc21 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bd68:	2601      	movs	r6, #1
 801bd6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bd6e:	4619      	mov	r1, r3
 801bd70:	4620      	mov	r0, r4
 801bd72:	f7ee ffde 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bd76:	4603      	mov	r3, r0
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d015      	beq.n	801bda8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801bd7c:	463b      	mov	r3, r7
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	f103 040c 	add.w	r4, r3, #12
 801bd84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bd88:	4969      	ldr	r1, [pc, #420]	; (801bf30 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7ee fc0d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bd90:	2501      	movs	r5, #1
 801bd92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bd96:	4619      	mov	r1, r3
 801bd98:	4620      	mov	r0, r4
 801bd9a:	f7ee ffca 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d001      	beq.n	801bda8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801bda4:	2401      	movs	r4, #1
 801bda6:	e000      	b.n	801bdaa <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801bda8:	2400      	movs	r4, #0
 801bdaa:	2d00      	cmp	r5, #0
 801bdac:	d004      	beq.n	801bdb8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801bdae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f7ee ffb1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bdb8:	2e00      	cmp	r6, #0
 801bdba:	d004      	beq.n	801bdc6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801bdbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	f7ee ffaa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bdc6:	2c00      	cmp	r4, #0
 801bdc8:	d012      	beq.n	801bdf0 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801bdca:	463b      	mov	r3, r7
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	699b      	ldr	r3, [r3, #24]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	db0a      	blt.n	801bdea <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801bdd4:	1d3b      	adds	r3, r7, #4
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	699b      	ldr	r3, [r3, #24]
 801bdda:	463a      	mov	r2, r7
 801bddc:	6812      	ldr	r2, [r2, #0]
 801bdde:	6992      	ldr	r2, [r2, #24]
 801bde0:	4293      	cmp	r3, r2
 801bde2:	d102      	bne.n	801bdea <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801bde4:	2401      	movs	r4, #1
 801bde6:	f000 bccb 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bdea:	2400      	movs	r4, #0
 801bdec:	f000 bcc8 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801bdf0:	2500      	movs	r5, #0
 801bdf2:	1d3b      	adds	r3, r7, #4
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	f103 040c 	add.w	r4, r3, #12
 801bdfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bdfe:	494c      	ldr	r1, [pc, #304]	; (801bf30 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801be00:	4618      	mov	r0, r3
 801be02:	f7ee fbd2 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801be06:	2601      	movs	r6, #1
 801be08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801be0c:	4619      	mov	r1, r3
 801be0e:	4620      	mov	r0, r4
 801be10:	f7ee ff8f 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801be14:	4603      	mov	r3, r0
 801be16:	2b00      	cmp	r3, #0
 801be18:	d015      	beq.n	801be46 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801be1a:	463b      	mov	r3, r7
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	f103 040c 	add.w	r4, r3, #12
 801be22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801be26:	4943      	ldr	r1, [pc, #268]	; (801bf34 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801be28:	4618      	mov	r0, r3
 801be2a:	f7ee fbbe 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801be2e:	2501      	movs	r5, #1
 801be30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801be34:	4619      	mov	r1, r3
 801be36:	4620      	mov	r0, r4
 801be38:	f7ee ff7b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801be3c:	4603      	mov	r3, r0
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d001      	beq.n	801be46 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801be42:	2401      	movs	r4, #1
 801be44:	e000      	b.n	801be48 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801be46:	2400      	movs	r4, #0
 801be48:	2d00      	cmp	r5, #0
 801be4a:	d004      	beq.n	801be56 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801be4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801be50:	4618      	mov	r0, r3
 801be52:	f7ee ff62 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801be56:	2e00      	cmp	r6, #0
 801be58:	d004      	beq.n	801be64 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801be5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801be5e:	4618      	mov	r0, r3
 801be60:	f7ee ff5b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801be64:	2c00      	cmp	r4, #0
 801be66:	d012      	beq.n	801be8e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801be68:	1d3b      	adds	r3, r7, #4
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	699b      	ldr	r3, [r3, #24]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	db0a      	blt.n	801be88 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801be72:	1d3b      	adds	r3, r7, #4
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	699b      	ldr	r3, [r3, #24]
 801be78:	463a      	mov	r2, r7
 801be7a:	6812      	ldr	r2, [r2, #0]
 801be7c:	6992      	ldr	r2, [r2, #24]
 801be7e:	4293      	cmp	r3, r2
 801be80:	d102      	bne.n	801be88 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801be82:	2401      	movs	r4, #1
 801be84:	f000 bc7c 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801be88:	2400      	movs	r4, #0
 801be8a:	f000 bc79 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801be8e:	2500      	movs	r5, #0
 801be90:	1d3b      	adds	r3, r7, #4
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	f103 040c 	add.w	r4, r3, #12
 801be98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801be9c:	4926      	ldr	r1, [pc, #152]	; (801bf38 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801be9e:	4618      	mov	r0, r3
 801bea0:	f7ee fb83 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bea4:	2601      	movs	r6, #1
 801bea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801beaa:	4619      	mov	r1, r3
 801beac:	4620      	mov	r0, r4
 801beae:	f7ee ff40 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801beb2:	4603      	mov	r3, r0
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d015      	beq.n	801bee4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801beb8:	463b      	mov	r3, r7
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	f103 040c 	add.w	r4, r3, #12
 801bec0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bec4:	491a      	ldr	r1, [pc, #104]	; (801bf30 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801bec6:	4618      	mov	r0, r3
 801bec8:	f7ee fb6f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801becc:	2501      	movs	r5, #1
 801bece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bed2:	4619      	mov	r1, r3
 801bed4:	4620      	mov	r0, r4
 801bed6:	f7ee ff2c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801beda:	4603      	mov	r3, r0
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d001      	beq.n	801bee4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801bee0:	2401      	movs	r4, #1
 801bee2:	e000      	b.n	801bee6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801bee4:	2400      	movs	r4, #0
 801bee6:	2d00      	cmp	r5, #0
 801bee8:	d004      	beq.n	801bef4 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801beea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801beee:	4618      	mov	r0, r3
 801bef0:	f7ee ff13 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bef4:	2e00      	cmp	r6, #0
 801bef6:	d004      	beq.n	801bf02 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801bef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801befc:	4618      	mov	r0, r3
 801befe:	f7ee ff0c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bf02:	2c00      	cmp	r4, #0
 801bf04:	d01a      	beq.n	801bf3c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801bf06:	463b      	mov	r3, r7
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	699b      	ldr	r3, [r3, #24]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	db0a      	blt.n	801bf26 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801bf10:	1d3b      	adds	r3, r7, #4
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	699b      	ldr	r3, [r3, #24]
 801bf16:	463a      	mov	r2, r7
 801bf18:	6812      	ldr	r2, [r2, #0]
 801bf1a:	6992      	ldr	r2, [r2, #24]
 801bf1c:	4293      	cmp	r3, r2
 801bf1e:	d102      	bne.n	801bf26 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801bf20:	2401      	movs	r4, #1
 801bf22:	f000 bc2d 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bf26:	2400      	movs	r4, #0
 801bf28:	f000 bc2a 	b.w	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bf2c:	08023a78 	.word	0x08023a78
 801bf30:	08023a5c 	.word	0x08023a5c
 801bf34:	08023a68 	.word	0x08023a68
 801bf38:	08023a84 	.word	0x08023a84
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801bf3c:	2500      	movs	r5, #0
 801bf3e:	1d3b      	adds	r3, r7, #4
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	f103 040c 	add.w	r4, r3, #12
 801bf46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bf4a:	49b8      	ldr	r1, [pc, #736]	; (801c22c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	f7ee fb2c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bf52:	2601      	movs	r6, #1
 801bf54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bf58:	4619      	mov	r1, r3
 801bf5a:	4620      	mov	r0, r4
 801bf5c:	f7ee fee9 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bf60:	4603      	mov	r3, r0
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d015      	beq.n	801bf92 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801bf66:	463b      	mov	r3, r7
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	f103 040c 	add.w	r4, r3, #12
 801bf6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bf72:	49af      	ldr	r1, [pc, #700]	; (801c230 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801bf74:	4618      	mov	r0, r3
 801bf76:	f7ee fb18 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bf7a:	2501      	movs	r5, #1
 801bf7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bf80:	4619      	mov	r1, r3
 801bf82:	4620      	mov	r0, r4
 801bf84:	f7ee fed5 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bf88:	4603      	mov	r3, r0
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d001      	beq.n	801bf92 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801bf8e:	2401      	movs	r4, #1
 801bf90:	e000      	b.n	801bf94 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801bf92:	2400      	movs	r4, #0
 801bf94:	2d00      	cmp	r5, #0
 801bf96:	d004      	beq.n	801bfa2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801bf98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	f7ee febc 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bfa2:	2e00      	cmp	r6, #0
 801bfa4:	d004      	beq.n	801bfb0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801bfa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f7ee feb5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801bfb0:	2c00      	cmp	r4, #0
 801bfb2:	d010      	beq.n	801bfd6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801bfb4:	1d3b      	adds	r3, r7, #4
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	699b      	ldr	r3, [r3, #24]
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	db09      	blt.n	801bfd2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801bfbe:	1d3b      	adds	r3, r7, #4
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	699b      	ldr	r3, [r3, #24]
 801bfc4:	463a      	mov	r2, r7
 801bfc6:	6812      	ldr	r2, [r2, #0]
 801bfc8:	6992      	ldr	r2, [r2, #24]
 801bfca:	4293      	cmp	r3, r2
 801bfcc:	d101      	bne.n	801bfd2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801bfce:	2401      	movs	r4, #1
 801bfd0:	e3d6      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bfd2:	2400      	movs	r4, #0
 801bfd4:	e3d4      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801bfd6:	2500      	movs	r5, #0
 801bfd8:	1d3b      	adds	r3, r7, #4
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	f103 040c 	add.w	r4, r3, #12
 801bfe0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bfe4:	4993      	ldr	r1, [pc, #588]	; (801c234 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	f7ee fadf 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801bfec:	2601      	movs	r6, #1
 801bfee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bff2:	4619      	mov	r1, r3
 801bff4:	4620      	mov	r0, r4
 801bff6:	f7ee fe9c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801bffa:	4603      	mov	r3, r0
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d015      	beq.n	801c02c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c000:	463b      	mov	r3, r7
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	f103 040c 	add.w	r4, r3, #12
 801c008:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c00c:	498a      	ldr	r1, [pc, #552]	; (801c238 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c00e:	4618      	mov	r0, r3
 801c010:	f7ee facb 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c014:	2501      	movs	r5, #1
 801c016:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c01a:	4619      	mov	r1, r3
 801c01c:	4620      	mov	r0, r4
 801c01e:	f7ee fe88 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c022:	4603      	mov	r3, r0
 801c024:	2b00      	cmp	r3, #0
 801c026:	d001      	beq.n	801c02c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c028:	2401      	movs	r4, #1
 801c02a:	e000      	b.n	801c02e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801c02c:	2400      	movs	r4, #0
 801c02e:	2d00      	cmp	r5, #0
 801c030:	d004      	beq.n	801c03c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801c032:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c036:	4618      	mov	r0, r3
 801c038:	f7ee fe6f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c03c:	2e00      	cmp	r6, #0
 801c03e:	d004      	beq.n	801c04a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801c040:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c044:	4618      	mov	r0, r3
 801c046:	f7ee fe68 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c04a:	2c00      	cmp	r4, #0
 801c04c:	d010      	beq.n	801c070 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801c04e:	463b      	mov	r3, r7
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	699b      	ldr	r3, [r3, #24]
 801c054:	2b00      	cmp	r3, #0
 801c056:	db09      	blt.n	801c06c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c058:	1d3b      	adds	r3, r7, #4
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	699b      	ldr	r3, [r3, #24]
 801c05e:	463a      	mov	r2, r7
 801c060:	6812      	ldr	r2, [r2, #0]
 801c062:	6992      	ldr	r2, [r2, #24]
 801c064:	4293      	cmp	r3, r2
 801c066:	d101      	bne.n	801c06c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c068:	2401      	movs	r4, #1
 801c06a:	e389      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c06c:	2400      	movs	r4, #0
 801c06e:	e387      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801c070:	2500      	movs	r5, #0
 801c072:	1d3b      	adds	r3, r7, #4
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	f103 040c 	add.w	r4, r3, #12
 801c07a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c07e:	496e      	ldr	r1, [pc, #440]	; (801c238 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c080:	4618      	mov	r0, r3
 801c082:	f7ee fa92 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c086:	2601      	movs	r6, #1
 801c088:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c08c:	4619      	mov	r1, r3
 801c08e:	4620      	mov	r0, r4
 801c090:	f7ee fe4f 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c094:	4603      	mov	r3, r0
 801c096:	2b00      	cmp	r3, #0
 801c098:	d015      	beq.n	801c0c6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c09a:	463b      	mov	r3, r7
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	f103 040c 	add.w	r4, r3, #12
 801c0a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c0a6:	4963      	ldr	r1, [pc, #396]	; (801c234 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f7ee fa7e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c0ae:	2501      	movs	r5, #1
 801c0b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f7ee fe3b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c0bc:	4603      	mov	r3, r0
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d001      	beq.n	801c0c6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c0c2:	2401      	movs	r4, #1
 801c0c4:	e000      	b.n	801c0c8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801c0c6:	2400      	movs	r4, #0
 801c0c8:	2d00      	cmp	r5, #0
 801c0ca:	d004      	beq.n	801c0d6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801c0cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	f7ee fe22 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c0d6:	2e00      	cmp	r6, #0
 801c0d8:	d004      	beq.n	801c0e4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801c0da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c0de:	4618      	mov	r0, r3
 801c0e0:	f7ee fe1b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c0e4:	2c00      	cmp	r4, #0
 801c0e6:	d010      	beq.n	801c10a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801c0e8:	1d3b      	adds	r3, r7, #4
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	699b      	ldr	r3, [r3, #24]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	db09      	blt.n	801c106 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c0f2:	1d3b      	adds	r3, r7, #4
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	699b      	ldr	r3, [r3, #24]
 801c0f8:	463a      	mov	r2, r7
 801c0fa:	6812      	ldr	r2, [r2, #0]
 801c0fc:	6992      	ldr	r2, [r2, #24]
 801c0fe:	4293      	cmp	r3, r2
 801c100:	d101      	bne.n	801c106 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c102:	2401      	movs	r4, #1
 801c104:	e33c      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c106:	2400      	movs	r4, #0
 801c108:	e33a      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801c10a:	2500      	movs	r5, #0
 801c10c:	1d3b      	adds	r3, r7, #4
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	f103 040c 	add.w	r4, r3, #12
 801c114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c118:	4946      	ldr	r1, [pc, #280]	; (801c234 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c11a:	4618      	mov	r0, r3
 801c11c:	f7ee fa45 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c120:	2601      	movs	r6, #1
 801c122:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c126:	4619      	mov	r1, r3
 801c128:	4620      	mov	r0, r4
 801c12a:	f7ee fe02 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c12e:	4603      	mov	r3, r0
 801c130:	2b00      	cmp	r3, #0
 801c132:	d015      	beq.n	801c160 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c134:	463b      	mov	r3, r7
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	f103 040c 	add.w	r4, r3, #12
 801c13c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c140:	493b      	ldr	r1, [pc, #236]	; (801c230 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c142:	4618      	mov	r0, r3
 801c144:	f7ee fa31 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c148:	2501      	movs	r5, #1
 801c14a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c14e:	4619      	mov	r1, r3
 801c150:	4620      	mov	r0, r4
 801c152:	f7ee fdee 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c156:	4603      	mov	r3, r0
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d001      	beq.n	801c160 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c15c:	2401      	movs	r4, #1
 801c15e:	e000      	b.n	801c162 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801c160:	2400      	movs	r4, #0
 801c162:	2d00      	cmp	r5, #0
 801c164:	d004      	beq.n	801c170 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801c166:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c16a:	4618      	mov	r0, r3
 801c16c:	f7ee fdd5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c170:	2e00      	cmp	r6, #0
 801c172:	d004      	beq.n	801c17e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801c174:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c178:	4618      	mov	r0, r3
 801c17a:	f7ee fdce 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c17e:	2c00      	cmp	r4, #0
 801c180:	d00b      	beq.n	801c19a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801c182:	1d3b      	adds	r3, r7, #4
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	699a      	ldr	r2, [r3, #24]
 801c188:	463b      	mov	r3, r7
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	699b      	ldr	r3, [r3, #24]
 801c18e:	429a      	cmp	r2, r3
 801c190:	bf0c      	ite	eq
 801c192:	2301      	moveq	r3, #1
 801c194:	2300      	movne	r3, #0
 801c196:	b2dc      	uxtb	r4, r3
 801c198:	e2f2      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801c19a:	2500      	movs	r5, #0
 801c19c:	1d3b      	adds	r3, r7, #4
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	f103 040c 	add.w	r4, r3, #12
 801c1a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c1a8:	4921      	ldr	r1, [pc, #132]	; (801c230 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	f7ee f9fd 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c1b0:	2601      	movs	r6, #1
 801c1b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c1b6:	4619      	mov	r1, r3
 801c1b8:	4620      	mov	r0, r4
 801c1ba:	f7ee fdba 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c1be:	4603      	mov	r3, r0
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d015      	beq.n	801c1f0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801c1c4:	463b      	mov	r3, r7
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	f103 040c 	add.w	r4, r3, #12
 801c1cc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c1d0:	4918      	ldr	r1, [pc, #96]	; (801c234 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	f7ee f9e9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c1d8:	2501      	movs	r5, #1
 801c1da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c1de:	4619      	mov	r1, r3
 801c1e0:	4620      	mov	r0, r4
 801c1e2:	f7ee fda6 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d001      	beq.n	801c1f0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801c1ec:	2401      	movs	r4, #1
 801c1ee:	e000      	b.n	801c1f2 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801c1f0:	2400      	movs	r4, #0
 801c1f2:	2d00      	cmp	r5, #0
 801c1f4:	d004      	beq.n	801c200 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801c1f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c1fa:	4618      	mov	r0, r3
 801c1fc:	f7ee fd8d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c200:	2e00      	cmp	r6, #0
 801c202:	d004      	beq.n	801c20e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801c204:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c208:	4618      	mov	r0, r3
 801c20a:	f7ee fd86 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c20e:	2c00      	cmp	r4, #0
 801c210:	d014      	beq.n	801c23c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801c212:	1d3b      	adds	r3, r7, #4
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	699a      	ldr	r2, [r3, #24]
 801c218:	463b      	mov	r3, r7
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	699b      	ldr	r3, [r3, #24]
 801c21e:	429a      	cmp	r2, r3
 801c220:	bf0c      	ite	eq
 801c222:	2301      	moveq	r3, #1
 801c224:	2300      	movne	r3, #0
 801c226:	b2dc      	uxtb	r4, r3
 801c228:	e2aa      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c22a:	bf00      	nop
 801c22c:	08023a5c 	.word	0x08023a5c
 801c230:	08023a84 	.word	0x08023a84
 801c234:	08023a68 	.word	0x08023a68
 801c238:	08023a78 	.word	0x08023a78
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801c23c:	2500      	movs	r5, #0
 801c23e:	1d3b      	adds	r3, r7, #4
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	f103 040c 	add.w	r4, r3, #12
 801c246:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c24a:	49ae      	ldr	r1, [pc, #696]	; (801c504 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c24c:	4618      	mov	r0, r3
 801c24e:	f7ee f9ac 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c252:	2601      	movs	r6, #1
 801c254:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c258:	4619      	mov	r1, r3
 801c25a:	4620      	mov	r0, r4
 801c25c:	f7ee fd69 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c260:	4603      	mov	r3, r0
 801c262:	2b00      	cmp	r3, #0
 801c264:	d015      	beq.n	801c292 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801c266:	463b      	mov	r3, r7
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	f103 040c 	add.w	r4, r3, #12
 801c26e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c272:	49a5      	ldr	r1, [pc, #660]	; (801c508 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c274:	4618      	mov	r0, r3
 801c276:	f7ee f998 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c27a:	2501      	movs	r5, #1
 801c27c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c280:	4619      	mov	r1, r3
 801c282:	4620      	mov	r0, r4
 801c284:	f7ee fd55 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c288:	4603      	mov	r3, r0
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d001      	beq.n	801c292 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801c28e:	2401      	movs	r4, #1
 801c290:	e000      	b.n	801c294 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801c292:	2400      	movs	r4, #0
 801c294:	2d00      	cmp	r5, #0
 801c296:	d004      	beq.n	801c2a2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801c298:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c29c:	4618      	mov	r0, r3
 801c29e:	f7ee fd3c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c2a2:	2e00      	cmp	r6, #0
 801c2a4:	d004      	beq.n	801c2b0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801c2a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	f7ee fd35 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c2b0:	2c00      	cmp	r4, #0
 801c2b2:	d010      	beq.n	801c2d6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801c2b4:	1d3b      	adds	r3, r7, #4
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	699b      	ldr	r3, [r3, #24]
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	db09      	blt.n	801c2d2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801c2be:	1d3b      	adds	r3, r7, #4
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	699b      	ldr	r3, [r3, #24]
 801c2c4:	463a      	mov	r2, r7
 801c2c6:	6812      	ldr	r2, [r2, #0]
 801c2c8:	6992      	ldr	r2, [r2, #24]
 801c2ca:	4293      	cmp	r3, r2
 801c2cc:	d101      	bne.n	801c2d2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801c2ce:	2401      	movs	r4, #1
 801c2d0:	e256      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c2d2:	2400      	movs	r4, #0
 801c2d4:	e254      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801c2d6:	2500      	movs	r5, #0
 801c2d8:	1d3b      	adds	r3, r7, #4
 801c2da:	681b      	ldr	r3, [r3, #0]
 801c2dc:	f103 040c 	add.w	r4, r3, #12
 801c2e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c2e4:	4988      	ldr	r1, [pc, #544]	; (801c508 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	f7ee f95f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c2ec:	2601      	movs	r6, #1
 801c2ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c2f2:	4619      	mov	r1, r3
 801c2f4:	4620      	mov	r0, r4
 801c2f6:	f7ee fd1c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c2fa:	4603      	mov	r3, r0
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d015      	beq.n	801c32c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801c300:	463b      	mov	r3, r7
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	f103 040c 	add.w	r4, r3, #12
 801c308:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c30c:	497d      	ldr	r1, [pc, #500]	; (801c504 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c30e:	4618      	mov	r0, r3
 801c310:	f7ee f94b 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c314:	2501      	movs	r5, #1
 801c316:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c31a:	4619      	mov	r1, r3
 801c31c:	4620      	mov	r0, r4
 801c31e:	f7ee fd08 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c322:	4603      	mov	r3, r0
 801c324:	2b00      	cmp	r3, #0
 801c326:	d001      	beq.n	801c32c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801c328:	2401      	movs	r4, #1
 801c32a:	e000      	b.n	801c32e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801c32c:	2400      	movs	r4, #0
 801c32e:	2d00      	cmp	r5, #0
 801c330:	d004      	beq.n	801c33c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801c332:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c336:	4618      	mov	r0, r3
 801c338:	f7ee fcef 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c33c:	2e00      	cmp	r6, #0
 801c33e:	d004      	beq.n	801c34a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801c340:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c344:	4618      	mov	r0, r3
 801c346:	f7ee fce8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c34a:	2c00      	cmp	r4, #0
 801c34c:	d010      	beq.n	801c370 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801c34e:	463b      	mov	r3, r7
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	699b      	ldr	r3, [r3, #24]
 801c354:	2b00      	cmp	r3, #0
 801c356:	db09      	blt.n	801c36c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801c358:	1d3b      	adds	r3, r7, #4
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	699b      	ldr	r3, [r3, #24]
 801c35e:	463a      	mov	r2, r7
 801c360:	6812      	ldr	r2, [r2, #0]
 801c362:	6992      	ldr	r2, [r2, #24]
 801c364:	4293      	cmp	r3, r2
 801c366:	d101      	bne.n	801c36c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801c368:	2401      	movs	r4, #1
 801c36a:	e209      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c36c:	2400      	movs	r4, #0
 801c36e:	e207      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801c370:	1d3b      	adds	r3, r7, #4
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	f103 020c 	add.w	r2, r3, #12
 801c378:	463b      	mov	r3, r7
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	330c      	adds	r3, #12
 801c37e:	4619      	mov	r1, r3
 801c380:	4610      	mov	r0, r2
 801c382:	f7ee fd1b 	bl	800adbc <_ZneRK12SimpleStringS1_>
 801c386:	4603      	mov	r3, r0
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d001      	beq.n	801c390 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801c38c:	2400      	movs	r4, #0
 801c38e:	e1f7      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801c390:	1d3b      	adds	r3, r7, #4
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	f103 040c 	add.w	r4, r3, #12
 801c398:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c39c:	495b      	ldr	r1, [pc, #364]	; (801c50c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801c39e:	4618      	mov	r0, r3
 801c3a0:	f7ee f903 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c3a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c3a8:	4619      	mov	r1, r3
 801c3aa:	4620      	mov	r0, r4
 801c3ac:	f7ee fcc1 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	461c      	mov	r4, r3
 801c3b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f7ee fcae 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c3be:	2c00      	cmp	r4, #0
 801c3c0:	d00b      	beq.n	801c3da <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801c3c2:	1d3b      	adds	r3, r7, #4
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	7e1a      	ldrb	r2, [r3, #24]
 801c3c8:	463b      	mov	r3, r7
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	7e1b      	ldrb	r3, [r3, #24]
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	bf0c      	ite	eq
 801c3d2:	2301      	moveq	r3, #1
 801c3d4:	2300      	movne	r3, #0
 801c3d6:	b2dc      	uxtb	r4, r3
 801c3d8:	e1d2      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801c3da:	1d3b      	adds	r3, r7, #4
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	f103 040c 	add.w	r4, r3, #12
 801c3e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c3e6:	494a      	ldr	r1, [pc, #296]	; (801c510 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	f7ee f8de 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c3ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c3f2:	4619      	mov	r1, r3
 801c3f4:	4620      	mov	r0, r4
 801c3f6:	f7ee fc9c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c3fa:	4603      	mov	r3, r0
 801c3fc:	461c      	mov	r4, r3
 801c3fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c402:	4618      	mov	r0, r3
 801c404:	f7ee fc89 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c408:	2c00      	cmp	r4, #0
 801c40a:	d00b      	beq.n	801c424 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801c40c:	1d3b      	adds	r3, r7, #4
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	699a      	ldr	r2, [r3, #24]
 801c412:	463b      	mov	r3, r7
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	699b      	ldr	r3, [r3, #24]
 801c418:	429a      	cmp	r2, r3
 801c41a:	bf0c      	ite	eq
 801c41c:	2301      	moveq	r3, #1
 801c41e:	2300      	movne	r3, #0
 801c420:	b2dc      	uxtb	r4, r3
 801c422:	e1ad      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801c424:	1d3b      	adds	r3, r7, #4
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	f103 040c 	add.w	r4, r3, #12
 801c42c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c430:	4938      	ldr	r1, [pc, #224]	; (801c514 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801c432:	4618      	mov	r0, r3
 801c434:	f7ee f8b9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c438:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c43c:	4619      	mov	r1, r3
 801c43e:	4620      	mov	r0, r4
 801c440:	f7ee fc77 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c444:	4603      	mov	r3, r0
 801c446:	461c      	mov	r4, r3
 801c448:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c44c:	4618      	mov	r0, r3
 801c44e:	f7ee fc64 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c452:	2c00      	cmp	r4, #0
 801c454:	d00b      	beq.n	801c46e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801c456:	1d3b      	adds	r3, r7, #4
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	699a      	ldr	r2, [r3, #24]
 801c45c:	463b      	mov	r3, r7
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	699b      	ldr	r3, [r3, #24]
 801c462:	429a      	cmp	r2, r3
 801c464:	bf0c      	ite	eq
 801c466:	2301      	moveq	r3, #1
 801c468:	2300      	movne	r3, #0
 801c46a:	b2dc      	uxtb	r4, r3
 801c46c:	e188      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801c46e:	1d3b      	adds	r3, r7, #4
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	f103 040c 	add.w	r4, r3, #12
 801c476:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c47a:	4922      	ldr	r1, [pc, #136]	; (801c504 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c47c:	4618      	mov	r0, r3
 801c47e:	f7ee f894 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c482:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c486:	4619      	mov	r1, r3
 801c488:	4620      	mov	r0, r4
 801c48a:	f7ee fc52 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c48e:	4603      	mov	r3, r0
 801c490:	461c      	mov	r4, r3
 801c492:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c496:	4618      	mov	r0, r3
 801c498:	f7ee fc3f 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c49c:	2c00      	cmp	r4, #0
 801c49e:	d00b      	beq.n	801c4b8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801c4a0:	1d3b      	adds	r3, r7, #4
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	699a      	ldr	r2, [r3, #24]
 801c4a6:	463b      	mov	r3, r7
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	699b      	ldr	r3, [r3, #24]
 801c4ac:	429a      	cmp	r2, r3
 801c4ae:	bf0c      	ite	eq
 801c4b0:	2301      	moveq	r3, #1
 801c4b2:	2300      	movne	r3, #0
 801c4b4:	b2dc      	uxtb	r4, r3
 801c4b6:	e163      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801c4b8:	1d3b      	adds	r3, r7, #4
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f103 040c 	add.w	r4, r3, #12
 801c4c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c4c4:	4910      	ldr	r1, [pc, #64]	; (801c508 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	f7ee f86f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c4cc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c4d0:	4619      	mov	r1, r3
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f7ee fc2d 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c4d8:	4603      	mov	r3, r0
 801c4da:	461c      	mov	r4, r3
 801c4dc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	f7ee fc1a 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c4e6:	2c00      	cmp	r4, #0
 801c4e8:	d016      	beq.n	801c518 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801c4ea:	1d3b      	adds	r3, r7, #4
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	699a      	ldr	r2, [r3, #24]
 801c4f0:	463b      	mov	r3, r7
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	699b      	ldr	r3, [r3, #24]
 801c4f6:	429a      	cmp	r2, r3
 801c4f8:	bf0c      	ite	eq
 801c4fa:	2301      	moveq	r3, #1
 801c4fc:	2300      	movne	r3, #0
 801c4fe:	b2dc      	uxtb	r4, r3
 801c500:	e13e      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c502:	bf00      	nop
 801c504:	08023a78 	.word	0x08023a78
 801c508:	08023a84 	.word	0x08023a84
 801c50c:	08023a60 	.word	0x08023a60
 801c510:	08023a5c 	.word	0x08023a5c
 801c514:	08023a68 	.word	0x08023a68
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801c518:	1d3b      	adds	r3, r7, #4
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	f103 040c 	add.w	r4, r3, #12
 801c520:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c524:	4999      	ldr	r1, [pc, #612]	; (801c78c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801c526:	4618      	mov	r0, r3
 801c528:	f7ee f83f 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c52c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c530:	4619      	mov	r1, r3
 801c532:	4620      	mov	r0, r4
 801c534:	f7ee fbfd 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c538:	4603      	mov	r3, r0
 801c53a:	461c      	mov	r4, r3
 801c53c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c540:	4618      	mov	r0, r3
 801c542:	f7ee fbea 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c546:	2c00      	cmp	r4, #0
 801c548:	d026      	beq.n	801c598 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801c54a:	1d3b      	adds	r3, r7, #4
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	699a      	ldr	r2, [r3, #24]
 801c550:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c554:	4611      	mov	r1, r2
 801c556:	4618      	mov	r0, r3
 801c558:	f7ee f827 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c55c:	463b      	mov	r3, r7
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	699a      	ldr	r2, [r3, #24]
 801c562:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c566:	4611      	mov	r1, r2
 801c568:	4618      	mov	r0, r3
 801c56a:	f7ee f81e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c56e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801c572:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c576:	4611      	mov	r1, r2
 801c578:	4618      	mov	r0, r3
 801c57a:	f7ee fbda 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c57e:	4603      	mov	r3, r0
 801c580:	461c      	mov	r4, r3
 801c582:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c586:	4618      	mov	r0, r3
 801c588:	f7ee fbc7 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c58c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c590:	4618      	mov	r0, r3
 801c592:	f7ee fbc2 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c596:	e0f3      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801c598:	1d3b      	adds	r3, r7, #4
 801c59a:	681b      	ldr	r3, [r3, #0]
 801c59c:	f103 040c 	add.w	r4, r3, #12
 801c5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c5a4:	497a      	ldr	r1, [pc, #488]	; (801c790 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801c5a6:	4618      	mov	r0, r3
 801c5a8:	f7ed ffff 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c5b0:	4619      	mov	r1, r3
 801c5b2:	4620      	mov	r0, r4
 801c5b4:	f7ee fbbd 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c5b8:	4603      	mov	r3, r0
 801c5ba:	461c      	mov	r4, r3
 801c5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c5c0:	4618      	mov	r0, r3
 801c5c2:	f7ee fbaa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c5c6:	2c00      	cmp	r4, #0
 801c5c8:	d00b      	beq.n	801c5e2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801c5ca:	1d3b      	adds	r3, r7, #4
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	699a      	ldr	r2, [r3, #24]
 801c5d0:	463b      	mov	r3, r7
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	699b      	ldr	r3, [r3, #24]
 801c5d6:	429a      	cmp	r2, r3
 801c5d8:	bf0c      	ite	eq
 801c5da:	2301      	moveq	r3, #1
 801c5dc:	2300      	movne	r3, #0
 801c5de:	b2dc      	uxtb	r4, r3
 801c5e0:	e0ce      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801c5e2:	1d3b      	adds	r3, r7, #4
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	f103 040c 	add.w	r4, r3, #12
 801c5ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c5ee:	4969      	ldr	r1, [pc, #420]	; (801c794 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7ed ffda 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c5f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c5fa:	4619      	mov	r1, r3
 801c5fc:	4620      	mov	r0, r4
 801c5fe:	f7ee fb98 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c602:	4603      	mov	r3, r0
 801c604:	461c      	mov	r4, r3
 801c606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c60a:	4618      	mov	r0, r3
 801c60c:	f7ee fb85 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c610:	2c00      	cmp	r4, #0
 801c612:	d00b      	beq.n	801c62c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801c614:	1d3b      	adds	r3, r7, #4
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	699a      	ldr	r2, [r3, #24]
 801c61a:	463b      	mov	r3, r7
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	699b      	ldr	r3, [r3, #24]
 801c620:	429a      	cmp	r2, r3
 801c622:	bf0c      	ite	eq
 801c624:	2301      	moveq	r3, #1
 801c626:	2300      	movne	r3, #0
 801c628:	b2dc      	uxtb	r4, r3
 801c62a:	e0a9      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801c62c:	1d3b      	adds	r3, r7, #4
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	f103 040c 	add.w	r4, r3, #12
 801c634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801c638:	4957      	ldr	r1, [pc, #348]	; (801c798 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801c63a:	4618      	mov	r0, r3
 801c63c:	f7ed ffb5 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c640:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801c644:	4619      	mov	r1, r3
 801c646:	4620      	mov	r0, r4
 801c648:	f7ee fb73 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c64c:	4603      	mov	r3, r0
 801c64e:	461c      	mov	r4, r3
 801c650:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801c654:	4618      	mov	r0, r3
 801c656:	f7ee fb60 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c65a:	2c00      	cmp	r4, #0
 801c65c:	d00b      	beq.n	801c676 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801c65e:	1d3b      	adds	r3, r7, #4
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	699a      	ldr	r2, [r3, #24]
 801c664:	463b      	mov	r3, r7
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	699b      	ldr	r3, [r3, #24]
 801c66a:	429a      	cmp	r2, r3
 801c66c:	bf0c      	ite	eq
 801c66e:	2301      	moveq	r3, #1
 801c670:	2300      	movne	r3, #0
 801c672:	b2dc      	uxtb	r4, r3
 801c674:	e084      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801c676:	1d3b      	adds	r3, r7, #4
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	f103 040c 	add.w	r4, r3, #12
 801c67e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c682:	4946      	ldr	r1, [pc, #280]	; (801c79c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801c684:	4618      	mov	r0, r3
 801c686:	f7ed ff90 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c68a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c68e:	4619      	mov	r1, r3
 801c690:	4620      	mov	r0, r4
 801c692:	f7ee fb4e 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c696:	4603      	mov	r3, r0
 801c698:	461c      	mov	r4, r3
 801c69a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f7ee fb3b 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c6a4:	2c00      	cmp	r4, #0
 801c6a6:	d01c      	beq.n	801c6e2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801c6a8:	1d3b      	adds	r3, r7, #4
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	ed93 7b06 	vldr	d7, [r3, #24]
 801c6b0:	463b      	mov	r3, r7
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	ed93 6b06 	vldr	d6, [r3, #24]
 801c6b8:	1d3b      	adds	r3, r7, #4
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	ed93 5b08 	vldr	d5, [r3, #32]
 801c6c0:	eeb0 2a45 	vmov.f32	s4, s10
 801c6c4:	eef0 2a65 	vmov.f32	s5, s11
 801c6c8:	eeb0 1a46 	vmov.f32	s2, s12
 801c6cc:	eef0 1a66 	vmov.f32	s3, s13
 801c6d0:	eeb0 0a47 	vmov.f32	s0, s14
 801c6d4:	eef0 0a67 	vmov.f32	s1, s15
 801c6d8:	f7f3 fe1a 	bl	8010310 <_Z13doubles_equalddd>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	461c      	mov	r4, r3
 801c6e0:	e04e      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801c6e2:	1d3b      	adds	r3, r7, #4
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	f103 040c 	add.w	r4, r3, #12
 801c6ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c6ee:	492c      	ldr	r1, [pc, #176]	; (801c7a0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7ed ff5a 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c6f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c6fa:	4619      	mov	r1, r3
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	f7ee fb18 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c702:	4603      	mov	r3, r0
 801c704:	461c      	mov	r4, r3
 801c706:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7ee fb05 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c710:	2c00      	cmp	r4, #0
 801c712:	d01c      	beq.n	801c74e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801c714:	1d3b      	adds	r3, r7, #4
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c71a:	463b      	mov	r3, r7
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c720:	429a      	cmp	r2, r3
 801c722:	d001      	beq.n	801c728 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801c724:	2400      	movs	r4, #0
 801c726:	e02b      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801c728:	1d3b      	adds	r3, r7, #4
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	6998      	ldr	r0, [r3, #24]
 801c72e:	463b      	mov	r3, r7
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	6999      	ldr	r1, [r3, #24]
 801c734:	1d3b      	adds	r3, r7, #4
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c73a:	461a      	mov	r2, r3
 801c73c:	f7ed fe54 	bl	800a3e8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801c740:	4603      	mov	r3, r0
 801c742:	2b00      	cmp	r3, #0
 801c744:	bf0c      	ite	eq
 801c746:	2301      	moveq	r3, #1
 801c748:	2300      	movne	r3, #0
 801c74a:	b2dc      	uxtb	r4, r3
 801c74c:	e018      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801c74e:	1d3b      	adds	r3, r7, #4
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c754:	2b00      	cmp	r3, #0
 801c756:	d012      	beq.n	801c77e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801c758:	1d3b      	adds	r3, r7, #4
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c75e:	1d3b      	adds	r3, r7, #4
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	3308      	adds	r3, #8
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	1d3a      	adds	r2, r7, #4
 801c76c:	6812      	ldr	r2, [r2, #0]
 801c76e:	6991      	ldr	r1, [r2, #24]
 801c770:	463a      	mov	r2, r7
 801c772:	6812      	ldr	r2, [r2, #0]
 801c774:	6992      	ldr	r2, [r2, #24]
 801c776:	4798      	blx	r3
 801c778:	4603      	mov	r3, r0
 801c77a:	461c      	mov	r4, r3
 801c77c:	e000      	b.n	801c780 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801c77e:	2400      	movs	r4, #0
 801c780:	4623      	mov	r3, r4
}
 801c782:	4618      	mov	r0, r3
 801c784:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801c788:	46bd      	mov	sp, r7
 801c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c78c:	08023b28 	.word	0x08023b28
 801c790:	08023b08 	.word	0x08023b08
 801c794:	08023b10 	.word	0x08023b10
 801c798:	08023b1c 	.word	0x08023b1c
 801c79c:	08023b00 	.word	0x08023b00
 801c7a0:	08023b34 	.word	0x08023b34

0801c7a4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801c7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7a6:	b087      	sub	sp, #28
 801c7a8:	af00      	add	r7, sp, #0
 801c7aa:	6078      	str	r0, [r7, #4]
 801c7ac:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	f103 020c 	add.w	r2, r3, #12
 801c7b4:	683b      	ldr	r3, [r7, #0]
 801c7b6:	330c      	adds	r3, #12
 801c7b8:	4619      	mov	r1, r3
 801c7ba:	4610      	mov	r0, r2
 801c7bc:	f7ee fab9 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c7c0:	4603      	mov	r3, r0
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d001      	beq.n	801c7ca <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	e03c      	b.n	801c844 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801c7ca:	2500      	movs	r5, #0
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	f103 040c 	add.w	r4, r3, #12
 801c7d2:	f107 0308 	add.w	r3, r7, #8
 801c7d6:	491d      	ldr	r1, [pc, #116]	; (801c84c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801c7d8:	4618      	mov	r0, r3
 801c7da:	f7ed fee6 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c7de:	2601      	movs	r6, #1
 801c7e0:	f107 0308 	add.w	r3, r7, #8
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	f7ee faa3 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c7ec:	4603      	mov	r3, r0
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d014      	beq.n	801c81c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	f103 040c 	add.w	r4, r3, #12
 801c7f8:	f107 0310 	add.w	r3, r7, #16
 801c7fc:	4914      	ldr	r1, [pc, #80]	; (801c850 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7ed fed3 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c804:	2501      	movs	r5, #1
 801c806:	f107 0310 	add.w	r3, r7, #16
 801c80a:	4619      	mov	r1, r3
 801c80c:	4620      	mov	r0, r4
 801c80e:	f7ee fa90 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c812:	4603      	mov	r3, r0
 801c814:	2b00      	cmp	r3, #0
 801c816:	d001      	beq.n	801c81c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801c818:	2401      	movs	r4, #1
 801c81a:	e000      	b.n	801c81e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801c81c:	2400      	movs	r4, #0
 801c81e:	2d00      	cmp	r5, #0
 801c820:	d004      	beq.n	801c82c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801c822:	f107 0310 	add.w	r3, r7, #16
 801c826:	4618      	mov	r0, r3
 801c828:	f7ee fa77 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c82c:	2e00      	cmp	r6, #0
 801c82e:	d004      	beq.n	801c83a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801c830:	f107 0308 	add.w	r3, r7, #8
 801c834:	4618      	mov	r0, r3
 801c836:	f7ee fa70 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c83a:	2c00      	cmp	r4, #0
 801c83c:	d001      	beq.n	801c842 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801c83e:	2301      	movs	r3, #1
 801c840:	e000      	b.n	801c844 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801c842:	2300      	movs	r3, #0
}
 801c844:	4618      	mov	r0, r3
 801c846:	371c      	adds	r7, #28
 801c848:	46bd      	mov	sp, r7
 801c84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c84c:	08023b10 	.word	0x08023b10
 801c850:	08023b08 	.word	0x08023b08

0801c854 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801c854:	b590      	push	{r4, r7, lr}
 801c856:	b0b9      	sub	sp, #228	; 0xe4
 801c858:	af00      	add	r7, sp, #0
 801c85a:	6078      	str	r0, [r7, #4]
 801c85c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801c85e:	683b      	ldr	r3, [r7, #0]
 801c860:	f103 040c 	add.w	r4, r3, #12
 801c864:	f107 0308 	add.w	r3, r7, #8
 801c868:	49d4      	ldr	r1, [pc, #848]	; (801cbbc <_ZNK14MockNamedValue8toStringEv+0x368>)
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7ed fe9d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c870:	f107 0308 	add.w	r3, r7, #8
 801c874:	4619      	mov	r1, r3
 801c876:	4620      	mov	r0, r4
 801c878:	f7ee fa5b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c87c:	4603      	mov	r3, r0
 801c87e:	461c      	mov	r4, r3
 801c880:	f107 0308 	add.w	r3, r7, #8
 801c884:	4618      	mov	r0, r3
 801c886:	f7ee fa48 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c88a:	2c00      	cmp	r4, #0
 801c88c:	d007      	beq.n	801c89e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801c88e:	683b      	ldr	r3, [r7, #0]
 801c890:	7e1a      	ldrb	r2, [r3, #24]
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	4611      	mov	r1, r2
 801c896:	4618      	mov	r0, r3
 801c898:	f7ee fcb0 	bl	800b1fc <_Z10StringFromb>
 801c89c:	e23f      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801c89e:	683b      	ldr	r3, [r7, #0]
 801c8a0:	f103 040c 	add.w	r4, r3, #12
 801c8a4:	f107 0310 	add.w	r3, r7, #16
 801c8a8:	49c5      	ldr	r1, [pc, #788]	; (801cbc0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7ed fe7d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c8b0:	f107 0310 	add.w	r3, r7, #16
 801c8b4:	4619      	mov	r1, r3
 801c8b6:	4620      	mov	r0, r4
 801c8b8:	f7ee fa3b 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c8bc:	4603      	mov	r3, r0
 801c8be:	461c      	mov	r4, r3
 801c8c0:	f107 0310 	add.w	r3, r7, #16
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	f7ee fa28 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c8ca:	2c00      	cmp	r4, #0
 801c8cc:	d03b      	beq.n	801c946 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	699a      	ldr	r2, [r3, #24]
 801c8d2:	f107 0320 	add.w	r3, r7, #32
 801c8d6:	4611      	mov	r1, r2
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f7ee fce5 	bl	800b2a8 <_Z10StringFromi>
 801c8de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c8e2:	49b8      	ldr	r1, [pc, #736]	; (801cbc4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7ed fe60 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c8ea:	f107 0318 	add.w	r3, r7, #24
 801c8ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c8f2:	f107 0120 	add.w	r1, r7, #32
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	f7ee fa71 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	699a      	ldr	r2, [r3, #24]
 801c900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c904:	4611      	mov	r1, r2
 801c906:	4618      	mov	r0, r3
 801c908:	f7ee fdbe 	bl	800b488 <_Z30BracketsFormattedHexStringFromi>
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c912:	f107 0118 	add.w	r1, r7, #24
 801c916:	4618      	mov	r0, r3
 801c918:	f7ee fa61 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801c91c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c920:	4618      	mov	r0, r3
 801c922:	f7ee f9fa 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c926:	f107 0318 	add.w	r3, r7, #24
 801c92a:	4618      	mov	r0, r3
 801c92c:	f7ee f9f5 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c934:	4618      	mov	r0, r3
 801c936:	f7ee f9f0 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c93a:	f107 0320 	add.w	r3, r7, #32
 801c93e:	4618      	mov	r0, r3
 801c940:	f7ee f9eb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c944:	e1eb      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801c946:	683b      	ldr	r3, [r7, #0]
 801c948:	f103 040c 	add.w	r4, r3, #12
 801c94c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c950:	499d      	ldr	r1, [pc, #628]	; (801cbc8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801c952:	4618      	mov	r0, r3
 801c954:	f7ed fe29 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c95c:	4619      	mov	r1, r3
 801c95e:	4620      	mov	r0, r4
 801c960:	f7ee f9e7 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801c964:	4603      	mov	r3, r0
 801c966:	461c      	mov	r4, r3
 801c968:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c96c:	4618      	mov	r0, r3
 801c96e:	f7ee f9d4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c972:	2c00      	cmp	r4, #0
 801c974:	d03b      	beq.n	801c9ee <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801c976:	683b      	ldr	r3, [r7, #0]
 801c978:	699a      	ldr	r2, [r3, #24]
 801c97a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c97e:	4611      	mov	r1, r2
 801c980:	4618      	mov	r0, r3
 801c982:	f7ee fef9 	bl	800b778 <_Z10StringFromj>
 801c986:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c98a:	498e      	ldr	r1, [pc, #568]	; (801cbc4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c98c:	4618      	mov	r0, r3
 801c98e:	f7ed fe0c 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801c992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c996:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c99a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7ee fa1d 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801c9a4:	683b      	ldr	r3, [r7, #0]
 801c9a6:	699a      	ldr	r2, [r3, #24]
 801c9a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c9ac:	4611      	mov	r1, r2
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f7ee fd86 	bl	800b4c0 <_Z30BracketsFormattedHexStringFromj>
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c9ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801c9be:	4618      	mov	r0, r3
 801c9c0:	f7ee fa0d 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801c9c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	f7ee f9a6 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c9ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7ee f9a1 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c9d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c9dc:	4618      	mov	r0, r3
 801c9de:	f7ee f99c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c9e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c9e6:	4618      	mov	r0, r3
 801c9e8:	f7ee f997 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801c9ec:	e197      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801c9ee:	683b      	ldr	r3, [r7, #0]
 801c9f0:	f103 040c 	add.w	r4, r3, #12
 801c9f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c9f8:	4974      	ldr	r1, [pc, #464]	; (801cbcc <_ZNK14MockNamedValue8toStringEv+0x378>)
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	f7ed fdd5 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801ca00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ca04:	4619      	mov	r1, r3
 801ca06:	4620      	mov	r0, r4
 801ca08:	f7ee f993 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	461c      	mov	r4, r3
 801ca10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ca14:	4618      	mov	r0, r3
 801ca16:	f7ee f980 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801ca1a:	2c00      	cmp	r4, #0
 801ca1c:	d03b      	beq.n	801ca96 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801ca1e:	683b      	ldr	r3, [r7, #0]
 801ca20:	699a      	ldr	r2, [r3, #24]
 801ca22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ca26:	4611      	mov	r1, r2
 801ca28:	4618      	mov	r0, r3
 801ca2a:	f7ee fc4f 	bl	800b2cc <_Z10StringFroml>
 801ca2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ca32:	4964      	ldr	r1, [pc, #400]	; (801cbc4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801ca34:	4618      	mov	r0, r3
 801ca36:	f7ed fdb8 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801ca3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ca3e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801ca42:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801ca46:	4618      	mov	r0, r3
 801ca48:	f7ee f9c9 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801ca4c:	683b      	ldr	r3, [r7, #0]
 801ca4e:	699a      	ldr	r2, [r3, #24]
 801ca50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ca54:	4611      	mov	r1, r2
 801ca56:	4618      	mov	r0, r3
 801ca58:	f7ee fd4e 	bl	800b4f8 <_Z30BracketsFormattedHexStringFroml>
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801ca62:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7ee f9b9 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801ca6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ca70:	4618      	mov	r0, r3
 801ca72:	f7ee f952 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801ca76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7ee f94d 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801ca80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ca84:	4618      	mov	r0, r3
 801ca86:	f7ee f948 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801ca8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7ee f943 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801ca94:	e143      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801ca96:	683b      	ldr	r3, [r7, #0]
 801ca98:	f103 040c 	add.w	r4, r3, #12
 801ca9c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801caa0:	494b      	ldr	r1, [pc, #300]	; (801cbd0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801caa2:	4618      	mov	r0, r3
 801caa4:	f7ed fd81 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801caa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801caac:	4619      	mov	r1, r3
 801caae:	4620      	mov	r0, r4
 801cab0:	f7ee f93f 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cab4:	4603      	mov	r3, r0
 801cab6:	461c      	mov	r4, r3
 801cab8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801cabc:	4618      	mov	r0, r3
 801cabe:	f7ee f92c 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cac2:	2c00      	cmp	r4, #0
 801cac4:	d03b      	beq.n	801cb3e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801cac6:	683b      	ldr	r3, [r7, #0]
 801cac8:	699a      	ldr	r2, [r3, #24]
 801caca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cace:	4611      	mov	r1, r2
 801cad0:	4618      	mov	r0, r3
 801cad2:	f7ee fe63 	bl	800b79c <_Z10StringFromm>
 801cad6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cada:	493a      	ldr	r1, [pc, #232]	; (801cbc4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801cadc:	4618      	mov	r0, r3
 801cade:	f7ed fd64 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cae2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cae6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801caea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801caee:	4618      	mov	r0, r3
 801caf0:	f7ee f975 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801caf4:	683b      	ldr	r3, [r7, #0]
 801caf6:	699a      	ldr	r2, [r3, #24]
 801caf8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cafc:	4611      	mov	r1, r2
 801cafe:	4618      	mov	r0, r3
 801cb00:	f7ee fd16 	bl	800b530 <_Z30BracketsFormattedHexStringFromm>
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801cb0a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f7ee f965 	bl	800adde <_ZNK12SimpleStringplERKS_>
 801cb14:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cb18:	4618      	mov	r0, r3
 801cb1a:	f7ee f8fe 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cb1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801cb22:	4618      	mov	r0, r3
 801cb24:	f7ee f8f9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cb28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	f7ee f8f4 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cb32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cb36:	4618      	mov	r0, r3
 801cb38:	f7ee f8ef 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cb3c:	e0ef      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801cb3e:	683b      	ldr	r3, [r7, #0]
 801cb40:	f103 040c 	add.w	r4, r3, #12
 801cb44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb48:	4922      	ldr	r1, [pc, #136]	; (801cbd4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	f7ed fd2d 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cb50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb54:	4619      	mov	r1, r3
 801cb56:	4620      	mov	r0, r4
 801cb58:	f7ee f8eb 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	461c      	mov	r4, r3
 801cb60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7ee f8d8 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cb6a:	2c00      	cmp	r4, #0
 801cb6c:	d006      	beq.n	801cb7c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801cb6e:	683b      	ldr	r3, [r7, #0]
 801cb70:	699b      	ldr	r3, [r3, #24]
 801cb72:	4619      	mov	r1, r3
 801cb74:	6878      	ldr	r0, [r7, #4]
 801cb76:	f7ed fd18 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cb7a:	e0d0      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801cb7c:	683b      	ldr	r3, [r7, #0]
 801cb7e:	f103 040c 	add.w	r4, r3, #12
 801cb82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb86:	4914      	ldr	r1, [pc, #80]	; (801cbd8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801cb88:	4618      	mov	r0, r3
 801cb8a:	f7ed fd0e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cb8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb92:	4619      	mov	r1, r3
 801cb94:	4620      	mov	r0, r4
 801cb96:	f7ee f8cc 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	461c      	mov	r4, r3
 801cb9e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cba2:	4618      	mov	r0, r3
 801cba4:	f7ee f8b9 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cba8:	2c00      	cmp	r4, #0
 801cbaa:	d017      	beq.n	801cbdc <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801cbac:	683b      	ldr	r3, [r7, #0]
 801cbae:	699a      	ldr	r2, [r3, #24]
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	4611      	mov	r1, r2
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	f7ee fb9b 	bl	800b2f0 <_Z10StringFromPKv>
 801cbba:	e0b0      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801cbbc:	08023a60 	.word	0x08023a60
 801cbc0:	08023a5c 	.word	0x08023a5c
 801cbc4:	08023b4c 	.word	0x08023b4c
 801cbc8:	08023a68 	.word	0x08023a68
 801cbcc:	08023a78 	.word	0x08023a78
 801cbd0:	08023a84 	.word	0x08023a84
 801cbd4:	08023b28 	.word	0x08023b28
 801cbd8:	08023b08 	.word	0x08023b08
    else if (type_ == "void (*)()")
 801cbdc:	683b      	ldr	r3, [r7, #0]
 801cbde:	f103 040c 	add.w	r4, r3, #12
 801cbe2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cbe6:	4950      	ldr	r1, [pc, #320]	; (801cd28 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7ed fcde 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cbee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cbf2:	4619      	mov	r1, r3
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	f7ee f89c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	461c      	mov	r4, r3
 801cbfe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cc02:	4618      	mov	r0, r3
 801cc04:	f7ee f889 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cc08:	2c00      	cmp	r4, #0
 801cc0a:	d007      	beq.n	801cc1c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801cc0c:	683b      	ldr	r3, [r7, #0]
 801cc0e:	699a      	ldr	r2, [r3, #24]
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	4611      	mov	r1, r2
 801cc14:	4618      	mov	r0, r3
 801cc16:	f7ee fb95 	bl	800b344 <_Z10StringFromPFvvE>
 801cc1a:	e080      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801cc1c:	683b      	ldr	r3, [r7, #0]
 801cc1e:	f103 040c 	add.w	r4, r3, #12
 801cc22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cc26:	4941      	ldr	r1, [pc, #260]	; (801cd2c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7ed fcbe 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cc2e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cc32:	4619      	mov	r1, r3
 801cc34:	4620      	mov	r0, r4
 801cc36:	f7ee f87c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	461c      	mov	r4, r3
 801cc3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cc42:	4618      	mov	r0, r3
 801cc44:	f7ee f869 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cc48:	2c00      	cmp	r4, #0
 801cc4a:	d007      	beq.n	801cc5c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	699a      	ldr	r2, [r3, #24]
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	4611      	mov	r1, r2
 801cc54:	4618      	mov	r0, r3
 801cc56:	f7ee fb4b 	bl	800b2f0 <_Z10StringFromPKv>
 801cc5a:	e060      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801cc5c:	683b      	ldr	r3, [r7, #0]
 801cc5e:	f103 040c 	add.w	r4, r3, #12
 801cc62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cc66:	4932      	ldr	r1, [pc, #200]	; (801cd30 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f7ed fc9e 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801cc6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cc72:	4619      	mov	r1, r3
 801cc74:	4620      	mov	r0, r4
 801cc76:	f7ee f85c 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cc7a:	4603      	mov	r3, r0
 801cc7c:	461c      	mov	r4, r3
 801cc7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cc82:	4618      	mov	r0, r3
 801cc84:	f7ee f849 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cc88:	2c00      	cmp	r4, #0
 801cc8a:	d00c      	beq.n	801cca6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801cc8c:	683b      	ldr	r3, [r7, #0]
 801cc8e:	ed93 7b06 	vldr	d7, [r3, #24]
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2106      	movs	r1, #6
 801cc96:	eeb0 0a47 	vmov.f32	s0, s14
 801cc9a:	eef0 0a67 	vmov.f32	s1, s15
 801cc9e:	4618      	mov	r0, r3
 801cca0:	f7ee fd00 	bl	800b6a4 <_Z10StringFromdi>
 801cca4:	e03b      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801cca6:	683b      	ldr	r3, [r7, #0]
 801cca8:	f103 040c 	add.w	r4, r3, #12
 801ccac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ccb0:	4920      	ldr	r1, [pc, #128]	; (801cd34 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	f7ed fc79 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801ccb8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ccbc:	4619      	mov	r1, r3
 801ccbe:	4620      	mov	r0, r4
 801ccc0:	f7ee f837 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801ccc4:	4603      	mov	r3, r0
 801ccc6:	461c      	mov	r4, r3
 801ccc8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801cccc:	4618      	mov	r0, r3
 801ccce:	f7ee f824 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801ccd2:	2c00      	cmp	r4, #0
 801ccd4:	d008      	beq.n	801cce8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801ccd6:	683b      	ldr	r3, [r7, #0]
 801ccd8:	6999      	ldr	r1, [r3, #24]
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	4618      	mov	r0, r3
 801cce2:	f7ee fe73 	bl	800b9cc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801cce6:	e01a      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801cce8:	683b      	ldr	r3, [r7, #0]
 801ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d00b      	beq.n	801cd08 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801ccf0:	683b      	ldr	r3, [r7, #0]
 801ccf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801ccf4:	683b      	ldr	r3, [r7, #0]
 801ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	330c      	adds	r3, #12
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	683a      	ldr	r2, [r7, #0]
 801cd00:	6992      	ldr	r2, [r2, #24]
 801cd02:	6878      	ldr	r0, [r7, #4]
 801cd04:	4798      	blx	r3
 801cd06:	e00a      	b.n	801cd1e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801cd08:	683b      	ldr	r3, [r7, #0]
 801cd0a:	330c      	adds	r3, #12
 801cd0c:	4618      	mov	r0, r3
 801cd0e:	f7ed ffd7 	bl	800acc0 <_ZNK12SimpleString12asCharStringEv>
 801cd12:	4602      	mov	r2, r0
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	4908      	ldr	r1, [pc, #32]	; (801cd38 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801cd18:	4618      	mov	r0, r3
 801cd1a:	f7ee fd05 	bl	800b728 <_Z16StringFromFormatPKcz>

}
 801cd1e:	6878      	ldr	r0, [r7, #4]
 801cd20:	37e4      	adds	r7, #228	; 0xe4
 801cd22:	46bd      	mov	sp, r7
 801cd24:	bd90      	pop	{r4, r7, pc}
 801cd26:	bf00      	nop
 801cd28:	08023b1c 	.word	0x08023b1c
 801cd2c:	08023b10 	.word	0x08023b10
 801cd30:	08023b00 	.word	0x08023b00
 801cd34:	08023b34 	.word	0x08023b34
 801cd38:	08023b50 	.word	0x08023b50

0801cd3c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801cd3c:	b480      	push	{r7}
 801cd3e:	b083      	sub	sp, #12
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	6078      	str	r0, [r7, #4]
 801cd44:	6039      	str	r1, [r7, #0]
    next_ = node;
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	683a      	ldr	r2, [r7, #0]
 801cd4a:	605a      	str	r2, [r3, #4]
}
 801cd4c:	bf00      	nop
 801cd4e:	370c      	adds	r7, #12
 801cd50:	46bd      	mov	sp, r7
 801cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd56:	4770      	bx	lr

0801cd58 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801cd58:	b480      	push	{r7}
 801cd5a:	b083      	sub	sp, #12
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]
    return next_;
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	685b      	ldr	r3, [r3, #4]
}
 801cd64:	4618      	mov	r0, r3
 801cd66:	370c      	adds	r7, #12
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd6e:	4770      	bx	lr

0801cd70 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801cd70:	b480      	push	{r7}
 801cd72:	b083      	sub	sp, #12
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
    return data_;
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
}
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	370c      	adds	r7, #12
 801cd80:	46bd      	mov	sp, r7
 801cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd86:	4770      	bx	lr

0801cd88 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801cd88:	b580      	push	{r7, lr}
 801cd8a:	b082      	sub	sp, #8
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
    delete data_;
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d004      	beq.n	801cda2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801cd98:	681a      	ldr	r2, [r3, #0]
 801cd9a:	3204      	adds	r2, #4
 801cd9c:	6812      	ldr	r2, [r2, #0]
 801cd9e:	4618      	mov	r0, r3
 801cda0:	4790      	blx	r2
}
 801cda2:	bf00      	nop
 801cda4:	3708      	adds	r7, #8
 801cda6:	46bd      	mov	sp, r7
 801cda8:	bd80      	pop	{r7, pc}

0801cdaa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801cdaa:	b480      	push	{r7}
 801cdac:	b083      	sub	sp, #12
 801cdae:	af00      	add	r7, sp, #0
 801cdb0:	6078      	str	r0, [r7, #4]
 801cdb2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	683a      	ldr	r2, [r7, #0]
 801cdb8:	601a      	str	r2, [r3, #0]
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	605a      	str	r2, [r3, #4]
{
}
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	370c      	adds	r7, #12
 801cdc6:	46bd      	mov	sp, r7
 801cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdcc:	4770      	bx	lr

0801cdce <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801cdce:	b580      	push	{r7, lr}
 801cdd0:	b082      	sub	sp, #8
 801cdd2:	af00      	add	r7, sp, #0
 801cdd4:	6078      	str	r0, [r7, #4]
 801cdd6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	6819      	ldr	r1, [r3, #0]
 801cddc:	683b      	ldr	r3, [r7, #0]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	335c      	adds	r3, #92	; 0x5c
 801cde4:	681b      	ldr	r3, [r3, #0]
 801cde6:	687a      	ldr	r2, [r7, #4]
 801cde8:	4610      	mov	r0, r2
 801cdea:	4798      	blx	r3
}
 801cdec:	6878      	ldr	r0, [r7, #4]
 801cdee:	3708      	adds	r7, #8
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	bd80      	pop	{r7, pc}

0801cdf4 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801cdf4:	b580      	push	{r7, lr}
 801cdf6:	b082      	sub	sp, #8
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]
 801cdfc:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801cdfe:	683b      	ldr	r3, [r7, #0]
 801ce00:	6819      	ldr	r1, [r3, #0]
 801ce02:	683b      	ldr	r3, [r7, #0]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	3360      	adds	r3, #96	; 0x60
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	687a      	ldr	r2, [r7, #4]
 801ce0e:	4610      	mov	r0, r2
 801ce10:	4798      	blx	r3
}
 801ce12:	6878      	ldr	r0, [r7, #4]
 801ce14:	3708      	adds	r7, #8
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}

0801ce1a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801ce1a:	b480      	push	{r7}
 801ce1c:	b083      	sub	sp, #12
 801ce1e:	af00      	add	r7, sp, #0
 801ce20:	6078      	str	r0, [r7, #4]
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	2200      	movs	r2, #0
 801ce26:	601a      	str	r2, [r3, #0]
{
}
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	4618      	mov	r0, r3
 801ce2c:	370c      	adds	r7, #12
 801ce2e:	46bd      	mov	sp, r7
 801ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce34:	4770      	bx	lr

0801ce36 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801ce36:	b580      	push	{r7, lr}
 801ce38:	b084      	sub	sp, #16
 801ce3a:	af00      	add	r7, sp, #0
 801ce3c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d016      	beq.n	801ce74 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	f7ff ff84 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 801ce50:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	4618      	mov	r0, r3
 801ce58:	f7ff ff96 	bl	801cd88 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d003      	beq.n	801ce6c <_ZN18MockNamedValueList5clearEv+0x36>
 801ce64:	2108      	movs	r1, #8
 801ce66:	4618      	mov	r0, r3
 801ce68:	f7ea fff0 	bl	8007e4c <_ZdlPvj>
        head_ = n;
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	68fa      	ldr	r2, [r7, #12]
 801ce70:	601a      	str	r2, [r3, #0]
    while (head_) {
 801ce72:	e7e4      	b.n	801ce3e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801ce74:	bf00      	nop
 801ce76:	3710      	adds	r7, #16
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bd80      	pop	{r7, pc}

0801ce7c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801ce7c:	b590      	push	{r4, r7, lr}
 801ce7e:	b085      	sub	sp, #20
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
 801ce84:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801ce86:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ce8a:	4916      	ldr	r1, [pc, #88]	; (801cee4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801ce8c:	2008      	movs	r0, #8
 801ce8e:	f7ea ffc9 	bl	8007e24 <_ZnwjPKci>
 801ce92:	4604      	mov	r4, r0
 801ce94:	6839      	ldr	r1, [r7, #0]
 801ce96:	4620      	mov	r0, r4
 801ce98:	f7ff ff87 	bl	801cdaa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801ce9c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d103      	bne.n	801ceae <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	68ba      	ldr	r2, [r7, #8]
 801ceaa:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801ceac:	e016      	b.n	801cedc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801ceb4:	68f8      	ldr	r0, [r7, #12]
 801ceb6:	f7ff ff4f 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 801ceba:	4603      	mov	r3, r0
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	bf14      	ite	ne
 801cec0:	2301      	movne	r3, #1
 801cec2:	2300      	moveq	r3, #0
 801cec4:	b2db      	uxtb	r3, r3
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d004      	beq.n	801ced4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801ceca:	68f8      	ldr	r0, [r7, #12]
 801cecc:	f7ff ff44 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 801ced0:	60f8      	str	r0, [r7, #12]
 801ced2:	e7ef      	b.n	801ceb4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801ced4:	68b9      	ldr	r1, [r7, #8]
 801ced6:	68f8      	ldr	r0, [r7, #12]
 801ced8:	f7ff ff30 	bl	801cd3c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801cedc:	bf00      	nop
 801cede:	3714      	adds	r7, #20
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd90      	pop	{r4, r7, pc}
 801cee4:	08023a98 	.word	0x08023a98

0801cee8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801cee8:	b590      	push	{r4, r7, lr}
 801ceea:	b087      	sub	sp, #28
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
 801cef0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	617b      	str	r3, [r7, #20]
 801cef8:	697b      	ldr	r3, [r7, #20]
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d01e      	beq.n	801cf3c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801cefe:	f107 030c 	add.w	r3, r7, #12
 801cf02:	6979      	ldr	r1, [r7, #20]
 801cf04:	4618      	mov	r0, r3
 801cf06:	f7ff ff62 	bl	801cdce <_ZNK22MockNamedValueListNode7getNameEv>
 801cf0a:	f107 030c 	add.w	r3, r7, #12
 801cf0e:	6839      	ldr	r1, [r7, #0]
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7ed ff0e 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801cf16:	4603      	mov	r3, r0
 801cf18:	461c      	mov	r4, r3
 801cf1a:	f107 030c 	add.w	r3, r7, #12
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f7ed fefb 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801cf24:	2c00      	cmp	r4, #0
 801cf26:	d004      	beq.n	801cf32 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801cf28:	6978      	ldr	r0, [r7, #20]
 801cf2a:	f7ff ff21 	bl	801cd70 <_ZN22MockNamedValueListNode4itemEv>
 801cf2e:	4603      	mov	r3, r0
 801cf30:	e005      	b.n	801cf3e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801cf32:	6978      	ldr	r0, [r7, #20]
 801cf34:	f7ff ff10 	bl	801cd58 <_ZN22MockNamedValueListNode4nextEv>
 801cf38:	6178      	str	r0, [r7, #20]
 801cf3a:	e7dd      	b.n	801cef8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801cf3c:	2300      	movs	r3, #0
}
 801cf3e:	4618      	mov	r0, r3
 801cf40:	371c      	adds	r7, #28
 801cf42:	46bd      	mov	sp, r7
 801cf44:	bd90      	pop	{r4, r7, pc}

0801cf46 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801cf46:	b480      	push	{r7}
 801cf48:	b083      	sub	sp, #12
 801cf4a:	af00      	add	r7, sp, #0
 801cf4c:	6078      	str	r0, [r7, #4]
    return head_;
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	370c      	adds	r7, #12
 801cf56:	46bd      	mov	sp, r7
 801cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf5c:	4770      	bx	lr

0801cf5e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801cf5e:	b580      	push	{r7, lr}
 801cf60:	b084      	sub	sp, #16
 801cf62:	af00      	add	r7, sp, #0
 801cf64:	60f8      	str	r0, [r7, #12]
 801cf66:	60b9      	str	r1, [r7, #8]
 801cf68:	607a      	str	r2, [r7, #4]
 801cf6a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	68b9      	ldr	r1, [r7, #8]
 801cf70:	4618      	mov	r0, r3
 801cf72:	f7ed fb6e 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	687a      	ldr	r2, [r7, #4]
 801cf7a:	609a      	str	r2, [r3, #8]
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	2200      	movs	r2, #0
 801cf80:	60da      	str	r2, [r3, #12]
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	683a      	ldr	r2, [r7, #0]
 801cf86:	611a      	str	r2, [r3, #16]
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	4618      	mov	r0, r3
 801cf8c:	3710      	adds	r7, #16
 801cf8e:	46bd      	mov	sp, r7
 801cf90:	bd80      	pop	{r7, pc}

0801cf92 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801cf92:	b580      	push	{r7, lr}
 801cf94:	b084      	sub	sp, #16
 801cf96:	af00      	add	r7, sp, #0
 801cf98:	60f8      	str	r0, [r7, #12]
 801cf9a:	60b9      	str	r1, [r7, #8]
 801cf9c:	607a      	str	r2, [r7, #4]
 801cf9e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	68b9      	ldr	r1, [r7, #8]
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f7ed fb54 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 801cfaa:	68fb      	ldr	r3, [r7, #12]
 801cfac:	2200      	movs	r2, #0
 801cfae:	609a      	str	r2, [r3, #8]
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	687a      	ldr	r2, [r7, #4]
 801cfb4:	60da      	str	r2, [r3, #12]
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	683a      	ldr	r2, [r7, #0]
 801cfba:	611a      	str	r2, [r3, #16]
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	3710      	adds	r7, #16
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd80      	pop	{r7, pc}

0801cfc6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801cfc6:	b580      	push	{r7, lr}
 801cfc8:	b084      	sub	sp, #16
 801cfca:	af00      	add	r7, sp, #0
 801cfcc:	60f8      	str	r0, [r7, #12]
 801cfce:	60b9      	str	r1, [r7, #8]
 801cfd0:	607a      	str	r2, [r7, #4]
 801cfd2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	68b9      	ldr	r1, [r7, #8]
 801cfd8:	4618      	mov	r0, r3
 801cfda:	f7ed fb3a 	bl	800a652 <_ZN12SimpleStringC1ERKS_>
 801cfde:	68fb      	ldr	r3, [r7, #12]
 801cfe0:	687a      	ldr	r2, [r7, #4]
 801cfe2:	609a      	str	r2, [r3, #8]
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	683a      	ldr	r2, [r7, #0]
 801cfe8:	60da      	str	r2, [r3, #12]
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	69ba      	ldr	r2, [r7, #24]
 801cfee:	611a      	str	r2, [r3, #16]
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	4618      	mov	r0, r3
 801cff4:	3710      	adds	r7, #16
 801cff6:	46bd      	mov	sp, r7
 801cff8:	bd80      	pop	{r7, pc}
	...

0801cffc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801cffc:	b480      	push	{r7}
 801cffe:	b083      	sub	sp, #12
 801d000:	af00      	add	r7, sp, #0
 801d002:	6078      	str	r0, [r7, #4]
 801d004:	4a06      	ldr	r2, [pc, #24]	; (801d020 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	601a      	str	r2, [r3, #0]
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	2200      	movs	r2, #0
 801d00e:	605a      	str	r2, [r3, #4]
{

}
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	4618      	mov	r0, r3
 801d014:	370c      	adds	r7, #12
 801d016:	46bd      	mov	sp, r7
 801d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d01c:	4770      	bx	lr
 801d01e:	bf00      	nop
 801d020:	08025c50 	.word	0x08025c50

0801d024 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d024:	b580      	push	{r7, lr}
 801d026:	b082      	sub	sp, #8
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
 801d02c:	4a05      	ldr	r2, [pc, #20]	; (801d044 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	601a      	str	r2, [r3, #0]
{
    clear();
 801d032:	6878      	ldr	r0, [r7, #4]
 801d034:	f000 f825 	bl	801d082 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	4618      	mov	r0, r3
 801d03c:	3708      	adds	r7, #8
 801d03e:	46bd      	mov	sp, r7
 801d040:	bd80      	pop	{r7, pc}
 801d042:	bf00      	nop
 801d044:	08025c50 	.word	0x08025c50

0801d048 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d048:	b580      	push	{r7, lr}
 801d04a:	b082      	sub	sp, #8
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
}
 801d050:	6878      	ldr	r0, [r7, #4]
 801d052:	f7ff ffe7 	bl	801d024 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801d056:	2108      	movs	r1, #8
 801d058:	6878      	ldr	r0, [r7, #4]
 801d05a:	f7ea fef7 	bl	8007e4c <_ZdlPvj>
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	4618      	mov	r0, r3
 801d062:	3708      	adds	r7, #8
 801d064:	46bd      	mov	sp, r7
 801d066:	bd80      	pop	{r7, pc}

0801d068 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801d068:	b580      	push	{r7, lr}
 801d06a:	b082      	sub	sp, #8
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	4618      	mov	r0, r3
 801d074:	f7ed fe51 	bl	800ad1a <_ZN12SimpleStringD1Ev>
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	4618      	mov	r0, r3
 801d07c:	3708      	adds	r7, #8
 801d07e:	46bd      	mov	sp, r7
 801d080:	bd80      	pop	{r7, pc}

0801d082 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801d082:	b590      	push	{r4, r7, lr}
 801d084:	b085      	sub	sp, #20
 801d086:	af00      	add	r7, sp, #0
 801d088:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	685b      	ldr	r3, [r3, #4]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d012      	beq.n	801d0b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	685b      	ldr	r3, [r3, #4]
 801d096:	691b      	ldr	r3, [r3, #16]
 801d098:	60fb      	str	r3, [r7, #12]
        delete head_;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	685c      	ldr	r4, [r3, #4]
 801d09e:	2c00      	cmp	r4, #0
 801d0a0:	d006      	beq.n	801d0b0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801d0a2:	4620      	mov	r0, r4
 801d0a4:	f7ff ffe0 	bl	801d068 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801d0a8:	2114      	movs	r1, #20
 801d0aa:	4620      	mov	r0, r4
 801d0ac:	f7ea fece 	bl	8007e4c <_ZdlPvj>
        head_ = next;
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	68fa      	ldr	r2, [r7, #12]
 801d0b4:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d0b6:	e7e8      	b.n	801d08a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801d0b8:	bf00      	nop
 801d0ba:	3714      	adds	r7, #20
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd90      	pop	{r4, r7, pc}

0801d0c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801d0c0:	b590      	push	{r4, r7, lr}
 801d0c2:	b085      	sub	sp, #20
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	60f8      	str	r0, [r7, #12]
 801d0c8:	60b9      	str	r1, [r7, #8]
 801d0ca:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801d0cc:	f240 227a 	movw	r2, #634	; 0x27a
 801d0d0:	4908      	ldr	r1, [pc, #32]	; (801d0f4 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801d0d2:	2014      	movs	r0, #20
 801d0d4:	f7ea fea6 	bl	8007e24 <_ZnwjPKci>
 801d0d8:	4604      	mov	r4, r0
 801d0da:	68fb      	ldr	r3, [r7, #12]
 801d0dc:	685b      	ldr	r3, [r3, #4]
 801d0de:	687a      	ldr	r2, [r7, #4]
 801d0e0:	68b9      	ldr	r1, [r7, #8]
 801d0e2:	4620      	mov	r0, r4
 801d0e4:	f7ff ff3b 	bl	801cf5e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	605c      	str	r4, [r3, #4]
}
 801d0ec:	bf00      	nop
 801d0ee:	3714      	adds	r7, #20
 801d0f0:	46bd      	mov	sp, r7
 801d0f2:	bd90      	pop	{r4, r7, pc}
 801d0f4:	08023a98 	.word	0x08023a98

0801d0f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801d0f8:	b590      	push	{r4, r7, lr}
 801d0fa:	b085      	sub	sp, #20
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	60f8      	str	r0, [r7, #12]
 801d100:	60b9      	str	r1, [r7, #8]
 801d102:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801d104:	f240 227f 	movw	r2, #639	; 0x27f
 801d108:	4908      	ldr	r1, [pc, #32]	; (801d12c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801d10a:	2014      	movs	r0, #20
 801d10c:	f7ea fe8a 	bl	8007e24 <_ZnwjPKci>
 801d110:	4604      	mov	r4, r0
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	685b      	ldr	r3, [r3, #4]
 801d116:	687a      	ldr	r2, [r7, #4]
 801d118:	68b9      	ldr	r1, [r7, #8]
 801d11a:	4620      	mov	r0, r4
 801d11c:	f7ff ff39 	bl	801cf92 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	605c      	str	r4, [r3, #4]
}
 801d124:	bf00      	nop
 801d126:	3714      	adds	r7, #20
 801d128:	46bd      	mov	sp, r7
 801d12a:	bd90      	pop	{r4, r7, pc}
 801d12c:	08023a98 	.word	0x08023a98

0801d130 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b084      	sub	sp, #16
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
 801d138:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	685b      	ldr	r3, [r3, #4]
 801d13e:	60fb      	str	r3, [r7, #12]
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d017      	beq.n	801d176 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	6839      	ldr	r1, [r7, #0]
 801d14a:	4618      	mov	r0, r3
 801d14c:	f7ed fdf1 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801d150:	4603      	mov	r3, r0
 801d152:	2b00      	cmp	r3, #0
 801d154:	d005      	beq.n	801d162 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	689b      	ldr	r3, [r3, #8]
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d001      	beq.n	801d162 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d15e:	2301      	movs	r3, #1
 801d160:	e000      	b.n	801d164 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801d162:	2300      	movs	r3, #0
 801d164:	2b00      	cmp	r3, #0
 801d166:	d002      	beq.n	801d16e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	689b      	ldr	r3, [r3, #8]
 801d16c:	e004      	b.n	801d178 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	691b      	ldr	r3, [r3, #16]
 801d172:	60fb      	str	r3, [r7, #12]
 801d174:	e7e4      	b.n	801d140 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d176:	2300      	movs	r3, #0
}
 801d178:	4618      	mov	r0, r3
 801d17a:	3710      	adds	r7, #16
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}

0801d180 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801d180:	b580      	push	{r7, lr}
 801d182:	b084      	sub	sp, #16
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	685b      	ldr	r3, [r3, #4]
 801d18e:	60fb      	str	r3, [r7, #12]
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d017      	beq.n	801d1c6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	6839      	ldr	r1, [r7, #0]
 801d19a:	4618      	mov	r0, r3
 801d19c:	f7ed fdc9 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d005      	beq.n	801d1b2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	68db      	ldr	r3, [r3, #12]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d001      	beq.n	801d1b2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801d1ae:	2301      	movs	r3, #1
 801d1b0:	e000      	b.n	801d1b4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d002      	beq.n	801d1be <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	68db      	ldr	r3, [r3, #12]
 801d1bc:	e004      	b.n	801d1c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	691b      	ldr	r3, [r3, #16]
 801d1c2:	60fb      	str	r3, [r7, #12]
 801d1c4:	e7e4      	b.n	801d190 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d1c6:	2300      	movs	r3, #0
}
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	3710      	adds	r7, #16
 801d1cc:	46bd      	mov	sp, r7
 801d1ce:	bd80      	pop	{r7, pc}

0801d1d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801d1d0:	b590      	push	{r4, r7, lr}
 801d1d2:	b087      	sub	sp, #28
 801d1d4:	af02      	add	r7, sp, #8
 801d1d6:	6078      	str	r0, [r7, #4]
 801d1d8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801d1da:	683b      	ldr	r3, [r7, #0]
 801d1dc:	685b      	ldr	r3, [r3, #4]
 801d1de:	60fb      	str	r3, [r7, #12]
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d018      	beq.n	801d218 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801d1e6:	f240 2293 	movw	r2, #659	; 0x293
 801d1ea:	490d      	ldr	r1, [pc, #52]	; (801d220 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801d1ec:	2014      	movs	r0, #20
 801d1ee:	f7ea fe19 	bl	8007e24 <_ZnwjPKci>
 801d1f2:	4604      	mov	r4, r0
 801d1f4:	68f9      	ldr	r1, [r7, #12]
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	689a      	ldr	r2, [r3, #8]
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	68d8      	ldr	r0, [r3, #12]
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	685b      	ldr	r3, [r3, #4]
 801d202:	9300      	str	r3, [sp, #0]
 801d204:	4603      	mov	r3, r0
 801d206:	4620      	mov	r0, r4
 801d208:	f7ff fedd 	bl	801cfc6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	691b      	ldr	r3, [r3, #16]
 801d214:	60fb      	str	r3, [r7, #12]
 801d216:	e7e3      	b.n	801d1e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801d218:	bf00      	nop
 801d21a:	3714      	adds	r7, #20
 801d21c:	46bd      	mov	sp, r7
 801d21e:	bd90      	pop	{r4, r7, pc}
 801d220:	08023a98 	.word	0x08023a98

0801d224 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801d224:	b580      	push	{r7, lr}
 801d226:	b082      	sub	sp, #8
 801d228:	af00      	add	r7, sp, #0
 801d22a:	6078      	str	r0, [r7, #4]
 801d22c:	6039      	str	r1, [r7, #0]
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	490b      	ldr	r1, [pc, #44]	; (801d260 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801d232:	4618      	mov	r0, r3
 801d234:	f7ed f9b9 	bl	800a5aa <_ZN12SimpleStringC1EPKc>
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	2200      	movs	r2, #0
 801d23c:	721a      	strb	r2, [r3, #8]
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	2200      	movs	r2, #0
 801d242:	725a      	strb	r2, [r3, #9]
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	2200      	movs	r2, #0
 801d248:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	6839      	ldr	r1, [r7, #0]
 801d24e:	4618      	mov	r0, r3
 801d250:	f7ed fa17 	bl	800a682 <_ZN12SimpleStringaSERKS_>
}
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	4618      	mov	r0, r3
 801d258:	3708      	adds	r7, #8
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}
 801d25e:	bf00      	nop
 801d260:	08023b74 	.word	0x08023b74

0801d264 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801d264:	b480      	push	{r7}
 801d266:	b083      	sub	sp, #12
 801d268:	af00      	add	r7, sp, #0
 801d26a:	6078      	str	r0, [r7, #4]
 801d26c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	683a      	ldr	r2, [r7, #0]
 801d272:	60da      	str	r2, [r3, #12]
    return this;
 801d274:	687b      	ldr	r3, [r7, #4]
}
 801d276:	4618      	mov	r0, r3
 801d278:	370c      	adds	r7, #12
 801d27a:	46bd      	mov	sp, r7
 801d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d280:	4770      	bx	lr

0801d282 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801d282:	b480      	push	{r7}
 801d284:	b083      	sub	sp, #12
 801d286:	af00      	add	r7, sp, #0
 801d288:	6078      	str	r0, [r7, #4]
    return next_;
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	68db      	ldr	r3, [r3, #12]
}
 801d28e:	4618      	mov	r0, r3
 801d290:	370c      	adds	r7, #12
 801d292:	46bd      	mov	sp, r7
 801d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d298:	4770      	bx	lr

0801d29a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801d29a:	b480      	push	{r7}
 801d29c:	b083      	sub	sp, #12
 801d29e:	af00      	add	r7, sp, #0
 801d2a0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	2201      	movs	r2, #1
 801d2a6:	721a      	strb	r2, [r3, #8]
}
 801d2a8:	bf00      	nop
 801d2aa:	370c      	adds	r7, #12
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2b2:	4770      	bx	lr

0801d2b4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801d2b4:	b480      	push	{r7}
 801d2b6:	b083      	sub	sp, #12
 801d2b8:	af00      	add	r7, sp, #0
 801d2ba:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	2201      	movs	r2, #1
 801d2c0:	725a      	strb	r2, [r3, #9]
}
 801d2c2:	bf00      	nop
 801d2c4:	370c      	adds	r7, #12
 801d2c6:	46bd      	mov	sp, r7
 801d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2cc:	4770      	bx	lr

0801d2ce <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801d2ce:	b580      	push	{r7, lr}
 801d2d0:	b084      	sub	sp, #16
 801d2d2:	af00      	add	r7, sp, #0
 801d2d4:	6078      	str	r0, [r7, #4]
 801d2d6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801d2d8:	2300      	movs	r3, #0
 801d2da:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	7a1b      	ldrb	r3, [r3, #8]
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d007      	beq.n	801d2f4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	4619      	mov	r1, r3
 801d2e8:	6838      	ldr	r0, [r7, #0]
 801d2ea:	f7ed fd22 	bl	800ad32 <_ZeqRK12SimpleStringS1_>
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	73fb      	strb	r3, [r7, #15]
 801d2f2:	e006      	b.n	801d302 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	4619      	mov	r1, r3
 801d2f8:	6838      	ldr	r0, [r7, #0]
 801d2fa:	f7ed f9d4 	bl	800a6a6 <_ZNK12SimpleString8containsERKS_>
 801d2fe:	4603      	mov	r3, r0
 801d300:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	7a5b      	ldrb	r3, [r3, #9]
 801d306:	2b00      	cmp	r3, #0
 801d308:	d004      	beq.n	801d314 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801d30a:	7bfb      	ldrb	r3, [r7, #15]
 801d30c:	f083 0301 	eor.w	r3, r3, #1
 801d310:	b2db      	uxtb	r3, r3
 801d312:	e005      	b.n	801d320 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801d314:	7bfb      	ldrb	r3, [r7, #15]
 801d316:	2b00      	cmp	r3, #0
 801d318:	bf14      	ite	ne
 801d31a:	2301      	movne	r3, #1
 801d31c:	2300      	moveq	r3, #0
 801d31e:	b2db      	uxtb	r3, r3
}
 801d320:	4618      	mov	r0, r3
 801d322:	3710      	adds	r7, #16
 801d324:	46bd      	mov	sp, r7
 801d326:	bd80      	pop	{r7, pc}

0801d328 <__cxa_guard_acquire>:
 801d328:	6803      	ldr	r3, [r0, #0]
 801d32a:	07db      	lsls	r3, r3, #31
 801d32c:	d406      	bmi.n	801d33c <__cxa_guard_acquire+0x14>
 801d32e:	7843      	ldrb	r3, [r0, #1]
 801d330:	b103      	cbz	r3, 801d334 <__cxa_guard_acquire+0xc>
 801d332:	deff      	udf	#255	; 0xff
 801d334:	2301      	movs	r3, #1
 801d336:	7043      	strb	r3, [r0, #1]
 801d338:	4618      	mov	r0, r3
 801d33a:	4770      	bx	lr
 801d33c:	2000      	movs	r0, #0
 801d33e:	4770      	bx	lr

0801d340 <__cxa_guard_release>:
 801d340:	2301      	movs	r3, #1
 801d342:	6003      	str	r3, [r0, #0]
 801d344:	4770      	bx	lr

0801d346 <__cxa_pure_virtual>:
 801d346:	b508      	push	{r3, lr}
 801d348:	f000 f80c 	bl	801d364 <_ZSt9terminatev>

0801d34c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d34c:	b508      	push	{r3, lr}
 801d34e:	4780      	blx	r0
 801d350:	f000 f816 	bl	801d380 <abort>

0801d354 <_ZSt13get_terminatev>:
 801d354:	4b02      	ldr	r3, [pc, #8]	; (801d360 <_ZSt13get_terminatev+0xc>)
 801d356:	6818      	ldr	r0, [r3, #0]
 801d358:	f3bf 8f5b 	dmb	ish
 801d35c:	4770      	bx	lr
 801d35e:	bf00      	nop
 801d360:	20000100 	.word	0x20000100

0801d364 <_ZSt9terminatev>:
 801d364:	b508      	push	{r3, lr}
 801d366:	f7ff fff5 	bl	801d354 <_ZSt13get_terminatev>
 801d36a:	f7ff ffef 	bl	801d34c <_ZN10__cxxabiv111__terminateEPFvvE>

0801d36e <fabs>:
 801d36e:	ec51 0b10 	vmov	r0, r1, d0
 801d372:	ee10 2a10 	vmov	r2, s0
 801d376:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d37a:	ec43 2b10 	vmov	d0, r2, r3
 801d37e:	4770      	bx	lr

0801d380 <abort>:
 801d380:	b508      	push	{r3, lr}
 801d382:	2006      	movs	r0, #6
 801d384:	f000 ff88 	bl	801e298 <raise>
 801d388:	2001      	movs	r0, #1
 801d38a:	f7e3 fcfa 	bl	8000d82 <_exit>

0801d38e <atexit>:
 801d38e:	2300      	movs	r3, #0
 801d390:	4601      	mov	r1, r0
 801d392:	461a      	mov	r2, r3
 801d394:	4618      	mov	r0, r3
 801d396:	f002 b91f 	b.w	801f5d8 <__register_exitproc>
	...

0801d39c <calloc>:
 801d39c:	4b02      	ldr	r3, [pc, #8]	; (801d3a8 <calloc+0xc>)
 801d39e:	460a      	mov	r2, r1
 801d3a0:	4601      	mov	r1, r0
 801d3a2:	6818      	ldr	r0, [r3, #0]
 801d3a4:	f000 bde8 	b.w	801df78 <_calloc_r>
 801d3a8:	20000104 	.word	0x20000104

0801d3ac <__errno>:
 801d3ac:	4b01      	ldr	r3, [pc, #4]	; (801d3b4 <__errno+0x8>)
 801d3ae:	6818      	ldr	r0, [r3, #0]
 801d3b0:	4770      	bx	lr
 801d3b2:	bf00      	nop
 801d3b4:	20000104 	.word	0x20000104

0801d3b8 <_fclose_r>:
 801d3b8:	b570      	push	{r4, r5, r6, lr}
 801d3ba:	4605      	mov	r5, r0
 801d3bc:	460c      	mov	r4, r1
 801d3be:	b911      	cbnz	r1, 801d3c6 <_fclose_r+0xe>
 801d3c0:	2600      	movs	r6, #0
 801d3c2:	4630      	mov	r0, r6
 801d3c4:	bd70      	pop	{r4, r5, r6, pc}
 801d3c6:	b118      	cbz	r0, 801d3d0 <_fclose_r+0x18>
 801d3c8:	6983      	ldr	r3, [r0, #24]
 801d3ca:	b90b      	cbnz	r3, 801d3d0 <_fclose_r+0x18>
 801d3cc:	f000 f994 	bl	801d6f8 <__sinit>
 801d3d0:	4b2c      	ldr	r3, [pc, #176]	; (801d484 <_fclose_r+0xcc>)
 801d3d2:	429c      	cmp	r4, r3
 801d3d4:	d114      	bne.n	801d400 <_fclose_r+0x48>
 801d3d6:	686c      	ldr	r4, [r5, #4]
 801d3d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d3da:	07d8      	lsls	r0, r3, #31
 801d3dc:	d405      	bmi.n	801d3ea <_fclose_r+0x32>
 801d3de:	89a3      	ldrh	r3, [r4, #12]
 801d3e0:	0599      	lsls	r1, r3, #22
 801d3e2:	d402      	bmi.n	801d3ea <_fclose_r+0x32>
 801d3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d3e6:	f000 fd3a 	bl	801de5e <__retarget_lock_acquire_recursive>
 801d3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3ee:	b98b      	cbnz	r3, 801d414 <_fclose_r+0x5c>
 801d3f0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d3f2:	f016 0601 	ands.w	r6, r6, #1
 801d3f6:	d1e3      	bne.n	801d3c0 <_fclose_r+0x8>
 801d3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d3fa:	f000 fd32 	bl	801de62 <__retarget_lock_release_recursive>
 801d3fe:	e7e0      	b.n	801d3c2 <_fclose_r+0xa>
 801d400:	4b21      	ldr	r3, [pc, #132]	; (801d488 <_fclose_r+0xd0>)
 801d402:	429c      	cmp	r4, r3
 801d404:	d101      	bne.n	801d40a <_fclose_r+0x52>
 801d406:	68ac      	ldr	r4, [r5, #8]
 801d408:	e7e6      	b.n	801d3d8 <_fclose_r+0x20>
 801d40a:	4b20      	ldr	r3, [pc, #128]	; (801d48c <_fclose_r+0xd4>)
 801d40c:	429c      	cmp	r4, r3
 801d40e:	bf08      	it	eq
 801d410:	68ec      	ldreq	r4, [r5, #12]
 801d412:	e7e1      	b.n	801d3d8 <_fclose_r+0x20>
 801d414:	4621      	mov	r1, r4
 801d416:	4628      	mov	r0, r5
 801d418:	f000 f842 	bl	801d4a0 <__sflush_r>
 801d41c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d41e:	4606      	mov	r6, r0
 801d420:	b133      	cbz	r3, 801d430 <_fclose_r+0x78>
 801d422:	6a21      	ldr	r1, [r4, #32]
 801d424:	4628      	mov	r0, r5
 801d426:	4798      	blx	r3
 801d428:	2800      	cmp	r0, #0
 801d42a:	bfb8      	it	lt
 801d42c:	f04f 36ff 	movlt.w	r6, #4294967295
 801d430:	89a3      	ldrh	r3, [r4, #12]
 801d432:	061a      	lsls	r2, r3, #24
 801d434:	d503      	bpl.n	801d43e <_fclose_r+0x86>
 801d436:	6921      	ldr	r1, [r4, #16]
 801d438:	4628      	mov	r0, r5
 801d43a:	f000 fdad 	bl	801df98 <_free_r>
 801d43e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d440:	b141      	cbz	r1, 801d454 <_fclose_r+0x9c>
 801d442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d446:	4299      	cmp	r1, r3
 801d448:	d002      	beq.n	801d450 <_fclose_r+0x98>
 801d44a:	4628      	mov	r0, r5
 801d44c:	f000 fda4 	bl	801df98 <_free_r>
 801d450:	2300      	movs	r3, #0
 801d452:	6363      	str	r3, [r4, #52]	; 0x34
 801d454:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d456:	b121      	cbz	r1, 801d462 <_fclose_r+0xaa>
 801d458:	4628      	mov	r0, r5
 801d45a:	f000 fd9d 	bl	801df98 <_free_r>
 801d45e:	2300      	movs	r3, #0
 801d460:	64a3      	str	r3, [r4, #72]	; 0x48
 801d462:	f000 f931 	bl	801d6c8 <__sfp_lock_acquire>
 801d466:	2300      	movs	r3, #0
 801d468:	81a3      	strh	r3, [r4, #12]
 801d46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d46c:	07db      	lsls	r3, r3, #31
 801d46e:	d402      	bmi.n	801d476 <_fclose_r+0xbe>
 801d470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d472:	f000 fcf6 	bl	801de62 <__retarget_lock_release_recursive>
 801d476:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d478:	f000 fcef 	bl	801de5a <__retarget_lock_close_recursive>
 801d47c:	f000 f92a 	bl	801d6d4 <__sfp_lock_release>
 801d480:	e79f      	b.n	801d3c2 <_fclose_r+0xa>
 801d482:	bf00      	nop
 801d484:	08025d44 	.word	0x08025d44
 801d488:	08025d64 	.word	0x08025d64
 801d48c:	08025d24 	.word	0x08025d24

0801d490 <fclose>:
 801d490:	4b02      	ldr	r3, [pc, #8]	; (801d49c <fclose+0xc>)
 801d492:	4601      	mov	r1, r0
 801d494:	6818      	ldr	r0, [r3, #0]
 801d496:	f7ff bf8f 	b.w	801d3b8 <_fclose_r>
 801d49a:	bf00      	nop
 801d49c:	20000104 	.word	0x20000104

0801d4a0 <__sflush_r>:
 801d4a0:	898a      	ldrh	r2, [r1, #12]
 801d4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4a6:	4605      	mov	r5, r0
 801d4a8:	0710      	lsls	r0, r2, #28
 801d4aa:	460c      	mov	r4, r1
 801d4ac:	d458      	bmi.n	801d560 <__sflush_r+0xc0>
 801d4ae:	684b      	ldr	r3, [r1, #4]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	dc05      	bgt.n	801d4c0 <__sflush_r+0x20>
 801d4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	dc02      	bgt.n	801d4c0 <__sflush_r+0x20>
 801d4ba:	2000      	movs	r0, #0
 801d4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4c2:	2e00      	cmp	r6, #0
 801d4c4:	d0f9      	beq.n	801d4ba <__sflush_r+0x1a>
 801d4c6:	2300      	movs	r3, #0
 801d4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d4cc:	682f      	ldr	r7, [r5, #0]
 801d4ce:	602b      	str	r3, [r5, #0]
 801d4d0:	d032      	beq.n	801d538 <__sflush_r+0x98>
 801d4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d4d4:	89a3      	ldrh	r3, [r4, #12]
 801d4d6:	075a      	lsls	r2, r3, #29
 801d4d8:	d505      	bpl.n	801d4e6 <__sflush_r+0x46>
 801d4da:	6863      	ldr	r3, [r4, #4]
 801d4dc:	1ac0      	subs	r0, r0, r3
 801d4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d4e0:	b10b      	cbz	r3, 801d4e6 <__sflush_r+0x46>
 801d4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d4e4:	1ac0      	subs	r0, r0, r3
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	4602      	mov	r2, r0
 801d4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4ec:	6a21      	ldr	r1, [r4, #32]
 801d4ee:	4628      	mov	r0, r5
 801d4f0:	47b0      	blx	r6
 801d4f2:	1c43      	adds	r3, r0, #1
 801d4f4:	89a3      	ldrh	r3, [r4, #12]
 801d4f6:	d106      	bne.n	801d506 <__sflush_r+0x66>
 801d4f8:	6829      	ldr	r1, [r5, #0]
 801d4fa:	291d      	cmp	r1, #29
 801d4fc:	d82c      	bhi.n	801d558 <__sflush_r+0xb8>
 801d4fe:	4a2a      	ldr	r2, [pc, #168]	; (801d5a8 <__sflush_r+0x108>)
 801d500:	40ca      	lsrs	r2, r1
 801d502:	07d6      	lsls	r6, r2, #31
 801d504:	d528      	bpl.n	801d558 <__sflush_r+0xb8>
 801d506:	2200      	movs	r2, #0
 801d508:	6062      	str	r2, [r4, #4]
 801d50a:	04d9      	lsls	r1, r3, #19
 801d50c:	6922      	ldr	r2, [r4, #16]
 801d50e:	6022      	str	r2, [r4, #0]
 801d510:	d504      	bpl.n	801d51c <__sflush_r+0x7c>
 801d512:	1c42      	adds	r2, r0, #1
 801d514:	d101      	bne.n	801d51a <__sflush_r+0x7a>
 801d516:	682b      	ldr	r3, [r5, #0]
 801d518:	b903      	cbnz	r3, 801d51c <__sflush_r+0x7c>
 801d51a:	6560      	str	r0, [r4, #84]	; 0x54
 801d51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d51e:	602f      	str	r7, [r5, #0]
 801d520:	2900      	cmp	r1, #0
 801d522:	d0ca      	beq.n	801d4ba <__sflush_r+0x1a>
 801d524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d528:	4299      	cmp	r1, r3
 801d52a:	d002      	beq.n	801d532 <__sflush_r+0x92>
 801d52c:	4628      	mov	r0, r5
 801d52e:	f000 fd33 	bl	801df98 <_free_r>
 801d532:	2000      	movs	r0, #0
 801d534:	6360      	str	r0, [r4, #52]	; 0x34
 801d536:	e7c1      	b.n	801d4bc <__sflush_r+0x1c>
 801d538:	6a21      	ldr	r1, [r4, #32]
 801d53a:	2301      	movs	r3, #1
 801d53c:	4628      	mov	r0, r5
 801d53e:	47b0      	blx	r6
 801d540:	1c41      	adds	r1, r0, #1
 801d542:	d1c7      	bne.n	801d4d4 <__sflush_r+0x34>
 801d544:	682b      	ldr	r3, [r5, #0]
 801d546:	2b00      	cmp	r3, #0
 801d548:	d0c4      	beq.n	801d4d4 <__sflush_r+0x34>
 801d54a:	2b1d      	cmp	r3, #29
 801d54c:	d001      	beq.n	801d552 <__sflush_r+0xb2>
 801d54e:	2b16      	cmp	r3, #22
 801d550:	d101      	bne.n	801d556 <__sflush_r+0xb6>
 801d552:	602f      	str	r7, [r5, #0]
 801d554:	e7b1      	b.n	801d4ba <__sflush_r+0x1a>
 801d556:	89a3      	ldrh	r3, [r4, #12]
 801d558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d55c:	81a3      	strh	r3, [r4, #12]
 801d55e:	e7ad      	b.n	801d4bc <__sflush_r+0x1c>
 801d560:	690f      	ldr	r7, [r1, #16]
 801d562:	2f00      	cmp	r7, #0
 801d564:	d0a9      	beq.n	801d4ba <__sflush_r+0x1a>
 801d566:	0793      	lsls	r3, r2, #30
 801d568:	680e      	ldr	r6, [r1, #0]
 801d56a:	bf08      	it	eq
 801d56c:	694b      	ldreq	r3, [r1, #20]
 801d56e:	600f      	str	r7, [r1, #0]
 801d570:	bf18      	it	ne
 801d572:	2300      	movne	r3, #0
 801d574:	eba6 0807 	sub.w	r8, r6, r7
 801d578:	608b      	str	r3, [r1, #8]
 801d57a:	f1b8 0f00 	cmp.w	r8, #0
 801d57e:	dd9c      	ble.n	801d4ba <__sflush_r+0x1a>
 801d580:	6a21      	ldr	r1, [r4, #32]
 801d582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d584:	4643      	mov	r3, r8
 801d586:	463a      	mov	r2, r7
 801d588:	4628      	mov	r0, r5
 801d58a:	47b0      	blx	r6
 801d58c:	2800      	cmp	r0, #0
 801d58e:	dc06      	bgt.n	801d59e <__sflush_r+0xfe>
 801d590:	89a3      	ldrh	r3, [r4, #12]
 801d592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d596:	81a3      	strh	r3, [r4, #12]
 801d598:	f04f 30ff 	mov.w	r0, #4294967295
 801d59c:	e78e      	b.n	801d4bc <__sflush_r+0x1c>
 801d59e:	4407      	add	r7, r0
 801d5a0:	eba8 0800 	sub.w	r8, r8, r0
 801d5a4:	e7e9      	b.n	801d57a <__sflush_r+0xda>
 801d5a6:	bf00      	nop
 801d5a8:	20400001 	.word	0x20400001

0801d5ac <_fflush_r>:
 801d5ac:	b538      	push	{r3, r4, r5, lr}
 801d5ae:	690b      	ldr	r3, [r1, #16]
 801d5b0:	4605      	mov	r5, r0
 801d5b2:	460c      	mov	r4, r1
 801d5b4:	b913      	cbnz	r3, 801d5bc <_fflush_r+0x10>
 801d5b6:	2500      	movs	r5, #0
 801d5b8:	4628      	mov	r0, r5
 801d5ba:	bd38      	pop	{r3, r4, r5, pc}
 801d5bc:	b118      	cbz	r0, 801d5c6 <_fflush_r+0x1a>
 801d5be:	6983      	ldr	r3, [r0, #24]
 801d5c0:	b90b      	cbnz	r3, 801d5c6 <_fflush_r+0x1a>
 801d5c2:	f000 f899 	bl	801d6f8 <__sinit>
 801d5c6:	4b14      	ldr	r3, [pc, #80]	; (801d618 <_fflush_r+0x6c>)
 801d5c8:	429c      	cmp	r4, r3
 801d5ca:	d11b      	bne.n	801d604 <_fflush_r+0x58>
 801d5cc:	686c      	ldr	r4, [r5, #4]
 801d5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d0ef      	beq.n	801d5b6 <_fflush_r+0xa>
 801d5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d5d8:	07d0      	lsls	r0, r2, #31
 801d5da:	d404      	bmi.n	801d5e6 <_fflush_r+0x3a>
 801d5dc:	0599      	lsls	r1, r3, #22
 801d5de:	d402      	bmi.n	801d5e6 <_fflush_r+0x3a>
 801d5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5e2:	f000 fc3c 	bl	801de5e <__retarget_lock_acquire_recursive>
 801d5e6:	4628      	mov	r0, r5
 801d5e8:	4621      	mov	r1, r4
 801d5ea:	f7ff ff59 	bl	801d4a0 <__sflush_r>
 801d5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d5f0:	07da      	lsls	r2, r3, #31
 801d5f2:	4605      	mov	r5, r0
 801d5f4:	d4e0      	bmi.n	801d5b8 <_fflush_r+0xc>
 801d5f6:	89a3      	ldrh	r3, [r4, #12]
 801d5f8:	059b      	lsls	r3, r3, #22
 801d5fa:	d4dd      	bmi.n	801d5b8 <_fflush_r+0xc>
 801d5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5fe:	f000 fc30 	bl	801de62 <__retarget_lock_release_recursive>
 801d602:	e7d9      	b.n	801d5b8 <_fflush_r+0xc>
 801d604:	4b05      	ldr	r3, [pc, #20]	; (801d61c <_fflush_r+0x70>)
 801d606:	429c      	cmp	r4, r3
 801d608:	d101      	bne.n	801d60e <_fflush_r+0x62>
 801d60a:	68ac      	ldr	r4, [r5, #8]
 801d60c:	e7df      	b.n	801d5ce <_fflush_r+0x22>
 801d60e:	4b04      	ldr	r3, [pc, #16]	; (801d620 <_fflush_r+0x74>)
 801d610:	429c      	cmp	r4, r3
 801d612:	bf08      	it	eq
 801d614:	68ec      	ldreq	r4, [r5, #12]
 801d616:	e7da      	b.n	801d5ce <_fflush_r+0x22>
 801d618:	08025d44 	.word	0x08025d44
 801d61c:	08025d64 	.word	0x08025d64
 801d620:	08025d24 	.word	0x08025d24

0801d624 <fflush>:
 801d624:	4601      	mov	r1, r0
 801d626:	b920      	cbnz	r0, 801d632 <fflush+0xe>
 801d628:	4b04      	ldr	r3, [pc, #16]	; (801d63c <fflush+0x18>)
 801d62a:	4905      	ldr	r1, [pc, #20]	; (801d640 <fflush+0x1c>)
 801d62c:	6818      	ldr	r0, [r3, #0]
 801d62e:	f000 babb 	b.w	801dba8 <_fwalk_reent>
 801d632:	4b04      	ldr	r3, [pc, #16]	; (801d644 <fflush+0x20>)
 801d634:	6818      	ldr	r0, [r3, #0]
 801d636:	f7ff bfb9 	b.w	801d5ac <_fflush_r>
 801d63a:	bf00      	nop
 801d63c:	08025d84 	.word	0x08025d84
 801d640:	0801d5ad 	.word	0x0801d5ad
 801d644:	20000104 	.word	0x20000104

0801d648 <std>:
 801d648:	2300      	movs	r3, #0
 801d64a:	b510      	push	{r4, lr}
 801d64c:	4604      	mov	r4, r0
 801d64e:	e9c0 3300 	strd	r3, r3, [r0]
 801d652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d656:	6083      	str	r3, [r0, #8]
 801d658:	8181      	strh	r1, [r0, #12]
 801d65a:	6643      	str	r3, [r0, #100]	; 0x64
 801d65c:	81c2      	strh	r2, [r0, #14]
 801d65e:	6183      	str	r3, [r0, #24]
 801d660:	4619      	mov	r1, r3
 801d662:	2208      	movs	r2, #8
 801d664:	305c      	adds	r0, #92	; 0x5c
 801d666:	f000 fc7f 	bl	801df68 <memset>
 801d66a:	4b05      	ldr	r3, [pc, #20]	; (801d680 <std+0x38>)
 801d66c:	6263      	str	r3, [r4, #36]	; 0x24
 801d66e:	4b05      	ldr	r3, [pc, #20]	; (801d684 <std+0x3c>)
 801d670:	62a3      	str	r3, [r4, #40]	; 0x28
 801d672:	4b05      	ldr	r3, [pc, #20]	; (801d688 <std+0x40>)
 801d674:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d676:	4b05      	ldr	r3, [pc, #20]	; (801d68c <std+0x44>)
 801d678:	6224      	str	r4, [r4, #32]
 801d67a:	6323      	str	r3, [r4, #48]	; 0x30
 801d67c:	bd10      	pop	{r4, pc}
 801d67e:	bf00      	nop
 801d680:	0801e2d1 	.word	0x0801e2d1
 801d684:	0801e2f7 	.word	0x0801e2f7
 801d688:	0801e32f 	.word	0x0801e32f
 801d68c:	0801e353 	.word	0x0801e353

0801d690 <_cleanup_r>:
 801d690:	4901      	ldr	r1, [pc, #4]	; (801d698 <_cleanup_r+0x8>)
 801d692:	f000 ba89 	b.w	801dba8 <_fwalk_reent>
 801d696:	bf00      	nop
 801d698:	0801d5ad 	.word	0x0801d5ad

0801d69c <__sfmoreglue>:
 801d69c:	b570      	push	{r4, r5, r6, lr}
 801d69e:	1e4a      	subs	r2, r1, #1
 801d6a0:	2568      	movs	r5, #104	; 0x68
 801d6a2:	4355      	muls	r5, r2
 801d6a4:	460e      	mov	r6, r1
 801d6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d6aa:	f000 fcc5 	bl	801e038 <_malloc_r>
 801d6ae:	4604      	mov	r4, r0
 801d6b0:	b140      	cbz	r0, 801d6c4 <__sfmoreglue+0x28>
 801d6b2:	2100      	movs	r1, #0
 801d6b4:	e9c0 1600 	strd	r1, r6, [r0]
 801d6b8:	300c      	adds	r0, #12
 801d6ba:	60a0      	str	r0, [r4, #8]
 801d6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d6c0:	f000 fc52 	bl	801df68 <memset>
 801d6c4:	4620      	mov	r0, r4
 801d6c6:	bd70      	pop	{r4, r5, r6, pc}

0801d6c8 <__sfp_lock_acquire>:
 801d6c8:	4801      	ldr	r0, [pc, #4]	; (801d6d0 <__sfp_lock_acquire+0x8>)
 801d6ca:	f000 bbc8 	b.w	801de5e <__retarget_lock_acquire_recursive>
 801d6ce:	bf00      	nop
 801d6d0:	20000de8 	.word	0x20000de8

0801d6d4 <__sfp_lock_release>:
 801d6d4:	4801      	ldr	r0, [pc, #4]	; (801d6dc <__sfp_lock_release+0x8>)
 801d6d6:	f000 bbc4 	b.w	801de62 <__retarget_lock_release_recursive>
 801d6da:	bf00      	nop
 801d6dc:	20000de8 	.word	0x20000de8

0801d6e0 <__sinit_lock_acquire>:
 801d6e0:	4801      	ldr	r0, [pc, #4]	; (801d6e8 <__sinit_lock_acquire+0x8>)
 801d6e2:	f000 bbbc 	b.w	801de5e <__retarget_lock_acquire_recursive>
 801d6e6:	bf00      	nop
 801d6e8:	20000de3 	.word	0x20000de3

0801d6ec <__sinit_lock_release>:
 801d6ec:	4801      	ldr	r0, [pc, #4]	; (801d6f4 <__sinit_lock_release+0x8>)
 801d6ee:	f000 bbb8 	b.w	801de62 <__retarget_lock_release_recursive>
 801d6f2:	bf00      	nop
 801d6f4:	20000de3 	.word	0x20000de3

0801d6f8 <__sinit>:
 801d6f8:	b510      	push	{r4, lr}
 801d6fa:	4604      	mov	r4, r0
 801d6fc:	f7ff fff0 	bl	801d6e0 <__sinit_lock_acquire>
 801d700:	69a3      	ldr	r3, [r4, #24]
 801d702:	b11b      	cbz	r3, 801d70c <__sinit+0x14>
 801d704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d708:	f7ff bff0 	b.w	801d6ec <__sinit_lock_release>
 801d70c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d710:	6523      	str	r3, [r4, #80]	; 0x50
 801d712:	4b13      	ldr	r3, [pc, #76]	; (801d760 <__sinit+0x68>)
 801d714:	4a13      	ldr	r2, [pc, #76]	; (801d764 <__sinit+0x6c>)
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	62a2      	str	r2, [r4, #40]	; 0x28
 801d71a:	42a3      	cmp	r3, r4
 801d71c:	bf04      	itt	eq
 801d71e:	2301      	moveq	r3, #1
 801d720:	61a3      	streq	r3, [r4, #24]
 801d722:	4620      	mov	r0, r4
 801d724:	f000 f820 	bl	801d768 <__sfp>
 801d728:	6060      	str	r0, [r4, #4]
 801d72a:	4620      	mov	r0, r4
 801d72c:	f000 f81c 	bl	801d768 <__sfp>
 801d730:	60a0      	str	r0, [r4, #8]
 801d732:	4620      	mov	r0, r4
 801d734:	f000 f818 	bl	801d768 <__sfp>
 801d738:	2200      	movs	r2, #0
 801d73a:	60e0      	str	r0, [r4, #12]
 801d73c:	2104      	movs	r1, #4
 801d73e:	6860      	ldr	r0, [r4, #4]
 801d740:	f7ff ff82 	bl	801d648 <std>
 801d744:	68a0      	ldr	r0, [r4, #8]
 801d746:	2201      	movs	r2, #1
 801d748:	2109      	movs	r1, #9
 801d74a:	f7ff ff7d 	bl	801d648 <std>
 801d74e:	68e0      	ldr	r0, [r4, #12]
 801d750:	2202      	movs	r2, #2
 801d752:	2112      	movs	r1, #18
 801d754:	f7ff ff78 	bl	801d648 <std>
 801d758:	2301      	movs	r3, #1
 801d75a:	61a3      	str	r3, [r4, #24]
 801d75c:	e7d2      	b.n	801d704 <__sinit+0xc>
 801d75e:	bf00      	nop
 801d760:	08025d84 	.word	0x08025d84
 801d764:	0801d691 	.word	0x0801d691

0801d768 <__sfp>:
 801d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d76a:	4607      	mov	r7, r0
 801d76c:	f7ff ffac 	bl	801d6c8 <__sfp_lock_acquire>
 801d770:	4b1e      	ldr	r3, [pc, #120]	; (801d7ec <__sfp+0x84>)
 801d772:	681e      	ldr	r6, [r3, #0]
 801d774:	69b3      	ldr	r3, [r6, #24]
 801d776:	b913      	cbnz	r3, 801d77e <__sfp+0x16>
 801d778:	4630      	mov	r0, r6
 801d77a:	f7ff ffbd 	bl	801d6f8 <__sinit>
 801d77e:	3648      	adds	r6, #72	; 0x48
 801d780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d784:	3b01      	subs	r3, #1
 801d786:	d503      	bpl.n	801d790 <__sfp+0x28>
 801d788:	6833      	ldr	r3, [r6, #0]
 801d78a:	b30b      	cbz	r3, 801d7d0 <__sfp+0x68>
 801d78c:	6836      	ldr	r6, [r6, #0]
 801d78e:	e7f7      	b.n	801d780 <__sfp+0x18>
 801d790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d794:	b9d5      	cbnz	r5, 801d7cc <__sfp+0x64>
 801d796:	4b16      	ldr	r3, [pc, #88]	; (801d7f0 <__sfp+0x88>)
 801d798:	60e3      	str	r3, [r4, #12]
 801d79a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d79e:	6665      	str	r5, [r4, #100]	; 0x64
 801d7a0:	f000 fb5a 	bl	801de58 <__retarget_lock_init_recursive>
 801d7a4:	f7ff ff96 	bl	801d6d4 <__sfp_lock_release>
 801d7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d7b0:	6025      	str	r5, [r4, #0]
 801d7b2:	61a5      	str	r5, [r4, #24]
 801d7b4:	2208      	movs	r2, #8
 801d7b6:	4629      	mov	r1, r5
 801d7b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d7bc:	f000 fbd4 	bl	801df68 <memset>
 801d7c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d7c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d7c8:	4620      	mov	r0, r4
 801d7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7cc:	3468      	adds	r4, #104	; 0x68
 801d7ce:	e7d9      	b.n	801d784 <__sfp+0x1c>
 801d7d0:	2104      	movs	r1, #4
 801d7d2:	4638      	mov	r0, r7
 801d7d4:	f7ff ff62 	bl	801d69c <__sfmoreglue>
 801d7d8:	4604      	mov	r4, r0
 801d7da:	6030      	str	r0, [r6, #0]
 801d7dc:	2800      	cmp	r0, #0
 801d7de:	d1d5      	bne.n	801d78c <__sfp+0x24>
 801d7e0:	f7ff ff78 	bl	801d6d4 <__sfp_lock_release>
 801d7e4:	230c      	movs	r3, #12
 801d7e6:	603b      	str	r3, [r7, #0]
 801d7e8:	e7ee      	b.n	801d7c8 <__sfp+0x60>
 801d7ea:	bf00      	nop
 801d7ec:	08025d84 	.word	0x08025d84
 801d7f0:	ffff0001 	.word	0xffff0001

0801d7f4 <_fopen_r>:
 801d7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d7f6:	460f      	mov	r7, r1
 801d7f8:	4611      	mov	r1, r2
 801d7fa:	aa01      	add	r2, sp, #4
 801d7fc:	4605      	mov	r5, r0
 801d7fe:	f001 ff7f 	bl	801f700 <__sflags>
 801d802:	4606      	mov	r6, r0
 801d804:	b918      	cbnz	r0, 801d80e <_fopen_r+0x1a>
 801d806:	2400      	movs	r4, #0
 801d808:	4620      	mov	r0, r4
 801d80a:	b003      	add	sp, #12
 801d80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d80e:	4628      	mov	r0, r5
 801d810:	f7ff ffaa 	bl	801d768 <__sfp>
 801d814:	4604      	mov	r4, r0
 801d816:	2800      	cmp	r0, #0
 801d818:	d0f5      	beq.n	801d806 <_fopen_r+0x12>
 801d81a:	4639      	mov	r1, r7
 801d81c:	9a01      	ldr	r2, [sp, #4]
 801d81e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801d822:	4628      	mov	r0, r5
 801d824:	f000 fc62 	bl	801e0ec <_open_r>
 801d828:	1e07      	subs	r7, r0, #0
 801d82a:	da09      	bge.n	801d840 <_fopen_r+0x4c>
 801d82c:	2500      	movs	r5, #0
 801d82e:	f7ff ff4b 	bl	801d6c8 <__sfp_lock_acquire>
 801d832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d834:	81a5      	strh	r5, [r4, #12]
 801d836:	f000 fb10 	bl	801de5a <__retarget_lock_close_recursive>
 801d83a:	f7ff ff4b 	bl	801d6d4 <__sfp_lock_release>
 801d83e:	e7e2      	b.n	801d806 <_fopen_r+0x12>
 801d840:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d842:	07db      	lsls	r3, r3, #31
 801d844:	d405      	bmi.n	801d852 <_fopen_r+0x5e>
 801d846:	89a3      	ldrh	r3, [r4, #12]
 801d848:	0598      	lsls	r0, r3, #22
 801d84a:	d402      	bmi.n	801d852 <_fopen_r+0x5e>
 801d84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d84e:	f000 fb06 	bl	801de5e <__retarget_lock_acquire_recursive>
 801d852:	4b0e      	ldr	r3, [pc, #56]	; (801d88c <_fopen_r+0x98>)
 801d854:	6263      	str	r3, [r4, #36]	; 0x24
 801d856:	4b0e      	ldr	r3, [pc, #56]	; (801d890 <_fopen_r+0x9c>)
 801d858:	62a3      	str	r3, [r4, #40]	; 0x28
 801d85a:	4b0e      	ldr	r3, [pc, #56]	; (801d894 <_fopen_r+0xa0>)
 801d85c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d85e:	05f1      	lsls	r1, r6, #23
 801d860:	4b0d      	ldr	r3, [pc, #52]	; (801d898 <_fopen_r+0xa4>)
 801d862:	81e7      	strh	r7, [r4, #14]
 801d864:	81a6      	strh	r6, [r4, #12]
 801d866:	6224      	str	r4, [r4, #32]
 801d868:	6323      	str	r3, [r4, #48]	; 0x30
 801d86a:	d505      	bpl.n	801d878 <_fopen_r+0x84>
 801d86c:	2302      	movs	r3, #2
 801d86e:	2200      	movs	r2, #0
 801d870:	4621      	mov	r1, r4
 801d872:	4628      	mov	r0, r5
 801d874:	f000 f888 	bl	801d988 <_fseek_r>
 801d878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d87a:	07da      	lsls	r2, r3, #31
 801d87c:	d4c4      	bmi.n	801d808 <_fopen_r+0x14>
 801d87e:	89a3      	ldrh	r3, [r4, #12]
 801d880:	059b      	lsls	r3, r3, #22
 801d882:	d4c1      	bmi.n	801d808 <_fopen_r+0x14>
 801d884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d886:	f000 faec 	bl	801de62 <__retarget_lock_release_recursive>
 801d88a:	e7bd      	b.n	801d808 <_fopen_r+0x14>
 801d88c:	0801e2d1 	.word	0x0801e2d1
 801d890:	0801e2f7 	.word	0x0801e2f7
 801d894:	0801e32f 	.word	0x0801e32f
 801d898:	0801e353 	.word	0x0801e353

0801d89c <fopen>:
 801d89c:	4b02      	ldr	r3, [pc, #8]	; (801d8a8 <fopen+0xc>)
 801d89e:	460a      	mov	r2, r1
 801d8a0:	4601      	mov	r1, r0
 801d8a2:	6818      	ldr	r0, [r3, #0]
 801d8a4:	f7ff bfa6 	b.w	801d7f4 <_fopen_r>
 801d8a8:	20000104 	.word	0x20000104

0801d8ac <_fputs_r>:
 801d8ac:	b570      	push	{r4, r5, r6, lr}
 801d8ae:	460e      	mov	r6, r1
 801d8b0:	4614      	mov	r4, r2
 801d8b2:	4605      	mov	r5, r0
 801d8b4:	b118      	cbz	r0, 801d8be <_fputs_r+0x12>
 801d8b6:	6983      	ldr	r3, [r0, #24]
 801d8b8:	b90b      	cbnz	r3, 801d8be <_fputs_r+0x12>
 801d8ba:	f7ff ff1d 	bl	801d6f8 <__sinit>
 801d8be:	4b2b      	ldr	r3, [pc, #172]	; (801d96c <_fputs_r+0xc0>)
 801d8c0:	429c      	cmp	r4, r3
 801d8c2:	d11e      	bne.n	801d902 <_fputs_r+0x56>
 801d8c4:	686c      	ldr	r4, [r5, #4]
 801d8c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d8c8:	07da      	lsls	r2, r3, #31
 801d8ca:	d405      	bmi.n	801d8d8 <_fputs_r+0x2c>
 801d8cc:	89a3      	ldrh	r3, [r4, #12]
 801d8ce:	059b      	lsls	r3, r3, #22
 801d8d0:	d402      	bmi.n	801d8d8 <_fputs_r+0x2c>
 801d8d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d8d4:	f000 fac3 	bl	801de5e <__retarget_lock_acquire_recursive>
 801d8d8:	89a3      	ldrh	r3, [r4, #12]
 801d8da:	0718      	lsls	r0, r3, #28
 801d8dc:	d51b      	bpl.n	801d916 <_fputs_r+0x6a>
 801d8de:	6923      	ldr	r3, [r4, #16]
 801d8e0:	b1cb      	cbz	r3, 801d916 <_fputs_r+0x6a>
 801d8e2:	3e01      	subs	r6, #1
 801d8e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d8e8:	bb39      	cbnz	r1, 801d93a <_fputs_r+0x8e>
 801d8ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801d8ec:	f015 0501 	ands.w	r5, r5, #1
 801d8f0:	d139      	bne.n	801d966 <_fputs_r+0xba>
 801d8f2:	89a3      	ldrh	r3, [r4, #12]
 801d8f4:	0599      	lsls	r1, r3, #22
 801d8f6:	d402      	bmi.n	801d8fe <_fputs_r+0x52>
 801d8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d8fa:	f000 fab2 	bl	801de62 <__retarget_lock_release_recursive>
 801d8fe:	4628      	mov	r0, r5
 801d900:	bd70      	pop	{r4, r5, r6, pc}
 801d902:	4b1b      	ldr	r3, [pc, #108]	; (801d970 <_fputs_r+0xc4>)
 801d904:	429c      	cmp	r4, r3
 801d906:	d101      	bne.n	801d90c <_fputs_r+0x60>
 801d908:	68ac      	ldr	r4, [r5, #8]
 801d90a:	e7dc      	b.n	801d8c6 <_fputs_r+0x1a>
 801d90c:	4b19      	ldr	r3, [pc, #100]	; (801d974 <_fputs_r+0xc8>)
 801d90e:	429c      	cmp	r4, r3
 801d910:	bf08      	it	eq
 801d912:	68ec      	ldreq	r4, [r5, #12]
 801d914:	e7d7      	b.n	801d8c6 <_fputs_r+0x1a>
 801d916:	4621      	mov	r1, r4
 801d918:	4628      	mov	r0, r5
 801d91a:	f001 fdef 	bl	801f4fc <__swsetup_r>
 801d91e:	2800      	cmp	r0, #0
 801d920:	d0df      	beq.n	801d8e2 <_fputs_r+0x36>
 801d922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d924:	07da      	lsls	r2, r3, #31
 801d926:	d405      	bmi.n	801d934 <_fputs_r+0x88>
 801d928:	89a3      	ldrh	r3, [r4, #12]
 801d92a:	059b      	lsls	r3, r3, #22
 801d92c:	d402      	bmi.n	801d934 <_fputs_r+0x88>
 801d92e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d930:	f000 fa97 	bl	801de62 <__retarget_lock_release_recursive>
 801d934:	f04f 35ff 	mov.w	r5, #4294967295
 801d938:	e7e1      	b.n	801d8fe <_fputs_r+0x52>
 801d93a:	68a3      	ldr	r3, [r4, #8]
 801d93c:	3b01      	subs	r3, #1
 801d93e:	2b00      	cmp	r3, #0
 801d940:	60a3      	str	r3, [r4, #8]
 801d942:	da04      	bge.n	801d94e <_fputs_r+0xa2>
 801d944:	69a2      	ldr	r2, [r4, #24]
 801d946:	4293      	cmp	r3, r2
 801d948:	db06      	blt.n	801d958 <_fputs_r+0xac>
 801d94a:	290a      	cmp	r1, #10
 801d94c:	d004      	beq.n	801d958 <_fputs_r+0xac>
 801d94e:	6823      	ldr	r3, [r4, #0]
 801d950:	1c5a      	adds	r2, r3, #1
 801d952:	6022      	str	r2, [r4, #0]
 801d954:	7019      	strb	r1, [r3, #0]
 801d956:	e7c5      	b.n	801d8e4 <_fputs_r+0x38>
 801d958:	4622      	mov	r2, r4
 801d95a:	4628      	mov	r0, r5
 801d95c:	f001 fd6a 	bl	801f434 <__swbuf_r>
 801d960:	3001      	adds	r0, #1
 801d962:	d1bf      	bne.n	801d8e4 <_fputs_r+0x38>
 801d964:	e7dd      	b.n	801d922 <_fputs_r+0x76>
 801d966:	460d      	mov	r5, r1
 801d968:	e7c9      	b.n	801d8fe <_fputs_r+0x52>
 801d96a:	bf00      	nop
 801d96c:	08025d44 	.word	0x08025d44
 801d970:	08025d64 	.word	0x08025d64
 801d974:	08025d24 	.word	0x08025d24

0801d978 <fputs>:
 801d978:	4b02      	ldr	r3, [pc, #8]	; (801d984 <fputs+0xc>)
 801d97a:	460a      	mov	r2, r1
 801d97c:	4601      	mov	r1, r0
 801d97e:	6818      	ldr	r0, [r3, #0]
 801d980:	f7ff bf94 	b.w	801d8ac <_fputs_r>
 801d984:	20000104 	.word	0x20000104

0801d988 <_fseek_r>:
 801d988:	f000 b800 	b.w	801d98c <_fseeko_r>

0801d98c <_fseeko_r>:
 801d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d990:	460c      	mov	r4, r1
 801d992:	4617      	mov	r7, r2
 801d994:	461e      	mov	r6, r3
 801d996:	4605      	mov	r5, r0
 801d998:	b118      	cbz	r0, 801d9a2 <_fseeko_r+0x16>
 801d99a:	6983      	ldr	r3, [r0, #24]
 801d99c:	b90b      	cbnz	r3, 801d9a2 <_fseeko_r+0x16>
 801d99e:	f7ff feab 	bl	801d6f8 <__sinit>
 801d9a2:	4b44      	ldr	r3, [pc, #272]	; (801dab4 <_fseeko_r+0x128>)
 801d9a4:	429c      	cmp	r4, r3
 801d9a6:	d122      	bne.n	801d9ee <_fseeko_r+0x62>
 801d9a8:	686c      	ldr	r4, [r5, #4]
 801d9aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d9ac:	07d9      	lsls	r1, r3, #31
 801d9ae:	d405      	bmi.n	801d9bc <_fseeko_r+0x30>
 801d9b0:	89a3      	ldrh	r3, [r4, #12]
 801d9b2:	059a      	lsls	r2, r3, #22
 801d9b4:	d402      	bmi.n	801d9bc <_fseeko_r+0x30>
 801d9b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d9b8:	f000 fa51 	bl	801de5e <__retarget_lock_acquire_recursive>
 801d9bc:	89a3      	ldrh	r3, [r4, #12]
 801d9be:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801d9c2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801d9c6:	d103      	bne.n	801d9d0 <_fseeko_r+0x44>
 801d9c8:	4621      	mov	r1, r4
 801d9ca:	4628      	mov	r0, r5
 801d9cc:	f7ff fdee 	bl	801d5ac <_fflush_r>
 801d9d0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801d9d4:	f1b8 0f00 	cmp.w	r8, #0
 801d9d8:	d113      	bne.n	801da02 <_fseeko_r+0x76>
 801d9da:	231d      	movs	r3, #29
 801d9dc:	602b      	str	r3, [r5, #0]
 801d9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d9e0:	07d9      	lsls	r1, r3, #31
 801d9e2:	d55d      	bpl.n	801daa0 <_fseeko_r+0x114>
 801d9e4:	f04f 36ff 	mov.w	r6, #4294967295
 801d9e8:	4630      	mov	r0, r6
 801d9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9ee:	4b32      	ldr	r3, [pc, #200]	; (801dab8 <_fseeko_r+0x12c>)
 801d9f0:	429c      	cmp	r4, r3
 801d9f2:	d101      	bne.n	801d9f8 <_fseeko_r+0x6c>
 801d9f4:	68ac      	ldr	r4, [r5, #8]
 801d9f6:	e7d8      	b.n	801d9aa <_fseeko_r+0x1e>
 801d9f8:	4b30      	ldr	r3, [pc, #192]	; (801dabc <_fseeko_r+0x130>)
 801d9fa:	429c      	cmp	r4, r3
 801d9fc:	bf08      	it	eq
 801d9fe:	68ec      	ldreq	r4, [r5, #12]
 801da00:	e7d3      	b.n	801d9aa <_fseeko_r+0x1e>
 801da02:	2e01      	cmp	r6, #1
 801da04:	d036      	beq.n	801da74 <_fseeko_r+0xe8>
 801da06:	f036 0302 	bics.w	r3, r6, #2
 801da0a:	d147      	bne.n	801da9c <_fseeko_r+0x110>
 801da0c:	6923      	ldr	r3, [r4, #16]
 801da0e:	b91b      	cbnz	r3, 801da18 <_fseeko_r+0x8c>
 801da10:	4621      	mov	r1, r4
 801da12:	4628      	mov	r0, r5
 801da14:	f000 fa4a 	bl	801deac <__smakebuf_r>
 801da18:	4621      	mov	r1, r4
 801da1a:	4628      	mov	r0, r5
 801da1c:	f7ff fdc6 	bl	801d5ac <_fflush_r>
 801da20:	2800      	cmp	r0, #0
 801da22:	d1dc      	bne.n	801d9de <_fseeko_r+0x52>
 801da24:	6a21      	ldr	r1, [r4, #32]
 801da26:	4633      	mov	r3, r6
 801da28:	463a      	mov	r2, r7
 801da2a:	4628      	mov	r0, r5
 801da2c:	47c0      	blx	r8
 801da2e:	3001      	adds	r0, #1
 801da30:	d0d5      	beq.n	801d9de <_fseeko_r+0x52>
 801da32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da34:	b141      	cbz	r1, 801da48 <_fseeko_r+0xbc>
 801da36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da3a:	4299      	cmp	r1, r3
 801da3c:	d002      	beq.n	801da44 <_fseeko_r+0xb8>
 801da3e:	4628      	mov	r0, r5
 801da40:	f000 faaa 	bl	801df98 <_free_r>
 801da44:	2300      	movs	r3, #0
 801da46:	6363      	str	r3, [r4, #52]	; 0x34
 801da48:	6923      	ldr	r3, [r4, #16]
 801da4a:	6023      	str	r3, [r4, #0]
 801da4c:	89a3      	ldrh	r3, [r4, #12]
 801da4e:	2500      	movs	r5, #0
 801da50:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801da54:	6065      	str	r5, [r4, #4]
 801da56:	81a3      	strh	r3, [r4, #12]
 801da58:	2208      	movs	r2, #8
 801da5a:	4629      	mov	r1, r5
 801da5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801da60:	f000 fa82 	bl	801df68 <memset>
 801da64:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801da66:	f016 0601 	ands.w	r6, r6, #1
 801da6a:	d120      	bne.n	801daae <_fseeko_r+0x122>
 801da6c:	89a3      	ldrh	r3, [r4, #12]
 801da6e:	059b      	lsls	r3, r3, #22
 801da70:	d4ba      	bmi.n	801d9e8 <_fseeko_r+0x5c>
 801da72:	e00c      	b.n	801da8e <_fseeko_r+0x102>
 801da74:	4621      	mov	r1, r4
 801da76:	4628      	mov	r0, r5
 801da78:	f000 f822 	bl	801dac0 <_ftello_r>
 801da7c:	1c43      	adds	r3, r0, #1
 801da7e:	4606      	mov	r6, r0
 801da80:	d109      	bne.n	801da96 <_fseeko_r+0x10a>
 801da82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801da84:	07dd      	lsls	r5, r3, #31
 801da86:	d4ad      	bmi.n	801d9e4 <_fseeko_r+0x58>
 801da88:	89a3      	ldrh	r3, [r4, #12]
 801da8a:	0598      	lsls	r0, r3, #22
 801da8c:	d4aa      	bmi.n	801d9e4 <_fseeko_r+0x58>
 801da8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801da90:	f000 f9e7 	bl	801de62 <__retarget_lock_release_recursive>
 801da94:	e7a8      	b.n	801d9e8 <_fseeko_r+0x5c>
 801da96:	4407      	add	r7, r0
 801da98:	2600      	movs	r6, #0
 801da9a:	e7b7      	b.n	801da0c <_fseeko_r+0x80>
 801da9c:	2316      	movs	r3, #22
 801da9e:	e79d      	b.n	801d9dc <_fseeko_r+0x50>
 801daa0:	89a3      	ldrh	r3, [r4, #12]
 801daa2:	059a      	lsls	r2, r3, #22
 801daa4:	d49e      	bmi.n	801d9e4 <_fseeko_r+0x58>
 801daa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801daa8:	f000 f9db 	bl	801de62 <__retarget_lock_release_recursive>
 801daac:	e79a      	b.n	801d9e4 <_fseeko_r+0x58>
 801daae:	462e      	mov	r6, r5
 801dab0:	e79a      	b.n	801d9e8 <_fseeko_r+0x5c>
 801dab2:	bf00      	nop
 801dab4:	08025d44 	.word	0x08025d44
 801dab8:	08025d64 	.word	0x08025d64
 801dabc:	08025d24 	.word	0x08025d24

0801dac0 <_ftello_r>:
 801dac0:	b570      	push	{r4, r5, r6, lr}
 801dac2:	460c      	mov	r4, r1
 801dac4:	4605      	mov	r5, r0
 801dac6:	b118      	cbz	r0, 801dad0 <_ftello_r+0x10>
 801dac8:	6983      	ldr	r3, [r0, #24]
 801daca:	b90b      	cbnz	r3, 801dad0 <_ftello_r+0x10>
 801dacc:	f7ff fe14 	bl	801d6f8 <__sinit>
 801dad0:	4b32      	ldr	r3, [pc, #200]	; (801db9c <_ftello_r+0xdc>)
 801dad2:	429c      	cmp	r4, r3
 801dad4:	d114      	bne.n	801db00 <_ftello_r+0x40>
 801dad6:	686c      	ldr	r4, [r5, #4]
 801dad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dada:	07da      	lsls	r2, r3, #31
 801dadc:	d405      	bmi.n	801daea <_ftello_r+0x2a>
 801dade:	89a3      	ldrh	r3, [r4, #12]
 801dae0:	059b      	lsls	r3, r3, #22
 801dae2:	d402      	bmi.n	801daea <_ftello_r+0x2a>
 801dae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dae6:	f000 f9ba 	bl	801de5e <__retarget_lock_acquire_recursive>
 801daea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801daec:	b9ce      	cbnz	r6, 801db22 <_ftello_r+0x62>
 801daee:	231d      	movs	r3, #29
 801daf0:	602b      	str	r3, [r5, #0]
 801daf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801daf4:	07de      	lsls	r6, r3, #31
 801daf6:	d50d      	bpl.n	801db14 <_ftello_r+0x54>
 801daf8:	f04f 35ff 	mov.w	r5, #4294967295
 801dafc:	4628      	mov	r0, r5
 801dafe:	bd70      	pop	{r4, r5, r6, pc}
 801db00:	4b27      	ldr	r3, [pc, #156]	; (801dba0 <_ftello_r+0xe0>)
 801db02:	429c      	cmp	r4, r3
 801db04:	d101      	bne.n	801db0a <_ftello_r+0x4a>
 801db06:	68ac      	ldr	r4, [r5, #8]
 801db08:	e7e6      	b.n	801dad8 <_ftello_r+0x18>
 801db0a:	4b26      	ldr	r3, [pc, #152]	; (801dba4 <_ftello_r+0xe4>)
 801db0c:	429c      	cmp	r4, r3
 801db0e:	bf08      	it	eq
 801db10:	68ec      	ldreq	r4, [r5, #12]
 801db12:	e7e1      	b.n	801dad8 <_ftello_r+0x18>
 801db14:	89a3      	ldrh	r3, [r4, #12]
 801db16:	059d      	lsls	r5, r3, #22
 801db18:	d4ee      	bmi.n	801daf8 <_ftello_r+0x38>
 801db1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db1c:	f000 f9a1 	bl	801de62 <__retarget_lock_release_recursive>
 801db20:	e7ea      	b.n	801daf8 <_ftello_r+0x38>
 801db22:	89a2      	ldrh	r2, [r4, #12]
 801db24:	f002 030c 	and.w	r3, r2, #12
 801db28:	2b08      	cmp	r3, #8
 801db2a:	d119      	bne.n	801db60 <_ftello_r+0xa0>
 801db2c:	6823      	ldr	r3, [r4, #0]
 801db2e:	b1bb      	cbz	r3, 801db60 <_ftello_r+0xa0>
 801db30:	6921      	ldr	r1, [r4, #16]
 801db32:	1a5b      	subs	r3, r3, r1
 801db34:	2b00      	cmp	r3, #0
 801db36:	dd13      	ble.n	801db60 <_ftello_r+0xa0>
 801db38:	05d0      	lsls	r0, r2, #23
 801db3a:	d511      	bpl.n	801db60 <_ftello_r+0xa0>
 801db3c:	2302      	movs	r3, #2
 801db3e:	2200      	movs	r2, #0
 801db40:	6a21      	ldr	r1, [r4, #32]
 801db42:	4628      	mov	r0, r5
 801db44:	47b0      	blx	r6
 801db46:	1c41      	adds	r1, r0, #1
 801db48:	4605      	mov	r5, r0
 801db4a:	d10d      	bne.n	801db68 <_ftello_r+0xa8>
 801db4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db4e:	07da      	lsls	r2, r3, #31
 801db50:	d4d2      	bmi.n	801daf8 <_ftello_r+0x38>
 801db52:	89a3      	ldrh	r3, [r4, #12]
 801db54:	059b      	lsls	r3, r3, #22
 801db56:	d4cf      	bmi.n	801daf8 <_ftello_r+0x38>
 801db58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db5a:	f000 f982 	bl	801de62 <__retarget_lock_release_recursive>
 801db5e:	e7cd      	b.n	801dafc <_ftello_r+0x3c>
 801db60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801db64:	d00f      	beq.n	801db86 <_ftello_r+0xc6>
 801db66:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801db68:	89a2      	ldrh	r2, [r4, #12]
 801db6a:	0756      	lsls	r6, r2, #29
 801db6c:	d50d      	bpl.n	801db8a <_ftello_r+0xca>
 801db6e:	6863      	ldr	r3, [r4, #4]
 801db70:	1aed      	subs	r5, r5, r3
 801db72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801db74:	b10b      	cbz	r3, 801db7a <_ftello_r+0xba>
 801db76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801db78:	1aed      	subs	r5, r5, r3
 801db7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db7c:	07d9      	lsls	r1, r3, #31
 801db7e:	d4bd      	bmi.n	801dafc <_ftello_r+0x3c>
 801db80:	0593      	lsls	r3, r2, #22
 801db82:	d4bb      	bmi.n	801dafc <_ftello_r+0x3c>
 801db84:	e7e8      	b.n	801db58 <_ftello_r+0x98>
 801db86:	2301      	movs	r3, #1
 801db88:	e7da      	b.n	801db40 <_ftello_r+0x80>
 801db8a:	0710      	lsls	r0, r2, #28
 801db8c:	d5f5      	bpl.n	801db7a <_ftello_r+0xba>
 801db8e:	6823      	ldr	r3, [r4, #0]
 801db90:	2b00      	cmp	r3, #0
 801db92:	d0f2      	beq.n	801db7a <_ftello_r+0xba>
 801db94:	6921      	ldr	r1, [r4, #16]
 801db96:	1a5b      	subs	r3, r3, r1
 801db98:	441d      	add	r5, r3
 801db9a:	e7ee      	b.n	801db7a <_ftello_r+0xba>
 801db9c:	08025d44 	.word	0x08025d44
 801dba0:	08025d64 	.word	0x08025d64
 801dba4:	08025d24 	.word	0x08025d24

0801dba8 <_fwalk_reent>:
 801dba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbac:	4606      	mov	r6, r0
 801dbae:	4688      	mov	r8, r1
 801dbb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dbb4:	2700      	movs	r7, #0
 801dbb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dbba:	f1b9 0901 	subs.w	r9, r9, #1
 801dbbe:	d505      	bpl.n	801dbcc <_fwalk_reent+0x24>
 801dbc0:	6824      	ldr	r4, [r4, #0]
 801dbc2:	2c00      	cmp	r4, #0
 801dbc4:	d1f7      	bne.n	801dbb6 <_fwalk_reent+0xe>
 801dbc6:	4638      	mov	r0, r7
 801dbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbcc:	89ab      	ldrh	r3, [r5, #12]
 801dbce:	2b01      	cmp	r3, #1
 801dbd0:	d907      	bls.n	801dbe2 <_fwalk_reent+0x3a>
 801dbd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dbd6:	3301      	adds	r3, #1
 801dbd8:	d003      	beq.n	801dbe2 <_fwalk_reent+0x3a>
 801dbda:	4629      	mov	r1, r5
 801dbdc:	4630      	mov	r0, r6
 801dbde:	47c0      	blx	r8
 801dbe0:	4307      	orrs	r7, r0
 801dbe2:	3568      	adds	r5, #104	; 0x68
 801dbe4:	e7e9      	b.n	801dbba <_fwalk_reent+0x12>
	...

0801dbe8 <__libc_init_array>:
 801dbe8:	b570      	push	{r4, r5, r6, lr}
 801dbea:	4d0d      	ldr	r5, [pc, #52]	; (801dc20 <__libc_init_array+0x38>)
 801dbec:	4c0d      	ldr	r4, [pc, #52]	; (801dc24 <__libc_init_array+0x3c>)
 801dbee:	1b64      	subs	r4, r4, r5
 801dbf0:	10a4      	asrs	r4, r4, #2
 801dbf2:	2600      	movs	r6, #0
 801dbf4:	42a6      	cmp	r6, r4
 801dbf6:	d109      	bne.n	801dc0c <__libc_init_array+0x24>
 801dbf8:	4d0b      	ldr	r5, [pc, #44]	; (801dc28 <__libc_init_array+0x40>)
 801dbfa:	4c0c      	ldr	r4, [pc, #48]	; (801dc2c <__libc_init_array+0x44>)
 801dbfc:	f003 f8ac 	bl	8020d58 <_init>
 801dc00:	1b64      	subs	r4, r4, r5
 801dc02:	10a4      	asrs	r4, r4, #2
 801dc04:	2600      	movs	r6, #0
 801dc06:	42a6      	cmp	r6, r4
 801dc08:	d105      	bne.n	801dc16 <__libc_init_array+0x2e>
 801dc0a:	bd70      	pop	{r4, r5, r6, pc}
 801dc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc10:	4798      	blx	r3
 801dc12:	3601      	adds	r6, #1
 801dc14:	e7ee      	b.n	801dbf4 <__libc_init_array+0xc>
 801dc16:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc1a:	4798      	blx	r3
 801dc1c:	3601      	adds	r6, #1
 801dc1e:	e7f2      	b.n	801dc06 <__libc_init_array+0x1e>
 801dc20:	0802631c 	.word	0x0802631c
 801dc24:	0802631c 	.word	0x0802631c
 801dc28:	0802631c 	.word	0x0802631c
 801dc2c:	0802632c 	.word	0x0802632c

0801dc30 <localtime>:
 801dc30:	b538      	push	{r3, r4, r5, lr}
 801dc32:	4b0b      	ldr	r3, [pc, #44]	; (801dc60 <localtime+0x30>)
 801dc34:	681d      	ldr	r5, [r3, #0]
 801dc36:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801dc38:	4604      	mov	r4, r0
 801dc3a:	b953      	cbnz	r3, 801dc52 <localtime+0x22>
 801dc3c:	2024      	movs	r0, #36	; 0x24
 801dc3e:	f000 f975 	bl	801df2c <malloc>
 801dc42:	4602      	mov	r2, r0
 801dc44:	63e8      	str	r0, [r5, #60]	; 0x3c
 801dc46:	b920      	cbnz	r0, 801dc52 <localtime+0x22>
 801dc48:	4b06      	ldr	r3, [pc, #24]	; (801dc64 <localtime+0x34>)
 801dc4a:	4807      	ldr	r0, [pc, #28]	; (801dc68 <localtime+0x38>)
 801dc4c:	2132      	movs	r1, #50	; 0x32
 801dc4e:	f001 fd29 	bl	801f6a4 <__assert_func>
 801dc52:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801dc54:	4620      	mov	r0, r4
 801dc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc5a:	f000 b807 	b.w	801dc6c <localtime_r>
 801dc5e:	bf00      	nop
 801dc60:	20000104 	.word	0x20000104
 801dc64:	08025d88 	.word	0x08025d88
 801dc68:	08025d9f 	.word	0x08025d9f

0801dc6c <localtime_r>:
 801dc6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801dc70:	4607      	mov	r7, r0
 801dc72:	9101      	str	r1, [sp, #4]
 801dc74:	f001 fde0 	bl	801f838 <__gettzinfo>
 801dc78:	9901      	ldr	r1, [sp, #4]
 801dc7a:	4680      	mov	r8, r0
 801dc7c:	4638      	mov	r0, r7
 801dc7e:	f001 fddf 	bl	801f840 <gmtime_r>
 801dc82:	6943      	ldr	r3, [r0, #20]
 801dc84:	079a      	lsls	r2, r3, #30
 801dc86:	4604      	mov	r4, r0
 801dc88:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801dc8c:	d105      	bne.n	801dc9a <localtime_r+0x2e>
 801dc8e:	2264      	movs	r2, #100	; 0x64
 801dc90:	fb96 f3f2 	sdiv	r3, r6, r2
 801dc94:	fb02 6313 	mls	r3, r2, r3, r6
 801dc98:	bb7b      	cbnz	r3, 801dcfa <localtime_r+0x8e>
 801dc9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801dc9e:	fb96 f5f3 	sdiv	r5, r6, r3
 801dca2:	fb03 6515 	mls	r5, r3, r5, r6
 801dca6:	fab5 f585 	clz	r5, r5
 801dcaa:	096d      	lsrs	r5, r5, #5
 801dcac:	4b68      	ldr	r3, [pc, #416]	; (801de50 <localtime_r+0x1e4>)
 801dcae:	2230      	movs	r2, #48	; 0x30
 801dcb0:	fb02 3505 	mla	r5, r2, r5, r3
 801dcb4:	f001 f9f6 	bl	801f0a4 <__tz_lock>
 801dcb8:	f001 fa00 	bl	801f0bc <_tzset_unlocked>
 801dcbc:	4b65      	ldr	r3, [pc, #404]	; (801de54 <localtime_r+0x1e8>)
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	b353      	cbz	r3, 801dd18 <localtime_r+0xac>
 801dcc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dcc6:	42b3      	cmp	r3, r6
 801dcc8:	d119      	bne.n	801dcfe <localtime_r+0x92>
 801dcca:	f8d8 1000 	ldr.w	r1, [r8]
 801dcce:	e9d7 6700 	ldrd	r6, r7, [r7]
 801dcd2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801dcd6:	b9d1      	cbnz	r1, 801dd0e <localtime_r+0xa2>
 801dcd8:	4296      	cmp	r6, r2
 801dcda:	eb77 0303 	sbcs.w	r3, r7, r3
 801dcde:	da23      	bge.n	801dd28 <localtime_r+0xbc>
 801dce0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801dce4:	4296      	cmp	r6, r2
 801dce6:	eb77 0303 	sbcs.w	r3, r7, r3
 801dcea:	bfb4      	ite	lt
 801dcec:	2301      	movlt	r3, #1
 801dcee:	2300      	movge	r3, #0
 801dcf0:	6223      	str	r3, [r4, #32]
 801dcf2:	db1b      	blt.n	801dd2c <localtime_r+0xc0>
 801dcf4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801dcf8:	e01a      	b.n	801dd30 <localtime_r+0xc4>
 801dcfa:	2501      	movs	r5, #1
 801dcfc:	e7d6      	b.n	801dcac <localtime_r+0x40>
 801dcfe:	4630      	mov	r0, r6
 801dd00:	f001 f928 	bl	801ef54 <__tzcalc_limits>
 801dd04:	2800      	cmp	r0, #0
 801dd06:	d1e0      	bne.n	801dcca <localtime_r+0x5e>
 801dd08:	f04f 33ff 	mov.w	r3, #4294967295
 801dd0c:	e004      	b.n	801dd18 <localtime_r+0xac>
 801dd0e:	4296      	cmp	r6, r2
 801dd10:	eb77 0303 	sbcs.w	r3, r7, r3
 801dd14:	da02      	bge.n	801dd1c <localtime_r+0xb0>
 801dd16:	2300      	movs	r3, #0
 801dd18:	6223      	str	r3, [r4, #32]
 801dd1a:	e7eb      	b.n	801dcf4 <localtime_r+0x88>
 801dd1c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801dd20:	4296      	cmp	r6, r2
 801dd22:	eb77 0303 	sbcs.w	r3, r7, r3
 801dd26:	daf6      	bge.n	801dd16 <localtime_r+0xaa>
 801dd28:	2301      	movs	r3, #1
 801dd2a:	6223      	str	r3, [r4, #32]
 801dd2c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801dd30:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801dd34:	203c      	movs	r0, #60	; 0x3c
 801dd36:	fb91 f6f3 	sdiv	r6, r1, r3
 801dd3a:	fb03 1316 	mls	r3, r3, r6, r1
 801dd3e:	6861      	ldr	r1, [r4, #4]
 801dd40:	fb93 f2f0 	sdiv	r2, r3, r0
 801dd44:	fb00 3012 	mls	r0, r0, r2, r3
 801dd48:	6823      	ldr	r3, [r4, #0]
 801dd4a:	1a89      	subs	r1, r1, r2
 801dd4c:	68a2      	ldr	r2, [r4, #8]
 801dd4e:	6061      	str	r1, [r4, #4]
 801dd50:	1a1b      	subs	r3, r3, r0
 801dd52:	1b92      	subs	r2, r2, r6
 801dd54:	2b3b      	cmp	r3, #59	; 0x3b
 801dd56:	6023      	str	r3, [r4, #0]
 801dd58:	60a2      	str	r2, [r4, #8]
 801dd5a:	dd35      	ble.n	801ddc8 <localtime_r+0x15c>
 801dd5c:	3101      	adds	r1, #1
 801dd5e:	6061      	str	r1, [r4, #4]
 801dd60:	3b3c      	subs	r3, #60	; 0x3c
 801dd62:	6023      	str	r3, [r4, #0]
 801dd64:	6863      	ldr	r3, [r4, #4]
 801dd66:	2b3b      	cmp	r3, #59	; 0x3b
 801dd68:	dd34      	ble.n	801ddd4 <localtime_r+0x168>
 801dd6a:	3201      	adds	r2, #1
 801dd6c:	60a2      	str	r2, [r4, #8]
 801dd6e:	3b3c      	subs	r3, #60	; 0x3c
 801dd70:	6063      	str	r3, [r4, #4]
 801dd72:	68a3      	ldr	r3, [r4, #8]
 801dd74:	2b17      	cmp	r3, #23
 801dd76:	dd33      	ble.n	801dde0 <localtime_r+0x174>
 801dd78:	69e2      	ldr	r2, [r4, #28]
 801dd7a:	3201      	adds	r2, #1
 801dd7c:	61e2      	str	r2, [r4, #28]
 801dd7e:	69a2      	ldr	r2, [r4, #24]
 801dd80:	3201      	adds	r2, #1
 801dd82:	2a06      	cmp	r2, #6
 801dd84:	bfc8      	it	gt
 801dd86:	2200      	movgt	r2, #0
 801dd88:	61a2      	str	r2, [r4, #24]
 801dd8a:	68e2      	ldr	r2, [r4, #12]
 801dd8c:	3b18      	subs	r3, #24
 801dd8e:	3201      	adds	r2, #1
 801dd90:	60a3      	str	r3, [r4, #8]
 801dd92:	6923      	ldr	r3, [r4, #16]
 801dd94:	60e2      	str	r2, [r4, #12]
 801dd96:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801dd9a:	428a      	cmp	r2, r1
 801dd9c:	dd0e      	ble.n	801ddbc <localtime_r+0x150>
 801dd9e:	2b0b      	cmp	r3, #11
 801dda0:	eba2 0201 	sub.w	r2, r2, r1
 801dda4:	60e2      	str	r2, [r4, #12]
 801dda6:	f103 0201 	add.w	r2, r3, #1
 801ddaa:	bf09      	itett	eq
 801ddac:	6963      	ldreq	r3, [r4, #20]
 801ddae:	6122      	strne	r2, [r4, #16]
 801ddb0:	2200      	moveq	r2, #0
 801ddb2:	3301      	addeq	r3, #1
 801ddb4:	bf02      	ittt	eq
 801ddb6:	6122      	streq	r2, [r4, #16]
 801ddb8:	6163      	streq	r3, [r4, #20]
 801ddba:	61e2      	streq	r2, [r4, #28]
 801ddbc:	f001 f978 	bl	801f0b0 <__tz_unlock>
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	b002      	add	sp, #8
 801ddc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	dacb      	bge.n	801dd64 <localtime_r+0xf8>
 801ddcc:	3901      	subs	r1, #1
 801ddce:	6061      	str	r1, [r4, #4]
 801ddd0:	333c      	adds	r3, #60	; 0x3c
 801ddd2:	e7c6      	b.n	801dd62 <localtime_r+0xf6>
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	dacc      	bge.n	801dd72 <localtime_r+0x106>
 801ddd8:	3a01      	subs	r2, #1
 801ddda:	60a2      	str	r2, [r4, #8]
 801dddc:	333c      	adds	r3, #60	; 0x3c
 801ddde:	e7c7      	b.n	801dd70 <localtime_r+0x104>
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	daeb      	bge.n	801ddbc <localtime_r+0x150>
 801dde4:	69e2      	ldr	r2, [r4, #28]
 801dde6:	3a01      	subs	r2, #1
 801dde8:	61e2      	str	r2, [r4, #28]
 801ddea:	69a2      	ldr	r2, [r4, #24]
 801ddec:	3a01      	subs	r2, #1
 801ddee:	bf48      	it	mi
 801ddf0:	2206      	movmi	r2, #6
 801ddf2:	61a2      	str	r2, [r4, #24]
 801ddf4:	68e2      	ldr	r2, [r4, #12]
 801ddf6:	3318      	adds	r3, #24
 801ddf8:	3a01      	subs	r2, #1
 801ddfa:	60e2      	str	r2, [r4, #12]
 801ddfc:	60a3      	str	r3, [r4, #8]
 801ddfe:	2a00      	cmp	r2, #0
 801de00:	d1dc      	bne.n	801ddbc <localtime_r+0x150>
 801de02:	6923      	ldr	r3, [r4, #16]
 801de04:	3b01      	subs	r3, #1
 801de06:	d405      	bmi.n	801de14 <localtime_r+0x1a8>
 801de08:	6123      	str	r3, [r4, #16]
 801de0a:	6923      	ldr	r3, [r4, #16]
 801de0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801de10:	60e3      	str	r3, [r4, #12]
 801de12:	e7d3      	b.n	801ddbc <localtime_r+0x150>
 801de14:	230b      	movs	r3, #11
 801de16:	6123      	str	r3, [r4, #16]
 801de18:	6963      	ldr	r3, [r4, #20]
 801de1a:	1e5a      	subs	r2, r3, #1
 801de1c:	6162      	str	r2, [r4, #20]
 801de1e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801de22:	0793      	lsls	r3, r2, #30
 801de24:	d105      	bne.n	801de32 <localtime_r+0x1c6>
 801de26:	2164      	movs	r1, #100	; 0x64
 801de28:	fb92 f3f1 	sdiv	r3, r2, r1
 801de2c:	fb01 2313 	mls	r3, r1, r3, r2
 801de30:	b963      	cbnz	r3, 801de4c <localtime_r+0x1e0>
 801de32:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801de36:	fb92 f3f1 	sdiv	r3, r2, r1
 801de3a:	fb01 2313 	mls	r3, r1, r3, r2
 801de3e:	fab3 f383 	clz	r3, r3
 801de42:	095b      	lsrs	r3, r3, #5
 801de44:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801de48:	61e3      	str	r3, [r4, #28]
 801de4a:	e7de      	b.n	801de0a <localtime_r+0x19e>
 801de4c:	2301      	movs	r3, #1
 801de4e:	e7f9      	b.n	801de44 <localtime_r+0x1d8>
 801de50:	08025e00 	.word	0x08025e00
 801de54:	20000d44 	.word	0x20000d44

0801de58 <__retarget_lock_init_recursive>:
 801de58:	4770      	bx	lr

0801de5a <__retarget_lock_close_recursive>:
 801de5a:	4770      	bx	lr

0801de5c <__retarget_lock_acquire>:
 801de5c:	4770      	bx	lr

0801de5e <__retarget_lock_acquire_recursive>:
 801de5e:	4770      	bx	lr

0801de60 <__retarget_lock_release>:
 801de60:	4770      	bx	lr

0801de62 <__retarget_lock_release_recursive>:
 801de62:	4770      	bx	lr

0801de64 <__swhatbuf_r>:
 801de64:	b570      	push	{r4, r5, r6, lr}
 801de66:	460e      	mov	r6, r1
 801de68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de6c:	2900      	cmp	r1, #0
 801de6e:	b096      	sub	sp, #88	; 0x58
 801de70:	4614      	mov	r4, r2
 801de72:	461d      	mov	r5, r3
 801de74:	da07      	bge.n	801de86 <__swhatbuf_r+0x22>
 801de76:	2300      	movs	r3, #0
 801de78:	602b      	str	r3, [r5, #0]
 801de7a:	89b3      	ldrh	r3, [r6, #12]
 801de7c:	061a      	lsls	r2, r3, #24
 801de7e:	d410      	bmi.n	801dea2 <__swhatbuf_r+0x3e>
 801de80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de84:	e00e      	b.n	801dea4 <__swhatbuf_r+0x40>
 801de86:	466a      	mov	r2, sp
 801de88:	f001 fc82 	bl	801f790 <_fstat_r>
 801de8c:	2800      	cmp	r0, #0
 801de8e:	dbf2      	blt.n	801de76 <__swhatbuf_r+0x12>
 801de90:	9a01      	ldr	r2, [sp, #4]
 801de92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801de96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801de9a:	425a      	negs	r2, r3
 801de9c:	415a      	adcs	r2, r3
 801de9e:	602a      	str	r2, [r5, #0]
 801dea0:	e7ee      	b.n	801de80 <__swhatbuf_r+0x1c>
 801dea2:	2340      	movs	r3, #64	; 0x40
 801dea4:	2000      	movs	r0, #0
 801dea6:	6023      	str	r3, [r4, #0]
 801dea8:	b016      	add	sp, #88	; 0x58
 801deaa:	bd70      	pop	{r4, r5, r6, pc}

0801deac <__smakebuf_r>:
 801deac:	898b      	ldrh	r3, [r1, #12]
 801deae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801deb0:	079d      	lsls	r5, r3, #30
 801deb2:	4606      	mov	r6, r0
 801deb4:	460c      	mov	r4, r1
 801deb6:	d507      	bpl.n	801dec8 <__smakebuf_r+0x1c>
 801deb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801debc:	6023      	str	r3, [r4, #0]
 801debe:	6123      	str	r3, [r4, #16]
 801dec0:	2301      	movs	r3, #1
 801dec2:	6163      	str	r3, [r4, #20]
 801dec4:	b002      	add	sp, #8
 801dec6:	bd70      	pop	{r4, r5, r6, pc}
 801dec8:	ab01      	add	r3, sp, #4
 801deca:	466a      	mov	r2, sp
 801decc:	f7ff ffca 	bl	801de64 <__swhatbuf_r>
 801ded0:	9900      	ldr	r1, [sp, #0]
 801ded2:	4605      	mov	r5, r0
 801ded4:	4630      	mov	r0, r6
 801ded6:	f000 f8af 	bl	801e038 <_malloc_r>
 801deda:	b948      	cbnz	r0, 801def0 <__smakebuf_r+0x44>
 801dedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dee0:	059a      	lsls	r2, r3, #22
 801dee2:	d4ef      	bmi.n	801dec4 <__smakebuf_r+0x18>
 801dee4:	f023 0303 	bic.w	r3, r3, #3
 801dee8:	f043 0302 	orr.w	r3, r3, #2
 801deec:	81a3      	strh	r3, [r4, #12]
 801deee:	e7e3      	b.n	801deb8 <__smakebuf_r+0xc>
 801def0:	4b0d      	ldr	r3, [pc, #52]	; (801df28 <__smakebuf_r+0x7c>)
 801def2:	62b3      	str	r3, [r6, #40]	; 0x28
 801def4:	89a3      	ldrh	r3, [r4, #12]
 801def6:	6020      	str	r0, [r4, #0]
 801def8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801defc:	81a3      	strh	r3, [r4, #12]
 801defe:	9b00      	ldr	r3, [sp, #0]
 801df00:	6163      	str	r3, [r4, #20]
 801df02:	9b01      	ldr	r3, [sp, #4]
 801df04:	6120      	str	r0, [r4, #16]
 801df06:	b15b      	cbz	r3, 801df20 <__smakebuf_r+0x74>
 801df08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df0c:	4630      	mov	r0, r6
 801df0e:	f001 fd47 	bl	801f9a0 <_isatty_r>
 801df12:	b128      	cbz	r0, 801df20 <__smakebuf_r+0x74>
 801df14:	89a3      	ldrh	r3, [r4, #12]
 801df16:	f023 0303 	bic.w	r3, r3, #3
 801df1a:	f043 0301 	orr.w	r3, r3, #1
 801df1e:	81a3      	strh	r3, [r4, #12]
 801df20:	89a0      	ldrh	r0, [r4, #12]
 801df22:	4305      	orrs	r5, r0
 801df24:	81a5      	strh	r5, [r4, #12]
 801df26:	e7cd      	b.n	801dec4 <__smakebuf_r+0x18>
 801df28:	0801d691 	.word	0x0801d691

0801df2c <malloc>:
 801df2c:	4b02      	ldr	r3, [pc, #8]	; (801df38 <malloc+0xc>)
 801df2e:	4601      	mov	r1, r0
 801df30:	6818      	ldr	r0, [r3, #0]
 801df32:	f000 b881 	b.w	801e038 <_malloc_r>
 801df36:	bf00      	nop
 801df38:	20000104 	.word	0x20000104

0801df3c <free>:
 801df3c:	4b02      	ldr	r3, [pc, #8]	; (801df48 <free+0xc>)
 801df3e:	4601      	mov	r1, r0
 801df40:	6818      	ldr	r0, [r3, #0]
 801df42:	f000 b829 	b.w	801df98 <_free_r>
 801df46:	bf00      	nop
 801df48:	20000104 	.word	0x20000104

0801df4c <memcpy>:
 801df4c:	440a      	add	r2, r1
 801df4e:	4291      	cmp	r1, r2
 801df50:	f100 33ff 	add.w	r3, r0, #4294967295
 801df54:	d100      	bne.n	801df58 <memcpy+0xc>
 801df56:	4770      	bx	lr
 801df58:	b510      	push	{r4, lr}
 801df5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df62:	4291      	cmp	r1, r2
 801df64:	d1f9      	bne.n	801df5a <memcpy+0xe>
 801df66:	bd10      	pop	{r4, pc}

0801df68 <memset>:
 801df68:	4402      	add	r2, r0
 801df6a:	4603      	mov	r3, r0
 801df6c:	4293      	cmp	r3, r2
 801df6e:	d100      	bne.n	801df72 <memset+0xa>
 801df70:	4770      	bx	lr
 801df72:	f803 1b01 	strb.w	r1, [r3], #1
 801df76:	e7f9      	b.n	801df6c <memset+0x4>

0801df78 <_calloc_r>:
 801df78:	b513      	push	{r0, r1, r4, lr}
 801df7a:	434a      	muls	r2, r1
 801df7c:	4611      	mov	r1, r2
 801df7e:	9201      	str	r2, [sp, #4]
 801df80:	f000 f85a 	bl	801e038 <_malloc_r>
 801df84:	4604      	mov	r4, r0
 801df86:	b118      	cbz	r0, 801df90 <_calloc_r+0x18>
 801df88:	9a01      	ldr	r2, [sp, #4]
 801df8a:	2100      	movs	r1, #0
 801df8c:	f7ff ffec 	bl	801df68 <memset>
 801df90:	4620      	mov	r0, r4
 801df92:	b002      	add	sp, #8
 801df94:	bd10      	pop	{r4, pc}
	...

0801df98 <_free_r>:
 801df98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801df9a:	2900      	cmp	r1, #0
 801df9c:	d048      	beq.n	801e030 <_free_r+0x98>
 801df9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfa2:	9001      	str	r0, [sp, #4]
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	f1a1 0404 	sub.w	r4, r1, #4
 801dfaa:	bfb8      	it	lt
 801dfac:	18e4      	addlt	r4, r4, r3
 801dfae:	f001 fd2f 	bl	801fa10 <__malloc_lock>
 801dfb2:	4a20      	ldr	r2, [pc, #128]	; (801e034 <_free_r+0x9c>)
 801dfb4:	9801      	ldr	r0, [sp, #4]
 801dfb6:	6813      	ldr	r3, [r2, #0]
 801dfb8:	4615      	mov	r5, r2
 801dfba:	b933      	cbnz	r3, 801dfca <_free_r+0x32>
 801dfbc:	6063      	str	r3, [r4, #4]
 801dfbe:	6014      	str	r4, [r2, #0]
 801dfc0:	b003      	add	sp, #12
 801dfc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dfc6:	f001 bd29 	b.w	801fa1c <__malloc_unlock>
 801dfca:	42a3      	cmp	r3, r4
 801dfcc:	d90b      	bls.n	801dfe6 <_free_r+0x4e>
 801dfce:	6821      	ldr	r1, [r4, #0]
 801dfd0:	1862      	adds	r2, r4, r1
 801dfd2:	4293      	cmp	r3, r2
 801dfd4:	bf04      	itt	eq
 801dfd6:	681a      	ldreq	r2, [r3, #0]
 801dfd8:	685b      	ldreq	r3, [r3, #4]
 801dfda:	6063      	str	r3, [r4, #4]
 801dfdc:	bf04      	itt	eq
 801dfde:	1852      	addeq	r2, r2, r1
 801dfe0:	6022      	streq	r2, [r4, #0]
 801dfe2:	602c      	str	r4, [r5, #0]
 801dfe4:	e7ec      	b.n	801dfc0 <_free_r+0x28>
 801dfe6:	461a      	mov	r2, r3
 801dfe8:	685b      	ldr	r3, [r3, #4]
 801dfea:	b10b      	cbz	r3, 801dff0 <_free_r+0x58>
 801dfec:	42a3      	cmp	r3, r4
 801dfee:	d9fa      	bls.n	801dfe6 <_free_r+0x4e>
 801dff0:	6811      	ldr	r1, [r2, #0]
 801dff2:	1855      	adds	r5, r2, r1
 801dff4:	42a5      	cmp	r5, r4
 801dff6:	d10b      	bne.n	801e010 <_free_r+0x78>
 801dff8:	6824      	ldr	r4, [r4, #0]
 801dffa:	4421      	add	r1, r4
 801dffc:	1854      	adds	r4, r2, r1
 801dffe:	42a3      	cmp	r3, r4
 801e000:	6011      	str	r1, [r2, #0]
 801e002:	d1dd      	bne.n	801dfc0 <_free_r+0x28>
 801e004:	681c      	ldr	r4, [r3, #0]
 801e006:	685b      	ldr	r3, [r3, #4]
 801e008:	6053      	str	r3, [r2, #4]
 801e00a:	4421      	add	r1, r4
 801e00c:	6011      	str	r1, [r2, #0]
 801e00e:	e7d7      	b.n	801dfc0 <_free_r+0x28>
 801e010:	d902      	bls.n	801e018 <_free_r+0x80>
 801e012:	230c      	movs	r3, #12
 801e014:	6003      	str	r3, [r0, #0]
 801e016:	e7d3      	b.n	801dfc0 <_free_r+0x28>
 801e018:	6825      	ldr	r5, [r4, #0]
 801e01a:	1961      	adds	r1, r4, r5
 801e01c:	428b      	cmp	r3, r1
 801e01e:	bf04      	itt	eq
 801e020:	6819      	ldreq	r1, [r3, #0]
 801e022:	685b      	ldreq	r3, [r3, #4]
 801e024:	6063      	str	r3, [r4, #4]
 801e026:	bf04      	itt	eq
 801e028:	1949      	addeq	r1, r1, r5
 801e02a:	6021      	streq	r1, [r4, #0]
 801e02c:	6054      	str	r4, [r2, #4]
 801e02e:	e7c7      	b.n	801dfc0 <_free_r+0x28>
 801e030:	b003      	add	sp, #12
 801e032:	bd30      	pop	{r4, r5, pc}
 801e034:	20000d20 	.word	0x20000d20

0801e038 <_malloc_r>:
 801e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e03a:	1ccd      	adds	r5, r1, #3
 801e03c:	f025 0503 	bic.w	r5, r5, #3
 801e040:	3508      	adds	r5, #8
 801e042:	2d0c      	cmp	r5, #12
 801e044:	bf38      	it	cc
 801e046:	250c      	movcc	r5, #12
 801e048:	2d00      	cmp	r5, #0
 801e04a:	4606      	mov	r6, r0
 801e04c:	db01      	blt.n	801e052 <_malloc_r+0x1a>
 801e04e:	42a9      	cmp	r1, r5
 801e050:	d903      	bls.n	801e05a <_malloc_r+0x22>
 801e052:	230c      	movs	r3, #12
 801e054:	6033      	str	r3, [r6, #0]
 801e056:	2000      	movs	r0, #0
 801e058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e05a:	f001 fcd9 	bl	801fa10 <__malloc_lock>
 801e05e:	4921      	ldr	r1, [pc, #132]	; (801e0e4 <_malloc_r+0xac>)
 801e060:	680a      	ldr	r2, [r1, #0]
 801e062:	4614      	mov	r4, r2
 801e064:	b99c      	cbnz	r4, 801e08e <_malloc_r+0x56>
 801e066:	4f20      	ldr	r7, [pc, #128]	; (801e0e8 <_malloc_r+0xb0>)
 801e068:	683b      	ldr	r3, [r7, #0]
 801e06a:	b923      	cbnz	r3, 801e076 <_malloc_r+0x3e>
 801e06c:	4621      	mov	r1, r4
 801e06e:	4630      	mov	r0, r6
 801e070:	f000 f8da 	bl	801e228 <_sbrk_r>
 801e074:	6038      	str	r0, [r7, #0]
 801e076:	4629      	mov	r1, r5
 801e078:	4630      	mov	r0, r6
 801e07a:	f000 f8d5 	bl	801e228 <_sbrk_r>
 801e07e:	1c43      	adds	r3, r0, #1
 801e080:	d123      	bne.n	801e0ca <_malloc_r+0x92>
 801e082:	230c      	movs	r3, #12
 801e084:	6033      	str	r3, [r6, #0]
 801e086:	4630      	mov	r0, r6
 801e088:	f001 fcc8 	bl	801fa1c <__malloc_unlock>
 801e08c:	e7e3      	b.n	801e056 <_malloc_r+0x1e>
 801e08e:	6823      	ldr	r3, [r4, #0]
 801e090:	1b5b      	subs	r3, r3, r5
 801e092:	d417      	bmi.n	801e0c4 <_malloc_r+0x8c>
 801e094:	2b0b      	cmp	r3, #11
 801e096:	d903      	bls.n	801e0a0 <_malloc_r+0x68>
 801e098:	6023      	str	r3, [r4, #0]
 801e09a:	441c      	add	r4, r3
 801e09c:	6025      	str	r5, [r4, #0]
 801e09e:	e004      	b.n	801e0aa <_malloc_r+0x72>
 801e0a0:	6863      	ldr	r3, [r4, #4]
 801e0a2:	42a2      	cmp	r2, r4
 801e0a4:	bf0c      	ite	eq
 801e0a6:	600b      	streq	r3, [r1, #0]
 801e0a8:	6053      	strne	r3, [r2, #4]
 801e0aa:	4630      	mov	r0, r6
 801e0ac:	f001 fcb6 	bl	801fa1c <__malloc_unlock>
 801e0b0:	f104 000b 	add.w	r0, r4, #11
 801e0b4:	1d23      	adds	r3, r4, #4
 801e0b6:	f020 0007 	bic.w	r0, r0, #7
 801e0ba:	1ac2      	subs	r2, r0, r3
 801e0bc:	d0cc      	beq.n	801e058 <_malloc_r+0x20>
 801e0be:	1a1b      	subs	r3, r3, r0
 801e0c0:	50a3      	str	r3, [r4, r2]
 801e0c2:	e7c9      	b.n	801e058 <_malloc_r+0x20>
 801e0c4:	4622      	mov	r2, r4
 801e0c6:	6864      	ldr	r4, [r4, #4]
 801e0c8:	e7cc      	b.n	801e064 <_malloc_r+0x2c>
 801e0ca:	1cc4      	adds	r4, r0, #3
 801e0cc:	f024 0403 	bic.w	r4, r4, #3
 801e0d0:	42a0      	cmp	r0, r4
 801e0d2:	d0e3      	beq.n	801e09c <_malloc_r+0x64>
 801e0d4:	1a21      	subs	r1, r4, r0
 801e0d6:	4630      	mov	r0, r6
 801e0d8:	f000 f8a6 	bl	801e228 <_sbrk_r>
 801e0dc:	3001      	adds	r0, #1
 801e0de:	d1dd      	bne.n	801e09c <_malloc_r+0x64>
 801e0e0:	e7cf      	b.n	801e082 <_malloc_r+0x4a>
 801e0e2:	bf00      	nop
 801e0e4:	20000d20 	.word	0x20000d20
 801e0e8:	20000d24 	.word	0x20000d24

0801e0ec <_open_r>:
 801e0ec:	b538      	push	{r3, r4, r5, lr}
 801e0ee:	4d07      	ldr	r5, [pc, #28]	; (801e10c <_open_r+0x20>)
 801e0f0:	4604      	mov	r4, r0
 801e0f2:	4608      	mov	r0, r1
 801e0f4:	4611      	mov	r1, r2
 801e0f6:	2200      	movs	r2, #0
 801e0f8:	602a      	str	r2, [r5, #0]
 801e0fa:	461a      	mov	r2, r3
 801e0fc:	f7e2 feb8 	bl	8000e70 <_open>
 801e100:	1c43      	adds	r3, r0, #1
 801e102:	d102      	bne.n	801e10a <_open_r+0x1e>
 801e104:	682b      	ldr	r3, [r5, #0]
 801e106:	b103      	cbz	r3, 801e10a <_open_r+0x1e>
 801e108:	6023      	str	r3, [r4, #0]
 801e10a:	bd38      	pop	{r3, r4, r5, pc}
 801e10c:	20000dec 	.word	0x20000dec

0801e110 <putchar>:
 801e110:	4b09      	ldr	r3, [pc, #36]	; (801e138 <putchar+0x28>)
 801e112:	b513      	push	{r0, r1, r4, lr}
 801e114:	681c      	ldr	r4, [r3, #0]
 801e116:	4601      	mov	r1, r0
 801e118:	b134      	cbz	r4, 801e128 <putchar+0x18>
 801e11a:	69a3      	ldr	r3, [r4, #24]
 801e11c:	b923      	cbnz	r3, 801e128 <putchar+0x18>
 801e11e:	9001      	str	r0, [sp, #4]
 801e120:	4620      	mov	r0, r4
 801e122:	f7ff fae9 	bl	801d6f8 <__sinit>
 801e126:	9901      	ldr	r1, [sp, #4]
 801e128:	68a2      	ldr	r2, [r4, #8]
 801e12a:	4620      	mov	r0, r4
 801e12c:	b002      	add	sp, #8
 801e12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e132:	f002 b8e9 	b.w	8020308 <_putc_r>
 801e136:	bf00      	nop
 801e138:	20000104 	.word	0x20000104

0801e13c <srand>:
 801e13c:	b538      	push	{r3, r4, r5, lr}
 801e13e:	4b10      	ldr	r3, [pc, #64]	; (801e180 <srand+0x44>)
 801e140:	681d      	ldr	r5, [r3, #0]
 801e142:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e144:	4604      	mov	r4, r0
 801e146:	b9b3      	cbnz	r3, 801e176 <srand+0x3a>
 801e148:	2018      	movs	r0, #24
 801e14a:	f7ff feef 	bl	801df2c <malloc>
 801e14e:	4602      	mov	r2, r0
 801e150:	63a8      	str	r0, [r5, #56]	; 0x38
 801e152:	b920      	cbnz	r0, 801e15e <srand+0x22>
 801e154:	4b0b      	ldr	r3, [pc, #44]	; (801e184 <srand+0x48>)
 801e156:	480c      	ldr	r0, [pc, #48]	; (801e188 <srand+0x4c>)
 801e158:	2142      	movs	r1, #66	; 0x42
 801e15a:	f001 faa3 	bl	801f6a4 <__assert_func>
 801e15e:	490b      	ldr	r1, [pc, #44]	; (801e18c <srand+0x50>)
 801e160:	4b0b      	ldr	r3, [pc, #44]	; (801e190 <srand+0x54>)
 801e162:	e9c0 1300 	strd	r1, r3, [r0]
 801e166:	4b0b      	ldr	r3, [pc, #44]	; (801e194 <srand+0x58>)
 801e168:	6083      	str	r3, [r0, #8]
 801e16a:	230b      	movs	r3, #11
 801e16c:	8183      	strh	r3, [r0, #12]
 801e16e:	2100      	movs	r1, #0
 801e170:	2001      	movs	r0, #1
 801e172:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e176:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e178:	2200      	movs	r2, #0
 801e17a:	611c      	str	r4, [r3, #16]
 801e17c:	615a      	str	r2, [r3, #20]
 801e17e:	bd38      	pop	{r3, r4, r5, pc}
 801e180:	20000104 	.word	0x20000104
 801e184:	08025d88 	.word	0x08025d88
 801e188:	08025e60 	.word	0x08025e60
 801e18c:	abcd330e 	.word	0xabcd330e
 801e190:	e66d1234 	.word	0xe66d1234
 801e194:	0005deec 	.word	0x0005deec

0801e198 <rand>:
 801e198:	4b17      	ldr	r3, [pc, #92]	; (801e1f8 <rand+0x60>)
 801e19a:	b510      	push	{r4, lr}
 801e19c:	681c      	ldr	r4, [r3, #0]
 801e19e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e1a0:	b9b3      	cbnz	r3, 801e1d0 <rand+0x38>
 801e1a2:	2018      	movs	r0, #24
 801e1a4:	f7ff fec2 	bl	801df2c <malloc>
 801e1a8:	63a0      	str	r0, [r4, #56]	; 0x38
 801e1aa:	b928      	cbnz	r0, 801e1b8 <rand+0x20>
 801e1ac:	4602      	mov	r2, r0
 801e1ae:	4b13      	ldr	r3, [pc, #76]	; (801e1fc <rand+0x64>)
 801e1b0:	4813      	ldr	r0, [pc, #76]	; (801e200 <rand+0x68>)
 801e1b2:	214e      	movs	r1, #78	; 0x4e
 801e1b4:	f001 fa76 	bl	801f6a4 <__assert_func>
 801e1b8:	4a12      	ldr	r2, [pc, #72]	; (801e204 <rand+0x6c>)
 801e1ba:	4b13      	ldr	r3, [pc, #76]	; (801e208 <rand+0x70>)
 801e1bc:	e9c0 2300 	strd	r2, r3, [r0]
 801e1c0:	4b12      	ldr	r3, [pc, #72]	; (801e20c <rand+0x74>)
 801e1c2:	6083      	str	r3, [r0, #8]
 801e1c4:	230b      	movs	r3, #11
 801e1c6:	8183      	strh	r3, [r0, #12]
 801e1c8:	2201      	movs	r2, #1
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e1d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e1d2:	480f      	ldr	r0, [pc, #60]	; (801e210 <rand+0x78>)
 801e1d4:	690a      	ldr	r2, [r1, #16]
 801e1d6:	694b      	ldr	r3, [r1, #20]
 801e1d8:	4c0e      	ldr	r4, [pc, #56]	; (801e214 <rand+0x7c>)
 801e1da:	4350      	muls	r0, r2
 801e1dc:	fb04 0003 	mla	r0, r4, r3, r0
 801e1e0:	fba2 3404 	umull	r3, r4, r2, r4
 801e1e4:	1c5a      	adds	r2, r3, #1
 801e1e6:	4404      	add	r4, r0
 801e1e8:	f144 0000 	adc.w	r0, r4, #0
 801e1ec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801e1f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e1f4:	bd10      	pop	{r4, pc}
 801e1f6:	bf00      	nop
 801e1f8:	20000104 	.word	0x20000104
 801e1fc:	08025d88 	.word	0x08025d88
 801e200:	08025e60 	.word	0x08025e60
 801e204:	abcd330e 	.word	0xabcd330e
 801e208:	e66d1234 	.word	0xe66d1234
 801e20c:	0005deec 	.word	0x0005deec
 801e210:	5851f42d 	.word	0x5851f42d
 801e214:	4c957f2d 	.word	0x4c957f2d

0801e218 <realloc>:
 801e218:	4b02      	ldr	r3, [pc, #8]	; (801e224 <realloc+0xc>)
 801e21a:	460a      	mov	r2, r1
 801e21c:	4601      	mov	r1, r0
 801e21e:	6818      	ldr	r0, [r3, #0]
 801e220:	f001 bc02 	b.w	801fa28 <_realloc_r>
 801e224:	20000104 	.word	0x20000104

0801e228 <_sbrk_r>:
 801e228:	b538      	push	{r3, r4, r5, lr}
 801e22a:	4d06      	ldr	r5, [pc, #24]	; (801e244 <_sbrk_r+0x1c>)
 801e22c:	2300      	movs	r3, #0
 801e22e:	4604      	mov	r4, r0
 801e230:	4608      	mov	r0, r1
 801e232:	602b      	str	r3, [r5, #0]
 801e234:	f7e2 fe2a 	bl	8000e8c <_sbrk>
 801e238:	1c43      	adds	r3, r0, #1
 801e23a:	d102      	bne.n	801e242 <_sbrk_r+0x1a>
 801e23c:	682b      	ldr	r3, [r5, #0]
 801e23e:	b103      	cbz	r3, 801e242 <_sbrk_r+0x1a>
 801e240:	6023      	str	r3, [r4, #0]
 801e242:	bd38      	pop	{r3, r4, r5, pc}
 801e244:	20000dec 	.word	0x20000dec

0801e248 <_raise_r>:
 801e248:	291f      	cmp	r1, #31
 801e24a:	b538      	push	{r3, r4, r5, lr}
 801e24c:	4604      	mov	r4, r0
 801e24e:	460d      	mov	r5, r1
 801e250:	d904      	bls.n	801e25c <_raise_r+0x14>
 801e252:	2316      	movs	r3, #22
 801e254:	6003      	str	r3, [r0, #0]
 801e256:	f04f 30ff 	mov.w	r0, #4294967295
 801e25a:	bd38      	pop	{r3, r4, r5, pc}
 801e25c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e25e:	b112      	cbz	r2, 801e266 <_raise_r+0x1e>
 801e260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e264:	b94b      	cbnz	r3, 801e27a <_raise_r+0x32>
 801e266:	4620      	mov	r0, r4
 801e268:	f000 f830 	bl	801e2cc <_getpid_r>
 801e26c:	462a      	mov	r2, r5
 801e26e:	4601      	mov	r1, r0
 801e270:	4620      	mov	r0, r4
 801e272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e276:	f000 b817 	b.w	801e2a8 <_kill_r>
 801e27a:	2b01      	cmp	r3, #1
 801e27c:	d00a      	beq.n	801e294 <_raise_r+0x4c>
 801e27e:	1c59      	adds	r1, r3, #1
 801e280:	d103      	bne.n	801e28a <_raise_r+0x42>
 801e282:	2316      	movs	r3, #22
 801e284:	6003      	str	r3, [r0, #0]
 801e286:	2001      	movs	r0, #1
 801e288:	e7e7      	b.n	801e25a <_raise_r+0x12>
 801e28a:	2400      	movs	r4, #0
 801e28c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e290:	4628      	mov	r0, r5
 801e292:	4798      	blx	r3
 801e294:	2000      	movs	r0, #0
 801e296:	e7e0      	b.n	801e25a <_raise_r+0x12>

0801e298 <raise>:
 801e298:	4b02      	ldr	r3, [pc, #8]	; (801e2a4 <raise+0xc>)
 801e29a:	4601      	mov	r1, r0
 801e29c:	6818      	ldr	r0, [r3, #0]
 801e29e:	f7ff bfd3 	b.w	801e248 <_raise_r>
 801e2a2:	bf00      	nop
 801e2a4:	20000104 	.word	0x20000104

0801e2a8 <_kill_r>:
 801e2a8:	b538      	push	{r3, r4, r5, lr}
 801e2aa:	4d07      	ldr	r5, [pc, #28]	; (801e2c8 <_kill_r+0x20>)
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	4604      	mov	r4, r0
 801e2b0:	4608      	mov	r0, r1
 801e2b2:	4611      	mov	r1, r2
 801e2b4:	602b      	str	r3, [r5, #0]
 801e2b6:	f7e2 fd54 	bl	8000d62 <_kill>
 801e2ba:	1c43      	adds	r3, r0, #1
 801e2bc:	d102      	bne.n	801e2c4 <_kill_r+0x1c>
 801e2be:	682b      	ldr	r3, [r5, #0]
 801e2c0:	b103      	cbz	r3, 801e2c4 <_kill_r+0x1c>
 801e2c2:	6023      	str	r3, [r4, #0]
 801e2c4:	bd38      	pop	{r3, r4, r5, pc}
 801e2c6:	bf00      	nop
 801e2c8:	20000dec 	.word	0x20000dec

0801e2cc <_getpid_r>:
 801e2cc:	f7e2 bd41 	b.w	8000d52 <_getpid>

0801e2d0 <__sread>:
 801e2d0:	b510      	push	{r4, lr}
 801e2d2:	460c      	mov	r4, r1
 801e2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2d8:	f002 f85e 	bl	8020398 <_read_r>
 801e2dc:	2800      	cmp	r0, #0
 801e2de:	bfab      	itete	ge
 801e2e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e2e2:	89a3      	ldrhlt	r3, [r4, #12]
 801e2e4:	181b      	addge	r3, r3, r0
 801e2e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e2ea:	bfac      	ite	ge
 801e2ec:	6563      	strge	r3, [r4, #84]	; 0x54
 801e2ee:	81a3      	strhlt	r3, [r4, #12]
 801e2f0:	bd10      	pop	{r4, pc}

0801e2f2 <__seofread>:
 801e2f2:	2000      	movs	r0, #0
 801e2f4:	4770      	bx	lr

0801e2f6 <__swrite>:
 801e2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2fa:	461f      	mov	r7, r3
 801e2fc:	898b      	ldrh	r3, [r1, #12]
 801e2fe:	05db      	lsls	r3, r3, #23
 801e300:	4605      	mov	r5, r0
 801e302:	460c      	mov	r4, r1
 801e304:	4616      	mov	r6, r2
 801e306:	d505      	bpl.n	801e314 <__swrite+0x1e>
 801e308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e30c:	2302      	movs	r3, #2
 801e30e:	2200      	movs	r2, #0
 801e310:	f001 fb5a 	bl	801f9c8 <_lseek_r>
 801e314:	89a3      	ldrh	r3, [r4, #12]
 801e316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e31e:	81a3      	strh	r3, [r4, #12]
 801e320:	4632      	mov	r2, r6
 801e322:	463b      	mov	r3, r7
 801e324:	4628      	mov	r0, r5
 801e326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e32a:	f001 b8d5 	b.w	801f4d8 <_write_r>

0801e32e <__sseek>:
 801e32e:	b510      	push	{r4, lr}
 801e330:	460c      	mov	r4, r1
 801e332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e336:	f001 fb47 	bl	801f9c8 <_lseek_r>
 801e33a:	1c43      	adds	r3, r0, #1
 801e33c:	89a3      	ldrh	r3, [r4, #12]
 801e33e:	bf15      	itete	ne
 801e340:	6560      	strne	r0, [r4, #84]	; 0x54
 801e342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e34a:	81a3      	strheq	r3, [r4, #12]
 801e34c:	bf18      	it	ne
 801e34e:	81a3      	strhne	r3, [r4, #12]
 801e350:	bd10      	pop	{r4, pc}

0801e352 <__sclose>:
 801e352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e356:	f001 b9c3 	b.w	801f6e0 <_close_r>
	...

0801e35c <iso_year_adjust>:
 801e35c:	6941      	ldr	r1, [r0, #20]
 801e35e:	2900      	cmp	r1, #0
 801e360:	f240 736c 	movw	r3, #1900	; 0x76c
 801e364:	bfa8      	it	ge
 801e366:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801e36a:	18ca      	adds	r2, r1, r3
 801e36c:	078b      	lsls	r3, r1, #30
 801e36e:	d105      	bne.n	801e37c <iso_year_adjust+0x20>
 801e370:	2164      	movs	r1, #100	; 0x64
 801e372:	fb92 f3f1 	sdiv	r3, r2, r1
 801e376:	fb01 2313 	mls	r3, r1, r3, r2
 801e37a:	b9db      	cbnz	r3, 801e3b4 <iso_year_adjust+0x58>
 801e37c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e380:	fb92 f3f1 	sdiv	r3, r2, r1
 801e384:	fb01 2313 	mls	r3, r1, r3, r2
 801e388:	fab3 f383 	clz	r3, r3
 801e38c:	095b      	lsrs	r3, r3, #5
 801e38e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801e392:	0040      	lsls	r0, r0, #1
 801e394:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801e398:	4418      	add	r0, r3
 801e39a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801e39e:	4298      	cmp	r0, r3
 801e3a0:	d03a      	beq.n	801e418 <iso_year_adjust+0xbc>
 801e3a2:	dc21      	bgt.n	801e3e8 <iso_year_adjust+0x8c>
 801e3a4:	2801      	cmp	r0, #1
 801e3a6:	dc1a      	bgt.n	801e3de <iso_year_adjust+0x82>
 801e3a8:	2800      	cmp	r0, #0
 801e3aa:	bfb4      	ite	lt
 801e3ac:	2000      	movlt	r0, #0
 801e3ae:	f04f 30ff 	movge.w	r0, #4294967295
 801e3b2:	4770      	bx	lr
 801e3b4:	2301      	movs	r3, #1
 801e3b6:	e7ea      	b.n	801e38e <iso_year_adjust+0x32>
 801e3b8:	2817      	cmp	r0, #23
 801e3ba:	d813      	bhi.n	801e3e4 <iso_year_adjust+0x88>
 801e3bc:	e8df f000 	tbb	[pc, r0]
 801e3c0:	0c0c0c0c 	.word	0x0c0c0c0c
 801e3c4:	0c0c1212 	.word	0x0c0c1212
 801e3c8:	12121212 	.word	0x12121212
 801e3cc:	12121212 	.word	0x12121212
 801e3d0:	0c0c1212 	.word	0x0c0c1212
 801e3d4:	0c0c1212 	.word	0x0c0c1212
 801e3d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e3dc:	4770      	bx	lr
 801e3de:	380a      	subs	r0, #10
 801e3e0:	2817      	cmp	r0, #23
 801e3e2:	d9e9      	bls.n	801e3b8 <iso_year_adjust+0x5c>
 801e3e4:	2000      	movs	r0, #0
 801e3e6:	4770      	bx	lr
 801e3e8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801e3ec:	4298      	cmp	r0, r3
 801e3ee:	dc06      	bgt.n	801e3fe <iso_year_adjust+0xa2>
 801e3f0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801e3f4:	4298      	cmp	r0, r3
 801e3f6:	bfd4      	ite	le
 801e3f8:	2000      	movle	r0, #0
 801e3fa:	2001      	movgt	r0, #1
 801e3fc:	4770      	bx	lr
 801e3fe:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801e402:	3802      	subs	r0, #2
 801e404:	2815      	cmp	r0, #21
 801e406:	d8ed      	bhi.n	801e3e4 <iso_year_adjust+0x88>
 801e408:	2301      	movs	r3, #1
 801e40a:	4083      	lsls	r3, r0
 801e40c:	4803      	ldr	r0, [pc, #12]	; (801e41c <iso_year_adjust+0xc0>)
 801e40e:	4018      	ands	r0, r3
 801e410:	3800      	subs	r0, #0
 801e412:	bf18      	it	ne
 801e414:	2001      	movne	r0, #1
 801e416:	4770      	bx	lr
 801e418:	2001      	movs	r0, #1
 801e41a:	4770      	bx	lr
 801e41c:	002a001f 	.word	0x002a001f

0801e420 <__strftime>:
 801e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e424:	b091      	sub	sp, #68	; 0x44
 801e426:	461d      	mov	r5, r3
 801e428:	2300      	movs	r3, #0
 801e42a:	4681      	mov	r9, r0
 801e42c:	4688      	mov	r8, r1
 801e42e:	9304      	str	r3, [sp, #16]
 801e430:	461c      	mov	r4, r3
 801e432:	7813      	ldrb	r3, [r2, #0]
 801e434:	2b00      	cmp	r3, #0
 801e436:	f000 84d1 	beq.w	801eddc <__strftime+0x9bc>
 801e43a:	2b25      	cmp	r3, #37	; 0x25
 801e43c:	d11b      	bne.n	801e476 <__strftime+0x56>
 801e43e:	7857      	ldrb	r7, [r2, #1]
 801e440:	2f30      	cmp	r7, #48	; 0x30
 801e442:	d024      	beq.n	801e48e <__strftime+0x6e>
 801e444:	2f2b      	cmp	r7, #43	; 0x2b
 801e446:	d022      	beq.n	801e48e <__strftime+0x6e>
 801e448:	f102 0b01 	add.w	fp, r2, #1
 801e44c:	2700      	movs	r7, #0
 801e44e:	f89b 3000 	ldrb.w	r3, [fp]
 801e452:	3b31      	subs	r3, #49	; 0x31
 801e454:	2b08      	cmp	r3, #8
 801e456:	d81d      	bhi.n	801e494 <__strftime+0x74>
 801e458:	4658      	mov	r0, fp
 801e45a:	220a      	movs	r2, #10
 801e45c:	a908      	add	r1, sp, #32
 801e45e:	f000 fd6f 	bl	801ef40 <strtoul>
 801e462:	f8dd b020 	ldr.w	fp, [sp, #32]
 801e466:	4606      	mov	r6, r0
 801e468:	f89b 3000 	ldrb.w	r3, [fp]
 801e46c:	2b45      	cmp	r3, #69	; 0x45
 801e46e:	d113      	bne.n	801e498 <__strftime+0x78>
 801e470:	f10b 0b01 	add.w	fp, fp, #1
 801e474:	e012      	b.n	801e49c <__strftime+0x7c>
 801e476:	f108 31ff 	add.w	r1, r8, #4294967295
 801e47a:	42a1      	cmp	r1, r4
 801e47c:	d802      	bhi.n	801e484 <__strftime+0x64>
 801e47e:	2400      	movs	r4, #0
 801e480:	f000 bcb2 	b.w	801ede8 <__strftime+0x9c8>
 801e484:	f809 3004 	strb.w	r3, [r9, r4]
 801e488:	3201      	adds	r2, #1
 801e48a:	3401      	adds	r4, #1
 801e48c:	e7d1      	b.n	801e432 <__strftime+0x12>
 801e48e:	f102 0b02 	add.w	fp, r2, #2
 801e492:	e7dc      	b.n	801e44e <__strftime+0x2e>
 801e494:	2600      	movs	r6, #0
 801e496:	e7e7      	b.n	801e468 <__strftime+0x48>
 801e498:	2b4f      	cmp	r3, #79	; 0x4f
 801e49a:	d0e9      	beq.n	801e470 <__strftime+0x50>
 801e49c:	f89b 0000 	ldrb.w	r0, [fp]
 801e4a0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801e4a4:	2b55      	cmp	r3, #85	; 0x55
 801e4a6:	d8ea      	bhi.n	801e47e <__strftime+0x5e>
 801e4a8:	a201      	add	r2, pc, #4	; (adr r2, 801e4b0 <__strftime+0x90>)
 801e4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4ae:	bf00      	nop
 801e4b0:	0801edcf 	.word	0x0801edcf
 801e4b4:	0801e47f 	.word	0x0801e47f
 801e4b8:	0801e47f 	.word	0x0801e47f
 801e4bc:	0801e47f 	.word	0x0801e47f
 801e4c0:	0801e47f 	.word	0x0801e47f
 801e4c4:	0801e47f 	.word	0x0801e47f
 801e4c8:	0801e47f 	.word	0x0801e47f
 801e4cc:	0801e47f 	.word	0x0801e47f
 801e4d0:	0801e47f 	.word	0x0801e47f
 801e4d4:	0801e47f 	.word	0x0801e47f
 801e4d8:	0801e47f 	.word	0x0801e47f
 801e4dc:	0801e47f 	.word	0x0801e47f
 801e4e0:	0801e47f 	.word	0x0801e47f
 801e4e4:	0801e47f 	.word	0x0801e47f
 801e4e8:	0801e47f 	.word	0x0801e47f
 801e4ec:	0801e47f 	.word	0x0801e47f
 801e4f0:	0801e47f 	.word	0x0801e47f
 801e4f4:	0801e47f 	.word	0x0801e47f
 801e4f8:	0801e47f 	.word	0x0801e47f
 801e4fc:	0801e47f 	.word	0x0801e47f
 801e500:	0801e47f 	.word	0x0801e47f
 801e504:	0801e47f 	.word	0x0801e47f
 801e508:	0801e47f 	.word	0x0801e47f
 801e50c:	0801e47f 	.word	0x0801e47f
 801e510:	0801e47f 	.word	0x0801e47f
 801e514:	0801e47f 	.word	0x0801e47f
 801e518:	0801e47f 	.word	0x0801e47f
 801e51c:	0801e47f 	.word	0x0801e47f
 801e520:	0801e647 	.word	0x0801e647
 801e524:	0801e6a1 	.word	0x0801e6a1
 801e528:	0801e717 	.word	0x0801e717
 801e52c:	0801e7b1 	.word	0x0801e7b1
 801e530:	0801e47f 	.word	0x0801e47f
 801e534:	0801e7fd 	.word	0x0801e7fd
 801e538:	0801e8dd 	.word	0x0801e8dd
 801e53c:	0801e9df 	.word	0x0801e9df
 801e540:	0801e9ed 	.word	0x0801e9ed
 801e544:	0801e47f 	.word	0x0801e47f
 801e548:	0801e47f 	.word	0x0801e47f
 801e54c:	0801e47f 	.word	0x0801e47f
 801e550:	0801ea1d 	.word	0x0801ea1d
 801e554:	0801e47f 	.word	0x0801e47f
 801e558:	0801e47f 	.word	0x0801e47f
 801e55c:	0801ea35 	.word	0x0801ea35
 801e560:	0801e47f 	.word	0x0801e47f
 801e564:	0801ea83 	.word	0x0801ea83
 801e568:	0801eb99 	.word	0x0801eb99
 801e56c:	0801ebab 	.word	0x0801ebab
 801e570:	0801ec03 	.word	0x0801ec03
 801e574:	0801ec13 	.word	0x0801ec13
 801e578:	0801ec89 	.word	0x0801ec89
 801e57c:	0801e70f 	.word	0x0801e70f
 801e580:	0801ecbd 	.word	0x0801ecbd
 801e584:	0801ed7b 	.word	0x0801ed7b
 801e588:	0801e47f 	.word	0x0801e47f
 801e58c:	0801e47f 	.word	0x0801e47f
 801e590:	0801e47f 	.word	0x0801e47f
 801e594:	0801e47f 	.word	0x0801e47f
 801e598:	0801e47f 	.word	0x0801e47f
 801e59c:	0801e47f 	.word	0x0801e47f
 801e5a0:	0801e609 	.word	0x0801e609
 801e5a4:	0801e675 	.word	0x0801e675
 801e5a8:	0801e6cf 	.word	0x0801e6cf
 801e5ac:	0801e789 	.word	0x0801e789
 801e5b0:	0801e789 	.word	0x0801e789
 801e5b4:	0801e47f 	.word	0x0801e47f
 801e5b8:	0801e845 	.word	0x0801e845
 801e5bc:	0801e675 	.word	0x0801e675
 801e5c0:	0801e47f 	.word	0x0801e47f
 801e5c4:	0801ea0f 	.word	0x0801ea0f
 801e5c8:	0801e9df 	.word	0x0801e9df
 801e5cc:	0801e9ed 	.word	0x0801e9ed
 801e5d0:	0801ea17 	.word	0x0801ea17
 801e5d4:	0801ea21 	.word	0x0801ea21
 801e5d8:	0801e47f 	.word	0x0801e47f
 801e5dc:	0801ea35 	.word	0x0801ea35
 801e5e0:	0801e47f 	.word	0x0801e47f
 801e5e4:	0801e6ff 	.word	0x0801e6ff
 801e5e8:	0801ea99 	.word	0x0801ea99
 801e5ec:	0801eb9d 	.word	0x0801eb9d
 801e5f0:	0801ebe5 	.word	0x0801ebe5
 801e5f4:	0801e47f 	.word	0x0801e47f
 801e5f8:	0801ec79 	.word	0x0801ec79
 801e5fc:	0801e707 	.word	0x0801e707
 801e600:	0801eca1 	.word	0x0801eca1
 801e604:	0801ed0d 	.word	0x0801ed0d
 801e608:	69ab      	ldr	r3, [r5, #24]
 801e60a:	4aa7      	ldr	r2, [pc, #668]	; (801e8a8 <__strftime+0x488>)
 801e60c:	3318      	adds	r3, #24
 801e60e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e612:	4630      	mov	r0, r6
 801e614:	f7e1 fe12 	bl	800023c <strlen>
 801e618:	3e01      	subs	r6, #1
 801e61a:	4420      	add	r0, r4
 801e61c:	f108 33ff 	add.w	r3, r8, #4294967295
 801e620:	42a0      	cmp	r0, r4
 801e622:	d107      	bne.n	801e634 <__strftime+0x214>
 801e624:	f89b 3000 	ldrb.w	r3, [fp]
 801e628:	2b00      	cmp	r3, #0
 801e62a:	f000 83d7 	beq.w	801eddc <__strftime+0x9bc>
 801e62e:	f10b 0201 	add.w	r2, fp, #1
 801e632:	e6fe      	b.n	801e432 <__strftime+0x12>
 801e634:	42a3      	cmp	r3, r4
 801e636:	f67f af22 	bls.w	801e47e <__strftime+0x5e>
 801e63a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e63e:	f809 2004 	strb.w	r2, [r9, r4]
 801e642:	3401      	adds	r4, #1
 801e644:	e7ec      	b.n	801e620 <__strftime+0x200>
 801e646:	69aa      	ldr	r2, [r5, #24]
 801e648:	4b97      	ldr	r3, [pc, #604]	; (801e8a8 <__strftime+0x488>)
 801e64a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801e64e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801e650:	4630      	mov	r0, r6
 801e652:	f7e1 fdf3 	bl	800023c <strlen>
 801e656:	3e01      	subs	r6, #1
 801e658:	4420      	add	r0, r4
 801e65a:	f108 33ff 	add.w	r3, r8, #4294967295
 801e65e:	42a0      	cmp	r0, r4
 801e660:	d0e0      	beq.n	801e624 <__strftime+0x204>
 801e662:	42a3      	cmp	r3, r4
 801e664:	f67f af0b 	bls.w	801e47e <__strftime+0x5e>
 801e668:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e66c:	f809 2004 	strb.w	r2, [r9, r4]
 801e670:	3401      	adds	r4, #1
 801e672:	e7f4      	b.n	801e65e <__strftime+0x23e>
 801e674:	4b8c      	ldr	r3, [pc, #560]	; (801e8a8 <__strftime+0x488>)
 801e676:	692a      	ldr	r2, [r5, #16]
 801e678:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e67c:	4630      	mov	r0, r6
 801e67e:	f7e1 fddd 	bl	800023c <strlen>
 801e682:	3e01      	subs	r6, #1
 801e684:	4420      	add	r0, r4
 801e686:	f108 33ff 	add.w	r3, r8, #4294967295
 801e68a:	42a0      	cmp	r0, r4
 801e68c:	d0ca      	beq.n	801e624 <__strftime+0x204>
 801e68e:	42a3      	cmp	r3, r4
 801e690:	f67f aef5 	bls.w	801e47e <__strftime+0x5e>
 801e694:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e698:	f809 2004 	strb.w	r2, [r9, r4]
 801e69c:	3401      	adds	r4, #1
 801e69e:	e7f4      	b.n	801e68a <__strftime+0x26a>
 801e6a0:	692b      	ldr	r3, [r5, #16]
 801e6a2:	4a81      	ldr	r2, [pc, #516]	; (801e8a8 <__strftime+0x488>)
 801e6a4:	330c      	adds	r3, #12
 801e6a6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e6aa:	4630      	mov	r0, r6
 801e6ac:	f7e1 fdc6 	bl	800023c <strlen>
 801e6b0:	3e01      	subs	r6, #1
 801e6b2:	4420      	add	r0, r4
 801e6b4:	f108 33ff 	add.w	r3, r8, #4294967295
 801e6b8:	42a0      	cmp	r0, r4
 801e6ba:	d0b3      	beq.n	801e624 <__strftime+0x204>
 801e6bc:	42a3      	cmp	r3, r4
 801e6be:	f67f aede 	bls.w	801e47e <__strftime+0x5e>
 801e6c2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e6c6:	f809 2004 	strb.w	r2, [r9, r4]
 801e6ca:	3401      	adds	r4, #1
 801e6cc:	e7f4      	b.n	801e6b8 <__strftime+0x298>
 801e6ce:	4b76      	ldr	r3, [pc, #472]	; (801e8a8 <__strftime+0x488>)
 801e6d0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801e6d4:	4630      	mov	r0, r6
 801e6d6:	f7e1 fdb1 	bl	800023c <strlen>
 801e6da:	7833      	ldrb	r3, [r6, #0]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d0a1      	beq.n	801e624 <__strftime+0x204>
 801e6e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e6e2:	9300      	str	r3, [sp, #0]
 801e6e4:	4632      	mov	r2, r6
 801e6e6:	462b      	mov	r3, r5
 801e6e8:	eba8 0104 	sub.w	r1, r8, r4
 801e6ec:	eb09 0004 	add.w	r0, r9, r4
 801e6f0:	f7ff fe96 	bl	801e420 <__strftime>
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	f77f aec2 	ble.w	801e47e <__strftime+0x5e>
 801e6fa:	4404      	add	r4, r0
 801e6fc:	e792      	b.n	801e624 <__strftime+0x204>
 801e6fe:	4b6a      	ldr	r3, [pc, #424]	; (801e8a8 <__strftime+0x488>)
 801e700:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801e704:	e7e6      	b.n	801e6d4 <__strftime+0x2b4>
 801e706:	4b68      	ldr	r3, [pc, #416]	; (801e8a8 <__strftime+0x488>)
 801e708:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801e70c:	e7e2      	b.n	801e6d4 <__strftime+0x2b4>
 801e70e:	4b66      	ldr	r3, [pc, #408]	; (801e8a8 <__strftime+0x488>)
 801e710:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801e714:	e7de      	b.n	801e6d4 <__strftime+0x2b4>
 801e716:	4965      	ldr	r1, [pc, #404]	; (801e8ac <__strftime+0x48c>)
 801e718:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801e71c:	458a      	cmp	sl, r1
 801e71e:	bfac      	ite	ge
 801e720:	2100      	movge	r1, #0
 801e722:	2101      	movlt	r1, #1
 801e724:	f1ba 0f00 	cmp.w	sl, #0
 801e728:	db0e      	blt.n	801e748 <__strftime+0x328>
 801e72a:	2064      	movs	r0, #100	; 0x64
 801e72c:	fb9a f0f0 	sdiv	r0, sl, r0
 801e730:	3013      	adds	r0, #19
 801e732:	b19f      	cbz	r7, 801e75c <__strftime+0x33c>
 801e734:	2863      	cmp	r0, #99	; 0x63
 801e736:	dd25      	ble.n	801e784 <__strftime+0x364>
 801e738:	4a5d      	ldr	r2, [pc, #372]	; (801e8b0 <__strftime+0x490>)
 801e73a:	4b5e      	ldr	r3, [pc, #376]	; (801e8b4 <__strftime+0x494>)
 801e73c:	2f2b      	cmp	r7, #43	; 0x2b
 801e73e:	bf14      	ite	ne
 801e740:	4617      	movne	r7, r2
 801e742:	461f      	moveq	r7, r3
 801e744:	4a5c      	ldr	r2, [pc, #368]	; (801e8b8 <__strftime+0x498>)
 801e746:	e00b      	b.n	801e760 <__strftime+0x340>
 801e748:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801e74c:	9105      	str	r1, [sp, #20]
 801e74e:	f000 ffa5 	bl	801f69c <abs>
 801e752:	2364      	movs	r3, #100	; 0x64
 801e754:	9905      	ldr	r1, [sp, #20]
 801e756:	fb90 f0f3 	sdiv	r0, r0, r3
 801e75a:	e7ea      	b.n	801e732 <__strftime+0x312>
 801e75c:	4f54      	ldr	r7, [pc, #336]	; (801e8b0 <__strftime+0x490>)
 801e75e:	4a57      	ldr	r2, [pc, #348]	; (801e8bc <__strftime+0x49c>)
 801e760:	4b57      	ldr	r3, [pc, #348]	; (801e8c0 <__strftime+0x4a0>)
 801e762:	9001      	str	r0, [sp, #4]
 801e764:	2e02      	cmp	r6, #2
 801e766:	bf2c      	ite	cs
 801e768:	ebc1 0606 	rsbcs	r6, r1, r6
 801e76c:	f1c1 0602 	rsbcc	r6, r1, #2
 801e770:	494e      	ldr	r1, [pc, #312]	; (801e8ac <__strftime+0x48c>)
 801e772:	9600      	str	r6, [sp, #0]
 801e774:	458a      	cmp	sl, r1
 801e776:	bfa8      	it	ge
 801e778:	463b      	movge	r3, r7
 801e77a:	eba8 0104 	sub.w	r1, r8, r4
 801e77e:	eb09 0004 	add.w	r0, r9, r4
 801e782:	e02a      	b.n	801e7da <__strftime+0x3ba>
 801e784:	4f4a      	ldr	r7, [pc, #296]	; (801e8b0 <__strftime+0x490>)
 801e786:	e7dd      	b.n	801e744 <__strftime+0x324>
 801e788:	494e      	ldr	r1, [pc, #312]	; (801e8c4 <__strftime+0x4a4>)
 801e78a:	4a4f      	ldr	r2, [pc, #316]	; (801e8c8 <__strftime+0x4a8>)
 801e78c:	68eb      	ldr	r3, [r5, #12]
 801e78e:	2864      	cmp	r0, #100	; 0x64
 801e790:	bf08      	it	eq
 801e792:	460a      	moveq	r2, r1
 801e794:	eba8 0104 	sub.w	r1, r8, r4
 801e798:	eb09 0004 	add.w	r0, r9, r4
 801e79c:	f001 fe0e 	bl	80203bc <sniprintf>
 801e7a0:	2800      	cmp	r0, #0
 801e7a2:	f6ff ae6c 	blt.w	801e47e <__strftime+0x5e>
 801e7a6:	4404      	add	r4, r0
 801e7a8:	45a0      	cmp	r8, r4
 801e7aa:	f63f af3b 	bhi.w	801e624 <__strftime+0x204>
 801e7ae:	e666      	b.n	801e47e <__strftime+0x5e>
 801e7b0:	6968      	ldr	r0, [r5, #20]
 801e7b2:	692b      	ldr	r3, [r5, #16]
 801e7b4:	68ef      	ldr	r7, [r5, #12]
 801e7b6:	2800      	cmp	r0, #0
 801e7b8:	eb09 0604 	add.w	r6, r9, r4
 801e7bc:	eba8 0104 	sub.w	r1, r8, r4
 801e7c0:	f103 0301 	add.w	r3, r3, #1
 801e7c4:	db0c      	blt.n	801e7e0 <__strftime+0x3c0>
 801e7c6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e7ca:	fb90 f2fc 	sdiv	r2, r0, ip
 801e7ce:	fb0c 0212 	mls	r2, ip, r2, r0
 801e7d2:	e9cd 7200 	strd	r7, r2, [sp]
 801e7d6:	4a3d      	ldr	r2, [pc, #244]	; (801e8cc <__strftime+0x4ac>)
 801e7d8:	4630      	mov	r0, r6
 801e7da:	f001 fdef 	bl	80203bc <sniprintf>
 801e7de:	e7df      	b.n	801e7a0 <__strftime+0x380>
 801e7e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e7e4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801e7e8:	f000 ff58 	bl	801f69c <abs>
 801e7ec:	2264      	movs	r2, #100	; 0x64
 801e7ee:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801e7f2:	fb90 fcf2 	sdiv	ip, r0, r2
 801e7f6:	fb0c 0212 	mls	r2, ip, r2, r0
 801e7fa:	e7ea      	b.n	801e7d2 <__strftime+0x3b2>
 801e7fc:	2325      	movs	r3, #37	; 0x25
 801e7fe:	f88d 3020 	strb.w	r3, [sp, #32]
 801e802:	b187      	cbz	r7, 801e826 <__strftime+0x406>
 801e804:	2e06      	cmp	r6, #6
 801e806:	bf38      	it	cc
 801e808:	2606      	movcc	r6, #6
 801e80a:	1fb3      	subs	r3, r6, #6
 801e80c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801e810:	d10c      	bne.n	801e82c <__strftime+0x40c>
 801e812:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801e816:	492e      	ldr	r1, [pc, #184]	; (801e8d0 <__strftime+0x4b0>)
 801e818:	f001 fe30 	bl	802047c <strcpy>
 801e81c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e81e:	9300      	str	r3, [sp, #0]
 801e820:	aa08      	add	r2, sp, #32
 801e822:	462b      	mov	r3, r5
 801e824:	e760      	b.n	801e6e8 <__strftime+0x2c8>
 801e826:	272b      	movs	r7, #43	; 0x2b
 801e828:	260a      	movs	r6, #10
 801e82a:	e7ee      	b.n	801e80a <__strftime+0x3ea>
 801e82c:	4a29      	ldr	r2, [pc, #164]	; (801e8d4 <__strftime+0x4b4>)
 801e82e:	211e      	movs	r1, #30
 801e830:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801e834:	f001 fdc2 	bl	80203bc <sniprintf>
 801e838:	2800      	cmp	r0, #0
 801e83a:	ddea      	ble.n	801e812 <__strftime+0x3f2>
 801e83c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801e840:	4418      	add	r0, r3
 801e842:	e7e8      	b.n	801e816 <__strftime+0x3f6>
 801e844:	4628      	mov	r0, r5
 801e846:	f7ff fd89 	bl	801e35c <iso_year_adjust>
 801e84a:	4606      	mov	r6, r0
 801e84c:	6968      	ldr	r0, [r5, #20]
 801e84e:	2800      	cmp	r0, #0
 801e850:	db11      	blt.n	801e876 <__strftime+0x456>
 801e852:	2264      	movs	r2, #100	; 0x64
 801e854:	fb90 f3f2 	sdiv	r3, r0, r2
 801e858:	fb02 0313 	mls	r3, r2, r3, r0
 801e85c:	441e      	add	r6, r3
 801e85e:	2364      	movs	r3, #100	; 0x64
 801e860:	fb96 f0f3 	sdiv	r0, r6, r3
 801e864:	fb03 6610 	mls	r6, r3, r0, r6
 801e868:	441e      	add	r6, r3
 801e86a:	fbb6 f2f3 	udiv	r2, r6, r3
 801e86e:	fb03 6312 	mls	r3, r3, r2, r6
 801e872:	4a14      	ldr	r2, [pc, #80]	; (801e8c4 <__strftime+0x4a4>)
 801e874:	e78e      	b.n	801e794 <__strftime+0x374>
 801e876:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e87a:	f000 ff0f 	bl	801f69c <abs>
 801e87e:	2364      	movs	r3, #100	; 0x64
 801e880:	2e00      	cmp	r6, #0
 801e882:	fb90 f2f3 	sdiv	r2, r0, r3
 801e886:	fb02 0313 	mls	r3, r2, r3, r0
 801e88a:	da05      	bge.n	801e898 <__strftime+0x478>
 801e88c:	6969      	ldr	r1, [r5, #20]
 801e88e:	4a12      	ldr	r2, [pc, #72]	; (801e8d8 <__strftime+0x4b8>)
 801e890:	4291      	cmp	r1, r2
 801e892:	bfb8      	it	lt
 801e894:	2601      	movlt	r6, #1
 801e896:	e7e1      	b.n	801e85c <__strftime+0x43c>
 801e898:	d0e0      	beq.n	801e85c <__strftime+0x43c>
 801e89a:	6969      	ldr	r1, [r5, #20]
 801e89c:	4a03      	ldr	r2, [pc, #12]	; (801e8ac <__strftime+0x48c>)
 801e89e:	4291      	cmp	r1, r2
 801e8a0:	bfb8      	it	lt
 801e8a2:	f04f 36ff 	movlt.w	r6, #4294967295
 801e8a6:	e7d9      	b.n	801e85c <__strftime+0x43c>
 801e8a8:	08026044 	.word	0x08026044
 801e8ac:	fffff894 	.word	0xfffff894
 801e8b0:	080261b7 	.word	0x080261b7
 801e8b4:	08025ece 	.word	0x08025ece
 801e8b8:	08025ec6 	.word	0x08025ec6
 801e8bc:	08025ebf 	.word	0x08025ebf
 801e8c0:	080262f7 	.word	0x080262f7
 801e8c4:	08025ede 	.word	0x08025ede
 801e8c8:	08025ed0 	.word	0x08025ed0
 801e8cc:	08025ed4 	.word	0x08025ed4
 801e8d0:	08025ee7 	.word	0x08025ee7
 801e8d4:	08025ee3 	.word	0x08025ee3
 801e8d8:	fffff895 	.word	0xfffff895
 801e8dc:	4bb6      	ldr	r3, [pc, #728]	; (801ebb8 <__strftime+0x798>)
 801e8de:	6969      	ldr	r1, [r5, #20]
 801e8e0:	4299      	cmp	r1, r3
 801e8e2:	bfac      	ite	ge
 801e8e4:	2300      	movge	r3, #0
 801e8e6:	2301      	movlt	r3, #1
 801e8e8:	4628      	mov	r0, r5
 801e8ea:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801e8ee:	f7ff fd35 	bl	801e35c <iso_year_adjust>
 801e8f2:	9906      	ldr	r1, [sp, #24]
 801e8f4:	2900      	cmp	r1, #0
 801e8f6:	4682      	mov	sl, r0
 801e8f8:	db27      	blt.n	801e94a <__strftime+0x52a>
 801e8fa:	2264      	movs	r2, #100	; 0x64
 801e8fc:	fb91 f2f2 	sdiv	r2, r1, r2
 801e900:	3213      	adds	r2, #19
 801e902:	6968      	ldr	r0, [r5, #20]
 801e904:	2800      	cmp	r0, #0
 801e906:	db2b      	blt.n	801e960 <__strftime+0x540>
 801e908:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e90c:	fb90 fefc 	sdiv	lr, r0, ip
 801e910:	fb0c 001e 	mls	r0, ip, lr, r0
 801e914:	f1ba 0f00 	cmp.w	sl, #0
 801e918:	da31      	bge.n	801e97e <__strftime+0x55e>
 801e91a:	6969      	ldr	r1, [r5, #20]
 801e91c:	4ba7      	ldr	r3, [pc, #668]	; (801ebbc <__strftime+0x79c>)
 801e91e:	4299      	cmp	r1, r3
 801e920:	db38      	blt.n	801e994 <__strftime+0x574>
 801e922:	eb0a 0300 	add.w	r3, sl, r0
 801e926:	1c59      	adds	r1, r3, #1
 801e928:	d139      	bne.n	801e99e <__strftime+0x57e>
 801e92a:	3a01      	subs	r2, #1
 801e92c:	2363      	movs	r3, #99	; 0x63
 801e92e:	2064      	movs	r0, #100	; 0x64
 801e930:	fb00 3202 	mla	r2, r0, r2, r3
 801e934:	9b05      	ldr	r3, [sp, #20]
 801e936:	2b00      	cmp	r3, #0
 801e938:	d036      	beq.n	801e9a8 <__strftime+0x588>
 801e93a:	232d      	movs	r3, #45	; 0x2d
 801e93c:	f88d 3020 	strb.w	r3, [sp, #32]
 801e940:	b106      	cbz	r6, 801e944 <__strftime+0x524>
 801e942:	3e01      	subs	r6, #1
 801e944:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801e948:	e038      	b.n	801e9bc <__strftime+0x59c>
 801e94a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801e94e:	9106      	str	r1, [sp, #24]
 801e950:	f000 fea4 	bl	801f69c <abs>
 801e954:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e958:	9906      	ldr	r1, [sp, #24]
 801e95a:	fb90 f2fc 	sdiv	r2, r0, ip
 801e95e:	e7d0      	b.n	801e902 <__strftime+0x4e2>
 801e960:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e964:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801e968:	f000 fe98 	bl	801f69c <abs>
 801e96c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e970:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e974:	fb90 fefc 	sdiv	lr, r0, ip
 801e978:	fb0e 001c 	mls	r0, lr, ip, r0
 801e97c:	e7ca      	b.n	801e914 <__strftime+0x4f4>
 801e97e:	d0d0      	beq.n	801e922 <__strftime+0x502>
 801e980:	4b8d      	ldr	r3, [pc, #564]	; (801ebb8 <__strftime+0x798>)
 801e982:	4299      	cmp	r1, r3
 801e984:	bfb4      	ite	lt
 801e986:	2301      	movlt	r3, #1
 801e988:	2300      	movge	r3, #0
 801e98a:	9305      	str	r3, [sp, #20]
 801e98c:	bfb8      	it	lt
 801e98e:	f04f 3aff 	movlt.w	sl, #4294967295
 801e992:	e7c6      	b.n	801e922 <__strftime+0x502>
 801e994:	f04f 0a01 	mov.w	sl, #1
 801e998:	f8cd a014 	str.w	sl, [sp, #20]
 801e99c:	e7c1      	b.n	801e922 <__strftime+0x502>
 801e99e:	2b64      	cmp	r3, #100	; 0x64
 801e9a0:	bf04      	itt	eq
 801e9a2:	3201      	addeq	r2, #1
 801e9a4:	2300      	moveq	r3, #0
 801e9a6:	e7c2      	b.n	801e92e <__strftime+0x50e>
 801e9a8:	2f2b      	cmp	r7, #43	; 0x2b
 801e9aa:	d106      	bne.n	801e9ba <__strftime+0x59a>
 801e9ac:	f242 730f 	movw	r3, #9999	; 0x270f
 801e9b0:	429a      	cmp	r2, r3
 801e9b2:	d902      	bls.n	801e9ba <__strftime+0x59a>
 801e9b4:	f88d 7020 	strb.w	r7, [sp, #32]
 801e9b8:	e7c2      	b.n	801e940 <__strftime+0x520>
 801e9ba:	ab08      	add	r3, sp, #32
 801e9bc:	2125      	movs	r1, #37	; 0x25
 801e9be:	7019      	strb	r1, [r3, #0]
 801e9c0:	b94f      	cbnz	r7, 801e9d6 <__strftime+0x5b6>
 801e9c2:	1c58      	adds	r0, r3, #1
 801e9c4:	497e      	ldr	r1, [pc, #504]	; (801ebc0 <__strftime+0x7a0>)
 801e9c6:	9205      	str	r2, [sp, #20]
 801e9c8:	f001 fd58 	bl	802047c <strcpy>
 801e9cc:	9a05      	ldr	r2, [sp, #20]
 801e9ce:	9200      	str	r2, [sp, #0]
 801e9d0:	4633      	mov	r3, r6
 801e9d2:	aa08      	add	r2, sp, #32
 801e9d4:	e059      	b.n	801ea8a <__strftime+0x66a>
 801e9d6:	2130      	movs	r1, #48	; 0x30
 801e9d8:	1c98      	adds	r0, r3, #2
 801e9da:	7059      	strb	r1, [r3, #1]
 801e9dc:	e7f2      	b.n	801e9c4 <__strftime+0x5a4>
 801e9de:	4979      	ldr	r1, [pc, #484]	; (801ebc4 <__strftime+0x7a4>)
 801e9e0:	4a79      	ldr	r2, [pc, #484]	; (801ebc8 <__strftime+0x7a8>)
 801e9e2:	68ab      	ldr	r3, [r5, #8]
 801e9e4:	286b      	cmp	r0, #107	; 0x6b
 801e9e6:	bf08      	it	eq
 801e9e8:	460a      	moveq	r2, r1
 801e9ea:	e6d3      	b.n	801e794 <__strftime+0x374>
 801e9ec:	68ab      	ldr	r3, [r5, #8]
 801e9ee:	b163      	cbz	r3, 801ea0a <__strftime+0x5ea>
 801e9f0:	2b0c      	cmp	r3, #12
 801e9f2:	d004      	beq.n	801e9fe <__strftime+0x5de>
 801e9f4:	210c      	movs	r1, #12
 801e9f6:	fb93 f2f1 	sdiv	r2, r3, r1
 801e9fa:	fb01 3312 	mls	r3, r1, r2, r3
 801e9fe:	4972      	ldr	r1, [pc, #456]	; (801ebc8 <__strftime+0x7a8>)
 801ea00:	4a70      	ldr	r2, [pc, #448]	; (801ebc4 <__strftime+0x7a4>)
 801ea02:	2849      	cmp	r0, #73	; 0x49
 801ea04:	bf08      	it	eq
 801ea06:	460a      	moveq	r2, r1
 801ea08:	e6c4      	b.n	801e794 <__strftime+0x374>
 801ea0a:	230c      	movs	r3, #12
 801ea0c:	e7f7      	b.n	801e9fe <__strftime+0x5de>
 801ea0e:	69eb      	ldr	r3, [r5, #28]
 801ea10:	4a6e      	ldr	r2, [pc, #440]	; (801ebcc <__strftime+0x7ac>)
 801ea12:	3301      	adds	r3, #1
 801ea14:	e6be      	b.n	801e794 <__strftime+0x374>
 801ea16:	692b      	ldr	r3, [r5, #16]
 801ea18:	3301      	adds	r3, #1
 801ea1a:	e72a      	b.n	801e872 <__strftime+0x452>
 801ea1c:	686b      	ldr	r3, [r5, #4]
 801ea1e:	e728      	b.n	801e872 <__strftime+0x452>
 801ea20:	f108 33ff 	add.w	r3, r8, #4294967295
 801ea24:	42a3      	cmp	r3, r4
 801ea26:	f67f ad2a 	bls.w	801e47e <__strftime+0x5e>
 801ea2a:	230a      	movs	r3, #10
 801ea2c:	f809 3004 	strb.w	r3, [r9, r4]
 801ea30:	3401      	adds	r4, #1
 801ea32:	e5f7      	b.n	801e624 <__strftime+0x204>
 801ea34:	68ab      	ldr	r3, [r5, #8]
 801ea36:	2b0b      	cmp	r3, #11
 801ea38:	bfcc      	ite	gt
 801ea3a:	22a4      	movgt	r2, #164	; 0xa4
 801ea3c:	22a0      	movle	r2, #160	; 0xa0
 801ea3e:	4b64      	ldr	r3, [pc, #400]	; (801ebd0 <__strftime+0x7b0>)
 801ea40:	4413      	add	r3, r2
 801ea42:	685e      	ldr	r6, [r3, #4]
 801ea44:	4630      	mov	r0, r6
 801ea46:	f7e1 fbf9 	bl	800023c <strlen>
 801ea4a:	1e72      	subs	r2, r6, #1
 801ea4c:	4420      	add	r0, r4
 801ea4e:	f108 36ff 	add.w	r6, r8, #4294967295
 801ea52:	42a0      	cmp	r0, r4
 801ea54:	f43f ade6 	beq.w	801e624 <__strftime+0x204>
 801ea58:	42a6      	cmp	r6, r4
 801ea5a:	f67f ad10 	bls.w	801e47e <__strftime+0x5e>
 801ea5e:	f89b 1000 	ldrb.w	r1, [fp]
 801ea62:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801ea66:	2950      	cmp	r1, #80	; 0x50
 801ea68:	d107      	bne.n	801ea7a <__strftime+0x65a>
 801ea6a:	495a      	ldr	r1, [pc, #360]	; (801ebd4 <__strftime+0x7b4>)
 801ea6c:	5cc9      	ldrb	r1, [r1, r3]
 801ea6e:	f001 0103 	and.w	r1, r1, #3
 801ea72:	2901      	cmp	r1, #1
 801ea74:	bf08      	it	eq
 801ea76:	3320      	addeq	r3, #32
 801ea78:	b2db      	uxtb	r3, r3
 801ea7a:	f809 3004 	strb.w	r3, [r9, r4]
 801ea7e:	3401      	adds	r4, #1
 801ea80:	e7e7      	b.n	801ea52 <__strftime+0x632>
 801ea82:	686b      	ldr	r3, [r5, #4]
 801ea84:	9300      	str	r3, [sp, #0]
 801ea86:	4a54      	ldr	r2, [pc, #336]	; (801ebd8 <__strftime+0x7b8>)
 801ea88:	68ab      	ldr	r3, [r5, #8]
 801ea8a:	eba8 0104 	sub.w	r1, r8, r4
 801ea8e:	eb09 0004 	add.w	r0, r9, r4
 801ea92:	f001 fc93 	bl	80203bc <sniprintf>
 801ea96:	e683      	b.n	801e7a0 <__strftime+0x380>
 801ea98:	6a2b      	ldr	r3, [r5, #32]
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	db79      	blt.n	801eb92 <__strftime+0x772>
 801ea9e:	f000 fb01 	bl	801f0a4 <__tz_lock>
 801eaa2:	9b04      	ldr	r3, [sp, #16]
 801eaa4:	b90b      	cbnz	r3, 801eaaa <__strftime+0x68a>
 801eaa6:	f000 fb09 	bl	801f0bc <_tzset_unlocked>
 801eaaa:	f000 fec5 	bl	801f838 <__gettzinfo>
 801eaae:	6a2b      	ldr	r3, [r5, #32]
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	bfcc      	ite	gt
 801eab4:	2350      	movgt	r3, #80	; 0x50
 801eab6:	2328      	movle	r3, #40	; 0x28
 801eab8:	58c3      	ldr	r3, [r0, r3]
 801eaba:	f1c3 0a00 	rsb	sl, r3, #0
 801eabe:	f000 faf7 	bl	801f0b0 <__tz_unlock>
 801eac2:	2301      	movs	r3, #1
 801eac4:	9304      	str	r3, [sp, #16]
 801eac6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801eaca:	4662      	mov	r2, ip
 801eacc:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801ead0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801ead4:	9602      	str	r6, [sp, #8]
 801ead6:	f143 36ff 	adc.w	r6, r3, #4294967295
 801eada:	9603      	str	r6, [sp, #12]
 801eadc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801eae0:	2e00      	cmp	r6, #0
 801eae2:	f177 0600 	sbcs.w	r6, r7, #0
 801eae6:	eba8 0104 	sub.w	r1, r8, r4
 801eaea:	eb09 0004 	add.w	r0, r9, r4
 801eaee:	da05      	bge.n	801eafc <__strftime+0x6dc>
 801eaf0:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801eaf4:	f143 33ff 	adc.w	r3, r3, #4294967295
 801eaf8:	9602      	str	r6, [sp, #8]
 801eafa:	9303      	str	r3, [sp, #12]
 801eafc:	9b02      	ldr	r3, [sp, #8]
 801eafe:	089e      	lsrs	r6, r3, #2
 801eb00:	9b03      	ldr	r3, [sp, #12]
 801eb02:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801eb06:	f10c 32ff 	add.w	r2, ip, #4294967295
 801eb0a:	109f      	asrs	r7, r3, #2
 801eb0c:	2364      	movs	r3, #100	; 0x64
 801eb0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb12:	1af6      	subs	r6, r6, r3
 801eb14:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801eb18:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801eb1c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801eb20:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb24:	18f6      	adds	r6, r6, r3
 801eb26:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801eb2a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801eb2e:	f240 136d 	movw	r3, #365	; 0x16d
 801eb32:	fb03 fc0c 	mul.w	ip, r3, ip
 801eb36:	69eb      	ldr	r3, [r5, #28]
 801eb38:	eb16 060c 	adds.w	r6, r6, ip
 801eb3c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801eb40:	18f6      	adds	r6, r6, r3
 801eb42:	f04f 0c18 	mov.w	ip, #24
 801eb46:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801eb4a:	fba6 230c 	umull	r2, r3, r6, ip
 801eb4e:	68ae      	ldr	r6, [r5, #8]
 801eb50:	fb0c 3307 	mla	r3, ip, r7, r3
 801eb54:	1992      	adds	r2, r2, r6
 801eb56:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801eb5a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801eb5e:	fba2 670c 	umull	r6, r7, r2, ip
 801eb62:	fb0c 7703 	mla	r7, ip, r3, r7
 801eb66:	686b      	ldr	r3, [r5, #4]
 801eb68:	18f6      	adds	r6, r6, r3
 801eb6a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801eb6e:	fba6 230c 	umull	r2, r3, r6, ip
 801eb72:	682e      	ldr	r6, [r5, #0]
 801eb74:	fb0c 3307 	mla	r3, ip, r7, r3
 801eb78:	1992      	adds	r2, r2, r6
 801eb7a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801eb7e:	ebb2 020a 	subs.w	r2, r2, sl
 801eb82:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801eb86:	e9cd 2300 	strd	r2, r3, [sp]
 801eb8a:	4a14      	ldr	r2, [pc, #80]	; (801ebdc <__strftime+0x7bc>)
 801eb8c:	f001 fc16 	bl	80203bc <sniprintf>
 801eb90:	e606      	b.n	801e7a0 <__strftime+0x380>
 801eb92:	f04f 0a00 	mov.w	sl, #0
 801eb96:	e796      	b.n	801eac6 <__strftime+0x6a6>
 801eb98:	682b      	ldr	r3, [r5, #0]
 801eb9a:	e66a      	b.n	801e872 <__strftime+0x452>
 801eb9c:	f108 33ff 	add.w	r3, r8, #4294967295
 801eba0:	42a3      	cmp	r3, r4
 801eba2:	f67f ac6c 	bls.w	801e47e <__strftime+0x5e>
 801eba6:	2309      	movs	r3, #9
 801eba8:	e740      	b.n	801ea2c <__strftime+0x60c>
 801ebaa:	682b      	ldr	r3, [r5, #0]
 801ebac:	9301      	str	r3, [sp, #4]
 801ebae:	686b      	ldr	r3, [r5, #4]
 801ebb0:	9300      	str	r3, [sp, #0]
 801ebb2:	4a0b      	ldr	r2, [pc, #44]	; (801ebe0 <__strftime+0x7c0>)
 801ebb4:	68ab      	ldr	r3, [r5, #8]
 801ebb6:	e5e0      	b.n	801e77a <__strftime+0x35a>
 801ebb8:	fffff894 	.word	0xfffff894
 801ebbc:	fffff895 	.word	0xfffff895
 801ebc0:	08025eef 	.word	0x08025eef
 801ebc4:	08025ed0 	.word	0x08025ed0
 801ebc8:	08025ede 	.word	0x08025ede
 801ebcc:	08025ef3 	.word	0x08025ef3
 801ebd0:	08026044 	.word	0x08026044
 801ebd4:	080261b9 	.word	0x080261b9
 801ebd8:	08025f02 	.word	0x08025f02
 801ebdc:	08025ef8 	.word	0x08025ef8
 801ebe0:	08025efd 	.word	0x08025efd
 801ebe4:	f108 33ff 	add.w	r3, r8, #4294967295
 801ebe8:	42a3      	cmp	r3, r4
 801ebea:	f67f ac48 	bls.w	801e47e <__strftime+0x5e>
 801ebee:	69ab      	ldr	r3, [r5, #24]
 801ebf0:	eb09 0204 	add.w	r2, r9, r4
 801ebf4:	3401      	adds	r4, #1
 801ebf6:	b913      	cbnz	r3, 801ebfe <__strftime+0x7de>
 801ebf8:	2337      	movs	r3, #55	; 0x37
 801ebfa:	7013      	strb	r3, [r2, #0]
 801ebfc:	e512      	b.n	801e624 <__strftime+0x204>
 801ebfe:	3330      	adds	r3, #48	; 0x30
 801ec00:	e7fb      	b.n	801ebfa <__strftime+0x7da>
 801ec02:	69eb      	ldr	r3, [r5, #28]
 801ec04:	69aa      	ldr	r2, [r5, #24]
 801ec06:	3307      	adds	r3, #7
 801ec08:	1a9b      	subs	r3, r3, r2
 801ec0a:	2207      	movs	r2, #7
 801ec0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ec10:	e62f      	b.n	801e872 <__strftime+0x452>
 801ec12:	4628      	mov	r0, r5
 801ec14:	f7ff fba2 	bl	801e35c <iso_year_adjust>
 801ec18:	69aa      	ldr	r2, [r5, #24]
 801ec1a:	b132      	cbz	r2, 801ec2a <__strftime+0x80a>
 801ec1c:	3a01      	subs	r2, #1
 801ec1e:	2800      	cmp	r0, #0
 801ec20:	dc28      	bgt.n	801ec74 <__strftime+0x854>
 801ec22:	69eb      	ldr	r3, [r5, #28]
 801ec24:	d103      	bne.n	801ec2e <__strftime+0x80e>
 801ec26:	330a      	adds	r3, #10
 801ec28:	e7ee      	b.n	801ec08 <__strftime+0x7e8>
 801ec2a:	2206      	movs	r2, #6
 801ec2c:	e7f7      	b.n	801ec1e <__strftime+0x7fe>
 801ec2e:	6968      	ldr	r0, [r5, #20]
 801ec30:	2800      	cmp	r0, #0
 801ec32:	eba2 0303 	sub.w	r3, r2, r3
 801ec36:	f240 726b 	movw	r2, #1899	; 0x76b
 801ec3a:	bfa8      	it	ge
 801ec3c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801ec40:	4410      	add	r0, r2
 801ec42:	0782      	lsls	r2, r0, #30
 801ec44:	d105      	bne.n	801ec52 <__strftime+0x832>
 801ec46:	2264      	movs	r2, #100	; 0x64
 801ec48:	fb90 f1f2 	sdiv	r1, r0, r2
 801ec4c:	fb02 0111 	mls	r1, r2, r1, r0
 801ec50:	b971      	cbnz	r1, 801ec70 <__strftime+0x850>
 801ec52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ec56:	fb90 f2f1 	sdiv	r2, r0, r1
 801ec5a:	fb01 0212 	mls	r2, r1, r2, r0
 801ec5e:	fab2 f282 	clz	r2, r2
 801ec62:	0952      	lsrs	r2, r2, #5
 801ec64:	1a9a      	subs	r2, r3, r2
 801ec66:	2a05      	cmp	r2, #5
 801ec68:	bfb4      	ite	lt
 801ec6a:	2335      	movlt	r3, #53	; 0x35
 801ec6c:	2334      	movge	r3, #52	; 0x34
 801ec6e:	e600      	b.n	801e872 <__strftime+0x452>
 801ec70:	2201      	movs	r2, #1
 801ec72:	e7f7      	b.n	801ec64 <__strftime+0x844>
 801ec74:	2301      	movs	r3, #1
 801ec76:	e5fc      	b.n	801e872 <__strftime+0x452>
 801ec78:	f108 33ff 	add.w	r3, r8, #4294967295
 801ec7c:	42a3      	cmp	r3, r4
 801ec7e:	f67f abfe 	bls.w	801e47e <__strftime+0x5e>
 801ec82:	69ab      	ldr	r3, [r5, #24]
 801ec84:	3330      	adds	r3, #48	; 0x30
 801ec86:	e6d1      	b.n	801ea2c <__strftime+0x60c>
 801ec88:	69ab      	ldr	r3, [r5, #24]
 801ec8a:	b13b      	cbz	r3, 801ec9c <__strftime+0x87c>
 801ec8c:	3b01      	subs	r3, #1
 801ec8e:	69ea      	ldr	r2, [r5, #28]
 801ec90:	3207      	adds	r2, #7
 801ec92:	1ad2      	subs	r2, r2, r3
 801ec94:	2307      	movs	r3, #7
 801ec96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec9a:	e5ea      	b.n	801e872 <__strftime+0x452>
 801ec9c:	2306      	movs	r3, #6
 801ec9e:	e7f6      	b.n	801ec8e <__strftime+0x86e>
 801eca0:	6968      	ldr	r0, [r5, #20]
 801eca2:	2800      	cmp	r0, #0
 801eca4:	db05      	blt.n	801ecb2 <__strftime+0x892>
 801eca6:	2264      	movs	r2, #100	; 0x64
 801eca8:	fb90 f3f2 	sdiv	r3, r0, r2
 801ecac:	fb03 0312 	mls	r3, r3, r2, r0
 801ecb0:	e5df      	b.n	801e872 <__strftime+0x452>
 801ecb2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801ecb6:	f000 fcf1 	bl	801f69c <abs>
 801ecba:	e7f4      	b.n	801eca6 <__strftime+0x886>
 801ecbc:	696b      	ldr	r3, [r5, #20]
 801ecbe:	4a4c      	ldr	r2, [pc, #304]	; (801edf0 <__strftime+0x9d0>)
 801ecc0:	4293      	cmp	r3, r2
 801ecc2:	da09      	bge.n	801ecd8 <__strftime+0x8b8>
 801ecc4:	212d      	movs	r1, #45	; 0x2d
 801ecc6:	f88d 1020 	strb.w	r1, [sp, #32]
 801ecca:	eba2 0a03 	sub.w	sl, r2, r3
 801ecce:	b106      	cbz	r6, 801ecd2 <__strftime+0x8b2>
 801ecd0:	3e01      	subs	r6, #1
 801ecd2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801ecd6:	e00b      	b.n	801ecf0 <__strftime+0x8d0>
 801ecd8:	2f2b      	cmp	r7, #43	; 0x2b
 801ecda:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801ecde:	d106      	bne.n	801ecee <__strftime+0x8ce>
 801ece0:	f242 730f 	movw	r3, #9999	; 0x270f
 801ece4:	459a      	cmp	sl, r3
 801ece6:	d902      	bls.n	801ecee <__strftime+0x8ce>
 801ece8:	f88d 7020 	strb.w	r7, [sp, #32]
 801ecec:	e7ef      	b.n	801ecce <__strftime+0x8ae>
 801ecee:	ab08      	add	r3, sp, #32
 801ecf0:	2225      	movs	r2, #37	; 0x25
 801ecf2:	701a      	strb	r2, [r3, #0]
 801ecf4:	b937      	cbnz	r7, 801ed04 <__strftime+0x8e4>
 801ecf6:	1c58      	adds	r0, r3, #1
 801ecf8:	493e      	ldr	r1, [pc, #248]	; (801edf4 <__strftime+0x9d4>)
 801ecfa:	f001 fbbf 	bl	802047c <strcpy>
 801ecfe:	f8cd a000 	str.w	sl, [sp]
 801ed02:	e665      	b.n	801e9d0 <__strftime+0x5b0>
 801ed04:	2230      	movs	r2, #48	; 0x30
 801ed06:	1c98      	adds	r0, r3, #2
 801ed08:	705a      	strb	r2, [r3, #1]
 801ed0a:	e7f5      	b.n	801ecf8 <__strftime+0x8d8>
 801ed0c:	6a2b      	ldr	r3, [r5, #32]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	f6ff ac88 	blt.w	801e624 <__strftime+0x204>
 801ed14:	f000 f9c6 	bl	801f0a4 <__tz_lock>
 801ed18:	9b04      	ldr	r3, [sp, #16]
 801ed1a:	b90b      	cbnz	r3, 801ed20 <__strftime+0x900>
 801ed1c:	f000 f9ce 	bl	801f0bc <_tzset_unlocked>
 801ed20:	f000 fd8a 	bl	801f838 <__gettzinfo>
 801ed24:	6a2b      	ldr	r3, [r5, #32]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	bfcc      	ite	gt
 801ed2a:	2350      	movgt	r3, #80	; 0x50
 801ed2c:	2328      	movle	r3, #40	; 0x28
 801ed2e:	eb09 0704 	add.w	r7, r9, r4
 801ed32:	58c6      	ldr	r6, [r0, r3]
 801ed34:	f000 f9bc 	bl	801f0b0 <__tz_unlock>
 801ed38:	4276      	negs	r6, r6
 801ed3a:	233c      	movs	r3, #60	; 0x3c
 801ed3c:	fb96 f0f3 	sdiv	r0, r6, r3
 801ed40:	f000 fe3e 	bl	801f9c0 <labs>
 801ed44:	233c      	movs	r3, #60	; 0x3c
 801ed46:	eba8 0a04 	sub.w	sl, r8, r4
 801ed4a:	fb90 f2f3 	sdiv	r2, r0, r3
 801ed4e:	fb02 0013 	mls	r0, r2, r3, r0
 801ed52:	9000      	str	r0, [sp, #0]
 801ed54:	4a28      	ldr	r2, [pc, #160]	; (801edf8 <__strftime+0x9d8>)
 801ed56:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801ed5a:	4651      	mov	r1, sl
 801ed5c:	4638      	mov	r0, r7
 801ed5e:	fb96 f3f3 	sdiv	r3, r6, r3
 801ed62:	f001 fb2b 	bl	80203bc <sniprintf>
 801ed66:	2800      	cmp	r0, #0
 801ed68:	f6ff ab89 	blt.w	801e47e <__strftime+0x5e>
 801ed6c:	4404      	add	r4, r0
 801ed6e:	45a0      	cmp	r8, r4
 801ed70:	f67f ab85 	bls.w	801e47e <__strftime+0x5e>
 801ed74:	2301      	movs	r3, #1
 801ed76:	9304      	str	r3, [sp, #16]
 801ed78:	e454      	b.n	801e624 <__strftime+0x204>
 801ed7a:	6a2b      	ldr	r3, [r5, #32]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	f6ff ac51 	blt.w	801e624 <__strftime+0x204>
 801ed82:	f000 f98f 	bl	801f0a4 <__tz_lock>
 801ed86:	9b04      	ldr	r3, [sp, #16]
 801ed88:	b90b      	cbnz	r3, 801ed8e <__strftime+0x96e>
 801ed8a:	f000 f997 	bl	801f0bc <_tzset_unlocked>
 801ed8e:	6a2b      	ldr	r3, [r5, #32]
 801ed90:	4a1a      	ldr	r2, [pc, #104]	; (801edfc <__strftime+0x9dc>)
 801ed92:	2b00      	cmp	r3, #0
 801ed94:	bfd4      	ite	le
 801ed96:	2300      	movle	r3, #0
 801ed98:	2301      	movgt	r3, #1
 801ed9a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801ed9e:	4630      	mov	r0, r6
 801eda0:	f7e1 fa4c 	bl	800023c <strlen>
 801eda4:	3e01      	subs	r6, #1
 801eda6:	4420      	add	r0, r4
 801eda8:	f108 33ff 	add.w	r3, r8, #4294967295
 801edac:	42a0      	cmp	r0, r4
 801edae:	d102      	bne.n	801edb6 <__strftime+0x996>
 801edb0:	f000 f97e 	bl	801f0b0 <__tz_unlock>
 801edb4:	e7de      	b.n	801ed74 <__strftime+0x954>
 801edb6:	42a3      	cmp	r3, r4
 801edb8:	d905      	bls.n	801edc6 <__strftime+0x9a6>
 801edba:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801edbe:	f809 2004 	strb.w	r2, [r9, r4]
 801edc2:	3401      	adds	r4, #1
 801edc4:	e7f2      	b.n	801edac <__strftime+0x98c>
 801edc6:	f000 f973 	bl	801f0b0 <__tz_unlock>
 801edca:	f7ff bb58 	b.w	801e47e <__strftime+0x5e>
 801edce:	f108 33ff 	add.w	r3, r8, #4294967295
 801edd2:	42a3      	cmp	r3, r4
 801edd4:	f67f ab53 	bls.w	801e47e <__strftime+0x5e>
 801edd8:	2325      	movs	r3, #37	; 0x25
 801edda:	e627      	b.n	801ea2c <__strftime+0x60c>
 801eddc:	f1b8 0f00 	cmp.w	r8, #0
 801ede0:	d002      	beq.n	801ede8 <__strftime+0x9c8>
 801ede2:	2300      	movs	r3, #0
 801ede4:	f809 3004 	strb.w	r3, [r9, r4]
 801ede8:	4620      	mov	r0, r4
 801edea:	b011      	add	sp, #68	; 0x44
 801edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf0:	fffff894 	.word	0xfffff894
 801edf4:	08025eef 	.word	0x08025eef
 801edf8:	08025f0c 	.word	0x08025f0c
 801edfc:	20000168 	.word	0x20000168

0801ee00 <strftime>:
 801ee00:	b513      	push	{r0, r1, r4, lr}
 801ee02:	4c03      	ldr	r4, [pc, #12]	; (801ee10 <strftime+0x10>)
 801ee04:	9400      	str	r4, [sp, #0]
 801ee06:	f7ff fb0b 	bl	801e420 <__strftime>
 801ee0a:	b002      	add	sp, #8
 801ee0c:	bd10      	pop	{r4, pc}
 801ee0e:	bf00      	nop
 801ee10:	200001d0 	.word	0x200001d0

0801ee14 <strstr>:
 801ee14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee16:	780c      	ldrb	r4, [r1, #0]
 801ee18:	b164      	cbz	r4, 801ee34 <strstr+0x20>
 801ee1a:	4603      	mov	r3, r0
 801ee1c:	781a      	ldrb	r2, [r3, #0]
 801ee1e:	4618      	mov	r0, r3
 801ee20:	1c5e      	adds	r6, r3, #1
 801ee22:	b90a      	cbnz	r2, 801ee28 <strstr+0x14>
 801ee24:	4610      	mov	r0, r2
 801ee26:	e005      	b.n	801ee34 <strstr+0x20>
 801ee28:	4294      	cmp	r4, r2
 801ee2a:	d108      	bne.n	801ee3e <strstr+0x2a>
 801ee2c:	460d      	mov	r5, r1
 801ee2e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801ee32:	b902      	cbnz	r2, 801ee36 <strstr+0x22>
 801ee34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee36:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801ee3a:	4297      	cmp	r7, r2
 801ee3c:	d0f7      	beq.n	801ee2e <strstr+0x1a>
 801ee3e:	4633      	mov	r3, r6
 801ee40:	e7ec      	b.n	801ee1c <strstr+0x8>
	...

0801ee44 <_strtoul_l.isra.0>:
 801ee44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ee48:	4e3b      	ldr	r6, [pc, #236]	; (801ef38 <_strtoul_l.isra.0+0xf4>)
 801ee4a:	4686      	mov	lr, r0
 801ee4c:	468c      	mov	ip, r1
 801ee4e:	4660      	mov	r0, ip
 801ee50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ee54:	5da5      	ldrb	r5, [r4, r6]
 801ee56:	f015 0508 	ands.w	r5, r5, #8
 801ee5a:	d1f8      	bne.n	801ee4e <_strtoul_l.isra.0+0xa>
 801ee5c:	2c2d      	cmp	r4, #45	; 0x2d
 801ee5e:	d134      	bne.n	801eeca <_strtoul_l.isra.0+0x86>
 801ee60:	f89c 4000 	ldrb.w	r4, [ip]
 801ee64:	f04f 0801 	mov.w	r8, #1
 801ee68:	f100 0c02 	add.w	ip, r0, #2
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	d05e      	beq.n	801ef2e <_strtoul_l.isra.0+0xea>
 801ee70:	2b10      	cmp	r3, #16
 801ee72:	d10c      	bne.n	801ee8e <_strtoul_l.isra.0+0x4a>
 801ee74:	2c30      	cmp	r4, #48	; 0x30
 801ee76:	d10a      	bne.n	801ee8e <_strtoul_l.isra.0+0x4a>
 801ee78:	f89c 0000 	ldrb.w	r0, [ip]
 801ee7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ee80:	2858      	cmp	r0, #88	; 0x58
 801ee82:	d14f      	bne.n	801ef24 <_strtoul_l.isra.0+0xe0>
 801ee84:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801ee88:	2310      	movs	r3, #16
 801ee8a:	f10c 0c02 	add.w	ip, ip, #2
 801ee8e:	f04f 37ff 	mov.w	r7, #4294967295
 801ee92:	2500      	movs	r5, #0
 801ee94:	fbb7 f7f3 	udiv	r7, r7, r3
 801ee98:	fb03 f907 	mul.w	r9, r3, r7
 801ee9c:	ea6f 0909 	mvn.w	r9, r9
 801eea0:	4628      	mov	r0, r5
 801eea2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801eea6:	2e09      	cmp	r6, #9
 801eea8:	d818      	bhi.n	801eedc <_strtoul_l.isra.0+0x98>
 801eeaa:	4634      	mov	r4, r6
 801eeac:	42a3      	cmp	r3, r4
 801eeae:	dd24      	ble.n	801eefa <_strtoul_l.isra.0+0xb6>
 801eeb0:	2d00      	cmp	r5, #0
 801eeb2:	db1f      	blt.n	801eef4 <_strtoul_l.isra.0+0xb0>
 801eeb4:	4287      	cmp	r7, r0
 801eeb6:	d31d      	bcc.n	801eef4 <_strtoul_l.isra.0+0xb0>
 801eeb8:	d101      	bne.n	801eebe <_strtoul_l.isra.0+0x7a>
 801eeba:	45a1      	cmp	r9, r4
 801eebc:	db1a      	blt.n	801eef4 <_strtoul_l.isra.0+0xb0>
 801eebe:	fb00 4003 	mla	r0, r0, r3, r4
 801eec2:	2501      	movs	r5, #1
 801eec4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801eec8:	e7eb      	b.n	801eea2 <_strtoul_l.isra.0+0x5e>
 801eeca:	2c2b      	cmp	r4, #43	; 0x2b
 801eecc:	bf08      	it	eq
 801eece:	f89c 4000 	ldrbeq.w	r4, [ip]
 801eed2:	46a8      	mov	r8, r5
 801eed4:	bf08      	it	eq
 801eed6:	f100 0c02 	addeq.w	ip, r0, #2
 801eeda:	e7c7      	b.n	801ee6c <_strtoul_l.isra.0+0x28>
 801eedc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801eee0:	2e19      	cmp	r6, #25
 801eee2:	d801      	bhi.n	801eee8 <_strtoul_l.isra.0+0xa4>
 801eee4:	3c37      	subs	r4, #55	; 0x37
 801eee6:	e7e1      	b.n	801eeac <_strtoul_l.isra.0+0x68>
 801eee8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801eeec:	2e19      	cmp	r6, #25
 801eeee:	d804      	bhi.n	801eefa <_strtoul_l.isra.0+0xb6>
 801eef0:	3c57      	subs	r4, #87	; 0x57
 801eef2:	e7db      	b.n	801eeac <_strtoul_l.isra.0+0x68>
 801eef4:	f04f 35ff 	mov.w	r5, #4294967295
 801eef8:	e7e4      	b.n	801eec4 <_strtoul_l.isra.0+0x80>
 801eefa:	2d00      	cmp	r5, #0
 801eefc:	da07      	bge.n	801ef0e <_strtoul_l.isra.0+0xca>
 801eefe:	2322      	movs	r3, #34	; 0x22
 801ef00:	f8ce 3000 	str.w	r3, [lr]
 801ef04:	f04f 30ff 	mov.w	r0, #4294967295
 801ef08:	b942      	cbnz	r2, 801ef1c <_strtoul_l.isra.0+0xd8>
 801ef0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef0e:	f1b8 0f00 	cmp.w	r8, #0
 801ef12:	d000      	beq.n	801ef16 <_strtoul_l.isra.0+0xd2>
 801ef14:	4240      	negs	r0, r0
 801ef16:	2a00      	cmp	r2, #0
 801ef18:	d0f7      	beq.n	801ef0a <_strtoul_l.isra.0+0xc6>
 801ef1a:	b10d      	cbz	r5, 801ef20 <_strtoul_l.isra.0+0xdc>
 801ef1c:	f10c 31ff 	add.w	r1, ip, #4294967295
 801ef20:	6011      	str	r1, [r2, #0]
 801ef22:	e7f2      	b.n	801ef0a <_strtoul_l.isra.0+0xc6>
 801ef24:	2430      	movs	r4, #48	; 0x30
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d1b1      	bne.n	801ee8e <_strtoul_l.isra.0+0x4a>
 801ef2a:	2308      	movs	r3, #8
 801ef2c:	e7af      	b.n	801ee8e <_strtoul_l.isra.0+0x4a>
 801ef2e:	2c30      	cmp	r4, #48	; 0x30
 801ef30:	d0a2      	beq.n	801ee78 <_strtoul_l.isra.0+0x34>
 801ef32:	230a      	movs	r3, #10
 801ef34:	e7ab      	b.n	801ee8e <_strtoul_l.isra.0+0x4a>
 801ef36:	bf00      	nop
 801ef38:	080261b9 	.word	0x080261b9

0801ef3c <_strtoul_r>:
 801ef3c:	f7ff bf82 	b.w	801ee44 <_strtoul_l.isra.0>

0801ef40 <strtoul>:
 801ef40:	4613      	mov	r3, r2
 801ef42:	460a      	mov	r2, r1
 801ef44:	4601      	mov	r1, r0
 801ef46:	4802      	ldr	r0, [pc, #8]	; (801ef50 <strtoul+0x10>)
 801ef48:	6800      	ldr	r0, [r0, #0]
 801ef4a:	f7ff bf7b 	b.w	801ee44 <_strtoul_l.isra.0>
 801ef4e:	bf00      	nop
 801ef50:	20000104 	.word	0x20000104

0801ef54 <__tzcalc_limits>:
 801ef54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef58:	4680      	mov	r8, r0
 801ef5a:	f000 fc6d 	bl	801f838 <__gettzinfo>
 801ef5e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801ef62:	4598      	cmp	r8, r3
 801ef64:	f340 8098 	ble.w	801f098 <__tzcalc_limits+0x144>
 801ef68:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801ef6c:	4443      	add	r3, r8
 801ef6e:	109b      	asrs	r3, r3, #2
 801ef70:	f240 126d 	movw	r2, #365	; 0x16d
 801ef74:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801ef78:	fb02 3505 	mla	r5, r2, r5, r3
 801ef7c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801ef80:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801ef84:	fb93 f3f2 	sdiv	r3, r3, r2
 801ef88:	441d      	add	r5, r3
 801ef8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ef8e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801ef92:	fb98 f7f3 	sdiv	r7, r8, r3
 801ef96:	fb03 8717 	mls	r7, r3, r7, r8
 801ef9a:	4442      	add	r2, r8
 801ef9c:	fab7 fc87 	clz	ip, r7
 801efa0:	fbb2 f2f3 	udiv	r2, r2, r3
 801efa4:	f008 0303 	and.w	r3, r8, #3
 801efa8:	4415      	add	r5, r2
 801efaa:	2264      	movs	r2, #100	; 0x64
 801efac:	f8c0 8004 	str.w	r8, [r0, #4]
 801efb0:	fb98 f6f2 	sdiv	r6, r8, r2
 801efb4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801efb8:	fb02 8616 	mls	r6, r2, r6, r8
 801efbc:	4604      	mov	r4, r0
 801efbe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801efc2:	9300      	str	r3, [sp, #0]
 801efc4:	f04f 0e07 	mov.w	lr, #7
 801efc8:	7a22      	ldrb	r2, [r4, #8]
 801efca:	6963      	ldr	r3, [r4, #20]
 801efcc:	2a4a      	cmp	r2, #74	; 0x4a
 801efce:	d128      	bne.n	801f022 <__tzcalc_limits+0xce>
 801efd0:	9900      	ldr	r1, [sp, #0]
 801efd2:	18ea      	adds	r2, r5, r3
 801efd4:	b901      	cbnz	r1, 801efd8 <__tzcalc_limits+0x84>
 801efd6:	b906      	cbnz	r6, 801efda <__tzcalc_limits+0x86>
 801efd8:	bb0f      	cbnz	r7, 801f01e <__tzcalc_limits+0xca>
 801efda:	2b3b      	cmp	r3, #59	; 0x3b
 801efdc:	bfd4      	ite	le
 801efde:	2300      	movle	r3, #0
 801efe0:	2301      	movgt	r3, #1
 801efe2:	4413      	add	r3, r2
 801efe4:	1e5a      	subs	r2, r3, #1
 801efe6:	69a3      	ldr	r3, [r4, #24]
 801efe8:	492c      	ldr	r1, [pc, #176]	; (801f09c <__tzcalc_limits+0x148>)
 801efea:	fb01 3202 	mla	r2, r1, r2, r3
 801efee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801eff0:	4413      	add	r3, r2
 801eff2:	461a      	mov	r2, r3
 801eff4:	17db      	asrs	r3, r3, #31
 801eff6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801effa:	3428      	adds	r4, #40	; 0x28
 801effc:	45a3      	cmp	fp, r4
 801effe:	d1e3      	bne.n	801efc8 <__tzcalc_limits+0x74>
 801f000:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801f004:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801f008:	4294      	cmp	r4, r2
 801f00a:	eb75 0303 	sbcs.w	r3, r5, r3
 801f00e:	bfb4      	ite	lt
 801f010:	2301      	movlt	r3, #1
 801f012:	2300      	movge	r3, #0
 801f014:	6003      	str	r3, [r0, #0]
 801f016:	2001      	movs	r0, #1
 801f018:	b003      	add	sp, #12
 801f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f01e:	2300      	movs	r3, #0
 801f020:	e7df      	b.n	801efe2 <__tzcalc_limits+0x8e>
 801f022:	2a44      	cmp	r2, #68	; 0x44
 801f024:	d101      	bne.n	801f02a <__tzcalc_limits+0xd6>
 801f026:	18ea      	adds	r2, r5, r3
 801f028:	e7dd      	b.n	801efe6 <__tzcalc_limits+0x92>
 801f02a:	9a00      	ldr	r2, [sp, #0]
 801f02c:	bb72      	cbnz	r2, 801f08c <__tzcalc_limits+0x138>
 801f02e:	2e00      	cmp	r6, #0
 801f030:	bf0c      	ite	eq
 801f032:	46e0      	moveq	r8, ip
 801f034:	f04f 0801 	movne.w	r8, #1
 801f038:	4919      	ldr	r1, [pc, #100]	; (801f0a0 <__tzcalc_limits+0x14c>)
 801f03a:	68e2      	ldr	r2, [r4, #12]
 801f03c:	9201      	str	r2, [sp, #4]
 801f03e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801f042:	fb0a 1808 	mla	r8, sl, r8, r1
 801f046:	462a      	mov	r2, r5
 801f048:	f04f 0900 	mov.w	r9, #0
 801f04c:	f1a8 0804 	sub.w	r8, r8, #4
 801f050:	9901      	ldr	r1, [sp, #4]
 801f052:	f109 0901 	add.w	r9, r9, #1
 801f056:	4549      	cmp	r1, r9
 801f058:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801f05c:	dc18      	bgt.n	801f090 <__tzcalc_limits+0x13c>
 801f05e:	f102 0804 	add.w	r8, r2, #4
 801f062:	fb98 f9fe 	sdiv	r9, r8, lr
 801f066:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801f06a:	eba8 0909 	sub.w	r9, r8, r9
 801f06e:	ebb3 0909 	subs.w	r9, r3, r9
 801f072:	6923      	ldr	r3, [r4, #16]
 801f074:	f103 33ff 	add.w	r3, r3, #4294967295
 801f078:	bf48      	it	mi
 801f07a:	f109 0907 	addmi.w	r9, r9, #7
 801f07e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f082:	444b      	add	r3, r9
 801f084:	4553      	cmp	r3, sl
 801f086:	da05      	bge.n	801f094 <__tzcalc_limits+0x140>
 801f088:	441a      	add	r2, r3
 801f08a:	e7ac      	b.n	801efe6 <__tzcalc_limits+0x92>
 801f08c:	46e0      	mov	r8, ip
 801f08e:	e7d3      	b.n	801f038 <__tzcalc_limits+0xe4>
 801f090:	4452      	add	r2, sl
 801f092:	e7dd      	b.n	801f050 <__tzcalc_limits+0xfc>
 801f094:	3b07      	subs	r3, #7
 801f096:	e7f5      	b.n	801f084 <__tzcalc_limits+0x130>
 801f098:	2000      	movs	r0, #0
 801f09a:	e7bd      	b.n	801f018 <__tzcalc_limits+0xc4>
 801f09c:	00015180 	.word	0x00015180
 801f0a0:	08025e00 	.word	0x08025e00

0801f0a4 <__tz_lock>:
 801f0a4:	4801      	ldr	r0, [pc, #4]	; (801f0ac <__tz_lock+0x8>)
 801f0a6:	f7fe bed9 	b.w	801de5c <__retarget_lock_acquire>
 801f0aa:	bf00      	nop
 801f0ac:	20000de7 	.word	0x20000de7

0801f0b0 <__tz_unlock>:
 801f0b0:	4801      	ldr	r0, [pc, #4]	; (801f0b8 <__tz_unlock+0x8>)
 801f0b2:	f7fe bed5 	b.w	801de60 <__retarget_lock_release>
 801f0b6:	bf00      	nop
 801f0b8:	20000de7 	.word	0x20000de7

0801f0bc <_tzset_unlocked>:
 801f0bc:	4b01      	ldr	r3, [pc, #4]	; (801f0c4 <_tzset_unlocked+0x8>)
 801f0be:	6818      	ldr	r0, [r3, #0]
 801f0c0:	f000 b802 	b.w	801f0c8 <_tzset_unlocked_r>
 801f0c4:	20000104 	.word	0x20000104

0801f0c8 <_tzset_unlocked_r>:
 801f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0cc:	b08d      	sub	sp, #52	; 0x34
 801f0ce:	4607      	mov	r7, r0
 801f0d0:	f000 fbb2 	bl	801f838 <__gettzinfo>
 801f0d4:	49ae      	ldr	r1, [pc, #696]	; (801f390 <_tzset_unlocked_r+0x2c8>)
 801f0d6:	4eaf      	ldr	r6, [pc, #700]	; (801f394 <_tzset_unlocked_r+0x2cc>)
 801f0d8:	4605      	mov	r5, r0
 801f0da:	4638      	mov	r0, r7
 801f0dc:	f000 fba4 	bl	801f828 <_getenv_r>
 801f0e0:	4604      	mov	r4, r0
 801f0e2:	b970      	cbnz	r0, 801f102 <_tzset_unlocked_r+0x3a>
 801f0e4:	4bac      	ldr	r3, [pc, #688]	; (801f398 <_tzset_unlocked_r+0x2d0>)
 801f0e6:	4aad      	ldr	r2, [pc, #692]	; (801f39c <_tzset_unlocked_r+0x2d4>)
 801f0e8:	6018      	str	r0, [r3, #0]
 801f0ea:	4bad      	ldr	r3, [pc, #692]	; (801f3a0 <_tzset_unlocked_r+0x2d8>)
 801f0ec:	6018      	str	r0, [r3, #0]
 801f0ee:	4bad      	ldr	r3, [pc, #692]	; (801f3a4 <_tzset_unlocked_r+0x2dc>)
 801f0f0:	6830      	ldr	r0, [r6, #0]
 801f0f2:	e9c3 2200 	strd	r2, r2, [r3]
 801f0f6:	f7fe ff21 	bl	801df3c <free>
 801f0fa:	6034      	str	r4, [r6, #0]
 801f0fc:	b00d      	add	sp, #52	; 0x34
 801f0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f102:	6831      	ldr	r1, [r6, #0]
 801f104:	2900      	cmp	r1, #0
 801f106:	d15f      	bne.n	801f1c8 <_tzset_unlocked_r+0x100>
 801f108:	6830      	ldr	r0, [r6, #0]
 801f10a:	f7fe ff17 	bl	801df3c <free>
 801f10e:	4620      	mov	r0, r4
 801f110:	f7e1 f894 	bl	800023c <strlen>
 801f114:	1c41      	adds	r1, r0, #1
 801f116:	4638      	mov	r0, r7
 801f118:	f7fe ff8e 	bl	801e038 <_malloc_r>
 801f11c:	6030      	str	r0, [r6, #0]
 801f11e:	2800      	cmp	r0, #0
 801f120:	d157      	bne.n	801f1d2 <_tzset_unlocked_r+0x10a>
 801f122:	7823      	ldrb	r3, [r4, #0]
 801f124:	4aa0      	ldr	r2, [pc, #640]	; (801f3a8 <_tzset_unlocked_r+0x2e0>)
 801f126:	49a1      	ldr	r1, [pc, #644]	; (801f3ac <_tzset_unlocked_r+0x2e4>)
 801f128:	2b3a      	cmp	r3, #58	; 0x3a
 801f12a:	bf08      	it	eq
 801f12c:	3401      	addeq	r4, #1
 801f12e:	ae0a      	add	r6, sp, #40	; 0x28
 801f130:	4633      	mov	r3, r6
 801f132:	4620      	mov	r0, r4
 801f134:	f001 f976 	bl	8020424 <siscanf>
 801f138:	2800      	cmp	r0, #0
 801f13a:	dddf      	ble.n	801f0fc <_tzset_unlocked_r+0x34>
 801f13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f13e:	18e7      	adds	r7, r4, r3
 801f140:	5ce3      	ldrb	r3, [r4, r3]
 801f142:	2b2d      	cmp	r3, #45	; 0x2d
 801f144:	d149      	bne.n	801f1da <_tzset_unlocked_r+0x112>
 801f146:	3701      	adds	r7, #1
 801f148:	f04f 34ff 	mov.w	r4, #4294967295
 801f14c:	f10d 0a20 	add.w	sl, sp, #32
 801f150:	f10d 0b1e 	add.w	fp, sp, #30
 801f154:	f04f 0800 	mov.w	r8, #0
 801f158:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801f15c:	4994      	ldr	r1, [pc, #592]	; (801f3b0 <_tzset_unlocked_r+0x2e8>)
 801f15e:	9603      	str	r6, [sp, #12]
 801f160:	f8cd b000 	str.w	fp, [sp]
 801f164:	4633      	mov	r3, r6
 801f166:	aa07      	add	r2, sp, #28
 801f168:	4638      	mov	r0, r7
 801f16a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801f16e:	f8ad 8020 	strh.w	r8, [sp, #32]
 801f172:	f001 f957 	bl	8020424 <siscanf>
 801f176:	4540      	cmp	r0, r8
 801f178:	ddc0      	ble.n	801f0fc <_tzset_unlocked_r+0x34>
 801f17a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f17e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f182:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801f3bc <_tzset_unlocked_r+0x2f4>
 801f186:	213c      	movs	r1, #60	; 0x3c
 801f188:	fb01 2203 	mla	r2, r1, r3, r2
 801f18c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f190:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f194:	fb01 2303 	mla	r3, r1, r3, r2
 801f198:	435c      	muls	r4, r3
 801f19a:	62ac      	str	r4, [r5, #40]	; 0x28
 801f19c:	4c81      	ldr	r4, [pc, #516]	; (801f3a4 <_tzset_unlocked_r+0x2dc>)
 801f19e:	4b82      	ldr	r3, [pc, #520]	; (801f3a8 <_tzset_unlocked_r+0x2e0>)
 801f1a0:	6023      	str	r3, [r4, #0]
 801f1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1a4:	4981      	ldr	r1, [pc, #516]	; (801f3ac <_tzset_unlocked_r+0x2e4>)
 801f1a6:	441f      	add	r7, r3
 801f1a8:	464a      	mov	r2, r9
 801f1aa:	4633      	mov	r3, r6
 801f1ac:	4638      	mov	r0, r7
 801f1ae:	f001 f939 	bl	8020424 <siscanf>
 801f1b2:	4540      	cmp	r0, r8
 801f1b4:	dc16      	bgt.n	801f1e4 <_tzset_unlocked_r+0x11c>
 801f1b6:	6823      	ldr	r3, [r4, #0]
 801f1b8:	6063      	str	r3, [r4, #4]
 801f1ba:	4b77      	ldr	r3, [pc, #476]	; (801f398 <_tzset_unlocked_r+0x2d0>)
 801f1bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f1be:	601a      	str	r2, [r3, #0]
 801f1c0:	4b77      	ldr	r3, [pc, #476]	; (801f3a0 <_tzset_unlocked_r+0x2d8>)
 801f1c2:	f8c3 8000 	str.w	r8, [r3]
 801f1c6:	e799      	b.n	801f0fc <_tzset_unlocked_r+0x34>
 801f1c8:	f7e1 f840 	bl	800024c <strcmp>
 801f1cc:	2800      	cmp	r0, #0
 801f1ce:	d19b      	bne.n	801f108 <_tzset_unlocked_r+0x40>
 801f1d0:	e794      	b.n	801f0fc <_tzset_unlocked_r+0x34>
 801f1d2:	4621      	mov	r1, r4
 801f1d4:	f001 f952 	bl	802047c <strcpy>
 801f1d8:	e7a3      	b.n	801f122 <_tzset_unlocked_r+0x5a>
 801f1da:	2b2b      	cmp	r3, #43	; 0x2b
 801f1dc:	bf08      	it	eq
 801f1de:	3701      	addeq	r7, #1
 801f1e0:	2401      	movs	r4, #1
 801f1e2:	e7b3      	b.n	801f14c <_tzset_unlocked_r+0x84>
 801f1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1e6:	f8c4 9004 	str.w	r9, [r4, #4]
 801f1ea:	18fc      	adds	r4, r7, r3
 801f1ec:	5cfb      	ldrb	r3, [r7, r3]
 801f1ee:	2b2d      	cmp	r3, #45	; 0x2d
 801f1f0:	f040 808b 	bne.w	801f30a <_tzset_unlocked_r+0x242>
 801f1f4:	3401      	adds	r4, #1
 801f1f6:	f04f 37ff 	mov.w	r7, #4294967295
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f200:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f204:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f208:	930a      	str	r3, [sp, #40]	; 0x28
 801f20a:	e9cd a602 	strd	sl, r6, [sp, #8]
 801f20e:	e9cd b600 	strd	fp, r6, [sp]
 801f212:	4967      	ldr	r1, [pc, #412]	; (801f3b0 <_tzset_unlocked_r+0x2e8>)
 801f214:	4633      	mov	r3, r6
 801f216:	aa07      	add	r2, sp, #28
 801f218:	4620      	mov	r0, r4
 801f21a:	f001 f903 	bl	8020424 <siscanf>
 801f21e:	2800      	cmp	r0, #0
 801f220:	dc78      	bgt.n	801f314 <_tzset_unlocked_r+0x24c>
 801f222:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801f224:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801f228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f22a:	652f      	str	r7, [r5, #80]	; 0x50
 801f22c:	441c      	add	r4, r3
 801f22e:	462f      	mov	r7, r5
 801f230:	f04f 0900 	mov.w	r9, #0
 801f234:	7823      	ldrb	r3, [r4, #0]
 801f236:	2b2c      	cmp	r3, #44	; 0x2c
 801f238:	bf08      	it	eq
 801f23a:	3401      	addeq	r4, #1
 801f23c:	f894 8000 	ldrb.w	r8, [r4]
 801f240:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801f244:	d178      	bne.n	801f338 <_tzset_unlocked_r+0x270>
 801f246:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801f24a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801f24e:	ab09      	add	r3, sp, #36	; 0x24
 801f250:	9300      	str	r3, [sp, #0]
 801f252:	4958      	ldr	r1, [pc, #352]	; (801f3b4 <_tzset_unlocked_r+0x2ec>)
 801f254:	9603      	str	r6, [sp, #12]
 801f256:	4633      	mov	r3, r6
 801f258:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801f25c:	4620      	mov	r0, r4
 801f25e:	f001 f8e1 	bl	8020424 <siscanf>
 801f262:	2803      	cmp	r0, #3
 801f264:	f47f af4a 	bne.w	801f0fc <_tzset_unlocked_r+0x34>
 801f268:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801f26c:	1e4b      	subs	r3, r1, #1
 801f26e:	2b0b      	cmp	r3, #11
 801f270:	f63f af44 	bhi.w	801f0fc <_tzset_unlocked_r+0x34>
 801f274:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f278:	1e53      	subs	r3, r2, #1
 801f27a:	2b04      	cmp	r3, #4
 801f27c:	f63f af3e 	bhi.w	801f0fc <_tzset_unlocked_r+0x34>
 801f280:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801f284:	2b06      	cmp	r3, #6
 801f286:	f63f af39 	bhi.w	801f0fc <_tzset_unlocked_r+0x34>
 801f28a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801f28e:	f887 8008 	strb.w	r8, [r7, #8]
 801f292:	617b      	str	r3, [r7, #20]
 801f294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f296:	eb04 0803 	add.w	r8, r4, r3
 801f29a:	2302      	movs	r3, #2
 801f29c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f2a0:	2300      	movs	r3, #0
 801f2a2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f2a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f2aa:	930a      	str	r3, [sp, #40]	; 0x28
 801f2ac:	f898 3000 	ldrb.w	r3, [r8]
 801f2b0:	2b2f      	cmp	r3, #47	; 0x2f
 801f2b2:	d109      	bne.n	801f2c8 <_tzset_unlocked_r+0x200>
 801f2b4:	e9cd a602 	strd	sl, r6, [sp, #8]
 801f2b8:	e9cd b600 	strd	fp, r6, [sp]
 801f2bc:	493e      	ldr	r1, [pc, #248]	; (801f3b8 <_tzset_unlocked_r+0x2f0>)
 801f2be:	4633      	mov	r3, r6
 801f2c0:	aa07      	add	r2, sp, #28
 801f2c2:	4640      	mov	r0, r8
 801f2c4:	f001 f8ae 	bl	8020424 <siscanf>
 801f2c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f2cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f2d0:	213c      	movs	r1, #60	; 0x3c
 801f2d2:	fb01 2203 	mla	r2, r1, r3, r2
 801f2d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f2da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f2de:	fb01 2303 	mla	r3, r1, r3, r2
 801f2e2:	61bb      	str	r3, [r7, #24]
 801f2e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f2e6:	3728      	adds	r7, #40	; 0x28
 801f2e8:	4444      	add	r4, r8
 801f2ea:	f1b9 0f00 	cmp.w	r9, #0
 801f2ee:	d020      	beq.n	801f332 <_tzset_unlocked_r+0x26a>
 801f2f0:	6868      	ldr	r0, [r5, #4]
 801f2f2:	f7ff fe2f 	bl	801ef54 <__tzcalc_limits>
 801f2f6:	4b28      	ldr	r3, [pc, #160]	; (801f398 <_tzset_unlocked_r+0x2d0>)
 801f2f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801f2fa:	601a      	str	r2, [r3, #0]
 801f2fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f2fe:	1a9b      	subs	r3, r3, r2
 801f300:	4a27      	ldr	r2, [pc, #156]	; (801f3a0 <_tzset_unlocked_r+0x2d8>)
 801f302:	bf18      	it	ne
 801f304:	2301      	movne	r3, #1
 801f306:	6013      	str	r3, [r2, #0]
 801f308:	e6f8      	b.n	801f0fc <_tzset_unlocked_r+0x34>
 801f30a:	2b2b      	cmp	r3, #43	; 0x2b
 801f30c:	bf08      	it	eq
 801f30e:	3401      	addeq	r4, #1
 801f310:	2701      	movs	r7, #1
 801f312:	e772      	b.n	801f1fa <_tzset_unlocked_r+0x132>
 801f314:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801f318:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f31c:	213c      	movs	r1, #60	; 0x3c
 801f31e:	fb01 2203 	mla	r2, r1, r3, r2
 801f322:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f326:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f32a:	fb01 2303 	mla	r3, r1, r3, r2
 801f32e:	435f      	muls	r7, r3
 801f330:	e77a      	b.n	801f228 <_tzset_unlocked_r+0x160>
 801f332:	f04f 0901 	mov.w	r9, #1
 801f336:	e77d      	b.n	801f234 <_tzset_unlocked_r+0x16c>
 801f338:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801f33c:	bf06      	itte	eq
 801f33e:	3401      	addeq	r4, #1
 801f340:	4643      	moveq	r3, r8
 801f342:	2344      	movne	r3, #68	; 0x44
 801f344:	220a      	movs	r2, #10
 801f346:	a90b      	add	r1, sp, #44	; 0x2c
 801f348:	4620      	mov	r0, r4
 801f34a:	9305      	str	r3, [sp, #20]
 801f34c:	f7ff fdf8 	bl	801ef40 <strtoul>
 801f350:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f354:	9b05      	ldr	r3, [sp, #20]
 801f356:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801f35a:	45a0      	cmp	r8, r4
 801f35c:	d114      	bne.n	801f388 <_tzset_unlocked_r+0x2c0>
 801f35e:	234d      	movs	r3, #77	; 0x4d
 801f360:	f1b9 0f00 	cmp.w	r9, #0
 801f364:	d107      	bne.n	801f376 <_tzset_unlocked_r+0x2ae>
 801f366:	722b      	strb	r3, [r5, #8]
 801f368:	2103      	movs	r1, #3
 801f36a:	2302      	movs	r3, #2
 801f36c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801f370:	f8c5 9014 	str.w	r9, [r5, #20]
 801f374:	e791      	b.n	801f29a <_tzset_unlocked_r+0x1d2>
 801f376:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801f37a:	220b      	movs	r2, #11
 801f37c:	2301      	movs	r3, #1
 801f37e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801f382:	2300      	movs	r3, #0
 801f384:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f386:	e788      	b.n	801f29a <_tzset_unlocked_r+0x1d2>
 801f388:	b280      	uxth	r0, r0
 801f38a:	723b      	strb	r3, [r7, #8]
 801f38c:	6178      	str	r0, [r7, #20]
 801f38e:	e784      	b.n	801f29a <_tzset_unlocked_r+0x1d2>
 801f390:	08026140 	.word	0x08026140
 801f394:	20000d40 	.word	0x20000d40
 801f398:	20000d48 	.word	0x20000d48
 801f39c:	08026143 	.word	0x08026143
 801f3a0:	20000d44 	.word	0x20000d44
 801f3a4:	20000168 	.word	0x20000168
 801f3a8:	20000d33 	.word	0x20000d33
 801f3ac:	08026147 	.word	0x08026147
 801f3b0:	0802616a 	.word	0x0802616a
 801f3b4:	08026156 	.word	0x08026156
 801f3b8:	08026169 	.word	0x08026169
 801f3bc:	20000d28 	.word	0x20000d28

0801f3c0 <_vsniprintf_r>:
 801f3c0:	b530      	push	{r4, r5, lr}
 801f3c2:	1e14      	subs	r4, r2, #0
 801f3c4:	4605      	mov	r5, r0
 801f3c6:	b09b      	sub	sp, #108	; 0x6c
 801f3c8:	4618      	mov	r0, r3
 801f3ca:	da05      	bge.n	801f3d8 <_vsniprintf_r+0x18>
 801f3cc:	238b      	movs	r3, #139	; 0x8b
 801f3ce:	602b      	str	r3, [r5, #0]
 801f3d0:	f04f 30ff 	mov.w	r0, #4294967295
 801f3d4:	b01b      	add	sp, #108	; 0x6c
 801f3d6:	bd30      	pop	{r4, r5, pc}
 801f3d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f3dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f3e0:	bf14      	ite	ne
 801f3e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f3e6:	4623      	moveq	r3, r4
 801f3e8:	9302      	str	r3, [sp, #8]
 801f3ea:	9305      	str	r3, [sp, #20]
 801f3ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f3f0:	9100      	str	r1, [sp, #0]
 801f3f2:	9104      	str	r1, [sp, #16]
 801f3f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f3f8:	4602      	mov	r2, r0
 801f3fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f3fc:	4669      	mov	r1, sp
 801f3fe:	4628      	mov	r0, r5
 801f400:	f000 fb94 	bl	801fb2c <_svfiprintf_r>
 801f404:	1c43      	adds	r3, r0, #1
 801f406:	bfbc      	itt	lt
 801f408:	238b      	movlt	r3, #139	; 0x8b
 801f40a:	602b      	strlt	r3, [r5, #0]
 801f40c:	2c00      	cmp	r4, #0
 801f40e:	d0e1      	beq.n	801f3d4 <_vsniprintf_r+0x14>
 801f410:	9b00      	ldr	r3, [sp, #0]
 801f412:	2200      	movs	r2, #0
 801f414:	701a      	strb	r2, [r3, #0]
 801f416:	e7dd      	b.n	801f3d4 <_vsniprintf_r+0x14>

0801f418 <vsniprintf>:
 801f418:	b507      	push	{r0, r1, r2, lr}
 801f41a:	9300      	str	r3, [sp, #0]
 801f41c:	4613      	mov	r3, r2
 801f41e:	460a      	mov	r2, r1
 801f420:	4601      	mov	r1, r0
 801f422:	4803      	ldr	r0, [pc, #12]	; (801f430 <vsniprintf+0x18>)
 801f424:	6800      	ldr	r0, [r0, #0]
 801f426:	f7ff ffcb 	bl	801f3c0 <_vsniprintf_r>
 801f42a:	b003      	add	sp, #12
 801f42c:	f85d fb04 	ldr.w	pc, [sp], #4
 801f430:	20000104 	.word	0x20000104

0801f434 <__swbuf_r>:
 801f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f436:	460e      	mov	r6, r1
 801f438:	4614      	mov	r4, r2
 801f43a:	4605      	mov	r5, r0
 801f43c:	b118      	cbz	r0, 801f446 <__swbuf_r+0x12>
 801f43e:	6983      	ldr	r3, [r0, #24]
 801f440:	b90b      	cbnz	r3, 801f446 <__swbuf_r+0x12>
 801f442:	f7fe f959 	bl	801d6f8 <__sinit>
 801f446:	4b21      	ldr	r3, [pc, #132]	; (801f4cc <__swbuf_r+0x98>)
 801f448:	429c      	cmp	r4, r3
 801f44a:	d12b      	bne.n	801f4a4 <__swbuf_r+0x70>
 801f44c:	686c      	ldr	r4, [r5, #4]
 801f44e:	69a3      	ldr	r3, [r4, #24]
 801f450:	60a3      	str	r3, [r4, #8]
 801f452:	89a3      	ldrh	r3, [r4, #12]
 801f454:	071a      	lsls	r2, r3, #28
 801f456:	d52f      	bpl.n	801f4b8 <__swbuf_r+0x84>
 801f458:	6923      	ldr	r3, [r4, #16]
 801f45a:	b36b      	cbz	r3, 801f4b8 <__swbuf_r+0x84>
 801f45c:	6923      	ldr	r3, [r4, #16]
 801f45e:	6820      	ldr	r0, [r4, #0]
 801f460:	1ac0      	subs	r0, r0, r3
 801f462:	6963      	ldr	r3, [r4, #20]
 801f464:	b2f6      	uxtb	r6, r6
 801f466:	4283      	cmp	r3, r0
 801f468:	4637      	mov	r7, r6
 801f46a:	dc04      	bgt.n	801f476 <__swbuf_r+0x42>
 801f46c:	4621      	mov	r1, r4
 801f46e:	4628      	mov	r0, r5
 801f470:	f7fe f89c 	bl	801d5ac <_fflush_r>
 801f474:	bb30      	cbnz	r0, 801f4c4 <__swbuf_r+0x90>
 801f476:	68a3      	ldr	r3, [r4, #8]
 801f478:	3b01      	subs	r3, #1
 801f47a:	60a3      	str	r3, [r4, #8]
 801f47c:	6823      	ldr	r3, [r4, #0]
 801f47e:	1c5a      	adds	r2, r3, #1
 801f480:	6022      	str	r2, [r4, #0]
 801f482:	701e      	strb	r6, [r3, #0]
 801f484:	6963      	ldr	r3, [r4, #20]
 801f486:	3001      	adds	r0, #1
 801f488:	4283      	cmp	r3, r0
 801f48a:	d004      	beq.n	801f496 <__swbuf_r+0x62>
 801f48c:	89a3      	ldrh	r3, [r4, #12]
 801f48e:	07db      	lsls	r3, r3, #31
 801f490:	d506      	bpl.n	801f4a0 <__swbuf_r+0x6c>
 801f492:	2e0a      	cmp	r6, #10
 801f494:	d104      	bne.n	801f4a0 <__swbuf_r+0x6c>
 801f496:	4621      	mov	r1, r4
 801f498:	4628      	mov	r0, r5
 801f49a:	f7fe f887 	bl	801d5ac <_fflush_r>
 801f49e:	b988      	cbnz	r0, 801f4c4 <__swbuf_r+0x90>
 801f4a0:	4638      	mov	r0, r7
 801f4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4a4:	4b0a      	ldr	r3, [pc, #40]	; (801f4d0 <__swbuf_r+0x9c>)
 801f4a6:	429c      	cmp	r4, r3
 801f4a8:	d101      	bne.n	801f4ae <__swbuf_r+0x7a>
 801f4aa:	68ac      	ldr	r4, [r5, #8]
 801f4ac:	e7cf      	b.n	801f44e <__swbuf_r+0x1a>
 801f4ae:	4b09      	ldr	r3, [pc, #36]	; (801f4d4 <__swbuf_r+0xa0>)
 801f4b0:	429c      	cmp	r4, r3
 801f4b2:	bf08      	it	eq
 801f4b4:	68ec      	ldreq	r4, [r5, #12]
 801f4b6:	e7ca      	b.n	801f44e <__swbuf_r+0x1a>
 801f4b8:	4621      	mov	r1, r4
 801f4ba:	4628      	mov	r0, r5
 801f4bc:	f000 f81e 	bl	801f4fc <__swsetup_r>
 801f4c0:	2800      	cmp	r0, #0
 801f4c2:	d0cb      	beq.n	801f45c <__swbuf_r+0x28>
 801f4c4:	f04f 37ff 	mov.w	r7, #4294967295
 801f4c8:	e7ea      	b.n	801f4a0 <__swbuf_r+0x6c>
 801f4ca:	bf00      	nop
 801f4cc:	08025d44 	.word	0x08025d44
 801f4d0:	08025d64 	.word	0x08025d64
 801f4d4:	08025d24 	.word	0x08025d24

0801f4d8 <_write_r>:
 801f4d8:	b538      	push	{r3, r4, r5, lr}
 801f4da:	4d07      	ldr	r5, [pc, #28]	; (801f4f8 <_write_r+0x20>)
 801f4dc:	4604      	mov	r4, r0
 801f4de:	4608      	mov	r0, r1
 801f4e0:	4611      	mov	r1, r2
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	602a      	str	r2, [r5, #0]
 801f4e6:	461a      	mov	r2, r3
 801f4e8:	f7e1 fc72 	bl	8000dd0 <_write>
 801f4ec:	1c43      	adds	r3, r0, #1
 801f4ee:	d102      	bne.n	801f4f6 <_write_r+0x1e>
 801f4f0:	682b      	ldr	r3, [r5, #0]
 801f4f2:	b103      	cbz	r3, 801f4f6 <_write_r+0x1e>
 801f4f4:	6023      	str	r3, [r4, #0]
 801f4f6:	bd38      	pop	{r3, r4, r5, pc}
 801f4f8:	20000dec 	.word	0x20000dec

0801f4fc <__swsetup_r>:
 801f4fc:	4b32      	ldr	r3, [pc, #200]	; (801f5c8 <__swsetup_r+0xcc>)
 801f4fe:	b570      	push	{r4, r5, r6, lr}
 801f500:	681d      	ldr	r5, [r3, #0]
 801f502:	4606      	mov	r6, r0
 801f504:	460c      	mov	r4, r1
 801f506:	b125      	cbz	r5, 801f512 <__swsetup_r+0x16>
 801f508:	69ab      	ldr	r3, [r5, #24]
 801f50a:	b913      	cbnz	r3, 801f512 <__swsetup_r+0x16>
 801f50c:	4628      	mov	r0, r5
 801f50e:	f7fe f8f3 	bl	801d6f8 <__sinit>
 801f512:	4b2e      	ldr	r3, [pc, #184]	; (801f5cc <__swsetup_r+0xd0>)
 801f514:	429c      	cmp	r4, r3
 801f516:	d10f      	bne.n	801f538 <__swsetup_r+0x3c>
 801f518:	686c      	ldr	r4, [r5, #4]
 801f51a:	89a3      	ldrh	r3, [r4, #12]
 801f51c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f520:	0719      	lsls	r1, r3, #28
 801f522:	d42c      	bmi.n	801f57e <__swsetup_r+0x82>
 801f524:	06dd      	lsls	r5, r3, #27
 801f526:	d411      	bmi.n	801f54c <__swsetup_r+0x50>
 801f528:	2309      	movs	r3, #9
 801f52a:	6033      	str	r3, [r6, #0]
 801f52c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f530:	81a3      	strh	r3, [r4, #12]
 801f532:	f04f 30ff 	mov.w	r0, #4294967295
 801f536:	e03e      	b.n	801f5b6 <__swsetup_r+0xba>
 801f538:	4b25      	ldr	r3, [pc, #148]	; (801f5d0 <__swsetup_r+0xd4>)
 801f53a:	429c      	cmp	r4, r3
 801f53c:	d101      	bne.n	801f542 <__swsetup_r+0x46>
 801f53e:	68ac      	ldr	r4, [r5, #8]
 801f540:	e7eb      	b.n	801f51a <__swsetup_r+0x1e>
 801f542:	4b24      	ldr	r3, [pc, #144]	; (801f5d4 <__swsetup_r+0xd8>)
 801f544:	429c      	cmp	r4, r3
 801f546:	bf08      	it	eq
 801f548:	68ec      	ldreq	r4, [r5, #12]
 801f54a:	e7e6      	b.n	801f51a <__swsetup_r+0x1e>
 801f54c:	0758      	lsls	r0, r3, #29
 801f54e:	d512      	bpl.n	801f576 <__swsetup_r+0x7a>
 801f550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f552:	b141      	cbz	r1, 801f566 <__swsetup_r+0x6a>
 801f554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f558:	4299      	cmp	r1, r3
 801f55a:	d002      	beq.n	801f562 <__swsetup_r+0x66>
 801f55c:	4630      	mov	r0, r6
 801f55e:	f7fe fd1b 	bl	801df98 <_free_r>
 801f562:	2300      	movs	r3, #0
 801f564:	6363      	str	r3, [r4, #52]	; 0x34
 801f566:	89a3      	ldrh	r3, [r4, #12]
 801f568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f56c:	81a3      	strh	r3, [r4, #12]
 801f56e:	2300      	movs	r3, #0
 801f570:	6063      	str	r3, [r4, #4]
 801f572:	6923      	ldr	r3, [r4, #16]
 801f574:	6023      	str	r3, [r4, #0]
 801f576:	89a3      	ldrh	r3, [r4, #12]
 801f578:	f043 0308 	orr.w	r3, r3, #8
 801f57c:	81a3      	strh	r3, [r4, #12]
 801f57e:	6923      	ldr	r3, [r4, #16]
 801f580:	b94b      	cbnz	r3, 801f596 <__swsetup_r+0x9a>
 801f582:	89a3      	ldrh	r3, [r4, #12]
 801f584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f58c:	d003      	beq.n	801f596 <__swsetup_r+0x9a>
 801f58e:	4621      	mov	r1, r4
 801f590:	4630      	mov	r0, r6
 801f592:	f7fe fc8b 	bl	801deac <__smakebuf_r>
 801f596:	89a0      	ldrh	r0, [r4, #12]
 801f598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f59c:	f010 0301 	ands.w	r3, r0, #1
 801f5a0:	d00a      	beq.n	801f5b8 <__swsetup_r+0xbc>
 801f5a2:	2300      	movs	r3, #0
 801f5a4:	60a3      	str	r3, [r4, #8]
 801f5a6:	6963      	ldr	r3, [r4, #20]
 801f5a8:	425b      	negs	r3, r3
 801f5aa:	61a3      	str	r3, [r4, #24]
 801f5ac:	6923      	ldr	r3, [r4, #16]
 801f5ae:	b943      	cbnz	r3, 801f5c2 <__swsetup_r+0xc6>
 801f5b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f5b4:	d1ba      	bne.n	801f52c <__swsetup_r+0x30>
 801f5b6:	bd70      	pop	{r4, r5, r6, pc}
 801f5b8:	0781      	lsls	r1, r0, #30
 801f5ba:	bf58      	it	pl
 801f5bc:	6963      	ldrpl	r3, [r4, #20]
 801f5be:	60a3      	str	r3, [r4, #8]
 801f5c0:	e7f4      	b.n	801f5ac <__swsetup_r+0xb0>
 801f5c2:	2000      	movs	r0, #0
 801f5c4:	e7f7      	b.n	801f5b6 <__swsetup_r+0xba>
 801f5c6:	bf00      	nop
 801f5c8:	20000104 	.word	0x20000104
 801f5cc:	08025d44 	.word	0x08025d44
 801f5d0:	08025d64 	.word	0x08025d64
 801f5d4:	08025d24 	.word	0x08025d24

0801f5d8 <__register_exitproc>:
 801f5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f5dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801f698 <__register_exitproc+0xc0>
 801f5e0:	4606      	mov	r6, r0
 801f5e2:	f8d8 0000 	ldr.w	r0, [r8]
 801f5e6:	461f      	mov	r7, r3
 801f5e8:	460d      	mov	r5, r1
 801f5ea:	4691      	mov	r9, r2
 801f5ec:	f7fe fc37 	bl	801de5e <__retarget_lock_acquire_recursive>
 801f5f0:	4b25      	ldr	r3, [pc, #148]	; (801f688 <__register_exitproc+0xb0>)
 801f5f2:	681c      	ldr	r4, [r3, #0]
 801f5f4:	b934      	cbnz	r4, 801f604 <__register_exitproc+0x2c>
 801f5f6:	4c25      	ldr	r4, [pc, #148]	; (801f68c <__register_exitproc+0xb4>)
 801f5f8:	601c      	str	r4, [r3, #0]
 801f5fa:	4b25      	ldr	r3, [pc, #148]	; (801f690 <__register_exitproc+0xb8>)
 801f5fc:	b113      	cbz	r3, 801f604 <__register_exitproc+0x2c>
 801f5fe:	681b      	ldr	r3, [r3, #0]
 801f600:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f604:	6863      	ldr	r3, [r4, #4]
 801f606:	2b1f      	cmp	r3, #31
 801f608:	dd07      	ble.n	801f61a <__register_exitproc+0x42>
 801f60a:	f8d8 0000 	ldr.w	r0, [r8]
 801f60e:	f7fe fc28 	bl	801de62 <__retarget_lock_release_recursive>
 801f612:	f04f 30ff 	mov.w	r0, #4294967295
 801f616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f61a:	b34e      	cbz	r6, 801f670 <__register_exitproc+0x98>
 801f61c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f620:	b988      	cbnz	r0, 801f646 <__register_exitproc+0x6e>
 801f622:	4b1c      	ldr	r3, [pc, #112]	; (801f694 <__register_exitproc+0xbc>)
 801f624:	b923      	cbnz	r3, 801f630 <__register_exitproc+0x58>
 801f626:	f8d8 0000 	ldr.w	r0, [r8]
 801f62a:	f7fe fc19 	bl	801de60 <__retarget_lock_release>
 801f62e:	e7f0      	b.n	801f612 <__register_exitproc+0x3a>
 801f630:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f634:	f7fe fc7a 	bl	801df2c <malloc>
 801f638:	2800      	cmp	r0, #0
 801f63a:	d0f4      	beq.n	801f626 <__register_exitproc+0x4e>
 801f63c:	2300      	movs	r3, #0
 801f63e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801f642:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f646:	6863      	ldr	r3, [r4, #4]
 801f648:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801f64c:	2201      	movs	r2, #1
 801f64e:	409a      	lsls	r2, r3
 801f650:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801f654:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801f658:	4313      	orrs	r3, r2
 801f65a:	2e02      	cmp	r6, #2
 801f65c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f660:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801f664:	bf02      	ittt	eq
 801f666:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801f66a:	431a      	orreq	r2, r3
 801f66c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801f670:	6863      	ldr	r3, [r4, #4]
 801f672:	f8d8 0000 	ldr.w	r0, [r8]
 801f676:	1c5a      	adds	r2, r3, #1
 801f678:	3302      	adds	r3, #2
 801f67a:	6062      	str	r2, [r4, #4]
 801f67c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f680:	f7fe fbef 	bl	801de62 <__retarget_lock_release_recursive>
 801f684:	2000      	movs	r0, #0
 801f686:	e7c6      	b.n	801f616 <__register_exitproc+0x3e>
 801f688:	20000dd8 	.word	0x20000dd8
 801f68c:	20000d4c 	.word	0x20000d4c
 801f690:	00000000 	.word	0x00000000
 801f694:	0801df2d 	.word	0x0801df2d
 801f698:	20000170 	.word	0x20000170

0801f69c <abs>:
 801f69c:	2800      	cmp	r0, #0
 801f69e:	bfb8      	it	lt
 801f6a0:	4240      	neglt	r0, r0
 801f6a2:	4770      	bx	lr

0801f6a4 <__assert_func>:
 801f6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f6a6:	4614      	mov	r4, r2
 801f6a8:	461a      	mov	r2, r3
 801f6aa:	4b09      	ldr	r3, [pc, #36]	; (801f6d0 <__assert_func+0x2c>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	4605      	mov	r5, r0
 801f6b0:	68d8      	ldr	r0, [r3, #12]
 801f6b2:	b14c      	cbz	r4, 801f6c8 <__assert_func+0x24>
 801f6b4:	4b07      	ldr	r3, [pc, #28]	; (801f6d4 <__assert_func+0x30>)
 801f6b6:	9100      	str	r1, [sp, #0]
 801f6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f6bc:	4906      	ldr	r1, [pc, #24]	; (801f6d8 <__assert_func+0x34>)
 801f6be:	462b      	mov	r3, r5
 801f6c0:	f000 f854 	bl	801f76c <fiprintf>
 801f6c4:	f7fd fe5c 	bl	801d380 <abort>
 801f6c8:	4b04      	ldr	r3, [pc, #16]	; (801f6dc <__assert_func+0x38>)
 801f6ca:	461c      	mov	r4, r3
 801f6cc:	e7f3      	b.n	801f6b6 <__assert_func+0x12>
 801f6ce:	bf00      	nop
 801f6d0:	20000104 	.word	0x20000104
 801f6d4:	0802617c 	.word	0x0802617c
 801f6d8:	08026189 	.word	0x08026189
 801f6dc:	080261b7 	.word	0x080261b7

0801f6e0 <_close_r>:
 801f6e0:	b538      	push	{r3, r4, r5, lr}
 801f6e2:	4d06      	ldr	r5, [pc, #24]	; (801f6fc <_close_r+0x1c>)
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	4604      	mov	r4, r0
 801f6e8:	4608      	mov	r0, r1
 801f6ea:	602b      	str	r3, [r5, #0]
 801f6ec:	f7e1 fb8c 	bl	8000e08 <_close>
 801f6f0:	1c43      	adds	r3, r0, #1
 801f6f2:	d102      	bne.n	801f6fa <_close_r+0x1a>
 801f6f4:	682b      	ldr	r3, [r5, #0]
 801f6f6:	b103      	cbz	r3, 801f6fa <_close_r+0x1a>
 801f6f8:	6023      	str	r3, [r4, #0]
 801f6fa:	bd38      	pop	{r3, r4, r5, pc}
 801f6fc:	20000dec 	.word	0x20000dec

0801f700 <__sflags>:
 801f700:	780b      	ldrb	r3, [r1, #0]
 801f702:	2b72      	cmp	r3, #114	; 0x72
 801f704:	b530      	push	{r4, r5, lr}
 801f706:	d022      	beq.n	801f74e <__sflags+0x4e>
 801f708:	2b77      	cmp	r3, #119	; 0x77
 801f70a:	d024      	beq.n	801f756 <__sflags+0x56>
 801f70c:	2b61      	cmp	r3, #97	; 0x61
 801f70e:	d027      	beq.n	801f760 <__sflags+0x60>
 801f710:	2316      	movs	r3, #22
 801f712:	6003      	str	r3, [r0, #0]
 801f714:	2000      	movs	r0, #0
 801f716:	bd30      	pop	{r4, r5, pc}
 801f718:	2d62      	cmp	r5, #98	; 0x62
 801f71a:	d012      	beq.n	801f742 <__sflags+0x42>
 801f71c:	2d78      	cmp	r5, #120	; 0x78
 801f71e:	d013      	beq.n	801f748 <__sflags+0x48>
 801f720:	2d2b      	cmp	r5, #43	; 0x2b
 801f722:	d107      	bne.n	801f734 <__sflags+0x34>
 801f724:	f020 001c 	bic.w	r0, r0, #28
 801f728:	f023 0303 	bic.w	r3, r3, #3
 801f72c:	f040 0010 	orr.w	r0, r0, #16
 801f730:	f043 0302 	orr.w	r3, r3, #2
 801f734:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801f738:	2d00      	cmp	r5, #0
 801f73a:	d1ed      	bne.n	801f718 <__sflags+0x18>
 801f73c:	4323      	orrs	r3, r4
 801f73e:	6013      	str	r3, [r2, #0]
 801f740:	e7e9      	b.n	801f716 <__sflags+0x16>
 801f742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f746:	e7f5      	b.n	801f734 <__sflags+0x34>
 801f748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f74c:	e7f2      	b.n	801f734 <__sflags+0x34>
 801f74e:	2400      	movs	r4, #0
 801f750:	4623      	mov	r3, r4
 801f752:	2004      	movs	r0, #4
 801f754:	e7ee      	b.n	801f734 <__sflags+0x34>
 801f756:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801f75a:	2301      	movs	r3, #1
 801f75c:	2008      	movs	r0, #8
 801f75e:	e7e9      	b.n	801f734 <__sflags+0x34>
 801f760:	f44f 7402 	mov.w	r4, #520	; 0x208
 801f764:	2301      	movs	r3, #1
 801f766:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f76a:	e7e3      	b.n	801f734 <__sflags+0x34>

0801f76c <fiprintf>:
 801f76c:	b40e      	push	{r1, r2, r3}
 801f76e:	b503      	push	{r0, r1, lr}
 801f770:	4601      	mov	r1, r0
 801f772:	ab03      	add	r3, sp, #12
 801f774:	4805      	ldr	r0, [pc, #20]	; (801f78c <fiprintf+0x20>)
 801f776:	f853 2b04 	ldr.w	r2, [r3], #4
 801f77a:	6800      	ldr	r0, [r0, #0]
 801f77c:	9301      	str	r3, [sp, #4]
 801f77e:	f000 faff 	bl	801fd80 <_vfiprintf_r>
 801f782:	b002      	add	sp, #8
 801f784:	f85d eb04 	ldr.w	lr, [sp], #4
 801f788:	b003      	add	sp, #12
 801f78a:	4770      	bx	lr
 801f78c:	20000104 	.word	0x20000104

0801f790 <_fstat_r>:
 801f790:	b538      	push	{r3, r4, r5, lr}
 801f792:	4d07      	ldr	r5, [pc, #28]	; (801f7b0 <_fstat_r+0x20>)
 801f794:	2300      	movs	r3, #0
 801f796:	4604      	mov	r4, r0
 801f798:	4608      	mov	r0, r1
 801f79a:	4611      	mov	r1, r2
 801f79c:	602b      	str	r3, [r5, #0]
 801f79e:	f7e1 fb3f 	bl	8000e20 <_fstat>
 801f7a2:	1c43      	adds	r3, r0, #1
 801f7a4:	d102      	bne.n	801f7ac <_fstat_r+0x1c>
 801f7a6:	682b      	ldr	r3, [r5, #0]
 801f7a8:	b103      	cbz	r3, 801f7ac <_fstat_r+0x1c>
 801f7aa:	6023      	str	r3, [r4, #0]
 801f7ac:	bd38      	pop	{r3, r4, r5, pc}
 801f7ae:	bf00      	nop
 801f7b0:	20000dec 	.word	0x20000dec

0801f7b4 <_findenv_r>:
 801f7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b8:	4607      	mov	r7, r0
 801f7ba:	4689      	mov	r9, r1
 801f7bc:	4616      	mov	r6, r2
 801f7be:	f000 fe85 	bl	80204cc <__env_lock>
 801f7c2:	4b18      	ldr	r3, [pc, #96]	; (801f824 <_findenv_r+0x70>)
 801f7c4:	681c      	ldr	r4, [r3, #0]
 801f7c6:	469a      	mov	sl, r3
 801f7c8:	b134      	cbz	r4, 801f7d8 <_findenv_r+0x24>
 801f7ca:	464b      	mov	r3, r9
 801f7cc:	4698      	mov	r8, r3
 801f7ce:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f7d2:	b139      	cbz	r1, 801f7e4 <_findenv_r+0x30>
 801f7d4:	293d      	cmp	r1, #61	; 0x3d
 801f7d6:	d1f9      	bne.n	801f7cc <_findenv_r+0x18>
 801f7d8:	4638      	mov	r0, r7
 801f7da:	f000 fe7d 	bl	80204d8 <__env_unlock>
 801f7de:	2000      	movs	r0, #0
 801f7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7e4:	eba8 0809 	sub.w	r8, r8, r9
 801f7e8:	46a3      	mov	fp, r4
 801f7ea:	f854 0b04 	ldr.w	r0, [r4], #4
 801f7ee:	2800      	cmp	r0, #0
 801f7f0:	d0f2      	beq.n	801f7d8 <_findenv_r+0x24>
 801f7f2:	4642      	mov	r2, r8
 801f7f4:	4649      	mov	r1, r9
 801f7f6:	f000 fe49 	bl	802048c <strncmp>
 801f7fa:	2800      	cmp	r0, #0
 801f7fc:	d1f4      	bne.n	801f7e8 <_findenv_r+0x34>
 801f7fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f802:	eb03 0508 	add.w	r5, r3, r8
 801f806:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f80a:	2b3d      	cmp	r3, #61	; 0x3d
 801f80c:	d1ec      	bne.n	801f7e8 <_findenv_r+0x34>
 801f80e:	f8da 3000 	ldr.w	r3, [sl]
 801f812:	ebab 0303 	sub.w	r3, fp, r3
 801f816:	109b      	asrs	r3, r3, #2
 801f818:	4638      	mov	r0, r7
 801f81a:	6033      	str	r3, [r6, #0]
 801f81c:	f000 fe5c 	bl	80204d8 <__env_unlock>
 801f820:	1c68      	adds	r0, r5, #1
 801f822:	e7dd      	b.n	801f7e0 <_findenv_r+0x2c>
 801f824:	20000000 	.word	0x20000000

0801f828 <_getenv_r>:
 801f828:	b507      	push	{r0, r1, r2, lr}
 801f82a:	aa01      	add	r2, sp, #4
 801f82c:	f7ff ffc2 	bl	801f7b4 <_findenv_r>
 801f830:	b003      	add	sp, #12
 801f832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f838 <__gettzinfo>:
 801f838:	4800      	ldr	r0, [pc, #0]	; (801f83c <__gettzinfo+0x4>)
 801f83a:	4770      	bx	lr
 801f83c:	20000178 	.word	0x20000178

0801f840 <gmtime_r>:
 801f840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f844:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f848:	460c      	mov	r4, r1
 801f84a:	4a51      	ldr	r2, [pc, #324]	; (801f990 <gmtime_r+0x150>)
 801f84c:	2300      	movs	r3, #0
 801f84e:	4630      	mov	r0, r6
 801f850:	4639      	mov	r1, r7
 801f852:	f7e0 ffaf 	bl	80007b4 <__aeabi_ldivmod>
 801f856:	4639      	mov	r1, r7
 801f858:	4605      	mov	r5, r0
 801f85a:	4a4d      	ldr	r2, [pc, #308]	; (801f990 <gmtime_r+0x150>)
 801f85c:	4630      	mov	r0, r6
 801f85e:	2300      	movs	r3, #0
 801f860:	f7e0 ffa8 	bl	80007b4 <__aeabi_ldivmod>
 801f864:	2a00      	cmp	r2, #0
 801f866:	bfbc      	itt	lt
 801f868:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f86c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f870:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f874:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f878:	fbb2 f3f1 	udiv	r3, r2, r1
 801f87c:	fb01 2213 	mls	r2, r1, r3, r2
 801f880:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f884:	bfac      	ite	ge
 801f886:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f88a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f88e:	60a3      	str	r3, [r4, #8]
 801f890:	fbb2 f3f1 	udiv	r3, r2, r1
 801f894:	fb01 2213 	mls	r2, r1, r3, r2
 801f898:	6063      	str	r3, [r4, #4]
 801f89a:	6022      	str	r2, [r4, #0]
 801f89c:	1cc3      	adds	r3, r0, #3
 801f89e:	2207      	movs	r2, #7
 801f8a0:	fb93 f2f2 	sdiv	r2, r3, r2
 801f8a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f8a8:	1a9b      	subs	r3, r3, r2
 801f8aa:	bf48      	it	mi
 801f8ac:	3307      	addmi	r3, #7
 801f8ae:	2800      	cmp	r0, #0
 801f8b0:	61a3      	str	r3, [r4, #24]
 801f8b2:	bfb8      	it	lt
 801f8b4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801f8b8:	4936      	ldr	r1, [pc, #216]	; (801f994 <gmtime_r+0x154>)
 801f8ba:	bfae      	itee	ge
 801f8bc:	fb90 f1f1 	sdivge	r1, r0, r1
 801f8c0:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801f8c4:	fb93 f1f1 	sdivlt	r1, r3, r1
 801f8c8:	4b33      	ldr	r3, [pc, #204]	; (801f998 <gmtime_r+0x158>)
 801f8ca:	fb03 0001 	mla	r0, r3, r1, r0
 801f8ce:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f8d2:	fbb0 f2f2 	udiv	r2, r0, r2
 801f8d6:	4402      	add	r2, r0
 801f8d8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801f8dc:	fbb0 f3fc 	udiv	r3, r0, ip
 801f8e0:	1ad2      	subs	r2, r2, r3
 801f8e2:	f240 176d 	movw	r7, #365	; 0x16d
 801f8e6:	4b2d      	ldr	r3, [pc, #180]	; (801f99c <gmtime_r+0x15c>)
 801f8e8:	fbb0 f3f3 	udiv	r3, r0, r3
 801f8ec:	2664      	movs	r6, #100	; 0x64
 801f8ee:	1ad3      	subs	r3, r2, r3
 801f8f0:	fbb3 f5f7 	udiv	r5, r3, r7
 801f8f4:	fbb3 f3fc 	udiv	r3, r3, ip
 801f8f8:	fbb5 f2f6 	udiv	r2, r5, r6
 801f8fc:	1ad3      	subs	r3, r2, r3
 801f8fe:	4403      	add	r3, r0
 801f900:	fb07 3315 	mls	r3, r7, r5, r3
 801f904:	2099      	movs	r0, #153	; 0x99
 801f906:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f90a:	f10c 0c02 	add.w	ip, ip, #2
 801f90e:	f103 0e01 	add.w	lr, r3, #1
 801f912:	fbbc f7f0 	udiv	r7, ip, r0
 801f916:	4378      	muls	r0, r7
 801f918:	3002      	adds	r0, #2
 801f91a:	f04f 0805 	mov.w	r8, #5
 801f91e:	fbb0 f0f8 	udiv	r0, r0, r8
 801f922:	ebae 0000 	sub.w	r0, lr, r0
 801f926:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f92a:	45f4      	cmp	ip, lr
 801f92c:	bf94      	ite	ls
 801f92e:	f04f 0c02 	movls.w	ip, #2
 801f932:	f06f 0c09 	mvnhi.w	ip, #9
 801f936:	4467      	add	r7, ip
 801f938:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f93c:	fb0c 5101 	mla	r1, ip, r1, r5
 801f940:	2f01      	cmp	r7, #1
 801f942:	bf98      	it	ls
 801f944:	3101      	addls	r1, #1
 801f946:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f94a:	d30c      	bcc.n	801f966 <gmtime_r+0x126>
 801f94c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f950:	61e3      	str	r3, [r4, #28]
 801f952:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f956:	2300      	movs	r3, #0
 801f958:	60e0      	str	r0, [r4, #12]
 801f95a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f95e:	6223      	str	r3, [r4, #32]
 801f960:	4620      	mov	r0, r4
 801f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f966:	f015 0f03 	tst.w	r5, #3
 801f96a:	d102      	bne.n	801f972 <gmtime_r+0x132>
 801f96c:	fb06 5212 	mls	r2, r6, r2, r5
 801f970:	b95a      	cbnz	r2, 801f98a <gmtime_r+0x14a>
 801f972:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f976:	fbb5 f2f6 	udiv	r2, r5, r6
 801f97a:	fb06 5212 	mls	r2, r6, r2, r5
 801f97e:	fab2 f282 	clz	r2, r2
 801f982:	0952      	lsrs	r2, r2, #5
 801f984:	333b      	adds	r3, #59	; 0x3b
 801f986:	4413      	add	r3, r2
 801f988:	e7e2      	b.n	801f950 <gmtime_r+0x110>
 801f98a:	2201      	movs	r2, #1
 801f98c:	e7fa      	b.n	801f984 <gmtime_r+0x144>
 801f98e:	bf00      	nop
 801f990:	00015180 	.word	0x00015180
 801f994:	00023ab1 	.word	0x00023ab1
 801f998:	fffdc54f 	.word	0xfffdc54f
 801f99c:	00023ab0 	.word	0x00023ab0

0801f9a0 <_isatty_r>:
 801f9a0:	b538      	push	{r3, r4, r5, lr}
 801f9a2:	4d06      	ldr	r5, [pc, #24]	; (801f9bc <_isatty_r+0x1c>)
 801f9a4:	2300      	movs	r3, #0
 801f9a6:	4604      	mov	r4, r0
 801f9a8:	4608      	mov	r0, r1
 801f9aa:	602b      	str	r3, [r5, #0]
 801f9ac:	f7e1 fa48 	bl	8000e40 <_isatty>
 801f9b0:	1c43      	adds	r3, r0, #1
 801f9b2:	d102      	bne.n	801f9ba <_isatty_r+0x1a>
 801f9b4:	682b      	ldr	r3, [r5, #0]
 801f9b6:	b103      	cbz	r3, 801f9ba <_isatty_r+0x1a>
 801f9b8:	6023      	str	r3, [r4, #0]
 801f9ba:	bd38      	pop	{r3, r4, r5, pc}
 801f9bc:	20000dec 	.word	0x20000dec

0801f9c0 <labs>:
 801f9c0:	2800      	cmp	r0, #0
 801f9c2:	bfb8      	it	lt
 801f9c4:	4240      	neglt	r0, r0
 801f9c6:	4770      	bx	lr

0801f9c8 <_lseek_r>:
 801f9c8:	b538      	push	{r3, r4, r5, lr}
 801f9ca:	4d07      	ldr	r5, [pc, #28]	; (801f9e8 <_lseek_r+0x20>)
 801f9cc:	4604      	mov	r4, r0
 801f9ce:	4608      	mov	r0, r1
 801f9d0:	4611      	mov	r1, r2
 801f9d2:	2200      	movs	r2, #0
 801f9d4:	602a      	str	r2, [r5, #0]
 801f9d6:	461a      	mov	r2, r3
 801f9d8:	f7e1 fa3d 	bl	8000e56 <_lseek>
 801f9dc:	1c43      	adds	r3, r0, #1
 801f9de:	d102      	bne.n	801f9e6 <_lseek_r+0x1e>
 801f9e0:	682b      	ldr	r3, [r5, #0]
 801f9e2:	b103      	cbz	r3, 801f9e6 <_lseek_r+0x1e>
 801f9e4:	6023      	str	r3, [r4, #0]
 801f9e6:	bd38      	pop	{r3, r4, r5, pc}
 801f9e8:	20000dec 	.word	0x20000dec

0801f9ec <__ascii_mbtowc>:
 801f9ec:	b082      	sub	sp, #8
 801f9ee:	b901      	cbnz	r1, 801f9f2 <__ascii_mbtowc+0x6>
 801f9f0:	a901      	add	r1, sp, #4
 801f9f2:	b142      	cbz	r2, 801fa06 <__ascii_mbtowc+0x1a>
 801f9f4:	b14b      	cbz	r3, 801fa0a <__ascii_mbtowc+0x1e>
 801f9f6:	7813      	ldrb	r3, [r2, #0]
 801f9f8:	600b      	str	r3, [r1, #0]
 801f9fa:	7812      	ldrb	r2, [r2, #0]
 801f9fc:	1e10      	subs	r0, r2, #0
 801f9fe:	bf18      	it	ne
 801fa00:	2001      	movne	r0, #1
 801fa02:	b002      	add	sp, #8
 801fa04:	4770      	bx	lr
 801fa06:	4610      	mov	r0, r2
 801fa08:	e7fb      	b.n	801fa02 <__ascii_mbtowc+0x16>
 801fa0a:	f06f 0001 	mvn.w	r0, #1
 801fa0e:	e7f8      	b.n	801fa02 <__ascii_mbtowc+0x16>

0801fa10 <__malloc_lock>:
 801fa10:	4801      	ldr	r0, [pc, #4]	; (801fa18 <__malloc_lock+0x8>)
 801fa12:	f7fe ba24 	b.w	801de5e <__retarget_lock_acquire_recursive>
 801fa16:	bf00      	nop
 801fa18:	20000de4 	.word	0x20000de4

0801fa1c <__malloc_unlock>:
 801fa1c:	4801      	ldr	r0, [pc, #4]	; (801fa24 <__malloc_unlock+0x8>)
 801fa1e:	f7fe ba20 	b.w	801de62 <__retarget_lock_release_recursive>
 801fa22:	bf00      	nop
 801fa24:	20000de4 	.word	0x20000de4

0801fa28 <_realloc_r>:
 801fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa2a:	4607      	mov	r7, r0
 801fa2c:	4614      	mov	r4, r2
 801fa2e:	460e      	mov	r6, r1
 801fa30:	b921      	cbnz	r1, 801fa3c <_realloc_r+0x14>
 801fa32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fa36:	4611      	mov	r1, r2
 801fa38:	f7fe bafe 	b.w	801e038 <_malloc_r>
 801fa3c:	b922      	cbnz	r2, 801fa48 <_realloc_r+0x20>
 801fa3e:	f7fe faab 	bl	801df98 <_free_r>
 801fa42:	4625      	mov	r5, r4
 801fa44:	4628      	mov	r0, r5
 801fa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa48:	f000 fd66 	bl	8020518 <_malloc_usable_size_r>
 801fa4c:	42a0      	cmp	r0, r4
 801fa4e:	d20f      	bcs.n	801fa70 <_realloc_r+0x48>
 801fa50:	4621      	mov	r1, r4
 801fa52:	4638      	mov	r0, r7
 801fa54:	f7fe faf0 	bl	801e038 <_malloc_r>
 801fa58:	4605      	mov	r5, r0
 801fa5a:	2800      	cmp	r0, #0
 801fa5c:	d0f2      	beq.n	801fa44 <_realloc_r+0x1c>
 801fa5e:	4631      	mov	r1, r6
 801fa60:	4622      	mov	r2, r4
 801fa62:	f7fe fa73 	bl	801df4c <memcpy>
 801fa66:	4631      	mov	r1, r6
 801fa68:	4638      	mov	r0, r7
 801fa6a:	f7fe fa95 	bl	801df98 <_free_r>
 801fa6e:	e7e9      	b.n	801fa44 <_realloc_r+0x1c>
 801fa70:	4635      	mov	r5, r6
 801fa72:	e7e7      	b.n	801fa44 <_realloc_r+0x1c>

0801fa74 <__ssputs_r>:
 801fa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa78:	688e      	ldr	r6, [r1, #8]
 801fa7a:	429e      	cmp	r6, r3
 801fa7c:	4682      	mov	sl, r0
 801fa7e:	460c      	mov	r4, r1
 801fa80:	4690      	mov	r8, r2
 801fa82:	461f      	mov	r7, r3
 801fa84:	d838      	bhi.n	801faf8 <__ssputs_r+0x84>
 801fa86:	898a      	ldrh	r2, [r1, #12]
 801fa88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fa8c:	d032      	beq.n	801faf4 <__ssputs_r+0x80>
 801fa8e:	6825      	ldr	r5, [r4, #0]
 801fa90:	6909      	ldr	r1, [r1, #16]
 801fa92:	eba5 0901 	sub.w	r9, r5, r1
 801fa96:	6965      	ldr	r5, [r4, #20]
 801fa98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fa9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801faa0:	3301      	adds	r3, #1
 801faa2:	444b      	add	r3, r9
 801faa4:	106d      	asrs	r5, r5, #1
 801faa6:	429d      	cmp	r5, r3
 801faa8:	bf38      	it	cc
 801faaa:	461d      	movcc	r5, r3
 801faac:	0553      	lsls	r3, r2, #21
 801faae:	d531      	bpl.n	801fb14 <__ssputs_r+0xa0>
 801fab0:	4629      	mov	r1, r5
 801fab2:	f7fe fac1 	bl	801e038 <_malloc_r>
 801fab6:	4606      	mov	r6, r0
 801fab8:	b950      	cbnz	r0, 801fad0 <__ssputs_r+0x5c>
 801faba:	230c      	movs	r3, #12
 801fabc:	f8ca 3000 	str.w	r3, [sl]
 801fac0:	89a3      	ldrh	r3, [r4, #12]
 801fac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fac6:	81a3      	strh	r3, [r4, #12]
 801fac8:	f04f 30ff 	mov.w	r0, #4294967295
 801facc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fad0:	6921      	ldr	r1, [r4, #16]
 801fad2:	464a      	mov	r2, r9
 801fad4:	f7fe fa3a 	bl	801df4c <memcpy>
 801fad8:	89a3      	ldrh	r3, [r4, #12]
 801fada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fae2:	81a3      	strh	r3, [r4, #12]
 801fae4:	6126      	str	r6, [r4, #16]
 801fae6:	6165      	str	r5, [r4, #20]
 801fae8:	444e      	add	r6, r9
 801faea:	eba5 0509 	sub.w	r5, r5, r9
 801faee:	6026      	str	r6, [r4, #0]
 801faf0:	60a5      	str	r5, [r4, #8]
 801faf2:	463e      	mov	r6, r7
 801faf4:	42be      	cmp	r6, r7
 801faf6:	d900      	bls.n	801fafa <__ssputs_r+0x86>
 801faf8:	463e      	mov	r6, r7
 801fafa:	4632      	mov	r2, r6
 801fafc:	6820      	ldr	r0, [r4, #0]
 801fafe:	4641      	mov	r1, r8
 801fb00:	f000 fcf0 	bl	80204e4 <memmove>
 801fb04:	68a3      	ldr	r3, [r4, #8]
 801fb06:	6822      	ldr	r2, [r4, #0]
 801fb08:	1b9b      	subs	r3, r3, r6
 801fb0a:	4432      	add	r2, r6
 801fb0c:	60a3      	str	r3, [r4, #8]
 801fb0e:	6022      	str	r2, [r4, #0]
 801fb10:	2000      	movs	r0, #0
 801fb12:	e7db      	b.n	801facc <__ssputs_r+0x58>
 801fb14:	462a      	mov	r2, r5
 801fb16:	f7ff ff87 	bl	801fa28 <_realloc_r>
 801fb1a:	4606      	mov	r6, r0
 801fb1c:	2800      	cmp	r0, #0
 801fb1e:	d1e1      	bne.n	801fae4 <__ssputs_r+0x70>
 801fb20:	6921      	ldr	r1, [r4, #16]
 801fb22:	4650      	mov	r0, sl
 801fb24:	f7fe fa38 	bl	801df98 <_free_r>
 801fb28:	e7c7      	b.n	801faba <__ssputs_r+0x46>
	...

0801fb2c <_svfiprintf_r>:
 801fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb30:	4698      	mov	r8, r3
 801fb32:	898b      	ldrh	r3, [r1, #12]
 801fb34:	061b      	lsls	r3, r3, #24
 801fb36:	b09d      	sub	sp, #116	; 0x74
 801fb38:	4607      	mov	r7, r0
 801fb3a:	460d      	mov	r5, r1
 801fb3c:	4614      	mov	r4, r2
 801fb3e:	d50e      	bpl.n	801fb5e <_svfiprintf_r+0x32>
 801fb40:	690b      	ldr	r3, [r1, #16]
 801fb42:	b963      	cbnz	r3, 801fb5e <_svfiprintf_r+0x32>
 801fb44:	2140      	movs	r1, #64	; 0x40
 801fb46:	f7fe fa77 	bl	801e038 <_malloc_r>
 801fb4a:	6028      	str	r0, [r5, #0]
 801fb4c:	6128      	str	r0, [r5, #16]
 801fb4e:	b920      	cbnz	r0, 801fb5a <_svfiprintf_r+0x2e>
 801fb50:	230c      	movs	r3, #12
 801fb52:	603b      	str	r3, [r7, #0]
 801fb54:	f04f 30ff 	mov.w	r0, #4294967295
 801fb58:	e0d1      	b.n	801fcfe <_svfiprintf_r+0x1d2>
 801fb5a:	2340      	movs	r3, #64	; 0x40
 801fb5c:	616b      	str	r3, [r5, #20]
 801fb5e:	2300      	movs	r3, #0
 801fb60:	9309      	str	r3, [sp, #36]	; 0x24
 801fb62:	2320      	movs	r3, #32
 801fb64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fb68:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb6c:	2330      	movs	r3, #48	; 0x30
 801fb6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fd18 <_svfiprintf_r+0x1ec>
 801fb72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fb76:	f04f 0901 	mov.w	r9, #1
 801fb7a:	4623      	mov	r3, r4
 801fb7c:	469a      	mov	sl, r3
 801fb7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fb82:	b10a      	cbz	r2, 801fb88 <_svfiprintf_r+0x5c>
 801fb84:	2a25      	cmp	r2, #37	; 0x25
 801fb86:	d1f9      	bne.n	801fb7c <_svfiprintf_r+0x50>
 801fb88:	ebba 0b04 	subs.w	fp, sl, r4
 801fb8c:	d00b      	beq.n	801fba6 <_svfiprintf_r+0x7a>
 801fb8e:	465b      	mov	r3, fp
 801fb90:	4622      	mov	r2, r4
 801fb92:	4629      	mov	r1, r5
 801fb94:	4638      	mov	r0, r7
 801fb96:	f7ff ff6d 	bl	801fa74 <__ssputs_r>
 801fb9a:	3001      	adds	r0, #1
 801fb9c:	f000 80aa 	beq.w	801fcf4 <_svfiprintf_r+0x1c8>
 801fba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fba2:	445a      	add	r2, fp
 801fba4:	9209      	str	r2, [sp, #36]	; 0x24
 801fba6:	f89a 3000 	ldrb.w	r3, [sl]
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	f000 80a2 	beq.w	801fcf4 <_svfiprintf_r+0x1c8>
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	f04f 32ff 	mov.w	r2, #4294967295
 801fbb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbba:	f10a 0a01 	add.w	sl, sl, #1
 801fbbe:	9304      	str	r3, [sp, #16]
 801fbc0:	9307      	str	r3, [sp, #28]
 801fbc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fbc6:	931a      	str	r3, [sp, #104]	; 0x68
 801fbc8:	4654      	mov	r4, sl
 801fbca:	2205      	movs	r2, #5
 801fbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbd0:	4851      	ldr	r0, [pc, #324]	; (801fd18 <_svfiprintf_r+0x1ec>)
 801fbd2:	f7e0 fb45 	bl	8000260 <memchr>
 801fbd6:	9a04      	ldr	r2, [sp, #16]
 801fbd8:	b9d8      	cbnz	r0, 801fc12 <_svfiprintf_r+0xe6>
 801fbda:	06d0      	lsls	r0, r2, #27
 801fbdc:	bf44      	itt	mi
 801fbde:	2320      	movmi	r3, #32
 801fbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fbe4:	0711      	lsls	r1, r2, #28
 801fbe6:	bf44      	itt	mi
 801fbe8:	232b      	movmi	r3, #43	; 0x2b
 801fbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fbee:	f89a 3000 	ldrb.w	r3, [sl]
 801fbf2:	2b2a      	cmp	r3, #42	; 0x2a
 801fbf4:	d015      	beq.n	801fc22 <_svfiprintf_r+0xf6>
 801fbf6:	9a07      	ldr	r2, [sp, #28]
 801fbf8:	4654      	mov	r4, sl
 801fbfa:	2000      	movs	r0, #0
 801fbfc:	f04f 0c0a 	mov.w	ip, #10
 801fc00:	4621      	mov	r1, r4
 801fc02:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc06:	3b30      	subs	r3, #48	; 0x30
 801fc08:	2b09      	cmp	r3, #9
 801fc0a:	d94e      	bls.n	801fcaa <_svfiprintf_r+0x17e>
 801fc0c:	b1b0      	cbz	r0, 801fc3c <_svfiprintf_r+0x110>
 801fc0e:	9207      	str	r2, [sp, #28]
 801fc10:	e014      	b.n	801fc3c <_svfiprintf_r+0x110>
 801fc12:	eba0 0308 	sub.w	r3, r0, r8
 801fc16:	fa09 f303 	lsl.w	r3, r9, r3
 801fc1a:	4313      	orrs	r3, r2
 801fc1c:	9304      	str	r3, [sp, #16]
 801fc1e:	46a2      	mov	sl, r4
 801fc20:	e7d2      	b.n	801fbc8 <_svfiprintf_r+0x9c>
 801fc22:	9b03      	ldr	r3, [sp, #12]
 801fc24:	1d19      	adds	r1, r3, #4
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	9103      	str	r1, [sp, #12]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	bfbb      	ittet	lt
 801fc2e:	425b      	neglt	r3, r3
 801fc30:	f042 0202 	orrlt.w	r2, r2, #2
 801fc34:	9307      	strge	r3, [sp, #28]
 801fc36:	9307      	strlt	r3, [sp, #28]
 801fc38:	bfb8      	it	lt
 801fc3a:	9204      	strlt	r2, [sp, #16]
 801fc3c:	7823      	ldrb	r3, [r4, #0]
 801fc3e:	2b2e      	cmp	r3, #46	; 0x2e
 801fc40:	d10c      	bne.n	801fc5c <_svfiprintf_r+0x130>
 801fc42:	7863      	ldrb	r3, [r4, #1]
 801fc44:	2b2a      	cmp	r3, #42	; 0x2a
 801fc46:	d135      	bne.n	801fcb4 <_svfiprintf_r+0x188>
 801fc48:	9b03      	ldr	r3, [sp, #12]
 801fc4a:	1d1a      	adds	r2, r3, #4
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	9203      	str	r2, [sp, #12]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	bfb8      	it	lt
 801fc54:	f04f 33ff 	movlt.w	r3, #4294967295
 801fc58:	3402      	adds	r4, #2
 801fc5a:	9305      	str	r3, [sp, #20]
 801fc5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fd28 <_svfiprintf_r+0x1fc>
 801fc60:	7821      	ldrb	r1, [r4, #0]
 801fc62:	2203      	movs	r2, #3
 801fc64:	4650      	mov	r0, sl
 801fc66:	f7e0 fafb 	bl	8000260 <memchr>
 801fc6a:	b140      	cbz	r0, 801fc7e <_svfiprintf_r+0x152>
 801fc6c:	2340      	movs	r3, #64	; 0x40
 801fc6e:	eba0 000a 	sub.w	r0, r0, sl
 801fc72:	fa03 f000 	lsl.w	r0, r3, r0
 801fc76:	9b04      	ldr	r3, [sp, #16]
 801fc78:	4303      	orrs	r3, r0
 801fc7a:	3401      	adds	r4, #1
 801fc7c:	9304      	str	r3, [sp, #16]
 801fc7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc82:	4826      	ldr	r0, [pc, #152]	; (801fd1c <_svfiprintf_r+0x1f0>)
 801fc84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fc88:	2206      	movs	r2, #6
 801fc8a:	f7e0 fae9 	bl	8000260 <memchr>
 801fc8e:	2800      	cmp	r0, #0
 801fc90:	d038      	beq.n	801fd04 <_svfiprintf_r+0x1d8>
 801fc92:	4b23      	ldr	r3, [pc, #140]	; (801fd20 <_svfiprintf_r+0x1f4>)
 801fc94:	bb1b      	cbnz	r3, 801fcde <_svfiprintf_r+0x1b2>
 801fc96:	9b03      	ldr	r3, [sp, #12]
 801fc98:	3307      	adds	r3, #7
 801fc9a:	f023 0307 	bic.w	r3, r3, #7
 801fc9e:	3308      	adds	r3, #8
 801fca0:	9303      	str	r3, [sp, #12]
 801fca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fca4:	4433      	add	r3, r6
 801fca6:	9309      	str	r3, [sp, #36]	; 0x24
 801fca8:	e767      	b.n	801fb7a <_svfiprintf_r+0x4e>
 801fcaa:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcae:	460c      	mov	r4, r1
 801fcb0:	2001      	movs	r0, #1
 801fcb2:	e7a5      	b.n	801fc00 <_svfiprintf_r+0xd4>
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	3401      	adds	r4, #1
 801fcb8:	9305      	str	r3, [sp, #20]
 801fcba:	4619      	mov	r1, r3
 801fcbc:	f04f 0c0a 	mov.w	ip, #10
 801fcc0:	4620      	mov	r0, r4
 801fcc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fcc6:	3a30      	subs	r2, #48	; 0x30
 801fcc8:	2a09      	cmp	r2, #9
 801fcca:	d903      	bls.n	801fcd4 <_svfiprintf_r+0x1a8>
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d0c5      	beq.n	801fc5c <_svfiprintf_r+0x130>
 801fcd0:	9105      	str	r1, [sp, #20]
 801fcd2:	e7c3      	b.n	801fc5c <_svfiprintf_r+0x130>
 801fcd4:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcd8:	4604      	mov	r4, r0
 801fcda:	2301      	movs	r3, #1
 801fcdc:	e7f0      	b.n	801fcc0 <_svfiprintf_r+0x194>
 801fcde:	ab03      	add	r3, sp, #12
 801fce0:	9300      	str	r3, [sp, #0]
 801fce2:	462a      	mov	r2, r5
 801fce4:	4b0f      	ldr	r3, [pc, #60]	; (801fd24 <_svfiprintf_r+0x1f8>)
 801fce6:	a904      	add	r1, sp, #16
 801fce8:	4638      	mov	r0, r7
 801fcea:	f3af 8000 	nop.w
 801fcee:	1c42      	adds	r2, r0, #1
 801fcf0:	4606      	mov	r6, r0
 801fcf2:	d1d6      	bne.n	801fca2 <_svfiprintf_r+0x176>
 801fcf4:	89ab      	ldrh	r3, [r5, #12]
 801fcf6:	065b      	lsls	r3, r3, #25
 801fcf8:	f53f af2c 	bmi.w	801fb54 <_svfiprintf_r+0x28>
 801fcfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fcfe:	b01d      	add	sp, #116	; 0x74
 801fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd04:	ab03      	add	r3, sp, #12
 801fd06:	9300      	str	r3, [sp, #0]
 801fd08:	462a      	mov	r2, r5
 801fd0a:	4b06      	ldr	r3, [pc, #24]	; (801fd24 <_svfiprintf_r+0x1f8>)
 801fd0c:	a904      	add	r1, sp, #16
 801fd0e:	4638      	mov	r0, r7
 801fd10:	f000 f9d4 	bl	80200bc <_printf_i>
 801fd14:	e7eb      	b.n	801fcee <_svfiprintf_r+0x1c2>
 801fd16:	bf00      	nop
 801fd18:	080262c3 	.word	0x080262c3
 801fd1c:	080262cd 	.word	0x080262cd
 801fd20:	00000000 	.word	0x00000000
 801fd24:	0801fa75 	.word	0x0801fa75
 801fd28:	080262c9 	.word	0x080262c9

0801fd2c <__sfputc_r>:
 801fd2c:	6893      	ldr	r3, [r2, #8]
 801fd2e:	3b01      	subs	r3, #1
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	b410      	push	{r4}
 801fd34:	6093      	str	r3, [r2, #8]
 801fd36:	da08      	bge.n	801fd4a <__sfputc_r+0x1e>
 801fd38:	6994      	ldr	r4, [r2, #24]
 801fd3a:	42a3      	cmp	r3, r4
 801fd3c:	db01      	blt.n	801fd42 <__sfputc_r+0x16>
 801fd3e:	290a      	cmp	r1, #10
 801fd40:	d103      	bne.n	801fd4a <__sfputc_r+0x1e>
 801fd42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd46:	f7ff bb75 	b.w	801f434 <__swbuf_r>
 801fd4a:	6813      	ldr	r3, [r2, #0]
 801fd4c:	1c58      	adds	r0, r3, #1
 801fd4e:	6010      	str	r0, [r2, #0]
 801fd50:	7019      	strb	r1, [r3, #0]
 801fd52:	4608      	mov	r0, r1
 801fd54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd58:	4770      	bx	lr

0801fd5a <__sfputs_r>:
 801fd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd5c:	4606      	mov	r6, r0
 801fd5e:	460f      	mov	r7, r1
 801fd60:	4614      	mov	r4, r2
 801fd62:	18d5      	adds	r5, r2, r3
 801fd64:	42ac      	cmp	r4, r5
 801fd66:	d101      	bne.n	801fd6c <__sfputs_r+0x12>
 801fd68:	2000      	movs	r0, #0
 801fd6a:	e007      	b.n	801fd7c <__sfputs_r+0x22>
 801fd6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd70:	463a      	mov	r2, r7
 801fd72:	4630      	mov	r0, r6
 801fd74:	f7ff ffda 	bl	801fd2c <__sfputc_r>
 801fd78:	1c43      	adds	r3, r0, #1
 801fd7a:	d1f3      	bne.n	801fd64 <__sfputs_r+0xa>
 801fd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fd80 <_vfiprintf_r>:
 801fd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd84:	460d      	mov	r5, r1
 801fd86:	b09d      	sub	sp, #116	; 0x74
 801fd88:	4614      	mov	r4, r2
 801fd8a:	4698      	mov	r8, r3
 801fd8c:	4606      	mov	r6, r0
 801fd8e:	b118      	cbz	r0, 801fd98 <_vfiprintf_r+0x18>
 801fd90:	6983      	ldr	r3, [r0, #24]
 801fd92:	b90b      	cbnz	r3, 801fd98 <_vfiprintf_r+0x18>
 801fd94:	f7fd fcb0 	bl	801d6f8 <__sinit>
 801fd98:	4b89      	ldr	r3, [pc, #548]	; (801ffc0 <_vfiprintf_r+0x240>)
 801fd9a:	429d      	cmp	r5, r3
 801fd9c:	d11b      	bne.n	801fdd6 <_vfiprintf_r+0x56>
 801fd9e:	6875      	ldr	r5, [r6, #4]
 801fda0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fda2:	07d9      	lsls	r1, r3, #31
 801fda4:	d405      	bmi.n	801fdb2 <_vfiprintf_r+0x32>
 801fda6:	89ab      	ldrh	r3, [r5, #12]
 801fda8:	059a      	lsls	r2, r3, #22
 801fdaa:	d402      	bmi.n	801fdb2 <_vfiprintf_r+0x32>
 801fdac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fdae:	f7fe f856 	bl	801de5e <__retarget_lock_acquire_recursive>
 801fdb2:	89ab      	ldrh	r3, [r5, #12]
 801fdb4:	071b      	lsls	r3, r3, #28
 801fdb6:	d501      	bpl.n	801fdbc <_vfiprintf_r+0x3c>
 801fdb8:	692b      	ldr	r3, [r5, #16]
 801fdba:	b9eb      	cbnz	r3, 801fdf8 <_vfiprintf_r+0x78>
 801fdbc:	4629      	mov	r1, r5
 801fdbe:	4630      	mov	r0, r6
 801fdc0:	f7ff fb9c 	bl	801f4fc <__swsetup_r>
 801fdc4:	b1c0      	cbz	r0, 801fdf8 <_vfiprintf_r+0x78>
 801fdc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fdc8:	07dc      	lsls	r4, r3, #31
 801fdca:	d50e      	bpl.n	801fdea <_vfiprintf_r+0x6a>
 801fdcc:	f04f 30ff 	mov.w	r0, #4294967295
 801fdd0:	b01d      	add	sp, #116	; 0x74
 801fdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdd6:	4b7b      	ldr	r3, [pc, #492]	; (801ffc4 <_vfiprintf_r+0x244>)
 801fdd8:	429d      	cmp	r5, r3
 801fdda:	d101      	bne.n	801fde0 <_vfiprintf_r+0x60>
 801fddc:	68b5      	ldr	r5, [r6, #8]
 801fdde:	e7df      	b.n	801fda0 <_vfiprintf_r+0x20>
 801fde0:	4b79      	ldr	r3, [pc, #484]	; (801ffc8 <_vfiprintf_r+0x248>)
 801fde2:	429d      	cmp	r5, r3
 801fde4:	bf08      	it	eq
 801fde6:	68f5      	ldreq	r5, [r6, #12]
 801fde8:	e7da      	b.n	801fda0 <_vfiprintf_r+0x20>
 801fdea:	89ab      	ldrh	r3, [r5, #12]
 801fdec:	0598      	lsls	r0, r3, #22
 801fdee:	d4ed      	bmi.n	801fdcc <_vfiprintf_r+0x4c>
 801fdf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fdf2:	f7fe f836 	bl	801de62 <__retarget_lock_release_recursive>
 801fdf6:	e7e9      	b.n	801fdcc <_vfiprintf_r+0x4c>
 801fdf8:	2300      	movs	r3, #0
 801fdfa:	9309      	str	r3, [sp, #36]	; 0x24
 801fdfc:	2320      	movs	r3, #32
 801fdfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fe02:	f8cd 800c 	str.w	r8, [sp, #12]
 801fe06:	2330      	movs	r3, #48	; 0x30
 801fe08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ffcc <_vfiprintf_r+0x24c>
 801fe0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fe10:	f04f 0901 	mov.w	r9, #1
 801fe14:	4623      	mov	r3, r4
 801fe16:	469a      	mov	sl, r3
 801fe18:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe1c:	b10a      	cbz	r2, 801fe22 <_vfiprintf_r+0xa2>
 801fe1e:	2a25      	cmp	r2, #37	; 0x25
 801fe20:	d1f9      	bne.n	801fe16 <_vfiprintf_r+0x96>
 801fe22:	ebba 0b04 	subs.w	fp, sl, r4
 801fe26:	d00b      	beq.n	801fe40 <_vfiprintf_r+0xc0>
 801fe28:	465b      	mov	r3, fp
 801fe2a:	4622      	mov	r2, r4
 801fe2c:	4629      	mov	r1, r5
 801fe2e:	4630      	mov	r0, r6
 801fe30:	f7ff ff93 	bl	801fd5a <__sfputs_r>
 801fe34:	3001      	adds	r0, #1
 801fe36:	f000 80aa 	beq.w	801ff8e <_vfiprintf_r+0x20e>
 801fe3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe3c:	445a      	add	r2, fp
 801fe3e:	9209      	str	r2, [sp, #36]	; 0x24
 801fe40:	f89a 3000 	ldrb.w	r3, [sl]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	f000 80a2 	beq.w	801ff8e <_vfiprintf_r+0x20e>
 801fe4a:	2300      	movs	r3, #0
 801fe4c:	f04f 32ff 	mov.w	r2, #4294967295
 801fe50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fe54:	f10a 0a01 	add.w	sl, sl, #1
 801fe58:	9304      	str	r3, [sp, #16]
 801fe5a:	9307      	str	r3, [sp, #28]
 801fe5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fe60:	931a      	str	r3, [sp, #104]	; 0x68
 801fe62:	4654      	mov	r4, sl
 801fe64:	2205      	movs	r2, #5
 801fe66:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe6a:	4858      	ldr	r0, [pc, #352]	; (801ffcc <_vfiprintf_r+0x24c>)
 801fe6c:	f7e0 f9f8 	bl	8000260 <memchr>
 801fe70:	9a04      	ldr	r2, [sp, #16]
 801fe72:	b9d8      	cbnz	r0, 801feac <_vfiprintf_r+0x12c>
 801fe74:	06d1      	lsls	r1, r2, #27
 801fe76:	bf44      	itt	mi
 801fe78:	2320      	movmi	r3, #32
 801fe7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fe7e:	0713      	lsls	r3, r2, #28
 801fe80:	bf44      	itt	mi
 801fe82:	232b      	movmi	r3, #43	; 0x2b
 801fe84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fe88:	f89a 3000 	ldrb.w	r3, [sl]
 801fe8c:	2b2a      	cmp	r3, #42	; 0x2a
 801fe8e:	d015      	beq.n	801febc <_vfiprintf_r+0x13c>
 801fe90:	9a07      	ldr	r2, [sp, #28]
 801fe92:	4654      	mov	r4, sl
 801fe94:	2000      	movs	r0, #0
 801fe96:	f04f 0c0a 	mov.w	ip, #10
 801fe9a:	4621      	mov	r1, r4
 801fe9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fea0:	3b30      	subs	r3, #48	; 0x30
 801fea2:	2b09      	cmp	r3, #9
 801fea4:	d94e      	bls.n	801ff44 <_vfiprintf_r+0x1c4>
 801fea6:	b1b0      	cbz	r0, 801fed6 <_vfiprintf_r+0x156>
 801fea8:	9207      	str	r2, [sp, #28]
 801feaa:	e014      	b.n	801fed6 <_vfiprintf_r+0x156>
 801feac:	eba0 0308 	sub.w	r3, r0, r8
 801feb0:	fa09 f303 	lsl.w	r3, r9, r3
 801feb4:	4313      	orrs	r3, r2
 801feb6:	9304      	str	r3, [sp, #16]
 801feb8:	46a2      	mov	sl, r4
 801feba:	e7d2      	b.n	801fe62 <_vfiprintf_r+0xe2>
 801febc:	9b03      	ldr	r3, [sp, #12]
 801febe:	1d19      	adds	r1, r3, #4
 801fec0:	681b      	ldr	r3, [r3, #0]
 801fec2:	9103      	str	r1, [sp, #12]
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	bfbb      	ittet	lt
 801fec8:	425b      	neglt	r3, r3
 801feca:	f042 0202 	orrlt.w	r2, r2, #2
 801fece:	9307      	strge	r3, [sp, #28]
 801fed0:	9307      	strlt	r3, [sp, #28]
 801fed2:	bfb8      	it	lt
 801fed4:	9204      	strlt	r2, [sp, #16]
 801fed6:	7823      	ldrb	r3, [r4, #0]
 801fed8:	2b2e      	cmp	r3, #46	; 0x2e
 801feda:	d10c      	bne.n	801fef6 <_vfiprintf_r+0x176>
 801fedc:	7863      	ldrb	r3, [r4, #1]
 801fede:	2b2a      	cmp	r3, #42	; 0x2a
 801fee0:	d135      	bne.n	801ff4e <_vfiprintf_r+0x1ce>
 801fee2:	9b03      	ldr	r3, [sp, #12]
 801fee4:	1d1a      	adds	r2, r3, #4
 801fee6:	681b      	ldr	r3, [r3, #0]
 801fee8:	9203      	str	r2, [sp, #12]
 801feea:	2b00      	cmp	r3, #0
 801feec:	bfb8      	it	lt
 801feee:	f04f 33ff 	movlt.w	r3, #4294967295
 801fef2:	3402      	adds	r4, #2
 801fef4:	9305      	str	r3, [sp, #20]
 801fef6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ffdc <_vfiprintf_r+0x25c>
 801fefa:	7821      	ldrb	r1, [r4, #0]
 801fefc:	2203      	movs	r2, #3
 801fefe:	4650      	mov	r0, sl
 801ff00:	f7e0 f9ae 	bl	8000260 <memchr>
 801ff04:	b140      	cbz	r0, 801ff18 <_vfiprintf_r+0x198>
 801ff06:	2340      	movs	r3, #64	; 0x40
 801ff08:	eba0 000a 	sub.w	r0, r0, sl
 801ff0c:	fa03 f000 	lsl.w	r0, r3, r0
 801ff10:	9b04      	ldr	r3, [sp, #16]
 801ff12:	4303      	orrs	r3, r0
 801ff14:	3401      	adds	r4, #1
 801ff16:	9304      	str	r3, [sp, #16]
 801ff18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff1c:	482c      	ldr	r0, [pc, #176]	; (801ffd0 <_vfiprintf_r+0x250>)
 801ff1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ff22:	2206      	movs	r2, #6
 801ff24:	f7e0 f99c 	bl	8000260 <memchr>
 801ff28:	2800      	cmp	r0, #0
 801ff2a:	d03f      	beq.n	801ffac <_vfiprintf_r+0x22c>
 801ff2c:	4b29      	ldr	r3, [pc, #164]	; (801ffd4 <_vfiprintf_r+0x254>)
 801ff2e:	bb1b      	cbnz	r3, 801ff78 <_vfiprintf_r+0x1f8>
 801ff30:	9b03      	ldr	r3, [sp, #12]
 801ff32:	3307      	adds	r3, #7
 801ff34:	f023 0307 	bic.w	r3, r3, #7
 801ff38:	3308      	adds	r3, #8
 801ff3a:	9303      	str	r3, [sp, #12]
 801ff3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff3e:	443b      	add	r3, r7
 801ff40:	9309      	str	r3, [sp, #36]	; 0x24
 801ff42:	e767      	b.n	801fe14 <_vfiprintf_r+0x94>
 801ff44:	fb0c 3202 	mla	r2, ip, r2, r3
 801ff48:	460c      	mov	r4, r1
 801ff4a:	2001      	movs	r0, #1
 801ff4c:	e7a5      	b.n	801fe9a <_vfiprintf_r+0x11a>
 801ff4e:	2300      	movs	r3, #0
 801ff50:	3401      	adds	r4, #1
 801ff52:	9305      	str	r3, [sp, #20]
 801ff54:	4619      	mov	r1, r3
 801ff56:	f04f 0c0a 	mov.w	ip, #10
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ff60:	3a30      	subs	r2, #48	; 0x30
 801ff62:	2a09      	cmp	r2, #9
 801ff64:	d903      	bls.n	801ff6e <_vfiprintf_r+0x1ee>
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d0c5      	beq.n	801fef6 <_vfiprintf_r+0x176>
 801ff6a:	9105      	str	r1, [sp, #20]
 801ff6c:	e7c3      	b.n	801fef6 <_vfiprintf_r+0x176>
 801ff6e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ff72:	4604      	mov	r4, r0
 801ff74:	2301      	movs	r3, #1
 801ff76:	e7f0      	b.n	801ff5a <_vfiprintf_r+0x1da>
 801ff78:	ab03      	add	r3, sp, #12
 801ff7a:	9300      	str	r3, [sp, #0]
 801ff7c:	462a      	mov	r2, r5
 801ff7e:	4b16      	ldr	r3, [pc, #88]	; (801ffd8 <_vfiprintf_r+0x258>)
 801ff80:	a904      	add	r1, sp, #16
 801ff82:	4630      	mov	r0, r6
 801ff84:	f3af 8000 	nop.w
 801ff88:	4607      	mov	r7, r0
 801ff8a:	1c78      	adds	r0, r7, #1
 801ff8c:	d1d6      	bne.n	801ff3c <_vfiprintf_r+0x1bc>
 801ff8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff90:	07d9      	lsls	r1, r3, #31
 801ff92:	d405      	bmi.n	801ffa0 <_vfiprintf_r+0x220>
 801ff94:	89ab      	ldrh	r3, [r5, #12]
 801ff96:	059a      	lsls	r2, r3, #22
 801ff98:	d402      	bmi.n	801ffa0 <_vfiprintf_r+0x220>
 801ff9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff9c:	f7fd ff61 	bl	801de62 <__retarget_lock_release_recursive>
 801ffa0:	89ab      	ldrh	r3, [r5, #12]
 801ffa2:	065b      	lsls	r3, r3, #25
 801ffa4:	f53f af12 	bmi.w	801fdcc <_vfiprintf_r+0x4c>
 801ffa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ffaa:	e711      	b.n	801fdd0 <_vfiprintf_r+0x50>
 801ffac:	ab03      	add	r3, sp, #12
 801ffae:	9300      	str	r3, [sp, #0]
 801ffb0:	462a      	mov	r2, r5
 801ffb2:	4b09      	ldr	r3, [pc, #36]	; (801ffd8 <_vfiprintf_r+0x258>)
 801ffb4:	a904      	add	r1, sp, #16
 801ffb6:	4630      	mov	r0, r6
 801ffb8:	f000 f880 	bl	80200bc <_printf_i>
 801ffbc:	e7e4      	b.n	801ff88 <_vfiprintf_r+0x208>
 801ffbe:	bf00      	nop
 801ffc0:	08025d44 	.word	0x08025d44
 801ffc4:	08025d64 	.word	0x08025d64
 801ffc8:	08025d24 	.word	0x08025d24
 801ffcc:	080262c3 	.word	0x080262c3
 801ffd0:	080262cd 	.word	0x080262cd
 801ffd4:	00000000 	.word	0x00000000
 801ffd8:	0801fd5b 	.word	0x0801fd5b
 801ffdc:	080262c9 	.word	0x080262c9

0801ffe0 <_printf_common>:
 801ffe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffe4:	4616      	mov	r6, r2
 801ffe6:	4699      	mov	r9, r3
 801ffe8:	688a      	ldr	r2, [r1, #8]
 801ffea:	690b      	ldr	r3, [r1, #16]
 801ffec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fff0:	4293      	cmp	r3, r2
 801fff2:	bfb8      	it	lt
 801fff4:	4613      	movlt	r3, r2
 801fff6:	6033      	str	r3, [r6, #0]
 801fff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fffc:	4607      	mov	r7, r0
 801fffe:	460c      	mov	r4, r1
 8020000:	b10a      	cbz	r2, 8020006 <_printf_common+0x26>
 8020002:	3301      	adds	r3, #1
 8020004:	6033      	str	r3, [r6, #0]
 8020006:	6823      	ldr	r3, [r4, #0]
 8020008:	0699      	lsls	r1, r3, #26
 802000a:	bf42      	ittt	mi
 802000c:	6833      	ldrmi	r3, [r6, #0]
 802000e:	3302      	addmi	r3, #2
 8020010:	6033      	strmi	r3, [r6, #0]
 8020012:	6825      	ldr	r5, [r4, #0]
 8020014:	f015 0506 	ands.w	r5, r5, #6
 8020018:	d106      	bne.n	8020028 <_printf_common+0x48>
 802001a:	f104 0a19 	add.w	sl, r4, #25
 802001e:	68e3      	ldr	r3, [r4, #12]
 8020020:	6832      	ldr	r2, [r6, #0]
 8020022:	1a9b      	subs	r3, r3, r2
 8020024:	42ab      	cmp	r3, r5
 8020026:	dc26      	bgt.n	8020076 <_printf_common+0x96>
 8020028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802002c:	1e13      	subs	r3, r2, #0
 802002e:	6822      	ldr	r2, [r4, #0]
 8020030:	bf18      	it	ne
 8020032:	2301      	movne	r3, #1
 8020034:	0692      	lsls	r2, r2, #26
 8020036:	d42b      	bmi.n	8020090 <_printf_common+0xb0>
 8020038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802003c:	4649      	mov	r1, r9
 802003e:	4638      	mov	r0, r7
 8020040:	47c0      	blx	r8
 8020042:	3001      	adds	r0, #1
 8020044:	d01e      	beq.n	8020084 <_printf_common+0xa4>
 8020046:	6823      	ldr	r3, [r4, #0]
 8020048:	68e5      	ldr	r5, [r4, #12]
 802004a:	6832      	ldr	r2, [r6, #0]
 802004c:	f003 0306 	and.w	r3, r3, #6
 8020050:	2b04      	cmp	r3, #4
 8020052:	bf08      	it	eq
 8020054:	1aad      	subeq	r5, r5, r2
 8020056:	68a3      	ldr	r3, [r4, #8]
 8020058:	6922      	ldr	r2, [r4, #16]
 802005a:	bf0c      	ite	eq
 802005c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020060:	2500      	movne	r5, #0
 8020062:	4293      	cmp	r3, r2
 8020064:	bfc4      	itt	gt
 8020066:	1a9b      	subgt	r3, r3, r2
 8020068:	18ed      	addgt	r5, r5, r3
 802006a:	2600      	movs	r6, #0
 802006c:	341a      	adds	r4, #26
 802006e:	42b5      	cmp	r5, r6
 8020070:	d11a      	bne.n	80200a8 <_printf_common+0xc8>
 8020072:	2000      	movs	r0, #0
 8020074:	e008      	b.n	8020088 <_printf_common+0xa8>
 8020076:	2301      	movs	r3, #1
 8020078:	4652      	mov	r2, sl
 802007a:	4649      	mov	r1, r9
 802007c:	4638      	mov	r0, r7
 802007e:	47c0      	blx	r8
 8020080:	3001      	adds	r0, #1
 8020082:	d103      	bne.n	802008c <_printf_common+0xac>
 8020084:	f04f 30ff 	mov.w	r0, #4294967295
 8020088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802008c:	3501      	adds	r5, #1
 802008e:	e7c6      	b.n	802001e <_printf_common+0x3e>
 8020090:	18e1      	adds	r1, r4, r3
 8020092:	1c5a      	adds	r2, r3, #1
 8020094:	2030      	movs	r0, #48	; 0x30
 8020096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802009a:	4422      	add	r2, r4
 802009c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80200a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80200a4:	3302      	adds	r3, #2
 80200a6:	e7c7      	b.n	8020038 <_printf_common+0x58>
 80200a8:	2301      	movs	r3, #1
 80200aa:	4622      	mov	r2, r4
 80200ac:	4649      	mov	r1, r9
 80200ae:	4638      	mov	r0, r7
 80200b0:	47c0      	blx	r8
 80200b2:	3001      	adds	r0, #1
 80200b4:	d0e6      	beq.n	8020084 <_printf_common+0xa4>
 80200b6:	3601      	adds	r6, #1
 80200b8:	e7d9      	b.n	802006e <_printf_common+0x8e>
	...

080200bc <_printf_i>:
 80200bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80200c0:	460c      	mov	r4, r1
 80200c2:	4691      	mov	r9, r2
 80200c4:	7e27      	ldrb	r7, [r4, #24]
 80200c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80200c8:	2f78      	cmp	r7, #120	; 0x78
 80200ca:	4680      	mov	r8, r0
 80200cc:	469a      	mov	sl, r3
 80200ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80200d2:	d807      	bhi.n	80200e4 <_printf_i+0x28>
 80200d4:	2f62      	cmp	r7, #98	; 0x62
 80200d6:	d80a      	bhi.n	80200ee <_printf_i+0x32>
 80200d8:	2f00      	cmp	r7, #0
 80200da:	f000 80d8 	beq.w	802028e <_printf_i+0x1d2>
 80200de:	2f58      	cmp	r7, #88	; 0x58
 80200e0:	f000 80a3 	beq.w	802022a <_printf_i+0x16e>
 80200e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80200e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80200ec:	e03a      	b.n	8020164 <_printf_i+0xa8>
 80200ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80200f2:	2b15      	cmp	r3, #21
 80200f4:	d8f6      	bhi.n	80200e4 <_printf_i+0x28>
 80200f6:	a001      	add	r0, pc, #4	; (adr r0, 80200fc <_printf_i+0x40>)
 80200f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80200fc:	08020155 	.word	0x08020155
 8020100:	08020169 	.word	0x08020169
 8020104:	080200e5 	.word	0x080200e5
 8020108:	080200e5 	.word	0x080200e5
 802010c:	080200e5 	.word	0x080200e5
 8020110:	080200e5 	.word	0x080200e5
 8020114:	08020169 	.word	0x08020169
 8020118:	080200e5 	.word	0x080200e5
 802011c:	080200e5 	.word	0x080200e5
 8020120:	080200e5 	.word	0x080200e5
 8020124:	080200e5 	.word	0x080200e5
 8020128:	08020275 	.word	0x08020275
 802012c:	08020199 	.word	0x08020199
 8020130:	08020257 	.word	0x08020257
 8020134:	080200e5 	.word	0x080200e5
 8020138:	080200e5 	.word	0x080200e5
 802013c:	08020297 	.word	0x08020297
 8020140:	080200e5 	.word	0x080200e5
 8020144:	08020199 	.word	0x08020199
 8020148:	080200e5 	.word	0x080200e5
 802014c:	080200e5 	.word	0x080200e5
 8020150:	0802025f 	.word	0x0802025f
 8020154:	680b      	ldr	r3, [r1, #0]
 8020156:	1d1a      	adds	r2, r3, #4
 8020158:	681b      	ldr	r3, [r3, #0]
 802015a:	600a      	str	r2, [r1, #0]
 802015c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020164:	2301      	movs	r3, #1
 8020166:	e0a3      	b.n	80202b0 <_printf_i+0x1f4>
 8020168:	6825      	ldr	r5, [r4, #0]
 802016a:	6808      	ldr	r0, [r1, #0]
 802016c:	062e      	lsls	r6, r5, #24
 802016e:	f100 0304 	add.w	r3, r0, #4
 8020172:	d50a      	bpl.n	802018a <_printf_i+0xce>
 8020174:	6805      	ldr	r5, [r0, #0]
 8020176:	600b      	str	r3, [r1, #0]
 8020178:	2d00      	cmp	r5, #0
 802017a:	da03      	bge.n	8020184 <_printf_i+0xc8>
 802017c:	232d      	movs	r3, #45	; 0x2d
 802017e:	426d      	negs	r5, r5
 8020180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020184:	485e      	ldr	r0, [pc, #376]	; (8020300 <_printf_i+0x244>)
 8020186:	230a      	movs	r3, #10
 8020188:	e019      	b.n	80201be <_printf_i+0x102>
 802018a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802018e:	6805      	ldr	r5, [r0, #0]
 8020190:	600b      	str	r3, [r1, #0]
 8020192:	bf18      	it	ne
 8020194:	b22d      	sxthne	r5, r5
 8020196:	e7ef      	b.n	8020178 <_printf_i+0xbc>
 8020198:	680b      	ldr	r3, [r1, #0]
 802019a:	6825      	ldr	r5, [r4, #0]
 802019c:	1d18      	adds	r0, r3, #4
 802019e:	6008      	str	r0, [r1, #0]
 80201a0:	0628      	lsls	r0, r5, #24
 80201a2:	d501      	bpl.n	80201a8 <_printf_i+0xec>
 80201a4:	681d      	ldr	r5, [r3, #0]
 80201a6:	e002      	b.n	80201ae <_printf_i+0xf2>
 80201a8:	0669      	lsls	r1, r5, #25
 80201aa:	d5fb      	bpl.n	80201a4 <_printf_i+0xe8>
 80201ac:	881d      	ldrh	r5, [r3, #0]
 80201ae:	4854      	ldr	r0, [pc, #336]	; (8020300 <_printf_i+0x244>)
 80201b0:	2f6f      	cmp	r7, #111	; 0x6f
 80201b2:	bf0c      	ite	eq
 80201b4:	2308      	moveq	r3, #8
 80201b6:	230a      	movne	r3, #10
 80201b8:	2100      	movs	r1, #0
 80201ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80201be:	6866      	ldr	r6, [r4, #4]
 80201c0:	60a6      	str	r6, [r4, #8]
 80201c2:	2e00      	cmp	r6, #0
 80201c4:	bfa2      	ittt	ge
 80201c6:	6821      	ldrge	r1, [r4, #0]
 80201c8:	f021 0104 	bicge.w	r1, r1, #4
 80201cc:	6021      	strge	r1, [r4, #0]
 80201ce:	b90d      	cbnz	r5, 80201d4 <_printf_i+0x118>
 80201d0:	2e00      	cmp	r6, #0
 80201d2:	d04d      	beq.n	8020270 <_printf_i+0x1b4>
 80201d4:	4616      	mov	r6, r2
 80201d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80201da:	fb03 5711 	mls	r7, r3, r1, r5
 80201de:	5dc7      	ldrb	r7, [r0, r7]
 80201e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80201e4:	462f      	mov	r7, r5
 80201e6:	42bb      	cmp	r3, r7
 80201e8:	460d      	mov	r5, r1
 80201ea:	d9f4      	bls.n	80201d6 <_printf_i+0x11a>
 80201ec:	2b08      	cmp	r3, #8
 80201ee:	d10b      	bne.n	8020208 <_printf_i+0x14c>
 80201f0:	6823      	ldr	r3, [r4, #0]
 80201f2:	07df      	lsls	r7, r3, #31
 80201f4:	d508      	bpl.n	8020208 <_printf_i+0x14c>
 80201f6:	6923      	ldr	r3, [r4, #16]
 80201f8:	6861      	ldr	r1, [r4, #4]
 80201fa:	4299      	cmp	r1, r3
 80201fc:	bfde      	ittt	le
 80201fe:	2330      	movle	r3, #48	; 0x30
 8020200:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020204:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020208:	1b92      	subs	r2, r2, r6
 802020a:	6122      	str	r2, [r4, #16]
 802020c:	f8cd a000 	str.w	sl, [sp]
 8020210:	464b      	mov	r3, r9
 8020212:	aa03      	add	r2, sp, #12
 8020214:	4621      	mov	r1, r4
 8020216:	4640      	mov	r0, r8
 8020218:	f7ff fee2 	bl	801ffe0 <_printf_common>
 802021c:	3001      	adds	r0, #1
 802021e:	d14c      	bne.n	80202ba <_printf_i+0x1fe>
 8020220:	f04f 30ff 	mov.w	r0, #4294967295
 8020224:	b004      	add	sp, #16
 8020226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802022a:	4835      	ldr	r0, [pc, #212]	; (8020300 <_printf_i+0x244>)
 802022c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020230:	6823      	ldr	r3, [r4, #0]
 8020232:	680e      	ldr	r6, [r1, #0]
 8020234:	061f      	lsls	r7, r3, #24
 8020236:	f856 5b04 	ldr.w	r5, [r6], #4
 802023a:	600e      	str	r6, [r1, #0]
 802023c:	d514      	bpl.n	8020268 <_printf_i+0x1ac>
 802023e:	07d9      	lsls	r1, r3, #31
 8020240:	bf44      	itt	mi
 8020242:	f043 0320 	orrmi.w	r3, r3, #32
 8020246:	6023      	strmi	r3, [r4, #0]
 8020248:	b91d      	cbnz	r5, 8020252 <_printf_i+0x196>
 802024a:	6823      	ldr	r3, [r4, #0]
 802024c:	f023 0320 	bic.w	r3, r3, #32
 8020250:	6023      	str	r3, [r4, #0]
 8020252:	2310      	movs	r3, #16
 8020254:	e7b0      	b.n	80201b8 <_printf_i+0xfc>
 8020256:	6823      	ldr	r3, [r4, #0]
 8020258:	f043 0320 	orr.w	r3, r3, #32
 802025c:	6023      	str	r3, [r4, #0]
 802025e:	2378      	movs	r3, #120	; 0x78
 8020260:	4828      	ldr	r0, [pc, #160]	; (8020304 <_printf_i+0x248>)
 8020262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020266:	e7e3      	b.n	8020230 <_printf_i+0x174>
 8020268:	065e      	lsls	r6, r3, #25
 802026a:	bf48      	it	mi
 802026c:	b2ad      	uxthmi	r5, r5
 802026e:	e7e6      	b.n	802023e <_printf_i+0x182>
 8020270:	4616      	mov	r6, r2
 8020272:	e7bb      	b.n	80201ec <_printf_i+0x130>
 8020274:	680b      	ldr	r3, [r1, #0]
 8020276:	6826      	ldr	r6, [r4, #0]
 8020278:	6960      	ldr	r0, [r4, #20]
 802027a:	1d1d      	adds	r5, r3, #4
 802027c:	600d      	str	r5, [r1, #0]
 802027e:	0635      	lsls	r5, r6, #24
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	d501      	bpl.n	8020288 <_printf_i+0x1cc>
 8020284:	6018      	str	r0, [r3, #0]
 8020286:	e002      	b.n	802028e <_printf_i+0x1d2>
 8020288:	0671      	lsls	r1, r6, #25
 802028a:	d5fb      	bpl.n	8020284 <_printf_i+0x1c8>
 802028c:	8018      	strh	r0, [r3, #0]
 802028e:	2300      	movs	r3, #0
 8020290:	6123      	str	r3, [r4, #16]
 8020292:	4616      	mov	r6, r2
 8020294:	e7ba      	b.n	802020c <_printf_i+0x150>
 8020296:	680b      	ldr	r3, [r1, #0]
 8020298:	1d1a      	adds	r2, r3, #4
 802029a:	600a      	str	r2, [r1, #0]
 802029c:	681e      	ldr	r6, [r3, #0]
 802029e:	6862      	ldr	r2, [r4, #4]
 80202a0:	2100      	movs	r1, #0
 80202a2:	4630      	mov	r0, r6
 80202a4:	f7df ffdc 	bl	8000260 <memchr>
 80202a8:	b108      	cbz	r0, 80202ae <_printf_i+0x1f2>
 80202aa:	1b80      	subs	r0, r0, r6
 80202ac:	6060      	str	r0, [r4, #4]
 80202ae:	6863      	ldr	r3, [r4, #4]
 80202b0:	6123      	str	r3, [r4, #16]
 80202b2:	2300      	movs	r3, #0
 80202b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80202b8:	e7a8      	b.n	802020c <_printf_i+0x150>
 80202ba:	6923      	ldr	r3, [r4, #16]
 80202bc:	4632      	mov	r2, r6
 80202be:	4649      	mov	r1, r9
 80202c0:	4640      	mov	r0, r8
 80202c2:	47d0      	blx	sl
 80202c4:	3001      	adds	r0, #1
 80202c6:	d0ab      	beq.n	8020220 <_printf_i+0x164>
 80202c8:	6823      	ldr	r3, [r4, #0]
 80202ca:	079b      	lsls	r3, r3, #30
 80202cc:	d413      	bmi.n	80202f6 <_printf_i+0x23a>
 80202ce:	68e0      	ldr	r0, [r4, #12]
 80202d0:	9b03      	ldr	r3, [sp, #12]
 80202d2:	4298      	cmp	r0, r3
 80202d4:	bfb8      	it	lt
 80202d6:	4618      	movlt	r0, r3
 80202d8:	e7a4      	b.n	8020224 <_printf_i+0x168>
 80202da:	2301      	movs	r3, #1
 80202dc:	4632      	mov	r2, r6
 80202de:	4649      	mov	r1, r9
 80202e0:	4640      	mov	r0, r8
 80202e2:	47d0      	blx	sl
 80202e4:	3001      	adds	r0, #1
 80202e6:	d09b      	beq.n	8020220 <_printf_i+0x164>
 80202e8:	3501      	adds	r5, #1
 80202ea:	68e3      	ldr	r3, [r4, #12]
 80202ec:	9903      	ldr	r1, [sp, #12]
 80202ee:	1a5b      	subs	r3, r3, r1
 80202f0:	42ab      	cmp	r3, r5
 80202f2:	dcf2      	bgt.n	80202da <_printf_i+0x21e>
 80202f4:	e7eb      	b.n	80202ce <_printf_i+0x212>
 80202f6:	2500      	movs	r5, #0
 80202f8:	f104 0619 	add.w	r6, r4, #25
 80202fc:	e7f5      	b.n	80202ea <_printf_i+0x22e>
 80202fe:	bf00      	nop
 8020300:	080262d4 	.word	0x080262d4
 8020304:	080262e5 	.word	0x080262e5

08020308 <_putc_r>:
 8020308:	b570      	push	{r4, r5, r6, lr}
 802030a:	460d      	mov	r5, r1
 802030c:	4614      	mov	r4, r2
 802030e:	4606      	mov	r6, r0
 8020310:	b118      	cbz	r0, 802031a <_putc_r+0x12>
 8020312:	6983      	ldr	r3, [r0, #24]
 8020314:	b90b      	cbnz	r3, 802031a <_putc_r+0x12>
 8020316:	f7fd f9ef 	bl	801d6f8 <__sinit>
 802031a:	4b1c      	ldr	r3, [pc, #112]	; (802038c <_putc_r+0x84>)
 802031c:	429c      	cmp	r4, r3
 802031e:	d124      	bne.n	802036a <_putc_r+0x62>
 8020320:	6874      	ldr	r4, [r6, #4]
 8020322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020324:	07d8      	lsls	r0, r3, #31
 8020326:	d405      	bmi.n	8020334 <_putc_r+0x2c>
 8020328:	89a3      	ldrh	r3, [r4, #12]
 802032a:	0599      	lsls	r1, r3, #22
 802032c:	d402      	bmi.n	8020334 <_putc_r+0x2c>
 802032e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020330:	f7fd fd95 	bl	801de5e <__retarget_lock_acquire_recursive>
 8020334:	68a3      	ldr	r3, [r4, #8]
 8020336:	3b01      	subs	r3, #1
 8020338:	2b00      	cmp	r3, #0
 802033a:	60a3      	str	r3, [r4, #8]
 802033c:	da05      	bge.n	802034a <_putc_r+0x42>
 802033e:	69a2      	ldr	r2, [r4, #24]
 8020340:	4293      	cmp	r3, r2
 8020342:	db1c      	blt.n	802037e <_putc_r+0x76>
 8020344:	b2eb      	uxtb	r3, r5
 8020346:	2b0a      	cmp	r3, #10
 8020348:	d019      	beq.n	802037e <_putc_r+0x76>
 802034a:	6823      	ldr	r3, [r4, #0]
 802034c:	1c5a      	adds	r2, r3, #1
 802034e:	6022      	str	r2, [r4, #0]
 8020350:	701d      	strb	r5, [r3, #0]
 8020352:	b2ed      	uxtb	r5, r5
 8020354:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020356:	07da      	lsls	r2, r3, #31
 8020358:	d405      	bmi.n	8020366 <_putc_r+0x5e>
 802035a:	89a3      	ldrh	r3, [r4, #12]
 802035c:	059b      	lsls	r3, r3, #22
 802035e:	d402      	bmi.n	8020366 <_putc_r+0x5e>
 8020360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020362:	f7fd fd7e 	bl	801de62 <__retarget_lock_release_recursive>
 8020366:	4628      	mov	r0, r5
 8020368:	bd70      	pop	{r4, r5, r6, pc}
 802036a:	4b09      	ldr	r3, [pc, #36]	; (8020390 <_putc_r+0x88>)
 802036c:	429c      	cmp	r4, r3
 802036e:	d101      	bne.n	8020374 <_putc_r+0x6c>
 8020370:	68b4      	ldr	r4, [r6, #8]
 8020372:	e7d6      	b.n	8020322 <_putc_r+0x1a>
 8020374:	4b07      	ldr	r3, [pc, #28]	; (8020394 <_putc_r+0x8c>)
 8020376:	429c      	cmp	r4, r3
 8020378:	bf08      	it	eq
 802037a:	68f4      	ldreq	r4, [r6, #12]
 802037c:	e7d1      	b.n	8020322 <_putc_r+0x1a>
 802037e:	4629      	mov	r1, r5
 8020380:	4622      	mov	r2, r4
 8020382:	4630      	mov	r0, r6
 8020384:	f7ff f856 	bl	801f434 <__swbuf_r>
 8020388:	4605      	mov	r5, r0
 802038a:	e7e3      	b.n	8020354 <_putc_r+0x4c>
 802038c:	08025d44 	.word	0x08025d44
 8020390:	08025d64 	.word	0x08025d64
 8020394:	08025d24 	.word	0x08025d24

08020398 <_read_r>:
 8020398:	b538      	push	{r3, r4, r5, lr}
 802039a:	4d07      	ldr	r5, [pc, #28]	; (80203b8 <_read_r+0x20>)
 802039c:	4604      	mov	r4, r0
 802039e:	4608      	mov	r0, r1
 80203a0:	4611      	mov	r1, r2
 80203a2:	2200      	movs	r2, #0
 80203a4:	602a      	str	r2, [r5, #0]
 80203a6:	461a      	mov	r2, r3
 80203a8:	f7e0 fcf5 	bl	8000d96 <_read>
 80203ac:	1c43      	adds	r3, r0, #1
 80203ae:	d102      	bne.n	80203b6 <_read_r+0x1e>
 80203b0:	682b      	ldr	r3, [r5, #0]
 80203b2:	b103      	cbz	r3, 80203b6 <_read_r+0x1e>
 80203b4:	6023      	str	r3, [r4, #0]
 80203b6:	bd38      	pop	{r3, r4, r5, pc}
 80203b8:	20000dec 	.word	0x20000dec

080203bc <sniprintf>:
 80203bc:	b40c      	push	{r2, r3}
 80203be:	b530      	push	{r4, r5, lr}
 80203c0:	4b17      	ldr	r3, [pc, #92]	; (8020420 <sniprintf+0x64>)
 80203c2:	1e0c      	subs	r4, r1, #0
 80203c4:	681d      	ldr	r5, [r3, #0]
 80203c6:	b09d      	sub	sp, #116	; 0x74
 80203c8:	da08      	bge.n	80203dc <sniprintf+0x20>
 80203ca:	238b      	movs	r3, #139	; 0x8b
 80203cc:	602b      	str	r3, [r5, #0]
 80203ce:	f04f 30ff 	mov.w	r0, #4294967295
 80203d2:	b01d      	add	sp, #116	; 0x74
 80203d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80203d8:	b002      	add	sp, #8
 80203da:	4770      	bx	lr
 80203dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80203e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80203e4:	bf14      	ite	ne
 80203e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80203ea:	4623      	moveq	r3, r4
 80203ec:	9304      	str	r3, [sp, #16]
 80203ee:	9307      	str	r3, [sp, #28]
 80203f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80203f4:	9002      	str	r0, [sp, #8]
 80203f6:	9006      	str	r0, [sp, #24]
 80203f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80203fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80203fe:	ab21      	add	r3, sp, #132	; 0x84
 8020400:	a902      	add	r1, sp, #8
 8020402:	4628      	mov	r0, r5
 8020404:	9301      	str	r3, [sp, #4]
 8020406:	f7ff fb91 	bl	801fb2c <_svfiprintf_r>
 802040a:	1c43      	adds	r3, r0, #1
 802040c:	bfbc      	itt	lt
 802040e:	238b      	movlt	r3, #139	; 0x8b
 8020410:	602b      	strlt	r3, [r5, #0]
 8020412:	2c00      	cmp	r4, #0
 8020414:	d0dd      	beq.n	80203d2 <sniprintf+0x16>
 8020416:	9b02      	ldr	r3, [sp, #8]
 8020418:	2200      	movs	r2, #0
 802041a:	701a      	strb	r2, [r3, #0]
 802041c:	e7d9      	b.n	80203d2 <sniprintf+0x16>
 802041e:	bf00      	nop
 8020420:	20000104 	.word	0x20000104

08020424 <siscanf>:
 8020424:	b40e      	push	{r1, r2, r3}
 8020426:	b510      	push	{r4, lr}
 8020428:	b09f      	sub	sp, #124	; 0x7c
 802042a:	ac21      	add	r4, sp, #132	; 0x84
 802042c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020430:	f854 2b04 	ldr.w	r2, [r4], #4
 8020434:	9201      	str	r2, [sp, #4]
 8020436:	f8ad 101c 	strh.w	r1, [sp, #28]
 802043a:	9004      	str	r0, [sp, #16]
 802043c:	9008      	str	r0, [sp, #32]
 802043e:	f7df fefd 	bl	800023c <strlen>
 8020442:	4b0c      	ldr	r3, [pc, #48]	; (8020474 <siscanf+0x50>)
 8020444:	9005      	str	r0, [sp, #20]
 8020446:	9009      	str	r0, [sp, #36]	; 0x24
 8020448:	930d      	str	r3, [sp, #52]	; 0x34
 802044a:	480b      	ldr	r0, [pc, #44]	; (8020478 <siscanf+0x54>)
 802044c:	9a01      	ldr	r2, [sp, #4]
 802044e:	6800      	ldr	r0, [r0, #0]
 8020450:	9403      	str	r4, [sp, #12]
 8020452:	2300      	movs	r3, #0
 8020454:	9311      	str	r3, [sp, #68]	; 0x44
 8020456:	9316      	str	r3, [sp, #88]	; 0x58
 8020458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802045c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020460:	a904      	add	r1, sp, #16
 8020462:	4623      	mov	r3, r4
 8020464:	f000 f8ba 	bl	80205dc <__ssvfiscanf_r>
 8020468:	b01f      	add	sp, #124	; 0x7c
 802046a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802046e:	b003      	add	sp, #12
 8020470:	4770      	bx	lr
 8020472:	bf00      	nop
 8020474:	0801e2f3 	.word	0x0801e2f3
 8020478:	20000104 	.word	0x20000104

0802047c <strcpy>:
 802047c:	4603      	mov	r3, r0
 802047e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020482:	f803 2b01 	strb.w	r2, [r3], #1
 8020486:	2a00      	cmp	r2, #0
 8020488:	d1f9      	bne.n	802047e <strcpy+0x2>
 802048a:	4770      	bx	lr

0802048c <strncmp>:
 802048c:	b510      	push	{r4, lr}
 802048e:	b16a      	cbz	r2, 80204ac <strncmp+0x20>
 8020490:	3901      	subs	r1, #1
 8020492:	1884      	adds	r4, r0, r2
 8020494:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020498:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802049c:	4293      	cmp	r3, r2
 802049e:	d103      	bne.n	80204a8 <strncmp+0x1c>
 80204a0:	42a0      	cmp	r0, r4
 80204a2:	d001      	beq.n	80204a8 <strncmp+0x1c>
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d1f5      	bne.n	8020494 <strncmp+0x8>
 80204a8:	1a98      	subs	r0, r3, r2
 80204aa:	bd10      	pop	{r4, pc}
 80204ac:	4610      	mov	r0, r2
 80204ae:	e7fc      	b.n	80204aa <strncmp+0x1e>

080204b0 <__ascii_wctomb>:
 80204b0:	b149      	cbz	r1, 80204c6 <__ascii_wctomb+0x16>
 80204b2:	2aff      	cmp	r2, #255	; 0xff
 80204b4:	bf85      	ittet	hi
 80204b6:	238a      	movhi	r3, #138	; 0x8a
 80204b8:	6003      	strhi	r3, [r0, #0]
 80204ba:	700a      	strbls	r2, [r1, #0]
 80204bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80204c0:	bf98      	it	ls
 80204c2:	2001      	movls	r0, #1
 80204c4:	4770      	bx	lr
 80204c6:	4608      	mov	r0, r1
 80204c8:	4770      	bx	lr
	...

080204cc <__env_lock>:
 80204cc:	4801      	ldr	r0, [pc, #4]	; (80204d4 <__env_lock+0x8>)
 80204ce:	f7fd bcc6 	b.w	801de5e <__retarget_lock_acquire_recursive>
 80204d2:	bf00      	nop
 80204d4:	20000de2 	.word	0x20000de2

080204d8 <__env_unlock>:
 80204d8:	4801      	ldr	r0, [pc, #4]	; (80204e0 <__env_unlock+0x8>)
 80204da:	f7fd bcc2 	b.w	801de62 <__retarget_lock_release_recursive>
 80204de:	bf00      	nop
 80204e0:	20000de2 	.word	0x20000de2

080204e4 <memmove>:
 80204e4:	4288      	cmp	r0, r1
 80204e6:	b510      	push	{r4, lr}
 80204e8:	eb01 0402 	add.w	r4, r1, r2
 80204ec:	d902      	bls.n	80204f4 <memmove+0x10>
 80204ee:	4284      	cmp	r4, r0
 80204f0:	4623      	mov	r3, r4
 80204f2:	d807      	bhi.n	8020504 <memmove+0x20>
 80204f4:	1e43      	subs	r3, r0, #1
 80204f6:	42a1      	cmp	r1, r4
 80204f8:	d008      	beq.n	802050c <memmove+0x28>
 80204fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80204fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020502:	e7f8      	b.n	80204f6 <memmove+0x12>
 8020504:	4402      	add	r2, r0
 8020506:	4601      	mov	r1, r0
 8020508:	428a      	cmp	r2, r1
 802050a:	d100      	bne.n	802050e <memmove+0x2a>
 802050c:	bd10      	pop	{r4, pc}
 802050e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020516:	e7f7      	b.n	8020508 <memmove+0x24>

08020518 <_malloc_usable_size_r>:
 8020518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802051c:	1f18      	subs	r0, r3, #4
 802051e:	2b00      	cmp	r3, #0
 8020520:	bfbc      	itt	lt
 8020522:	580b      	ldrlt	r3, [r1, r0]
 8020524:	18c0      	addlt	r0, r0, r3
 8020526:	4770      	bx	lr

08020528 <_sungetc_r>:
 8020528:	b538      	push	{r3, r4, r5, lr}
 802052a:	1c4b      	adds	r3, r1, #1
 802052c:	4614      	mov	r4, r2
 802052e:	d103      	bne.n	8020538 <_sungetc_r+0x10>
 8020530:	f04f 35ff 	mov.w	r5, #4294967295
 8020534:	4628      	mov	r0, r5
 8020536:	bd38      	pop	{r3, r4, r5, pc}
 8020538:	8993      	ldrh	r3, [r2, #12]
 802053a:	f023 0320 	bic.w	r3, r3, #32
 802053e:	8193      	strh	r3, [r2, #12]
 8020540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020542:	6852      	ldr	r2, [r2, #4]
 8020544:	b2cd      	uxtb	r5, r1
 8020546:	b18b      	cbz	r3, 802056c <_sungetc_r+0x44>
 8020548:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802054a:	4293      	cmp	r3, r2
 802054c:	dd08      	ble.n	8020560 <_sungetc_r+0x38>
 802054e:	6823      	ldr	r3, [r4, #0]
 8020550:	1e5a      	subs	r2, r3, #1
 8020552:	6022      	str	r2, [r4, #0]
 8020554:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020558:	6863      	ldr	r3, [r4, #4]
 802055a:	3301      	adds	r3, #1
 802055c:	6063      	str	r3, [r4, #4]
 802055e:	e7e9      	b.n	8020534 <_sungetc_r+0xc>
 8020560:	4621      	mov	r1, r4
 8020562:	f000 fbbf 	bl	8020ce4 <__submore>
 8020566:	2800      	cmp	r0, #0
 8020568:	d0f1      	beq.n	802054e <_sungetc_r+0x26>
 802056a:	e7e1      	b.n	8020530 <_sungetc_r+0x8>
 802056c:	6921      	ldr	r1, [r4, #16]
 802056e:	6823      	ldr	r3, [r4, #0]
 8020570:	b151      	cbz	r1, 8020588 <_sungetc_r+0x60>
 8020572:	4299      	cmp	r1, r3
 8020574:	d208      	bcs.n	8020588 <_sungetc_r+0x60>
 8020576:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802057a:	42a9      	cmp	r1, r5
 802057c:	d104      	bne.n	8020588 <_sungetc_r+0x60>
 802057e:	3b01      	subs	r3, #1
 8020580:	3201      	adds	r2, #1
 8020582:	6023      	str	r3, [r4, #0]
 8020584:	6062      	str	r2, [r4, #4]
 8020586:	e7d5      	b.n	8020534 <_sungetc_r+0xc>
 8020588:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802058c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020590:	6363      	str	r3, [r4, #52]	; 0x34
 8020592:	2303      	movs	r3, #3
 8020594:	63a3      	str	r3, [r4, #56]	; 0x38
 8020596:	4623      	mov	r3, r4
 8020598:	f803 5f46 	strb.w	r5, [r3, #70]!
 802059c:	6023      	str	r3, [r4, #0]
 802059e:	2301      	movs	r3, #1
 80205a0:	e7dc      	b.n	802055c <_sungetc_r+0x34>

080205a2 <__ssrefill_r>:
 80205a2:	b510      	push	{r4, lr}
 80205a4:	460c      	mov	r4, r1
 80205a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80205a8:	b169      	cbz	r1, 80205c6 <__ssrefill_r+0x24>
 80205aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80205ae:	4299      	cmp	r1, r3
 80205b0:	d001      	beq.n	80205b6 <__ssrefill_r+0x14>
 80205b2:	f7fd fcf1 	bl	801df98 <_free_r>
 80205b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80205b8:	6063      	str	r3, [r4, #4]
 80205ba:	2000      	movs	r0, #0
 80205bc:	6360      	str	r0, [r4, #52]	; 0x34
 80205be:	b113      	cbz	r3, 80205c6 <__ssrefill_r+0x24>
 80205c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80205c2:	6023      	str	r3, [r4, #0]
 80205c4:	bd10      	pop	{r4, pc}
 80205c6:	6923      	ldr	r3, [r4, #16]
 80205c8:	6023      	str	r3, [r4, #0]
 80205ca:	2300      	movs	r3, #0
 80205cc:	6063      	str	r3, [r4, #4]
 80205ce:	89a3      	ldrh	r3, [r4, #12]
 80205d0:	f043 0320 	orr.w	r3, r3, #32
 80205d4:	81a3      	strh	r3, [r4, #12]
 80205d6:	f04f 30ff 	mov.w	r0, #4294967295
 80205da:	e7f3      	b.n	80205c4 <__ssrefill_r+0x22>

080205dc <__ssvfiscanf_r>:
 80205dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e0:	460c      	mov	r4, r1
 80205e2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80205e6:	2100      	movs	r1, #0
 80205e8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80205ec:	49b2      	ldr	r1, [pc, #712]	; (80208b8 <__ssvfiscanf_r+0x2dc>)
 80205ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80205f0:	f10d 0804 	add.w	r8, sp, #4
 80205f4:	49b1      	ldr	r1, [pc, #708]	; (80208bc <__ssvfiscanf_r+0x2e0>)
 80205f6:	4fb2      	ldr	r7, [pc, #712]	; (80208c0 <__ssvfiscanf_r+0x2e4>)
 80205f8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80208c4 <__ssvfiscanf_r+0x2e8>
 80205fc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020600:	4606      	mov	r6, r0
 8020602:	91a1      	str	r1, [sp, #644]	; 0x284
 8020604:	9300      	str	r3, [sp, #0]
 8020606:	f892 a000 	ldrb.w	sl, [r2]
 802060a:	f1ba 0f00 	cmp.w	sl, #0
 802060e:	f000 8151 	beq.w	80208b4 <__ssvfiscanf_r+0x2d8>
 8020612:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020616:	f013 0308 	ands.w	r3, r3, #8
 802061a:	f102 0501 	add.w	r5, r2, #1
 802061e:	d019      	beq.n	8020654 <__ssvfiscanf_r+0x78>
 8020620:	6863      	ldr	r3, [r4, #4]
 8020622:	2b00      	cmp	r3, #0
 8020624:	dd0f      	ble.n	8020646 <__ssvfiscanf_r+0x6a>
 8020626:	6823      	ldr	r3, [r4, #0]
 8020628:	781a      	ldrb	r2, [r3, #0]
 802062a:	5cba      	ldrb	r2, [r7, r2]
 802062c:	0712      	lsls	r2, r2, #28
 802062e:	d401      	bmi.n	8020634 <__ssvfiscanf_r+0x58>
 8020630:	462a      	mov	r2, r5
 8020632:	e7e8      	b.n	8020606 <__ssvfiscanf_r+0x2a>
 8020634:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020636:	3201      	adds	r2, #1
 8020638:	9245      	str	r2, [sp, #276]	; 0x114
 802063a:	6862      	ldr	r2, [r4, #4]
 802063c:	3301      	adds	r3, #1
 802063e:	3a01      	subs	r2, #1
 8020640:	6062      	str	r2, [r4, #4]
 8020642:	6023      	str	r3, [r4, #0]
 8020644:	e7ec      	b.n	8020620 <__ssvfiscanf_r+0x44>
 8020646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020648:	4621      	mov	r1, r4
 802064a:	4630      	mov	r0, r6
 802064c:	4798      	blx	r3
 802064e:	2800      	cmp	r0, #0
 8020650:	d0e9      	beq.n	8020626 <__ssvfiscanf_r+0x4a>
 8020652:	e7ed      	b.n	8020630 <__ssvfiscanf_r+0x54>
 8020654:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020658:	f040 8083 	bne.w	8020762 <__ssvfiscanf_r+0x186>
 802065c:	9341      	str	r3, [sp, #260]	; 0x104
 802065e:	9343      	str	r3, [sp, #268]	; 0x10c
 8020660:	7853      	ldrb	r3, [r2, #1]
 8020662:	2b2a      	cmp	r3, #42	; 0x2a
 8020664:	bf02      	ittt	eq
 8020666:	2310      	moveq	r3, #16
 8020668:	1c95      	addeq	r5, r2, #2
 802066a:	9341      	streq	r3, [sp, #260]	; 0x104
 802066c:	220a      	movs	r2, #10
 802066e:	46ab      	mov	fp, r5
 8020670:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020674:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020678:	2b09      	cmp	r3, #9
 802067a:	d91d      	bls.n	80206b8 <__ssvfiscanf_r+0xdc>
 802067c:	4891      	ldr	r0, [pc, #580]	; (80208c4 <__ssvfiscanf_r+0x2e8>)
 802067e:	2203      	movs	r2, #3
 8020680:	f7df fdee 	bl	8000260 <memchr>
 8020684:	b140      	cbz	r0, 8020698 <__ssvfiscanf_r+0xbc>
 8020686:	2301      	movs	r3, #1
 8020688:	eba0 0009 	sub.w	r0, r0, r9
 802068c:	fa03 f000 	lsl.w	r0, r3, r0
 8020690:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020692:	4318      	orrs	r0, r3
 8020694:	9041      	str	r0, [sp, #260]	; 0x104
 8020696:	465d      	mov	r5, fp
 8020698:	f815 3b01 	ldrb.w	r3, [r5], #1
 802069c:	2b78      	cmp	r3, #120	; 0x78
 802069e:	d806      	bhi.n	80206ae <__ssvfiscanf_r+0xd2>
 80206a0:	2b57      	cmp	r3, #87	; 0x57
 80206a2:	d810      	bhi.n	80206c6 <__ssvfiscanf_r+0xea>
 80206a4:	2b25      	cmp	r3, #37	; 0x25
 80206a6:	d05c      	beq.n	8020762 <__ssvfiscanf_r+0x186>
 80206a8:	d856      	bhi.n	8020758 <__ssvfiscanf_r+0x17c>
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d074      	beq.n	8020798 <__ssvfiscanf_r+0x1bc>
 80206ae:	2303      	movs	r3, #3
 80206b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80206b2:	230a      	movs	r3, #10
 80206b4:	9342      	str	r3, [sp, #264]	; 0x108
 80206b6:	e081      	b.n	80207bc <__ssvfiscanf_r+0x1e0>
 80206b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80206ba:	fb02 1303 	mla	r3, r2, r3, r1
 80206be:	3b30      	subs	r3, #48	; 0x30
 80206c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80206c2:	465d      	mov	r5, fp
 80206c4:	e7d3      	b.n	802066e <__ssvfiscanf_r+0x92>
 80206c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80206ca:	2a20      	cmp	r2, #32
 80206cc:	d8ef      	bhi.n	80206ae <__ssvfiscanf_r+0xd2>
 80206ce:	a101      	add	r1, pc, #4	; (adr r1, 80206d4 <__ssvfiscanf_r+0xf8>)
 80206d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80206d4:	080207a7 	.word	0x080207a7
 80206d8:	080206af 	.word	0x080206af
 80206dc:	080206af 	.word	0x080206af
 80206e0:	08020805 	.word	0x08020805
 80206e4:	080206af 	.word	0x080206af
 80206e8:	080206af 	.word	0x080206af
 80206ec:	080206af 	.word	0x080206af
 80206f0:	080206af 	.word	0x080206af
 80206f4:	080206af 	.word	0x080206af
 80206f8:	080206af 	.word	0x080206af
 80206fc:	080206af 	.word	0x080206af
 8020700:	0802081b 	.word	0x0802081b
 8020704:	080207f1 	.word	0x080207f1
 8020708:	0802075f 	.word	0x0802075f
 802070c:	0802075f 	.word	0x0802075f
 8020710:	0802075f 	.word	0x0802075f
 8020714:	080206af 	.word	0x080206af
 8020718:	080207f5 	.word	0x080207f5
 802071c:	080206af 	.word	0x080206af
 8020720:	080206af 	.word	0x080206af
 8020724:	080206af 	.word	0x080206af
 8020728:	080206af 	.word	0x080206af
 802072c:	0802082b 	.word	0x0802082b
 8020730:	080207fd 	.word	0x080207fd
 8020734:	0802079f 	.word	0x0802079f
 8020738:	080206af 	.word	0x080206af
 802073c:	080206af 	.word	0x080206af
 8020740:	08020827 	.word	0x08020827
 8020744:	080206af 	.word	0x080206af
 8020748:	080207f1 	.word	0x080207f1
 802074c:	080206af 	.word	0x080206af
 8020750:	080206af 	.word	0x080206af
 8020754:	080207a7 	.word	0x080207a7
 8020758:	3b45      	subs	r3, #69	; 0x45
 802075a:	2b02      	cmp	r3, #2
 802075c:	d8a7      	bhi.n	80206ae <__ssvfiscanf_r+0xd2>
 802075e:	2305      	movs	r3, #5
 8020760:	e02b      	b.n	80207ba <__ssvfiscanf_r+0x1de>
 8020762:	6863      	ldr	r3, [r4, #4]
 8020764:	2b00      	cmp	r3, #0
 8020766:	dd0d      	ble.n	8020784 <__ssvfiscanf_r+0x1a8>
 8020768:	6823      	ldr	r3, [r4, #0]
 802076a:	781a      	ldrb	r2, [r3, #0]
 802076c:	4552      	cmp	r2, sl
 802076e:	f040 80a1 	bne.w	80208b4 <__ssvfiscanf_r+0x2d8>
 8020772:	3301      	adds	r3, #1
 8020774:	6862      	ldr	r2, [r4, #4]
 8020776:	6023      	str	r3, [r4, #0]
 8020778:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802077a:	3a01      	subs	r2, #1
 802077c:	3301      	adds	r3, #1
 802077e:	6062      	str	r2, [r4, #4]
 8020780:	9345      	str	r3, [sp, #276]	; 0x114
 8020782:	e755      	b.n	8020630 <__ssvfiscanf_r+0x54>
 8020784:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020786:	4621      	mov	r1, r4
 8020788:	4630      	mov	r0, r6
 802078a:	4798      	blx	r3
 802078c:	2800      	cmp	r0, #0
 802078e:	d0eb      	beq.n	8020768 <__ssvfiscanf_r+0x18c>
 8020790:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020792:	2800      	cmp	r0, #0
 8020794:	f040 8084 	bne.w	80208a0 <__ssvfiscanf_r+0x2c4>
 8020798:	f04f 30ff 	mov.w	r0, #4294967295
 802079c:	e086      	b.n	80208ac <__ssvfiscanf_r+0x2d0>
 802079e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80207a0:	f042 0220 	orr.w	r2, r2, #32
 80207a4:	9241      	str	r2, [sp, #260]	; 0x104
 80207a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80207a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80207ac:	9241      	str	r2, [sp, #260]	; 0x104
 80207ae:	2210      	movs	r2, #16
 80207b0:	2b6f      	cmp	r3, #111	; 0x6f
 80207b2:	9242      	str	r2, [sp, #264]	; 0x108
 80207b4:	bf34      	ite	cc
 80207b6:	2303      	movcc	r3, #3
 80207b8:	2304      	movcs	r3, #4
 80207ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80207bc:	6863      	ldr	r3, [r4, #4]
 80207be:	2b00      	cmp	r3, #0
 80207c0:	dd41      	ble.n	8020846 <__ssvfiscanf_r+0x26a>
 80207c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80207c4:	0659      	lsls	r1, r3, #25
 80207c6:	d404      	bmi.n	80207d2 <__ssvfiscanf_r+0x1f6>
 80207c8:	6823      	ldr	r3, [r4, #0]
 80207ca:	781a      	ldrb	r2, [r3, #0]
 80207cc:	5cba      	ldrb	r2, [r7, r2]
 80207ce:	0712      	lsls	r2, r2, #28
 80207d0:	d440      	bmi.n	8020854 <__ssvfiscanf_r+0x278>
 80207d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80207d4:	2b02      	cmp	r3, #2
 80207d6:	dc4f      	bgt.n	8020878 <__ssvfiscanf_r+0x29c>
 80207d8:	466b      	mov	r3, sp
 80207da:	4622      	mov	r2, r4
 80207dc:	a941      	add	r1, sp, #260	; 0x104
 80207de:	4630      	mov	r0, r6
 80207e0:	f000 f874 	bl	80208cc <_scanf_chars>
 80207e4:	2801      	cmp	r0, #1
 80207e6:	d065      	beq.n	80208b4 <__ssvfiscanf_r+0x2d8>
 80207e8:	2802      	cmp	r0, #2
 80207ea:	f47f af21 	bne.w	8020630 <__ssvfiscanf_r+0x54>
 80207ee:	e7cf      	b.n	8020790 <__ssvfiscanf_r+0x1b4>
 80207f0:	220a      	movs	r2, #10
 80207f2:	e7dd      	b.n	80207b0 <__ssvfiscanf_r+0x1d4>
 80207f4:	2300      	movs	r3, #0
 80207f6:	9342      	str	r3, [sp, #264]	; 0x108
 80207f8:	2303      	movs	r3, #3
 80207fa:	e7de      	b.n	80207ba <__ssvfiscanf_r+0x1de>
 80207fc:	2308      	movs	r3, #8
 80207fe:	9342      	str	r3, [sp, #264]	; 0x108
 8020800:	2304      	movs	r3, #4
 8020802:	e7da      	b.n	80207ba <__ssvfiscanf_r+0x1de>
 8020804:	4629      	mov	r1, r5
 8020806:	4640      	mov	r0, r8
 8020808:	f000 f9ac 	bl	8020b64 <__sccl>
 802080c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802080e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020812:	9341      	str	r3, [sp, #260]	; 0x104
 8020814:	4605      	mov	r5, r0
 8020816:	2301      	movs	r3, #1
 8020818:	e7cf      	b.n	80207ba <__ssvfiscanf_r+0x1de>
 802081a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020820:	9341      	str	r3, [sp, #260]	; 0x104
 8020822:	2300      	movs	r3, #0
 8020824:	e7c9      	b.n	80207ba <__ssvfiscanf_r+0x1de>
 8020826:	2302      	movs	r3, #2
 8020828:	e7c7      	b.n	80207ba <__ssvfiscanf_r+0x1de>
 802082a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802082c:	06c3      	lsls	r3, r0, #27
 802082e:	f53f aeff 	bmi.w	8020630 <__ssvfiscanf_r+0x54>
 8020832:	9b00      	ldr	r3, [sp, #0]
 8020834:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020836:	1d19      	adds	r1, r3, #4
 8020838:	9100      	str	r1, [sp, #0]
 802083a:	681b      	ldr	r3, [r3, #0]
 802083c:	07c0      	lsls	r0, r0, #31
 802083e:	bf4c      	ite	mi
 8020840:	801a      	strhmi	r2, [r3, #0]
 8020842:	601a      	strpl	r2, [r3, #0]
 8020844:	e6f4      	b.n	8020630 <__ssvfiscanf_r+0x54>
 8020846:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020848:	4621      	mov	r1, r4
 802084a:	4630      	mov	r0, r6
 802084c:	4798      	blx	r3
 802084e:	2800      	cmp	r0, #0
 8020850:	d0b7      	beq.n	80207c2 <__ssvfiscanf_r+0x1e6>
 8020852:	e79d      	b.n	8020790 <__ssvfiscanf_r+0x1b4>
 8020854:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020856:	3201      	adds	r2, #1
 8020858:	9245      	str	r2, [sp, #276]	; 0x114
 802085a:	6862      	ldr	r2, [r4, #4]
 802085c:	3a01      	subs	r2, #1
 802085e:	2a00      	cmp	r2, #0
 8020860:	6062      	str	r2, [r4, #4]
 8020862:	dd02      	ble.n	802086a <__ssvfiscanf_r+0x28e>
 8020864:	3301      	adds	r3, #1
 8020866:	6023      	str	r3, [r4, #0]
 8020868:	e7ae      	b.n	80207c8 <__ssvfiscanf_r+0x1ec>
 802086a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802086c:	4621      	mov	r1, r4
 802086e:	4630      	mov	r0, r6
 8020870:	4798      	blx	r3
 8020872:	2800      	cmp	r0, #0
 8020874:	d0a8      	beq.n	80207c8 <__ssvfiscanf_r+0x1ec>
 8020876:	e78b      	b.n	8020790 <__ssvfiscanf_r+0x1b4>
 8020878:	2b04      	cmp	r3, #4
 802087a:	dc06      	bgt.n	802088a <__ssvfiscanf_r+0x2ae>
 802087c:	466b      	mov	r3, sp
 802087e:	4622      	mov	r2, r4
 8020880:	a941      	add	r1, sp, #260	; 0x104
 8020882:	4630      	mov	r0, r6
 8020884:	f000 f87a 	bl	802097c <_scanf_i>
 8020888:	e7ac      	b.n	80207e4 <__ssvfiscanf_r+0x208>
 802088a:	4b0f      	ldr	r3, [pc, #60]	; (80208c8 <__ssvfiscanf_r+0x2ec>)
 802088c:	2b00      	cmp	r3, #0
 802088e:	f43f aecf 	beq.w	8020630 <__ssvfiscanf_r+0x54>
 8020892:	466b      	mov	r3, sp
 8020894:	4622      	mov	r2, r4
 8020896:	a941      	add	r1, sp, #260	; 0x104
 8020898:	4630      	mov	r0, r6
 802089a:	f3af 8000 	nop.w
 802089e:	e7a1      	b.n	80207e4 <__ssvfiscanf_r+0x208>
 80208a0:	89a3      	ldrh	r3, [r4, #12]
 80208a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80208a6:	bf18      	it	ne
 80208a8:	f04f 30ff 	movne.w	r0, #4294967295
 80208ac:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80208b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80208b6:	e7f9      	b.n	80208ac <__ssvfiscanf_r+0x2d0>
 80208b8:	08020529 	.word	0x08020529
 80208bc:	080205a3 	.word	0x080205a3
 80208c0:	080261b9 	.word	0x080261b9
 80208c4:	080262c9 	.word	0x080262c9
 80208c8:	00000000 	.word	0x00000000

080208cc <_scanf_chars>:
 80208cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208d0:	4615      	mov	r5, r2
 80208d2:	688a      	ldr	r2, [r1, #8]
 80208d4:	4680      	mov	r8, r0
 80208d6:	460c      	mov	r4, r1
 80208d8:	b932      	cbnz	r2, 80208e8 <_scanf_chars+0x1c>
 80208da:	698a      	ldr	r2, [r1, #24]
 80208dc:	2a00      	cmp	r2, #0
 80208de:	bf0c      	ite	eq
 80208e0:	2201      	moveq	r2, #1
 80208e2:	f04f 32ff 	movne.w	r2, #4294967295
 80208e6:	608a      	str	r2, [r1, #8]
 80208e8:	6822      	ldr	r2, [r4, #0]
 80208ea:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8020978 <_scanf_chars+0xac>
 80208ee:	06d1      	lsls	r1, r2, #27
 80208f0:	bf5f      	itttt	pl
 80208f2:	681a      	ldrpl	r2, [r3, #0]
 80208f4:	1d11      	addpl	r1, r2, #4
 80208f6:	6019      	strpl	r1, [r3, #0]
 80208f8:	6816      	ldrpl	r6, [r2, #0]
 80208fa:	2700      	movs	r7, #0
 80208fc:	69a0      	ldr	r0, [r4, #24]
 80208fe:	b188      	cbz	r0, 8020924 <_scanf_chars+0x58>
 8020900:	2801      	cmp	r0, #1
 8020902:	d107      	bne.n	8020914 <_scanf_chars+0x48>
 8020904:	682b      	ldr	r3, [r5, #0]
 8020906:	781a      	ldrb	r2, [r3, #0]
 8020908:	6963      	ldr	r3, [r4, #20]
 802090a:	5c9b      	ldrb	r3, [r3, r2]
 802090c:	b953      	cbnz	r3, 8020924 <_scanf_chars+0x58>
 802090e:	bb27      	cbnz	r7, 802095a <_scanf_chars+0x8e>
 8020910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020914:	2802      	cmp	r0, #2
 8020916:	d120      	bne.n	802095a <_scanf_chars+0x8e>
 8020918:	682b      	ldr	r3, [r5, #0]
 802091a:	781b      	ldrb	r3, [r3, #0]
 802091c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020920:	071b      	lsls	r3, r3, #28
 8020922:	d41a      	bmi.n	802095a <_scanf_chars+0x8e>
 8020924:	6823      	ldr	r3, [r4, #0]
 8020926:	06da      	lsls	r2, r3, #27
 8020928:	bf5e      	ittt	pl
 802092a:	682b      	ldrpl	r3, [r5, #0]
 802092c:	781b      	ldrbpl	r3, [r3, #0]
 802092e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020932:	682a      	ldr	r2, [r5, #0]
 8020934:	686b      	ldr	r3, [r5, #4]
 8020936:	3201      	adds	r2, #1
 8020938:	602a      	str	r2, [r5, #0]
 802093a:	68a2      	ldr	r2, [r4, #8]
 802093c:	3b01      	subs	r3, #1
 802093e:	3a01      	subs	r2, #1
 8020940:	606b      	str	r3, [r5, #4]
 8020942:	3701      	adds	r7, #1
 8020944:	60a2      	str	r2, [r4, #8]
 8020946:	b142      	cbz	r2, 802095a <_scanf_chars+0x8e>
 8020948:	2b00      	cmp	r3, #0
 802094a:	dcd7      	bgt.n	80208fc <_scanf_chars+0x30>
 802094c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020950:	4629      	mov	r1, r5
 8020952:	4640      	mov	r0, r8
 8020954:	4798      	blx	r3
 8020956:	2800      	cmp	r0, #0
 8020958:	d0d0      	beq.n	80208fc <_scanf_chars+0x30>
 802095a:	6823      	ldr	r3, [r4, #0]
 802095c:	f013 0310 	ands.w	r3, r3, #16
 8020960:	d105      	bne.n	802096e <_scanf_chars+0xa2>
 8020962:	68e2      	ldr	r2, [r4, #12]
 8020964:	3201      	adds	r2, #1
 8020966:	60e2      	str	r2, [r4, #12]
 8020968:	69a2      	ldr	r2, [r4, #24]
 802096a:	b102      	cbz	r2, 802096e <_scanf_chars+0xa2>
 802096c:	7033      	strb	r3, [r6, #0]
 802096e:	6923      	ldr	r3, [r4, #16]
 8020970:	441f      	add	r7, r3
 8020972:	6127      	str	r7, [r4, #16]
 8020974:	2000      	movs	r0, #0
 8020976:	e7cb      	b.n	8020910 <_scanf_chars+0x44>
 8020978:	080261b9 	.word	0x080261b9

0802097c <_scanf_i>:
 802097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020980:	4698      	mov	r8, r3
 8020982:	4b74      	ldr	r3, [pc, #464]	; (8020b54 <_scanf_i+0x1d8>)
 8020984:	460c      	mov	r4, r1
 8020986:	4682      	mov	sl, r0
 8020988:	4616      	mov	r6, r2
 802098a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802098e:	b087      	sub	sp, #28
 8020990:	ab03      	add	r3, sp, #12
 8020992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020996:	4b70      	ldr	r3, [pc, #448]	; (8020b58 <_scanf_i+0x1dc>)
 8020998:	69a1      	ldr	r1, [r4, #24]
 802099a:	4a70      	ldr	r2, [pc, #448]	; (8020b5c <_scanf_i+0x1e0>)
 802099c:	2903      	cmp	r1, #3
 802099e:	bf18      	it	ne
 80209a0:	461a      	movne	r2, r3
 80209a2:	68a3      	ldr	r3, [r4, #8]
 80209a4:	9201      	str	r2, [sp, #4]
 80209a6:	1e5a      	subs	r2, r3, #1
 80209a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80209ac:	bf88      	it	hi
 80209ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80209b2:	4627      	mov	r7, r4
 80209b4:	bf82      	ittt	hi
 80209b6:	eb03 0905 	addhi.w	r9, r3, r5
 80209ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80209be:	60a3      	strhi	r3, [r4, #8]
 80209c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80209c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80209c8:	bf98      	it	ls
 80209ca:	f04f 0900 	movls.w	r9, #0
 80209ce:	6023      	str	r3, [r4, #0]
 80209d0:	463d      	mov	r5, r7
 80209d2:	f04f 0b00 	mov.w	fp, #0
 80209d6:	6831      	ldr	r1, [r6, #0]
 80209d8:	ab03      	add	r3, sp, #12
 80209da:	7809      	ldrb	r1, [r1, #0]
 80209dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80209e0:	2202      	movs	r2, #2
 80209e2:	f7df fc3d 	bl	8000260 <memchr>
 80209e6:	b328      	cbz	r0, 8020a34 <_scanf_i+0xb8>
 80209e8:	f1bb 0f01 	cmp.w	fp, #1
 80209ec:	d159      	bne.n	8020aa2 <_scanf_i+0x126>
 80209ee:	6862      	ldr	r2, [r4, #4]
 80209f0:	b92a      	cbnz	r2, 80209fe <_scanf_i+0x82>
 80209f2:	6822      	ldr	r2, [r4, #0]
 80209f4:	2308      	movs	r3, #8
 80209f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80209fa:	6063      	str	r3, [r4, #4]
 80209fc:	6022      	str	r2, [r4, #0]
 80209fe:	6822      	ldr	r2, [r4, #0]
 8020a00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020a04:	6022      	str	r2, [r4, #0]
 8020a06:	68a2      	ldr	r2, [r4, #8]
 8020a08:	1e51      	subs	r1, r2, #1
 8020a0a:	60a1      	str	r1, [r4, #8]
 8020a0c:	b192      	cbz	r2, 8020a34 <_scanf_i+0xb8>
 8020a0e:	6832      	ldr	r2, [r6, #0]
 8020a10:	1c51      	adds	r1, r2, #1
 8020a12:	6031      	str	r1, [r6, #0]
 8020a14:	7812      	ldrb	r2, [r2, #0]
 8020a16:	f805 2b01 	strb.w	r2, [r5], #1
 8020a1a:	6872      	ldr	r2, [r6, #4]
 8020a1c:	3a01      	subs	r2, #1
 8020a1e:	2a00      	cmp	r2, #0
 8020a20:	6072      	str	r2, [r6, #4]
 8020a22:	dc07      	bgt.n	8020a34 <_scanf_i+0xb8>
 8020a24:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020a28:	4631      	mov	r1, r6
 8020a2a:	4650      	mov	r0, sl
 8020a2c:	4790      	blx	r2
 8020a2e:	2800      	cmp	r0, #0
 8020a30:	f040 8085 	bne.w	8020b3e <_scanf_i+0x1c2>
 8020a34:	f10b 0b01 	add.w	fp, fp, #1
 8020a38:	f1bb 0f03 	cmp.w	fp, #3
 8020a3c:	d1cb      	bne.n	80209d6 <_scanf_i+0x5a>
 8020a3e:	6863      	ldr	r3, [r4, #4]
 8020a40:	b90b      	cbnz	r3, 8020a46 <_scanf_i+0xca>
 8020a42:	230a      	movs	r3, #10
 8020a44:	6063      	str	r3, [r4, #4]
 8020a46:	6863      	ldr	r3, [r4, #4]
 8020a48:	4945      	ldr	r1, [pc, #276]	; (8020b60 <_scanf_i+0x1e4>)
 8020a4a:	6960      	ldr	r0, [r4, #20]
 8020a4c:	1ac9      	subs	r1, r1, r3
 8020a4e:	f000 f889 	bl	8020b64 <__sccl>
 8020a52:	f04f 0b00 	mov.w	fp, #0
 8020a56:	68a3      	ldr	r3, [r4, #8]
 8020a58:	6822      	ldr	r2, [r4, #0]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	d03d      	beq.n	8020ada <_scanf_i+0x15e>
 8020a5e:	6831      	ldr	r1, [r6, #0]
 8020a60:	6960      	ldr	r0, [r4, #20]
 8020a62:	f891 c000 	ldrb.w	ip, [r1]
 8020a66:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020a6a:	2800      	cmp	r0, #0
 8020a6c:	d035      	beq.n	8020ada <_scanf_i+0x15e>
 8020a6e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020a72:	d124      	bne.n	8020abe <_scanf_i+0x142>
 8020a74:	0510      	lsls	r0, r2, #20
 8020a76:	d522      	bpl.n	8020abe <_scanf_i+0x142>
 8020a78:	f10b 0b01 	add.w	fp, fp, #1
 8020a7c:	f1b9 0f00 	cmp.w	r9, #0
 8020a80:	d003      	beq.n	8020a8a <_scanf_i+0x10e>
 8020a82:	3301      	adds	r3, #1
 8020a84:	f109 39ff 	add.w	r9, r9, #4294967295
 8020a88:	60a3      	str	r3, [r4, #8]
 8020a8a:	6873      	ldr	r3, [r6, #4]
 8020a8c:	3b01      	subs	r3, #1
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	6073      	str	r3, [r6, #4]
 8020a92:	dd1b      	ble.n	8020acc <_scanf_i+0x150>
 8020a94:	6833      	ldr	r3, [r6, #0]
 8020a96:	3301      	adds	r3, #1
 8020a98:	6033      	str	r3, [r6, #0]
 8020a9a:	68a3      	ldr	r3, [r4, #8]
 8020a9c:	3b01      	subs	r3, #1
 8020a9e:	60a3      	str	r3, [r4, #8]
 8020aa0:	e7d9      	b.n	8020a56 <_scanf_i+0xda>
 8020aa2:	f1bb 0f02 	cmp.w	fp, #2
 8020aa6:	d1ae      	bne.n	8020a06 <_scanf_i+0x8a>
 8020aa8:	6822      	ldr	r2, [r4, #0]
 8020aaa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8020aae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8020ab2:	d1bf      	bne.n	8020a34 <_scanf_i+0xb8>
 8020ab4:	2310      	movs	r3, #16
 8020ab6:	6063      	str	r3, [r4, #4]
 8020ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020abc:	e7a2      	b.n	8020a04 <_scanf_i+0x88>
 8020abe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8020ac2:	6022      	str	r2, [r4, #0]
 8020ac4:	780b      	ldrb	r3, [r1, #0]
 8020ac6:	f805 3b01 	strb.w	r3, [r5], #1
 8020aca:	e7de      	b.n	8020a8a <_scanf_i+0x10e>
 8020acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020ad0:	4631      	mov	r1, r6
 8020ad2:	4650      	mov	r0, sl
 8020ad4:	4798      	blx	r3
 8020ad6:	2800      	cmp	r0, #0
 8020ad8:	d0df      	beq.n	8020a9a <_scanf_i+0x11e>
 8020ada:	6823      	ldr	r3, [r4, #0]
 8020adc:	05d9      	lsls	r1, r3, #23
 8020ade:	d50d      	bpl.n	8020afc <_scanf_i+0x180>
 8020ae0:	42bd      	cmp	r5, r7
 8020ae2:	d909      	bls.n	8020af8 <_scanf_i+0x17c>
 8020ae4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020ae8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020aec:	4632      	mov	r2, r6
 8020aee:	4650      	mov	r0, sl
 8020af0:	4798      	blx	r3
 8020af2:	f105 39ff 	add.w	r9, r5, #4294967295
 8020af6:	464d      	mov	r5, r9
 8020af8:	42bd      	cmp	r5, r7
 8020afa:	d028      	beq.n	8020b4e <_scanf_i+0x1d2>
 8020afc:	6822      	ldr	r2, [r4, #0]
 8020afe:	f012 0210 	ands.w	r2, r2, #16
 8020b02:	d113      	bne.n	8020b2c <_scanf_i+0x1b0>
 8020b04:	702a      	strb	r2, [r5, #0]
 8020b06:	6863      	ldr	r3, [r4, #4]
 8020b08:	9e01      	ldr	r6, [sp, #4]
 8020b0a:	4639      	mov	r1, r7
 8020b0c:	4650      	mov	r0, sl
 8020b0e:	47b0      	blx	r6
 8020b10:	f8d8 3000 	ldr.w	r3, [r8]
 8020b14:	6821      	ldr	r1, [r4, #0]
 8020b16:	1d1a      	adds	r2, r3, #4
 8020b18:	f8c8 2000 	str.w	r2, [r8]
 8020b1c:	f011 0f20 	tst.w	r1, #32
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	d00f      	beq.n	8020b44 <_scanf_i+0x1c8>
 8020b24:	6018      	str	r0, [r3, #0]
 8020b26:	68e3      	ldr	r3, [r4, #12]
 8020b28:	3301      	adds	r3, #1
 8020b2a:	60e3      	str	r3, [r4, #12]
 8020b2c:	1bed      	subs	r5, r5, r7
 8020b2e:	44ab      	add	fp, r5
 8020b30:	6925      	ldr	r5, [r4, #16]
 8020b32:	445d      	add	r5, fp
 8020b34:	6125      	str	r5, [r4, #16]
 8020b36:	2000      	movs	r0, #0
 8020b38:	b007      	add	sp, #28
 8020b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b3e:	f04f 0b00 	mov.w	fp, #0
 8020b42:	e7ca      	b.n	8020ada <_scanf_i+0x15e>
 8020b44:	07ca      	lsls	r2, r1, #31
 8020b46:	bf4c      	ite	mi
 8020b48:	8018      	strhmi	r0, [r3, #0]
 8020b4a:	6018      	strpl	r0, [r3, #0]
 8020b4c:	e7eb      	b.n	8020b26 <_scanf_i+0x1aa>
 8020b4e:	2001      	movs	r0, #1
 8020b50:	e7f2      	b.n	8020b38 <_scanf_i+0x1bc>
 8020b52:	bf00      	nop
 8020b54:	08023bdc 	.word	0x08023bdc
 8020b58:	0801ef3d 	.word	0x0801ef3d
 8020b5c:	08020ce1 	.word	0x08020ce1
 8020b60:	0802630f 	.word	0x0802630f

08020b64 <__sccl>:
 8020b64:	b570      	push	{r4, r5, r6, lr}
 8020b66:	780b      	ldrb	r3, [r1, #0]
 8020b68:	4604      	mov	r4, r0
 8020b6a:	2b5e      	cmp	r3, #94	; 0x5e
 8020b6c:	bf0b      	itete	eq
 8020b6e:	784b      	ldrbeq	r3, [r1, #1]
 8020b70:	1c48      	addne	r0, r1, #1
 8020b72:	1c88      	addeq	r0, r1, #2
 8020b74:	2200      	movne	r2, #0
 8020b76:	bf08      	it	eq
 8020b78:	2201      	moveq	r2, #1
 8020b7a:	1e61      	subs	r1, r4, #1
 8020b7c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8020b80:	f801 2f01 	strb.w	r2, [r1, #1]!
 8020b84:	42a9      	cmp	r1, r5
 8020b86:	d1fb      	bne.n	8020b80 <__sccl+0x1c>
 8020b88:	b90b      	cbnz	r3, 8020b8e <__sccl+0x2a>
 8020b8a:	3801      	subs	r0, #1
 8020b8c:	bd70      	pop	{r4, r5, r6, pc}
 8020b8e:	f082 0101 	eor.w	r1, r2, #1
 8020b92:	54e1      	strb	r1, [r4, r3]
 8020b94:	1c42      	adds	r2, r0, #1
 8020b96:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8020b9a:	2d2d      	cmp	r5, #45	; 0x2d
 8020b9c:	f102 36ff 	add.w	r6, r2, #4294967295
 8020ba0:	4610      	mov	r0, r2
 8020ba2:	d006      	beq.n	8020bb2 <__sccl+0x4e>
 8020ba4:	2d5d      	cmp	r5, #93	; 0x5d
 8020ba6:	d0f1      	beq.n	8020b8c <__sccl+0x28>
 8020ba8:	b90d      	cbnz	r5, 8020bae <__sccl+0x4a>
 8020baa:	4630      	mov	r0, r6
 8020bac:	e7ee      	b.n	8020b8c <__sccl+0x28>
 8020bae:	462b      	mov	r3, r5
 8020bb0:	e7ef      	b.n	8020b92 <__sccl+0x2e>
 8020bb2:	7816      	ldrb	r6, [r2, #0]
 8020bb4:	2e5d      	cmp	r6, #93	; 0x5d
 8020bb6:	d0fa      	beq.n	8020bae <__sccl+0x4a>
 8020bb8:	42b3      	cmp	r3, r6
 8020bba:	dcf8      	bgt.n	8020bae <__sccl+0x4a>
 8020bbc:	4618      	mov	r0, r3
 8020bbe:	3001      	adds	r0, #1
 8020bc0:	4286      	cmp	r6, r0
 8020bc2:	5421      	strb	r1, [r4, r0]
 8020bc4:	dcfb      	bgt.n	8020bbe <__sccl+0x5a>
 8020bc6:	43d8      	mvns	r0, r3
 8020bc8:	4430      	add	r0, r6
 8020bca:	1c5d      	adds	r5, r3, #1
 8020bcc:	42b3      	cmp	r3, r6
 8020bce:	bfa8      	it	ge
 8020bd0:	2000      	movge	r0, #0
 8020bd2:	182b      	adds	r3, r5, r0
 8020bd4:	3202      	adds	r2, #2
 8020bd6:	e7de      	b.n	8020b96 <__sccl+0x32>

08020bd8 <_strtol_l.isra.0>:
 8020bd8:	2b01      	cmp	r3, #1
 8020bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bde:	d001      	beq.n	8020be4 <_strtol_l.isra.0+0xc>
 8020be0:	2b24      	cmp	r3, #36	; 0x24
 8020be2:	d906      	bls.n	8020bf2 <_strtol_l.isra.0+0x1a>
 8020be4:	f7fc fbe2 	bl	801d3ac <__errno>
 8020be8:	2316      	movs	r3, #22
 8020bea:	6003      	str	r3, [r0, #0]
 8020bec:	2000      	movs	r0, #0
 8020bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bf2:	4f3a      	ldr	r7, [pc, #232]	; (8020cdc <_strtol_l.isra.0+0x104>)
 8020bf4:	468e      	mov	lr, r1
 8020bf6:	4676      	mov	r6, lr
 8020bf8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020bfc:	5de5      	ldrb	r5, [r4, r7]
 8020bfe:	f015 0508 	ands.w	r5, r5, #8
 8020c02:	d1f8      	bne.n	8020bf6 <_strtol_l.isra.0+0x1e>
 8020c04:	2c2d      	cmp	r4, #45	; 0x2d
 8020c06:	d134      	bne.n	8020c72 <_strtol_l.isra.0+0x9a>
 8020c08:	f89e 4000 	ldrb.w	r4, [lr]
 8020c0c:	f04f 0801 	mov.w	r8, #1
 8020c10:	f106 0e02 	add.w	lr, r6, #2
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	d05c      	beq.n	8020cd2 <_strtol_l.isra.0+0xfa>
 8020c18:	2b10      	cmp	r3, #16
 8020c1a:	d10c      	bne.n	8020c36 <_strtol_l.isra.0+0x5e>
 8020c1c:	2c30      	cmp	r4, #48	; 0x30
 8020c1e:	d10a      	bne.n	8020c36 <_strtol_l.isra.0+0x5e>
 8020c20:	f89e 4000 	ldrb.w	r4, [lr]
 8020c24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020c28:	2c58      	cmp	r4, #88	; 0x58
 8020c2a:	d14d      	bne.n	8020cc8 <_strtol_l.isra.0+0xf0>
 8020c2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020c30:	2310      	movs	r3, #16
 8020c32:	f10e 0e02 	add.w	lr, lr, #2
 8020c36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020c3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020c3e:	2600      	movs	r6, #0
 8020c40:	fbbc f9f3 	udiv	r9, ip, r3
 8020c44:	4635      	mov	r5, r6
 8020c46:	fb03 ca19 	mls	sl, r3, r9, ip
 8020c4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020c4e:	2f09      	cmp	r7, #9
 8020c50:	d818      	bhi.n	8020c84 <_strtol_l.isra.0+0xac>
 8020c52:	463c      	mov	r4, r7
 8020c54:	42a3      	cmp	r3, r4
 8020c56:	dd24      	ble.n	8020ca2 <_strtol_l.isra.0+0xca>
 8020c58:	2e00      	cmp	r6, #0
 8020c5a:	db1f      	blt.n	8020c9c <_strtol_l.isra.0+0xc4>
 8020c5c:	45a9      	cmp	r9, r5
 8020c5e:	d31d      	bcc.n	8020c9c <_strtol_l.isra.0+0xc4>
 8020c60:	d101      	bne.n	8020c66 <_strtol_l.isra.0+0x8e>
 8020c62:	45a2      	cmp	sl, r4
 8020c64:	db1a      	blt.n	8020c9c <_strtol_l.isra.0+0xc4>
 8020c66:	fb05 4503 	mla	r5, r5, r3, r4
 8020c6a:	2601      	movs	r6, #1
 8020c6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020c70:	e7eb      	b.n	8020c4a <_strtol_l.isra.0+0x72>
 8020c72:	2c2b      	cmp	r4, #43	; 0x2b
 8020c74:	bf08      	it	eq
 8020c76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020c7a:	46a8      	mov	r8, r5
 8020c7c:	bf08      	it	eq
 8020c7e:	f106 0e02 	addeq.w	lr, r6, #2
 8020c82:	e7c7      	b.n	8020c14 <_strtol_l.isra.0+0x3c>
 8020c84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020c88:	2f19      	cmp	r7, #25
 8020c8a:	d801      	bhi.n	8020c90 <_strtol_l.isra.0+0xb8>
 8020c8c:	3c37      	subs	r4, #55	; 0x37
 8020c8e:	e7e1      	b.n	8020c54 <_strtol_l.isra.0+0x7c>
 8020c90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020c94:	2f19      	cmp	r7, #25
 8020c96:	d804      	bhi.n	8020ca2 <_strtol_l.isra.0+0xca>
 8020c98:	3c57      	subs	r4, #87	; 0x57
 8020c9a:	e7db      	b.n	8020c54 <_strtol_l.isra.0+0x7c>
 8020c9c:	f04f 36ff 	mov.w	r6, #4294967295
 8020ca0:	e7e4      	b.n	8020c6c <_strtol_l.isra.0+0x94>
 8020ca2:	2e00      	cmp	r6, #0
 8020ca4:	da05      	bge.n	8020cb2 <_strtol_l.isra.0+0xda>
 8020ca6:	2322      	movs	r3, #34	; 0x22
 8020ca8:	6003      	str	r3, [r0, #0]
 8020caa:	4665      	mov	r5, ip
 8020cac:	b942      	cbnz	r2, 8020cc0 <_strtol_l.isra.0+0xe8>
 8020cae:	4628      	mov	r0, r5
 8020cb0:	e79d      	b.n	8020bee <_strtol_l.isra.0+0x16>
 8020cb2:	f1b8 0f00 	cmp.w	r8, #0
 8020cb6:	d000      	beq.n	8020cba <_strtol_l.isra.0+0xe2>
 8020cb8:	426d      	negs	r5, r5
 8020cba:	2a00      	cmp	r2, #0
 8020cbc:	d0f7      	beq.n	8020cae <_strtol_l.isra.0+0xd6>
 8020cbe:	b10e      	cbz	r6, 8020cc4 <_strtol_l.isra.0+0xec>
 8020cc0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020cc4:	6011      	str	r1, [r2, #0]
 8020cc6:	e7f2      	b.n	8020cae <_strtol_l.isra.0+0xd6>
 8020cc8:	2430      	movs	r4, #48	; 0x30
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	d1b3      	bne.n	8020c36 <_strtol_l.isra.0+0x5e>
 8020cce:	2308      	movs	r3, #8
 8020cd0:	e7b1      	b.n	8020c36 <_strtol_l.isra.0+0x5e>
 8020cd2:	2c30      	cmp	r4, #48	; 0x30
 8020cd4:	d0a4      	beq.n	8020c20 <_strtol_l.isra.0+0x48>
 8020cd6:	230a      	movs	r3, #10
 8020cd8:	e7ad      	b.n	8020c36 <_strtol_l.isra.0+0x5e>
 8020cda:	bf00      	nop
 8020cdc:	080261b9 	.word	0x080261b9

08020ce0 <_strtol_r>:
 8020ce0:	f7ff bf7a 	b.w	8020bd8 <_strtol_l.isra.0>

08020ce4 <__submore>:
 8020ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ce8:	460c      	mov	r4, r1
 8020cea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020cf0:	4299      	cmp	r1, r3
 8020cf2:	d11d      	bne.n	8020d30 <__submore+0x4c>
 8020cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020cf8:	f7fd f99e 	bl	801e038 <_malloc_r>
 8020cfc:	b918      	cbnz	r0, 8020d06 <__submore+0x22>
 8020cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8020d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020d0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8020d0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020d10:	6360      	str	r0, [r4, #52]	; 0x34
 8020d12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8020d16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020d1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020d1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8020d22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8020d26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020d2a:	6020      	str	r0, [r4, #0]
 8020d2c:	2000      	movs	r0, #0
 8020d2e:	e7e8      	b.n	8020d02 <__submore+0x1e>
 8020d30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8020d32:	0077      	lsls	r7, r6, #1
 8020d34:	463a      	mov	r2, r7
 8020d36:	f7fe fe77 	bl	801fa28 <_realloc_r>
 8020d3a:	4605      	mov	r5, r0
 8020d3c:	2800      	cmp	r0, #0
 8020d3e:	d0de      	beq.n	8020cfe <__submore+0x1a>
 8020d40:	eb00 0806 	add.w	r8, r0, r6
 8020d44:	4601      	mov	r1, r0
 8020d46:	4632      	mov	r2, r6
 8020d48:	4640      	mov	r0, r8
 8020d4a:	f7fd f8ff 	bl	801df4c <memcpy>
 8020d4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8020d52:	f8c4 8000 	str.w	r8, [r4]
 8020d56:	e7e9      	b.n	8020d2c <__submore+0x48>

08020d58 <_init>:
 8020d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d5a:	bf00      	nop
 8020d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020d5e:	bc08      	pop	{r3}
 8020d60:	469e      	mov	lr, r3
 8020d62:	4770      	bx	lr

08020d64 <_fini>:
 8020d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d66:	bf00      	nop
 8020d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020d6a:	bc08      	pop	{r3}
 8020d6c:	469e      	mov	lr, r3
 8020d6e:	4770      	bx	lr

08020d70 <__time_veneer>:
 8020d70:	e51ff004 	ldr	pc, [pc, #-4]	; 8020d74 <__time_veneer+0x4>
 8020d74:	200005b8 	.word	0x200005b8
